I N T E R F A C I L E : L ingu is t i c  Coverage  and Query  Reformulat ion  
Yvet te  Math ieu  Paul  Sabat ie r  
CNRS - LADL, 
Un ivers i t4  Par is  7 
Tour  Cent ra le  9 E 
2 P lace  Juss leu  
75005 Par is  
I. INTRODUCTION 
The exper ience  we have  ga ined  in des ign ing  
\[3,6,7\]  and us ing  natura l  lanauage 
in ter faces  has led us to deve lop  a genera l  
natura l  language system,  INTERFAC\ [LE ,  
invo lv ing  the fo l low ing  pr inc ip les  : 
the l ingu is t i c  coverage  must  be 
e lementary  but must  inc lude  phenomena 
that a l low a rapid,  conc ise  and 
spontaneous  in teract ion ,  such as 
anapho~a (e l l ips is ,  pronouns ,  etc.)  
the l ingu is t i c  competence  and l imi ts  
of the in ter face  must be eas i ly  and 
rap id ly  perce ived  by the user.  
the in ter face  must  be equ ipped w i th  
s t ra teg ies  and procedures  for lead ing  
the user  to ad jus t  h is  l ingu is t i c  
competence  to the capac i t ies  of the 
system. 
We have i l lus t ra ted  these  pr inc ip les  in an 
app l i ca t ion  : a natura l  language (French)  
in ter face  for acqu i r ing  the formal  commands  
of some operat ing  sys tem languages .  (The 
examples  g iven  here  concern  DCL of D ig i ta l  
Equ ipment  Corporat ion) .  
2. INTERFACILE 's  ARCHITECTURE 
The sys tem is composed of : 
- a por tab le  syntact i c  g rammar  of F rench  
wr i t ten  in the fo rmal i sm of 
Metamorphos is  Grammars  \[2\]. 
- a domain  dependent  lex icon-grammar  \[4\]. 
- a domain  dependent  knowledge base  
wr i t ten  in a subset  of p red icate  logic  
(Horn C lauses) .  
Operat ing  on these  l ingu is t i c  data  and 
domain  knowledge : 
- a syntact i c  parser  coup led  w i th  the 
grammar  and the lex icon-grammar  (i) 
p roduces  in termediate  ana lyses  of 
quest ions ,  and (2) generates  some 
messages  in case of errors.  
- a semant lc  parser  t rans forms the 
syntact i c  ana lys i s  into a semant ic  
representat ion  by consu l t ing  the 
knowledge base. 
- an eva luator  consu l ts  the knowledge 
base  and produces  answers  to quest ions  
g iven  the i r  semant ic  representat ion .  
- a genera l  sys tem gu ides  the user  and 
he lps  h im to fo rmulate  and re formulate  
his  quer ies .  
The sys tem is ent l re ly  programmed in PROLOG 
II and runs on var ious  computers  (VAX, SPS  
and micro -computers ) .  Responses  are g iven  
ins tantaneous ly .  
Eere  is an example  of a d ia logue  w i th  
INTERFACILE  : 
> comment  c rder  un f l ch le r  ? 
- ut i l l sez  la commande : 
CREATE nomf lch le r  
> comment  l ' impr imer  ? 
- u t i l i sez  la commande : 
PR INT nom?ich ier  
> comment  mod i f ie r  son contenu ? 
- u t i l i sez  l 'dd l teur  avec la 
commande : 
EDIT nomf ich le r  
> comment  cop ier  un f i ch ie r  dane un 
rdper to l re  ? 
u t l l l sez  la commande : 
COPY nomf lch ie r  \ [nomrdper to i re \ ]  
> comment  renommer  ce dern ier  ? 
- ut i l i sez  la commands  : 
RENAME/DIRECTORY \ [anc ienrdper to i re \ ]  
\ [nouveaurdper to i re \ ]  
<Dia logue  I> 
(The prompt  ">" precedes  the user ' s  quer ies ,  
the prompt  ..... p recedes  INTERFACILE 's  
answers .  Eng l i sh  t rans la t ions  of the 
d ia logues  are  g iven  in the append ix ) .  
46 
3. L INGUIST IC  COVERAGE 
INTERFACILE  hand les  on ly  e lementary  
s~ntact l c  s t ruc tures?  I n  order  to ensure  
a conc ise  and  spontaneous  d ia logue ,  
proforsLs have  been in t roduced such  as : 
' ?  pronouns  ( le, la, les, en, y, lu i ,  
I eur  . . . .  ) 
-possess ives  (son,  sa, ses  . . . .  ) 
demonst ra t lves  (ce lu i - c i ,  ceux-c i ,  
ce dern ie r~ . . . )  
If an  ambigu i ty  is detected  dur ing  the  
reso lu i : ion  of a p ro fovm,  INTERFACILF ,  asks  a 
quest ion~ as in the  fo\] . \ ]owing d ia logue  : 
> comment  cop ier  un f l ch ie r  dans  un 
rSpe~to l~ 'e  ? 
"- u t l l i sez  la commands  : 
COPY nomf ich ie r  \ [nomrQper ' to i re \ ]  
> comment  l ' e f f a c e r  ? 
? " '~ 1 ' ~' renvo i  e ~ : 
f i ch ie r  ? (i 
Pgper to i re  ? (2 
tapez  le num4ro  de vo'tre cho ix .  
<Dia logue  2> 
Pro form r~so l t t t lon  is based  so le ly  on 
lex ica l  a~d syntact i c  in fo rmat ion .  Th is  
s t ra tegy  Is v i ta l  in the  f ramework  of a 
didact. ic  sys tem or iented  towards  beg inners  
as the  fo l low ing  d ia logue  shows  : 
> comment  envoyer  un message  A un 
ut i l i sa teur  ? 
u t i l i sez  la commands  : 
HAIL  
> comment  le suppr imer  ? 
" le"  renvo ie  & : 
message  ? 
u t i l i sa teur  ? 
%apez  le num4ro  de vot re  cho ix .  
(1 )  
(2 )  
> 2 
INTERFACILE  n 'en  sa i t  r ien ,  ma is  
sa l t  comment  : 
envoyer  un message  
6cr i re  un message  
suppr imer  un f i ch ie r  
suppr imer  un  r6per to ive  
suppr imer  un message  
<Dia logue  3> 
If the  pro form reso lu t ion  had  been based  on 
the  domain  semant ics ,  the  sys tem wou ld  have  
produced %he answer  for" suppress ing  a 
m e s s a g e .  
4.  QUERY REFORHULAT ION 
G iven  the  p le thora  of syntact i c  s t ruc tures  
and  the  complex i ty  of menta l  p rocesses  
invo lved  in natura l  language unders tand ing ,  
the  l ingu is t i c  competence  of in%ef faces  yet  
remains  l im i ted .  If we  resor t  to such  
sys tems to request  ~ serv ice  or  obta in  
in fo rmat ion  that  we  lack ,  we genera l ly  know 
much more  than  the  in ter face  i t se l f  on the  
var ious  ways  fo r  fo~mulat lng  our  query .  
Ue argue  that  the  qua l i ty  of a natura l  
language in ter face  must  be es t imated  not  
on ly  in te rms of i ts  l ingu is t i c  coverage  
but  a l so  in te rms of the  procedures  for 
dea l ing  w i th  incor rect ,  ex t ragrammat ica l  
( i .e .  cor rec t  but  not  expected  b~ the  
in ter face)  or semant ica l ly  dev iant  
sentences .  
Knowing  that  e r ror  recovery  is a complex  
task  in the  " res t r i c ted"  f ramework  of 
p rogramming languages  ( l im i ted  syntax  and  
rJ. gorous ly  de f ined  semant ics ) ,  one can 
apprec ia te  -the d i f f i cu l ty  of endowing  
natura l  language in ter faces  w i th  such  
capab i l i t i es .  
One  approach  to "the prob lem of e r ror  
recover Jng  is to "accept"  user  quer ies  that  
dev ia te  f rom the sys tem's  expectat ions  and 
(unbeknown to the  user )  man ipu la te  them 
in to  a fo rm that  can  be ana lysed .  FoP an 
overv iew of th i s  approach ,  see \[1\]. Th is  
method  is cos t ly  to imp lement ,  and  moreover  
}%as 'two theoret i ca l  fau l t s  : 
(I) There  is no guarantee  that  the  
sys tem's  in terpretat ion  of a "dev iant"  
query  w i l l  cor respond to the  user ' s  
in tent ion  in pos ing  the  quest ion .  
(2) There  w i l l  a lways  be  a l im i t  to the  
degree  of dev ia t ion  the  sys tem can  to le ra te  
be fore  it g ives  up t ry ing  to ana lyse  a user  
query .  But  if the  t rans format ion  of dev iant  
quer ies  in to  recogn izab le  s t ruc tures  is 
per fo rmed automat ica l ly ,  the  user  w i l l  
*lever know where  th i s  l im i t  l les ,  and  may 
be l ieve  that  the  sys tem can  make sense  of 
anyth ing  he enters .  The  d i s t inc t ion  between 
the  sentences  the  sys tem in terprets  
cor rec t ly  i~nd those  wh ich  it ent i re ly  
re jec ts  w i l l  seem arb i t ra ry  to h im.  
The  s t ra tegy  deve lopped and  imp lemented  in 
INTERFACILE  is qu i te  d i f fe rent .  Our  
ph i losophy  is not  to mis lead  the  user  
concern ing  the  sys tem's  rea l  capab i l i t i es ,  
but  ra ther  to lead  h i s  l ingu is t i c  competence  
to that  of the  in ter face .  
Here  is an example  i l l us t ra t ing  such  a 
s t ra tegy  : 
> comment  a jouter  A un f i ch ie r  is contenu  
d 'un  f l ch ie r  ? 
- pour  "a jouter" ,  u t i l i sez  la 
const ruct ion  : 
47 
a jouter  \ [que lque  chose\]  
& \ [que lque  chose\]  
compl4tez  (ou tapez  / pour  annu le t )  
> comment  a jouter  ... 
<Dia logue  4> 
Here  is another  example  : 
> comment  envoyer  un message dans un 
termina l  ? 
- pour  "envoyer" ,  u t i l i sez  les 
const ruct ions  : 
envoyer  \ [que lque  chose\]  
& \ [que lqu 'un\ ]  
envoyer  \ [que lque  chose\]  
sur \ [que lque  chose\]  
compl4tez  (ou tapez  / pour  annu le t )  
> comment  envoyer  ... 
<Dia logue  5> 
INTERFACILE  exp la ins  exact ly  wh ich  part  of 
the quest ion  it doesn ' t  unders tand  : an 
unknown word,  a verb  w i th  an incor rect  
p repos i t ion  or unexpected  order  of 
complements ,  etc. In case o? spe l l ing  
er rors ,  so lu t ions  for cor rect ion  are 
g iven  to the user  \[8\]. 
To gu ide  the user  in re formulat ing  his  
query,  the grammar  and the lex icon-grammar  
are consu l te~ as knowledge bases.  The user  
may re formulate  his  query  w i th  the 
in format ion  g iven  by INTERFACILE .  
(At any  moment ,  the user  can a lso  obta in  the 
l i s ts  of verbs,  nouns,  p repos i t ions ,  
p ronouns ,  etc.) .  
When the user  has an er roneous  or incomplete  
v iew of the app l i ca t ion  domain,  INTERFACILE  
po in ts  out h is  misunders tand ing ,  as in the 
fo l low ing  d ia logue  : 
> comment  impr imer  le f ich ler  d 'une  
vers ion  ? 
f l ch ler  de quoi  ? INTERFACILE  par le  
p lu t f t  de : 
f i ch ier  (tout s implement )  
f i ch ier  d 'un  r~per to l re  
vers ion  d 'un  f i ch ier  
<Dia logue  6> 
Another  example  : 
> comment  in i t ia l i ser  un f i ch ier  ? 
INTERFACILE  n 'en  salt  r ien, mais  
sa l t  comment  : 
48 
cr4er  un f i ch ie r  
~d l ter  un f i ch le r  
e f facer  un f i ch ler  
in i t la l l ss r  un d isque  
in i t ia l i ser  une d lsquet te  
<Dia logue  7> 
The gu idance  g iven  here  goes  beyond 
l ingu is t i c  re formulat ion .  It concerns  the 
semant ics  of the app l i ca t ion  domain .  Note  
that the in format ion  g iven  to the user  is 
not  p reprogrammed,  but is (I) deduced f rom 
the knowledge base  and (2) generated  by the 
l ingu is t i c  component  (grammar,  
lex icon-grammar  and parsers ) .  
5. CONCLUSION 
As far as the domain  of app l i ca t ion  is 
concerned,  INTERFACILE  has much in common 
wi th  sys tems l ike UC \[9\] or INTERIX  \[5\]. 
The or ig ina l i ty  of our sys tem l ies in the 
e f fo r t  we have  devoted  to : 
- l i ngu is t i c  phenomena such  as anaphora  
that ensure  a natura l  d ia logue .  
s t ra teg ies  and procedures  for 
re formulat ion  in order  to l ive w i th  the 
unavo idab le  l ingu is t i c  l im i ta t ions  of 
any in ter face .  
Our research  and exper ience  in deve lop ing  
app l i ca t ions  in these  two domains  have  led 
us to be l ieve  that it is not  p ract i ca l  to 
add procedures  to an a lbeady  ex is t ing  
sys tem to make it user -?r lend ly .  On the 
cont rary ,  these  prob lems must  be taken  into 
account  in the des ign  phase,  as we have  done  
in des ign ing  INTERFACILE .  
6. ACKNOWLEDGEMENTS 
We are gra'te?ul to Hannah B lau  for her 
f ru i t fu l  comments  on a pre l iminary  vers ion  
of th is  paper.  
We thank  the Cent re  Nond ia l  d ' In fo rmat ique  
(CNI, Par is )  for g iv ing  us the oppor tun i ty  
to deve lop  a vers ion  of INTERFACILE  on a 
VAX 785. 
7. REFERENCES 
\[i\] Carbone l l  J., Hayes  P., "Recovery  
S t ra teg ies  for Pars ing  Ext ragrammat ica l  
Language" ,  Amer ican  Journa l  of Computat iona l  
L ingu is t i cs ,  9, 3-4, 1983. 
\[2\] Co lmerauer  A., Les Grammai res  de 
N4tamorphoses ,  GIA, Luminy,  Un ivers i t4  
A lx -Narse i l l e  If, 1975, and "Metamorphos is  
Grammars"  in Natura l  Language Communicat ion  
Wi th  Computers ,  Bo lc  L. ed., SpDlnger  Ver lag  
1978. 
\[3\] Duch ier  D., Sabat ie r  P.,  INTERFRANCE:  Un 
proto type  d ' in ter face  en langue f ranGa lse ,  
Rappor t  de  recherche ,  CGE,  Harcouss i s ,  1982.  
\[4\] Gross  H. ,  "Lex lcon-Grammars  and  the  
syntact i c  ana lys i s  of F rench" ,  P roc .  of 
COL ING,  Kar l s ruhe ,  1984.  
\[5\] Guez  S. ,  Sabbagh S. ,  " INTERIX :  Un  
sys tbme d 'a ide  & l ' u t l l l sa t ion  d 'Un ix" ,  
Confdrence  AFCET,  Par i s ,  1984.  
\[6\] O l lve l ra  E.,  Pere l ra  L., Sabat ie r  P., 
"ORBI :  An  exper t  sys tem fo r  env i ronmenta l  
resources  eva luat ion  through natura l  
language,  P roc .  of F i r s t  In ternat iona l  Log ic  
P rogramming Conference ,  Marse l l l e ,  1982.  
\[7\] P ique  J .F . ,  Sabat ie r  P., "An in fo rmat ive ,  
adaptab le  and  e f f i c ient  natura l  language 
consu l tab le  database  sys tem" ,  P roc .  of ECAI  
Conference ,  1982.  
\[8\] Sabat le r  P., A P ro log  program for  
spe l l ing  cor rec t ion ,  Note  techn ique ,  LADL,  
1985. 
\[9\] U i lensky  R.,  "Ta lk ing  to  UNIX  in Eng l i sh :  
An  overv iew of UC" P roc .  of AAAI  Conference ,  
1982.  
APPENDIX  : T rans la t ion  of  sample  d ia logues  
D ia logue  i : 
> how can  I c reate  a f i l e  ? 
- use  the  command : 
CREATE f i l ename 
> how can  I p r in t  it ? 
- use  the  command : 
PR INT  f l l ename 
> how can  I modi fy  i ts  contents  ? 
- use  the ed i to r ,  by the 
command : 
EDIT f i l ename 
> how can  I copy  a f i l e  in to  a 
d i rec tory  ? 
- use  the  command : 
COPY f i l ename \ [d l rec toryname\ ]  
> how can  I rename the  la t te r  ? 
- use  the  command : 
RENAME/DIRECTORY \ [o ldd i rec tory \ ]  
\ [newdi rec tory \ ]  
D ia logue  2 : 
> how can  I Copy a f i l e  in to  a d i rec tory?  
- use  the  command : 
COPY f i l ename \ [d i rec toryname\ ]  
> how can  I de le te  it ? 
- " i t "  re fe rs  to  : 
f i l e  ? (i) 
d i rec tory  ? (2) 
enter  the  number  of your  cho ice .  
D ia logue  3 : 
> how can  I send  a message  to a user  ? 
- use  the  command : 
HA IL  
> how can  I suppress  it ? 
- " i t "  re fe rs  to : 
message  ? (I) 
user  ? (2) 
enter  the  number  of your  cho ice .  
>2 
- INTERFACILE  doesn ' t  know,  but  he 
knows  how to : 
send  a message 
wr i te  a message  
suppress  a f i l e  
suppress  a d i rec tory  
suppress  a message  
D ia logue  4 : 
> how can  I append to a f i l e  the  content  
of a f i l e  ? 
for  "append"  use  the  s t ruc ture  : 
append \ [ someth ing \ ]  to \ [ someth ing \ ]  
complete  (or type  / to cance l )  
> how can  I append . . . 
D ia logue  5 : 
> how can  I send  a message  in a te rmina l?  
for  "send" ,  use  the  s t ruc tures  : 
send  \ [ someth ing \ ]  to \ [ somebody\ ]  
send  \ [ someth ing \ ]  on \ [ someth ing \ ]  
complete  (or type  / to cance l )  
> how can  I send  ... 
D ia logue  6 : 
> how can  I prin't a f i l e  of a vers ion  ? 
f i l e  of  what  ? INTERFACILE  "talks 
about  : 
a f i l e  
a f i l e  of a d i rec tory  
a vers ion  of a f i l e  
D ia logue  7 : 
> how can  I in i t ia l i ze  a f i l e  ? 
- INTERFACILE  doesn ' t  know,  but  he 
knows  how to : 
c reate  a f i l e  
ed i t  a f i l e  
de le te  a f i l e  
in i t ia l i ze  a f loppy  d i sk  
in i t ia l i ze  a d i sk  
49 
