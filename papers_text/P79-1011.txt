ON THE AUTOMATIC TRANSFORMATION 
OF CLASS MEMBERSHIP CRITERIA 
Barbara C. Sangster 
Rutgers University 
This paper addresses a problem that may arise in 
c\]assificatzon tasks: the design of procedures for 
matching an instance with a set ~f criteria for class 
membership in such a way as to permit the intelligent 
handling ~f inexact, as well as exact matches. An 
inexact match is a comparlson between an instance and a 
set of criteria (or a second instance) which has the 
result that some, but not all, of the criteria described 
(or exemplified) in the second are found to be satisfied 
in the first. An exact match is such a comparison for 
which all of the criteria of the second are found to be 
satisfied in the first. The approach presented in this 
paper is t~ transform the set of criteria for class 
membership into an exemplary instance of a member of the 
class, which exhibits a set ~f characteristics whose 
presence is necessary and sufficient for membership in 
that class. Use of this exemplary instance during the 
matching process appears to permit important functions 
associated with inexact matching to be easi\]y performed, 
and also to have a beneficial effect on the overaJ\] 
efficiency of the matching process. 
1. INTRODUCTION 
An important common element ~f many projects in 
Artificial Intelligence is the determination of whether 
a particular instance satisfies the criteria for 
membership in a particular class. Frequently, this task 
is a component of a larger one involving a set of 
instances, or a set of classes, or both. This 
determination need not necessarily call for an exact 
match between an instance and a set of criteria, but 
only for the "best ," or "closest ," match, by some 
definition of goodness or closeness. One important 
specification for such tasks is the capability for 
efficient matching procedures; another is the ability 
to perform inexact, as we\]\] as exact matches. 
One step towards achieving efficient matching procedures 
is 50 represent criteria for class membership in the 
same way as descriptions ~f instances. This may be done 
by transforming the set of criteria, through a process 
of symbolic instantiation, into a kind of prototypical 
instance, or exemplary member of the class. This 
permits the use of a simple matching algorithm, such as 
one that merely checks whether required components of 
the definition of the class are also present in the 
description of the instance. This also permits easy 
representation of modifications to the definition, 
whenever the capability of inexact matching is desired. 
Other ways of representing definitions of ciasses might 
be needed for other purposes, however. For example, the 
knowledge-representation language AIMDS would normally 
be expected to represent definitions in a more complex 
manner, involving the use of pattern-directed inference 
rules. These rules may be used, e.g., to identify 
inconsistencies and fill in unknown values. A 
representation of a definition derived through symbolic 
instantiation does not have this wide a range of 
capabilitles, but it does appear to offer advantages 
over the other representation for efficient matching and 
for easy handling of inexact matches. We might, 
The research reported in this paper was partially 
supported by the National Science Foundation under Grant 
#S0C-7811q08 and by the Research Foundation of the State 
University of New York under Grant #150-2197-A. 
therefore, like to be able to translate back and forth 
between the two forms of representation as our needs 
require. 
An algorithm has been devised for automatically 
trans\]ating a definition in one of the two directions -- 
from the form using the pattern-directed inference rules 
intn a simpler, symboJical\]y instantiated form \[11\]. 
This algorithm has been shown to work correctly for any 
well-formed definition in a clearly-defined syntactic 
class \[10\]. The use of the symbolically instantiated 
form for b~th exact and inexact matches is outlined 
here; using a hand-created symbolic instantiation, a 
run demonstrating an exact match is presented. The 
paper conc\]udes with a discussion ~f some implications 
of this apprnach. 
2. INRXAC T MATCHING 
The research project presented in this paper was 
motivated by the need for determining automatically 
whether a set of facts comprising the description of a 
legal case satisfies the conditions expressed in a legs/ 
definition, and, if not, in what respects it fails to 
satisfy those conditions \[8\], \[9\], \[I0\], \[11\], \[13\]. 
The need to perform this task is central to a larger 
project whose purpose is the representation of the 
definitions of certain legal concepts, and of decisions 
based on those concepts. 
inexact matching arises in the legal/judlclal domain 
when a legal class must be assigned to the facts of the 
case at hand, but when an exact match cannot be roland 
between those facts and any of the definitions of 
possible legal classes. In that situation, a reasonable 
first-order approximation to the way real decisions are 
made may be to say that the class whose definition 
offers the "best" or " closest" match to the facts of 
the case at hand is the class that should be assigned to 
the facts in question. That is the approach taken in 
the current project. 
In addition to the application discussed here (the 
assignment of an instance of a knowledge structure to 
one of a set of classes), inexact matching and close 
relatives thereof are also found in several other 
domains within computational linguistics. Inexact 
matching to a knowledge structure may also come into 
play in updating a knowledge base, or in responding to 
queries over a knowledge base \[5\], \[6\]. In the domain 
of syntax, an inexact matching capability makes possible 
the correct interpretation of utterances that are not 
fully grammatical with respect to the grammar being used 
\[7\]. In the domains of speech understanding and 
character recognition, the ability to perform inexact 
matching makes it possible to disregard errors caused by 
such factors as noise or carelessness of the speaker or 
writer. 
When an inexact match of an instance has been 
identified, the first step is to attempt to deal with 
any criteria ~nich were not found to be satisfied in the 
instance, but were not found not to be satisfied either 
-- i.e., the unknowns. At that point, if an exact match 
still has not been achieved, two modes of action are 
possible: the modification of the instance whose 
characterization is being sought, or the modification of 
the criteria by means of which a characterization is 
found. The choice between these two responses (or of 
the way in which they are combined) appears to be a 
function of the domain and sometimes also of the 
particular item in question. In general, in the 
45 
lesallJudlcial domain, the facts of the case, once 
determined, are fixed (~nless new evidence is 
introduced), hut the criteria For assigning a legal 
characterization to those facts may be modified. 
3. I ~ Z ~ ~ E  t ~  ~ A p.mh+mtM~my 
Because of. the importance of  inexact ~atchlnE in the 
legal/judlclal domain, it is desirable to utilize a 
matehir~ procedure that permits useful functions related 
to inexant matching to be performed conveniently. Such 
functions include a way of. easily determining all the 
respects in which attempted exact matches to a 
particular definition might fail , a wey of. easily 
determinln~ what chlln~es to a definition would be 
suf.f.icient For an exact match with a particular case to 
be permitted, and a wey of ensuring that a contemplated 
modif.lcation to a def.inition will not introduce 
inconsistencies. 
Two f.eatures of. a representational scheme that would 
appear to help in performin~ these functions 
conveniently are 
SPEC1) that  the scheme permit  a d i s t inc t ion  to 
be made between those propos i t ions  that  must be 
t~ be true of. any instance satlsfylng the 
def.lnltion and any other  propositions that might 
also be true of. the instance, and 
SPEC2) that  the scheme permit  the former set of. 
propos i t ions  to be expressed in a s imple ,  
ulilf.led wey, so as to  redune or  even e l iminate  
the need for  inf .erencing and o ther  processing 
activities when the ~nt lons  outlined above are 
performed. 
By sat lsfy i~ SPECl, we permit the propositions which 
are central to the matohiDg process to he distir~ulshed 
from any others ;  by sat i s fy ing  SPEC2, we permit  those 
propos i t ions  to be accessed and manipulated (e ,go ,  for  
the inexact  matching Funct ions l i s ted  above) in an 
e f f i c ient  and s t ra ight fo rward  manner. Thus, the 
Fulfillment of  3PECI and SPEC2 slgniflcantly strengthens 
our ability to perform Functions central to the inexact 
matching process. 
A representational scheme that meets these 
specifications has been designed, and an experimental 
implementation performed. The approach used is to 
precede the matching activity proper with a one-tlme 
preprocessing phase, duping Milch the definition is 
automatically transformed from the form in which it is 
originally expressed into a representational scheme 
which appears to be more suitable to the matching task 
at hand. The transformation algorithm makes use of a 
distlnntion between those components of the definition 
wl~ich must be Found to be true and those whose truth 
either may be inferred or else is irrelevant to the 
matching process. The transformation is performed by 
means of a process of ~ inmtRntlat~nn OF the 
deflnition -- the translation of the de/initlon f~'om a 
set of criteria for satisfying the definition into an 
exemplary instance of the concept itself. The 
transformed definition resulting f ro  m this process 
appears to meet the speclf.ications given above. 
The input to the transformation process is a definition 
expressed in two parts: 
CCHPONENTI) a set of propositions eonslsting of 
relations between typed variables organized in 
frame form, and 
CCI4POMENT2) a set of' pattern-directed inference 
rules expressing constraints on how the 
propositions in CCHPONEMTI .my be Instantlated. 
'rite propositions in COHPONENTI include propositions that  
must be found to be true of. any instance satisfying the 
+,,,,,=-,nor ~ o , ~ "  . . . .  
//7 "? "~ 
Yf~NO ;~ p~ec.l 
\]I ? , . , ,o~+~"r 
}.i~ ';'+'+.''''+'. , 
: CONPONENT1 fo r  a s tap le  
n. 
46 
definition, as well as other pr~positions that do not 
have this quality. 
The output from the trans{ormation process that is used 
for matching with an instance is a symbolically 
instantiated form of the definition called the KERNEL 
fo~ the definition. It consists solely of a 
set of propositions expressing relations between 
instances. These are precisely those propositions whose 
truth must be observed in any instance satisfying the 
definition. Constraints on instantiation (COMPONENT2 
above) are reflected in the choice of values for the 
instances in these propositions. Thus the KERNEL 
structure has the properties set forth in SPECI and 
SPEC2 above, and its use during the matching process may 
consequently be expected to help in w~rking with inexact 
matches. For similar reasons, use of the KERNEL 
structure appears also to permit a significant 
improvement in efficiency of the overall matching 
process  \[I0\], \[11\]. 
The propositions input to the transformation process 
(i.e., COMPONENTI) are illustrated, for the definition 
of a kind of corporate reorganization called a 
BREORGANIZATION, in Figure I; the arcs represent 
relations, and the nodes represent the types of the 
instances between which the relations may ho\]d. Several 
of the pattern-directed inference rules input to the 
transformation process (COMPONENT2) for part of the same 
definition are illustrated in Figure 2. The KERNEL 
structure for that definition output by the 
transformation process is illustrated in Figure 3. The 
propositions shown there are the ones whose truth is 
necessary and sufficient for the definition to have 
been met. Bindings constraints between nodes are 
reflected in the labels of the nodes; the nodes in 
Figure 3 represent instances. Thus, the two components 
represented in Figures I and 2 are transformed, for the 
purposes of matching, into the structure represented in 
Figure 3, 
The transformation process is described in more detail 
in \[I0\] and \[11\]; \[10\] also contains an informal proof 
that the transformation algorithm will work correctly 
for all definitions in a well-defined syntactic class. 
~. ~X~CUTIONOFTHEMATCHINOPR~CESS 
Once the transformation of a definition has been 
performed, it need never again be repeated (unless the 
definition itself should change), and the compiled 
KERNEL structure may be used directly whenever a set of 
((EXCHANOE X) 
| FF  
((EXCHANOE X) 
I FF  
C(EXCHANOE X) 
ZFF 
((EXCHANOE X) 
{FF  
TRANSI (TRAI4S T | )  
(X (TRANSFEROR1ACENTOF)  T1)  
(X (TRANSPROP20BJECTQF)  T1)  
(X (TRANSFEROR10LDO~NEROF)  T | )  
(X (TRANSFEROR2 NEWOWNEROF) T I ) \ ]  
TRANS2 (TRN~S 1"2) 
(X (TRANSFEROR2 AOENTOF) T2)  
(X (TRANSPRQP~ OBJECTOF) T2)  
(X (TRANSFEROR2 OLDONt4ERQF) T2)  
(X (TRANSFERORt NEWOWNEROF) ~)3  
TRANSFEROR! (ACTOR A) 
(X (TRANSI  AOENT) A) 
(X (TRANSI OLDOWNER)  A) 
(X (TRANS2 NENOWNER) A) \ ]  
TRANSFEROR= (ACTOR A) 
(X (TRANS2 AOENr) A) 
(X (TRAN~2 OLDO~,qER) A) 
(X (THANS| NEiJO~NER) A) \ ]  
F f i _ u_ re  ~: A portion of COMPONENT2 or a sample definit ion. 
facts comprising a description of a legal c;Jse L~ 
presented-for comparison with the def (n i t~n.  
In order to control possib\]e combinat~ric diffLcu\]+\[es, 
the KERNEL structure is decomposed tnt~ a se t ~r small 
networks, against each of which a\]\] substructures ~f the 
same type in the case description are tes+ed f~r a 
structural match (STAGEI). DMATCH \[15\], a functL~n 
wr i t ten  by D. Touretzky, performed structural ma+chLng 
in the experimental implementation. The hope LS the + 
"small networks" can be selected from the KERNEL in such 
a way that matching to any single small n~twork wi|\] 
involve a minimal degree of combinator\[c compiexEty. 
For an exact match, the substructures that survive 
STAGEI (and no others) are then combined in all p~ssibie 
valid ways into larger networks ~f s~me degree ~f 
increase in complexity. A structural match ~f each ~f 
these structures with the corresponding substructure ~f 
the KERNEL is then attempted, and bindings c~nstraints 
between formerly separate components of the new network 
are thereby tested. This process is repeated wLth 
surviving substructures until the structural match is 
conducted against the KERNEL structure itself. When +he 
criterion for matching at each stage Ls an exact match, 
as described above, the survivors of the final s~age ~f 
structural matching represent all and ~n\]y the subcases 
in the case description that meet the c~ndi+i~ns 
expressed in the definition. 
The execution of the marcher in the manner described 
above is illustrated in Figure 4. For this example, 
five instances of the type TRANS (TI, T2, T3, T4, TL), 
two instances of the type CONTROL (CI, C2), and ~wo 
instances of PROPERTY (06, 09) were used. The value of 
MAKEFULLLIST shows the survivors of STAGEI. The value 
of BGO shows the single valid instance of a 
BREORGANIZATION that can be created fr-m these 
components. 
An inexact matching capability, not currently 
implemented, would determine, when at any stage a match 
failed, 
I) why it had failed, and 
2) how close it ned come to being an exact ms+oh. 
At the next stage, a combination of substructures would 
be submitted for consideration by the marcher only Lf it 
had met some criterion of proximity t~ an exact match -- 
either on an absolute scale, or relative to the ~ther 
candidates for matching. When the final stage ~f the 
matching process had been completed, that candidate (or 
those candidates) that permitted the most nearly exact 
match could then be Selected. 
In order to perform the inexact matching function 
outlined in the preceding paragraph, an a\]g-rithm for 
computing distance from a exact match must be 
formulated. For the reasons given above, we anticipate 
that 
I) the transformation of definitions into the 
corresponding KERNEL structures will make that 
task easier, and that 
2) once a distance a lgor i t~ has been 
formulated, the use of the KERNEL structLLPe will 
contribute to performing the inexact matching 
f~/nction wlth efficiency and conceptual clarity. 
5. CONCLUSIONS 
The capability for the intelligent handling of inexact 
matches ham been shown to be an important requirement 
for the representation of certain classification +.asks. 
A procedure has been outlined ~nereby a set of criteria 
for membership in a particular class may be transformed 
into an exemplary instance of a member of that class. 
47 
/ y  
~ ~ ~  ~o~ 
KeG 
KC.T 
K AS'~K CoR ffL 
K'r,! 
K~-3" 
~m Ko~ 
: The KERNEL s t ruc ture  fo r  a 
f tn t t Jon .  
As we have seen ,  use  o f  that  exemplary  ins tance  dur ing  \[3\]  Hayes-Roth ,  F. 1978. "The Role o f  Par t ia l  and Best 
the matchinK process appears to permit important Y4atches in Knowledge Systems", - ~  
functions associated with inexact matchlnK to be easily ~ ~ ,  ed. by D. Waterma~ and F. 
performed, and also to have a bene/icial affect on the Hayes-Roth. Academlc Press. 
overall effiolency 0~' the matahinK process. 
\[4\] Hayes-Roth, F. and D. J. Hostow. 1975. "An 
ACKHQWL~DCEMENT$ Automat ica l l y  Compi lable Eecosn l t lon  Network fo r  
S t ruc tured  Pat te rns" .  ~ ~ IJCAI-?%, vo l .  1, 
The author is  gratet%ll to the fo l low in8  fo r  cos-Mints and pp. 2~6-251. 
suKgestions on the work reported on in this paper: S. 
Amarel, V. Cissielski, L. T. MoCarty, T. Mitchell, C5\] Joshi, A. K. 1978a. "Some Extensions of a System 
N. S. Sridha~an, and D. Touretzky. for Inference on Partial I41foMlationn. P~ttePn.Dir,~ted 
~ ,  ed. by D. Waterman and F. 
R~RLTC~;RAPH? Hayes-Noth. Aoad clio PFess. 
\[I\] Freuder, ?. C. 1978. "Syntheslzln~ Constraint \[6\] Joshi, A. K. 1978b. "A Nots on Partial Match of 
Expressions". CACM, vol. 21, pp. 958-966. Desorlptlcns: Can One Simultaneously Question 
(Retr ieve)  and Inform (Update) ?" . ?TRLA P-2 : 
\[2\] Hara l i ck ,  R. M. and L. G. ShapirO. 1979. "The ~ ~ 1;1 ~ ~ ~,nsnxL~=?.  
Consistent LabelllnK Problem: Part I". TRRR 
~ a ,  PINI0 re1. I, pp. 173-18~. \[7\] Kwasny, S. and N. K. Sondhelmsr, 1979. 
? U~ra Jaat ioa l l ty  and Ext ra -Gr - , - , - t l ca l i ty  in  ~atu~a l  
Language U~derstandlnK Systems". This volume. 
SECOND-CON tEXT ) )  (BQO) 
Enter  HAKEFtS ~l  Z81": 
! PROTS ,, (PROTOTRANS$ PRQTOTRAN~ PROTOCONI"ROLI PROTO09 PROTO06)  
HAKEFULLLXST ~ ( (0~)  (Oh 09)  (C I  (:;2) (T'J T4 TS) (T2  T4 TS) )  
( (T ' J  T~ C2 09 06)  N i l . )  
~ : Sample execution of  the process. 
48 
\[8\] McCarty, L. T. 1977. "Reflections on TAXMAN: An 
Experiment in Artificial Intelligence and Legal 
Reasoning". HarvmrdL~w Review, vo1. 90, pp. 837-893. 
\[9\] McCarty, b. T., N. 3. Sridharan, and B. C. 
Sangster. 1979.  "The Implementation of TAXMAN II: An 
Experiment in Artificial Intelligence and Legal 
Reasoning". Rutgers University Report #LCSR-TR-3. 
\[10\] Sangster, B. C. 1979a. "An Automatically 
Cempilable Hierarchical Definition Marcher". Rutgers 
University Report #LRP-TR-3. 
\[11\] Sangster, B. C. 1979b. "An Overview of an 
Automatically Compilab\]e Hierarchical Definition 
Hatcher". Promeed ln~f the  TJCAI-7q. 
\[12\] Sridharan, N. S. 1978a. (Ed.) "AIMDS User 
Manual, Version 2." Rutgers University Report 
#CBM-TR-89. 
\[13\] Sridharan, N. S. 1978b. "Some Relationships 
between BELIEVER and TAXMAN". Rutgers University Report 
#LCSR-TR-2. 
\[14\] Srinivasan, C. V. 1976.  "The Architecture of 
Coherent Information System: A General Problem 3olving 
System". T~E Trana~t ion~on~,  VOl. 25, pp. 
390-402. 
\[15\] Touretzky, D. 1978. "Learning from Examples in a 
Frame-Based System". Rutgers University Report 
#CBM-TR-87. 
\[16\] Woods, W. A. 1975. "What 's  in  a L ink:  
Fot~ldat ions for  Sema/ltio Networks".  In Renresentat ion  
Under~tAndinl ,  ed. by D. G. Bobrow and A. 
Co l l ins .  Academic Press .  
49 

