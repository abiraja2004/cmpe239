Feature Graphs and Abstract Data Types: 
A Unifying Approach 
Christoph BEIERLE and Udo PLETAT 
IBM Deutschland GmbH 
Science and Technology - LILOG 
P.O. Box 80 08 80 
7000 Stuttgart 80, West Germany 
(electronic mail on EARN/BITNET: 
BEIERLE at DS#LILOG, PLETAT at DS#LILOG) 
Abstract :  
Feature graphs appearing in unification--based grammar formalisms and 
algebraic specif icat ions of abstract data types (ADTs) are both used 
for def in ing a col lect ion of objects together with functions between 
these object sets. Start ing from this observat ion we define an 
algebraic semantics for feature graphs by assigning an algebraic 
speci f icat ion to each feature graph. This opens the rich world of 
semantical foundations for abstract data types to the area of 
feature graphs and thus to uni f icat ion grammar formalisms. Using 
results from ADT theory we define a sim~le and fast syntactic 
decis ion procedure test ing the usual consistency condit ions on 
feature graphs like constant consistency, constant/complex 
consistency and acycl ic i ty on the algebraic speci f icat ion assigned 
to a feature graph. With this machinery at hand feature graph 
uni f icat ion becomes union of feature graph specif icat ions fol lowed 
by the consistency test. 
1. Introduction 
Uni f icat ion-based grammar formalisms have 
become a popular f ield o'f research. The 
subject has attracted the interest not only 
of (computer) l inguists but also of computer 
scientists, especial ly in the area of logic 
programming, see e.g. \[Pe 87\]. Due to the 
formality of grammars we also observe 
activit ies developing foundations for the 
formal semantics of var ious approaches on 
uni f icat ion grammars, e.g. \[PS 84\], \[KR 86\], 
\[RK 86\], \[Pe 87\], \[Jo 87\]. 
In this paper we invest igate the relat ionship 
between feature graphs on the one hand and 
algebraic speci f icat ions of abstract data 
types (ADTs) on the other hand. There is a 
natural correlat ion between both these areas 
since a feature graph as well as an abstract 
data type def ines a col lect ion of objects 
together with functions relat ing the objects. 
We present a formal semantics for feature 
graphs by assigning to each feature graph G 
an equational ADT speci f icat ion ~(G), cal led 
fg--specification. This opens the rich wor ld 
of ma'thematical foundations of ADT 
specif icat ions (e.g \[GTW 78\], \[EM 85\]) in 
order to obtain a better - not only - formal 
understanding of the nature of feature 
graphs. 
In particular, we provide a model - theoret ic  
character izat ion of various consistency 
condit ions for feature graph speci f icat ions 
ref lect ing the consistency concepts usual ly  
imposed on feature graphs such as 
c lash-freeness and acyclicity. These 
40 
model- theoret ic  character izat ions have 
proof- theoret ic  counterparts  in terms of 
syntactic condit ions on the deduct ive closure 
of the set of equations of r(G)o 
Al though the proof- theoret ic  consistency 
character izat ions are of syntactic nature, a 
test of their val id i ty  requires to examine 
the deductive closure of the set of equations 
of a fg-specif ication. Our object ive is to 
restr ict consistency checks to equations 
expl ic i t ly  ment ioned in a fg-specif icationo 
In the ADT-wor ld  there is a wel l -known tool 
for such tasks: the Knuth-Bendix algorithm 
(\[KB 70\]). We present a Knuth-Bendix like 
complet ion procedure t ransforming any 
fg-speci f icat ion into a reduced normal form. 
We show that the model - theoret ic  consistency 
character izat ions for G are equivalent to the 
presence resp. absence of certain types of 
equations in this reduced normal form. 
These results are used for def in ing the 
semantics of the uni f icat ion of two feature 
graphs GI and G2 as the (set-theoretic 
componentwise) union of ~(GI) and x(G2 ) 
fol lowed by the normal izat ion process us ing 
the complet ion algor ithm and the consistency 
check on the result ing set of equations? 
2. Featuregraphs 
A feature graph is a d i rected graph with a 
d ist inguished root node. The edges of the 
graph are cal led features. An atomic graph is 
just a symbol; it contains no features. A 
complex graph is a set of feature-value pairs 
where each va lue is e i ther  an atomic graph or 
again a complex  one. Two paths  s ta r t ing  at 
the root and end ing  at the same node are said 
to co-.refer. Feature  graph un i f i ca t ion  is a 
b inary  eperat ion  tak ing  two graphs  and 
returning\[ a graph conta in ing  exact ly  the 
in format  J.on of both  graphs  if they are 
unifiabl~. ~, and fa i ls  otherwise.  An atomic 
graph is un i f iab le  only  wi th  i tse l f  and the 
empty graph. A complex  graph G~ is un i f iab le  
wi th  the, empty graph, and G~ is un i f iab le  
wi th  a complex  graph G2 if for all features  
in both  G: and G2 the respect ive  vah les  are 
unifiab\](~? 
Several  notat ions  for feature  graphs  have 
been  suggested? The graph ica l  representat ion  
of 
NP 
cou ld  a l~o be  represented  in  matr ix  fo rm:  
~Cat I 
: VP 
Agr  
I Agr  < 1 > 
in the matr ix  notat ion  core ference  is 
ind icated  by numbers  enc losed  i n  brackets .  
Another  notat ion,  wh ich  for ins tance  is 
employed  in PATR, uses specia l  equat ions  
indicati\[Lg core ference  of paths  and atomic 
va lues  aL the end of of paths,  respect ive ly :  
< Cat > == VP 
< Subj Cat > == NP 
Subj Agr  > : < Agr > 
In the fo l low ing  we wi l l  d i scuss  an 
equat Jon~l  representat ion  of feature graphs  
in greater  detai l .  Th is  representat ion  wi l l  
be o r iented  towards  the equat iona l  
spec i f i ca t ion  of abst ract  data  types, thus 
mak ing  ~.vai lable the power fu l  mach inery  
deve loped  for such spec i f i cat ions?  
Above we d id not make a c lear  d i s t inc t ion  
between the syntax for descr ib ing  feature 
graphs and feature graphs as semant ica l  
objects.  In fact, such a d i s t inc t ion  has been  
omi t ted  to a large extent  in the l i terature.  
The s i tuat ion  changed w i th  approaches  that 
fo rmal i ze  the concepts  of feature graphs 
s ince such a d i s t inc t ion  is essent ia l  for a 
formal  t reatment  (see e.g. \[KR 86\], \[Jo 87\]). 
In the area of ADT spec i f i ca t ions  the str ict  
separat ion  of the syntact ic  and the semant ic  
level has u lways beet* a centra l  aspect.  Our  
ADT-.based approach  to feature  graphs adopts  
this  two- leve l  v iew in a natura l  way: Feature  
graph spec i f i ca t ions  are the syntact i ca l  
means to descr ibe  feature  graphs  wh ich  are 
the mode ls  (or s t ructures)  of such 
spec i f icat ions .  
3._Equational Specifications 
3oi ADT Specifications: Syntax and Semantics 
We int roduce the bas ic  not ions  of abst ract  
data type spec i f icat ions .  More deta i led  
in fo rmat ion  can be gathered  in \[GTW 78\] or 
\[EM 85\ ] .  
A s .~gt_ure  is a pai r  Z = <S, O> where  S is a 
set of sorts and O = <O > 
a fami ly  of sets of ~erators  w.r.t.  S. We 
wr i te  op: s~ ...s~ -> s for an operator  whose 
i - th argument  is of sort s~ and wh ich  
de l ivers  a resu l t  of sort s. The we l l - fe rmed 
terms w.r.t.  Z and S -sor ted  var iab les  V form 
an S - indexed fami ly  Tz (V), and an equat ion  
over ~ and V is of the form i = r where  1 and 
r are terms of the same sort. An a l~@hra ic  
~gcifiqation is a pa i r  SP = <Z, E> where Z 
is a s ignature  and E is a set of equat ions  
over Z and some fami ly  of var iab les  V. 
Bes ides  these syntact i ca l  concepts  of ADT 
spec i f i ca t ions  we prov ide  the basic  
semant ica l  concepts  of heterogenous  algebras:  
G iven  a s ignature  ~ = <S, O>, a ~-a lgebra  A 
cons is ts  of a fami ly  of sets A = < A, > . . . .  
and for each operator  op e O .... there is a 
funct ion  opA : A, ---> A~ . A sat is f ies  an 
equat ion  1 = r if for each ass ignment  of 
va lues  from A to the var iab les  of 1 and r the 
eva luat ion  of 1 and r in A y ie lds  the same 
e lement  of A. A is a <Z,E>-a lgebra  if A 
sat is f ies  every e ~ E. 
We say that E semant ica l ly  impl ies  an 
equat ion  e if every <~,E>-a lgebra  sat is f ies  
e. It is we l l -known that  this mode l - theoret i c  
not ion  of sa t i s fac t ion  co inc ides  wi th  the 
proo f - theoret i c  not ion  of deduct ion  (B i rkhof f  
theorem) where  e can be proved  from E iff e 
can be deduced from E us ing  the rules of the 
equat iona l  ca lcu lus  (e.g. \[EM 85\]). We let E e 
denote the deduct ive  c losure  of E. 
The fo l low ing  theorem is one of the centra l  
resul ts  of ADT theory  and forms the bas is  fo\]:" 
de f in ing  the semant ics  of a spec i f icat ion.  
Theorem:  
For each a lgebra ic  spec i f i ca t ion  
SP = <~, E> there is an in i t ia l  a lgebra  
Tsp sat i s fy ing  the equat ions  in E. 
T~, is the so -ca l led  ~uot ient  term a lqebr  ~ 
cons is t ing  of congruence  c lasses  - obta ined 
by fac tor i za t ion  accord ing  to the equat ions  
in E - of constant  terms over Z. The in i t ia l  
a lgebra  Tsp is 'the ADT spec i f ied  by SP. It 
can be character i zed  in fo rmal ly  by two 
condit ions:  all its e lements  are denoted  by 
some ground term ("no junk"), and it 
sat is f ies  a ground equat ion  e iff every  other  
<Z,E>-a lgebra  also sat i s f ies  e ("no 
confusion"). 
3,2 Feature Graph Specifications 
Feature  graphs can be seen as par t i cu la r  
a lgebra ic  spec i f i ca t ions  (see also \[Pe 87\]): 
41 
There are only  constants  ( represent ing  atomic 
values)  and unary  funct ions  ( represent ing  the 
features)  in the s ignature.  We assume that 
ATOMS is the set of all atomic va lues  and 
FEATURES is set of all features  occur ing  in 
the feature  graphs; both  sets may be in f in i te  
in general .  An equat ion  s = t is g iven for 
paths  hav ing  the same f inal  node, or for 
paths  end ing  at an atomic value. 
For instance,  cons ider  the feature  graph 
%/ 
Fo l low ing  e.g. Pere i ra  and Sh ieber  (\[PS 84}) 
this feature graph can be descr ibed  by the 
equat ions  
< f g > = < h > 
< g > = a 
leav ing  the root symbol  of the feature  graph 
impl ic i t  and us ing  the order  for the 
a t t r ibutes  as in the examples  of Sect ion  2. 
However,  in equat iona l  ADT spec i f i ca t ions  it 
is essent ia l  to state exp l i c i t l y  to wh ich  
ob jects  an equat ion  can be appl ied. 
For s impl ic i t ly ,  we f i rs t  assume that we have 
only  one sort wh ich  we cal l  "universe",  and 
that we have a var iab le  x of sort "universe' .  
By us ing  a funct iona l  notat ion  for the 
a t t r ibutes  and thus the reverse order  of the 
a t t r ibutes  as compared  to e.g. \[PS 84\], we 
wou ld  arr ive at the spec i f i ca t ion  
sorts un iverse  
funct ions  a: -> un iverse  
f,g,h: un iverse  -> un iverse  
equat ions  g(f (x))  = h(x) 
g(x)  = a 
However,  by s imply  in t roduc ing  a un iversa l ly  
quant i f ied  var iab le  x of sort  "universe" we 
run into problems:  From 
I, g( f (x))  = h(x) 
2. g(x) = a 
we can deduce 
h(x)  = a 
by us ing  the usua l  ru les of the equat iona l  
ca lcu lus  and subst i tu t ing  f(x) for x in 
equat ion  (2). The prob lem is that  x shou ld  be 
quant i f ied  on ly  over  all  ob jects  descr ibed  by 
the or ig ina l  feature  graph. But f(x) is not 
neccessar i l y  in th is  set, so we must  f ind a 
way of avo id ing  such a subst i tut ion.  A s imple 
way of ach iev ing  this  is to swi tch  to another  
s ignature  wi th  an add i t iona l  sort, say "soi', 
denot ing  the "sort of interest"  and 
compr is ing  all ob jects  descr ibed  by a feature  
graph. 
The sort  "sol" is then a subsort  of sort  
"universe' .  Th is  cou ld  be expressed  by 
extend ing  the a lgebra ic  spec i f i ca t ions  to 
inc lude also subsort  re lat ionsh ips ,  thus 
mov ing  f rom many-sor ted  spec i f i ca t ions  (as 
descr ibed  in Sect ion  3.1) to so -ca l led  
order -sor ted  spec i f i ca t ions  (e.g. \[GM 87\]). 
Here, we want  to st ick  to the s impler  case of 
many-sor ted  spec i f i cat ions .  
A subsort  re la t ionsh ip  in a many-sor ted  
set t ing  is expressed  by an inc lus ion  funct ion  
42 
wh ich  we will. denote  by 
i: soi -> un iverse  
in our case. In order  to avo id  prob lems w i th  
empty  sorts (\[GM 87\], \[EM 85\]) we assume that 
there is a constant  "const" of sort  "sol'. 
For the rest  of this paper  we also assume 
that x is a var iab le  of sort  "seA'. Thus~ the 
feature graph above g i~es r ise to the feature  
graph spec i f i ca t ion  
sorts sol, un iverse  
funct ions  a: -> un iverse  
f,g,h: un iverse  ~> uz~iverse 
const: .-> soi 
i :  soi ~> un iverse  
equat ions  g( f ( i (x ) ) )  = h( i (x) )  
g(k(x ) )  = a 
mot ivat ing  the fo l low ing  def in i t ion:  
A feature  graph s ignature  ( fg -s ignature)  
Z = <S,OP> is a s ignature  wi th  
S : {sol, ~lniverse} 
OP : Atoms(Z)  u Features(X)  
u {const :  -.> soi} 
U {i: SOJ -> un iverse} 
where  : 
Atoms(E)  c {a: -> un iverse  I 
a s ATOMS\]  
Features(Z)  c {f: un iverse  -> un iverse  \[ 
f s FEATURES} 
A feature  graph  spec i f i ca t ion  
(fg-.specif ication) SP ~ <Z,E> has a 
fg -s ignature  Z and a set of equat ions  over  
Z and {x}. 
Wi th  the de f in i t ions  above it shoud be 
obv ious  how to t rans form any feature graph G 
into a fg -spec i f i ca t ion  ~(G): The s ignature  
of ~(G) conta ins  all atoms and features  
occur ing  in G as constants  resp. unary  
funct ions,  and for any co-referring paths  or 
any path  end ing  w i th  an atomic  va lue  there is 
an equat ion  in ~(G). Thus, we have a 
we l l -de f ined  funct ion  
~: Feature  graphs -> fg -spec i f i ca t ions  
mak ing  ava i lab le  the mach inery  that  has been  
deve loped  for a lgebra ic  spec i f i cat ions .  
4. Consistency_ 
In \[PS 84\] the on ly  incons is tency  cons idered  
is an equat ion  of the form a ~ b where  a and 
b are d i s t inc t  constants .  Such a s i tuat ion  Js 
ca l led  constant  c lash  in \[Pe 87\] where  
add i t iona l ly  a constant L_cpmP!exf~ lash  is 
cons idered.  Such a c lash  is "any set of two 
equat ions  e~ and e2 in wh ich  e~ equates  some 
path  p to some other  path  or atomic va lue  and 
e2 equates  a str ict  p re f ix  of p to a 
constant"  \[Pe 87\]. 
Whereas  \[PS 84\] also cons ider  cyc l ic  feature 
graphs, Kasper  and Rounds  (\[KR 86\]), ~ome 
PATR- I I  imp lementat ions ,  and also the STUF 
fo rmal i sm descr ibed  in \[Us 86\], on ly  a l low 
for 99~fclic feature  graphs. We wi l l  show that  
the absence of cyc les  in a feature  graph car~ 
also be expressed  as a cons is tency  cond i t ion  
on the cor respond ing  fg -spec i f i cat ion .  
Be low we use the mach inery  of abs t rac t  data 
types in order  to def ine  several  not ions  of 
semantical, cons is tency  for a feature grap\[b. 
Finest W(-: i n t roduce  a r io_ ta t : io r% 
A tex fa  
: ; , , ( . . . ( f~( t ) )~ . )  ~ 'r~(\[x\]) 
with  
t ~ T, (\[X\]),,,i ..... . .... fl ~ Features(Y,), 
and n k 0 wi l l  be writ'ten as 
p( t )  
where  p := : , ! .o~of~ e Features (} : ) *o  
Note  that  the  notat ion  f .  ( . . . ( f~  ( t ) )  . . .  ) 
re f lec ts  -the usua l  mathemat ica l  notat ion  for 
funct ion  compos i t ion ,  whei'eas the ~)ath 
notat ion  amp Loyed for feature  graphs  as 
sketched : i( l  Sect ion  2 uses  the reverse  order  
Let  S~' == -<}:~ \]!',> be cl .fg-;~pe<:ificatien. 
A <}\]~ E>-al.gebra A is 
~ cpn\ [~tt~.g 'h  ~ g0ns is te~c J f f  
for all a,  b ~. Atoms(Z)  with  a ~: b we 
have  : 
u cons tagt/<'.omp.\].ex cons.isten t i f f  
for  al l  a~ b ~ Atoms(Z)  and a\]\] pl, p2, 
q ~ Feature~;(Z): tlhere ex is ts  ral e lement  
o ~ A, , ,~ ,,?:iti~: 
7p\]~ (i~ (o ) )  : :  a,, 
:: > 
p2,,(p\]., (i, (o))) + q^( i~(o) )  
& 
) / ,2a(p l~ ( i . (o ) ) )  ~- b^ 
ac yc l'i,/ i f f  
fo r  all  p~ q ~ Features (Z)  ? there  ex is ts  
an e lement  o ~ A,o? with: 
p~(q~(i^(o))) + q^(i^(o)) 
SP is .g_grn}i ta l r t  cons :Ls te . l - t t  , cor~staL~t/gpmplgx - 
co l l s i s te_ l J t  or" .gcycliq i f f  there  is at least  
one mode\], of SP hav ing  the respect ive  
proper t?  . 
The above  de f in i t ion  of\[  cens Js tency  of a 
fg -spec i f i~at ion  SP suggests  that  one has to 
search  through the ent i re  (:lass of  mode ls  of 
SP in or, let to determJ ne whether  SP :i s 
cons is tent  or net. The fol ).owing theorem 
shows the power  ef  in i t ia l  mode ls  in the 
sense of shr ink ing  the search  space: only the 
in i t ia l  mode l  has  to be cons idered.  
Theorem : 
The fg- speei  ficaT-ion SP is constant  
cons is tent ,  constant /complex  cons is tent ,  
or acyc l i c  i f f  the in it ia l  a lgebra  Ts~, has  
the respect ive  proper ty .  
The above pz:opert:ies can be proven for  the 
in i t ia l  mode l  by us ing  the deduct ive  c losure  
E* of  a set of  equat ions  E. 
Theoz'em : 
The i n i t ia l  a lgeb lTa  \[I,',3 ~ of the 
fg -spec \ [ f i ca t ion  SP is 
u constant  cons is tent  i f f  
for all a, b ~ Atoms(Z)  w i th  a + b 
We have:  a :: 'b ~/ E* 
~i coiL.~tar~t/complex cons is tent  i f f  
fo r  a l l  a~ b ? Atom:3(} ; )  and  a l l  
t ) \ [~  t :)2 , q ~ Features(Z)"  
%'?,~ have : 
pl(' i(const)) = ;~. ~ E';," 
i t~p\ ] . ies  
p2(p l ( i ( const ) ) )  ::: q( i (const ) )  / E* 
and 
p2(p l ( i ( const ) ) )  = b / E* I 
acyc l ic  i f f  
for al l  p, q e Features (Z)  ~ 
we have  : 
p(q( i (const ) ) )  --: q ( i ( const ) )  / E* 
The equ iva lences  es tab l i shed  by  these two 
theorems show us that  the cons is tency  of a 
fg -spec i f i ca t ion  <Z, E> can  be tes ted  by 
inspect ing  tile deduct ive  c losure  E* for the 
absence  of  cer ta in  equat ions,  depend ing  on 
wh ich  cons is tency  aspects  one is in teres ted  
ill. S ince E* may be too large for per fo rming  
these tests  e f f i c ient ly  it  wou ld  be des i rab le  
to be able to per fo rm the cons is tency  tests  
on E only. ill the next  sect ion  we deve lop  a 
complet ion  procedure  for the set of  equat ions  
E wh ich  t rans forms E into a normal i zed  set E" 
such that  it  Js su f f i c ient  to check  E'. The 
complet.io~), p rocedure  thus prov ides  a s imple 
and fast  dec is ion  procedure  for our 
cons is tency  const ra ints .  
5o _Ti)9 completion pr~cedure 
Our complet ion  procedure  is a var iant  of the 
Knuth -Bend ix  a lgor i thm (\[KB 70\]) wh ich  J.s a 
we l l -known method for tes t ing  proper t ies  of 
rewr i te  ru le systems and for t rans forming  
equat ions  into a set of rewr i te  rules, wh ich  
then const i tu te  a dec is ion  procedure  for the 
equal i ty ,  in general ,  there  are some 
prob lems w i th  the Knuth -Bend ix  a lgor i thm: \]it 
may not  terminate,  or it may terminate  w i th  
fa i lure.  However ,  we csn show that due to 
the res t r i c ted  form of equat ions  these 
prob lems do not  occur  when dea l ing  w i th  
fg -spec i f i ca t ions .  
We f i rs t  de f ine  an order  re la t ion  ~ on the 
set T~ ({x}) of terms over  an fg -s ignature  Z. 
We assume that  ATOMS (resp. FEATURES)  is 
l inear ly  o rdered  by  ~^To~ (resp. ~ .... u~:~). 
Then we order  T~ ({x}) us ing  the lex icograph ic  
o rder ing  induced by NA~oMs and N~^TunE~ : 
Let  a, b ~ ATOMS, f~, g~ e FEATURES,  and t 
T~ ({x}). 
a <,r b i f  a <^'roM~ b 
" a <T f, (t) 
t <~ f~ (t) 
f~,(...(f~ (t)) . . . )  <.r g, (...(g~ (t)) . . . )  
-<-T is the re f lex ive  and t rans i t ive  c losure  
of <.~. 
Let  SP : <Z,E> be a fg -spec i f i ca t ion .  We 
assume that  E does not  conta in  any t r iv ia \ ]  
equat ions  of the form t :: t (o therwise  we can 
just  e l iminate  such equat ions  f rom E). 
Le~na:  
For  all 1 = r ~ E we have  e i ther  1 <~ r or 
r <.~ \].. 
Thus, w i thout  loss of genera l i ty ,  we assume 
that  r <T 1 for all 1. = r s E (o therwise  we 
can just  exchange the le f thand and the 
r ighthand s ide of the equat ion) .  We ca l l  E a 
d i rected  set of equat ions  and we may wr i te  
1 -> r ins tead  of 1 = r. 
43 
C~let ion  a lgor i thm CP 
Trans form E into a d i rec ted  set of 
equat ions  and app ly  success ive ly  any of 
the two fo l low ing  ru les unt i l  none is 
app l i cab le  any more: 
\[\] LHS reduct ion:  
If there are two d i f fe rent  equat ions  
(I) p(1) -> r 
(2) 1 -> r' 
in E then: 
De lete  equat ion  (I) f rom E 
If r <T p(r ')  
then add p(r ')  -> r to E 
- I f  p ( r ' )  <~ r 
then add r -> p(r ')  to E 
\[Note: Noth ing  is added if p(r ' )  and r 
are ident ica l ! \ ]  
? RHS__!'9_d" u c t ion !_ 
If there are two d i f fe rent  equat ions  
(I) 1 -> p(l ')  
(2)  1" -> r 
in E then: 
- De le te  equat ion  (I) f rom E 
If 1 <~ p(r) 
then add p(r) -> 1 to E 
If p(r) <T 1 
then add 1 -> p(r) to E 
\[Note: Noth ing  is added if p(r) and 1 
are ident ica l ! \ ]  
where: r, r', i, i" ~ T~ ({x}), and 
p ~ Features (Z)*  
Theorem : 
For every  fg -spec i f i ca t ion  
complet ion  procedure  CP 
SP the 
? te rminates  on input  SP = <Z, E> 
de l ivers  as output  a fg -spec i f i ca t ion  
SP" = <Z, E'> 
and SP and SP 'are  equ iva lent  in the 
sense of 
E*  = (E')*, 
i. e. E and E" have the same deduct ive  
c losure.  
This  theorem assures  that the complet ion  
procedure  per fo rms only  syntact ica l  
mod i f i ca t ions  on the fg -spec i f i cat ions ,  but  
does not change the i r  meaning.  So we can use 
SP" in order  to test  the cons is tency  
const ra in ts  of SP. The next  theorem shows 
that s tepp ing  from SP to SP" s impl i f ies  th is  
task: ins tead of inspect ing  the deduct ive  
c losure  E* it su f f i ces  to inspect  the set of 
equat ions  E'. 
Theorem:  
Let SP = <Z, E> be a fg -spec i f i ca t ion  and 
SP" = <Z, E'> be the resu l t  of runn ing  the 
complet ion  procedure  CP on SP. SP is 
Constant  cons is tent  iff 
E" does not conta in  an equat ion  whose 
le f thand side is an atom a ~ Atoms(Z)  
constant /complex  cons is tent  i f f  
E" does not  conta in  an equat ion  in 
wh ich  a term f(a) occurs  where  
f ~ Features(Z)  and a ~ Atoms(Z)  
acyc l ic  i f f  
E" does not  conta in  an equat ion  
p(t) -> t where  p ~ Features (Z)*  
44 
The proof  of th is  theorem is based  on the 
fact that  E" is a conf luent  and te rminat ing  
set of rewr i te  rules. S ince the atoms are  
smal ler  than any non-atomic  term wi th  respect  
to the term order <~, for any equat ion  a --> t 
in E" w i th  an atom a, t must  also be an atom~ 
Therefore,  any equat ion  ho ld ing  between atoms 
must  be conta ined  d i rec t ly  in E', imp ly ing  
the constant  cons is tency  proper ty  of the 
theorem. The other  par ts  of ' the theorem 
fo l low f rom s imi la r  observat ions .  
6. Unification 
In Sect ion  2 we presented  three d i f fe rent  
notat ions  for feature  graphs, and in 3.2~ we 
in t roduced  a t rans la t ion  ~ f rom feature  
graphs to fg -spec i f i ca t ions .  On the other  
hand, it is s t ra ight fo rward  to t rans form a 
fg -spec i f i ca t ion  SP into a feature graph C: 
The atoms and features  of G are those 
occur ing  in the s ignature  of SP and ?he 
equat ions  of E re f lect  the core fer r ing  paths  
resp. paths  end ing  w i th  an atomic va lue in G? 
We denote  this t rans format ion  by 
~-~ : fg -spec i f i ca t ions  -> feature graphs  
A l though ~-I (SP) and ~-i (CP(SP)) may be 
syntact i ca l l y  d i f fe rent  s ince CP(SP))  
conta ins  equat ions  in a reduced normal  form, 
the two graphs  are equ iva lent  in the sense of 
feature graph un i f i cat ion :  they are unifiab\].e 
wi th  exact ly  the same feature  graphs. 
Bes ides  g iv ing  a bas is  for a s imple 
cons is tency  test  and prov id ing  a normal  form 
presentat ion  for fg -spec i f i ca t ions  the 
complet ion  procedure  CP also prov ides  the 
bas is  for a p rec i se  mathemat ica l  de f in i t ion  
of feature  graph un i f i cat ion .  This  is t rue 
regard less  wh ich  cons is tency  concept  for 
feature graphs one wants  to apply, e.g. J.f 
one wants  to a l low cyc l ic  graphs or on ly  
acycl ic  ones. Thus, let X -cons is tent  be 
e i ther  "constant  cons is tent" ,  
"constant /complex  cons is tent" ,  "acycl ic" ,  or 
any combinat ion  thereof .  Let GI and G2 be 
feature graphs. 
g raph-un i fy (G~,G~)  = 
let (Zi,Ei) = ~(Gt) in 
let (Z,E) = CP(Z~ u Z,, El u E2) in 
~-I (Z,E) if (Z,E) is X -cons is tent  
fai l  if (Z,E) is not X -cons is tent  
7. Conclusions 
We have presented  a mathemat ica l  semant ics  of 
feature graphs and feature  graph un i f i ca t ion  
in terms of ADT spec i f i cat ions .  It suppor ts  
var ious  cons is tency  concepts  used  for feature  
graphs. The impor tant  not ion  of par t ia l i ty  
(\[Pe 87\]) in the sense that  a rb i t ra ry  new 
features  may be un i f ied  into a feature graph 
is suppor ted  s ince any feature  graph 
spec i f i ca t ion  can be extended by arb i t ra ry  
features,  atoms, and equat ions;  there ex ists  
no "largest" feature  graph spec i f i ca t ion  
(unless of course, one adds an ar t i f i c ia l  
" largest" element,  e.g. as the 
$F$-spec i f i ca t ion  in the STUF fo rmal i sm as 
descr ibed  in \[BPU 88\]). 
Another approach br inging together initial 
ADT spec, i f ications and feature graphs is 
given ill \[SA 87\]. ~t uses an order-sorted 
approach:, where the set of atoms and features 
must be f ixed in advance, and where every 
element of a supersort must be in one of its 
subsor ts  Compared to the order- sorte%l 
approach of \[SA 87\] a drawback of the work 
presented here is the asymetric treatment of 
the tool; of a feature graph (giving rise to 
the "se,i" sort) and the other nodes (being 
mapped t ;o  thE; "un iverse"  sort ) . We are 
current ly extending out work in order to 
overcome this d isadvantage (\[BP 88\]). Other 
a:?eas of future work are the treatment of 
disjunctJ ons and of functional uncertainty 
(\[KR 86\], \[Jo 86\] ) .  
Refefr~nc~,s 
\[Ai e#\] Ait.-Kaci, H. : A Lattice Theoretic 
Approach to Computai;ion based on a 
Calculus of Part ia l ly Ordered Type 
Structures. \]?hD thesis, Univers i ty 
of Pennsylw~nia, 1984 
\[BP ss\] Beierle, C., Pietat, U. :  %'he 
Algebra of Feature Graph 
Specif ications. (in preparat:ion) 
\[BPu 88\] Beierle, C., Pletat, U., Uszkoreit, 
If.: An Algebraic Character izat ion 
of STUF. Proc. Symposium 
"Computer l inguist ik  und ihre 
theoret ischen Grundlagen", 
Saarbr~cken 1988. 
\[EM 88\] Ehrig, H. and Mahr, B.: Foundations 
of Algebraic Speci f icat ion I. 
Springer Verlag, Berl in 1985. 
Goguell, J. G. and Meseguer, J.: 
Order-Sorted Algebra i: Partial and 
Overloaded Operators, Errors and 
Inheritance? Computer Science Lab., 
SRI International, 1987. 
\[OTW 78\] Goguen, J. A. and Thatcher, J. W. 
and Wagner, E.: An Initial Algebra 
Approach to The Specif ication, 
Correctness and Implementat ion of 
Abstract  Data Types. In: Current 
Trends in Programming Methodology, 
R. T. Yeh, (ed)~ Prentice-Hall, 
1978. 
\[Jo 86\] Johnson, M.: Comput ing with regular 
path formulas. Draft, 1986. 
\[Jo 87\] Johnson, M. : Attr ibute-Value Logic 
and Theory of Grammar. PhD Thesis, 
Stanford University, 1987. 
\[KB 70\] Knuth, D.E.~ Bendix, P.B. : Simple 
Word _Problems in Universal Algebra. 
in: J. Leech (Ed.): Computat ional  
problems in Universal  Algebra. 
Pergamon Press, 1970. 
\[Ka a6\] Kasper, R.T., Rounds, W.C.: A 
logical semantics for feature 
structures. Proc. 24th Annual 
Meeting, ACL, 1986. 
\[Pe 87\] Pereira, Fo : Grammars and Logics of 
Partial Information. Proc. 4th 
Int. Conf on f, ogic Programming, May 
1987. 
\[Ps 84\] 
\[RK 86\] 
\[SA 87\] 
\[Us 86\] 
Pereira, F., Shieber, S.M.: The 
semantics of grammar formalisms 
seen as computer languages. Proc. 
COLING-84, ACL, 1984. 
Rounds, W.C., Kasper, R.: A 
complete logical calculus for 
record structures represent ing 
l inguistic information. IEEE 
Symposium on Logic in Computer 
Science, 1986. 
Smolka, G., Ait-Kaci, H.: 
Inheritance Hierarchies: Semantics 
and Unif ication. MCC Technical  
Report AI-057-87, 1987. 
Uszkoreit, H.: Syntakt ische and 
semantische General is ierungen im 
struktur ierten Lexikon. Proc. 
GWAI-86, (eds. C.R. Roll inger, W. 
Horn), Springer Verlag 1986. 
45 
