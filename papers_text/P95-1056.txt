A Minimal ist  Head-Corner  Parser 
Mett ina  Veenst ra  
vakgroep Alfa- informatica, University of Groningen 
Postbus 716 
NL-9700 AS Groningen 
Mett ina@let.rug.nl  
Abst rac t  
In the Minimalist Program (Chomsky, 
1992) it is assumed that there are different 
types of projections (lexical and functional) 
and therefore different types of heads. This 
paper explains why functional heads are 
not treated as head-corners by the mini- 
realist head-corner parser described here. 
1 In t roduct ion  
In the Minimalist Program (Chomsky, 1992) 'sur- 
face' word order is determined ina very indirect way. 
Word order is no longer a property of phrase struc- 
ture, because phrase structure is universal. Fur- 
thermore movements are universal. This implies 
in principle that when we parse comparable sen- 
tences in different languages, we always build the 
same tree. Word order differences are distinguished 
by the choice of the moment of Spell Out (SO). 
SO is the point in the derivation where instructions 
are given to an interface level called PF (Phonetic 
Form). Thus SO yields what was formerly called 
surface structure. SO determines in which position 
in the tree a certain constituent becomes visible and 
consequently it determines the relative order of the 
constituents of a sentence. This is illustrated in the 
simplified tree in figure 1. Note that each cluster of 
co-indexed positions (i.e. a chain) in the figure has 
only one visible constituent. This is the position in 
which the constituent is represented at the moment 
of SO. This moment is not universal. The verb chain 
of our English example gives instructions to the in- 
terface level PF when the verb is adjoined to AgrS 
(head of the agreement phrase of the subject). The 
verb chain of a comparable sentence in Dutch 'spells 
out' when the verb is in V. Thus in Dutch subor- 
dinate clauses the movement of the verb to AgrO 
(head of the agreement phrase of the object) and 
CP 
I u 
/ \  
C AgrSP 
I / \  
that~ DP AgrS 
I / \  
she~ AgrS  AgrOP 
/ \  
V AgrS ej AorO 
I / \  
likesk AgrO VP 
o(; V AgrO 
I / \  
ek V DP 
\[ L 
ek cats j  
F igure  1: A s impl i f ied  t ree for a t rans i t i ve  subord inate  
c lause in Eng l i sh  
subsequently AgrS happens 'covertly'. The motiva- 
tion for covert movement can be found in (Chomsky, 
1992, pages 38-40). 
In the following sections we will show that the 
structure building operations of the Minimalist Pro- 
gram are bidirectional operations. Because head- 
corner parsing is a bidirectional strategy, this type 
of parser seems more favorable for minimalist pars- 
ing, than the usual eft to right parsing algorithms. 
2 GT  and  Move-c~ 
The central operations of the Minimalist Program 
are Generalized Transformation (GT) and Move- 
~. GT is a structure-building operation that builds 
trees in a bottom-up way as is illustrated in figure 2. 
338 
w 
V V / \  / \  
V e V DP 
YY l  I I  
~e her ~e see her 
F igure  2: GT app l ied  to  V and  DP y ie ld ing ~'. 
Two phrase markers (V and DP) are combined into 
one. One of these two is called the target (V). A pro- 
jection of the target (V) is added to the target. The 
projection of the target has two daughters: the tar- 
get itself and an empty position. The empty posi- 
tion is substituted for by the second phrase marker 
(DP). This second phrase marker is itself built up in 
other applications of GT and/or  Move-a. 
Move-(~ is a special kind of GT. It is an opera- 
tion that combines a target with a moved phrase 
marker. It is assumed that movement is always left- 
ward (Kayne, 1994) and that in the universal trees of 
the Minimalist Program heads and specifiers, which 
are the only positions to move to, are always to the 
left of the projection line. These two assumptions in
combination with the fact that GT and Move-a are 
bottom-up operations, effect that the moved phrase 
marker has to be contained in the tree that was built 
so far 1 
The tree in figure 1 illustrates different kinds of 
movement. In the Minimalist Program movement 
occurs to check features. Elements move from the 
lexical domain (VP) to the functional domain (e.g. 
AgrOP, AgrSP) to compare their features with the 
features that are present in the functional domain. 
3 Head-corner  pars ing  
The main idea behind head-driven parsing (Kay, 
1989) is that the lexical entries functioning as heads 
contain valuable information for the parsing process. 
For example, if a verb is intransitive it will not re- 
quire a complement, if it is transitive it will require a 
complement. Therefore the head is parsed before its 
sisters in a head-driven parser. A head-corner parser 
(Kay, 1989; Bouma and van Noord, 1993) is a spe- 
cial type of head-driven parser. Its main character- 
istic is that it does not work from left to right but in- 
stead works bidirectionally. That is, first a poten- 
tial head of a phrase is located and next the sisters 
of the head are parsed. The head can be in any po- 
sition in the string and its sisters can either be to 
the right or to the left. 
A head-corner parser starts the parsing process 
with a prediction step. This step is completed when 
iSee (Veenstra, 1994) for further details. 
a lexical head is found that is the head-corner of the 
goal (i.e. the type of constituent that is parsed). The 
head-corner relation is the reflexive and transitive 
closure of the head relation. A is the head of B if 
there is a rule with B as left hand side (LHS) and A 
as the head daughter on the right hand side (RHS). 
When a (lexical) head-corner is found an X rule is 
selected in which the (lexical) head is on the RHS. 
The sisters of the head are parsed recursively. The 
LHS of the rule contains the mother of the head. 
If this mother is a head-corner of the goal, and the 
mother and the goal are not equal the whole process 
is repeated by selecting a rule with the new head- 
corner (i.e. the mother of the first head-corner) on 
its RHS. 
In section 2 it is assumed that movement is invari- 
ably leftward and that GT and Move-a are bottom- 
up mechanisms. GT builds the VP before other pro- 
jections. Constituents of VP are moved to higher 
projections by Move-a, which is a special kind of 
GT. Suppose that the parser should consider AgrS 
as the head-corner of AgrSP, which accords with X- 
Theory. Then the head (AgrS) that should be filled 
with an adjoined verb by movement from AgrO (in 
a transitive sentence) or V (in an intransitive sen- 
tence) is created before AgrO and V. To avoid mov- 
ing constituents from a part of the tree that has not 
been built yet, the head-corner table for the min- 
imalist head-corner parser is not constructed com- 
pletely according to X-Theory (see (1)). 
(1) hc(AgrS,AgrSP), hc(V,VP). 
hc(AgrOP, AgrS). hc(V,V). 
hc(AgrO,AgrOP), hc(N,NP). 
hc(VP, AgrO). hc(N,~). 
For example, instead of AgrO, VP is the head- 
corner of AgrO. This solution is compatible with 
the Minimalist Program in the sense that in this 
way the tree is built up in an absolute bottom-up 
way (i.e. starting from V) so that a position that 
should be filled by movement is always created after 
the position from which the moved element comes. 
The head-corner table in (1) illustrates that func- 
tional heads like AgrO and AgrS are not processed 
as heads. Lexical proj_.ections like VP and NP are 
treated according to X-Theory. If we follow (1) in 
combination with the tree in figure 1 we establish 
the fact that the parser searches its way down to the 
verb as soon as possible. The top-down prediction 
step moves from thegoal  AgrSP to AgrS to AgrOP 
to AgrO to VP to V and finally to the lexical head- 
corner V where the bottom-up rocess tarts as the 
Minimalist Program requires. 
The head-corner parsing algorithm and the 
339 
structure-building operations of the Minimalist Pro- 
gram (GT and Move-a) have much in common. In 
both cases a tree is built up in a bottom-up way by 
starting with a head (lexical head-corner in the pars- 
ing algorithm, target in the structure building op- 
erations) and creating the sister of the head recur- 
sively, etc. 2 By treating only lexical heads as head- 
corners we achieved that our parsing algorithm com- 
pletely represents GT. Only for Move-a we need an 
extra predicate to accomplish a movement if there is 
a possible movement to the node that has just been 
created. 
4 Parsing vs. Generation 
In section 3 we chose not to consider functional heads 
as head-corners. This choice was made because it 
allows GT  and Move-a to start constructing a VP 
before the projections to which constituents from VP 
are moved are constructed. Another motivation to 
start with VP is that V contains information that 
is useful for the remainder of the structure building 
process. For example, if the verb is intransitive we 
know that V does not require a complement sister, 
and we know that we do not need an AgrOP on top 
of VP. The fact that V contains lexical information 
and functional heads like AgrO and AgrS do not, 
could be used as a justification for the fact that the 
latter are not head-corners. The main idea of head- 
driven parsing is, as was stated before, that heads 
contain relevant information for the parsing process, 
and that they therefore should be parsed before their 
sisters. Functional heads obtain their contents via 
movement of elements from positions lower in the 
tree. This special status makes them less useful for 
the parsing process. 
The Minimalist Program is a generation-oriented 
framework. Because we are dealing with parsing (as 
opposed to generation) in this paper there are cer- 
tain discrepancies between the parser and the frame- 
work it is based on. In the minimalist framework, 
lexical information belonging to a chain is available 
from the moment hat the first position of the chain 
is created, because that is the moment when the lex- 
icon is consulted. When parsing a sentence the lexi- 
con is not by definition consulted at the beginning of 
the chain. Figure 1 shows a tree that contains traces 
and visible constituents. The position containing a
visible constituent is the SO position of that chain. 
The parser consults the lexicon at the moment in 
which the SO position of a chain is reached. Conse- 
Sin the minimalist head-corner parser that is de- 
scribed here a head always has only one sister because 
minimalist rees are at most binary branching. 
quently, when a trace is created before SO, the fea- 
tures belonging to that trace are unknown. The fea- 
tures of the traces of a certain chain are known as 
soon as the SO position is reached, because all posi- 
tions in a chain are linked. 
It can be concluded that the absolute bottom-up 
approach for the building of trees is more useful for 
generation than for parsing. In generation, lexical 
information can be used as soon as a position that 
is the beginning of a chain is created. In parsing we 
will have to wait until the SO position is reached. 
In spite of this, we chose not to consider functional 
heads as heads in order to accomplish an absolute 
bottom-up rocess. The reason for this is that, as 
was mentioned before, otherwise we would be rea- 
soning backwards with relation to movement. This 
could be inefficient and it is too far removed from 
the ideas of the minimalist framework. 
5 Future  P lans  
The parser described here can judge the grammat- 
icality of simple declarative transitive and intransi- 
tive sentences, and of subordinate clauses. We will 
extend the parser in such a way that it will cover 
more advanced linguistic phenomena like anaphors 
and wh-questions. Furthermore other types of 
parsers will be built to determine if this 'lexical' 
head-corner parser is indeed more efficient. 
6 Acknowledgements 
I would like to thank Gosse Bouma, John Nerbonne, 
Gertjan van Noord and Jan-Wouter Zwart for their 
helpful comments on earlier versions of this paper. 
Re ferences  
Gosse Bouma and Gertjan van Noord. 1993. Head- 
driven parsing for lexicalist grammars: Experi- 
mental results. In 6th Meeting of the European 
chapter of the Association for Computational Lin- 
guistics, Utrecht. 
Noam Chomsky. 1992. A minimalist program for 
linguistic theory. MIT Occasional Papers in Lin- 
guistics. 
Martin Kay. 1989. Head driven parsing. In Proceed- 
ings of Workshop on Parsing Technologies, Pitts- 
burg. 
Richard S. Kayne. 1994. The antisymmetry of syn- 
tax. MIT Press, Cambridge. 
Mettina J.A. Veenstra. 1994. Towards a formaliza- 
tion of generalized transformation. In H. de Hoop 
A. de Boer and Henriette de Swart, editors, Lan- 
guage and Cognition ~, Groningen. 
340 
