Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics:shortpapers, pages 194?199,
Portland, Oregon, June 19-24, 2011. c?2011 Association for Computational Linguistics
Reversible Stochastic Attribute-Value Grammars
Danie?l de Kok
University of Groningen
d.j.a.de.kok@rug.nl
Barbara Plank
University of Groningen
b.plank@rug.nl
Gertjan van Noord
University of Groningen
g.j.m.van.noord@rug.nl
Abstract
An attractive property of attribute-value gram-
mars is their reversibility. Attribute-value
grammars are usually coupled with sepa-
rate statistical components for parse selection
and fluency ranking. We propose reversible
stochastic attribute-value grammars, in which
a single statistical model is employed both for
parse selection and fluency ranking.
1 Introduction
Reversible grammars were introduced as early as
1975 by Martin Kay (1975). In the eighties, the
popularity of attribute-value grammars (AVG) was
in part motivated by their inherent reversible na-
ture. Later, AVG were enriched with a statistical
component (Abney, 1997): stochastic AVG (SAVG).
Training a SAVG is feasible if a stochastic model
is assumed which is conditioned on the input sen-
tences (Johnson et al, 1999). Various parsers based
on this approach now exist for various languages
(Toutanova et al, 2002; Riezler et al, 2002; van
Noord and Malouf, 2005; Miyao and Tsujii, 2005;
Clark and Curran, 2004; Forst, 2007). SAVG can be
applied for generation to select the most fluent real-
ization from the set of possible realizations (Velldal
et al, 2004). In this case, the stochastic model is
conditioned on the input logical forms. Such gener-
ators exist for various languages as well (Velldal and
Oepen, 2006; Nakanishi and Miyao, 2005; Cahill et
al., 2007; de Kok and van Noord, 2010).
If an AVG is applied both to parsing and gen-
eration, two distinct stochastic components are re-
quired, one for parsing, and one for generation. To
some extent this is reasonable, because some fea-
tures are only relevant in a certain direction. For
instance, features that represent aspects of the sur-
face word order are important for generation, but ir-
relevant for parsing. Similarly, features which de-
scribe aspects of the logical form are important for
parsing, but irrelevant for generation. Yet, there are
also many features that are relevant in both direc-
tions. For instance, for Dutch, a very effective fea-
ture signals a direct object NP in fronted position in
main clauses. If a main clause is parsed which starts
with a NP, the disambiguation component will fa-
vor a subject reading of that NP. In generation, the
fluency component will favor subject fronting over
object fronting. Clearly, such shared preferences are
not accidental.
In this paper we propose reversible SAVG in
which a single stochastic component is applied both
in parsing and generation. We provide experimen-
tal evidence that such reversible SAVG achieve sim-
ilar performance as their directional counterparts.
A single, reversible model is to be preferred over
two distinct models because it explains why pref-
erences in a disambiguation component and a flu-
ency component, such as the preference for subject
fronting over object fronting, are shared. A single,
reversible model is furthermore of practical inter-
est for its simplicity, compactness, and maintainabil-
ity. As an important additional advantage, reversible
models are applicable for tasks which combine as-
pects of parsing and generation, such as word-graph
parsing and paraphrasing. In situations where only a
small amount of training data is available for parsing
or generation, cross-pollination improves the perfor-
194
mance of a model. If preferences are shared between
parsing and generation, it follows that a generator
could benefit from parsing data and vice versa. We
present experimental results indicating that in such a
bootstrap scenario a reversible model achieves better
performance.
2 Reversible SAVG
As Abney (1997) shows, we cannot use relatively
simple techniques such as relative frequencies to
obtain a model for estimating derivation probabili-
ties in attribute-value grammars. As an alternative,
he proposes a maximum entropy model, where the
probability of a derivation d is defined as:
p(d) =
1
Z
exp
?
i
?ifi(d) (1)
fi(d) is the frequency of feature fi in derivation
d. A weight ?i is associated with each feature fi.
In (1), Z is a normalizer which is defined as fol-
lows, where ? is the set of derivations defined by
the grammar:
Z =
?
d???
exp
?
i
?ifi(d
?) (2)
Training this model requires access to all derivations
? allowed by the grammar, which makes it hard to
implement the model in practice.
Johnson et al (1999) alleviate this problem by
proposing a model which conditions on the input
sentence s: p(d|s). Since the number of derivations
for a given sentence s is usually finite, the calcula-
tion of the normalizer is much more practical. Con-
versely, in generation the model is conditioned on
the input logical form l, p(d|l) (Velldal et al, 2004).
In such directional stochastic attribute-value gram-
mars, the probability of a derivation d given an input
x (a sentence or a logical form) is defined as:
p(d|x) =
1
Z(x)
exp
?
i
?ifi(x, d) (3)
with Z(x) as (?(x) are all derivations for input x):
Z(x) =
?
d???(x)
exp
?
i
?ifi(x, d
?) (4)
Consequently, the constraint put on feature values
during training only refers to derivations with the
same input. If X is the set of inputs (for parsing,
all sentences in the treebank; for generation, all log-
ical forms), then we have:
Ep(fi)? Ep?(fi) = 0 ? (5)
?
x?X
?
d??(x)
p?(x)p(d|x)fi(x, d)? p?(x, d)fi(x, d) = 0
Here we assume a uniform distribution for p?(x).
Let j(d) be a function which returns 0 if the deriva-
tion d is inconsistent with the treebank, and 1 in case
the derivation is correct. p?(x, d) is now defined in
such a way that it is 0 for incorrect derivations, and
uniform for correct derivations for a given input:
p?(x, d) = p?(x)
j(d)
?d???(x)j(d?)
(6)
Directional SAVG make parsing and generation
practically feasible, but require separate models for
parse disambiguation and fluency ranking.
Since parsing and generation both create deriva-
tions that are in agreement with the constraints im-
plied by the input, a single model can accompany
the attribute-value grammar. Such a model estimates
the probability of a derivation d given a set of con-
straints c, p(d|c). We use conditional maximum en-
tropy models to estimate p(d|c):
p(d|c) =
1
Z(c)
exp
?
i
?ifi(c, d) (7)
Z(c) =
?
d???(c)
exp
?
i
?ifi(c, d
?) (8)
We derive a reversible model by training on data
for parse disambiguation and fluency ranking simul-
taneously. In contrast to directional models, we im-
pose the two constraints per feature given in figure 1:
one on the feature value with respect to the sentences
S in the parse disambiguation treebank and the other
on the feature value with respect to logical forms L
in the fluency ranking treebank. As a result of the
constraints on training defined in figure 1, the fea-
ture weights in the reversible model distinguish, at
the same time, good parses from bad parses as well
as good realizations from bad realizations.
3 Experimental setup and evaluation
To evaluate reversible SAVG, we conduct experi-
ments in the context of the Alpino system for Dutch.
195
?s?S
?
d??(s)
p?(s)p(d|c = s)fi(s, d)? p?(c = s, d)fi(s, d) = 0
?
l?L
?
d??(l)
p?(l)p(d|c = l)fi(l, d)? p?(c = l, d)fi(l, d) = 0
Figure 1: Constraints imposed on feature values for training reversible models p(d|c).
Alpino provides a wide-coverage grammar, lexicon
and parser (van Noord, 2006). Recently, a sentence
realizer has been added that uses the same grammar
and lexicon (de Kok and van Noord, 2010).
In the experiments, the cdbl part of the Alpino
Treebank (van der Beek et al, 2002) is used as train-
ing data (7,154 sentences). The WR-P-P-H part
(2,267 sentences) of the LASSY corpus (van Noord
et al, 2010), which consists of text from the Trouw
2001 newspaper, is used for testing.
3.1 Features
The features that we use in the experiment are the
same features which are available in the Alpino
parser and generator. In the following section, these
features are described in some detail.
Word adjacency. Two word adjacency features
are used as auxiliary distributions (Johnson and Rie-
zler, 2000). The first feature is the probability of the
sentence according to a word trigram model. The
second feature is the probability of the sentence ac-
cording to a tag trigram model that uses the part-
of-speech tags assigned by the Alpino system. In
both models, linear interpolation smoothing for un-
known trigrams, and Laplacian smoothing for un-
known words and tags is applied. The trigram mod-
els have been trained on the Twente Nieuws Corpus
corpus (approximately 110 million words), exclud-
ing the Trouw 2001 corpus. In conventional pars-
ing tasks, the value of the word trigram model is the
same for all derivations of a given input sentence.
Lexical frames. Lexical analysis is applied dur-
ing parsing to find all possible subcategorization
frames for the tokens in the input sentence. Since
some frames occur more frequently in good parses
than others, we use feature templates that record the
frames that were used in a parse. An example of
such a feature is: ??to play? serves as an intransi-
tive verb?. We also use an auxiliary distribution of
word and frame combinations that was trained on
a large corpus of automatically annotated sentences
(436 million words). The values of lexical frame
features are constant for all derivations in sentence
realization, unless the frame is not specified in the
logical form.
Dependency relations. There are also feature
templates which describe aspects of the dependency
structure. For each dependency, three types of de-
pendency features are extracted. Examples of such
features are ?a pronoun is used as the subject of
a verb?, ?the pronoun ?she? is used as the sub-
ject of a verb?, ?the noun ?beer? is used as the
object of the verb ?drink??. In addition, features
are used which implement auxiliary distributions
for selectional preferences, as described in Van No-
ord (2007). In conventional realization tasks, the
values of these features are constant for all deriva-
tions for a given input representation.
Syntactic features. Syntactic features include fea-
tures which record the application of each grammar
rule, as well as features which record the application
of a rule in the context of another rule. An exam-
ple of the latter is ?rule 167 is used to construct the
second daughter of a derivation constructed by rule
233?. In addition, there are features describing more
complex syntactic patterns such as: fronting of sub-
jects and other noun phrases, orderings in the middle
field, long-distance dependencies, and parallelism of
conjuncts in coordination.
3.2 Parse disambiguation
Earlier we assumed that a treebank is a set of cor-
rect derivations. In practice, however, a treebank
only contains an abstraction of such derivations (in
196
our case sentences with corresponding dependency
structures), thus abstracting away from syntactic de-
tails needed in a parse disambiguation model. As in
Osborne (2000), the derivations for the parse disam-
biguation model are created by parsing the training
corpus. In the current setting, up to at most 3000
derivations are created for every sentence. These
derivations are then compared to the gold standard
dependency structure to judge the quality of the
parses. For a given sentence, the parses with the
highest concept accuracy (van Noord, 2006) are con-
sidered correct, the rest is treated as incorrect.
3.3 Fluency ranking
For fluency ranking we also need access to full
derivations. To ensure that the system is able to
generate from the dependency structures in the tree-
bank, we parse the corresponding sentence, and se-
lect the parse with the dependency structure that
corresponds most closely to the dependency struc-
ture in the treebank. The resulting dependency
structures are fed into the Alpino chart generator
to construct derivations for each dependency struc-
ture. The derivations for which the corresponding
sentences are closest to the original sentence in the
treebank are marked correct. Due to a limit on gen-
eration time, some longer sentences and correspond-
ing dependency structures were excluded from the
data. As a result, the average sentence length was
15.7 tokens, with a maximum of 26 tokens. To com-
pare a realization to the correct sentence, we use the
General Text Matcher (GTM) method (Melamed et
al., 2003; Cahill, 2009).
3.4 Training the models
Models are trained by taking an informative sam-
ple of ?(c) for each c in the training data (Osborne,
2000). This sample consists of at most 100 ran-
domly selected derivations. Frequency-based fea-
ture selection is applied (Ratnaparkhi, 1999). A fea-
ture f partitions ?(c), if there are derivations d and
d? in ?(c) such that f(c, d) 6= f(c, d?). A feature is
used if it partitions the informative sample of ?(c)
for at least two c. Table 1 lists the resulting charac-
teristics of the training data for each model.
We estimate the parameters of the conditional
Features Inputs Derivations
Generation 1727 3688 141808
Parse 25299 7133 376420
Reversible 25578 10811 518228
Table 1: Size of the training data for each model
maximum entropy models using TinyEst,1 with a
Gaussian (`2) prior distribution (? = 0, ?2 = 1000)
to reduce overfitting (Chen and Rosenfeld, 1999).
4 Results
4.1 Parse disambiguation
Table 2 shows the results for parse disambiguation.
The table also provides lower and upper bounds: the
baseline model selects an arbitrary parse per sen-
tence; the oracle chooses the best available parse.
Figure 2 shows the learning curves for the direc-
tional parsing model and the reversible model.
Model CA (%) f-score (%)
Baseline 75.88 76.28
Oracle 94.86 95.09
Parse model 90.93 91.28
Reversible 90.87 91.21
Table 2: Concept Accuracy scores and f-scores in terms
of named dependency relations for the parsing-specific
model versus the reversible model.
The results show that the general, reversible,
model comes very close to the accuracy obtained
by the dedicated, parsing specific, model. Indeed,
the tiny difference is not statistically significant. We
compute statistical significance using the Approxi-
mate Randomization Test (Noreen, 1989).
4.2 Fluency ranking
Table 3 compares the reversible model with a di-
rectional fluency ranking model. Figure 3 shows
the learning curves for the directional generation
model and the reversible model. The reversible
model achieves similar performance as the direc-
tional model (the difference is not significant).
To show that a reversible model can actually profit
from mutually shared features, we report on an ex-
periment where only a small amount of generation
1http://github.com/danieldk/tinyest
197
0.0 0.1 0.2 0.3 0.4 0.57
67
88
08
28
48
68
89
0
Proportion parse training data
CA (%
)
parse modelreversible model
Figure 2: Learning curve for directional and reversible
models for parsing. The reversible model uses all training
data for generation.
Model GTM
Random 55.72
Oracle 86.63
Fluency 71.82
Reversible 71.69
Table 3: General Text Matcher scores for fluency ranking
using various models.
training data is available. In this experiment, we
manually annotated 234 dependency structures from
the cdbl part of the Alpino Treebank, by adding cor-
rect realizations. In many instances, there is more
than one fluent realization. We then used this data to
train a directional fluency ranking model and a re-
versible model. The results for this experiment are
shown in Table 4. Since the reversible model outper-
forms the directional model we conclude that indeed
fluency ranking benefits from parse disambiguation
data.
Model GTM
Fluency 70.54
Reversible 71.20
Table 4: Fluency ranking using a small amount of anno-
tated fluency ranking training data (difference is signifi-
cant at p < 0.05).
0.0 0.1 0.2 0.3 0.4 0.5
60
65
70
Proportion generation training data
GTM
 scor
e
generation modelreversible model
Figure 3: Learning curves for directional and reversible
models for generation. The reversible models uses all
training data for parsing.
5 Conclusion
We proposed reversible SAVG as an alternative to
directional SAVG, based on the observation that
syntactic preferences are shared between parse dis-
ambiguation and fluency ranking. This framework
is not purely of theoretical interest, since the exper-
iments show that reversible models achieve accura-
cies that are similar to those of directional models.
Moreover, we showed that a fluency ranking model
trained on a small data set can be improved by com-
plementing it with parse disambiguation data.
The integration of knowledge from parse disam-
biguation and fluency ranking could be beneficial for
tasks which combine aspects of parsing and genera-
tion, such as word-graph parsing or paraphrasing.
198
References
Steven Abney. 1997. Stochastic attribute-value gram-
mars. Computational Linguistics, 23(4):597?618.
Aoife Cahill, Martin Forst, and Christian Rohrer. 2007.
Stochastic realisation ranking for a free word order
language. In ENLG ?07: Proceedings of the Eleventh
European Workshop on Natural Language Genera-
tion, pages 17?24, Morristown, NJ, USA.
Aoife Cahill. 2009. Correlating human and automatic
evaluation of a german surface realiser. In Proceed-
ings of the ACL-IJCNLP 2009 Conference - Short Pa-
pers, pages 97?100.
Stanley F. Chen and Ronald Rosenfeld. 1999. A gaussian
prior for smoothing maximum entropy models. Tech-
nical report, Carnegie Mellon University, Pittsburg.
Stephen Clark and James R. Curran. 2004. Parsing the
WSJ using CCG and log-linear models. In Proceed-
ings of the 42nd Annual Meeting of the ACL, pages
103?110, Morristown, NJ, USA.
Danie?l de Kok and Gertjan van Noord. 2010. A sentence
generator for Dutch. In Proceedings of the 20th Com-
putational Linguistics in the Netherlands conference
(CLIN).
Martin Forst. 2007. Filling statistics with linguistics:
property design for the disambiguation of german lfg
parses. In DeepLP ?07: Proceedings of the Workshop
on Deep Linguistic Processing, pages 17?24, Morris-
town, NJ, USA.
Mark Johnson and Stefan Riezler. 2000. Exploiting
auxiliary distributions in stochastic unification-based
grammars. In Proceedings of the 1st Meeting of the
NAACL, pages 154?161, Seattle, Washington.
Mark Johnson, Stuart Geman, Stephen Canon, Zhiyi Chi,
and Stefan Riezler. 1999. Estimators for stochastic
?unification-based? grammars. In Proceedings of the
37th Annual Meeting of the ACL.
Martin Kay. 1975. Syntactic processing and functional
sentence perspective. In TINLAP ?75: Proceedings of
the 1975 workshop on Theoretical issues in natural
language processing, pages 12?15, Morristown, NJ,
USA.
I. Dan Melamed, Ryan Green, and Joseph Turian. 2003.
Precision and recall of machine translation. In HLT-
NAACL.
Yusuke Miyao and Jun?ichi Tsujii. 2005. Probabilistic
disambiguation models for wide-coverage hpsg pars-
ing. In Proceedings of the 43rd Annual Meeting of the
ACL, pages 83?90, Morristown, NJ, USA.
Hiroko Nakanishi and Yusuke Miyao. 2005. Probabilis-
tic models for disambiguation of an hpsg-based chart
generator. In Proceedings of the 9th International
Workshop on Parsing Technologies (IWPT), pages 93?
102.
Eric W. Noreen. 1989. Computer-Intensive Methods
for Testing Hypotheses: An Introduction. Wiley-
Interscience.
Miles Osborne. 2000. Estimation of stochastic attribute-
value grammars using an informative sample. In Pro-
ceedings of the 18th conference on Computational lin-
guistics (COLING), pages 586?592.
Adwait Ratnaparkhi. 1999. Learning to parse natural
language with maximum entropy models. Machine
Learning, 34(1):151?175.
Stefan Riezler, Tracy H. King, Ronald M. Kaplan,
Richard Crouch, John T. Maxwell III, and Mark John-
son. 2002. Parsing the wall street journal using a
lexical-functional grammar and discriminative estima-
tion techniques. In Proceedings of the 40th Annual
Meeting of the ACL, pages 271?278, Morristown, NJ,
USA.
Kristina Toutanova, Christopher D. Manning, Stuart M.
Shieber, Dan Flickinger, and Stephan Oepen. 2002.
Parse disambiguation for a rich hpsg grammar. In
First Workshop on Treebanks and Linguistic Theories
(TLT), pages 253?263, Sozopol.
Leonoor van der Beek, Gosse Bouma, Robert Malouf,
and Gertjan van Noord. 2002. The Alpino depen-
dency treebank. In Computational Linguistics in the
Netherlands (CLIN).
Gertjan van Noord and Robert Malouf. 2005. Wide
coverage parsing with stochastic attribute value gram-
mars. Draft available from the authors. A preliminary
version of this paper was published in the Proceedings
of the IJCNLP workshop Beyond Shallow Analyses,
Hainan China, 2004.
Gertjan van Noord, Ineke Schuurman, and Gosse Bouma.
2010. Lassy syntactische annotatie, revision 19053.
Gertjan van Noord. 2006. At Last Parsing Is Now
Operational. In TALN 2006 Verbum Ex Machina,
Actes De La 13e Conference sur Le Traitement Au-
tomatique des Langues naturelles, pages 20?42, Leu-
ven.
Gertjan van Noord. 2007. Using self-trained bilexical
preferences to improve disambiguation accuracy. In
Proceedings of the International Workshop on Parsing
Technology (IWPT), ACL 2007 Workshop, pages 1?
10, Prague.
Erik Velldal and Stephan Oepen. 2006. Statistical rank-
ing in tactical generation. In Proceedings of the 2006
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP), pages 517?525, Sydney,
Australia, July. ACL.
Erik Velldal, Stephan Oepen, and Dan Flickinger. 2004.
Paraphrasing treebanks for stochastic realization rank-
ing. In Proceedings of the 3rd Workshop on Treebanks
and Linguistic Theories (TLT), pages 149?160.
199
