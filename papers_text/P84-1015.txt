USES OF C-GP.APHS lil A PROTOTYPE FOR ALrFC~ATIC TRNLSLATION, 
Marco A. CLEMENTE-SALAZAR 
Centro de Graduados e Invest igac i6n,  
Ins t l tu to  Tecnol6gico de Chihuahua, 
Av. Tecnol6gico No. 2909, 
31310 Chihuahua, Chih.,  MEXICO. 
ABSTRACT 
This paper presents a prototype, not com- 
pletely operational, that is intended to use 
c-graphs in the translation of assemblers. Firstly, 
the formalization of the structure and its princi- 
pal notions (substructures, classes of substruc- 
tures, order, etc.) are presented. Next section de- 
scribes the prototype which is based on a Transfor- 
mational System as well as on a rewriting system of 
c-graphs which constitutes the nodes of the Trans- 
formational System. The following part discusses a 
set of operations on the structure. Finally, the 
implementation in its present state is shown. 
1. INTRODUCTION. 
In the past \ [10,11\] ,  several kinds of repre- 
sentat ion have been used (s t r ings ,  label led trees,  
trees wi th  "decorat ions" ,  graphs of  s t r ings  and 
(semantic) networks). C-graphs had i t s  o r ig in  as 
an a l te rnat ive  in the representat ion and in the 
treatment of  ambiguit ies in Automatic Trans lat ion.  
In ear l ie r  papers \[4,5\]  th is  s t ructure  is named 
E-graph but c-graph is bet ter  suited since i t  is a 
general ized "grafo  de cadenas" (graph of s t r ings) .  
This s t ructure  combines some advantages of  
the Q-systems \[7\] and of the trees of ARIANE-78 
\ [1 ,2 ,11\ ] ,  in par t i cu la r ,  the use of  only one st ruc-  
ture for  a l l  the t rans la t ion  process (as ln  the 
former) and foreseeable dec idab i l i ty  and para l le l -  
ism (as in the la t te r ) .  This paper presents a pro- 
totype, not completely operat iona l ,  that uses 
c-graphs and is intended to t rans la te  assemblers 
to ref ine the adequacy of th is  kind of  s t ructure  
in the t rans la t ion  of natural  languages. 
2. DEFINITIONS 
C-graph. A c-graph G is a cycle f ree , labe l led  
graph \[1,9\] wi thout  i so lated nodes and wi th  exact ly  
one entry node and one ex i t  node. I t  is completely 
determined by a 7- tupie:  G=(A,S,p, I ,O,E,?) ,  where 
A is a set of arcs, S a set of  nodes, p a mapping 
of A into SxS, I the input node, 0 the output node, 
E a set of labels (c - t rees ,  c-graphs) and E a map- 
ping of A into E. For the sake of s imp l i c i ty ,  arcs 
and labels w i l l  be merged in the representat ion of 
G (cf.  Fig.1 . In terest ing c-graphs are sequential  
c-graphs (cf .  Fig.2a) and bundles (cf .  F ig .2b) .  
G= 1 ~ 7  
h~. . .~  e - -  v k 
A={1 . . . . .  12} ; S={1 . . . . .  7} ; I={1} ; 0={7} 
p={ (1 ,1 ,2) ,  (2 ,2 ,4) ,  (3 ,4 ,5) ,  (4,5,7), (5,5,6), 
(6 ,6 ,7) ,  (7 ,6 ,7) ,  (8 ,2 ,3) ,  (9 ,3 ,4) ,  (10,3,5) ,  
(11,1,2) ,  (12,1,2)} 
E={a,b ,c ,d ,e , f ,g ,h , i  , j , k}  
E={ (I ,a), (2,b), (3,f), (4,g), (5, i), (6,j), 
(7 ,k) ,  (8 ,c) ,  (9 ,d) ,  ( lO ,e) ,  (11,b) ,  (12,h) } 
F ig.1.  A c-graph. 
GI= ~ i :c J ~o 
(a) (b) 
Fig.2.  A seq. c-graph (a) and a bundle (b). 
C-trees. A c - t ree  or a t ree wi th  decorations 
is an ordered t ree,  wi th  nodes labe l led by a label 
and a decorat ion that is i t se l f  a decorated t ree,  
poss ib ly empty. 
Classes of c-graphs. There are three major 
classes: (1) recursive c-graphs (cf .  Fig.3a) where 
each arc is labe l led by a c-graph; (2) simple 
c-graphs (cf .  F ig . l )  where each arc is labe l led by 
a c - t ree  and (3) regular  c-graphs, a proper sub- 
class of the second that is obtained by concatena- 
t ion  and a l te rnat ion  of simple arcs (cf .  F ig .3b) .  
By denoting concatenation by " . "  and a l te rnat ion  
by "+", we have an evident l inear  representat ion.  
For example, G4=g+i.( j+k).  Note that not every 
c-graph may be obtained by these operat ions,  e.g.G. 
Substructures. For the sake of homogeneity, 
the only substructures al lowed are those that are 
themselves c-graphs. They w i l l  be ca l led sub- 
61 
-c-graphs or  seg's.  For example, G1 and G2 are 
seg's of  G. 
G2 
a) A recursive c-graph. 
b) A regu lar  c-graph. G4= 
F ig .3 .  Two classes o f  c-graphs.  
I so la tab i l i ty .  I t  is a feature  that  deter -  
mines, fo r  each c-graph G, several  classes o f  seg's 
An i so la ted  seg G' is in tu i t i ve ly  a seg that  has no 
arcs that  "enter"  or  that  " leave"  G'. Depending on 
the re la t ion  that  each i so la ted  seg keeps w i th  the 
rest  o f  the c-graph,  several  classes o f  i so la tab i l -  
i ty  can be def ined.  
a) Weak i so la tab i l i ty .  A seg G' of  G is weakly 
i so la tab le  ( seg i f )  i f  and on ly  i f  fo r  every 
node x o f  G' (except I '  and 0 ' ) ,  a l l  o f  the 
arcs that  leave or enter  x are in G ~. E .g. :  
G5=i is a seg i f  o f  G. 
b) Normal i so la tab i l i ty .  A seg G' of  G is normaly 
i so la tab le  (segmi) i f  and on ly  i f  i t  is a 
seg i f  and there is a path, not in G', such 
that  i t  leaves I '  and enters  0 ' .  Example: G6=k 
is a segmi of  G. 
c) Strong i so la tab i l i ty .  A seg G' of  G is 
s t rong ly  i so la tab le  ( segf i )  i f  and only  i f  the 
on ly  node that  has enter ing  arcs not in G' is 
I '  and the on ly  node that  has leaving arcs not 
in G' is 0 ' .  When G' is not an arc and there 
is no segf i  contained s t r i c t ly  in G',  then G' 
is an "e lementary segf i " ;  i f  G conta ins no 
segf i ,  then G. is e lementary.  E.g. G4 is a 
segfi  of  G. 
Order and roads. Two order  re la t ions  are con- 
sidered: (l) a "vertical" order or linear order of 
the arcs having the same initial node and (2) a 
"horizontal" order or partial order between two 
arcs on the same path. A road is a path from I to 0 
Vertical order induces a linear order on roads. 
3. DEFINITION OF THE PROTOTYPE. 
The prototype consists of a model and a data 
structure. The model is essentially a generaliza- 
tion of a Transformational System (TS) analogous 
to ROBRA \[2\] and whose grammars are rewriting sys- 
tems of c-graphs (RSC) \[4,5,6\]. Regarding data 
structure, we use c-graphs, 
3.1A Transformational ~stem. 
This TS is a c-graph-~c-graph transducer. It  
is a "control" graph whose nodes are RSC and the 
arcs are labelled by conditions. 
A TS is a cycle free oriented graph, with 
only one input and such that, 
CI) Each node is labelled with a RSC or &nul. 
(2) &nul has no successor. 
(3) Each grammar of the RSC has a transition 
scheme S or c (empty scheme). 
~4) Arcs of the same in i t ia l  node are ordered. 
TS works heuristical ly. G~ven a c-graph gn as 
an input, i t  searches for the f i r s t  path endin~ in 
&nul. This fac t  impl ies that  a l l  of  the t rans i t ion  
schemes on the path were sat i s f ied .  Any scheme not 
sa t i s f ied  provokes a search of  a new path. For 
example, i f  $1 is sa t i s f ied ,  TS produces Gl(gn)=g 1 
and i t  proceeds to calculate G2(G1(go))=g ~. IY S 4' 
is satisfied the system stops and produce~ g~. 
Otherwise, i t  backtracks to GI and tests S2.-If i t  
is satisfied g\] is produced. Otherwise, i t  tests 
S3, etc. 
? Snul 
S 4 
~- &nul 
F ig .4 .  A Transformat ional  System. 
3.2 A REWRITING SYSTEM. 
Let us consider a simple example: let GR be 
the following grar~mar for syntactic analysis (with- 
out intending an example of l inguist ic value). 
R1:(g1+e1+g2)(g3+~2+g4)* I 
(g1+gZ)(g3+~2+g4)?61 I 
R2:(g1+~1+gZ)(g3+eZ+g4) 
(gl+g2)(g3+~2+g4)+81 
R3:~I(gl+~Z+g2) 
~1(g1+g2)+B1 
R4:~l(g1+~2+g2) 
g1+g2+81 
R5:(g1+~1+g2)(g3+~2+g4) 
(g1+g2)(g3+~2+g4)+B1 
R6:(g1+~1+g2)(g3+~2+g4) 
(g1+g2)(g3+~2+g4)+61 
~I=GN, ~2=GV / == 
81:=PHRA(~I,~2) / .  
/ ~I=VB, ~2=GN / == 
/ BI:=PRED(~I,~2) /. 
/ ~I=NP, ~2=AD / == 
/ BI:=GN(~I,~2) / .  
/ ~I=NP, ~2=PRED / == 
/ 61:=PHRA(~I,~2) /. 
/ ~I=PRON, ~2=VB / == 
/ 61:=GV(~I,~2) /. 
/ ~I=ART, ~2=NM / == 
/ BI:=GN(~I,~2) /. 
As we can see, each rule has: a name (RI,R2, 
. . . ) ,  a lef t  side and a right side. 
The left  side defines the geometricaI Form 
62 
and the cond i t ion  that  an actual  seg must meet in 
order to be transformed. I t  is a c-graph scheme 
composed of two parts :  the s t ruc tura l  descr ip tor  
that  def ines the geometr ical  form and the cond i t ion  
(between slashes) that  tests  label in format ion .  The 
f i r s t  part  use "*"  as an "element of s t ruc tura l  de- 
sc r ip t ion"  in the f i r s t  ru le .  I t  denotes the fact  
that  no seg must be r ight -concatenated to g3+~2+g4. 
The r ight  side def ines the t rans format ion  to 
be done. I t  consists  of  a s t ruc tura l  descr ip tor ,  
s imi la r  to the one on the le f t  s ide and a l l s t  of  
label assignments (also between slashes) where for  
each new iabe\] we precise the values i t  takes; and 
for  each old one, i t s  poss ib le  mod i f i ca t ions .  A 
po int  ends the ru le .  Note the proper t ies  of  an 
empty g: i f  g' is any c-graph, then g.g '=g and 
g+g'=g' .  
Let us analyze the phrase: "Ana l i s ta  la t i -  
ra" .  The representat ion  in our formalism is G7. 
Morphological  ana lys is  produces G8. Note that  a11 
ambigu i t ies  are kept in the same s t ruc ture  in the 
form of  para \ ] \ ]e \ ]  arcs. The app l i ca t ion  of  GR to G8 
resu l t s  in Gg, where each arc w i l l  be labe l led  w i th  
a c - t ree  wi th  a possib\]e in terpreta t ion  of  G8 in 
grammar GR. The sequence of  app l i ca t ions  is R3, R6, 
RS, RI, R2, R4. The system stops when. no more rules 
are app l i cab \ ]e .  
G7= e Ana ^ . . . . .  l i s ta  _ la _^ t i ra  :o 
GS= Ana C 
np 
el 
1 i s to  \ 
ad 
t i tar  
lo 
pron 
, where 
AI=PHRA(GN(NP(Ana), AD( l i s to ) ) ,  GV(PRON(Io), 
VB( t i ra r ) ) )  
A2=PHRA(NP(Ana), PRED(VB(IIstar, GN(ART(eI), 
NM(t i ra ) ) ) )  
Operations are d iv ided in two classes:  (1) 
those where the s t ruc ture  is taken as a whole (g lo~ 
a\ ] )  and (2) those that  t ransform substructures 
( local) ,  
I. Global Operations. 
Concatenation and al ternat ion have been de- 
fined above. These operations produce sequentlaI 
c-graphs and bundles respectively, as well as the 
polynomia\] wr i t ing of regular c-graphs. 
Expansion. This operation produces a bundle 
exp(G) from a l l  the roads of a c-graph G. For exam- 
ple, expansion of GIO produces exp(G10)=(b.f)+ 
(c.d. f )+(c.e) .  
GIO= ~ f 
exp(G10)= 
f 
F ig .6 .  Expansion of  a c-graph. 
Factor i za t ion .  There are two kinds and the i r  
resu l ts  may d i f fe r .  Consider G11=a.b+a.c+d.e+d.f+ 
g . f+h.e .  Lef t  fac tor l za t ion  produces G12=a.(b+c)+ 
d . (e+f )+g. f+h.e ,  and r ight  fac tor i za t ion  G13=a.b+ 
a. c+ (d+h). e+ (d+g). f .  
A rbor i za t ion .  This operat ion  constructs a 
c - t ree  from a c-graph. There may be several  kinds 
of  c - t rees  that  can be constructed but we search 
fo r  a t ree  that  keeps ver t i ca l  and hor i zonta l  o r -  
ders,  i .e .  one that  codes the s t ruc ture  of  the 
c-graph. An "and-or"  (y-o) t ree  is wel l  su i ted for  
th i s  purpose. The resu l t  o f  the operat ion  w i l l  be 
a c-graph wi th  one and on ly  one arc labe l led  by 
the and-or t ree .  For example, arb(G)=G14 (cf .  Fig. 
7).  Note that  the non-regular  seg has ~ as a root .  
Regular seg's have o. 
G14= C ~ :O , where 
A= y (o (y (a) ,y (b) ,y (h)) ,a (y (b , f )  ,y (c ,d,  f ) ,  
y (c ,e ) ) ,o (g ,y  (i ,o ( j  , k ) ) )  
F ig .7 .  Arbor i za t ion  of  G. 
F ig .5.  Example of  sentence ana lys i s .  
3.3 Operat ions.  
2. Local Operat ions.  
Replacement. Given two c-graphs G and G" , th i s  
operat ion  subst i tu tes  a seg G' in G for  G", e.g.  
i f  G=G4, G"=m+n and G'=i ,  then the resu l t  w i l l  be 
63 
G 15=g+ (re+n) : (j+k). 
Addition. This operation inserts a c-graph G' 
into another, G, by merging two dist inct nodes (x, 
y) of G with the input and output of G'. Addition 
requires only that insertion does not produce cy- 
cles. Note that i f  (I,0) are taken as a couple of 
nodes, we have alternation. Example, let (2,3) be 
a couple of nodes of G16 and take G'=G17=s+u. The 
resulting c-graph is G18. 
c 
G16=c ---c 
i 2 3 5 
c 
GI8= c i 2 
F ig .8 .  Add i t ion  of  a c-graph. 
Erasing. This eliminates a substructure G' 
of a c-graph G. Erasing may destroy the structure 
even i f  we work with isolated seg's. Consequently, 
i t  is only defined on particular classes of seg's, 
namely segfi's and segmi's. For any other substruc- 
ture, we eliminate the smaller segmi that contains 
i t .  A special case constitutes a segfi G' such 
that I and 0 do not belong to G'. Eliminating G' in 
such a case produces two non-connecting nodes in 
the c-graph that we have chosen to merge to pre- 
serve homogeneity. Example: let us take G and G'= 
GIO, then the result of erasing GIO from G is G19= 
G2.G4. 
4. IMPLEMENTATION. 
A small system has been programmed in PROLOG 
\[4\] (mainly operations) and in PASCAL (TS and RSC). 
For the first approach, we chose regular c-graphs 
to work with, since there is always a string to 
represent a c-graph of this class. 
In its present state, the system has two 
parts: (1) the Transformational System including 
the rewriting system and (2) the set of local and 
global operations. 
The TS is interactive. It consists of an ana-  
lyzer that verifies the structure of the TS given 
as a console input and of the TS proper. As data 
we have the console input and a segment composed of 
transit ion schemes. There are no finer controls for 
different modes of grammar execution. 
Regarding operations and from a methodological 
point of vlew, algorithms for c-graph treatment can 
be divided in two classes: (I) the one where we 
search for substructures and (2) the one where this 
search is not needed. Obviously, local operations 
belong to the f i r s t  class, but among global opera- 
tions, only concatenation, alternation and expan- 
sion belong to the second one. Detailed description 
of algorithms of this part Of ~he system can be 
found in \[4\]. 
5. CONCLUSION. 
Once we have an operational version of the 
prototype, i t  is intended as a f i r s t  approach to 
proceed to the translation of assemblers of the 
microprocessors available in our laboratory such 
as INTEL's 8085 or 8080 and MOTOROLA's 6800. 
6. REFERENCES. 
I . \ [ I \ ]  Boitet, Ch. UN ESSAI DE REPONSE A QUELQUES 
QUESTIONS THEORIQUES ET PRATIQUES LIEES A LA TRA- 
DUCTION AUTOMATIQUE. DEFINITION D'UN SYSTEME PROTO- 
TYPE. Th~se d'Etat. Grenoble. Avr i l .  1976. 
2.\[2\] Boitet, Ch. AUTOMATIC PRODUCTION OF CF AND CS 
ANALYSERS USING A GENERAL TREE TRANSDUCER. Rapport 
de recherche de l ' Ins t i tu t  de Math~matiques Appli- 
qu~es N?218. Grenoble. Novembre. 1979. 
3.\[4\] Clemente-Salazar, M. ETUDES ET ALGORITHMES 
LIES A UNE NOUVELLE STRUCTURE DE DONNEES EN T.A.: 
LES E-GRAPHES. Th~se Dr-lng. Grenoble. Mai. 1982. 
4.\[5\] Clemente-Salazar, M. E-GRAPHS: AN INTERESTING 
DATA STRUCTURE FOR M.T. Paper presented in COLING- 
82. Prague. July. 1982. 
5.\[6\] Clemente-Salazar, M. C-GRAPHS: A DATA STRUC- 
TURE FOR AUTOMATED TRANSLATION. Paper presented in 
the 26th International Midwest Symposium on Clr- 
cuits and Systems. Puebla. Mexico. August. 1983. 
6.\[7\] Colmerauer, A. LES SYSTEMES-Q. Universit~ de 
Montreal.Publication I terne N?43. Septembre. 1970. 
7.\[9\] Kuntzmann, J. THEORIE DES RESEAUX (GRAPHES). 
Dunod. Paris. 1972. 
8 . \ [10\ ]  Vauquois, B. LA TRADUCTION AUTOMATIQUE A 
GRENOBLE. Document de L ingu is t ique  Quant i ta t ive  
N?24. Dunod. Par is .  1975. 
9.\[11\] Vauquois, B. ASPECTS OF MECHANICAL TRANSLA- 
TION IN 1979. Conference for Japan IBM Scientific 
Program. Document du Groupe d'Etudes pour la Tra- 
duction Automatique. Grenoble. July. 1979. 
64 
