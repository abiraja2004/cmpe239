THE NONDIRECT IONAL REPRESENTATION OF SYSTEMIC  
FUNCTIONAL GRAMMARS AND SEMANTICS  AS TYPED FEATURE 
STRUCTURES 
John A. Bateman* Martin Emele and Stefan Momma** 
Project KOMET, GMD/IPSI  Project POLYGLOSS, IMS-CL 
Darmstadt,  Germany University of Stuttgart,  Germany 
bateman~darmst  ad .gmd.de {emele,momma}@in formatik.uni-stuttgart.de 
Abstract  
A small fragment of the Systemic Functional Grammar 
of the PENMAN system is reformulated in the Typed Fea- 
ture Structure language. Through this reformulation wc 
gain full reversibility for the SFG description and access 
for unification-based grammar descriptions to the rich 
semantic levels of description that SFG supports. We 
illustrate this reformulation with respect o both gener- 
ation mid semantic aalalysis and set out the future goals 
for research this result establishes. 
1 In t roduct ion  
The current state of the art in natural language pro- 
cessing calls for components Callable of sophisticated 
deep semantic analysis, modular representation of
resources, and re-usability of those resources across 
different NLP applications. Furthermore, it has been 
demonstrated that the sheer diversity of interactions 
between distinct kinds of linguistic information is 
guaranteed to defeat any staged approach to genera- 
t ion/understandiug that successively maps between 
levels of representation \[1\]. One strategy for ad- 
dressing these problems is to stratify resources o 
that inter-stratal mappings are simplified. This is 
aimed at allowiug high-level information to apply as 
early in analysis ms possible at a minimal cost. A 
number of current processing architectures call for 
such a design. The stratification technique is also 
one way of ensuring modularity and improved re- 
usability. However, one important problem with al- 
most all existing linguistic resources i that the inter- 
stratal mappings between, for example, strings and 
semantics, are anything but simple. This,is because 
the standard syntax-semantics-pragmatics modular- 
ization under-stratifies by imposing fewer distinc- 
tious than are necessary. 
Computational systemic-functional grammars \[4\] 
offer significant solutions to this deficiency by impos- 
ing a higher degree of stratification (cf. Section 3), 
thus keeping inter-stratal relations simple. SFGs 
have supported the constrnction of natural anguage 
generation components that are able to take highly 
abstract, purely semantic specifications a  input and 
produce corresponding surface strings as output. 
Furthermore, the generation task ha.s required ex- 
tensive work on the more abstract strata: without 
a rich breadth of communicative goals, grammati-  
cal resonrces for expression cannot be satisfactorily 
constrained. 
Problematic with current computational instanti- 
ations of SFG, however, is that implementations have 
been directionally committed: the higher strata of 
information have not been available for constraining 
lower level analyses. This problem has been com- 
pounded by a further lack of detail at the lower, syn- 
tagmatic/constituency stratum in SFG. In contrast 
"Also on indefinite leave from the Penman Project, 
USC/Information Sciences Institute, Marina del Rey, Los 
Angeles. 
?*Supported by BMFT Grant No. 08 B3116 3 
to tile generation perspective, work oriented towards 
analysis - -  particularly within current information- 
based grammars such as LFG and HPSG - -  has paid 
cxtensive attention to the less abstract strata of the 
linguistic system and have produced highly detailed 
accounts of syntagmatic organization. A combina- 
tion of the two paradigms hmdd enable us to fill 
gaps in the respective coverage of strata. 
Information-based grammars have already been 
presented using declarative representations such as 
feature structures. In this paper, we present a for- 
realization of all tile information to be found in the 
strata of computational SFG and their inter-stratal 
mappiugs in terms of feature structures also in or- 
der to initiate a combined description of the two 
paradigms. In particalar, we will formalize SFG in 
terms of the Typed-Feature System (TFS) devel- 
oped within the POLYGLOSS project at Stuttgart.  
TFS has previously been applied to the strata of 
the linguistic system addressed by HPSG and LFG. 
Here, we argne further that  it is appropriate o adopt 
this representation for SFGs and the higher strata 
of the linguistic system that SFG proposes. The 
result of this inquiry is then to provide the basis 
for populating a highly-stratified processing archi- 
tecture with maximally appropriate linguistic repre- 
sentations. Moreover, the higher levels of abstraction 
are rarely dealt with within a theory that  talks about 
syntax. Rather, their treatment is left to a separate 
process using a separate representation language and 
a completely separate processing strategy. Our ap- 
proach offers a solution to this problem as well by 
providiug a unique framework to talk about (almost) 
all levels of linguistic information in a single formal 
language using a single processing scheme. 
2 A convergence  o f  concerns  
We now briefly introduce both SFG and TFS; sub- 
stantial introductious are provided elsewhere and so 
here we shall only offer sufficient details to under- 
stand the examl)les offered in the paper. 
2 .1  The  SFG f ramework  
Analogously to HPSG and LFG, SFG belongs to the 
family of grammatical  frameworks based on state- 
ments of the co-occurrence possibilities of grammat- 
ical features. In contrast, however, SFG places cen- 
tral focus on grammar as a complex resource for 
achieving commmficative and social goals. Within 
SFG the entire grammatical description of a lan- 
guage is organized around a factorization of the task 
of finding grammatical  structures appropriate for the 
expression of specified meanings and it is this orien- 
tation that has made it so appealing for the task of 
generation. 
The organization of the PENMaN-style architec- 
ture within which the SFG of English we are working 
with is embedded ecomposes the mapping from ab- 
stract semantics to surface string as follows. Nearest 
the surface there are realization statementa of syn- 
tagmatic organization, or syntactic form. These are 
ACTES DE COLING-92, NANTES, 23-28 AOt)r 1992 9 1 6 PROC. OF COLING-92. NANTES, AUG. 23-28, 1992 
classified it* terms of a grantmatical system network 
that denotes the paradigmatic, functional 'alterna- 
tives offered by syntactic forms. 
The decisions in the grammatical  systems network 
are motivated by serum*tic distinctions that classify 
semantic ircumstances ax:cording to the grammati- 
cal features which are appropriate to express those 
situations: this classification is the cmnbined respon- 
sibility of choosers attd inquiries. Finally, the possi- 
bilities for classification that the inquiries have are 
defined in terms of an abstract ontology called the 
upper model. Knowledge about particular domains 
is subordinated to the upper model so that the con- 
cepts of those donlains can inherit their possibilities 
for linguistic realization from those already specified 
for the upper model concepts. Also, lexical informa- 
tion is typically a.qsociatcd with the domain concepts. 
All of these components are currently imple- 
mented and used within the PENMAN and KOMET 
projects. The upper model and domain nmdcl are 
implemented in the knowledge rcpresentation lan- 
guage LOOM (developed at USC/ISI); the remain- 
ing theoretical constructs involved in the generation 
process are realized ms macros defined in Common- 
Lisp. These latter are, therefore, in implenmntation 
strictly procedural attd do not support analysis. For 
further details of the underlying theory atnl its ap- 
plication in the area of text generation see \[4\]. 
2 .2  The  TFS  f ramework  
The TFS formalism is a rewriting system for typed 
feature terms fonowing ideas from \[5\]. The major 
goal when designing TFS `as a grannnar description 
language was to develop a formalism that inherently 
supports botix modular, hierarchically organized e- 
scriptions and a declarative formulation of relation- 
ships between (partial) elements front different lin- 
guistic modules. 
The objects used to represent linguistic informa- 
tion are typed feature terms, i.e., feature terms 
that have a type symbol associated with each node 
in the directed graph representing an ordinary fea- 
ture term. A linguistic description consists of a set 
of feature type definitions which contain information 
about the placement of the feature term in the type 
hierarchy and about the set of well-formedness con- 
straints that  hold for this particular type. The fea- 
ture type definitions define the well-formedness con- 
straints for all representatiun levels, sinmltaneously 
specifying what constitutes a 'well-formed linguistic 
sign', i.e., an object containing all the information 
that can be collected about an utterance - be it 
analyzed (where the phonological lotto of the utter- 
once is the inpnt), or generated (where parts of the 
'content' of the complete description serves ms tile 
input); an example of such an object appears below 
in Figure 3. 
Given a partial description (a feature term with 
(possibly partial) type information) as input, the in- 
terpreter computes the set of most specific feature 
terms derivable from that term by first classifying 
the term according to the features it contains and 
their values, and subsequently reeursively applying 
feature type definitions to all type symbols contained 
in the term. Only one operation is used: Rewriting 
based on unifying substitutions of feature terms. For 
full details of the formalism and its ilnplementation 
see \[6, 7\]. Since the TFS language is fundamentally 
a constraint-based language, and none of the opera- 
tions involved is dependent on a particular order of, 
e.g., the availability of certain pieces of information, 
no directionality is involved in the constraint-solving 
process. Thus, a snccessful encoding of the informa- 
tion contained in a systemic grammar description in 
TFS will of necessity be strictly bidirectional. In 
fact, the specification of well-formed linguistic signs 
simultaneously for all strata represented means that 
the term non-directionality is a better characteriza- 
tion of the distinctive property of this kind of system 
than, for example, "reversibility". 
3 Mode l l ing  o f  SFG i n  TFS 
We now describe in some detail how each of the 
strata, atnl the relations between them that are de- 
tilted within cmnputational SFG, may be defined uni- 
formly within TFS. This supports the general clv:im 
made within SFG that statements of linguistic re- 
sources should be non-directional. We will begin 
with the least abstract stratmn - the system net- 
work -a t td  work up to the most abstract level - 
the upper model. We then describe the inter-stratal 
maptfings that exist between these. 
3 .1  The  System Network  
A system network can Ixe represented ,as a directed 
acyclic graph with labelled arcs whose nodes are 
choice points called systems and whose outward di- 
rected labelled arcs denote the terms of the system. 
Each system has two or more terms, or output fea- 
tures, which at the stratum of granlmar epresent 
minimal gralnmaticM alternations. Reflecting the 
extensive stratification of the arclfitecture, nothing 
is said in the system network proper abont how to 
choose between these alternations. The inward di- 
rected arcs for each systent denote an entry condition 
which deternfines the paradigmatic context in which 
the alternation represented by the system is relevant. 
As shown already in \[3\], the network is formally 
equivalent to the specification of a subsumption hi- 
erarchy and so the translation of the connectivity of 
that network Mone into TFS is quite straightforward. 
The resnlt is a lattice with most general type RANK. 
The system nctwurk does not itself generate gram- 
mat*cat structures; this information is also stratified 
out. In SFG grammatical  structure is built up in 
terms of 'syntagmatic specifications' which are de- 
rived by means of realization statements associated 
with paradigmatic selections. Kasper \[2\] shows how 
these realization statements can be represented in
terms of feature structure descriptions. We largely 
adopt this representation here. The possible real- 
ization statements arc listed in the table shown be- 
low, together with their translations into TFS fea- 
ture ternxs. 
+F ~F~.' R/iN K\] 
Expand: F 1 (F2) \[F 1 : \[F 2 :#lmRANK\] , F 2 :tilt 
lnflectify/ F l : :11 \[F 1 : \[11 :+\]\] 
Classify: 
Cooflate: F1/F 2 IF1 :#1, F2 :#1\] 
Preselect: F1 : I t  \[F1 : f l \ ]  
Lexify: F ! 1 IF : lex-name\] 
An Inser t  statement ( +F in traditional sys- 
temic notation) corresponds to the introduction of 
the feature F into the feature term, at the same 
time classified as requiring a value of type RANK. 
The Presolect, Classify/Inflectify and Lexify 
statements have similar translations, tile only dif- 
ference being that they do not only determine tile 
type of the value of the feature they introduce, but 
also specifically determine the value itself; l ex i fy  is 
then the limiting case where a type drawn front the 
sublattice of lexical items may be specified irectly. 
A second class of statements i used to express coo 
labelling of structures. Conf la te  (Fx/F2) expresses 
AC1ES DE COLING-92, NAI~rEs, 23 28 AOb~L" 1992 9 l 7 PROC. OF COLING-92, NA~rrEs, AUG. 23-28, 1992 
the identity between two features in a complex struc- 
ture. In the feature structure description we denote 
this by introducing a reentrancy. The way TFS de- 
notes reentrancies i  by use of a tag (e.g. #1) that  
appears at the two endpoints of the paths that are 
being made reentrant. 
3 .2  Upper  Mode l  and  Domain  Mode l  
The representation f the Upper Model in LOOM is 
also straightforward to translate into the TFS no~ 
tation. Every concept in the hierarchy corresponds 
to a type in TFS, where the content of the : i s  slot 
corresponds to the specification of the appropriate 
supertype for the given concept. 
There are two possible ways to build up tile hier- 
archy of concepts for the Upper Model: we can follow 
a pure top-down strategy, specifying via stepwise re- 
finement what subconcepts make up a given concept. 
This is appropriate whenever the LOOM definition 
contains a statement about :d i s jo in t -cover ing .  
The second possibility is to build up the hierarchy 
bottom up, i.e., for a type we specify what its super- 
type is. This is mostly used when the type-definltion 
has additional constraints, which are then conjunc- 
tively conjoined to the supertype specification, thus 
refining the definition of the current ype. An exam- 
pie for such a translation is shown in Figure 1. Tile 
result of the translation is a type lattice with umst 
i~enerai type UM-THING. 
(de /concept  P rocess  
:is (:and UM-Thing :primitive) 
:constraints (:at-least 1 Participant) 
: d is jo int-cover lng 
(Material-process Mental -Process 
Relat ional-Process Verbal-Process) ) 
PROCESS < UM-THIIG. 
PROCESS - MATERIAL-PRQCESS I MENTAL-PROCESS 
REL?TIONAL-PROCESS I VERBAL-PROCESS. 
pEflCESS \[participant : UM-THIHG\] . 
Figure i: LOOM definition and TFS definition for 
the concept Process  
Subsequently, semantic specifications - - isomor- 
phic to the Sentence Plan Language (SPL) stan- 
dardly used as input to PENMAN-style text gener- 
ation systems or to a set of LOOM A-Box asser- 
tions - -  are then defined by a type LOCAL-PLAN 
which specifies the semantic process, semantic par- 
ticipants, and certain details of textual presenta- 
tion and interpersonal effect. The semantic specifi- 
cation (simplified for illustration purposes) for the 
sentence Kim devours every cookie, for example, 
can be seen under the nora attr ibute in the fea- 
ture structure shown in Figure 3. In this expres- 
sion, DEVOUR, C00KIE, and KIM are concepts ill the 
domain model that are subordinated to types de- 
fined in the upper nmdel in the standard way defined 
for interfacing with PENMAN-style systems, favor ,  
se t - to ta l i ty - ind iv idua l i ty  are semantic orre- 
lates of textual inquiries concerning the comnmnica- 
t ire functions of referring expressions, speechact  
is the semantic orrelate of an interpersonal inquiry 
concerned with il locutionary force. A full specifica- 
tion would contain ...... y ....... details (cf. \[4\]). 
3 .3  Choosers  and  Inqu i r ies :  in ter -  
s t ra ta l  re la t ionsh ips  
As noted in Section 3.1, the systemic network alone 
does not specify the senlantic motivations for seleco 
tions of particular grammatical features from the 
network. This task is handled in PENMAN-Style 
implementations of SFGs by tile stratum of the 
ehooser~inquiry semantics. Choosers are typically 
described, and used in generation, as decision trees, 
and one such tree is associated with each grammati- 
cal system in the system network. This rather simple 
organization can also, however, be straightforwardly 
interpreted in terms of the semantic onditions of ap- 
plicability that choosers define for each grammatical 
featare. This provides for a declarative modelling in 
TFS as follows. 
Tile decisional components of the decision tree are 
branching inquiries. In the m-iginai procedural im- 
plementation of the PENMAN system, a branching 
inquiry takes as argument a semantic entity (identi- 
fied via the grammatical label fro' the constituent re- 
alizing that entity) and returns a value from a closed 
set of possible responses that are defined for each in- 
quiry. The chooser then provides a series of actions 
that are to be followed for each possible response, 
analogously to a case-statement i  Lisp. 
Our encoding of this level of organization i TFS 
moves away from the implementation in PENMAN by 
making use of the fact that choosers are themselves 
hierarchically organized. While in PENMAN this or- 
ganization is maintained only indirectly by the as- 
sociation with grammatical systems, in TFS we de- 
fine tile sublattice xplicitly using types defined for 
choosers. There is titan no need for the branching 
inquiries ince chooser decision trees may be directly 
folded into tim hierarchy and their possible outcomes 
are represented as distinct ypes. 
In PENMAN the arguments required for the 
branching inquiries are picked out in a way that de- 
pends on another type of inquiry: an identifying in- 
quiry. The function of these is precisely to locate 
particular semantic entities with respect o seman- 
tic entities that are already kimwn. It is clear that 
for these inquiries to be implemented, a specific se- 
mantic representation must have been selected. We 
have, for the time being, folded this information i to 
the TFS translation: that is, we use the concrete 
implementations of identifying inquiries (which are 
rather simple) to fix the particular path that we 
specify as a value for the sere attr ibute. Identifying 
inquiries are used in chooser actions of the following 
form: (ides'airy F 1 (inq-ID F 2)). This specifies that 
the semantic entity returned by applying the inquiry 
inq- ID to the semantic entity associated with tile 
grammatical constituent labelled as F 2 is associated 
with the grammatical constituent labelled as F 1. In 
the TFS translation, wherever mention is made to a 
semantic entity by means of these grammatical con- 
stituents, we instead pick out the semantic entity 
directly by incorporating sufficient path information 
in the partial feature structure description in the sere 
slot. The translation of the above identify action is: l 
\ [syn:  \[F I :#$2\ ] ,  sem: \[F 1 : \ [ . . .  \[ l i s t \ ] . . . \ ]  \]\] 
:- inq-ID\[syn:#Si, sem:#Sl\] 
where, as explained above, the precise path under 
the first seta slot is defined by the implementation 
of the inquiry inq- ID with respect o the upper and 
domain models. For the identification: ( ident i fy 
Gr-actor (actor- id Gr-process)), for example, the 
corresponding TFS term is: 
\[nyn: \[Gr~actor:#Si\] , ~em: \[process: \[actor:#Sl\]\]\] 
:- actor-ID\[sem:#Sl, syn:#S2\]. 
Inquiries of this type are necessary since they pro- 
vide an additional interface structure between ac- 
tual upper model concel)ts and objects in the system 
IUsing Prolog's "neck" symbol to introduce the 
condition. 
AcrEs DE COLING-92, NAN'rES, 23-28 AOUr 1992 9 1 8 PEso. or COI.1NGO2, NAI~rES, AUG. Z3-28. 1992 
network. Subsequently, the relationships they dcline 
between the grammatical  nd ontolugical sublattices 
are folded into tile types of the chooser sublatticc 
directly as described above. 
Finally, the concrete statement hat a partic- 
ular grammatical  feature is entailed by the se- 
mantic circumstances that pertain i.~ made by tile 
choose chooser action which takes as parameter 
the grammatical feature front the grammatical sys- 
tem to which the chooser is a.ssigncd that is to 
be selected. This action is trivially represented 1)y 
adding in the granunatical feature as a type con- 
straint on the eyn side of the relation at the al)pro 
1)riate chooser subtype; i.e., (choose 61tAld-FZsTtrltE) 
\[nyn : GRAM-FEATURE\] .
Choosers as a whole then form a snblattice whose 
most genera\[ type is RANK-CII00SER. Figure 2 shows 
;tic example translation of two chooser nodes front 
this snblattice, where we see tile above translation 
principles at work. 2 
((hSK (SThTIC-CONDITION-Q GR-PROCESS) 
(STATIC 
(ASK (MENTAL-PROCESS~Q GR-PROCESS) 
(MENTAL 
I IDENTIFY GR-ACTOR (SENSER-ID GR~PROCESS)) Cn0OS~ ~ZNTAL)) 
(NONME~TAL ...))))) 
PTC-STATIC-MENTAL-CHOOSER 
\[sen: \[process:NENTAL-PROCESS\[senaer:#al\]\], 
myn: MEgThL\[gr-actor:#a2\]\] :- 
CH00SER\[sem:#ai, syn:#a2\]. 
PTC-STATIC-NONMENT?L-CHDOSFAt 
\ [sem:\ [proce~n:  
(MATERIhL-PROCESS \[ 
VERBAL-PROCESS I RELATIONM,-PROCESS)JJ. 
Figure 2: Translationofchooser nodes 
An important point to note here is the strict 
separation of 'syntactic'  and sclnantic information 
that is enforced. Complete modularity of the 
sya and sere descriptions is maint~dned and the 
choosers&inquiries are detined as a lattice of rela- 
tions between these informational domains: there is 
no intermixing of categories within informational (lo- 
mains. Associations t)etween semantics and syntax 
are preserved only in the conditions that specify the 
mappings across trata. Tile lattice of relations that 
the CH00SER-sublattice d fines permits the implicit 
definition of the complete cross product of the RiNK 
and UM-THING sub-lattices. This avoids the combina- 
torial explosion of type symbols that would otherwise 
ensue. The existence of a particular subtype of sub 
CH\[10SER on a certain level of hierarchical emllcdding 
excludes all others on that level tiiat wouhl exist had 
we taken the complete cross product. 
4 Demonst ra t ion  o f  generat ion  and  
ana lys i s  
4 .1  Generat ion  
When we want to generate, we provide a sl)ecification 
of the semantic omlnunicativc functions that are to 
be achieved by the linguistic: realization. Generation 
is then initiated by providing thc local l)lan as the 
2The second type definition gives a statement of the 
negative condition, which is presently represented hy a 
disjunction of thc categories defined in the upper model 
a~s sisters of HENTAL~PRDCESS; fllture vessions will rely on 
negation. 
value oi the Beta attr ibute of tile top-most chooser. 
After classifying the input structure according to 
tile features it contains (already ielding a paxticular 
subtype of CHOOSER), the type of the topmost node 
of the input structure is then recursively expanded. 
Expansion is performed by rewriting all embedded 
types through unifying substitution of their defini- 
tio~ls until no filrther rewriting is possible (i.e., until 
all types are ground types). Expansion terminates 
with a conq)lcte description coralmtible with the in- 
put partial description and with the definitions ill 
the feature type system representing "all the linguis- 
tic strata defined. In the general case, we will end 
up with not just sac description, lint rather with 
a set which is then to be interpreted as a disjunc- 
tion of possil~le solutions to the initial problem. The 
complete structure which is the result of the inter- 
prctation of the semantic specification (given under 
the nero feltture) is given in Figure 3. 
4 .2  Ana lys i s  
As stated in Section 1, SFG suffers front a lack of 
specificity in its syntagmatic representations; the 
kind of specifications that we find inunediately un- 
derlying strings in the PENMAN and KOMET systems, 
for example, gives representations (expressed accord- 
ing to our TFS definitions of Section 3.1 above) such 
as the following: 
R.ANK \ [gr -procean : LEI-DEV'OOR, 
subject: \[thihg: LEI~KIM\], 
dixectcomplsment : \[thing: LEI-COOKIE, 
doietie: LEX-EVERY\] \] \] 
However, information-based syntax, such :as 
HPSG, does provide cxtensive detail at  this level. 
Now, due to the strict modularity enforced in our 
translation, it is possible to explore combinations of
approaches and, moreover, to combine descriptions 
from a theory like HPSG with the kind of descrip- 
tions employed in Systemic Linguistics or its Com- 
putational instautlations. This has been shown to 
be possible il~ a simple experiment carried out by 
Martin Emelc where an existing HPSG grammar was 
taken and the semantics of that grammar (a simple 
situation semantics-informed frame-like representa- 
tion) was rewritten to give tim syntagmatic cate- 
gories and structures of the SFG. This makes it pos- 
sible to describe the information ot)tained front the 
two approaches within a single executable declara- 
tive specification. Her('., however, our  utain concern 
has been with making available the higher-levels of 
specification, and so wc will abstract away front the 
string to syutagmatic structure component of the 
mapl)iug and take as the ' input'  specification the 
lowest level ofinforroation obtained from the SFG, as 
shown at)ove. Therefore, we proceed by putt ing this 
specification in tile syn slot of the IthNK-CHOOSER re- 
lation. Tcrnl rewriting applies to construct the sere 
side of tim relation and also to complete tile syn 
sl)ecification. The result is again tile COml)lete spec- 
ification of the set of constraints titat describe the 
structure, which is again the structure shown in Fig- 
ure 3. This is precisely the same linguistic-sign that 
was produced as a result of "generation", start ing 
froln the imrc semautic part of the descril)tion - 
thus il lustrating the ra(licld nondfiectionality of the 
representation. 
5 Conc lus ions  and  l, Mture  Work  
Tile (:lose fit between the linguistic description re- 
quired in a TFS-based architecture and those I)eing 
pursued within SFG have motivated a detailed in- 
vestigation of the nmtual compatibility of the rep- 
resentational nd formal mechanisms and linguistic 
ACTES DE COLlNG-92, NANi\].:S, 23-28 ho(;r 1992 9 1 9 PRoc. ov COLlNG-92. NAI~TES, AUG. 23-28. 1992 
PTC-NONSTATIC-NONVERBAL-NONMENTAL-CHOOSER 
\[actor: KIM~f . . . . .  +1 \ ] \ ]  
|minimal-attention: - \] | | 
. . . . .  LOCAL-PLAN COOKIE|f . . . . . .  | | | p . . . . . . .  :EVOUn\[act~: 
Lspeechact: |set-totality-individuality: eolleetionJ J J 
|spelling: idevour ' \ ]  
Lsmgutar: 
~ INDIVIDUAL-NAME|thing: LEX-KIM|eommon: 
\[\] \[case: NOM l noun: 
syn; MATERIAL ~MOOD_UNIT ~Un~ect:\[: \[~\] \ ] l  
gr-process: 
gr-actor: 
subject: 
finite: 
mood: 
\[deict ic: LEX" EV E RY\[:pe~ilng r: "+every"\] \] 
directcontplement: \[\]EVERY\[ . \[spelling: "cookie"\] \[ 
theme: \[\] |thing: LEX-COOKIE\[sing~dar: + \[ \ [  
medium: \[\] \[_case: OBLIQUE \[common: + J J 
oak \[\] 
Figure 3: Feature structure for "Kim devours every cookie." 
descriptions beiug developed within the PENMAN, 
KOMET and POLYGLOSS projects. We have shown 
that systemic-functional grammars and semantics 
can easily be converted to the TFS formalism. This 
has produced a fragment that can both generate and 
analyse. Furthermore, the analysis achieved with our 
experimental fragment supports the mapping from 
surface representation to deep semantic levels of rep- 
resentation that are far removed from the contingen- 
cies of surface syntax. These represeutatimts also 
preserve breadth, in that the semantic distinctions 
necessary for generation concerning 'pragmatic '  in- 
formation such as textual organization and interper- 
sonal communicative goals are also recovered. It is 
especially imt)ortaut hat all of these diverse levels 
have now been made accessible for analysis within 
a system where there is only one representational 
formalism and only one interpretational device op- 
erating on the representations. 
This paper has described and motivated the basis 
for a host of important further research questions, 
some of which we are now following up. For exam- 
ple, the fragment we have illustrated here is very 
small: the problem of handling large lattices needs 
to be addressed both on implementational aud the- 
oretical evels. A fldl specification of the grammar 
component of PENMAN alone as we describe it here 
would involve tens, possibly hundreds, of thousands 
of types: this ueeds to be supported by sufficiently 
powerful and robust implementations. But on the 
theorcticai level, there are also further nmdulari- 
ties within the SFG account hat we have not yet 
utilized to constrain term explosions due to form- 
ing cross-products across ublattices: two areas here 
clearly present hemselves --- stronger modulariza- 
tion according to the paradigmatic/syntagmatic di- 
mensiou and according to functional regions in the 
grammar \[4\], which already provide a meta-level of 
organization across ublattices that remains unused. 
A fnrther area is a closer study of the similarities and 
differeuces between, e.g., the information of the SFG 
and the HPSG modules - -  it is to be expected that 
there is currently duplication which could be more 
effectively distributed, perhaps providing a more ef- 
fective TFS translation. Finally, the availability of 
a representation f some systenfic-functional gram- 
mars in a standard formalism should further facil- 
itate comparison and evaluation of the grammati-  
c',d description with respect o other current cmn- 
putational accounts of grammar: it should be more 
straightforward to identify the distinctive features 
and claims of the approach, thus opening the door 
to an easier exchange of information and analyses. 
Further, performing the TFS translation for the en- 
tire PENMAN grammar would provide an effective 
test of the TFS formalism (and its implementation) 
overall since there are no comparable grammars (i.e., 
paradigmatic feature based without a phrase struc- 
ture skeleton) of this size available lsewhere. 
References 
\[1\] Martin Emele, Ulrich Held, Stefan Momma, and 
R~mi Zajac. Interactions between linguistic con- 
straints: Procedural vs. declarative approaches. 
Machine T~nnslation, To appear in special issue on 
generation. 
\[2\] Robert T. Kasper. An Experimental Parser for Sys- 
temic Grammars. In Proceedings of the l?th Inter. 
national Conference on Computational Linguistics, 
August 1988, Budapest, Hungary, 1988. 
\[31 Robert T. Kasper. Unification and classification: an 
experiment in information-based parsing. In Pro- 
ceedings of the International Workshop on Parsing 
Technologies, pages 1-7, 1989. 28-31 August, 1989, 
Carnegie-Mellon University, Pittsburgh, PA. 
\[4\] Christian M.I.M. Matthiessen and John A. Bate- 
man. Test generation and systemic.functional lin-
guistics: experiences from English and Japanese. 
Frm~ces Pinter, London, 1991. 
\[5\] Hassan Ai't-Kaci. An Algebraic Semantics Approach 
to the Effective Resolution of Type Equations. The- 
oretical Computer Science 45, 293 351. 
{6\] Martin C. Emele and R~mi Zajac. A Fixed Point 
Semantics for Feature Type Systems. In: St~phane 
Kaplan and Mitsuhiro Okada (eels.): Proceedings 
of the ~nd International CTRS Workshop, Mon- 
treal, Canada, June 1990. Heidelberg: Springer 
1992, LNCS 516, pp. 383-388. 
\[7\] Martin Emele and R~tni Zajac. Typed Unifica- 
tion Grammars. In: Proceedings of the 13th Inter. 
national Conference on Computational Linguistics 
(CoLing 90), Helsinki, 20 - 24 August, 1990. 
AcI~ DE COLING-92, NANTr~S. 23-28 AO~' 1992 9 2 0 PROC. Ol: COLING-92, NANI~S. AUC. 23-28. 1992 
