On the Applicability of Global Index Grammars
Jose? M. Castan?o
Computer Science Department
Brandeis University
jcastano@cs.brandeis.edu
Abstract
We investigate Global Index Gram-
mars (GIGs), a grammar formalism
that uses a stack of indices associated
with productions and has restricted
context-sensitive power. We discuss
some of the structural descriptions
that GIGs can generate compared with
those generated by LIGs. We show
also how GIGs can represent structural
descriptions corresponding to HPSGs
(Pollard and Sag, 1994) schemas.
1 Introduction
The notion of Mildly context-sensitivity was in-
troduced in (Joshi, 1985) as a possible model
to express the required properties of formalisms
that might describe Natural Language (NL)
phenomena. It requires three properties:1 a)
constant growth property (or the stronger semi-
linearity property); b) polynomial parsability;
c) limited cross-serial dependencies, i.e. some
limited context-sensitivity. The canonical NL
problems which exceed context free power are:
multiple agreements, reduplication, crossing de-
pendencies.2
Mildly Context-sensitive Languages (MCSLs)
have been characterized by a geometric hierar-
chy of grammar levels. A level-2 MCSL (eg.
1See for example, (Joshi et al, 1991), (Weir, 1988).
2However other phenomena (e.g. scrambling, Geor-
gian Case and Chinese numbers) might be considered to
be beyond certain mildly context-sensitive formalisms.
TALs/LILs) is able to capture up to 4 counting
dependencies (includes L4 = {anbncndn |n ? 1}
but not L5 = {anbncndnen |n ? 1}). They were
proven to have recognition algorithms with time
complexity O(n6 ) (Satta, 1994). In general for
a level-k MCSL the recognition problem is in
O(n3 ?2 k?1 ) and the descriptive power regard-
ing counting dependencies is 2k (Weir, 1988).
Even the descriptive power of level-2 MCSLs
(Tree Adjoining Grammars (TAGs), Linear In-
dexed Grammars (LIGs), Combinatory Catego-
rial Grammars (CCGs) might be considered in-
sufficient for some NL problems, therefore there
have been many proposals3 to extend or modify
them. On our view the possibility of modeling
coordination phenomena is probably the most
crucial in this respect.
In (Castan?o, 2003) we introduced Global In-
dex Grammars (GIGs) - and GILs the corre-
sponding languages - as an alternative grammar
formalism that has a restricted context sensitive
power. We showed that GIGs have enough de-
scriptive power to capture the three phenomena
mentioned above (reduplication, multiple agree-
ments, crossed agreements) in their generalized
forms. Recognition of the language generated by
a GIG is in bounded polynomial time: O(n6 ).
We presented a Chomsky-Schu?tzenberger repre-
sentation theorem for GILs. In (Castan?o, 2003c)
we presented the equivalent automaton model:
LR-2PDA and provided a characterization the-
3There are extensions or modifications of TAGs,
CCGs, IGs, and many other proposals that would be
impossible to mention here.
orems of GILs in terms of the LR-2PDA and
GIGs. The family of GILs is an Abstract Fam-
ily of Language.
The goal of this paper is to show the relevance
of GIGs for NL modeling and processing. This
should not be understood as claim to propose
GIGs as a grammar model with ?linguistic con-
tent? that competes with grammar models such
as HPSG or LFG. It should be rather seen as
a formal language resource which can be used
to model and process NL phenomena beyond
context free, or beyond the level-2 MCSLs (like
those mentioned above) or to compile grammars
created in other framework into GIGs. LIGs
played a similar role to model the treatment of
the SLASH feature in GPSGs and HPSGs, and
to compile TAGs for parsing. GIGs offer addi-
tional descriptive power as compared to LIGs
or TAGs regarding the canonical NL problems
mentioned above, and the same computational
cost in terms of asymptotic complexity. They
also offer additional descriptive power in terms
of the structural descriptions they can generate
for the same set of string languages, being able
to produce dependent paths.4
This paper is organized as follows: section 2
reviews Global Index Grammars and their prop-
erties and we give examples of its weak descrip-
tive power. Section 3 discusses the relevance
of the strong descriptive power of GIGs. We
discuss the structural description for the palin-
drome, copy and the multiple copies languages
{ww+|w ? ??}. Finally in section 4 we discuss
how this descriptive power can be used to en-
code HPSGs schemata.
2 Global Index Grammars
2.1 Linear Indexed Grammars
Indexed grammars, (IGs) (Aho, 1968), and
Linear Index Grammars, (LIGs;LILs) (Gazdar,
1988), have the capability to associate stacks of
indices with symbols in the grammar rules. IGs
are not semilinear. LIGs are Indexed Grammars
with an additional constraint in the form of the
productions: the stack of indices can be ?trans-
4For the notion of dependent paths see for instance
(Vijay-Shanker et al, 1987) or (Joshi, 2000).
mitted? only to one non-terminal. As a con-
sequence they are semilinear and belong to the
class of MCSGs. The class of LILs contains L4
but not L5 (see above).
A Linear Indexed Grammar is a 5-tuple
(V, T, I, P, S), where V is the set of variables,
T the set of terminals, I the set of indices, S
in V is the start symbol, and P is a finite set
of productions of the form, where A,B ? V ,
?, ? ? (V ? T )?, i ? I:
a. A[..] ? ? B[..] ? b. A[i..] ? ? B[..] ?
c. A[..] ? ?B[i..] ?
Example 1 L(Gwcw ) = {wcw |w ? {a, b}?},
Gww = ({S,R}, {a, b}, {i, j}, S, P ) and P is:
1.S[..] ? aS[i..] 2.S[..] ? bS[j..]
3.S[..] ? cR[..] 4.R[i..] ? R[..]a
5.R[j..] ? R[..]b 6. R[] ? ?
2.2 Global Indexed Grammars
GIGs use the stack of indices as a global con-
trol structure. This formalism provides a global
but restricted context that can be updated at
any local point in the derivation. GIGs are a
kind of regulated rewriting mechanisms (Dassow
and Pa?un, 1989) with global context and his-
tory of the derivation (or ordered derivation) as
the main characteristics of its regulating device.
The introduction of indices in the derivation is
restricted to rules that have terminals in the
right-hand side. An additional constraint that
is imposed on GIGs is strict leftmost derivation
whenever indices are introduced or removed by
the derivation.
Definition 1 A GIG is a 6-tuple G =
(N,T, I, S,#, P ) where N,T, I are finite pair-
wise disjoint sets and 1) N are non-terminals
2) T are terminals 3) I a set of stack indices 4)
S ? N is the start symbol 5) # is the start stack
symbol (not in I,N ,T ) and 6) P is a finite set of
productions, having the following form,5 where
5The notation in the rules makes explicit that oper-
ation on the stack is associated to the production and
neither to terminals nor to non-terminals. It also makes
explicit that the operations are associated to the com-
putation of a Dyck language (using such notation as
used in e.g. (Harrison, 1978)). In another notation: a.1
[y..]A ? [y..]?, a.2 [y..]A ? [y..]?, b. [..]A ? [x..]a ?
and c. [x..]A ? [..]?
x ? I, y ? {I ?#}, A ? N , ?, ? ? (N ?T )? and
a ? T .
a.i A ?? ? (epsilon)
a.ii A ?
[y]
? (epsilon with constraints)
b. A ?x a ? (push)
c. A ??x ? a ? (pop)
Note the difference between push (type b) and
pop rules (type c): push rules require the right-
hand side of the rule to contain a terminal in the
first position. Pop rules do not require a termi-
nal at all. That constraint on push rules is a
crucial property of GIGs. Derivations in a GIG
are similar to those in a CFG except that it is
possible to modify a string of indices. We de-
fine the derives relation ? on sentential forms,
which are strings in I?#(N ?T )? as follows. Let
? and ? be in (N ? T )?, ? be in I?, x in I, w be
in T ? and X i in (N ? T ).
1. If A ?? X1 ...Xn is a production of type (a.)
(i.e. ? = ? or ? = [x], x ? I) then:
i. ?#?A? ?? ?#?X1 ...Xn?
ii. x?#?A? ?? x?#?X1 ...Xn?
2. If A ?? aX1 ...Xn is a production of type
(b.) or push: ? = x, x ? I, then:
?#wA? ?? x?#waX1 ...Xn?
3. If A ?? X1 ...Xn is a production of type (c.)
or pop : ? = x?, x ? I, then:
x?#wA? ?? ?#wX1 ......Xn?
The reflexive and transitive closure of ? is
denoted, as usual by ??. We define the language
of a GIG, G, L(G) to be: {w|#S ?? #w and w
is in T ?}
The main difference between, IGs, LIGs and
GIGs, corresponds to the interpretation of the
derives relation relative to the behavior of the
stack of indices. In IGs the stacks of indices are
distributed over the non-terminals of the right-
hand side of the rule. In LIGs, indices are asso-
ciated with only one non-terminal at right-hand
side of the rule. This produces the effect that
there is only one stack affected at each deriva-
tion step, with the consequence of the semilin-
earity property of LILs. GIGs share this unique-
ness of the stack with LIGs: there is only one
stack to be considered. Unlike LIGs and IGs the
stack of indices is independent of non-terminals
in the GIG case. GIGs can have rules where the
right-hand side of the rule is composed only of
terminals and affect the stack of indices. Indeed
push rules (type b) are constrained to start the
right-hand side with a terminal as specified in
(6.b) in the GIG definition. The derives def-
inition requires a leftmost derivation for those
rules ( push and pop rules) that affect the stack
of indices. The constraint imposed on the push
productions can be seen as constraining the con-
text sensitive dependencies to the introduction
of lexical information. This constraint prevents
GIGs from being equivalent to a Turing Machine
as is shown in (Castan?o, 2003c).
2.2.1 Examples
The following example shows that GILs con-
tain a language not contained in LILs, nor in the
family of MCSLs. This language is relevant for
modeling coordination in NL.
Example 2 (Multiple Copies) .
L(Gwwn) = {ww+ | w ? {a, b}?}
Gwwn = ({S,R,A,B,C, L}, {a, b}, {i, j}, S,#, P )
and where P is: S ? AS | BS | C C ? RC | L
R ??
i
RA R ??
j
RB R ?
[#]
?
A ?
i
a B ?
j
b L ??
i
La | a L ??
j
Lb | b
The derivation of ababab:
#S ? #AS ? i#aS ? i#aBS ? ji#abS ?
ji#abC ? ji#abRC ? i#abRBC ? #abRABC ?
#abABC ? i#abaBC ? ji#ababC ? ji#ababL ?
i#ababLb ? #ababab
The next example shows the MIX (or Bach)
language. (Gazdar, 1988) conjectured the MIX
language is not an IL. GILs are semilinear,
(Castan?o, 2003c) therefore ILs and GILs could
be incomparable under set inclusion.
Example 3 (MIX language) .L(Gmix ) =
{w|w ? {a, b, c}? and |a|w = |b|w = |c|w ? 1}
Gmix = ({S,D, F, L}, {a, b, c}, {i, j, k, l,m, n}, S,#, P )
where P is:
S ? FS | DS | LS | ? F ?
i
c F ?
j
b F ?
k
a
D ??
i
aSb | bSa D ??
j
aSc | cSa D ??
k
bSc | cSb
D ?
l
aSb | bSa D ?
m
aSc | cSa D ?
n
bSc | cSb
L ??
l
c L ??
m
b L ??
n
a
The following example shows that the family
of GILs contains languages which do not belong
to the MCSL family.
Example 4 (Multiple dependencies)
L(Ggdp) = { an(bncn)+ | n ? 1},
Ggdp = ({S,A,R,E,O,L}, {a, b, c}, {i}, S,#, P )
and P is:
S ? AR A ? aAE A ? a E ?
i
b
R ?
i
b L L ? OR | C C ??
i
c C | c
O ??
i
c OE | c
The derivation of the string aabbccbbcc shows
five dependencies.
#S ? #AR ? #aAER ? #aaER ? i#aabR ?
ii#aabbL ? ii#aabbOR ? i#aabbcOER ?
#aabbccER ? i#aabbccbR ? ii#aabbccbbL ?
ii#aabbccbbC ? i#aabbccbbcC ? #aabbccbbcc
2.3 GILs Recognition
The recognition algorithm for GILs we presented
in (Castan?o, 2003) is an extension of Earley?s al-
gorithm (cf. (Earley, 1970)) for CFLs. It has to
be modified to perform the computations of the
stack of indices in a GIG. In (Castan?o, 2003) a
graph-structured stack (Tomita, 1987) was used
to efficiently represent ambiguous index opera-
tions in a GIG stack. Earley items are modified
adding three parameters ?, c, o:
[?, c,o, A ? ? ?A?, i, j]
The first two represent a pointer to an active
node in the graph-structured stack ( ? ? I and
c ? n). The third parameter (o ? n) is used
to record the ordering of the rules affecting the
stack.
The O(n6 ) time-complexity of this algorithm
reported in (Castan?o, 2003) can be easily ver-
ified. The complete operation is typically the
costly one in an Earley type algorithm. It can
be verified that there are at most n6 instances of
the indices (c1 , c2 , o, i, k, j) involved in this oper-
ation. The counter parameters c1 and c2 , might
be state bound, even for grammars with ambigu-
ous indexing. In such cases the time complex-
ity would be determined by the CFG backbone
properties. The computation of the operations
on the graph-structured stack of indices are per-
formed at a constant time where the constant is
determined by the size of the index vocabulary.
O(n6 ) is the worst case; O(n3 ) holds for gram-
mars with state-bound indexing (which includes
unambiguous indexing)6; O(n2 ) holds for unam-
biguous context free back-bone grammars with
state-bound indexing and O(n) for bounded-
state7 context free back-bone grammars with
state-bound indexing.
3 GIGs and structural description
(Gazdar, 1988) introduces Linear Indexed
Grammars and discusses its applicability to Nat-
ural Language problems. This discussion is ad-
dressed not in terms of weak generative capac-
ity but in terms of strong-generative capacity.
Similar approaches are also presented in (Vijay-
Shanker et al, 1987) and (Joshi, 2000) (see
(Miller, 1999) concerning weak and strong gen-
erative capacity). In this section we review some
of the abstract configurations that are argued for
in (Gazdar, 1988).
3.1 The palindrome language
CFGs can recognize the language {wwR|w ?
??} but they cannot generate the structural de-
scription depicted in figure 1 (we follow Gazdar?s
notation: the leftmost element within the brack-
ets corresponds to the top of the stack):
a
[..] [a] [b,a] [c,b,a]
b
c
d
[d,c,b,a]
d
c
[b,a]
b
a
[a]
[..]
[c,b,a]
Figure 1: A non context-free structural descrip-
tion for the language wwR (Gazdar, 1988)
Gazdar suggests that such configuration
would be necessary to represent Scandinavian
6Unambiguous indexing should be understood as
those grammars that produce for each string in the lan-
guage a unique indexing derivation.
7Context Free grammars where the set of items in each
state set is bounded by a constant.
unbounded dependencies.Such an structure can
be obtained using a GIG (and of course a LIG).
But the mirror image of that structure can-
not be generated by a GIG because it would
require to allow push productions with a non
terminal in the first position of the right-hand
side. However the English adjective construc-
tions that Gazdar argues that can motivate the
LIG derivation, can be obtained with the follow-
ing GIG productions as shown in figure 2.
Example 5 (Comparative Construction) .
AP ? AP NP AP ? A? A? ? A? A
A ?
i
a A ?
j
b A ?
k
c
NP ??
i
a NP NP ??
j
b NP NP ??
k
c NP
NP
NP
A
AA
A A
AP
AP
AP
AP
NP
A b
a
[a,b,c]
a NP
b NP
NPc
c
[..]
[b,c]
[b,c]
[c]
[..]
[c]
[..]
Figure 2: A GIG structural description for the
language wwR
It should be noted that the operations on indices
follow the reverse order as in the LIG case. On
the other hand, it can be noticed also that the
introduction of indices is dependent on the pres-
ence of lexical information and its transmission
is not carried through a top-down spine, as in
the LIG or TAG cases. The arrows show the
leftmost derivation order that is required by the
operations on the stack.
3.2 The Copy Language
Gazdar presents two possible LIG structural de-
scriptions for the copy language. Similar struc-
tural descriptions can be obtained using GIGs.
However he argues that another tree structure
could be more appropriate for some Natural
Language phenomenon that might be modeled
with a copy language. Such structure cannot
be generated by a LIG, and can by an IG (see
(Castan?o, 2003b) for a complete discussion and
comparasion of GIG and LIG generated trees).
GIGs cannot produce this structural descrip-
tion, but they can generate the one presented in
figure 3, where the arrows depict the leftmost
derivation order. GIGs can also produce similar
structural descriptions for the language of mul-
tiple copies (the language {ww+| w ? ??} as
shown in figure 4, corresponding to the gram-
mar shown in example 2.
[ ]
[ ]
b
[a]
a [b,a]
[a]
a
b
c
d
[b,a]a
b[a,b,a]
[b,a,b,a] [b,a,b,a]
[a,b,a]
Figure 3: A GIG structural description for the
copy language
[ ]
[ ]
[ ]
[ ]
[a]
?
[a]
[a]
[c,b,a][b,a]
[b,a]
[b,a]
a b
[a] [b,a]
a
b
?
a
b
[b,a]
[a] [b,a]
b[a]a
ba
[a,b,a][b,a,b,a]
[a,b,a] [b,a,b,a] [b,a,b,a]
[b,a,b,a]
[a,b,a] [b,a,b,a] [b,a,b,a][a,b,a] [a,b,a]a
b
a a
bb
Figure 4: A GIG structural description for the
multiple copy language
4 GIGs and HPSGs
We showed in the last section how GIGs can
produce structural descriptions similar to those
of LIGs, and others which are beyond LIGs and
TAGs descriptive power. Those structural de-
scriptions corresponding to figure 1 were corre-
lated to the use of the SLASH feature in GPSGs
and HPSGs. In this section we will show how
the structural description power of GIGs, is not
only able to capture those phenomena but also
additional structural descriptions, compatible
with those generated by HPSGs. This follows
from the ability of GIGs to capture dependen-
cies through different paths in the derivation.
There has been some work compiling HPSGs
into TAGs (cf. (Kasper et al, 1995), (Becker
and Lopez, 2000)). One of the motivations
was the potential to improve the processing
efficiency of HPSG, performing HPSG deriva-
tions at compile time. Such compilation process
allowed to identify significant parts of HPSG
grammars that were mildly context-sensitive.
We will introduce informally some slight mod-
ifications to the operations on the stacks per-
formed by a GIG. We will allow the productions
of a GIG to be annotated with finite strings
in I ? I? instead of single symbols. This does
not change the power of the formalism. It is a
standard change in PDAs (cf. (Harrison, 1978))
to allow to push/pop several symbols from the
stack. Also the symbols will be interpreted rel-
ative to the elements in the top of the stack
(as a Dyck set). Therefore different derivations
might be produced using the same production
according to what are the topmost elements of
the stack. This is exemplified with the produc-
tions X ??nv x and X ?[n]v x, in particular in the
first three cases where different actions are taken
(the actions are explained in the parenthesis) :
nn?#wX? ??nv vn?#wx? (pop n and push v)
nv??#wX? ??nv ?#wx? (pop n and v?)
vn?#wX? ??nv vn?vn?#wx? (push n? and v)
n?#wX? ?
[n]v
vn?#wx? ( check and push)
We exemplify how GIGs can generate similar
structural descriptions as HPSGs do, in a very
oversimplified and abstract way. We will ignore
many details and try give an rough idea on how
the transmission of features can be carried out
from the lexical items by the GIG stack, obtain-
ing very similar structural descriptions.
Head-Subj-Schema
Figure 5 depicts the tree structure corre-
sponding to the Head-Subject Schema in HPSG
(Pollard and Sag, 1994).
H
HEAD 1
2 HEAD
< >
SUBJ
SUBJ 
SUBJ 
1
2< >
Figure 5: Head-Subject Schema
Figure 6 shows an equivalent structural de-
scription corresponding to the GIG produc-
tions and derivation shown in the next exam-
ple (which might correspond to an intransitive
verb). The arrows indicate how the transmis-
sion of features is encoded in the leftmost deriva-
tion order, an how the elements contained in the
stack can be correlated to constituents or lexical
items (terminal symbols) in a constituent recog-
nition process.
x
X
XP
 XP
YP
Y
y
[n..]
[n..]
[..]
[v..]
[v..]
[v..]
Figure 6: Head-Subject in GIG format
Example 6 (Intransitive verb) XP ? Y P XP
XP ? X Y P ? Y X ??
nv
x Y ?
n
y
#XP ? #Y PXP ? #yXP ? n#Y XP ?
n#yX ? v#yx
Head-Comps-Schema Figure 7 shows the
tree structure corresponding to the Head-
Complement schema in HPSG.
HEAD
1HEAD < 2 >
H
<      >1
3, n
C C1 n-2
3 n
2
COMP
COMP
Figure 7: Head-Comps Schema tree representa-
tion
The following GIG productions generate the
structural description corresponding to figure 8,
where the initial configuration of the stack is
assumed to be [n]:
Example 7 (transitive verb) .
XP ? X CP CP ? Y CP X ??
nvn?
x CP ? ?
Y ?
n
y
The derivation:
n#XP ? n#XCP ? n?v#xCP ? n?v#xY CP ?
v#xyCP ? v#xy
CP
 XP
X
x CPY
y
[n]
[n v]
[n v]
? 
[ v ]
[ v ]
[ v ]
Figure 8: Head-Comp in GIG format
The productions of example 8 (which use
some of the previous examples) generate the
structural description represented in figure 9,
corresponding to the derivation given in exam-
ple 8. We show the contents of the stack when
each lexical item is introduced in the derivation.
Example 8 (SLASH in GIG format) .
XP ? Y P XP XP ? X CP XP ? X XP
CP ? Y P CP X ??
nvn?
hates CP ? ?
X ??
nv?
know X ??
nvv?
claims
Y P ?
n
Kim|Sandy|Dana|we
A derivation of ?Kim we know Sandy claims Dana
hates?:
#XP ? #Y P XP ? n#Kim XP ?
n#Kim Y P XP ? nn#Kim we XP ?
nn#Kim we X XP ? v?n#Kim we know XP ?
v?n#Kim we know Y P XP ?
nv?n#Kim we know Sandy XP ?
nv?n#Kim we know Sandy X XP ?
v?n#Kim we know Sandy claims XP ?
v?n#Kim we know Sandy claims Y P XP ?
nv?n#Kim we know Sandy claims Dana XP ??
#Kim we know Sandy claims Dana hates
Finally the last example and figure 10 show
how coordination can be encoded.
Example 9 (SLASH and Coordination)
XP ? Y P XP XP ? X CP XP ? X XP
CP ? Y P CP CP ? ? X ?
[nv?n]c
visit
X ??
nvn?
talk to C ? and CXP ? XP CXP
CXP ? C XP X ??
nv?
did Y P ?
n
Who|you
5 Conclusions
We presented GIGs and GILs and showed the
descriptive power of GIGs is beyond CFGs.
CFLs are properly included in GILs by def-
inition. We showed also that GIGs include
X
YP XP
XP
XP
XP
XP
 XP
XP
X
YP
X
YP
YP [n]
[nn]
[ n v n ]
[ n v n ]
[ ]
we
know
Sandy
claims
Dana
hates
Kim
?
[n]
CP
[ v n ]
[ v n ]
[ ]
Figure 9: SLASH in GIG format
some languages that are not in the LIL/TAL
family. GILs do include those languages that
are beyond context free and might be required
for NL modelling. The similarity between GIGs
and LIGs, suggests that LILs might be included
in GILs. We presented a succinct comparison
of the structural descriptions that can be gen-
erated both by LIGs and GIGs, we have shown
that GIGs generate structural descriptions for
the copy language which can not be generated
by LIGs. We showed also that this is the
case for other languages that can be generated
by both LIGs and GIGs. This corresponds
to the ability of GIGs to generate dependent
paths without copying the stack. We have
shown also that those non-local relationships
that are usually encoded in HPSGs as feature
transmission, can be encoded in GIGs using its
stack, exploiting the ability of Global stacks to
encode dependencies through dependent paths
and not only through a spine.
Acknowledgments:
Thanks to J. Pustejovsky for his continuous support and
encouragement on this project. Many thanks also to the
anonymous reviewers who provided many helpful com-
ments. This work was partially supported by NLM Grant
[ ]
XP
XP
 XP
XPYP
[nv]X
did
Who
you
YP
visit
CXP
CXP
and
C
XP
talk to
[ n v n ]
?
?
[ n v n]
[ ]
[n]
[ n v n ]
CP
[ c n v n ]
Figure 10: SLASH in GIG format
R01 LM06649-02.
References
A. V. Aho. 1968. Indexed grammars - an extension
of context-free grammars. Journal of the Associ-
ation for Computing Machinery, 15(4):647?671.
T. Becker and P. Lopez. 2000. Adapting hpsg-to-tag
compilation to wide-coverage grammars.
J. Castan?o. 2003. GIGs: Restricted context-
sensitive descriptive power in bounded
polynomial-time. In Proc. of Cicling 2003,
Mexico City, February 16-22.
J. Castan?o. 2003b. Global index grammars and de-
scriptive power. In R. Oehrle and J. Rogers, edi-
tors, Proc. of Mathematics of Language, MOL 8.
Bloomington, Indiana, June.
J. Castan?o. 2003c. LR Parsing for Global Index Lan-
guages (GILs). In In Proceeding of CIAA 2003,
Santa Barbara,CA.
J. Dassow and G. Pa?un. 1989. Regulated Rewrit-
ing in Formal Language Theory. Springer, Berlin,
Heidelberg, New York.
J. Earley. 1970. An Efficient Context-free Parsing
Algorithm. Communications of the ACM, 13:94?
102.
G. Gazdar. 1988. Applicability of indexed grammars
to natural languages. In U. Reyle and C. Rohrer,
editors, Natural Language Parsing and Linguistic
Theories, pages 69?94. D. Reidel, Dordrecht.
M. H. Harrison. 1978. Introduction to Formal Lan-
guage Theory. Addison-Wesley Publishing Com-
pany, Inc., Reading, MA.
A. Joshi, K. Vijay-Shanker, and D. Weir. 1991. The
convergence of mildly context-sensitive grammat-
ical formalisms. In Peter Sells, Stuart Shieber,
and Thomas Wasow, editors, Foundational issues
in natural language processing, pages 31?81. MIT
Press, Cambridge, MA.
A. Joshi. 1985. Tree adjoining grammars: How much
context-sensitivity is required to provide reason-
able structural description? In D. Dowty, L. Kart-
tunen, and A. Zwicky, editors, Natural language
processing: psycholinguistic, computational and
theoretical perspectives, pages 206?250. Chicago
University Press, New York.
A. Joshi. 2000. Relationship between strong and
weak generative power of formal systems. In
Proceedings of the Fifth International Workshop
on Tree Adjoining Grammars and Related For-
malisms (TAG+5), pages 107?114, Paris, France.
R. Kasper, B. Kiefer, K. Netter, and K. Vijay-
Shanker. 1995. Compilation of HPSG into TAG.
In Proceedings of the 33rd Annual Meeting of the
Association for Computational Linguistics, pages
92?99. Cambridge, Mass.
P. Miller. 1999. Strong Generative Capacity. CSLI
Publications, Stanford University, Stanford CA,
USA.
C. Pollard and I. A. Sag. 1994. Head-driven Phrase
Structure Grammar. University of Chicago Press,
Chicago, IL.
G. Satta. 1994. Tree-adjoining grammar parsing and
boolean matrix multiplication. Computational lin-
guistics, 20, No. 2.
M. Tomita. 1987. An efficiente augmented-context-
free parsing algorithm. Computational linguistics,
13:31?46.
K. Vijay-Shanker, D. J. Weir, and A. K. Joshi. 1987.
Characterizing structural descriptions produced
by various grammatical formalisms. In Proc. of
the 25th ACL, pages 104?111, Stanford, CA.
D. Weir. 1988. Characterizing mildly context-
sensitive grammar formalisms. Ph.D. thesis, Uni-
versity of Pennsylvania.
