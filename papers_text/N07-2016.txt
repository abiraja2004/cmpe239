Proceedings of NAACL HLT 2007, Companion Volume, pages 61?64,
Rochester, NY, April 2007. c?2007 Association for Computational Linguistics
Relationship between Non-Projective Edges, their Level Types,
and Well-Nestedness
Jir?? Havelka
Institute of Formal and Applied Linguistics
Charles University in Prague, Czech Republic
havelka@ufal.mff.cuni.cz
Abstract
Dependency analysis of natural language
gives rise to non-projective structures.
The constraint of well-nestedness on de-
pendency trees has been recently shown
to give a good fit with empirical linguis-
tic data. We present a reformulation of
this constraint using properties of non-
projective edges and show its formal re-
lationship to level types of non-projective
edges; we also derive a simple O(n2) al-
gorithm for checking well-nestedness.
1 Introduction
Dependency analysis of natural language has been
gaining an ever increasing interest thanks to its ap-
plicability in many tasks of NLP?a recent example
is the dependency parsing work of McDonald et al
(2005), which introduces an approach based on the
search for maximum spanning trees, capable of han-
dling non-projective structures naturally.
In this context, the issue of delimiting dependency
structures permissible in natural language grows in
importance (see e.g. Nivre (2006)). We would like
to point out that since neither syntactic structures in
dependency treebanks, nor structures arising in de-
pendency parsing need a priori fall into any formal
subclass of dependency trees, we need means of de-
scribing any non-projective structure.1
1The importance of such means is evident from the asymp-
totically negligible proportion of projective trees to all depen-
dency trees. (Unrestricted dep. trees (i.e. labelled rooted trees),
Kuhlmann and Nivre (2006) compare several con-
straints on dependency structures and among the
considered ones find well-nestedness to be in good
accord with empirical data. However, they do not in-
clude level types of non-projective edges introduced
by Havelka (2005), which present another means of
characterizing any non-projective structure and have
interesting formal properties. We link properties of
non-projective edges and their level types to the con-
straint of well-nestedness and show that they provide
a more fine-grained means capable of capturing it.
The paper is organized as follows: Sect. 2 con-
tains formal preliminaries; Sect. 3 and 4 review def-
initions and show the necessary properties of the
constraint of well-nestedness and level types of non-
projective edges; Sect. 5 presents the main results
concerning the relationship between non-projective
edges (and their level types) and well-nestedness.
2 Formal preliminaries
To make the paper as self-contained as possible, we
provide a concise reference with definitions and sim-
ple properties used in subsequent sections.
Definition 1 A dependency tree is a triple
(V,?,"), where V is a finite set of nodes, ? a de-
pendency relation on V , and " a total order on V .
Relation? models linguistic dependency, and so
represents a directed, rooted tree on V . There are
many ways of characterizing rooted trees, we give
here a characterization via the properties of?: there
is a root r?V such that r?? v for all v?V and there
well-nested dep. trees, and projective dep. trees are counted by
sequences A000169, A113882, and A006013 (offset 1), resp.,
in the On-Line Encyclopedia of Sequences (Sloane, 2007).)
61
is a unique edge p? v for all v ?V , v %= r. Relation
?? is the reflexive transitive closure of ? and is
usually called subordination.
The following definitions allow us to formulate
our results succinctly. For each node i we define
its level as the length of the path r ?? i; we de-
note it leveli. The symmetrization ? = ????1
makes it possible to talk about edges (pairs of nodes
i, j such that i ? j) without explicitly specifying
the parent (head etc.; i here) and the child (de-
pendent etc.; j here); so ? represents directed
edges and ? undirected edges. To retain the abil-
ity to talk about the direction of edges, we define
Parenti? j =
{
i if i? j
j if j? i
and Childi? j =
{
j if i? j
i if j? i
.
Our notation for rooted subtrees is Subtreei = {v ?
V | i?? v}, Subtreei? j = {v?V | Parenti? j ?? v},
and for ancestors Anci = {v ?V | v?? i}, Anci? j =
{v ? V | v ?? Parenti? j}. To be able to talk con-
cisely about the total order on nodes ", we de-
fine open and closed intervals whose endpoints need
not be in a prescribed order: (i, j) = {v ? V |
min"{i, j} ? v ? max"{i, j}} and [i, j] = {v ? V |
min"{i, j} " v " max"{i, j}}, resp. For any edge
i? j we define its gap as follows Gapi? j = {v ?
V | v ? (i, j) & v /? Subtreei? j}. An edge with an
empty gap is projective, an edge whose gap is non-
empty is non-projective. (See e.g. (Havelka, 2005)
for the characterization of projectivity via properties
of edges and further references.)
Property 2 Let a be a node and i ? j any edge
disjoint from a. Then i ? Subtreea ? j ? Subtreea.
PROOF. From the assumption i %= a %= j it follows
that i, j ? Subtreea ? Parenti? j ? Subtreea.
Proposition 3 Let i? j, u? v be disjoint edges.
(i) If u,v ? (i, j), then u ? Gapi? j ? v ? Gapi? j .
(ii) If u ? Gapi? j and v /? Gapi? j , then v /? [i, j].
PROOF. (i) follows immediately from the definition
of Gapi? j and Property 2. To prove (ii), assume v ?
(i, j) and using (i) arrive at a contradiction.
3 Well-nestedness
Kuhlmann and Nivre (2006) claim that the constraint
of well-nestedness seems to approximate well de-
pendency structures occurring in natural language.
Definition 4 A dependency tree T is ill-nested if
there are disjoint subtrees T1, T2 of T and nodes
x1,y1 ? T1 and x2,y2 ? T2 such that x1 ? (x2,y2) and
x2 ? (x1,y1). A dependency tree T that is not ill-
nested is well-nested.2
It is easy to express the constraint in terms of
edges?it will prove crucial in Sect. 5.
Theorem 5 A dependency tree T is ill-nested iff
there are edges i1 ? j1, i2 ? j2 in disjoint subtrees
T1, T2 of T , resp., such that i1 ? (i2, j2), i2 ? (i1, j1).
PROOF. Direction? is obvious.
Direction ?: Let ri be the root of Ti. To find
i1 ? j1, first suppose that r1 ? (x2,y2). Consider the
first edge vk ? vk+1 on the downward path v0 = r1,
v1, . . . ,vm = y1, m > 0, such that vk ? (x2,y2) and
vk+1 /? [x2,y2]. If r1 /? [x2,y2], consider the first edge
vk+1 ? vk on the upward path v0 = x1,v1, . . . ,vn =
r1, n > 0, such that vk ? (x2,y2) and vk+1 /? [x2,y2].
Let us denote i1 = vk and j1 = vk+1, and possibly re-
name x2,y2 so that i1 ? (x2,y2) and x2 ? (i1, j1). To
find i2 ? j2 such that i1 ? (i2, j2), i2 ? (i1, j1), pro-
ceed similarly as above. Obviously, edges i1 ? j1,
i2 ? j2 are in disjoint subtrees.
4 Level types of non-projective edges
Level types of non-projective edges allow their
structural classification with interesting formal prop-
erties. They were introduced by Havelka (2005),
who presents them in more detail.
Definition 6 The level type (or just type) of a non-
projective edge i? j is defined as follows
Typei? j = levelChildi? j ?minn?Gapi? j leveln .
The type of an edge is the distance of its child
node and a node in its gap closest to the root (dis-
tance here means difference in levels)?for sample
configurations see Figure 13. Note that there may
be more than one node witnessing an edge?s type.
The type of an edge is not bounded?it can take any
integer value (depending on the height of a tree).
Our definition of level type of non-projective
edges extends naturally the original definition im-
2The original definition requires x1 ? x2 ? y1 ? y2, however
our equivalent formulation leads to shorter theorems and proofs.
3We adopt the following convention: nodes are drawn top-
down according to their increasing level, with nodes on the
same level on the same horizontal line; nodes are drawn from
left to right according to the total order on nodes; edges are
drawn as solid lines, paths as dotted curves. We assume that no
node on a path lies in the span of an edge the path crosses.
62
positive type type 0 negative type
Figure 1: Sample non-projective edges
plicit in (Havelka, 2005), where classes correspond-
ing to positive, zero and negative types are defined.
We now show a relationship between edges of cer-
tain types that will allow us to derive a relationship
between non-projective edges and well-nestedness.
Theorem 7 For any non-projective edge i? j in a
dependency tree T with Typei? j ? 0 (< 0) there is
a non-projective edge v? u in T with Typeu?v ? 0
(> 0) such that u ? argminn?Gapi? j leveln and either
i ? Gapu?v, or j ? Gapu?v.
PROOF. Let u be any node in argminn?Gapi? j leveln.
From the assumption Typei? j ? 0 node u has a par-
ent v /? Gapi? j. Obviously i ? j, v ? u are dis-
joint, thus from Proposition 3 we have v /? [i, j], and
so either i ? (u,v), or j ? (u,v). Since levelv ?
levelParenti? j , we have that Parenti? j /? Subtreev, and
so either i ? Gapu?v, or j ? Gapu?v. Finally from
Typei? j ? 0 (< 0) we get levelu? levelChildi? j ? 0
(> 0), hence Typeu?v ? 0 (> 0).
5 Well-nestedness & non-projective edges
We give characterizations of well-nestedness solely
in terms of properties of non-projective edges and
show some applications.
5.1 Characterization using pairs of edges
First we give a characterization of pairs of edges in
Theorem 5 in terms of their gaps.
Theorem 8 Let i1 ? j1, i2 ? j2 be two edges in a
dependency tree T . They are in disjoint subtrees T1,
T2, resp., and satisfy i1 ? (i2, j2), i2 ? (i1, j1) iff the
following condition holds
(inp) i1 ? Gapi2? j2 & i2 ? Gapi1? j1 .
PROOF. Direction ?: Root Tk in Parentik? jk , k =
1,2. Condition (inp) obviously implies i1 ? (i2, j2),
i2 ? (i1, j1), which in turn implies that edges i1? j1,
i2 ? j2 are disjoint. From Property 2 we get that
both Parenti2? j2 /? Subtreei1? j1 and Parenti1? j1 /?
Subtreei2? j2 , hence subtrees T1, T2 are disjoint.
Direction ?: Let us consider the edge i2 ? j2
and node i1. Since T1 is disjoint from T2, we have
that i1 /? Subtreei2? j2 , and therefore i1 ? Gapi2? j2 .
The proof that i2 ? Gapi1? j1 is analogous.
Condition (inp) allows us to talk about pairs of
edges causing ill-nestedness and so characterize
well-nestedness using properties of pairs of edges.
Definition 9 We say that any two non-projective
edges i1 ? j1, i2 ? j2 in a dependency tree T sat-
isfying condition (inp) form an ill-nested pair of
edges.
Corollary 10 A dependency tree T is ill-nested iff it
contains an ill-nested pair of edges.
PROOF. Follows from Theorems 5 and 8.
5.2 Sufficient condition for ill-nestedness
The results of Section 4 and previous subsection give
the following relationship between types of non-
projective edges and well-nestedness.
Theorem 11 If a dependency tree contains a non-
proj. edge of nonpositive type, then it is ill-nested.
PROOF. Follows from Theorems 7 and 10.
We see that types of non-projective edges and
well-nestedness share a common ground; however,
the statement of Theorem 11 cannot be strengthened
to equivalence (it is easy to see that also two edges
of positive type can satisfy (inp)).
5.3 Characterization using single edges
Now we show that well-nestedness can be character-
ized in terms of properties of single non-projective
edges only. We define the ill-nested set of an edge
and show that it gives the desired characterization.
Definition 12 The ill-nested set of any edge i? j
is defined as follows
Ini? j = {u? v | u ? Gapi? j & v /? [i, j]
& u,v /? Anci? j} .
The next proposition exposes the relationship of
edges in Ini? j to the gap of i? j.
Proposition 13 For any edge i? j Ini? j = {u? v |
u ? Gapi? j & v /? Gapi? j & u,v /? Anci? j}.
PROOF. The inclusion ? is obvious. The inclusion
? follows from Proposition 3 (u ? Gapi? j and v /?
Anci? j imply that edges i? j, u? v are disjoint).
63
We are ready to formulate the main result of this
section, which gives as corollary a characterization
of well-nestedness using properties of single edges.
Theorem 14 Let i? j be an edge in a dependency
tree T . The edges that form an ill-nested pair with
the edge i? j are exactly the edges in Ini? j .
PROOF. Direction?: Let u? v be an edge forming
an ill-nested pair with the edge i? j, i.e. i?Gapu?v
and u?Gapi? j. This implies i? (u,v) and u? (i, j),
which immediately gives v /? [i, j]. Supposing u ?
Anci? j or v ? Anci? j we get i ? Subtreeu?v, which
is in contradiction with i ? Gapu?v, and therefore
u,v /? Anci? j. Hence u? v ? Ini? j.
Direction?: Let u? v ? Ini? j (i.e. u ? Gapi? j,
v /? [i, j], and u,v /? Anci? j; without loss of gen-
erality assume i ? (u,v)). From the assumptions
u ? Gapi? j and v /? [i, j] we get that edges i ? j,
u? v are disjoint. Using Property 2, from the as-
sumption u,v /? Anci? j we get i /? Subtreeu?v, thus
i ? Gapu?v. Hence i? j, u? v satisfy (inp).
Corollary 15 A dependency tree T is ill-nested iff
Ini? j %= /0 for some non-projective edge i? j in T .
PROOF. Follows from Theorems 8 and 14.
5.4 Checking well-nestedness
Our characterization of well-nestedness gives also a
novel way of checking it. Here is a pseudocode of
an algorithm for fully determining all ill-nested sets:
1: for all edges i? j do
2: for all edges u? v s.t. u ? (i, j) do
3: check u? v ? Ini? j
Its time complexity is obviously O(n2), since the
check on line 3 can be implemented so as to take
constant time (by precompuing ??, which can be
done in O(n2) time). The bound is the same
as for the reported algorithms for checking well-
nestedness (M?hl, 2006).
However, the following theorem allows well-
nestedness checking to be linear for projective trees,
to be faster for random input, and to remain O(n2).
Theorem 16 In any ill-nested pair of edges, at least
one of the edges is of nonnegative type (witnessed by
an end-point of the other edge).
PROOF. Let i1 ? j1, i2 ? j2 satisfy (inp). Let
us suppose that levelChildi1? j1 ? levelChildi2? j2 . Since
levelChildu?v ? levelu for any edge u ? v, we have
that levelChildi1? j1 ? leveli2 , and hence Typei1? j1 ?
0. If levelChildi1? j1 ? levelChildi2? j2 , it is analogously
proved that i2 ? j2 is of nonnegative type.
Havelka (2005) presents a linear algorithm for
finding all non-projective edges of nonnegative type.
Thus well-nestedness can be checked as follows:
first find all edges of nonnegative type, and then
check their ill-nested sets for non-emptiness. Com-
puting ?? on demand for subtrees of the processed
edges, we preserve worst-case quadratic complexity.
6 Conclusion
We have presented new formal results linking prop-
erties of non-projective edges and their level types to
well-nestedness. This work extends the current body
of research on non-projective dependency structures
in natural language. In particular, we offer new in-
sights into formal properties of non-projective edges
that, if possible, both provide adequate means for
linguistic description and at the same time are use-
ful as features in machine-learning approaches.
Acknowledgement This work was supported by
projects 1ET201120505 of the Ministry of Edu-
cation of the Czech Republic and 374/2005/A-
INF/MFF of Grant Agency of Charles University.
References
Jir?? Havelka. 2005. Projectivity in Totally Ordered
Rooted Trees: An Alternative Definition of Projec-
tivity and Optimal Algorithms for Detecting Non-
Projective Edges and Projectivizing Totally Ordered
Rooted Trees. Prague Bulletin of Mathematical Lin-
guistics, 84:13?30.
Marco Kuhlmann and Joakim Nivre. 2006. Mildly Non-
Projective Dependency Structures. In Proceedings of
COLING/ACL, pages 507?514.
Ryan McDonald, Fernando Pereira, Kiril Ribarov, and
Jan Hajic?. 2005. Non-Projective Dependency Pars-
ing using Spanning Tree Algorithms. In Proceedings
of HLT/EMNLP, pages 523?530.
Mathias M?hl. 2006. Drawings as models of syntac-
tic structure: Theory and algorithms. Diploma thesis,
Programming Systems Lab, Universit?t des Saarlan-
des, Saarbr?cken.
Joakim Nivre. 2006. Constraints on Non-Projective De-
pendency Parsing. In Proc. of EACL, pages 73?80.
Neil J. A. Sloane. 2007. On-Line Encyclopedia
of Integer Sequences. Published electronically at
www.research.att.com/~njas/sequences/.
64
