Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 516?525,
Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational Linguistics
Tweet Recommendation with Graph Co-Ranking
Rui Yan?
?Department of Computer
Science and Technology,
Peking University,
Beijing 100871, China
r.yan@pku.edu.cn
Mirella Lapata?
?Institute for Language,
Cognition and Computation,
University of Edinburgh,
Edinburgh EH8 9AB, UK
mlap@inf.ed.ac.uk
Xiaoming Li?, \
\State Key Laboratory of Software
Development Environment,
Beihang University,
Beijing 100083, China
lxm@pku.edu.cn
Abstract
As one of the most popular micro-blogging
services, Twitter attracts millions of users,
producing millions of tweets daily. Shared in-
formation through this service spreads faster
than would have been possible with tradi-
tional sources, however the proliferation of
user-generation content poses challenges to
browsing and finding valuable information. In
this paper we propose a graph-theoretic model
for tweet recommendation that presents users
with items they may have an interest in. Our
model ranks tweets and their authors simulta-
neously using several networks: the social net-
work connecting the users, the network con-
necting the tweets, and a third network that
ties the two together. Tweet and author entities
are ranked following a co-ranking algorithm
based on the intuition that that there is a mu-
tually reinforcing relationship between tweets
and their authors that could be reflected in the
rankings. We show that this framework can be
parametrized to take into account user prefer-
ences, the popularity of tweets and their au-
thors, and diversity. Experimental evaluation
on a large dataset shows that our model out-
performs competitive approaches by a large
margin.
1 Introduction
Online micro-blogging services have revolutionized
the way people discover, share, and distribute infor-
mation. Twitter is perhaps the most popular such
service with over 140 million active users as of
2012.1 Twitter enables users to send and read text-
based posts of up to 140 characters, known as tweets.
Twitter users follow others or are followed. Being a
follower on Twitter means that the user receives all
the tweets from those she follows. Common prac-
tice of responding to a tweet has evolved into a well-
defined markup culture (e.g., RT stands for retweet,
?@? followed by an identifier indicates the user).
The strict limit of 140 characters allows for quick
and immediate communication in real time, whilst
enforcing brevity. Moreover, the retweet mecha-
nism empowers users to spread information of their
choice beyond the reach of their original followers.
Twitter has become a prominent broadcast-
ing medium, taking priority over traditional news
sources (Teevan et al., 2011). Shared information
through this channel spreads faster than would have
been possible with conventional news sites or RSS
feeds and can reach a far wider population base.
However, the proliferation of user-generated con-
tent comes at a price. Over 340 millions of tweets
are being generated daily amounting to thousands
of tweets per second!2 Twitter?s own search en-
gine handles more than 1.6 billion search queries per
day.3 This enormous amount of data renders it in-
feasible to browse the entire Twitter network; even
if this was possible, it would be extremely difficult
for users to find information they are interested in.
A hypothetical tweet recommendation system could
1For details see http://blog.twitter.com/2012/03/
twitter-turns-six.html
2In fact, the peak record is 6,939 tweets per second, reported
by http://blog.twitter.com/2011/03/numbers.html.
3See http://engineering.twitter.com/2011/05/
engineering-behind-twitters-new-search.html
516
alleviate this acute information overload, e.g., by
limiting the stream of tweets to those of interest to
the user, or by discovering intriguing content outside
the user?s following network.
The tweet recommendation task is challenging for
several reasons. Firstly, Twitter does not merely
consist of a set of tweets. Rather, it contains many
latent networks including the following relationships
among users and the retweeting linkage (which in-
dicates information diffusion). Secondly, the rec-
ommendations ought to be of interest to the user
and likely to to attract user response (e.g., to be
retweeted). Thirdly, recommendations should be
personalized (Cho and Schonfeld, 2007; Yan et al.,
2011), avoid redundancy, and demonstrate diversity.
In this paper we present a graph-theoretic approach
to tweet recommendation that attempts to address
these challenges.
Our recommender operates over a heterogeneous
network that connects the users (or authors) and the
tweets they produce. The user network represents
links among authors based on their following be-
havior, whereas the tweet network connects tweets
based on content similarity. A third bipartite graph
ties the two together. Tweet and author entities in
this network are ranked simultaneously following a
co-ranking algorithm (Zhou et al., 2007). The main
intuition behind co-ranking is that there is a mu-
tually reinforcing relationship between authors and
tweets that could be reflected in the rankings. Tweets
are important if they are related to other important
tweets and authored by important users who in turn
are related to other important users. The model ex-
ploits this mutually reinforcing relationship between
tweets and their authors and couples two random
walks, one on the tweet graph and one on the author
graph, into a combined one. Rather than creating a
global ranking over all tweets in a collection, we ex-
tend this framework to individual users and produce
personalized recommendations. Moreover, we in-
corporate diversity by allowing the random walk on
the tweet graph to be time-variant (Mei et al., 2010).
Experimental results on a real-world dataset con-
sisting of 364,287,744 tweets from 9,449,542 users
show that the co-ranking approach substantially im-
proves performance over the state of the art. We ob-
tain a relative improvement of 18.3% (in nDCG) and
7.8% (in MAP) over the best comparison system.
2 Related Work
Tweet Search Given the large amount of tweets
being posted daily, ranking strategies have be-
come extremely important for retrieving information
quickly. Many websites currently offer a real-time
search service which returns ranked lists of Twit-
ter posts or shared links according to user queries.
Ranking methods used by these sites employ three
criteria, namely recency, popularity and content rel-
evance (Dong et al., 2010). State-of-art tweet re-
trieval methods include a linear regression model bi-
ased towards text quality with a regularization factor
inspired by the hypothesis that documents similar
in content may have similar quality (Huang et al.,
2011). Duan et al. (2010) learn a ranking model us-
ing SVMs and features based on tweet content, the
relations among users, and tweet specific character-
istics (e.g., urls, number of retweets).
Tweet Recommendation Previous work has also
focused on tweet recommendation systems, assum-
ing no explicit query is provided by the users.
Collaborative filtering is perhaps the most obvious
method for recommending tweets (Hannon et al.,
2010). Chen et al. (2010) investigate how to se-
lect interesting URLs linked from Twitter and rec-
ommend the top ranked ones to users. Their rec-
ommender takes three dimensions into account: the
source, the content topic, and social voting. Sim-
ilarly, Abel et al. (2011a; 2011b; 2011c) recom-
mend external websites linked to Twitter. Their
method incorporates user profile modeling and tem-
poral recency, but they do not utilize the social
networks among users. R. et al. (2009) propose
a diffusion-based recommendation framework es-
pecially for tweets representing critical events by
constructing a diffusion graph. Hong et al. (2011)
recommend tweets based on popularity related fea-
tures. Ramage et al. (2010) investigate which topics
users are interested in following a Labeled-LDA ap-
proach, by deciding whether a user is in the followee
list of a given user or not. Uysal and Croft (2011) es-
timate the likelihood of a tweet being reposted from
a user-centric perspective.
Our work also develops a tweet recommendation
system. Our model exploits the information pro-
vided by the tweets and the underlying social net-
works in a unified co-ranking framework. Although
517
these sources have been previously used to search
or recommend tweets, our model considers them
simultaneously and produces a ranking that is in-
formed by both. Furthermore, we argue that the
graph-theoretic framework upon which co-ranking
operates is beneficial as it allows to incorporate per-
sonalization (we provide user-specific rankings) and
diversity (the ranking is optimized so as to avoid re-
dundancy). The co-ranking framework has been ini-
tially developed for measuring scientific impact and
modeling the relationship between authors and their
publications (Zhou et al., 2007). However, the adap-
tation of this framework to the tweet recommenda-
tion task is novel to our knowledge.
3 Tweet Recommendation Framework
Our method operates over a heterogeneous network
that connects three graphs representing the tweets,
their authors and the relationships between them.
Let G denote the heterogeneous graph with nodes V
and edges E, and G = (V,E) = (VM ?VU ,EM ?EU ?
EMU). G is divided into three subgraphs, GM, GU
and GMU . GM = (VM,EM) is a weighted undirected
graph representing the tweets and their relationships.
Let VM = {mi|mi ?VM} denote a collection of |VM|
tweets and EM the set of links representing relation-
ships between them. The latter are established by
measuring how semantically similar any two tweets
are (see Section 3.4 for details). GU = (VU ,EU) is
an unweighted directed graph representing the so-
cial ties among Twitter users. VU = {ui|ui ? VU} is
the set of users with size |VU |. Links EU among
users are established by observing their following
behavior. GMU = (VMU ,EMU) is an unweighted bi-
partite graph that ties GM and GU together and repre-
sents tweet-author relationships. The graph consists
of nodes VMU = VM ?VU and edges EMU connect-
ing each tweet with all of its authors. Typically, a
tweet m is written by only one author u. However,
because of retweeting we treat all users involved in
reposting a tweet as ?co-authors?. The three subnet-
works are illustrated in Figure 1.
The framework includes three random walks, one
on GM, one on GU and one on GMU . A random walk
on a graph is a Markov chain, its states being the
vertices of the graph. It can be described by a square
n? n matrix M, where n is the number of vertices
in the graph. M is a stochastic matrix prescribing
Figure 1: Tweet recommendation based on a co-ranking
framework including three sub-networks. The undirected
links between tweets indicate semantic correlation. The
directed links between users denotes following. A bipar-
tite graph (whose edges are shown with dashed lines) ties
the tweet and author networks together.
the transition probabilities from one vertex to the
next. The framework couples the two random walks
on GM, and GU that rank tweets and theirs authors in
isolation. and allows to obtain a more global rank-
ing by taking into account their mutual dependence.
In the following sections we first describe how we
obtain the rankings on GM and GU , and then move
on to discuss how the two are coupled.
3.1 Ranking the Tweet Graph
Popularity We rank the tweet network follow-
ing the PageRank paradigm (Brin and Page, 1998).
Consider a random walk on GM and let M be the
transition matrix (defined in Section 3.4). Fix some
damping factor ? and say that at each time step with
probability (1-?) we stick to random walking and
with probability ? we do not make a usual random
walk step, but instead jump to any vertex, chosen
uniformly at random:
m = (1??)MTm+
?
|VM|
11T (1)
Here, vector m contains the ranking scores for the
vertices in GM. The fact that there exists a unique so-
518
lution to (1) follows from the random walk M being
ergodic (? >0 guarantees irreducibility, because we
can jump to any vertex). MT is the transpose of M.
1 is the vector of |VM| entries, each being equal to
one. Let m? RVM , ||m||1 = 1 be the only solution.
Personalization The standard PageRank algo-
rithm performs a random walk, starting from any
node, then randomly selects a link from that node to
follow considering the weighted matrix M, or jumps
to a random node with equal probability. It pro-
duces a global ranking over all tweets in the col-
lection without taking specific users into account.
As there are billions of tweets available on Twit-
ter covering many diverse topics, it is reasonable
to assume that an average user will only be inter-
ested in a small subset (Qiu and Cho, 2006). We
operationalize a user?s topic preference as a vec-
tor t = [t1, t2, . . . , tn]1?n, where n denotes the num-
ber of topics, and ti represents the degree of prefer-
ence for topic i. The vector t is normalized such
that ?ni=1 ti = 1. Intuitively, such vectors will be
different for different users. Note that user prefer-
ences can be also defined at the tweet (rather than
topic) level. Although tweets can illustrate user in-
terests more directly, in most cases a user will only
respond to a small fraction of tweets. This means
that most tweets will not provide any information
relating to a user?s interests. The topic preference
vector allows to propagate such information (based
on whether a tweet has been reposted or not) to other
tweets within the same topic cluster.
Given n topics, we obtain a topic distribution ma-
trix D using Latent Dirichlet Allocation (Blei et al.,
2003). Let Di j denote the probability of tweet mi to
belong to topic t j. Consider a user with a topic pref-
erence vector t and topic distribution matrix D. We
calculate the response probability r for all tweets for
this user as:
r = tDT (2)
where r=[r1, r2, . . . , rVM ]1?|VM | represents the re-
sponse probability vector and ri the probability for a
user to respond to tweet mi. We normalize r so that
?ri?r ri = 1. Now, given the observed response prob-
ability vector r = [r1,r2, . . . ,rw]1?w, where w<|VM|
for a given user and the topic distribution ma-
trix D, our task is estimate the topic preference
vector t. We do this using maximum-likelihood
estimation. Assuming a user has responded to w
tweets, we approximate t so as to maximize the ob-
served response probability. Let r(t) = tDT. As-
suming all responses are independent, the probabil-
ity for w tweets r1, r2, . . . , rw is then ?wi=1 ri(t) under
a given t. The value of t is chosen when the proba-
bility is maximized:
t = argmax
t
( w
?
i=1
ri(t)
)
(3)
In a simple random walk, it is assumed that all
nodes in the matrix M are equi-probable before the
walk. In contrast, we use the topic preference vector
as a prior on M. Let Diag(r) denote a diagonal ma-
trix whose eigenvalue is vector r. Then m becomes:
m = (1??)[Diag(r)M]Tm+?r
= (1??)[Diag(tDT)M]Tm+?tDT
(4)
Diversity We would also like our output to be
diverse without redundant information. Unfortu-
nately, equation (4) will have the opposite effect,
as it assigns high scores to closely connected node
communities. A greedy algorithm such as Maxi-
mum Marginal Relevance (Carbonell and Goldstein,
1998; Wan et al., 2007; Wan et al., 2010) may
achieve diversity by iteratively selecting the most
prestigious or popular vertex and then penalizing the
vertices ?covered? by those that have been already
selected. Rather than adopting a greedy vertex selec-
tion method, we follow DivRank (Mei et al., 2010)
a recently proposed algorithm that balances popular-
ity and diversity in ranking, based on a time-variant
random walk. In contrast to PageRank, DivRank as-
sumes that the transition probabilities change over
time. Moreover, it is assumed that the transition
probability from one state to another is reinforced by
the number of previous visits to that state. At each
step, the algorithm creates a dynamic transition ma-
trix M(.). After z iterations, the matrix becomes:
M(z) = (1??)M(z?1) ?m(z?1)+?tDT (5)
and hence, m can be calculated as:
m(z) = (1??)[Diag(tDT)M(z)]Tm+?tDT (6)
Equation (5) increases the probability for nodes
with higher popularity. Nodes with high weights are
519
likely to ?absorb? the weights of their neighbors di-
rectly, and the weights of their neighbors? neighbors
indirectly. The process iteratively adjusts the ma-
trix M according to m and then updates m according
to the changed M. Essentially, the algorithm favors
nodes with high popularity and as time goes by there
emerges a rich-gets-richer effect (Mei et al., 2010).
3.2 Ranking the Author Graph
As mentioned earlier, we build a graph of au-
thors (and obtain the affinity U) using the follow-
ing linkage. We rank the author network using
PageRank analogously to equation (1). Besides
popularity, we also take personalization into ac-
count. Intuitively, users are likely to be interested
in their friends even if these are relatively unpopu-
lar. Therefore, for each author, we include a vec-
tor p = [p1, p2, . . . , p|VU |]1?|VU | denoting their prefer-
ence for other authors. The preference factor for au-
thor u toward other authors ui is defined as:
pui =
#tweets from ui
#tweets of u
(7)
which represents the proportion of tweets inherited
from user ui. A large pui means that u is more likely
to respond to ui?s tweets.
In theory, we could also apply DivRank on the au-
thor graph. However, as the authors are unique, we
assume that they are sufficiently distinct and there is
no need to promote diversity.
3.3 The Co-Ranking Algorithm
So far we have described how we rank the network
of tweets GM and their authors GU independently
following the PageRank paradigm. The co-ranking
framework includes a random walk on GM, GU ,
and GMU . The latter is a bipartite graph representing
which tweets are authored by which users. The ran-
dom walks on GM and GU are intra-class random
walks, because take place either within the tweets?
or the users? networks. The third (combined) ran-
dom walk on GMU is an inter-class random walk. It
is sufficient to describe it by a matrix MU|VM|?|VU|
and a matrix UM|VU|?|VM|, since GMU is bipartite.
One intra-class step changes the probability distribu-
tion from (m, 0) to (Mm, 0) or from (0, u) to (0, Uu),
while one inter-class step changes the probability
distribution from (m, u) to (UMT u, MUT m). The
design of M, U, MU and UM is detailed in Sec-
tion 3.4.
The two intra-class random walks are coupled
using the inter-class random walk on the bipartite
graph. The coupling is regulated by ?, a parameter
quantifying the importance of GMU versus GM and
GU . In the extreme case, if ? is set to 0, there is no
coupling. This amounts to separately ranking tweets
and authors by PageRank. In general, ? represents
the extent to which the ranking of tweets and their
authors depend on each other.
There are two intuitions behind the co-ranking al-
gorithm: (1) a tweet is important if it associates to
other important tweets, and is authored by impor-
tant users and (2) a user is important if they asso-
ciate to other important users, and they write impor-
tant tweets. We formulate these intuitions using the
following iterative procedure:
Step 1 Compute tweet saliency scores:
m(z+1) = (1??)([Diag(r)M(z)]T)m(z)+?UMTu(z)
m(z+1) = m(z+1)/||m(z+1)|| (8)
Step 2 Compute author saliency scores:
u(z+1) = (1??)([Diag(p)U]T)u(z)+?MUTm(z)
u(z+1) = u(z+1)/||u(z+1)|| (9)
Here, m(z) and u(z) are the ranking vectors for tweets
and authors for the z-th iteration. To guarantee con-
vergence, m and u are normalized after each itera-
tion. Note that the tweet transition matrix M is dy-
namic due to the computation of diversity while the
author transition matrix U is static. The algorithm
typically converges when the difference between the
scores computed at two successive iterations for any
tweet/author falls below a threshold ? (set to 0.001
in this study).
3.4 Affinity Matrices
The co-ranking framework is controlled by four
affinity matrices: M, U, MU and UM. In this section
we explain how these matrices are defined in more
detail.
The tweet graph is an undirected weighted graph,
where an edge between two tweets mi and m j repre-
sents their cosine similarity. An adjacency matrix M
520
describes the tweet graph where each entry corre-
sponds to the weight of a link in the graph:
Mij =
F (mi,m j)
?kF (mi,mk)
, F (mi,m j) =
~mi ?~m j
||~mi||||~m j||
(10)
where F (.) is the cosine similarity and ~m is a term
vector corresponding to tweet m. We treat a tweet
as a short document and weight each term with tf.idf
(Salton and Buckley, 1988), where tf is the term fre-
quency and idf is the inverse document frequency.
The author graph is a directed graph based on the
following linkage. When ui follows u j, we add a link
from ui to u j. Let the indicator function I (ui,u j) de-
note whether ui follows u j. The adjacency matrix U
is then defined as:
Uij =
I (ui,u j)
?k I (ui,uk)
, I (ui,u j)=
{
1if ei j ? EU
0if ei j /? EU
(11)
In the bipartite tweet-author graph GMU , the
entry EMU(i, j) is an indicator function denoting
whether tweet mi is authored by user u j:
A(mi,u j) =
{
1 if ei j ? EMU
0 if ei j /? EMU
(12)
Through EMU we define MU and UM, using the
weight matrices MU= [W?ij] and UM=[W?ji], con-
taining the conditional probabilities of transitioning
from mi to u j and vice versa:
W?ij =
A(mi,u j)
?kA(mi,uk)
, W?ji =
A(mi,u j)
?kA(mk,u j)
(13)
4 Experimental Setup
Data We crawled Twitter data from 23 seed users
(who were later invited to manually evaluate the
output of our system). In addition, we collected
the data of their followees and followers by travers-
ing the following edges, and exploring all newly
included users in the same way until no new
users were added. This procedure resulted in
a relatively large dataset consisting of 9,449,542
users, 364,287,744 tweets, 596,777,491 links, and
55,526,494 retweets. The crawler monitored the
data from 3/25/2011 to 5/30/2011. We used approx-
imately one month of this data for training and the
rest for testing.
Before building the graphs (i.e., the tweet graph,
the author graph, and the tweet-author graph), the
dataset was preprocessed as follows. We removed
tweets of low linguistic quality and subsequently
discarded users without any linkage to the remain-
ing tweets. We measured linguistic quality follow-
ing the evaluation framework put forward in Pitler
et al. (2010). For instance, we measured the out-of-
vocabulary word ratio (as a way of gauging spelling
errors), entity coherence, fluency, and so on. We fur-
ther removed stopwords and performed stemming.
Parameter Settings We ran LDA with 500 itera-
tions of Gibbs sampling. The number of topics n
was set to 100 which upon inspection seemed gen-
erally coherent and meaningful. We set the damp-
ing factor ? to 0.15 following the standard PageRank
paradigm. We opted for more or less generic param-
eter values as we did not want to tune our frame-
work to the specific dataset at hand. We examined
the parameter ? which controls the balance of the
tweet-author graph in more detail. We experimented
with values ranging from 0 to 0.9, with a step size
of 0.1. Small ? values place little emphasis on the
tweet graph, whereas larger values rely more heav-
ily on the author graph. Mid-range values take both
graphs into account. Overall, we observed better
performance with values larger than 0.4. This sug-
gests that both sources of information ? the content
of the tweets and their authors ? are important for
the recommendation task. All our experiments used
the same ? value which was set to 0.6.
System Comparison We compared our approach
against three naive baselines and three state-of-the-
art systems recently proposed in the literature. All
comparison systems were subject to the same fil-
tering and preprocessing procedures as our own al-
gorithm. Our first baseline ranks tweets randomly
(Random). Our second baseline ranks tweets ac-
cording to token length: longer tweets are ranked
higher (Length). The third baseline ranks tweets
by the number of times they are reposted assum-
ing that more reposting is better (RTnum). We also
compared our method against Duan et al. (2010).
Their model (RSVM) ranks tweets based on tweet
content features and tweet authority features using
the RankSVM algorithm (Joachims, 1999). Our
fifth comparison system (DTC) was Uysal and Croft
521
(2011) who use a decision tree classifier to judge
how likely it is for a tweet to be reposted by a spe-
cific user. This scenario is similar to ours when rank-
ing tweets by retweet likelihood. Finally, we com-
pared against Huang et al. (2011) who use weighted
linear combination (WLC) to grade the relevance of
a tweet given a query. We implemented their model
without any query-related features as in our setting
we do not discriminate tweets depending on their
relevance to specific queries.
Evaluation We evaluated system output in two
ways, i.e., automatically and in a user study. Specif-
ically, we assume that if a tweet is retweeted it is rel-
evant and is thus ranked higher over tweets that have
not been reposted. We used our algorithm to predict
a ranking for the tweets in the test data which we
then compared against a goldstandard ranking based
on whether a tweet has been retweeted or not. We
measured ranking performance using the normalized
Discounted Cumulative Gain (nDCG; Ja?rvelin and
Keka?la?inen (2002)):
nDCG(k,VU) =
1
|VU|
?
u?VU
1
Zu
k
?
i=1
2r
u
i ?1
log(1+ i)
(14)
where VU denotes users, k indicates the top-k posi-
tions in a ranked list, and Zu is a normalization factor
obtained from a perfect ranking for a particular user.
rui is the relevance score (i.e., 1: retweeted, 0: not
retweeted) for the i-th tweet in the ranking list for
user u.
We also evaluated system output in terms of Mean
Average Precision (MAP), under the assumption
that retweeted tweets are relevant and the rest irrele-
vant:
MAP =
1
|VU|
?
u?VU
1
Nu
k
?
i=1
Pui ? r
u
i (15)
where Nu is the number of reposted tweets for user u,
and Pui is the precision at i-th position for user u
(Manning et al., 2008).
The automatic evaluation sketched above does not
assess the full potential of our recommendation sys-
tem. For instance, it is possible for the algorithm to
recommend tweets to users with no linkage to their
publishers. Such tweets may be of potential interest,
however our goldstandard data can only provide in-
formation for tweets and users with following links.
System nDCG@5 nDCG@10 nDCG@25 nDCG@50 MAP
Random 0.068 0.111 0.153 0.180 0.167
Length 0.275 0.288 0.298 0.335 0.258
RTNum 0.233 0.219 0.225 0.249 0.239
RSVM 0.392 0.400 0.421 0.444 0.558
DTC 0.441 0.468 0.492 0.473 0.603
WLC 0.404 0.421 0.437 0.464 0.592
CoRank 0.519 0.546 0.550 0.585 0.617
Table 1: Evaluation of tweet ranking output produced by
our system and comparison baselines against goldstan-
dard data.
System nDCG@5 nDCG@10 nDCG@25 nDCG@50 MAP
Random 0.081 0.103 0.116 0.107 0.175
Length 0.291 0.307 0.246 0.291 0.264
RTNum 0.258 0.318 0.343 0.346 0.257
RSVM 0.346 0.443 0.384 0.414 0.447
DTC 0.545 0.565 0.579 0.526 0.554
WLC 0.399 0.447 0.460 0.481 0.506
CoRank 0.567 0.644 0.715 0.643 0.628
Table 2: Evaluation of tweet ranking output produced by
our system and comparison baselines against judgments
elicited by users.
We therefore asked the 23 users whose Twitter data
formed the basis of our corpus to judge the tweets
ranked by our algorithm and comparison systems.
The users were asked to read the systems? recom-
mendations and decide for every tweet presented to
them whether they would retweet it or not, under the
assumption that retweeting takes place when users
find the tweet interesting.
In both automatic and human-based evaluations
we ranked all tweets in the test data. Then for each
date and user we selected the top 50 ones. Our
nDCG and MAP results are averages over users and
dates.
5 Results
Our results are summarized in Tables 1 and 2. Ta-
ble 1 reports results when model performance is
evaluated against the gold standard ranking obtained
from the Twitter network. In Table 2 model per-
formance is compared against rankings elicited by
users.
As can be seen, the Random method performs
worst. This is hardly surprising as it recommends
tweets without any notion of their importance or user
interest. Length performs considerably better than
522
System nDCG@5 nDCG@10 nDCG@25 nDCG@50 MAP
PageRank 0.493 0.481 0.509 0.536 0.604
PersRank 0.501 0.542 0.558 0.560 0.611
DivRank 0.487 0.505 0.518 0.523 0.585
CoRank 0.519 0.546 0.550 0.585 0.617
Table 3: Evaluation of individual system components
against goldstandard data.
System nDCG@5 nDCG@10 nDCG@25 nDCG@50 MAP
PageRank 0.557 0.549 0.623 0.559 0.588
PersRank 0.571 0.595 0.655 0.613 0.601
DivRank 0.538 0.591 0.594 0.547 0.589
CoRank 0.637 0.644 0.715 0.643 0.628
Table 4: Evaluation of individual system components
against human judgments.
Random. This might be due to the fact that infor-
mativeness is related to tweet length. Using merely
the number of retweets does not seem to capture the
tweet importance as well as Length. This suggests
that highly retweeted posts are not necessarily in-
formative. For example, in our data, the most fre-
quently reposted tweet is a commercial advertise-
ment calling for reposting!
The supervised systems (RSVM, DTC, and
WLC) greatly improve performance over the naive
baselines. These methods employ standard machine
learning algorithms (such as SVMs, decision trees
and linear regression) on a large feature space. Aside
from the learning algorithm, their main difference
lies in the selection of the feature space, e.g., the way
content is represented and whether authority is taken
into account. DTC performs best on most evalua-
tion criteria. However, neither DTC nor RSVM, or
WLC take personalization into account. They gen-
erate the same recommendation lists for all users.
Our co-ranking algorithm models user interest with
respect to the content of the tweets and their pub-
lishers. Moreover, it attempts to create diverse out-
put and has an explicit mechanism for minimizing
redundancy. In all instances, using both DCG and
MAP, it outperforms the comparison systems. Inter-
estingly, the performance of CoRank is better when
measured against human judgments. This indicates
that users are interested in tweets that fall outside
the scope of their followers and that recommenda-
tion can improve user experience.
We further examined the contribution of the in-
dividual components of our system to the tweet
recommendation task. Tables 3 and 4 show how
the performance of our co-ranking algorithm varies
when considering only tweet popularity using the
standard PageRank algorithm, personalization (Per-
sRank), and diversity (DivRank). Note that DivRank
is only applied to the tweet graph. The PageR-
ank algorithm on its own makes good recommenda-
tions, while incorporating personalization improves
the performance substantially, which indicates that
individual users show preferences to specific topics
or other users. Diversity on its own does not seem
to make a difference, however it improves perfor-
mance when combined with personalization. Intu-
itively, users are more likely to repost tweets from
their followees, or tweets closely related to those
retweeted previously.
6 Conclusions
We presented a co-ranking framework for a tweet
recommendation system that takes popularity, per-
sonalization and diversity into account. Central to
our approach is the representation of tweets and
their users in a heterogeneous network and the abil-
ity to produce a global ranking that takes both in-
formation sources into account. Our model obtains
substantial performance gains over competitive ap-
proaches on a large real-world dataset (it improves
by 18.3% in DCG and 7.8% in MAP over the best
baseline). Our experiments suggest that improve-
ments are due to the synergy of the two information
sources (i.e., tweets and their authors). The adopted
graph-theoretic framework is advantageous in that
it allows to produce user-specific recommendations
and incorporate diversity in a unified model. Evalua-
tion with actual Twitter users shows that our recom-
mender can indeed identify interesting information
that lies outside the the user?s immediate following
network. In the future, we plan to extend the co-
ranking framework so as to incorporate information
credibility and temporal recency.
Acknowledgments This work was partially
funded by the Natural Science Foundation of China
under grant 60933004, and the Open Fund of the
State Key Laboratory of Software Development
Environment under grant SKLSDE-2010KF-03.
Rui Yan was supported by a MediaTek Fellowship.
523
References
