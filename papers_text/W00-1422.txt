Enriching Partial ly-Specif ied Representations for Text Real izat ion 
Using an Attr ibute Grammar * 
Songsak Channarukul Susan W. McRoy Syed S. Ali 
{ songsak, mcroy, syali} @cs.uwm. edu 
Naturat.,L~,ng~uage,and:J4rmwledge:,Rep~esentation.Research Group. ?  
http ://tigger. ca. uwm. edu/ ~lkrrg 
Elect r ica l  Eng ineer ing  and Computer  Science Depar tment  
Un ivers i ty  of Wiscons in -M i lwaukee  
Abst rac t  
We present a new approach to enriching under- 
specified representations of content to be realized 
as text. Our approach uses an attribute gram- 
mar to propagate missing information where needed 
in a tree that represents the text to be realized. 
This declaratively-specified grammar mediates be- 
tween application-produced output and the input to 
a generation system and, as a consequence, can eas- 
ily augment an existing generation system. End- 
applications that use this approach can produce high 
quality text without a fine-grained specification of 
the text to be realized, thereby reducing the bur- 
den to the application. Additionally, representations 
used by the generator are compact, because values 
that can be constructed from the constraints en- 
coded by the grammar will be propagated where nec- 
essary. This approach is more flexible than default- 
ing or making a statistically good choice because it 
can deal with long-distance dependencies ( uch as 
gaps and reflexive pronouns). Our approach differs 
from other approaches that use attribute grammars 
in that we use the grammar to enrich the represen- 
tations of the content to be realized, rather than 
to generate the text itself. We illustrate the ap- 
proach with examples from our template-based text- 
realizer, YAG. 
1 In t roduct ion  
Typically, a text realization system requires a great 
deal of syntactic information from an application 
in order to generate a high quality text; however, 
an application might not have this information (un- 
less it has been built with text generation in mind). 
This problem has been referred to as the Genera- 
tion Gap (Meteer, 1990). Meteer first identified the 
generation gap problem as arising at the text plan- 
ning stage. A text planner must decide what content 
needs to be expressed and creates a corresponding 
text plan for generating it. A sentence planner is 
then used to select an appropriate syntactic struc- 
?Th is  work was supported by a gift from Intel Corporation; 
and by the National Science Foundation, under grants IRI- 
9701617 and IRI-9523666. 
ture for a given plan. Typically, neither a text plan- 
ner nor a sentence planner is concerned with fine- 
grained syntactic issues, such as whether the subject 
of the sentence is a singular or plural noun. Thus, 
it becomes the responsibility of a text realizer to in- 
fer the missing information and to generate the best 
possible text from a given input. 
Most generation systems (such as FUF/SURGE 
(Elhadad, 1992), Penman (Mann, 1983), Real- 
Pro (Lavoie and Rainbow, 1997), TG/2 (Busemann, 
1996), and YAG (Channarukul, 1999; McRoy et al, 
1999)) alleviate this problem by using defaulting, 
in which a grammar writer specifies a default for 
each syntactic onstraint. This approach is inflexi- 
ble and prone to errors, because there might not be 
one default that suits all applications or situations. 
Another approach that has been proposed is to fill 
in the missing information on the basis of word co- 
occurrence data collected from a large corpus of text 
(see Nitrogen (Knight and Hatzivassiloglou, 1995)). 
However, statistical approaches have difficulty when 
there are long-distance dependencies among con- 
stituents in a text. 
In this paper, we present a new approach to re- 
solving the so-called generation gap that uses an At- 
tribute Grammar (Knuth, 1968) to enrich partially- 
specified inputs to a realization system to pro- 
duce high quality texts. Attribute Grammars are a 
declarative formalism for defining rules for attribute 
propagation (see Section 3). They have been used 
primarily for specifying the .semantics of program- 
ruing languages, although a few researchers have also 
used them to drive a text generator (see (Levison 
and Lessard, 1990), for exaanple). The main advan- 
tage of our approach is that it allows a generator 
to enjoy the computational efficiency of a template- 
based realization system, while reducing the linguis- 
tic burden on an application and increasing the qual- 
ity of the generated texts. 
Our work differs from previous uses of attribute 
grammars in natural language generation, which 
are similar to Levison and Lessard (Levison and 
Lessard, 1990)in that they apply attribute gram- 
mars directly to text realization. For example, Lev- 
163 
L 
((template CLAUSE) 
(process-type MENTAL) 
(process "want") 
(processor ((template NOUN-PNRASE) 
(head ((template CONJUNCTION) 
(first ((template NOUN-PHRASE) 
(head "Jack") 
(np-type PROPER) 
,~(gender .MASCULINE) : 
(definite NOART))) 
(second ((template PRONOUN)) ))) 
(person SECOND) 
(number PLURAL)) ) 
(phenomenon ((template NOUN-PHRASE) 
(head "dog") 
(definite NOART) 
(possessor ((template NOUN-PHRASE) 
(head "sister") 
(gender FEMININE) 
(definite NOART) 
(possessor ((template NOUN-PHRASE) 
(rear-circum ((template CLAUSE) 
(mood T0-INFINITIVE) 
(process-type MATERIAL) 
(process "swim")) ) ) 
Figure 1: A Feature Structure for 
(head "Jack") 
(np-type PROPER) 
(gender MASCULINE) 
(pronominal YES) 
(definite NOART)) ))))) 
the Sentence "Jack and I want his sister's dog to swim." 
ison and Lessard extend a context-free grammar 
with attributes and semantic rules similar to classi- 
cal attribute grammars presented by Knuth (Knuth, 
1968). Attributes in their system assist the realiza- 
tion by propagating information down a tree that 
specifies the complete syntactic structure of the out- 
put text. By contrast, our work employs attribute 
grammars, not to realize a text, but to perform a 
generation gap analysis prior to actual realization. 
We use both inherited and synthesized attributes 
(i.e., propagating information both down and up a 
tree) to share information and to determine appro- 
priate values for any missing features. 
2 An  Overv iew o f  YAG 
YAG (Yet Another Generator) (Channarukul, 1999; 
McRoy et al, 1999) is a template-based text- 
realization system that generates text in real-time. 
YAG uses templates to express text. structures corre- 
sponding to fragments of the target language. Tem- 
plates in YAG are declarative and modular. Coln- 
plex texts can be generated 173" embedding templates 
inside other tenlplates. 
Values for the tenlplates are provided by an appli- 
cation; inputs can include either,a conceptual repre- 
sentation of content or a feature structure. When an 
input is only partially specified, defaults defined in a 
template will be applied. Figure I shows an example 
of YAG's feature-structure based input; YAG would 
realize this example as "Jack and I want his sister's 
dog to swim. ". This input is partially specified, and 
thus is more compact and easier for an application 
to specify, than a complete specification. Figure 2 
shows the features that have been omitted and the 
defaults used t75 YAG to realize the sentence from 
tile input. 
Although the input is already more compact han 
a full specification, further simplification of the in- 
put provided from an application would have been 
possible, if certain inferences could be made. For ex- 
ample, Figure 3 shows an input structure that could 
replace the one given in Figure 1. In Figure 3, it was 
not necessary for the application to specify that the 
conjunction of two noun phrases is a phlral noun 
phrase, nor that component noun phrases (proper 
nouns, pronouns, and possessives) hould not, con- 
tain an article. In the case of conjunctions, there is 
no default that would provide the correct outputs in 
all cases, because the same conjunction template is 
used to conjoin adjectives and clauses. Instead, our 
approach uses an attribute grammar to make the 
appropriate inferences and enrich the feature struc- 
164 
Template Name \] Template Slot Default Allowed VMues 
CLAUSE sentence 
NOUN-PHRASE 
mood 
process-type 
?mode 
tense 
future 
progressive 
perfective 
voice 
quality 
np-type 
person 
number 
gender 
definite 
regular-noun 
countable 
inflected 
pronominal 
YES 
DECLARATIVE 
type 
ASCRIPTIVE 
.nil 
"PRESENT 
NO 
NO 
NO 
ACTIVE 
POSITIVE 
COMMON 
THIRD 
SINGULAR 
NEUTRAL 
NO 
YES 
YES 
YES 
NO 
YES, NO 
DECLARATIVE, YES-N0, WH, IMPERATIVE, 
T0-INFINITIVE 
ASCRIPTIVE, MENTAL, MATERIAL, 
COMPOSITE, POSSESSIVE, LOCATIVE, 
TEMPORAL, VERBAL, EXISTENTIAL 
ATTRIBUTI~E,,EQUATIVE,.CAUSATIVE 
PRESENT, PAST 
YES, NO 
YES, N0 
YES, N0 
ACTIVE, PASSIVE 
POSITIVE, NEGATIVE 
COMMON, PROPER 
FIRST, SECOND, THIRD 
SINGULAR, PLURAL 
NEUTRAL, MASCULINE, FEMININE 
YES, N0, NOART 
YES, NO 
YES, NO 
YES, NO 
YES, NO 
POSSESSOR pronominal YES YES, NO 
PRONOUN PERSONAL 
FIRST 
SINGULAR 
NEUTRAL 
person 
number 
gender 
PERSONAL, OBJECTIVE, REFLEXIVE, 
POSSESSIVE-PRONOUN, 
POSSESSIVE-DETERMINER, 
RELATIVE, DEMONSTRATIVE 
FIRST, SECOND, THIRD 
SINGULAR, PLURAL 
NEUTRAL, MASCULINE, FEMININE 
CONJUNCTION sentence NO YES, NO 
Figure 2: Some Defaults from YAG's Syntactic Templates. 
((template CLAUSE) 
(process-type MENTAL) 
(process "want") 
(processor ((template CONJUNCTION) 
(first ((template NOUN-PHRASE) 
(head "Jack") 
(np-type PROPER) 
(gender MASCULINE) )) 
(second ((template PRONOUN)) ))) 
(phenomenon ((template NOUN-PHRASE) 
(head "dog") 
(possessor ((template NOUN-PHRASE) 
(head "sister") 
(gender FEMININE) 
? ~(possessor<(template NOUN-PHRASE) 
(head "Jack") 
(np-type PROPER) 
(gender MASCULINE) 
(pronominal YES)) ))))) 
(rear-circum ((template CLAUSE) 
(mood T0-INFINITIVE) 
(process-type MATERIAL) 
(process "swim")) ) ) 
Figure 3: A (shorter) Feature Struclur() of the Sentence "Jack and I want his ._zste7 s dog to swim.". 
165 
ture input  so that neither the appl ication, nor the 
templates  need to be altered to handle dependencies, 
like conjunctions, correctly. 
3 At t r ibute  Grammars  
An at t r ibute  grammar  consists of a context-free 
grammar ,  a finite set of at t r ibutes,  and a set of se- 
mant ic  rules. The ,.C-,on.~eezt-Free :Grammar (CFG) 
specifies the syntax of a language by expressing how 
to construct  a syntax tree from non-terminal  and ter- 
minal  symbols  defined in a language. The Attributes 
and Semantic Rules specify the semantics. A finite 
set of at t r ibutes  is associated with each non-terminal  
symbol.  Each of these sets is divided into two dis- 
jo int  subsets, namely Inherited Attributes and Syn- 
thesized Attributes. Inher i ted att r ibutes propagate 
down a syntax tree whereas synthesized at t r ibutes  
propagate  upward. A semant ic  rule specifies how to 
compute the value of an a t t r ibute  from others. This 
specif ication implicitly defines dependencies among 
at t r ibutes  in an at t r ibute grammar ,  locally (within a 
product ion)  and globally (among product ions) .  At- 
tribute Evaluation is the process of comput ing values 
for every attr ibute instance in the tree according to 
the semant ic  rules defined for each product ion.  
An example of an a t t r ibute  grammar  and its com- 
ponents is given in F igure 4 (adapted from (Alblas, 
1991)). This  attr ibute grammar  consists of two non- 
terminals,  two terminals, andthree  product ion rules. 
The inherited attr ibutes of the non-terminal  A are a 
and b. Its synthesized at t r ibutes  are x and y. No 
at t r ibutes  are assigned to the non-terminal  S. 
nonterminals: S, A. 
terminals: s, t. 
start symbol: S. 
description of attributes: 
a, b: integer, inh of A; 
x, y: integer, syn of A; 
productions and semantic rules: 
1) S -> A. 
A.a := A.x 
2) AO -> AI s. 
Al.a := AO.a; Al.b := Al.y; 
AO.x := Al.x; AO.y := l 
3) A -> t .  
A.y := A.a; A.x := A.b 
Figure 4: An Example Att r ibute Grammar .  
As mentioned earlier, semantic rules define depen- 
dencies among attr ibutes? Figure 5 shows depen- 
dency graphs corresponding to the semantic rules of 
Figure 4. In the graphs, a dotted line represents a 
der ivat ion of a production rule, 'while an arrow de i- 
notes an att r ibute dependency. Thus. .4 ~ B means 
S abAxy  abAxy  
(% I 
abAxy  abAxy  s t 
(1) (2) (3) 
? . . F igure5:  Dependency Graphs.  
B is dependent  on A, but not the other way around. 
In other words, we cannot know B before we know 
A. 
4 Extend ing  a Grammar  to  Enab le  
Generat ion  Gap Ana lys i s  
To make a generation gap analysis possible, a gram- 
mar wr i ter  must first extend the grammar  of his 
or her exist ing generator to capture the propaga- 
tion semant ics of a target language. This extension 
involves defining attr ibutes (synthesized and inher- 
ited) and associated semantic rules. Next, a small 
program must  be built to construct  a tree from 
a given input  and retrieve semantic rules and at- 
t r ibutes from associated grammar  units. 
A t t r ibute  evaluation begins by instant iat ing each 
inherited at t r ibute  with values from the input and 
then the remaining at t r ibutes  are evaluated. This 
process is incremental in the sense that  new infor- 
mat ion gained from previous evaluat ions might lead 
to the discovery of addit ional  information. When 
all a t t r ibutes  remain unchanged, or there is a con- 
flict detected in the input, the process terminates. 
The generator  then passes the enriched input to the 
real izat ion component. 
Consider the following f ragment of input from 
Figure 3 that  uses the CONJUNCTION template to 
join a noun phrase and a pronoun.  
( ( template  CONJUNCTION) 
( : f i r s t  ( ( template  NOUN-PHRASE) 
(head " Jack" )  
(np- type  PROPER) 
(gender  MASCULINE) )) 
( second ( ( template  PRONOUN))  )) 
This f ragment is the subject  of the sentence, there- 
fore features uch as person  and number  would be 
required to enforce tile subject-verb agreement of En- 
glish. F igure 6 shows a dependency graph ~ for this 
i The notatio, used in the dependency graph is the fol- 
lowing: 
The oval represents a template slot that is bound to an atomic 
value. The rectangle denotes a slot that is bound to another 
feature structure. The top text in a rectangle specifies a slot 
name, and the bottom text is the name of a template ~kssigned 
to this slot,. A value with an underline'means a default of the 
above slot. The bold fdnt represents a value yielded from 
attribute valuations. 
166 
J CONJUNCTION 
sentence , ' ' '= : : - . .  oetson number gender definite sentence error 
first secood  , 1I 1/  / - ._o. \ 
definite , ' , T , ' ,  person umber gender definite sentence 
PROPER "Jack" THIRD SINGULAR MASCULINE NOART 
@ @ @ @  
PERSONAL FIRST SINGULAR NEUTRAL 
Figure 6: A Dependency Graph of the CONJUNCTION Template corresponding to the text "Jack and I". 
fragment. The dependencies are based on the se- 
mantic rules given in F igure 7 (Section 6 describes 
syntax of these rules.). 
The semantic rules in F igure 7 give constraint  
information for the CONJUNCTION template,  the 
NOUN-PHRASE template,  and the PRONOUN template.  
For the CONJUNCTION template ,  the grammar  will: 
e Use the sentence  feature of the current tem- 
plate (which is NO by default). 
o Pass up the person  feature found by compar-  
ing the person  features associated with tile two 
conjuncts (i.e., pass up second person whenever 
the conjuncts combine either first person and 
second or third person, or they combine second 
person and third person; pass up third person if 
both conjuncts use th ird person; otherwise pass 
tip nil); 
? Constrain the number  feature to be PLURAL, 
the gender  feature to be NEUTRAL, the de f in i te  
feature to be NOART, and the sentence  feature 
to the same as the sentence feature of the con- 
junets. 
For tile NOUN-PHRASE teinplate,  the grammar  will 
Require this template  to enforce the inherited 
values of the de f in i te ,  number ,  and np- type  
features. 
Require the (embedded) DETERMINER template 
enforce the number  feature of the current tem- 
plate. 
Pass up four features (def in i te ,  number ,  per -  
son,  and np- type)  to any templates that  use 
this noun phrase, where the fotlcrwJng con- 
straints apply: 
The  definiteness feature that  is passed is 
YES whenever the current template has in- 
herited YES for this value or there is a pos- 
sessor or a determiner and one of them 
passes up YES for this feature. (If there is 
neither possessor nor determiner then the 
grammar considers the np- type:  if it is 
COMMON, it uses NO (for indefinite) and if it 
is PROPER, it uses NOART 
The  number  feature  passed is the value 
passed from the determiner, if there is one, 
or the value from the current template.  
The  person  feature  passed is the one from 
the current template. 
The  r ip - type  feature  passed is COMMON if the 
value of definite is NO and PROPER if the 
value is NOART. 
For tile PRONOUN template, the grammar  will: 
o Pass tip the person ,  number ,  and gender  val- 
ues fl'om the current template (possibly using 
default  values), along with the constraint hat  
ttle string realized for it not be a sentence and 
not be preceded by an article. 
In - the example shown in Figure 6, inherited at- 
tr ibutes 2 have been initialized to the associated val- 
ues given in an input. If the input does not specify a 
value for an inherited attr ibute,  then the value n i l  
is used. 
The attr ibute evaluation is depth-first, and re- 
quires nmltiple traversals. Here, the NOUN-PHRASE 
sub-tree is evaluated twice, as we discover that  the 
de f in i te  feature must be NOART. Since tile PRONOUN 
2 Inherited attributes are placed on the left side of each 
node. Synthesized attributes are on the right. 
167 
Template Name Semantic Rules 
CONJUNCTION 
NOUN-PHRASE 
PRONOUN 
((this sentence) (this inh sentence)) 
((this syn person) (CASE (UNION (first syn person) 
(second syn person)) OF 
((first nil) 
(second nil) 
((first second) second). 
((first third) second) 
((second third) second) 
(third third)) )) 
((this syn number) PLURAL) 
((this syn gender) NEUTRAL) 
((this syn definite) NOART) 
((this syn sentence) (UNION (first syn sentence) (second syn sentence))) 
((this definite) (this inh definite)) 
((this number) (this inh number)) 
((this np-type) (this inh np-type)) 
((determiner inh number) (this inh number)) 
((this syn definite) (IF (AND (NULL (this possessor)) 
(NULL (this determiner))) THEN 
(UNION (this definite) 
(CASE (this np-type) OF 
((common NO) 
(proper NOART))) ) 
ELSE 
(UNION (this definite) 
(possessor syn definite) 
(determiner syn definite)) )) 
((this syn number) (UNION (determiner syn number) (this number)) ) 
((this syn person) (this person)) 
((this syn np-type) (CASE (this definite) OF 
( (NO COMMON) 
(NOART PROPER)) )) 
((this syn person) (this person)) 
((this syn number) (this number)) 
((this syn gender) (this gender)) 
((this syn sentence) NO) 
((this syn definite) NOART) 
Figure 7: Semantic  Rules of the CONJUNCTION, NOUN-PHRASE, and PRONOUN template.  
template has no inherited attr ibutes,  a single evalua- 
tion would be sufficient. The CONJUNCTION sub-tree 
is also traversed twice because the sentence  feature 
is re-assigned once (from n i l  to NO). 
Figure 8 shows the tree and dependencies, for the 
fragment, "his sister's dog". It shows how the deft- 
niteness of a noun phrase is dependent on the ex- 
istence of a possessor. For example, if a posses- 
sor (such as "his" or "Jack's") is specified, a noun 
phrase will not need an article. 
Note that this feature structure can be generated 
differently as "'Jack's sister's dog". "her dog". "the 
dog o~ Jack's sister". "'the do q o/ h.is sister", and 
"the dog o/ hens". \Vhile some of these variations 
require further investigation to determine how to 
transform a tree so that it reflects a new ordering 
of constituents,  some can be implemented using se- 
mantic rules. For example , - - to -avo id- /anawkward 
construct ion such as ",lack's sister's do q" in the sen- 
oo<  .... 
~ f--nml~nal 
PROPER 'Jack THIRD SINGULAR f',IASCU LIN E NIl%R1 YES 
Figure 8: A Dependency Graph of the NOUN-PHRASE 
-Template  corresponding to  the text, "his sister's 
dog ". 
168 
tence "Jack and I want Jack's sister's dog to swim. ", 
in favor of "his sister's dog", without he application 
having to request a pronoun explicitly, as in the ex- 
ample shown above, we could add a rule to force 
the pronomina l  feature of the inner most posses- 
sor to be YES, whenever a (repeated) noun phrase is 
a possessor of a possessor of the primary noun. 
5 The Use of the  Gehei-ation Gap ........... 
Analysis to Resolve Conflicting 
In fo rmat ion  
One side benefit of the use of attribute grammars 
is that they can help resolve inconsistencies in the 
input provided from an application. Previously, a 
generation system might not be able to recognize 
such conflicts, and therefore might generate a text 
that is ungrammatical, or it might simply fail to 
produce an output at all. 
The following is an example input that has a 
conflict; the values of the number  feature in the 
NOUN-PHRASE and PRONOUN templates are inconsis- 
tent. 
( (template NOUN-PHRASE) 
(head "book" ) 
(number PLURAL) 
(determiner ((template PRONOUN) 
(type DEMONSTRATIVE) 
(distance NEAR) 
(number SINGULAR)) ) 
) 
Executed literally, a generator would produce 
the phrase "this books", rather than "this book" or 
"these books". Figure 9 shows a dependency graph 
corresponding to the above input. 
/-2> 
number number error 
number ~ number error 
DEMONSTRATIVE NEAR SINGULAR 
Figure 9: A Dependency Graph corresponding to 
the text "this book" or "these books". 
With the use of an appropriate attribute gram- 
mar, an analysis of this structure would detect a con- 
flict when the vahm SINGULAR o f the -number  fea- 
ture propagates upward and conflicts with the value 
PLURAL of the number  feature of the NOUN-PIIRASE 
template. In this case, a generator can choose to 
override one of the conflicting features and generate 
a text from the revised input. 
6 Imp lementat ion  
,~Gy.ammars,.in_~a.:tem.plate-hased. syst m differ suf- 
ficiently from phrase-based systems so that tradi- 
tional attribute grammars pecifications cannot be 
used without changes. In particular, grammars in 
a template-based system are not restricted to syn- 
tactic text structure as they are in phrase-based 
systems, but mw include either syntactic specifica- 
tions, semantic specifications, or a mixture of both. 
Therefore template-based grammars do not restrict 
derivations on the right side of a production to some 
specific non-terminals, as they would be in a phrase- 
based grammar. 
In our approach, a template is equivalent to the 
non-terminal on the left side of a production. Tem- 
plate slots are equivalent o terminals and non- 
terminals on the right side depending on their value 
at the time of generation. Slots that are bound to 
a simple value are considered terminals, while those 
that are bound to a feature structure are considered 
non-terminals. The evaluation function of terminals 
is actually a constant function whose return value is 
the value to which the terminal has been bound. 
We have defined a small language sufficient to 
specify attribute grammars in a template as given 
in Figure 10. Additional keywords are also defined. 
The keyword th i s  refers to the current template. 
The keywords inh and syn indicate an inherited at- 
tribute and a synthesized attribute, respectively. 
We have implemented an attribute grammar- 
based propagation analysis program in Lisp as 
an extension to YAG. Some templates have been 
augmented with semantic propagation rules. It 
was not necessary to define attributes for YAG's 
template-based grammar because template slots al- 
ready served as attributes. The program has been 
able to identify missing information (using the de- 
fined semantic propagation rules) and to reject in- 
puts that have a conflict. 
Other generation systems that intend to use an at- 
tribute grammar approach to enrich their partially- 
specified input will need to analyze the character- 
istics of their grammar formalism. Basically, one 
needs to identify the smallest unit of a grammar 
(e.g., a category (cat) in FUF/SURGE), and then 
define semantic rules similar to those presented in 
this paper for each grammar unit. From a given 
input, a generator should be able to pick semantic 
rules associated with information provided in an ill- 
put. .~n attribute valuation is then executed as 
described. 
169 
AttributeGrammar ::- EvalRules 
EvalRules ::- "(" EvalRule EvalRules ")" I nil 
EvalRule ::- "(" Attr ibute Stmt ")" 
Stmt ::- Expr \[ CaseStmt \[ IfStmt 
Expr ::- At t r ibute  \[ constant \[ 
"( .... UNION" Stmt Stmt ")" I 
,,(. ,,TNTEKSECTirSN,,.~Simrt.Stmt ,,). 
Attribute ::- inherited \[ synthesized 
CaseStmt ::- "( .... CASE" Expr "OF" Alters ")" 
Alters ::- "(" Alter Alters ")" I nil 
Alter ::- "(" value result ")" 
result ::- Expr 
I fS tmt  : : -  "(  . . . .  IF"  Cond "THEN" Strut " ) "  \[ 
" (  . . . .  I F "  Cond "THEN" Strut 
"ELSE" Strut " ) "  
Cond : : -  "(  . . . .  NULL" Expr  " ) "  I 
" (  . . . .  ECIUAL" Expr  Expr " ) "  I 
"(" "NOT" Cond ")" \[ 
"(" "AND" Cond Cond ")" l 
" ( "  "OR" Cond Cond " ) "  
Figure 10: The Syntax of YAG's Attribute Gram- 
mars Specification. 
7 Conc lus ion  
We have presented a new approach to enriching 
under-specified representations of content to be 
realized as text using attribute grammars with 
semantic propagation rules. Our approach is not 
intended to replace defaulting mechanisms used in 
the current generation systems. Instead it improves 
the quality of input to the generator for better 
realization. Defaults are still used if the analysis 
fails to discover useful information. 
Acknowledgement  
The authors are indebted to John T. Boyland for 
his helpful comments and suggestions. 
Re ferences  
Henk Alblas. 1991. hltroduction to attribute gram- 
mars. In Henk Alblas and Bo~ivoj Melichar, edi- 
tors, Attribute Grammars, Applications and Sys- 
tems, vohune 545 of Lecture Notes in Computer 
Science, pages 1 15. Springer-Verlag, New York-- 
Heidelberg-Berlin. June. Prague. 
Stephan Busemalm. 1996. Best-first surface realiza- 
tion. In Donia Scott. editor. Proceedings of the 
Eighth International Workshop o?~ Natural Lan- 
guage Gencration. pages 101-110. 
Songsak Channavnkul. i999. YAG: A Natural Lan- 
guage Generator for Real-Time Systems. Mas- 
ter's thesis, University of Wisconsin-Milwaukee, 
December. 
Michael Elhadad. 1992. Using argumentation to 
control lexical choice: A functional unification- 
based approach. Ph.D. thesis, Computer Science 
Department, Columbia University. 
Keven Knight and Vasileios Hatzivassiloglou. 1995. 
T.wo~level, many-paths generation..In:Proceedings.. 
? of ACL. 
Donald E. Knuth. 1968. Semantics of context- 
free languages. Mathematical Systems Theory, 
2(2):127-145, June. Correction: Mathematical 
Systems Theory 5, 1, pp. 95-96 (March 1971). 
Benoit Lavoie and Owen Rambow. 1997. A fast 
and portable realizer for text generation systems. 
In Proceedings o/ the Fifth Conference on Ap- 
plied Natural Language Processing, pages 265-268, 
Washington. 
Michael Levison and Gregory Lessard. 1990. Ap- 
plication of attribute grammars to natural lan- 
guage sentence generation. In Pierre Deransart 
and Martin Jourdan, editors, Attribute Gram- 
mars and their Applications (WAGA), volume 
461 of Lecture Notes in Computer Science, pages 
298-312. Springer-Verlag, New York-Heidelberg- 
Berlin, September. Paris. 
William C. Mann. 1983. An overview of the 
Penman text generation system. In Proceedings 
of the Third National Conference on Artificial 
Intelligence (AAA\[-83), pages 261-265, Wash- 
ington, DC, August 22-26,. Also appears as 
USC/Information Sciences Institute Tech Report 
RR-83-114. 
Susan W. McRoy, Songsak Channarukul, and 
Syed S. Ali. 1999. A Natural Language Gener- 
ation Component for Dialog Systems. In Working 
Notes of the AAAI  Workshop on Mixed-Initiative 
Intelligence, at the 1999 Meeting of the American 
Association for Artificial Intelligence, Orlando, 
FL. 
Marie W. Meteer. 1990. The "Generation Gap" The 
Problem of Exprcssibility in Text Planning. Ph.D. 
thesis, University of Massachusetts. 
170 
