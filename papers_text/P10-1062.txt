Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 604?611,
Uppsala, Sweden, 11-16 July 2010. c?2010 Association for Computational Linguistics
Error Detection for Statistical Machine
Translation Using Linguistic Features
Deyi Xiong, Min Zhang, Haizhou Li
Human Language Technology
Institute for Infocomm Research
1 Fusionopolis Way, #21-01 Connexis, Singapore 138632.
{dyxiong, mzhang, hli}@i2r.a-star.edu.sg
Abstract
Automatic error detection is desired in
the post-processing to improve machine
translation quality. The previous work is
largely based on confidence estimation us-
ing system-based features, such as word
posterior probabilities calculated from N -
best lists or word lattices. We propose to
incorporate two groups of linguistic fea-
tures, which convey information from out-
side machine translation systems, into er-
ror detection: lexical and syntactic fea-
tures. We use a maximum entropy clas-
sifier to predict translation errors by inte-
grating word posterior probability feature
and linguistic features. The experimen-
tal results show that 1) linguistic features
alone outperform word posterior probabil-
ity based confidence estimation in error
detection; and 2) linguistic features can
further provide complementary informa-
tion when combined with word confidence
scores, which collectively reduce the clas-
sification error rate by 18.52% and im-
prove the F measure by 16.37%.
1 Introduction
Translation hypotheses generated by a statistical
machine translation (SMT) system always contain
both correct parts (e.g. words, n-grams, phrases
matched with reference translations) and incor-
rect parts. Automatically distinguishing incorrect
parts from correct parts is therefore very desir-
able not only for post-editing and interactive ma-
chine translation (Ueffing and Ney, 2007) but also
for SMT itself: either by rescoring hypotheses in
the N -best list using the probability of correct-
ness calculated for each hypothesis (Zens and Ney,
2006) or by generating new hypotheses using N -
best lists from one SMT system or multiple sys-
tems (Akibay et al, 2004; Jayaraman and Lavie,
2005).
In this paper we restrict the ?parts? to words.
That is, we detect errors at the word level for SMT.
A common approach to SMT error detection at the
word level is calculating the confidence at which a
word is correct. The majority of word confidence
estimation methods follows three steps:
1) Calculate features that express the correct-
ness of words either based on SMT model
(e.g. translation/language model) or based on
SMT system output (e.g. N -best lists, word
lattices) (Blatz et al, 2003; Ueffing and Ney,
2007).
2) Combine these features together with a clas-
sification model such as multi-layer percep-
tron (Blatz et al, 2003), Naive Bayes (Blatz
et al, 2003; Sanchis et al, 2007), or log-
linear model (Ueffing and Ney, 2007).
3) Divide words into two groups (correct trans-
lations and errors) by using a classification
threshold optimized on a development set.
Sometimes the step 2) is not necessary if only one
effective feature is used (Ueffing and Ney, 2007);
and sometimes the step 2) and 3) can be merged
into a single step if we directly output predicting
results from binary classifiers instead of making
thresholding decision.
Various features from different SMT models
and system outputs are investigated (Blatz et al,
2003; Ueffing and Ney, 2007; Sanchis et al, 2007;
Raybaud et al, 2009). Experimental results show
that they are useful for error detection. However,
it is not adequate to just use these features as dis-
cussed in (Shi and Zhou, 2005) because the infor-
mation that they carry is either from the inner com-
ponents of SMT systems or from system outputs.
To some extent, it has already been considered by
SMT systems. Hence finding external information
604
sources from outside SMT systems is desired for
error detection.
Linguistic knowledge is exactly such a good
choice as an external information source. It has al-
ready been proven effective in error detection for
speech recognition (Shi and Zhou, 2005). How-
ever, it is not widely used in SMT error detection.
The reason is probably that people have yet to find
effective linguistic features that outperform non-
linguistic features such as word posterior proba-
bility features (Blatz et al, 2003; Raybaud et al,
2009). In this paper, we would like to show an
effective use of linguistic features in SMT error
detection.
We integrate two sets of linguistic features into
a maximum entropy (MaxEnt) model and develop
aMaxEnt-based binary classifier to predict the cat-
egory (correct or incorrect) for each word in a
generated target sentence. Our experimental re-
sults show that linguistic features substantially im-
prove error detection and even outperform word
posterior probability features. Further, they can
produce additional improvements when combined
with word posterior probability features.
The rest of the paper is organized as follows. In
Section 2, we review the previous work on word-
level confidence estimation which is used for error
detection. In Section 3, we introduce our linguistic
features as well as the word posterior probability
feature. In Section 4, we elaborate our MaxEnt-
based error detection model which combine lin-
guistic features and word posterior probability fea-
ture together. In Section 5, we describe the SMT
system which we use to generate translation hy-
potheses. We report our experimental results in
Section 6 and conclude in Section 7.
2 Related Work
In this section, we present an overview of confi-
dence estimation (CE) for machine translation at
the word level. As we are only interested in error
detection, we focus on work that uses confidence
estimation approaches to detect translation errors.
Of course, confidence estimation is not limited to
the application of error detection, it can also be
used in other scenarios, such as translation predic-
tion in an interactive environment (Grandrabur and
Foster, 2003) .
In a JHU workshop, Blatz et al (2003) investi-
gate using neural networks and a naive Bayes clas-
sifier to combine various confidence features for
confidence estimation at the word level as well as
at the sentence level. The features they use for
word level CE include word posterior probabil-
ities estimated from N -best lists, features based
on SMT models, semantic features extracted from
WordNet as well as simple syntactic features, i.e.
parentheses and quotation mark check. Among all
these features, the word posterior probability is the
most effective feature, which is much better than
linguistic features such as semantic features, ac-
cording to their final results.
Ueffing and Ney (2007) exhaustively explore
various word-level confidence measures to label
each word in a generated translation hypothe-
sis as correct or incorrect. All their measures
are based on word posterior probabilities, which
are estimated from 1) system output, such as
word lattices or N -best lists and 2) word or
phrase translation table. Their experimental re-
sults show that word posterior probabilities di-
rectly estimated from phrase translation table are
better than those from system output except for the
Chinese-English language pair.
Sanchis et al (2007) adopt a smoothed naive
Bayes model to combine different word posterior
probability based confidence features which are
estimated from N -best lists, similar to (Ueffing
and Ney, 2007).
Raybaud et al (2009) study several confi-
dence features based on mutual information be-
tween words and n-gram and backward n-gram
language model for word-level and sentence-level
CE. They also explore linguistic features using in-
formation from syntactic category, tense, gender
and so on. Unfortunately, such linguistic features
neither improve performance at the word level nor
at the sentence level.
Our work departs from the previous work in two
major respects.
? We exploit various linguistic features and
show that they are able to produce larger im-
provements than widely used system-related
features such as word posterior probabilities.
This is in contrast to some previous work. Yet
another advantage of using linguistic features
is that they are system-independent, which
therefore can be used across different sys-
tems.
? We treat error detection as a complete bi-
nary classification problem. Hence we di-
605
rectly output prediction results from our dis-
criminatively trained classifier without opti-
mizing a classification threshold on a distinct
development set beforehand.1 Most previous
approaches make decisions based on a pre-
tuned classification threshold ? as follows
class =
{
correct, ?(correct, ?) > ?
incorrect, otherwise
where ? is a classifier or a confidence mea-
sure and ? is the parameter set of ?. The per-
formance of these approaches is strongly de-
pendent on the classification threshold.
3 Features
We explore two sets of linguistic features for each
word in a machine generated translation hypoth-
esis. The first set of linguistic features are sim-
ple lexical features. The second set of linguistic
features are syntactic features which are extracted
from link grammar parse. To compare with the
previously widely used features, we also investi-
gate features based on word posterior probabili-
ties.
3.1 Lexical Features
We use the following lexical features.
? wd: word itself
? pos: part-of-speech tag from a tagger trained
on WSJ corpus. 2
For each word, we look at previous n
words/tags and next n words/tags. They together
form a word/tag sequence pattern. The basic idea
of using these features is that words in rare pat-
terns are more likely to be incorrect than words
in frequently occurring patterns. To some extent,
these two features have similar function to a tar-
get language model or pos-based target language
model.
3.2 Syntactic Features
High-level linguistic knowledge such as syntac-
tic information about a word is a very natural and
promising indicator to decide whether this word is
syntactically correct or not. Words occurring in an
1This does not mean we do not need a development set.
We do validate our feature selection and other experimental
settings on the development set.
2Available via http://www-tsujii.is.s.u-tokyo.ac.jp/
?tsuruoka/postagger/
ungrammatical part of a target sentence are prone
to be incorrect. The challenge of using syntac-
tic knowledge for error detection is that machine-
generated hypotheses are rarely fully grammati-
cal. They are mixed with grammatical and un-
grammatical parts, which hence are not friendly
to traditional parsers trained on grammatical sen-
tences because ungrammatical parts of a machine-
generated sentence could lead to a parsing failure.
To overcome this challenge, we select the Link
Grammar (LG) parser 3 as our syntactic parser to
generate syntactic features. The LG parser pro-
duces a set of labeled links which connect pairs of
words with a link grammar (Sleator and Temper-
ley, 1993).
The main reason why we choose the LG parser
is that it provides a robustness feature: null-link
scheme. The null-link scheme allows the parser to
parse a sentence even when the parser can not fully
interpret the entire sentence (e.g. including un-
grammatical parts). When the parser fail to parse
the entire sentence, it ignores one word each time
until it finds linkages for remaining words. After
parsing, those ignored words are not connected to
any other words. We call them null-linked words.
Our hypothesis is that null-linked words are
prone to be syntactically incorrect. We hence
straightforwardly define a syntactic feature for a
word w according to its links as follows
link(w) =
{
yes, w has links
no, otherwise
In Figure 1 we show an example of a generated
translation hypothesis with its link parse. Here
links are denoted with dotted lines which are an-
notated with link types (e.g., Jp, Op). Bracketed
words, namely ?,? and ?including?, are null-linked
words.
3.3 Word Posterior Probability Features
Our word posterior probability is calculated onN -
best list, which is first proposed by (Ueffing et al,
2003) and widely used in (Blatz et al, 2003; Ueff-
ing and Ney, 2007; Sanchis et al, 2007).
Given a source sentence f , let {en}N1 be theN -
best list generated by an SMT system, and let ein is
the i-th word in en. The major work of calculating
word posterior probabilities is to find the Leven-
shtein alignment (Levenshtein, 1966) between the
best hypothesis e1 and its competing hypothesis
3Available at http://www.link.cs.cmu.edu/link/
606
Figure 1: An example of Link Grammar parsing results.
en in the N -best list {en}N1 . We denote the align-
ment between them as ?(e1, en). The word in the
hypothesis en which ei1 is Levenshtein aligned to
is denoted as ?i(e1, en).
The word posterior probability of ei1 is then cal-
culated by summing up the probabilities over all
hypotheses containing ei1 in a position which is
Levenshtein aligned to ei1.
pwpp(ei1) =
?
en: ?i(e1,en)=ei1
p(en)
?N
1 p(en)
To use the word posterior probability in our er-
ror detection model, we need to make it discrete.
We introduce a feature for a word w based on its
word posterior probability as follows
dwpp(w) = ??log(pwpp(w))/df?
where df is the discrete factor which can be set to
1, 0.1, 0.01 and so on. ?? ?? is a rounding oper-
ator which takes the largest integer that does not
exceed ?log(pwpp(w))/df . We optimize the dis-
crete factor on our development set and find the
optimal value is 1. Therefore a feature ?dwpp =
2? represents that the logarithm of the word poste-
rior probability is between -3 and -2;
4 Error Detection with a Maximum
Entropy Model
As mentioned before, we consider error detec-
tion as a binary classification task. To formal-
ize this task, we use a feature vector ? to rep-
resent a word w in question, and a binary vari-
able c to indicate whether this word is correct or
not. In the feature vector, we look at 2 words
before and 2 words after the current word posi-
tion (w?2, w?1, w, w1, w2). We collect features
{wd, pos, link, dwpp} for each word among these
words and combine them into the feature vector
? for w. As such, we want the feature vector to
capture the contextual environment, e.g., pos se-
quence pattern, syntactic pattern, where the word
w occurs.
For classification, we employ the maximum
entropy model (Berger et al, 1996) to predict
whether a word w is correct or incorrect given its
feature vector ?.
p(c|?) = exp(
?
i ?ifi(c, ?))
?
c? exp(
?
i ?ifi(c?, ?))
where fi is a binary model feature defined on c
and the feature vector ?. ?i is the weight of fi.
Table 1 shows some examples of our binary model
features.
In order to learn the model feature weights ? for
probability estimation, we need a training set of
m samples {?i, ci}m1 . The challenge of collect-
ing training instances is that the correctness of a
word in a generated translation hypothesis is not
intuitively clear (Ueffing and Ney, 2007). We will
describe the method to determine the correctness
of a word in Section 6.1, which is broadly adopted
in previous work.
We tune our model feature weights using an
off-the-shelf MaxEnt toolkit (Zhang, 2004). To
avoid overfitting, we optimize the Gaussian prior
on the development set. During test, if the proba-
bility p(correct|?) is larger than p(incorrect|?)
according the trained MaxEnt model, the word is
labeled as correct otherwise incorrect.
5 SMT System
To obtain machine-generated translation hypothe-
ses for our error detection, we use a state-of-the-art
phrase-based machine translation system MOSES
(Koehn et al, 2003; Koehn et al, 2007). The
translation task is on the official NIST Chinese-
to-English evaluation data. The training data con-
sists of more than 4 million pairs of sentences (in-
cluding 101.93MChinese words and 112.78M En-
glish words) from LDC distributed corpora. Table
2 shows the corpora that we use for the translation
task.
We build a four-gram language model using the
SRILM toolkit (Stolcke, 2002), which is trained
607
Feature Example
wd f(c, ?) =
{
1, ?.w.wd = ?.?, c = correct
0, otherwise
pos f(c, ?) =
{
1, ?.w2.pos = ?NN?, c = incorrect
0, otherwise
link f(c, ?) =
{
1, ?.w.link = no, c = incorrect
0, otherwise
dwpp f(c, ?) =
{
1, ?.w?2.dwpp = 2, c = correct
0, otherwise
Table 1: Examples of model features.
LDC ID Description
LDC2004E12 United Nations
LDC2004T08 Hong Kong News
LDC2005T10 Sinorama Magazine
LDC2003E14 FBIS
LDC2002E18 Xinhua News V1 beta
LDC2005T06 Chinese News Translation
LDC2003E07 Chinese Treebank
LDC2004T07 Multiple Translation Chinese
Table 2: Training corpora for the translation task.
on Xinhua section of the English Gigaword cor-
pus (181.1M words). For minimum error rate tun-
ing (Och, 2003), we use NIST MT-02 as the de-
velopment set for the translation task. In order
to calculate word posterior probabilities, we gen-
erate 10,000 best lists for NIST MT-02/03/05 re-
spectively. The performance, in terms of BLEU
(Papineni et al, 2002) score, is shown in Table 4.
6 Experiments
We conducted our experiments at several levels.
Starting with MaxEnt models with single linguis-
tic feature or word posterior probability based fea-
ture, we incorporated additional features incre-
mentally by combining features together. In do-
ing so, we would like the experimental results not
only to display the effectiveness of linguistic fea-
tures for error detection but also to identify the ad-
ditional contribution of each feature to the task.
6.1 Data Corpus
For the error detection task, we use the best trans-
lation hypotheses of NIST MT-02/05/03 generated
by MOSES as our training, development, and test
corpus respectively. The statistics about these cor-
pora is shown in Table 3. Each translation hypoth-
esis has four reference translations.
Corpus Sentences Words
Training MT-02 878 24,225
Development MT-05 1082 31,321
Test MT-03 919 25,619
Table 3: Corpus statistics (number of sentences
and words) for the error detection task.
To obtain the linkage information, we run the
LG parser on all translation hypotheses. We find
that the LG parser can not fully parse 560 sen-
tences (63.8%) in the training set (MT-02), 731
sentences (67.6%) in the development set (MT-05)
and 660 sentences (71.8%) in the test set (MT-03).
For these sentences, the LG parser will use the the
null-link scheme to generate null-linked words.
To determine the true class of a word in a gen-
erated translation hypothesis, we follow (Blatz et
al., 2003) to use the word error rate (WER). We
tag a word as correct if it is aligned to itself in
the Levenshtein alignment between the hypothesis
and the nearest reference translation that has min-
imum edit distance to the hypothesis among four
reference translations. Figure 2 shows the Lev-
enshtein alignment between a machine-generated
hypothesis and its nearest reference translation.
The ?Class? row shows the label of each word ac-
cording to the alignment, where ?c? and ?i? repre-
sent correct and incorrect respectively.
There are several other metrics to tag single
words in a translation hypothesis as correct or in-
correct, such as PER where a word is tagged as
correct if it occurs in one of reference translations
with the same number of occurrences, Setwhich is
a less strict variant of PER, ignoring the number of
occurrences per word. In Figure 2, the two words
?last year? in the hypothesis will be tagged as cor-
rect if we use the PER or Set metric since they do
not consider the occurring positions of words. Our
608
China Unicom net profit rose up 38% last year
China Unicom net profit rose up 38%last yearHypothesis
Reference
China/c Unicom/c net/c profit/c rose/c up/c 38%/clast/i year/iClass
Figure 2: Tagging a word as correct/incorrect according to the Levenshtein alignment.
Corpus BLEU (%) RCW (%)
MT-02 33.24 47.76
MT-05 32.03 47.85
MT-03 32.86 47.57
Table 4: Case-insensitive BLEU score and ratio
of correct words (RCW) on the training, develop-
ment and test corpus.
metric corresponds to the m-WER used in (Ueff-
ing and Ney, 2007), which is stricter than PER and
Set. It is also stricter than normal WER metric
which compares each hypothesis to all references,
rather than the nearest reference.
Table 4 shows the case-insensitive BLEU score
and the percentage of words that are labeled as cor-
rect according to the method described above on
the training, development and test corpus.
6.2 Evaluation Metrics
To evaluate the overall performance of the error
detection, we use the commonly used metric, clas-
sification error rate (CER) to evaluate our classi-
fiers. CER is defined as the percentage of words
that are wrongly tagged as follows
CER = # of wrongly tagged words
Total # of words
The baseline CER is determined by assuming
the most frequent class for all words. Since the ra-
tio of correct words in both the development and
test set is lower than 50%, the most frequent class
is ?incorrect?. Hence the baseline CER in our ex-
periments is equal to the ratio of correct words as
these words are wrongly tagged as incorrect.
We also use precision and recall on errors to
evaluate the performance of error detection. Let
ng be the number of words of which the true class
is incorrect, nt be the number of words which are
tagged as incorrect by classifiers, and nm be the
number of words tagged as incorrect that are in-
deed translation errors. The precision Pre is the
percentage of words correctly tagged as transla-
tion errors.
Pre = nm
nt
The recall Rec is the proportion of actual transla-
tion errors that are found by classifiers.
Rec = nm
ng
F measure, the trade-off between precision and re-
call, is also used.
F = 2 ? Pre?Rec
Pre+Rec
6.3 Experimental Results
Table 5 shows the performance of our experiments
on the error detection task. To compare with pre-
vious work using word posterior probabilities for
confidence estimation, we carried out experiments
using wpp estimated from N -best lists with the
classification threshold ? , which was optimized on
our development set to minimize CER. A relative
improvement of 9.27% is achieved over the base-
line CER, which reconfirms the effectiveness of
word posterior probabilities for error detection.
We conducted three groups of experiments us-
ing the MaxEnt based error detection model with
various feature combinations.
? The first group of experiments uses single
feature, such as dwpp, pos. We find the
most effective feature is pos, which achieves
a 16.12% relative improvement over the base-
line CER and 7.55% relative improvement
over the CER of word posterior probabil-
ity thresholding. Using discrete word pos-
terior probabilities as features in the Max-
Ent based error detection model is marginally
better than word posterior probability thresh-
olding in terms of CER, but obtains a 13.79%
relative improvement in F measure. The syn-
tactic feature link also improves the error de-
tection in terms of CER and particularly re-
call.
609
Combination Features CER (%) Pre (%) Rec (%) F (%)
Baseline - 47.57 - - -
Thresholding wpp - 43.16 58.98 58.07 58.52
MaxEnt (dwpp) 44 43.07 56.12 81.86 66.59
MaxEnt (wd) 19,164 41.57 58.25 73.11 64.84
MaxEnt (pos) 199 39.90 58.88 79.23 67.55
MaxEnt (link) 19 44.31 54.72 89.72 67.98
MaxEnt (wd+ pos) 19,363 39.43 59.36 78.60 67.64
MaxEnt (wd+ pos+ link) 19,382 39.79 58.74 80.97 68.08
MaxEnt (dwpp+ wd) 19,208 41.04 57.18 83.75 67.96
MaxEnt (dwpp+ wd+ pos) 19,407 38.88 59.87 78.38 67.88
MaxEnt (dwpp+ wd+ pos+ link) 19,426 38.76 59.89 78.94 68.10
Table 5: Performance of the error detection task.
? The second group of experiments concerns
with the combination of linguistic features
without word posterior probability feature.
The combination of lexical features improves
both CER and precision over single lexical
feature (wd, pos). The addition of syntactic
feature link marginally undermines CER but
improves recall by a lot.
? The last group of experiments concerns about
the additional contribution of linguistic fea-
tures to error detection with word posterior
probability. We added linguistic features in-
crementally into the feature pool. The best
performance was achieved by using all fea-
tures, which has a relative of improvement of
18.52% over the baseline CER.
The first two groups of experiments show that
linguistic features, individually (except for link)
or by combination, are able to produce much better
performance than word posterior probability fea-
tures in both CER and F measure. The best com-
bination of linguistic features achieves a relative
improvement of 8.64% and 15.58% in CER and
F measure respectively over word posterior prob-
ability thresholding.
The Table 5 also reveals how linguistic fea-
tures improve error detection. The lexical features
(pos, wd) improve precision when they are used.
This suggests that lexical features can help the sys-
tem find errors more accurately. Syntactic features
(link), on the other hand, improve recall whenever
they are used, which indicates that they can help
the system find more errors.
We also show the number of features in each
combination in Table 5. Except for the wd feature,
0 200 400 600 800 1000
38.6
38.8
39.0
39.2
39.4
39.6
39.8
40.0
40.2
40.4
40.6
 

 
CE
R 
(%
)
Number of Training Sentences
Figure 3: CER vs. the number of training sen-
tences.
the pos has the largest number of features, 199,
which is a small set of features. This suggests that
our error detection model can be learned from a
rather small training set.
Figure 3 shows CERs for the feature combina-
tion MaxEnt (dwpp + wd + pos + link) when
the number of training sentences is enlarged incre-
mentally. CERs drop significantly when the num-
ber of training sentences is increased from 100 to
500. After 500 sentences are used, CERs change
marginally and tend to converge.
7 Conclusions and Future Work
In this paper, we have presented a maximum en-
tropy based approach to automatically detect er-
rors in translation hypotheses generated by SMT
610
systems. We incorporate two sets of linguistic
features together with word posterior probability
based features into error detection.
Our experiments validate that linguistic features
are very useful for error detection: 1) they by
themselves achieve a higher improvement in terms
of both CER and F measure than word posterior
probability features; 2) the performance is further
improved when they are combined with word pos-
terior probability features.
The extracted linguistic features are quite com-
pact, which can be learned from a small train-
ing set. Furthermore, The learned linguistic fea-
tures are system-independent. Therefore our ap-
proach can be used for other machine translation
systems, such as rule-based or example-based sys-
tem, which generally do not produce N -best lists.
Future work in this direction involve detect-
ing particular error types such as incorrect po-
sitions, inappropriate/unnecessary words (Elliott,
2006) and automatically correcting errors.
References
Yasuhiro Akibay, Eiichiro Sumitay, Hiromi Nakaiway,
Seiichi Yamamotoy, and Hiroshi G. Okunoz. 2004.
Using a Mixture of N-best Lists from Multiple MT
Systems in Rank-sum-based Confidence Measure
for MT Outputs. In Proceedings of COLING.
Adam L. Berger, Stephen A. Della Pietra andVincent
J. Della Pietra. 1996. A Maximum Entropy Ap-
proach to Natural Language Processing. Computa-
tional Linguistics, 22(1): 39-71.
John Blatz, Erin Fitzgerald, George Foster, Simona
Gandrabur, Cyril Goutte, Alex Kulesza, Alberto
Sanchis, Nicola Ueffing. 2003. Confidence estima-
tion for machine translation. final report, jhu/clsp
summer workshop.
Debra Elliott. 2006 Corpus-based Machine Transla-
tion Evaluation via Automated Error Detection in
Output Texts. Phd Thesis, University of Leeds.
Simona Gandrabur and George Foster. 2003. Confi-
dence Estimation for Translation Prediction. In Pro-
ceedings of HLT-NAACL.
S. Jayaraman and A. Lavie. 2005. Multi-engine Ma-
chine Translation Guided by Explicit Word Match-
ing. In Proceedings of EAMT.
Philipp Koehn, Franz Joseph Och, and Daniel Marcu.
2003. Statistical Phrase-based Translation. In Pro-
ceedings of HLT-NAACL.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran,
Richard Zens, Chris Dyer, Ondrej Bojar, Alexandra
Constrantin, and Evan Herbst. 2007. Moses: Open
source toolkit for statistical machine translation. In
Proceedings of ACL, Demonstration Session.
V. I. Levenshtein. 1966. Binary Codes Capable of Cor-
recting Deletions, Insertions and Reversals. Soviet
Physics Doklady, Feb.
Franz Josef Och. 2003. Minimum Error Rate Training
in Statistical Machine Translation. In Proceedings
of ACL 2003.
Kishore Papineni, Salim Roukos, Todd Ward and Wei-
Jing Zhu. 2002. BLEU: aMethod for Automatically
Evaluation of Machine Translation. In Proceedings
of ACL 2002.
Sylvain Raybaud, Caroline Lavecchia, David Langlois,
Kamel Sma??li. 2009. Word- and Sentence-level
Confidence Measures for Machine Translation. In
Proceedings of EAMT 2009.
Alberto Sanchis, Alfons Juan and Enrique Vidal. 2007.
Estimation of Confidence Measures for Machine
Translation. In Procedings of Machine Translation
Summit XI.
Daniel Sleator and Davy Temperley. 1993. Parsing En-
glish with a Link Grammar. In Proceedings of Third
International Workshop on Parsing Technologies.
Yongmei Shi and Lina Zhou. 2005. Error Detec-
tion Using Linguistic Features. In Proceedings of
HLT/EMNLP 2005.
Andreas Stolcke. 2002. SRILM - an Extensible Lan-
guage Modeling Toolkit. In Proceedings of Interna-
tional Conference on Spoken Language Processing,
volume 2, pages 901-904.
Nicola Ueffing, Klaus Macherey, and Hermann Ney.
2003. Confidence Measures for Statistical Machine
Translation. In Proceedings. of MT Summit IX.
Nicola Ueffing and Hermann Ney. 2007. Word-
Level Confidence Estimation for Machine Transla-
tion. Computational Linguistics, 33(1):9-40.
Richard Zens and Hermann Ney. 2006. N-gram Pos-
terior Probabilities for Statistical Machine Transla-
tion. In HLT/NAACL: Proceedings of the Workshop
on Statistical Machine Translation.
Le Zhang. 2004. Maximum Entropy Model-
ing Tooklkit for Python and C++. Available at
http://homepages.inf.ed.ac.uk/s0450736
/maxent toolkit.html.
611
