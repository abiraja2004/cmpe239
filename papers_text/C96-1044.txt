Extended Dependency Structures and their Formal Interpretation 
Marc Dymetman Max Coppcrman 
Rank Xerox  Research Centre 
6, there in  de Maupertu is ,  Mey lan  38240, France 
{ dyme tman, copperman} @xerox. fr 
Abstract 
We describe two "semantically-oriented" 
dependency-structure formalisms, tJ-forms 
and S-forms. U-forms have heen previously 
used in nmchine translation as interlingual 
representations, hut without being provided 
with a formal interpretation. S-forms, which 
we introduce in this paper, are a scoped vet 
sion of U-fnrms, and we define a composi- 
tional semantics mechanism for them. Two 
types of semantic composition are basic: 
complement incorlgoration and modifier in- 
corporation. Binding of variables is done at 
tire time of incorporation, permitting tnttch 
\[lexibility in composition order and a simple 
account of the semantic effects of permuting 
several incorporations. 
1 INTRODUCTION 
U-fi)rms (Unscoped ependency form) arc a represen- 
tation formalism which has been used (under a differ- 
ent name) as tire basis for the intermediary language in 
the machine mmshttion system CRITFER (lsahelle et 
at., 1988; l)ymetman, 1992; Isabelle, 1995). U-forms 
account for two central aspects of linguistic structure: 
predicate-argument relations and headedness (comple- 
ments vs. modifiers), and so form a middle ground be- 
tween a "semantic" and a "syntactic" representation. 
This, combined with their formal simplicity, accotmts 
for much of the popularity of U-forms or related for- 
malisms - -  such as the semantic and deep syntactic 
representations used in Mel'cuk's Meaning-Text The- 
ory (Mel'+nk, 1981) - -  in applications uch as \[nit- 
chine translation and text generation. 
Although t J-fotn~s are strongly 
"meaning-oriented" their interpretation is never made 
explicit but is left to the computational linguist's intu- 
ition. This has two consequences: 
? Operations performed on U-forms and related 
formalisms cannot he controlled for semantic va- 
lidity. So, for instance, it is comnlon practice to 
deline graph rewriting rules on these representa- 
tions which are believed to produce semantically 
equivalent expressions. Without he check of for+ 
real interpretation, these rtdes may work in some 
cases, hut produce wrong results in other cases. 
So for instance, a rule rewriting (the representa- 
tion of) "John's salary is $25000 higher this year 
than last year" into "John's salary was $25000 
lower last year than this year" would seem in- 
tuitively valid until one considered the case of 
"John's salary is 50% higher this year than last 
year", where it does not work any rnore. 
? U-forms are not directly adapted to applications 
putting emphasis on denotational semantics and 
formal reasoning, like for instance some lmtural 
hmguage generation systems in well-formalized 
domains (l-htang and Fiedler, 1995; Ranta, 1995; 
I+evine, 1990), see also (Alshawi, 1992). 
A basic obstacle to providing aformal interpretation 
for U-forms is the fact that these representations leave 
the relative scopes of dependents implicit. The S-form 
representation (Scoped dependency form), which we 
introduce here, is an extension of U-form notation 
which makes scope explicit, by allowing dependents 
to be ordered relative to one another. Dependents 
(complements or modifiers) c~m move fi'eely relative 
to one another in the S-form structure, under certain 
binding-site constraints+ 
We then go on to provide it compositional interpre- 
tation mechanism for S-forms. Free vmiahles (gener- 
alizations of the argt, arg._,, atrg:+ annotations of stan- 
dard dependency formalisms) are used to connect an 
argutnent to its binding-site inside a predicate. Bind- 
ing of variables is done at tire time of incorporation, 
permitting much llexibility in composition order and 
at simple account of the semantic effects of permuting 
several incorporations. This liberal use of free wlri- 
ables is contrasted to the approach of Montague gram- 
mar, where the requirement that semantic expressions 
entering into at composition m'e closed (do not contain 
255 
free vmiables) leads to a certain rigidity in the order of 
composition. 
Two kinds of senmntic omposition are basic: coin- 
plement incorporation, whine the complement fills a 
semantic role inside the head, and modifier incorpo- 
ration, where the head fills a semantic role inside 
the modifier. The mechanism of actually deriving 
the semantic translation of the composition fi+oln tile 
semantic translations of its two components i han- 
dled through a list of type-sensitive composition rules, 
which determine the action to be taken on the basis 
of the component types. The flexibility of the ap- 
proach is ilhlstr;.lted on an example involving proper 
names, quantitied noun phrases, adverbials and rela- 
tive clauses. 
2 U-FORMS 
Formally. U-ferms are nnordered labelled n-ary trees 
such as tile one shown in Fig. l, corresponding to tile 
sentence: (S l) "John does not like every woman hated 
by Peter". 
like //~ "\~.<s 
/ /  2 
jolTn woman m>t 
+ le t / / "k  -'~ / 
et'et+v hate  
peter 
lVigttre 1' A U-form. 
The edge htbels me members of the set {det, 1,2, 3, 
.... - l , -2 .  -3 .... }, alld correspond either to determin- 
ers (label "det') or to argument positions relative to a 
predicate node (other labels). 
The U-form of Fig. 1 expresses three predicate- 
argument relations among the nodes: 
like not hate 
john ll.'oma#l like peler womalg 
Figure 2: Predicate-argument relations in a U-form. 
In order to extract he predicate-argument relations 
encoded into tile U-form, one needs to apply the fol- 
lowing "'rule". Let's notate (A,L,B) an edge of the 
tree, where A is the upper vertex, B tile lower ver- 
tex, and L the edge label. With each node A in tile 
tree, one associates its set of predication edges, that 
is the set PAl of edges of the form (A,+i.X) or (X.- 
i,A). One then considers tile predication tree T i made 
by forming the collection of edges (A,LX) where I, 
is positive and either (A.L,X)  or (X.inverse(L),A) is 
a predication edge of A. Each predication tree de- 
notes a predicate-argtnnent rehition among IJ,+fornl 
nodes. So for illstance, the tree 'l'l~;u<~ is lt/inled by 
forming tile edges (hate, l,peter) and (hate,2.woman), 
and this corresponds to the predicate-argunlent rehi- 
tion tlate(peter.woman). 
WELL-FORMEDNESS CONI i lT IONS (iN U- 
FORMS In order to be well-formed, a U-iorm Uf: 
has to respect ile following condition. For ;.lily node 
A of L!F. the predication tree T i must be such that: 
1. \[No hoh, s comliti(m\] If (A.i.B) is an edge of 1" i. 
then for any number j between I and i, T.I nlttst 
contain a node of form (A,i,C)+ 
2. \[No rdpe'tilioll comlimml No two edges of T.t can 
have tile salne label i. 
MORE ON U-FORMS Negative labels are a device 
which permits to reconcile the notalien of predicate- 
argnnlenl structnre with the notation of syntactic de- 
pondoilcy, So, in the i..\]-fornl considered above, while 
"semantically" tile 'wellqan' node is an ;.irglnl\]oni of 
tile "hate" node, "syntactically" tile hate'  node is a de- 
pendent of tile 'woman' node. Cases such as this one. 
where there is a conflict between predicate-argument 
directionality and dependency directionality are no 
tated ill the U form throngh negative labels, and cor- 
respond tO #llodifie#',','. Cases where tile directionality is
parallel correspond to complement.s. 
When used as interlingual representations in ma- 
chine translation systems, U-forms have several ad- 
vantages. The first is ttmt they neutralize certain de- 
tails of syntactic structure that de not carry easily be- 
tween languages. For instance. French and English ex- 
piess negation in syntactically different ways: "Rachel 
does net like Claude" vs. ?'Rachel n'aime pas Claude": 
this difference is neutralized in the U-fornl representa- 
tion, for both negations are expressed through a single 
negation predicate in the U-feral. 
A second advantage is that they represent a good 
compromise between paraphrasing potential and se- 
mantic precision. So. for instance, in tile CRITTEI,I 
system, the three sentences: 
John does not like every woman that Peter hates 
John does not like every woman hated by Peter 
Every woman whom Peter hates is not liked by John 
would be assigned the U-form of Fig. 1. On the other 
hand, the sentence: 
256 
Peter hates every woman that John does not like 
would be assigned tile t!-form or' f:i~,. 3, which is 
different from the previous U-form, although tile 
predicate-argument rehitions are exactly tile sanie in 
hoth cases. 
\]Idt{' 
1/ /  "~ 2 
/ \, 
/)('tg'r WOllldll 
-<Q d/  \~" 
every like ,/\< 
.jolm m~t 
Figure 3: A dilf0renl t J-form 
()he can take advantage of such paral)hrasing poten- 
tial in cerlain cases of synlaclJc divergence belween 
languages, l:or instance, French does not have a syn 
tactic equivalent o the dative-lnoven/etlt + passive 
configuration o1: 
Rachel was given a book by Claude 
so that a direct syntactic translation is not possible. 
However, at tile level of U-form, this sentence is equiv- 
alent to the French sentence: 
Claude a donne un livre ~t Rachel 
and this equivalence can he exploited it) provide a 
translation of the first sentence. 
One serious problenl with 1.\]. \[ornis, however, is tilat 
they do not have unainbiguous readhigs in cases where 
the rehliive scopes of constituents can result in clifl'er- 
ent semantic ii~terpretations. So, in the case of sen 
fence (S l), tile two readings: "it is not the case thai 
John likes every woman hated by Peter", and 'Lh)tl.n 
dislikes every woman thai Peter hates" are not distin- 
guished by tile t l-l:oi+nl Of l"ig+ 1, 
3 S-FORMS 
INTI, I() I)UCIN(; SC() I 'E  Lefs consider the trec 
represented in Iqg. 4. 
The only differeiice hetween this tree aml the l,J- 
form of l:ig. l is thai the nodes of our new tree are 
considered ordered whereas they were considered tin- 
ordered in the I!-lorm+ The convention is now that 
(tepetlttent sister nodes are interpreted :is having ttil'- 
l\]2retlt scopes, with llarrower scope correspondillg to a 
position iilore It) tile right. 
The tree of l:'ig. 4 can he glossed in the following 
way: 
like 
/ / . - J  ! 2 
t 
.jolm ~u~t W()lll(lfl 
(q'dl'V \]lg.ll(" 
lT,#H't" 
I:igure 4: Inhoducing scope hy ordering the nodes. 
John, it is not the case that he likes every woman that Pe+ 
ter hates 
I f we consider tile six l)mmulalions of lhe nodes un- 
der like. we can produce six differenl scopings. Be 
cause John teleis to an individual, not a quantified NP. 
these six pernmtations really corrcsl)ond to only the 
two interl)relaiiens given ahove. The tree of Fig. 4 
corresponds to the lirst of Ihese interpretations, which 
is the preferred interpretation Ik)l sentence (S I). 
Our discussion of scope being represented by node 
order has been infornml so far. In order to nlake it 
\['Oi'lllal, we  need to encode  our  representat ion  into a 
binary-tree fornmt ell which a compositioiml senlan 
tics can he delined. To tie that. in a lirst step we rephtce 
the at'gunlent nunibers of l:ig. 4 hy exl)lici! argument 
haines; i l l  a seCol ld  slep we encode the resulting or 
dered mary free inh)a himuy forumt which makes ex- 
plicit the order in which dependents are incorlmrated 
inlo their head. 
S-I"ORMS Consider tile mary tree of Fig. 4. For any 
node A in this tree, take the set of predication edges 
associated with A, that is the set of edges (a ,+i ,B , )  
and (Bi, i,A). By renaming each such node A into 
A(XI .... X,+). where X I ..... X, are hesh identiliers, and 
by renaming each such htbel +i (resp. +i) into +X,: 
(resp. -X,:), one obtains a flew tree where argunmnl 
numbers have been replaced by argument haines. \[:or 
instance the previous representation now becomes tile 
tree of l"ig. 5. 
This representation is called a scopeU depemh'm3' 
,lotto, or Sqbrm. 
B INARY TREE FNCODING OF S-FORMS:  B- 
FORMS In order to encode tile ordered n-ary tree 
into a binary tree, we need to apply recursively the 
transfotnmtiou ilhlstrated in Fig. 6, which consists in 
forming a "head-line", projecting in a north-west di- 
rection from tile head 11, and in "attaching" to this line 
"dependent-lines" D~, D2 ..... 1),,, with l-)l tile right- 
257 
like(ll,12) 
john not(nl ) woman /\+ 
evetlv hate(h l,h2) 
I +hl 
peter 
Figure 5: An S-form. 
most dependent (narrowest scope) and D~, the leftmost 
dependent (widest scope) in the original tree. 
;\[ 
l,n I+ ~\z \ ,  I,I , /  \ "\, 
l)n D2 151 
\] 511 
/ / l \ ,N\ 
\] +I\]/i "1 "\'N\ 
/ /  ,, 
/ /~'\\  
1,2// / ) \ ,  
/ /  I l , /  . . . .  ,, 
D2 1 "\ 
D1 
Figure 6: The translbrmation between S-forms and B- 
forms. 
Applying this encoding to our example, we obtain 
the binary tree of Fig. 7, which is called a B-form. 
The B-form makes explicit the order of incorpora- 
tion of dependents into the head-line. By permuting 
several dependent-lines along their head-line, this in- 
corporation order is changed and gives rise to different 
scopings. 
S-forms and B-forms are completely equivalent 
representations. Cle~ly, the encoding, called the S- 
form/B:fi~rm encoding, which has just been defined is 
reversible. The S-form is more compact ,and makes the 
dependency relations more conspicuous, whereas the 
B-form makes the compositionality more explicit. 
WELL-FORMEDNESS CONDIT IONS ON B- 
FORMS AND S-FORMS Stm'ting fromthe U-form 
and enriching it, we have informally introduced the 
notions of S-form and B-form. We now define them 
formally. 
We start by giving a rect, rsive definition of IBFs (in- 
complete B-forms), that is, B-forms which may con- 
tain unresolved flee variables. We use the notation 
((D,Label),H) the labelled binary tree obtained by tak- 
ing H as the right subtree, D as the left subtree, and 
by labelling the left edge with Label. We ,also use the 
notation fv(IBF) for the set of the free variables in IBF. 
DEFINITION OF INCOMPLETE B-FORMS 
not(hi) + l f .~  ~N,. 
d~ t
ev man like(ll, 12) 
peter hate(h l,h2) 
Figure 7: A B-form. 
1. A node N of the form Pmd(xl,..,xn) is an IBF 
with the set of free variables fv(N) = { x I ,..,xn }; 
2. If D and H am IBFs, fv(D) and fv(H) ale disjoint, 
and x ~ fv(H) then H'=((D,+x),H) is an IBF with 
fv(ll ') = fv(D) U fv(H) \ {x}; 
3. If D and H are 1BFs, fv(D) and fv(H) ,are disjoint, 
and x C fv(D) then H'=((D,-x),H) is an IBF with 
fv(H') = fv(D) U fv(H) \ {x}; 
4. If D and H are IBFs, and fv(D) and D(H) are dis- 
joint, then H'=((D,det),H) is an 1BF with fv(H') 
= fv(D) U fv(H). 
DEFINITION OF B-FORMS A B-form is an IBF 
with an empty set of free variables. 
The notion of S-form cart now be delined through 
the nse of the S-form/B-form encoding. 
DEFINITION OF S-FORMS A S-form is an o f  
demd labelled n-ary tree which can be obtained from a 
B-form through the inverse application of the S-form/B- 
form encoding. 
It can be easily verified that the representation of
Fig. 7 is indeed a B-form, and, consequently, the rep- 
resentation of Fig. 5 is a valid S-form. More generally, 
it can be easily verified that enriching a U-form by 
ordering its nodes, and then replacing argument vari- 
ables by argument names always results in a valid S- 
form) 
tThe converse is not true: not all S-forms can be ob- 
tained in this way from a U-form. For instance, there exists a 
S-fonn corresponding to the prefelTed reading for "Fido vis- 
ited most rashcans on every street", which has "every street" 
258  
4 THE INTERPRETATION PROCESS 
We now describe the interpretation process on B-fl)rms. 
lnlerpretation proceeds by propagating semantic trans- 
lations and their types bottom-up. 
The first step consists in typing the leaves of the 
tree, while keeping track of the types of fl'ee variables, 
as in Fig. 8. 
+/(  / \,, 
/ 5", / / ~ \ \  
john." e '+//"~ "" ",,, ? \ 
. .  t i l l : t}  / /  \ \  
ttot(*t 1): t / 
/ "  
/<, 
det/" \ ,  
/ \ 
/ h2 / \ \ ,  
el'crY.' ?i \] +l) -+(u-~t )~t  / "\ 
" \  
./ \\, 
+h;/" ' , , . ,  \\, 
/ ""  ",,, {hhe, h2:c} 
peter: e haleChl,h2).' t
" \ \ ,  
"-., 
" \ ,  
\ 
}voDt(in: U ~1 
"\,,, {tlm, 12:e} 
like(ll,121: !
Figure 8: Typing the leaves. The flee wu'iables and 
their types are indicated in brackets. 
The types given to the leaves of the tree are the usual 
functional types formed starting with e (entities) and t 
(truth values). In the case where the leaf entity cot> 
tains flee variable arguments, the types of these free 
variables are indicated, and the type of the leaf takes 
into account he fact that these free variables have al- 
ready been included in the functioned form of the leaf. 
Thus hate(h l,h2), which can be glossed as: "hi hates 
h2", is given type t, while hl and h2 are constrained to 
be free variables of type e. 
VARIABLE-BINDING RULES According to the 
well-formedness conditions tot B-forms, a comple- 
ment incorporation ((D,+x),It) is only possible when 
H contains x among its fi:ee variables; the "syntac- 
tic dependent" D is seen as semantically "filling" the 
place that x occttpies in the +'syntactic head" H. In the 
same way, a modifier incorporation ((D,-x),H) is only 
possible when D contains x among its fiee wuiables; 
outscoping "most trashcans", and which is not obtained from 
a U-form in this simple way. However, thet+e exists a map- 
ping fiom S-forms to U-h>rms, the scope-fi)rgetting map- 
ping, which permits to deiine equiwtlence chtsses among S- 
torms "sharing" the same U-form. This relation between S- 
R~rms and Uqbrms can be used to give a (not>deterministic) 
lbrmal interpretation to U-forms, by considering the inter- 
pretations of the various S-forms associated with it (see the 
technical report eolnpanion to this paper.) 
in this case the "syntactic" head I I is seen as seman- 
tically "filling" the place that x occupies in the "syn-- 
tactic dependent" D. (This difference corresponds to 
the opposition which is sometimes made between syn- 
tactic and semantic heads and dependents: comple- 
ments are dependents both syntactically and semanti- 
cally, while modiliers are syntactically dependents but 
semantically heads.) 
In order to make formal sense of the informal no- 
tion "filling the place of x in A.,," (where the notation 
A,: means that A contains the free variable x), we in- 
troduce the variable-binding rules of Fig. 9. 
cotnllh, ntenl tntldilict dot c t L\]IiI/CI 
i\[iC~)l i)Ol \[it{t,ll illCt )t pol \[t\[iOll { lit'o\[ pOl ~It iOll 
/ 7 \ 
D' \ [ \ [ '  I)', I\[' I)' 1\[' 
dot / / \ ] k  
l)' .\x.l \[i+ Ax,I)'~ H' IY H' 
Figure 9: Variable-binding rules. D' and tl' con'e- 
spond to the senmntic translation of the subtrees rooted 
in 1)and 11 respectively. 
These rules tell t,s how to "get rid" of the free vail- 
able being bound during complement or tnodifier in- 
corporation, amely by forming the abstraction ,Xx.A,: 
before actually performing the semantic omposition 
between tile dependent and tile head. For complete- 
ness, detemainer incorporation, which does not inw)lve 
vmiable binding, is given along with complement and 
rnodifier incorporation. 
Two things should be noted about this way of "de- 
laying" variable-binding until the relevant dependent 
is incorporated: 
? Suppose that we had bound the variables appear- 
ing in the head predicate locally, that is to say, 
that, in the style of Montague grammar (Gamut, 
1991 ), we had written )d21 l.like(l1,12) instead of 
like(11,12), and so forth, in Fig. 7. Then each in- 
corporation of a dependent into the "head-line" 
would have changed the type of the head; thus 
'not' would have had to combine either with a 
head of type e--+e~t, or e--t, or t, depending on 
its scope relative to the other dependents; with 
the scheme adopted here, the type of the head re- 
nmins invariant along the head-line; 
? tinder the same hypothesis, the incorporation of 
the second mgnment first and of the first argt,- 
ment second would have been much simpler than 
259 
the reverse incorporation order, and some mech- 
anism would have had to be found to distinguish 
the two orders. Then permuting the relative order 
of two dependents along the head-line - -  corre- 
? O ' "" spondm~ to dttferent scope poss ib i l i l ies- -  wonld 
have had complex computational conseqttences+ 
In the scheme adopted here, these cases are han- 
dled in a t in i forna way. 
The way free wu'iables are used in our scheme is 
somewhat remi n i scent of the nse ol:.vvitla?'li?' variables 
he,, in Montague glanlliiar. Montague gl+anlmar hits 
the general requirement that only closed lambda-tetms 
(lanibda terms containing only bound variables) are 
composed together. This requirement, however, is di f- 
ficult to reconcile with the flexibility needed for han- 
dling quantilier scope ambiguities. Syntactic variables 
are zt device which pertnit to "'quantify Jim'>" clauses 
at an arbitrary time, hypassing the normal functional 
compc~sition of lambda-terms, which requires a strict 
management of incorporation order. In our scheme. 
by contrast, this secondary mechanism of Montague 
o\]ammar is graduated to a central position. Compo- 
sition is always done between two lambda-terms one 
of which at least contains a free variable which gets 
bound at the time of incorporation. 
TYPE SENSITIVI~ COMPOSIT ION R.UI,ES If 
we apply the vat+table-binding rules to the snbtree 
PH = ((peter,-hl),hate(hi,h2)) of Fig. 8, we lind that 
we mtisl compose the semantic transhttions peter and 
%h 1.hate(h I ,h2) in "con+lplement" (+) mode. The litst 
ftmction is of type e, while the second function is oi  
type e~t  (lor hate(hi,h2) is of type t, and hl of type 
e). 
ltow do we compose two such functions? A first so 
lution, in the spirit of Lambek calculus (Morrill, 1994) 
or of linear logic (Dah'ymple t al.. 1995), would tie 
to define a general computational mechanism which 
would be able, through a systematic discipline of type- 
changing operations, to "adapt" atttomatically to the 
types of the functions undergoing composition. 
Such mechanisms are powerful, but they tend to be 
algorithmically complex, to be non-lncal, and also to 
give rise to spurious antbiguities ( uperficial variations 
in the proof process which do not correspond to di ffer- 
ent semantic readinos) t "  " 
Here, we will prefer to use a less general tnecha+ 
nism, but one which has two advantages. First, it is 
local, simple, and efficient. Second, it is flexible attd 
can tie extended to handle the semantics of sentences 
extracted fiom a real corpus of texts, which it might 
he perilous to constrain too strongly fi'om the starc 
The mechanism is the following. We establish a 
list of acceptable "type-sensitive composition rules", 
which tell us how to compose two flmctions according 
to their types. Such a (provisory) list is given be ow: e 
(e l )  compos?L?on(+,  L :T  >$, R:T ,  L (R) :S )  
(C2) compos iL ion(+,  L :e ,  R :e  >L, R (L ) : t )  
(C3) compos i t ion(deL ,  L:T-+>S, R :% B(R) :$ )  
(C4) comDos ig?on(  , L :T  >S, R :T ,  L IR ) :S )  
(C5) compos i t?on(  , L :e  >t ,  R :e  >t ,  
kx .R(x )  AL(?) :e ->t : )  
The entries in this list have the following fornmt. 
The lflst argtuncnt indicates tile type of composition 
(++' fl)r complement incorporation. "-" for modilier in- 
corl)orath'm. "++let" for deter+miner incorporation): the 
second argument is of the Iklrln Lelt:l+eftTypc, where 
Left is the left translation entering the composition, 
and LeftTypc is its type: similarly, the second argu- 
ment Right:RightType corresponds to the right sub- 
tree entclin ~r~. the composition: linallv+ the third atELl-, 
ment ~ives the resuh l,?,esuh:l,P, esultType of the compo- 
sition, where the notation A(B) has been used to indi 
cate slandard functional application of function A on 
arguntent B. Uppercase letters indicate unifiable vari 
ahles. 
It may be remarked thai if, in these rules, we neglect 
the functions themselves (1+eft, Right, Resnlt) and con. 
centrate on their types (l+eflType, RightType, Result + 
l'ype), then the rules can be seen as itnl)osin,,+ con- 
straints on what can count :is validly typed trees: these 
constrahlts can flow from nlother to daugthers as ,.veil 
as in the opposite direction. Thus. through these rules. 
knowing thai the head-line functions projecting l\]tlnl it 
verbal head must he of type t imposes ome constraints 
on wlmt are the possible types for the det)endents: this 
can be usefttl in partict, lar for constraining the types nf 
semantically ambiguot, s lexical elements. 
If we now go back to our example, we have to con> 
pose in complement mode (+) the function peter, ol 
type e. with the ftmction th  I .hate(h I .h2). of type e- - t .  
Consnlting the list of composition rules, we see that 
the only applicable rnle is (C2). and that the result is 
Ahl.hate(h l,h2) (peter) = hate(peter.h2), of type t. 
Now that we have the semamic translation 
hate(peter, h2) for the subtree Pit, we can compute the 
translation for the suhtree ((PH,-h2).woman). By the 
variable-binding rnle for modiliers, we need lirst to 
form the abstraction Xh2.hate(peter.lt2). of type e~t .  
and compose it in '- '  mode with wonmn, of type e- - t .  
Consnlting the list of composition rules, we find that 
the only applicable rule is (C5). and that the result of 
this application is Ah2.woman(h=)Ahate(l~eter, h=).: 
e It is a matter for further esearch to propose principles 
lk)l" p loduc ing  such Ill\]ON. SotllC t)t" them can be seen as spe- 
cial cases of general type-raising principles, others (such as 
C5) are necessary it one accepts that the type of intersectivc 
adjectives and restrictive relative clauses has to be e -t. 
:~Thc rule (C5) differs from the previous rules in ll~e list 
in that it introduces the logical connective A which does lint 
originate in functional material already present in either of 
the arguments. A possible justilication for the rule. however, 
260 
noHc~ cpvl,\h2 womamh2)/g~ateq~uh'rh2).M21ikclfl~h,,12))) I 
~.tl / / ' /  ('2 ~ , \ ,o f  cvelvfAh2 ~omo lib2 ,\halc(l)eh't h2 AI2 til, c II I2 )). I 
/ . /  \ 
. / /  (:,/~. 
job.: n l /  ~everv(Mt2.woman(h2)Ahal?ll~e&'rh2b\12.hketll.f2)t I ? / 
IIOI(Izl): I / 
+:2/ x,, 
/ /"  \ \  
/<" ),l!cle~I.\h2 woma,fh2)/qtuteqJelel:h2).l'). " le -H t ./7~;\\ \\ 
del / / ' /  ~ \ 
/ \ /il, e l l l l2 )  t 
/ / "  - - / /~\, \ I12. woma ,( It 2 )/\hate@)etet: h2 ). e . I 
t,s,~'t-~: l#  -\[)--(?' .I)- -I \ 
/ /~  hatcq:ete~:h2) t \ \\ 
/ ~,\ M'Olll(Itl. t' I 
/ /  R \  
/~'lt't c ftdle(hl./12J l 
l:igur? 10: B form interpretation, l"or "cvcry', we make use of the gcner;tlized quantil ier notation 
qmm l( n'.st ri cl i ou.SCOl)e ). 
Fhe process of semantic translalion tin>coeds in this 
way bottom Ul-~on the B form. The end restth is; shown 
in Fig. 10. 
Acknowledgments  
Thanks to Alain l ,ecomtc and Frdddrique Segond 
fOl" COITIIllOIIIS ~111(1 discussions, 
References  
Fliyan Alshawi. editor. 
The M1T Press. 
1992. 771e ('o/'u lxmq',agu l:',qin?. 
J. Barwise and R. (7oopcr. 1981. (;ciumdizcd quantiiiclS 
and natural anguage. Lingtdstic,s aml l%ilo,wy)hy..l. 
Mary I)ahymple. John l.amping, l:omamlo ('. N, Percira. 
and Viiay Saraswat. 1995. A deductive ;.lccount of quatnili- 
cation in IA:(;. In Makoto Kanazawa, (?hristopher J. l>iih3n, 
and l lemiette dc Swart, editors, OttaHti/ier,v. lledtu'tion, aud 
("o/dext. Cemcr (or the Study of I,anguagc ',llld hHor\]mttitm. 
Staiflord. Call forrda. 
Marc I)yl/leln~an. 1992. Transfiwmatious de grammaircs 
Iogiqucs et rdvcrsibilitd on Traduction Autoinalique. ThC's? 
is that it allows conferring 11!o "h\]atural" type e .t to an (in- 
tcrsective) adjc~ctivc such as "bhtck", or for a relative mod- 
i l id such as "'hated by peter", and also that there clots not 
seem to exist any good ic~tsOll why type composition sht)tdd 
bc rcstricled Io "'fun?/iorutlly nmlching" types :rely. Scman 
tic typt: coercions ab,,mnd in llatttral allgttagc, as ill tile case 
of "glass elephant", short win", etc., and these require con> 
plcx ColllI}osilioll {}I}erations O11 tile elements collll',illcd. 
d'lkat. \[Jniversitd .Iosqflll:ouricr ((h-cnoblc It. (hcnoble. 
\] :I'~II)CC. 
I., T, 1:. ( hm\]tLI. \[ 99 I. I,o,qic, l,anq, tta,'4c, and Memtin.q,. ~)l 
tune 2: hatct>;ional I,ogic and I.o~ical Graminar. The \[hi  
versify ol Chicago Press. (?hicago. 
Xia,mcmg l Iuang alld Attain l:icdler. 1995. (k:l lcrali l lg mul. 
tilingual proofs. In Richar,.I Kittrcdgc. editor. I, ICA/ WrJrk.. 
LS'/Uy~ (m Multi/in,'4ual 7Ev/(;enuratio,, pages 5,1 63, August. 
Pierre Isabellc. Marc l)ymetman, alld l?11iott Mackh)vilch. 
1988. (?Rlq'TH).: a translation system for agricuhural mar 
ket reports. In lhz~ceedings q/fi le /2th \[llh'rllcttioIIcll ('oll- 
fi, renc~, on ('onqmtatinmd lJng,istic,~, pages 261 266, I{u- 
dapesl, August. 
pierre \[sabelle. 1995. Un mru/eh" linA, nistiq.u calc.la/)le 
pottr la trad.ctirm automatiqtte tfidirectiomlelle, F'h.D. the- 
sis./lnivcrsitd e Momrdal. 
John l,evinc. 1990. Pragina a l"lcxiblc bidircdional dia-- 
logu? system. It\] t'roceeding,s, EiA, hl National ('on fi, renc'e 
rnl Art~/k'ial Intelligence. pages 964 69. 
Igor A. Mel'cuk. 1987. l)epem/encv Sw~ta.v: 77t,:,,:,,rv and 
Practice. State University of New York Press. 
Igor Mel'(;uk. 1981. Mcaninptext nl,,)dcls../our/la/Q/AIt- 
lhrol)olos,3. 10:27 62. 
Glyn V. Morrill. 1994. '/~,/)e LoA, i ca /Grammar :  ('at<q, or ia /  
Logic q/Si~,s.  Kluwer Academic Pulflishers. Dordrecht. 
I lolhmd. 
Aart/c Ranta. 1995. \]ivl)e Theoretical C;rammar. Oxford 
University Press. 
261  
