A Web-based Instructional Platform for Constraint-Based Grammar
Formalisms and Parsing
W. Detmar Meurers
Dept. of Linguistics
Ohio State University
dm@ling.osu.edu
Gerald Penn
Dept. of Computer Science
University of Toronto
gpenn@cs.toronto.edu
Frank Richter
Seminar fu?r Sprachwissenschaft
Universita?t Tu?bingen
fr@sfs.uni-tuebingen.de
Abstract
We propose the creation of a web-based
training framework comprising a set of
topics that revolve around the use of fea-
ture structures as the core data structure
in linguistic theory, its formal foundations,
and its use in syntactic processing.
1 Introduction
Feature structures have been used prolifically at ev-
ery level of linguistic theory, and they form the
mathematical foundation of our most comprehen-
sive and rigorous schools of syntactic theory, includ-
ing Lexical-Functional Grammar and Head-driven
Phrase Structure Grammar. This data structure is
popular because it shares many properties with the
first-order terms of classical logic, and in addi-
tion provides named access to substructures through
paths of features. Often it also includes a type sys-
tem reminiscent of the taxonomical classification
systems that are widely used in knowledge represen-
tation, psychology and the natural sciences.
For teaching a subject like computational linguis-
tics, which draws on a broad curriculum from many
traditional disciplines to audiences with mixed back-
grounds themselves, feature-structure-based theo-
retical and computational linguistics have three im-
portant properties. First, they are a mature disci-
pline, in which a great deal of accomplishments have
been made over the last 20 years, spanning from em-
pirical and conceptual advances in linguistic theory
to its mathematical and computational foundations,
to grammar development and efficient processing.
Second, they are pervasive as an already existing
representation standard for many levels of linguistic
study. Third, they are transparent, reducing com-
plex theories of grammar to a basic collection of
mathematical concepts and algorithms for answer-
ing formal questions about those theories. One can
address the distinction between descriptions of ob-
jects and the objects themselves, the difference be-
tween consistency and truth, and what it means for a
syntactic theory to be not only elegant but correct in
a precise and provable sense.
The purpose of this paper is to discuss how these
three properties can be cast into an instructional set-
ting to arrive at a framework for teaching computa-
tional linguistics that highlights the integrated nature
and precision with which work in this very hetero-
geneous discipline can be presented. In principle,
the framework we are proposing is open-ended, in
the sense that additional modules should be added
by students and other researchers, subject to the de-
sign principles given in Section 3. We are currently
designing three of the core modules for this frame-
work: formal foundations, constraint-based gram-
mar implementation, and parsing.
2 Problems of seminar-style courses
The contents of our core modules are based on a
series of previous seminar-style courses, in partic-
ular on constraint-based grammar implementation,
which also started integrating interactive compo-
nents and web-based materials into traditional face-
to-face teaching. These are described in detail in
Section 5. The traditional seminar-style teaching
method underlying the courses mentioned therein
                     July 2002, pp. 19-26.  Association for Computational Linguistics.
              Natural Language Processing and Computational Linguistics, Philadelphia,
         Proceedings of the Workshop on Effective Tools and Methodologies for Teaching
has a number of inherent problems, however. These
problems become particularly pressing when topics
as diverse as linguistic theory, grammar implemen-
tation, parsing, mathematical foundations of linguis-
tic theory and feature logics are combined in a single
course that is addressed to a mixed audience with
varying backgrounds in computer science, knowl-
edge representation, artificial intelligence and lin-
guistics, in any combination of these subjects.
First, the seminar-style teaching format as used in
those grammar implementation courses presupposes
a fairly coherent audience of linguists with a shared
background of linguistic knowledge. Second, since
computers are only used as a medium to implement
grammars and since the implementation platform is
not optimized for web-based training, it is neces-
sary that there be a relatively low number of stu-
dents per teacher. Third, the theoretical material is
in the form of overheads and research papers, which
are in electronic form but not easily accessible with-
out the accompanying lecture as part of a seminar-
style course. Fourth, the background lectures of the
courses lack the support of the kind of graphical,
interactive visualization that teaching software can
in principle offer. Finally, the courses follow a sin-
gle path through the materials as determined by the
teacher, which the student cannot change according
to their specific interests and their prior knowledge.
We believe that these shortcomings can be over-
come by shifting from a seminar-style to a web-
based training format in a way that preserves the
positive aspects of successful hands-on courses. On
the other hand, to successfully shift from seminar-
style to web-based training we believe it is essential
to do this based on a scientific understanding of the
nature and possibilities of web-based learning. In
the next section we therefore embed our work in the
context of education and collaborate learning tech-
nology research.
3 Education and collaborative learning
technology research
Our perspective on web-based training draws its in-
spiration primarily from work in building ?learn-
ing communities? in education research (Lin et al,
1995; Nonaka, 1994), in which:
1. a precise context is established to introduce
tacit knowledge and experience, in this case
on subjects in computational linguistics and the
traditional disciplines it draws from,
2. conflicting perspectives are shared, concepts
are objectified and submitted to a process of
justification and arbitration, and
3. the concepts are then integrated into the knowl-
edge base as modules upon which further in-
structional material or grammar implementa-
tions can be constructed.
We thus intend to provide an environment that
teaches students by actively encouraging them to
participate in research that extends our collective
knowledge in this area. In principle, there are no
boundaries to the material that could be included in
the evolving framework. We intend to make it avail-
able as an open-source standard for grammar de-
velopment and instruction in the hope that this will
encourage researchers and educators to contribute
modules to it, and to use a feature-structure based
approach for their own research and courses.
Scardamalia and Bereiter (1993) identify seven
global characteristics that technologies must have to
support this kind of participation:
Balance: a distinction between public and private
and between individual and group knowledge pro-
cesses. That includes free access to others? work, in-
cluding implementations of concepts as algorithms
or grammars, and opportunities to borrow ideas into
their own work that would be prohibitively time-
consuming or otherwise advanced to formulate on
their own. Such technologies must also encour-
age time for personal ?reflection and refinement?
and anonymous public or private contribution to the
knowledge space. The present framework achieves
this by providing an open-source setting combined
with a web-based instructional tool for self-paced
learning and individual design of both the contents
and order of the curriculum.
Contribution and notification: to prevent ideas
from being presented in an insulated structure that
discourages questioning, debate, or revision. As dis-
cussed in Section 4.2, this is achieved by providing
extensive linking and annotation of resources using
web-compatible metalanguages for integrating mod-
ules at the implementational, formal and instruc-
tional levels.
Source referencing: a means of preserving the
boundaries of a contributor?s idea and its credit as
well as a history of prior accounts and antecedents
to the idea. In the present framework, this is pro-
vided by means of a requirements analysis compo-
nent that requires contributed modules to identify
the contribution by new concepts or resources pro-
vided, existing concepts or resources imported for it
to work, and an account of existing alternatives with
a description of its distinction from them.
Storage and retrieval: which places contribu-
tions in a ?communal context? of related contribu-
tions by others to encourage joint work between con-
tributors working on problems with significant over-
lap. The present framework must organize the pre-
sentation of existing modules along several thematic
dimensions to accomplish this.
Multiple points of entry: for stu-
dents/contributors with different backgrounds
and levels of experience. Material is made acces-
sible in more basic or fundamental modules by
projecting the formal content of the subject into a
graphically based common-sense domain at which
it can be grasped more intuitively (see Section 4.3).
Accessibility in more advanced modules is provided
by links specified in the requirements analysis
component to more basic modules that the former
rely upon.
Coherence-producing mechanisms: feedback
to contributors and framework moderators of mod-
ules that are ?fading? for lack of attention or further
development. These can either be reinstated or refor-
mulated, moved to a private space of more periph-
eral modules, or deleted outright. This is a way of
encouraging activity that is productive, and restrict-
ing the chance of confusion or information overload.
Such a coherence mechanism must exist within this
framework.
Links to external resources: to situate the justifi-
cation and discussion of contributions in a wide con-
text. We make use of the web-based training plat-
form ILIAS1 which is available as open source soft-
ware and offers a high degree of flexibility in terms
of the integration of internal and external resources.
1http://www.ilias.uni-koeln.de/ios/index-e.html
4 Integration of the framework
The goal of our current work is to transform previ-
ous, seminar-style courses and new input into teach-
ing materials that are fit for web-based training in the
general framework outlined in the previous section.
This clearly involves much more than simply refor-
matting old teaching materials into web-compatible
formats. Instead, it requires an analysis of the con-
tents of the courses, the interleaving and hyperlink-
ing of the textual materials, and the development
of graphical, interactive solutions for presenting and
interacting with the content of the material. Since
the nature of the textual material as such is familiar
(instructional notes, reference guides to major sec-
tions with indices, system documentation, annotated
system source code, and annotated grammar source
code), we use the limited space in this paper to high-
light the integrated nature of the approach as well as
the web-based training specific issues of hyperlink-
ing and visualization.
4.1 Integration of linguistic and computational
aspects
Our approach is distinguished by its integration of
grammars, the parsers that use them and the on-
line instructional materials. Compared to the LKB
system2, which as mentioned in Section 5.2 has
also been used successfully in teaching grammar
development, the greater range of formal expres-
sive devices available to our parsing system, called
TRALE, allows for more readable and compact
grammars, which we believe to be of central impor-
tance in a teaching context. To illustrate this, we
are currently porting the LinGO3 English Resource
Grammar (ERG) from the LKB (on which the ERG
was designed) to the TRALE system.
Given the scope of our web-based training frame-
work as including an integrated module on parsing,
it is also relevant that the TRALE system itself can
be relatively compact and transparent at the source-
code level since it exploits its close affinity to the
underlying Prolog on which it is implemented. This
contrasts with the perspective of Copestake et al
(2001), who concede that the LKB is unsuitable for
teaching parsing.
2http://www-csli.stanford.edu/?aac/lkb.html
3http://lingo.stanford.edu/csli/
4.2 The use of hyperlinks
Several different varieties of links are distinguished
within the course material, giving a first-class repre-
sentation to the transfer of knowledge between the
linguistic, computational and mathematical sources
that inform this interdisciplinary area. We intend to
distinguish the following kinds of links:
Conceptual/taxonomical: connecting instances
of key concepts and terms used throughout the
course material with their definitions and prove-
nience;
Empirical context: connecting instances of de-
sign decisions, algorithms and formal definitions to
encyclopedic discussions of their linguistic motiva-
tion and empirical significance;
Denotational: connecting instances of construc-
tional terms and issues within linguistics as well as
correctness conditions of algorithms to the mathe-
matical definitions that formalize them within the
foundations of constraint-based linguistics;
Operational: connecting mathematical defini-
tions and instances of related linguistic discussions
to computational instructional material describing
the algorithms used to construct, refute or transform
the formal objects representing them in a practical
system;
Implementational: connecting discussions of al-
gorithms to the actual annotated system source code
in the TRALE system used to implement them, and
mathematical definitions and discussions of linguis-
tic constructions to the actual annotated grammar
source code used to represent them in a typical im-
plementation.
The idea behind this classification is that when
more course material is added to the web-based
training framework we are proposing, the new mate-
rial will take into account these distinctions to obtain
a conceptually coherent use of hyperlinks through-
out the framework.
4.3 Visualization
Our three core modules make use of a number of
graphical user interfaces: a tool for interleaved vi-
sualization and interaction with trees and attribute
value matrices, one for the presentation of lexical
rules and their interaction, an Emacs-based source-
level debugger, and a program for the graphical ex-
ploration of the formal foundations of typed feature
logic. The first two are extensions of tools we al-
ready used for our previous courses, and the third is
an extension of the ALE source-level debugger, so
we here focus on the last, new development.
The main goal of the MorphMoulder (MoMo) is
to project the formality of its subject, the formal
foundations of constraint languages over typed fea-
ture structures, onto a graphical level at which it can
be grasped more intuitively.4 The transparency of
this level is essential for providing multiple points
of entry (Section 3) to this fundamentally impor-
tant module. The MoMo tool allows the user to
explore the relationship between the two levels of
the formal architecture: the descriptions and the el-
ements described. To this end, the user works with
a graphical interface on a whiteboard. Labeled di-
rected graphs representing feature structures can be
constructed on the whiteboard from their basic com-
ponents, nodes and arcs. The nodes are depicted
as colored balls, which are assigned types, and the
arcs are depicted as arrows that may be labeled by
feature names. Once a feature structure has been
constructed, the user may examine its logical prop-
erties. The three main functions of the MoMo tool
allow one to check (1) whether a feature structure
complies with a given signature, (2) whether a well-
formed feature structure satisfies a description or a
set of descriptions, and (3) whether a well-formed
feature structure is a model of a description or a set
of descriptions. In the context of the course, the
functions of MoMo thus lead the user from under-
standing the well-formedness of feature structures
with respect to a signature to an understanding of
feature structures in their role as a logical model of
a theory. If a student has chosen course modules that
include a focus on formal foundations of feature log-
ics or feature logics based linguistic theory, the first
introduction to the subject by MoMo can easily be
followed up by a course module with rigorous math-
ematical definitions.
In constraint-based frameworks, the user declares
the primitives of the empirical domain in terms of
a type hierarchy with appropriate attributes and at-
tribute values. Consider a signature that licenses
lists of various birds, which may then be classified
according to certain properties. First of all, the sig-
4MoMo is written by Ekaterina Ovchinnikova, U. Tu?bingen.
nature needs to comprise a type hierarchy and fea-
ture appropriateness conditions for lists. Let type list
be an immediate supertype of the types non-empty-
list and empty-list in the type hierarchy (henceforth
abbreviated as nelist and elist). Let the appropri-
ateness conditions declare the attributes HEAD and
TAIL appropriate for (objects of) type nelist, the val-
ues of TAIL at nelist be of type list, and the values
of HEAD at type nelist be of type bird (for lists of
birds). Finally no attributes are appropriate for the
type elist. A typical choice for the interpretation of
that kind of signature in constraint-based formalisms
is the collection of totally well-typed and sort re-
solved feature structures. All nodes of totally well-
typed and sort resolved feature structures are of a
maximally specific type (types with no subtypes);
and they have outgoing arcs for all and only those
features that are appropriate to their type, with the
feature values again obeying appropriateness. Our
signature for lists thus declares an ontology of fea-
ture structures with nodes of type nelist or elist (but
never of type list), where the former must bear the
outgoing arcs HEAD and TAIL, and the latter have no
outgoing arcs. They signal the end of the list. The
HEAD values of non-empty lists must be in the de-
notation of the type bird.
Figure 1 illustrates how the MoMo tool can be
used to study the relationship between signatures
and the feature structures they license by letting
the user construct feature structures and interac-
tively explore whether particular feature structures
are well-formed according to the signature. To the
left of the whiteboard there are two clickable graph-
ics consoles of possible nodes and arcs from which
the user may choose to draw feature structures. The
consoles offer nodes of all maximally specific types
and arcs of all attributes that are declared in the
signature. In the present example, parrot, wood-
pecker, and canary are the maximally specific sub-
types of bird.
Each color of edge represents a different attribute,
and each color of node represents a different type.
The grayed outlines on edges and nodes indicate that
all of the respective edges and nodes in this partic-
ular example are licensed by the signature that was
provided. The HEAD arc originating at the node of
type elist, however, violates the appropriateness con-
ditions of the signature. The feature structure de-
Figure 1: Graphically evaluating well-typedness of
feature structures.
picted here, therefore, is not well-formed. The sig-
nature check thus fails on the given feature structure,
as indicated by the red light in the upper function
console to the right of the whiteboard.
Similarly, MoMo can graphically depict satisfia-
bility and modellability of a single description or set
of descriptions. To this end, the user may be asked to
construct a description that a given feature structure
satisfies or models; or she may be asked to construct
feature structures that satisfy or model a given de-
scription (or set of descriptions). The system will
give systematic feedback on the correct or incorrect
usage of the syntax of the description language as
well as on to which extent a feature structure satis-
fies or models descriptions, systematically guiding
the user to correct solutions.
Figure 2 shows a successful satisfiability check of
a well-formed feature structure. The feature struc-
ture is derived from the one in Figure 1 by re-
moving the incorrect HEAD arc and its substructure
from the elist node. The query, asked in a sepa-
rate window, is whether the feature structure satis-
fies the constraint (nelist, head:(parrot,
color:green), tail:nelist). Since this
is the case, the green light on the function console to
the right is signaling succeed. If we were to perform
model checking of the same feature structure against
the same constraint, checking would fail, and MoMo
would indicate the nodes of the feature structure that
do not satisfy the given constraint.
Figure 2: Graphically evaluating constraint satisfac-
tion of feature structures.
MoMo?s descriptions are a syntactic parallel to
TRALE?s descriptions, thus introducing the student
not only to the syntax and semantics of constraint
languages but also to the language that will be used
for the implementation of grammars later in the
course. The close relationship of description lan-
guages also facilitates a comparison of their model-
theoretic semantics and the truth conditions of gram-
mars with the structure and semantics of algorithms
that use descriptions for constraint resolution and in
parsing. Finally, their common structure allows for a
tight network of hyperlinks across the boundaries of
different course modules and course topics, linking
them to a common source of mathematical, imple-
mentational and linguistic indices, which explain the
usage of common mathematical concepts across the
different areas of application of typed feature struc-
tures.
5 From seminar-style courses to
web-based training
Having discussed the ideas driving the web-based
teaching platform and exemplified one of the tools,
we now return to the courses which have informed
our work on the three core modules currently being
developed in terms of their content and the use of a
web- and implementation environment they make.
5.1 Grammar implementation in ALE
ALE5 (Carpenter and Penn, 1996) is a conserva-
tive extension of Prolog based on typed feature
structures, with a built-in parser and semantic-head-
driven generator. The demand for such a utility
was so great when it was beta-released in 1992
that it immediately became the subject of early
work in graphical front-end development for large
constraint-based grammars: first with the Pleuk sys-
tem (Calder, 1993), then as one of several systems
supported by Gertjan van Noord?s HDrug6, followed
by an ALE-mode Emacs user interface (Laurens,
1995). It also provided the computational support
for one of the very first web-based computational
linguistics courses, Colin Matheson?s widely used
HPSG Development in ALE7. A follow-up course on
computational morphology8, also by Colin Mathe-
son, was based on ALE-RA9, a morphological ex-
tension of ALE by Tomaz Erjavec.
Our current web-based training module is sup-
ported by an extension of ALE, called TRALE,
that uses a slightly different interpretation of typing
found in many linguistic theories and an enhanced
constraint language that supports constraints with
complex antecedents (Penn, 2000).
5http://www.cs.toronto.edu/?gpenn/ale.html
6http://grid.let.rug.nl/?vannoord/hdrug/
7http://www.ltg.hcrc.ed.ac.uk/projects/ledtools/ale-hpsg/
8http://www.ltg.ed.ac.uk/projects/ledtools/ale-ra/
9http://nl.ijs.si/et/Thesis/ALE-RA/
5.2 Constraint-based grammar
implementation
Over the past five years, we have held another course
on Constraint-Based Grammar Implementation in
a variety of settings, from summer schools to reg-
ular curriculum courses.10 It offers hands-on ex-
perience to linguists interested in the formalization
of linguistic knowledge in a constraint-based gram-
mar formalism. The course is taught in an interac-
tive fashion in a computer laboratory and combines
background lectures with practical exercises on how
to specify grammars in ConTroll11 (Go?tz and Meur-
ers, 1997), a processing system for constraint-based
grammars intended to process with HPSG theories
directly from the form in which they are constructed
by linguists.
The background lectures of the Constraint-based
grammar implementation courses introduce the rel-
evant mathematical and computational knowledge
and focus on the main ingredients of constraint-
based grammars: highly structured lexical represen-
tations, constituent structures, and the encoding of
well-formedness constraints on grammatical repre-
sentations. In the lab, students work on exercises
exploring the theoretical concepts covered in the lec-
tures. In a later part of the course, they are given
the opportunity to undertake individualized gram-
mar projects for modeling theoretically and empir-
ically significant syntactic constructions of their na-
tive language.
This course was the first hands-on computational
syntax course at the European Summer School
in Language, Logic, and Information (ESSLLI,
1997: Aix-en-Provence), and was also offered at the
LSA Linguistic Institute (1999: University of Illi-
nois, Urbana-Champaign)12 and the Computational
Linguistics and Represented Knowledge (CLaRK)
Summer School (1999: Eberhard-Karls Universita?t,
Tu?bingen)13. Generally regarded as a highly suc-
cessful course and teaching method, every subse-
quent ESSLLI summer school has offered at least
one similar course: Practical HPSG Grammar Engi-
neering (1998: Ann Copestake, Dan Flickinger, and
10The courses were taught by E. Hinrichs and D. Meurers.
11http://www.sfs.uni-tuebingen.de/controll/
12http://ling.osu.edu/?dm/lehre/lsa99/
13http://ling.osu.edu/?dm/lehre/clark99/
Stephan Oepen)14, Development of large scale LFG
grammars: Linguistics, Engineering and Resources
(1999: Miriam Butt, Annette Frank, and Jonas
Kuhn)15, Grammatical Resources: Logic, Struc-
ture, Control (1999: Michael Moortgat and Richard
T. Oehrle)16, An Introduction to Grammar Engi-
neering using HPSG (2000: Ann Copestake, Rob
Malouf)17, Advanced Grammar Engineering using
HPSG (2000: Dan Flickinger, Stephan Oepen)18,
and An Introduction to Stochastic Attribute-Value
Grammars (2001: Rob Malouf, Miles Osborne)19.
5.3 Introduction to theory-driven CL
A further source of material for the core modules
of our web-based training framework is the graduate
level Introduction to Theory-driven Computational
Linguistics at the Ohio State University.20 It covers
the basic issues of the following topics: finite state
automata and transducers, formal language theory,
computability and complexity, recognizers/parsers
for context free grammars, memoization, and pars-
ing with complex categories.
The theoretical material is combined with prac-
tical exercises in Prolog implementing different as-
pects of parsers. At the end of the course, students
complete a project consisting of building and testing
a grammar fragment for a short English text of their
choice. The traditional one-quarter course includes
weekly exercises, extensive web-based course mate-
rial for students, and a course workbook21 as a guide
through the theoretical material.
5.4 Model-theoretic introduction to Syntax
Our approach to teaching the fundamentals of math-
ematical theories through graphical metaphors in
the context of syntax derives from our experience
with this method in teaching Syntax I (HPSG) at
the Eberhard-Karls Universita?t Tu?bingen in 1998,
14http://www.coli.uni-sb.de/esslli/Seiten/Oepen.html
15http://www.let.uu.nl/esslli/Courses/butt.html
16http://www.let.uu.nl/esslli/Courses/moortgat-oehrle.html
17http://www.cs.bham.ac.uk/?esslli/notes/copestake.html
18http://www.cs.bham.ac.uk/?esslli/notes/oepen.html
19http://odur.let.rug.nl/?malouf/esslli01/
20The course was taught by D. Meurers; see http://ling.osu.
edu/?dm/2001/winter/684.01/
21This workbook is based, with kind permission from the
authors, on the module workbook for ?Techniques in Natural
Language Processing 1? by Chris Mellish, Pete Whitelock and
Graeme Ritchie, 1994, Dept. of AI, University of Edinburgh.
1999 and 2001.22 In these seminars, which did not
presuppose any prior knowledge of model-theoretic
methods in logic, the mathematical foundations of
feature logic were introduced by intuitive means but
with as much precision as possible without strict for-
malization. An introduction to a standardized ver-
sion of the logical description language of HPSG
was accompanied with problem sets that required
the students to construct three-dimensional feature
structure models (made of styrofoam and wires) of
descriptions and sets of descriptions. The informal
but very concrete understanding of the relationship
between a theory cast in a constraint language and its
feature structure models had a very positive result on
students? ability to grasp and build working analyses
of unseen constructions compared to the results of
the more traditional method of teaching constraint-
based syntax used in previous years. At the same
time, the teaching method successfully used an ap-
peal to prior world knowledge rather than unfamiliar
mathematical notation in order to make the students
familiar with the basic concepts of constraint satis-
faction and truth in feature logics.
6 Summary and Outlook
The interdisciplinary nature of computational lin-
guistics and the diverse backgrounds of the student
audience makes it particularly attractive to teach a
subject like constraint-based grammar formalisms
and parsing using a web-based instructional plat-
form which integrates formal and computational
foundations, linguistic theory, and grammar im-
plementation. We discussed several seminar-style
courses which have informed our proposal in terms
of content, highlighted the problems of the tradi-
tional face-to-face teaching, and described our en-
vironment of web-based teaching materials plus im-
plementational support. We argued that a web-based
training framework for the topic can be organized
around feature structures as a central data structure
in formal foundations, linguistics and implementa-
tion. We outlined the educational and collaborative
learning background in which an informed proposal
on web-based training must be embedded and used
the newly developed tool MoMo as an illustration
22The courses were taught by F. Richter and M. Sailer; see
http://www.sfs.uni-tuebingen.de/?fr/teaching/
of how we envisage projecting the formal content of
the subject into a graphically based common-sense
domain in which it can be grasped more intuitively.
The three core modules on formal founda-
tions, constraint-based grammar implementation,
and parsing will be completed and made publicly
available at the end of 2003. The joint project
is funded by the German Federal Ministry for Re-
search Technology (BMBF) as part of the consor-
tium Media-intensive teaching modules in the com-
putational linguistics curriculum (MiLCA).23
References
J. Calder. 1993. Graphical interaction with constraint-
based grammars. In Proceedings of PACLING ?93,
pages 160?168, Vancouver, British Columbia.
B. Carpenter and G. Penn. 1996. Compiling typed
attribute-value logic grammars. In H. Bunt and
M. Tomita, editors, Recent Advances in Parsing Tech-
nologies, pages 145?168. Kluwer, Dordrecht.
A. Copestake, J. Carroll, D. Flickinger, R. Malouf, and
S. Oepen. 2001. Using an open-source unification-
based system for CL/NLP teaching. In Proceedings
of the EACL/ACL Workshop on Sharing Tools and Re-
sources for Research and Education, pages 35?38.
T. Go?tz and W. D. Meurers. 1997. The ConTroll system
as large grammar development platform. In Proceed-
ings of the EACL/ACL Workshop on Computational
Environments for Grammar Development and Linguis-
tic Engineering, pages 38?45. http://ling.osu.edu/?dm/
papers/envgram.html.
O. Laurens. 1995. An Emacs user interface for ALE.
Technical Report CSS-IS TR 95-07, School of Com-
puting Science, Simon Fraser University.
X. Lin, J.D. Bransford, and C.E. Hmelo. 1995. Instruc-
tional design and development of learning communi-
ties: an invitation to dialogue. Educational Technol-
ogy, 35(5):53?63.
I. Nonaka. 1994. A dynamic theory of organizational
knowledge creation. Organizational Science, 5(1).
G. Penn. 2000. Applying Constraint Handling Rules
to HPSG. In Proceedings of the Workshop on Rule-
Based Constraint Reasoning and Programming, CL
2000.
M. Scardamalia and C. Bereiter. 1993. Technologies
for knowledge-building discourse. Communications
of the ACM, 36(5):37?41.
23http://milca.sfs.uni-tuebingen.de/A4/HomePage/top.html
