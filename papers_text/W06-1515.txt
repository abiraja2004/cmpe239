Proceedings of the 8th International Workshop on Tree Adjoining Grammar and Related Formalisms, pages 109?114,
Sydney, July 2006. c?2006 Association for Computational Linguistics
Constraint-based Computational Semantics:
A Comparison between LTAG and LRS
Laura Kallmeyer
University of T?bingen
Collaborative Research Center 441
lk@sfs.uni-tuebingen.de
Frank Richter
University of T?bingen
Collaborative Research Center 441
fr@sfs.uni-tuebingen.de
Abstract
This paper compares two approaches to
computational semantics, namely seman-
tic unification in Lexicalized Tree Ad-
joining Grammars (LTAG) and Lexical
Resource Semantics (LRS) in HPSG.
There are striking similarities between the
frameworks that make them comparable in
many respects. We will exemplify the dif-
ferences and similarities by looking at sev-
eral phenomena. We will show, first of all,
that many intuitions about the mechanisms
of semantic computations can be imple-
mented in similar ways in both frame-
works. Secondly, we will identify some
aspects in which the frameworks intrin-
sically differ due to more general differ-
ences between the approaches to formal
grammar adopted by LTAG and HPSG.
1 Introduction
This paper contrasts two frameworks for compu-
tational semantics, the proposal for semantics in
LTAG described in (Kallmeyer and Romero, 2005)
and LRS (Richter and Sailer, 2004), a computa-
tional semantics framework formulated in Head-
Driven Phrase Structure Grammar (HPSG).
There are significant differences between LTAG
and HPSG. LTAG is a mildly context-sensitive
lexicalized formalism characterized by an ex-
tended domain of locality. HPSG is based on the
idea of a separation of the lexicon and syntactic
structure and on the strict locality of general gram-
mar principles that are formulated in an expres-
sive and very flexible logical description language.
These fundamental differences are reflected in the
respective architectures for semantics: LTAG as-
sumes a separate level of underspecified semantic
representations; LRS uses the description logic of
syntax for semantic specifications.
However, despite the different mathematical
structures, we find striking similarities between
LTAG semantics with unification and LRS. They
both show similar intuitions underlying specific
analyses, use the same higher order type-theoretic
language (Ty2, (Gallin, 1975)) as a means for
specifying the truth conditions of sentences, and
employ a feature logic in the combinatorial seman-
tics instead of the lambda calculus. Because of
these similarities, analyses using both approaches
are closely related and can benefit from each other.
The paper is structured as follows: Sections 2
and 3 will introduce the two frameworks. The
next three sections (4?6) will sketch analyses of
some phenomena in both frameworks that will re-
veal relevant relations between them. Section 7
presents a summary and conclusion.
2 LTAG semantics
In (Kallmeyer and Romero, 2005), each elemen-
tary tree is linked to a semantic representation (a
set of Ty2 formulas and scope constraints). Ty2
formulas (Gallin, 1975) are typed ?-terms with in-
dividuals and situations as basic types. The scope
constraints of the form x ? y specify subordina-
tion relations between Ty2 terms. In other words,
x ? y indicates that y is a component of x.
A semantic representation is equipped with a
semantic feature structure description. Semantic
computation is done on the derivation tree and
consists of certain feature value equations between
mother and daughter nodes in the derivation tree.
(1) John always laughs.
As an example, see Fig. 1 showing the deriva-
tion tree for (1) with semantic representations and
109
l1 : laugh( 1 )
?
?
?
NP
[
GLOBAL
[
I 1
]
]
VP
[
B
[
P l1
]
]
?
?
?
np vp
john(x) l2 : always( 3 ),
3 ? 4
[
GLOBAL
[
I x
]
] ?
?
?
VPr
[
B
[
P l2
]
]
VPf
[
B
[
P 4
]
]
?
?
?
Figure 1: LTAG semantics of (1)
semantic feature structure descriptions as node
labels. The additional feature equations in this
example are depicted using dotted lines. They
arise from top-bottom feature identifications par-
allel to the unifications performed in FTAG (Vijay-
Shanker and Joshi, 1988) and from identifications
of global features. They yield 1 = x and 4 = l1.
Applying these identities to the semantic represen-
tations after having built their union leads to (2).
The constraint 3 ? l1 states that l1 : laugh(x) is
a component of 3 .
(2) john(x), l2 : always( 3 ), l1 : laugh(x),
3 ? l1
Note that the feature structure descriptions do
not encode the semantic expressions one is inter-
ested in. They only encode their contributions to
functional applications by restricting the argument
slots of certain predicates in the semantic repre-
sentations: They state which elements are con-
tributed as possible arguments for other seman-
tic expressions and which arguments need to be
filled. They thereby simulate lambda abstraction
and functional application while assembling the
semantic representations. To achieve this, a re-
stricted first order logic is sufficient.
Semantic computation is local on the derivation
tree: The new feature equations that are added de-
pend only on single edges in the derivation tree.
Because of this, even with the extension to seman-
tics, the formalism is still mildly context-sensitive.
3 LRS
In LRS the feature logic specifies the entire gram-
mar, including well-formed Ty2 terms as seman-
tic representations, and their mode of composi-
tion. Instead of the lambda calculus of tradi-
tional Montague Grammar, LRS crucially uses a
novel distinction between three aspects of the log-
ical representations of signs (external content, in-
ternal content, and parts). LRS constraints es-
tablish sub-term relationships between pieces of
semantic representations within and across signs,
thereby specifying the combinatorial properties of
the semantics. The subterm or component-of con-
ditions (symbolized as /) are imposed by gram-
mar principles. Since these principles are descrip-
tions of object-language expressions, they permit
the application of various underspecification tech-
niques of computational semantics, although an
LRS grammar does not employ underspecified se-
mantic representations, in contrast to LTAG se-
mantics.
Fig. 2 shows an HPSG description of the syn-
tactic tree and the LRS specifications of (1). The
syntactic trees in HPSG correspond to the derived
trees of LTAG. Since HPSG does not have deriva-
tion trees, the LRS principles refer to derived trees.
NP
?
?
exc 1
inc 1
p ? 1 john?
?
?
John
A
?
?
exc 5
inc 5 always( 3 )
p ? 5 , 5a always?
?
?
always
V
?
?
exc 4
inc 2 laugh( 1 )
p ? 2 , 2a laugh?
?
?
laughs
adj head
VP
?
?
exc 4
inc 2
p ? 2 , 2a , 5 , 5a ?
?
?
& 2 / 3 & 5 / 4
comp head
S
?
?
exc 4 always(laugh(john))
inc 2
p ? 2 , 2a , 5 , 5a , 1 ?
?
?
Figure 2: LRS analysis of (1)
Each word lexically specifies its contribution to
the overall meaning of the sentence (P(ARTS)), the
part of its semantics which is outscoped by all
signs the word combines with (INC(ONT)), and
the overall semantic contribution of its maximal
projection (EXC(ONT)). Feature percolation prin-
ciples identify INC and EXC, respectively, along
head projections and collect the elements of the
PARTS lists of the daughters at each phrase. The
combination of the adjunct with a verbal pro-
jection introduces two component-of constraints:
The EXC of always must be within the EXC of
laughs, and the INC of laughs must be in the
scope of always. The semantic argument of
110
laughs (john) is identified by subcategorization
(not shown in Fig. 2). A closure condition requires
that the semantic representation of an utterance
use up all and only the PARTS contributions of all
signs, which yields 4 = always(laugh(john)).
4 Quantifier scope
4.1 Specifying a scope window
(3) Exactly one student admires every professor:
? > ?,? > ?
(4) John seems to have visited everybody:
seem > ?,? > seem
Quantificational NPs in English can in princi-
ple scope freely (see (3) and (4)). An analysis of
quantifier scope must guarantee only two things:
1. the proposition to which a quantifier attaches
must be in its nuclear scope, and 2. a quantifier
cannot scope higher than the next finite clause.
One way to model this is to define a scope win-
dow delimited by a maximal scope and a minimal
scope for a quantifier. Both LTAG and LRS, spec-
ify such scope windows for quantifiers. We will
now outline the two analyses.
(5) Everybody laughs.
(Kallmeyer and Romero, 2005) use global fea-
tures MAXS and MINS for the limits of the scope
window. Fig. 3 shows the LTAG analysis of (5).
The feature identifications (indicated by dotted
lines) lead to the constraints 2 ? 5 , 5 ? l1.
These constraints specify an upper and a lower
boundary for the nuclear scope 5 . With the as-
signments following from the feature identifica-
tions we obtain the semantic representation (6):
(6)
l1 : laugh(x),
l2 : every(x, 4 , 5 ), l3 : person(x)
2 ? l1,
4 ? l3, 2 ? 5 , 5 ? l1
There is one possible disambiguation consis-
tent with the scope constraints, namely 2 ? l2,
4 ? l3, 5 ? l1. This leads to the semantics
every(x, person(x), laugh(x)).
In LRS, the EXCONT value of the utterance is
the upper boundary while the INCONT value of the
syntactic head a quantifier depends on is the lower
boundary for scope, as illustrated in Fig. 4. The
upper boundary is obtained through the interaction
of 1) a PROJECTION PRINCIPLE stating that the
l1 : laugh( 1 ),
2 ? 3
np
l2 : every(x, 4 , 5 ),
l3 : person(x),
4 ? l3,
6 ? 5 , 5 ? 7
?
?
?
?
GLOBAL
[
MINS l1
MAXS 2
]
NP
[
GLOBAL
[
I 1
]
]
?
?
?
?
?
?
?
?
GLOBAL
[
I x
]
NP
[
GLOBAL
[
MINS 7
MAXS 6
]
]
?
?
?
?
Figure 3: LTAG analysis of (5) Everybody laughs
PARTS list of a phrase contains all elements on the
PARTS lists of its daughters, and 2) the EXCONT
PRINCIPLE which states that a) the PARTS list of
each non-head contains its own EXCONT, and b)
in an utterance, everything on the PARTS list is a
component of the EXCONT. This leads to the con-
straint 4  6 in Fig. 4, among others. The lower
boundary is obtained from the SEMANTICS PRIN-
CIPLE which states that if the non-head of a headed
phrase is a quantifier, then the INCONT of the head
is a component of its nuclear scope. This yields
1  ? in Fig. 4.
S
?
?
EXC 6 ?x
(
person
(
x
)
? laugh
(
x
))
INC 1
P ?x, 1 , 1a , 2 , 2a , 4 , 4a ?
?
?
NP VP
?
?
?
EXC 4 ?x (? ? ?)
INC 2 person
(
x
)
P ?x, 2 , 2a person,
4 , 4a ? ? ??
?
?
?
?
?
EXC 6
INC 1 laugh
(
x
)
P ? 1 , 1a laugh?
?
?
everybody laughs
Relevant subterm constraints: 2  ? (from the lexical entry
of everybody), 1  ?, 4  6
Figure 4: LRS analysis of (5) Everybody laughs
The striking similarity between the two anal-
yses shows that, despite the fundamental differ-
ences between the frameworks, central insights
can be modelled in parallel.
4.2 Nested quantifiers
The use of the upper limit of the scope windows is,
however, slightly different: EXCONT contains the
quantifier itself as a component while MAXS limits
only the nuclear scope, not the quantifier. Conse-
quently, in LTAG the quantifier can scope higher
111
than the MAXS limiting its nuclear scope but in
this case it takes immediate scope over the MAXS.
(7) Two policemen spy on someone from every
city: ? > ? > 2 (among others)
The LTAG analysis is motivated by nested quan-
tifiers. In sentences such as (7), the embedded
quantifier can take scope over the embedding one
but if so, this must be immediate scope. In other
words, other quantifiers cannot intervene. In (7),
the scope order ? > 2 > ? is therefore not pos-
sible.1 The LTAG analysis is such that the max-
imal nuclear scope of the embedded quantifier is
the propositional label of the embedding quanti-
fier.2
In LRS, the way the scope window is speci-
fied, a corresponding constraint using the EXCONT
of the embedded quantifier cannot be obtained.
The LRS principle governing the distribution of
embedded quantifiers in complex NPs states di-
rectly that in this syntactic environment, the em-
bedded quantifier may only take direct scope over
the quantifier of the matrix NP. This principle
does not refer to the notion of external content at
all. At this point it is an open question whether
LRS could learn from LTAG here and adapt the
scope window so that an analogous treatment of
nested quantifiers would be possible.
5 LTAG?s extended domain of locality
Whereas the treatment of quantification sketched
in the preceding section highlights the similarities
between LTAG semantics and LRS, this and the
following section will illustrate some fundamental
differences between the frameworks.
In spite of the parallels mentioned above, even
INCONT and MINS differ sometimes, namely in
sentences containing bridge verbs. This is related
to the fact that LTAG has an extended domain of
locality whereas HPSG does not. Let us illustrate
the difference with the example (8).
(8) Mary thinks John will come.
1(Joshi et al, 2003) propose an extra mechanism that
groups quantifiers into sets in order to derive these con-
straints. (Kallmeyer and Romero, 2005) however show that
these constraints can be derived even if the upper limit MAXS
for nuclear scope is used as sketched above.
2Note that this approach requires constraints of the form
l ? n with l being a label, n a variable. This goes
beyond the polynomially solvable normal dominance con-
straints (Althaus et al, 2003). This extension, though, is
probably still polynomially solvable (Alexander Koller, per-
sonal communication).
In LTAG, the two elementary verb trees (for
thinks and will come) have different global MINS
features. The one for thinks is the label of the think
proposition while the one for will come is the label
of the embedded proposition. As a consequence, a
quantifier which attaches to the matrix verb cannot
scope into the embedded clause. This distinction
of different MINS values for different verb trees is
natural in LTAG because of the extended domain
of locality.
In LRS, all verbal nodes in the constituent struc-
ture of (8) carry the same INCONT value, namely
the proposition of the embedded verb. Conse-
quently, the minimal scope of quantifiers attaching
either to the embedding or to the embedded verb
is always the proposition of the embedded verb.
However, due to the requirement that variables be
bound, a quantifier binding an argument of the em-
bedding verb cannot have narrow scope over the
embedded proposition.
How to implement the LTAG idea of different
INCONT values for the embedding and the embed-
ded verb in LRS is not obvious. One might intro-
duce a new principle changing the INCONT value
at a bridge verb, whereby the new INCONT would
get passed up, and the embedded INCONT would
no longer be available. This would be problem-
atic: Take a raising verb as in (9) (adjoining to the
VP node in LTAG) instead of a bridge verb:
(9) Most people seem to everybody to like the
film.
Here the minimal scope of most people should
be the like proposition while the minimal scope
of everybody is the seem proposition. In LTAG
this does not pose a problem since, due to the ex-
tended domain of locality, most people attaches to
the elementary tree of like even though the seem
tree is adjoined in between. If the INCONT treat-
ment of LRS were modified as outlined above and
seem had an INCONT value that differed from the
INCONT value of the embedded like proposition,
then the new INCONT value would be passed up
and incorrectly provide the minimal scope of most
people. LRS must identify the two INCONTs.
The difference between the two analyses illus-
trates the relevance of LTAG?s extended domain of
locality not only for syntax but also for semantics.
6 Negative Concord
The analysis of negative concord in Polish de-
scribed in this section highlights the differences
112
in the respective implementation of underspeci-
fication techniques in LTAG and LRS. Recall
that both LTAG and LRS use component-of con-
straints. But in LTAG, these constraints link ac-
tual Ty2-terms (i.e., objects) to each other, while
in LRS, these constraints are part of a description
of Ty2-terms.
(10) Janek nie pomaga ojcu.
Janek NM helps father
?Janek doesn?t help his father.?
(11) a. Janek nie pomaga nikomu.
Janek NM helps nobody
?Janek doesn?t help anybody.?
b. ?Janek pomaga nikomu.
(12) Nikt nie przyszed?.
nobody NM came
?Nobody came.?
The basic facts of sentential negation and nega-
tive concord in Polish are illustrated in (10)?(12):
The verbal prefix nie is obligatory for sentential
negation, and it can co-occur with any number
of n-words (such as nikt, ?anybody?) without ever
leading to a double negation reading. As a conse-
quence, (12) expresses only one logical sentential
negation, although the negation prefix nie on the
verb and the n-word nikt can carry logical nega-
tion alone in other contexts. LRS takes advantage
of the fact that its specifications of semantic repre-
sentations are descriptions of logical expressions
which can, in principle, mention the same parts
of the expressions several times. Fig. 5 shows
that both nikt and the verb nie przyszed? introduce
descriptions of negations ( 4 and 2 , respectively).
The constraints of negative concord in Polish will
then conspire to force the negations contributed by
the two words to be the same in the overall logical
representation 6 of the sentence.
Such an analysis is not possible in LTAG. Each
negation in the interpretation corresponds to ex-
actly one negated term introduced in the seman-
tic representations. Therefore, the negative parti-
cle nie necessarily introduces the negation while
the n-word nikt requires a negation in the proposi-
tion it attaches to. An analysis along these lines is
sketched in Fig. 6 (?GL? stands for ?GLOBAL?).
The requirement of a negation is checked with
a feature NEG indicating the presence of a nega-
tion. The scope of the negation (feature N-SCOPE)
?
?
EXC 6 ??e?x
(
person
(
x
)
? come
(
e, x
))
INC 1
P ?e, x, 0 , 1 , 1a , 1b , 2 , 3 , 3a , 4 , 5 , 5a ?
?
?
nikt nie przyszed?
?
?
?
EXC 5 ?x (? ? ?)
INC 3 person
(
x
)
P ?x, 3 , 3a person,
4??, 5 , 5a ? ? ??
?
?
?
?
?
?
?
?
EXC 6
INC 1 come
(
e, x
)
P ?e, 1 , 1a come e,
1b come, 2??,
0 ?e??
?
?
?
?
?
1  ?, 2  6 , 5  ?, 3  ?, 1  ?, 1  ?, 1  ?
Figure 5: LRS analysis of (12) Nikt nie przyszed?
marks the maximal scope of the existential quan-
tifier of the n-word nikt (constraint 7 ? 6 ).3
S
NP VP
V
NP nie V
nikt przyszed?
l1 : ? 1 ,
l2 : come( 2 , 3 )
1 ? l2, 4 ? l1
np
l3 : some(x, 5 , 6 ),
l4 : person(x)
5 ? l4,
7 ? 6 , 6 ? 8
?
?
?
?
?
?
?
GL
?
?
?
MAXS 4
N-SCOPE 1
MINS l2
NEG yes
?
?
?
NP
[
GL
[
I 2
]
]
?
?
?
?
?
?
?
?
?
?
?
?
GL
[
I x
]
NP
?
?GL
[
N-SCOPE 7
MINS 8
NEG yes
]
?
?
?
?
?
?
?
Figure 6: LTAG analysis of (12) Nikt nie przyszed?
This example illustrates that the two frame-
works differ substantially in their treatment of un-
derspecification: 1. LRS employs partial descrip-
tions of fully specified models, whereas LTAG
generates underspecified representations in the
style of (Bos, 1995) that require the definition of
a disambiguation (a ?plugging? in the terminol-
ogy of Bos). 2. LRS constraints contain not Ty2
terms but descriptions of Ty2 terms. Therefore, in
contrast to LTAG, two descriptions can denote the
same formula. Here, LTAG is more limited com-
pared to LRS. On the other hand, the way seman-
tic representations are defined in LTAG guarantees
3See (Lichte and Kallmeyer, 2006) for a discussion of
NEG and N-SCOPE in the context of NPI-licensing.
113
that they almost correspond to normal dominance
constraints, which are known to be polynomially
parsable. The difference in the use of underspecifi-
cation techniques reflects the more general differ-
ence between a generative rewriting system such
as LTAG, in which the elements of the grammar
are objects, and a purely description-based for-
malism such as HPSG, in which token identities
between different components of linguistic struc-
tures are natural and frequently employed.
7 Summary and Conclusion
LTAG and LRS have several common characteris-
tics: They both 1. use a Ty2 language for seman-
tics; 2. allow underspecification (LTAG scope con-
straints ? versus LRS component-of constraints
); 3. use logical descriptions for semantic com-
putation; 4. are designed for computational appli-
cations. Due to these similarities, some analyses
can be modelled in almost identical ways (e.g., the
quantifier scope analyses, and the identification of
arguments using attribute values rather than func-
tional application in the lambda calculus). We take
the existence of this clear correspondence as in-
dicative of deeper underlying insight into the func-
tioning of semantic composition in natural lan-
guages.
Additionally, the differences between the
frameworks that can be observed on the level of
syntax carry over to semantics: 1. LTAG?s ex-
tended domain of locality allows the localization
within elementary trees of syntactic and seman-
tic relations between elements far apart from each
other on the level of constituent structure. 2. LTAG
(both syntax and semantics) is a formalism with
restricted expressive power that guarantees good
formal properties. The restrictions, however, can
be problematic. Some phenomena can be more
easily described in a system such as HPSG and
LRS while their description is less straightfor-
ward, perhaps more difficult or even impossible
within LTAG. The concord phenomena described
in section 7 are an example of this.
A further noticable difference is that within the
(Kallmeyer and Romero, 2005) framework, the
derivation tree uniquely determines both syntac-
tic and semantic composition in a context-free
way. Therefore LTAG semantics is mildly context-
sensitive and can be said to be compositional.
As far as LRS is concerned, it is not yet known
whether it is compositional or not; compositional-
ity (if it holds at all) is at least less straightforward
to show than in LTAG.
In conclusion, we would like to say that the sim-
ilarities between these two frameworks permit a
detailed and direct comparison. Our comparative
study has shed some light on the impact of the dif-
ferent characteristic properties of our frameworks
on concrete semantic analyses.
Acknowledgments
For many long and fruitful discussions of various
aspects of LTAG semantics and LRS, we would
like to thank Timm Lichte, Wolfgang Maier, Mari-
bel Romero, Manfred Sailer and Jan-Philipp S?hn.
Furthermore, we are grateful to three anonymous
reviewers for helpful comments.
References
Ernst Althaus, Denys Duchier, Alexander Koller, Kurt
Mehlhorn, Joachim Niehren, and Sven Thiel. 2003.
An efficient graph algorithm for dominance con-
straints. Journal of Algorithms, 48(1):194?219.
Johan Bos. 1995. Predicate logic unplugged. In Paul
Dekker and Martin Stokhof, editors, Proceedings of
the 10th Amsterdam Colloquium, pages 133?142.
Daniel Gallin. 1975. Intensional and Higher-Order
Modal Logic with Applications to Montague Seman-
tics. North Holland mathematics studies 19. North-
Holland Publ. Co., Amsterdam.
Aravind K. Joshi, Laura Kallmeyer, and Maribel
Romero. 2003. Flexible Composition in LTAG:
Quantifier Scope and Inverse Linking. In Harry
Bunt, Ielka van der Sluis, and Roser Morante, ed-
itors, Proceedings of the Fifth International Work-
shop on Computational Semantics IWCS-5, pages
179?194, Tilburg.
Laura Kallmeyer and Maribel Romero. 2005. Scope
and Situation Binding in LTAG using Semantic Uni-
fication. Submitted to Research on Language and
Computation. 57 pages., December.
Timm Lichte and Laura Kallmeyer. 2006. Licensing
German Negative Polarity Items in LTAG. In Pro-
ceedings of The Eighth International Workshop on
Tree Adjoining Grammar and Related Formalisms
(TAG+8), Sydney, Australia, July.
Frank Richter and Manfred Sailer. 2004. Basic con-
cepts of lexical resource semantics. In Arnold Beck-
mann and Norbert Preining, editors, ESSLLI 2003 ?
Course Material I, (= Collegium Logicum, 5), pages
87?143. Kurt G?del Society, Wien.
K. Vijay-Shanker and Aravind K. Joshi. 1988. Feature
structures based tree adjoining grammar. In Pro-
ceedings of COLING, pages 714?719, Budapest.
114
