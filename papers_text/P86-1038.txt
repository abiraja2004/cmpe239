A LOGICAL SEMANTICS FOR FEATURE STRUCTURES 
Robert T. Kasper and William C. Rounds 
Electrical Engineering and Computer Science Department 
University of Michigan 
Ann Arbor, Michigan 48109 
Abst rac t  
Unification-based grammar formalisms use struc- 
tures containing sets of features to describe lin- 
guistic objects. Although computational algo- 
rithms for unification of feature structures have 
been worked out in experimental research, these 
algcwithms become quite complicated, and a more 
precise description of feature structures is desir- 
able. We have developed a model in which de- 
scriptions of feature structures can be regarded 
as logical formulas, and interpreted by sets of di- 
rected graphs which satisfy them. These graphs 
are, in fact, transition graphs for a special type 
of deterministic finite automaton. 
This semantics for feature structures extends 
the ideas of Pereira and Shieber \[11\], by providing 
an interpretation for values which are specified 
by disjunctions and path values embedded within 
disjunctions. Our interpretati6n differs from that 
of Pereira and Shieber by using a logical model 
in place of a denotational semantics. This logical 
model yields a calculus of equivalences, which can 
be used to simplify formulas. 
Unification is attractive, because of its gener- 
ality, but it is often computations/\]), inefficient. 
Our mode\] allows a careful examination of the 
computational complexity of unification. We 
have shown that the consistency problem for for- 
mulas with disjunctive values is NP-complete. To 
deal with this complexity, we describe how dis- 
junctive values can be specified in a way which 
delays expansion to disjunctive normal form. 
1 Background:  
Un i f i ca t ion  in Grammar  
Several different approaches to natural lan- 
guage grammar have developed the notion of 
feature structures to describe linguistic objects. 
These approaches include linguistic theories, such 
as Generalized Phrase Structure Grammar (GPSG) \[2\], 
Lexical Functional Grammar (LFG) \[4\], and Sys- 
temic Grammar \[3\]. They also include grammar 
formalisms which have been developed as com- 
putational tools, such as Functional Unification 
Grammar (FUG) \[7\], and PATR-II \[14\]. In these 
computational formalisms, unificat/on is the pri- 
mary operation for matching and combining fea- 
ture structures. 
Feature structures are called by several differ- 
ent names, including f-structures in LFG, and 
functional descriptiona in FUG. Although they 
differ in details, each approach uses structures 
containing sets of attributes. Each attribute is 
composed of a label/value pair. A value may be 
an atomic symbol, hut it may also be a nested 
feature structure. 
The intuitive interpretation of feature struc- 
tures may be clear to linguists who use them, 
even in the absence of a precise definition. Of- 
ten, a precise definition of a useful notation be- 
comes possible only after it has been applied to 
the description of a variety of phenomena. Then, 
greater precision may become necessary for clari- 
fication when the notation is used by many differ- 
ent investigators. Our model has been developed 
in the context of providing a precise interpreta- 
tion for the feature structures which are used in 
FUG and PATR-II. Some elements of this logi- 
cal interpretation have been partially described 
in Kay's work \[8\]. Our contribution is to give 
a more complete algebraic account of the logi- 
cal properties of feature structures, which can be 
used explicitly for computational manipulation 
and mathematical nalysis. Proofs of the math- 
ematical soundness and completeness of this log- 
ical treatment, along with its relation to similar 
logics, can be found in \[12\]. 
2 D is junct ion  and  
Non-Loca l  Va lues  
Karttunen \[5\] has shown that disjunction and 
negation are desirable extensions to PATR-II 
which are motivated by a wide range of linguistic 
257 
die : ,,?reement : number : 8ia? 
aumber : pl \] 
Figure 1: A Feature Structure containing Value 
Disjunction. 
phenomena. He discusses specifying attributes by 
disjunctive values, as shown in Figure 1. A ~alue 
disjuactioa specifies alternative values of a single 
attribute. These alternative values may be either 
atomic or complex. Disjunction of a more gen- 
eral kind is an essential element of FUG. Geaera/ 
disjunction is used to specify alternative groups 
of multiple attributes, as shown in Figure 2. 
Karttunen describes a method by which the ba- 
sic unification procedure can be extended to han- 
dle negative and disjunctive values, and explains 
some of the complications that result from intro- 
ducing value disjunction. When two values, A 
and B, are to be unified, and A is a disjunction, 
we cannot actually unify B with both alternatives 
of A, because one of the alternatives may become 
incompatible with B through later unifications. 
Instead we need to remember .a constraint hat 
at least one of the alternatives of A must remain 
compatible with B. 
An additional complication arises when one of 
the alternatives of a disjunction contains a value 
which is specified by a non-local path, a situa- 
tion which occurs frequently in Functional Unifi- 
cation Grammar. In Figure 2 the obj attribute in 
the description of the adjunct attribute is given 
the value < actor >, which means that the obj 
attribute is to be unified with the value found 
at the end of the path labeled by < actor > in 
the outermost enclosing structure. This unifica- 
tion with a non-local value can be performed only 
when the alternative which Contains it is the only 
alternative remaining in the disjunction. Oth- 
erwise, the case = objective attribute might be 
added to the value of < actor > prematurely, 
when the alternative containing adjunct is not 
used. Thus, the constraints on alternatives of a 
disjunction must also apply to any non-local val- 
ues contained within those alternatives. These 
complications, and the resulting proliferation of 
constraints, provide a practical motivation for the 
logical treatment given in this paper. We suggest 
a solution to the problem of representing non- 
local path values in Section 5.4. 
3 Log ica l  Formulas  for 
Feature  S t ructures  
The feature structure of Figure 1 can also be 
represented by a type of logical formula: 
die = case : (hOrn V acc) 
A a~'eement : ( 
(gender : fern A number : sing) 
V number : pl) 
This type of formula differs from standard propo- 
sitional ogic in that a theoretically unlimited set 
of atomic values is used in place of boolean val- 
ues. The labels of attributes bear a superficial 
resemblance to modal operators. Note that no 
information is added or subtracted by rewriting 
the feature matrix of Figure 1 as a logical formula. 
These two forms may be regarded as notational 
variants for expressing the same facts. While fea- 
ture matrices eem to be a more appealing and 
natural notation for displaying linguistic descrip- 
tions, logical formulas provide a precise interpre- 
tation which can be useful for computational nd 
mathematical purposes. 
Given this intuitive introduction we proceed to 
a more complete definition of this logic. 
4 A Log ica l  Semant ics  
As Pereira and Shieber \[11\] have pointed out, a 
grammatical formalism can be regarded in a way 
similar to other representation languages. Often 
it is useful to use a representation language which 
is disctinct from the objects it represents. Thus, 
it can be useful to make a distinction between the 
domain of feature structures and the domain of 
their descriptions. As we shall see, this distinc- 
tion allows a variety of notational devices to be 
used in descriptions, and interpreted in a consis- 
tent way with a uniform kind of structure. 
4.1 Domain of Feature 
Structures 
The PATR-II system uses directed acyclic 
graphs (dags) as an underlying representation for 
feature structures. In order to build complex 
feature structures, two primitive domains are re- 
quired: 
258 
cat  ~ S 
subj = \[ case = nominat ive \] 
actor =< sub.7' > 
voice = passive 
goal =< subj > 
cat = pp 
adjunct = prep = by 
obj =< actor >= \[ case = objective \] 
mood = declarative \] 
mood interrogative \] f 
Figure 2: Disjunctive specification containing non-local values, using the notation of FUG.  
1. atoms (A) 
2. labels (L) 
The elements of both domains are symbols, usu- 
ally denoted by character strings. Attribute I~ 
belt (e.g., acase~) are used to mark edges in a 
dag, and atoms (e.g., "gen z) are used as prim- 
itive values at vertices which have no outgoing 
edges. 
A dag may also be regarded as a transition 
graph for a partially specified deterministic fi- 
nite automaton (DFA). This automaton recog- 
nises strings of labels, and has final states which 
are atoms, as well as final states which encode no 
information. An automaton is formally described 
by a tuple 
.~ = (Q,L,  5,qo, F) 
where L is the set of labels above, 6 is a partial 
function from Q ? L to Q, and where certain el- 
ements of F may be atoms from the set A. We 
require that ~ be connected, acyclic, and have no 
transitions from any final states. 
DFAs  have several desirable properties as a do- 
main for feature structures: 
1. the value of any defined path can be denoted 
by a state of the automaton; 
2. finding the value of a path is interpreted by 
running the automaton on the path string; 
3. the automaton captures the crucial proper- 
ties of shared structure: 
(a) two paths which axe unified have the 
same state as a value, 
(b) unification is equivalent to a state- 
merge operation; 
4. the techniques of automata theory become 
available for use with feature structures. 
A consequence of item 3 above is that the dis- ," 
tinction between type identity and token identity 
it clearly revealed by an automaton; two objects 
are necessarily the same token, if and only if they 
are represented by the same state. 
One construct of automata theory, the Nerode 
relation, is useful to describe quivalent paths. If 
#q is an automaton, we let P(A) be the set of all 
paths of ~4, namely the set {z E L* : 5(q0, z) 
is defined }. The Nerode relation N(A)  is the 
equivalence relation defined on paths of P(~) by 
letting 
4 .2  Domain  o f  Descr ip t ions :  
Log ica l  Formulas  
We now define the domain FML of logical for- 
mulas which describe feature structures. Figure 3 
defines the syntax of well formed formulas. In the 
following sections ymbols from the Greek alpha- 
bet axe used to stand for arbitrary formulas in 
FML. The formulas NIL  and TOP axe intended 
to convey gno information z and ~inconsistent in- 
formation s respectively. Thus, NIL  corresponds 
to a unification variable, and TOP corresponds 
to unification failure. A formula l : ~b would indi- 
cate that a value has attribute l, which is itself a 
value satisfying the condition ~b. 
259 
NIL  
TOP 
aEA 
~< 191 >, . . . ,  < 19, >\] where each 19~ E L* 
l :~bwhere lELand~bEFML 
?v? 
Figure 3: The domain, FML, of logical formulas. 
Conjunction and disjunction will have their or- 
dinary logical meaning as operators in formulas. 
An interesting result is that conjunction can be 
used to describe unification. Unifying two struc- 
tures requires finding a structure which has all 
features of both structures; the conjunction of 
two formulas describes the structures which sat- 
isfy all conditions of both formulas. 
One difference between feature structures and 
their descriptions hould be noted. In a feature 
structure it is required that a particular attribute 
have a unique value, while in descriptions it is 
pouible to specify, using conjunction, several val- 
ues for the same attribute, as in the formula 
s bj : (19e.so. : 3) ^ s bj: : 
A feature structure satisfying such a description 
will contain a unique value for the attribute, 
which can be found by unifying all of the values 
that are specified in the description. 
Formulas may also contain sets of paths, de- 
noting equivalence classes. Each element of the 
set represents an existing path starting from the 
initial state of an automaton, and all paths in the 
set are required to have a common endpoint. If 
E = I< z >, < y >~, we will sometimes write E 
as < z >=< y >. This is the notation of PATR- 
II for pairs of equivalent paths. In subsequent 
sections we use E (sometimes with subscripts) to 
stand for a set of paths that belong to the same 
equivalence class. 
4.3 Interpretat ion of Formulas 
We can now state inductively the exact con- 
ditions under which an automaton Jl satisfies a 
formula: 
1. A ~ N IL  always; 
2. 11 ~ TOP never; 
3. /l ~ a ?=~ /I is the one-state automaton a 
with no transitions; 
4. A ~ E ?=~ E is a subset of an equivalence 
class of N(~); 
5. A ~ l : cb ?=~ A/ l  is defined 
and A/ I  ~ ~; 
where ~/ I  is defined by a subgraph of the au- 
tomaton A with start state 5(qo, l), that is 
ira = (Q,L, 6, qo, F), 
then .~/l = (Q', L, 6, 6(qo, l), f ' ) ;  
where Qi and F '  are formed from Q and F by 
removing any states which are unreachable from 
6(q0, 0. 
Any formula can be regarded as a specification 
for the set of automata which satisfy it. In the 
case of conjunctive formulas (containing no oc- 
curences of disjunction) the set of automata satis- 
fying the formula has a unique minimal element, 
with respect to subsumption.* For disjunctive 
formulas there may be several minimal elements, 
but always a finite number. 
4.4 Ca lcu lus  o f  Formulas  
It is possible to write many formulas which 
have an identical interpretation. For example, the 
formulas given in the equation below are satisfied 
by the same set of automata. 
case : (gen V ace V dat) A case : ace = case : ace 
In this simple example it is clear that the right 
side of the formula is equivalent o the left side, 
and that it is simpler. In more complex examples 
it is not always obvious when two formulas are 
equivalent. Thus, we are led to state the laws of 
equivalence shown in Figure 4. Note that equiv- 
alence (26) is added only to make descriptions of 
cyclic structures unsatisfiable. 
1A subsumption order can be defined for the domain of 
automata, just as it is defined for dags by Shieber \[15\]. 
A formal definition of subsurnption for this domain ap- 
pears in \[12\]. 
260 
Failure: 
l : TOP  = TOP 
Conjunction (unification}: 
? A TOP = TOP 
CANIL  = ~b 
aAb = TOP,  Va, b6Aanda#b 
aA l :?  = TOP 
/:?AZ:,#, = t:(?A?) 
Disjunction: 
? v NIL  = NIL  
?vTOP = 
z :?v~:?  = t : (?v?)  
Commutative: 
?A? = ?^? 
?v? = ?v? 
Associative: 
(?^?)^x = ?^(?^x)  
(?v?)vx  = ? ,v (?vx)  
Idempotent: 
?A~ = ~b 
4v4 = @ 
Distributive: 
(~v?)^x = (~^x) v(?^x) 
(~,A?)Vx  = (~VX)^(?VX)  
Absorption: 
(?A?)V~ = ~, 
(?v?)A? = 4, 
Path Equivalence: 
E1 AE2 
E, ^ E2 
EAz :c  
E 
l :E  
{,) 
E 
----- E2 whenever E1 _C E2 
= E1 ^  (E2 u{zy  I ~ e El}) 
for any y such that 3z : z ~ El  and zy E E2 
-- EA(A  y :c )  wherexeE 
glEE 
= E A {z} if" z is a prefix of a string in E 
= NIL  
= TOP for any E such that there are strings 
z, zy  E E and y # e 
(1) 
(2) 
(3) 
(4) 
(s} 
(6} 
(7) 
is) 
(9) 
(1o) 
(11) 
(n) 
(13) 
(14) 
(15) 
(16) 
(17) 
(18) 
(19) 
(20) 
(21) 
(22) 
(23) 
(24) 
(2s) 
(26) 
Figure 4: Laws of Equivalence for Formulas. 
261 
5 Complex i ty  of  D is junct ive  
Descr ip t ions  
To date, the primary benefit of using logical 
formulas to describe feature structures has been 
the clarification of several problems that arise 
with disjunctive descriptions. 
5 .1  NP-completeness  o f  cons is tency  
problem fo r  fo rmulas  
One consequence of describing feature struc- 
tures by logical formulas is that it is now rel- 
atively easy to analyse the computational com- 
plexity of various problems involving feature 
structures. It turns out that the satisfiability 
problem for CNF formulas of propositional logic 
can be reduced to the consistency (or satisfia- 
bility) problem for formulas in FML. Thus, the 
consistency problem for formulas in FML is NP- 
complete. It follows that any unification algo- 
rithm for FML formulas will have non-polynomial 
worst-case complexity (provided P ~ NP!), since 
a correct unification algorithm must check for 
consistency. 
Note that disjunction is the source of this com- 
plexity. If disjunction is eliminated from the do- 
main of formulas, then the consistency problem is 
in P. Thus systems, such as the original PATR-II, 
which do not use disjunction in their descriptions 
of feature structures, do not have to contend with 
this source of NP-completeness. 
5 .2  D is junct ive  Normal  Form 
A formula is in disjt, neti,~s normal form (DNF) 
if and only if it has the form ~1 V .. .  v ~bn, where 
each ~i is either 
1. sEA  
2. ~bx A . . .  A ~bm, where each ~bl is either 
(a) lx : . . .  : lk : a, where a E A, and no 
path occurs more than once 
(b) \[< pl > , . . . ,<  p~ >\], where each p~ E 
L*, and each set denotes an equivalence 
class of paths, and all such sets disjoint. 
The formal equivalences given in Figure 4 al- 
low us to transform any satisfiable formula into 
its disjunctive normal form, or to TOP if it is 
not satisfiable. The algorithm for finding a nor- 
mal form requires exponential time, where the 
exponent depends on the number of disjunctions 
in the formula (in the worst case). 
5.3 Avoiding expansion to DNF 
Most of the systems which are currently used 
to implement unification-based grammars depend 
on an expansion to disjunctive normal form in 
order to compute with disjunctive descriptions. 2 
Such systems are exemplified by Definite Clause 
Grammar \[10\], which eliminates disjunctive terms 
by multiplying rules which contain them into al- 
ternative clauses. Kay's parsing procedure for 
Functional Unification Grammar \[8\] also requires 
expanding functional descriptions to DNF before 
they are used by the parser. This expansion may 
not create much of a problem for grammars con- 
tainlng a small number of disjunctions, but if the 
grammar contains 100 disjunctions, the expan- 
sion is clearly not feasible, due to the exponential 
sise of the DNF. 
Ait-Kaci \[1\] has pointed out that the expan- 
sion to DNF is not always necessary, in work with 
type structures which are very similar to the fea- 
ture structures that we have described here. Al- 
though the NP-completeness result cited above 
indicates that any unification algorithm for dis- 
junctive formulas will have exponential complex- 
ity in the worst case, it is possible to develop algo- 
rithms which have an average complexity that is 
less prohibitive. Since the exponent of the com- 
plexity function depends on the number of dis- 
junctions in a formula, one obvious way to im- 
prove the unification algorithm is to reduce the 
number of disjunctions in the formula be/ors ez- 
pan.sion to DNF. Fortunately the unification of 
two descriptions frequently results in a reduction 
of the number of alternatives that remain consis- 
tent. Although the fully expanded formula may 
be required as a final result, it is expedient to de- 
lay the expansion whenever possible, until after 
any desired unifications are performed. 
The algebraic laws given in Figure 4 provide 
a sound basis for simplifying formulas contain- 
ing disjunctive values without expanding to DNF. 
Our calculus differs from the calculus of Ait- 
Kaci by providing a uniform set of equivalences 
for formulas, including those that contain dis- 
junction. These equivalences make it possible to ~ 
2One exception is Kar t tunen 's  implementation, which 
was described in Section 2, but  it handles only value 
disjunctions, and does not handle non-local path  values 
embedded within disjunctions. 
262 
eliminate inconsistent terms before expanding to 
DNF. Each term thus eliminated may reduce, by 
as much as half, the sise of the expanded formula. 
5.4  Representing Non-local Paths 
The logic contains no direct representation for 
non-local paths of the type described in Sec- 
tion 2. The reason is that these cannot be in- 
terpreted without reference to the global con- 
text of the formula in which they occur. Recall 
that in Functional Unification Grammar a non- 
local path denotes the value found by extracting 
each of the attributes labeled by the path in suc- 
cessively embedded feature structures, beginning 
with the entire structure currently under consid- 
eration. Stated formally, the desired interprets- 
tion of I :< p > is 
A~l :<p> in the context o f~ 
3B ~ and 3wEL*  : 
E/ to  = A and 5(qo, ,  l) = 5(qo, ,p).  
This interpretation does not allow a direct com- 
parison of the non-local path value with other 
values in the formula. It remains an unknown 
quantity unless the environment is known. 
Instead of representing non-local paths directly 
in the logic, we propose that they can be used 
within a formula as a shorthand, but that all 
paths in the formula must be expanded before 
any other processing of the formula. This path 
expansion is carried out according to the equiva~ 
lences 9 and 6. 
After path expansion all strings of labels in a 
formula denote transitions from a common origin, 
so the expressions containing non-local paths can 
be converted to the equivalence class notation, 
using the schema 
11 : . . .  : In  :<p> = \[<11 . . . .  ,In >,<p >\]. 
Consider the passive voice alternative of the de- 
scription of Figure 2, shown here in Figure 5. 
This description is also represented by the first 
formula of Figure 6. The formulas to the right in 
Figure 6 are formed by 
1. applying path expansion, 
2. converting the attributes containing non- 
local path values to formulas representing 
equivalence classes of paths. 
By following this procedure, the entire functional 
description of Figure 2 can be represented by the 
logical formula given in Figure 7. 
voice = passive 
goal =< subj  > 
cat = pp 
prep = by 
adjenct  = 
obj =< actor > 
= \[ case----objective \] 
Figure 5: Functional 
non-local values. 
voice : passive 
^ goal :< subj  > 
^ adjunct  : (eat : pp 
^ prep : by 
^ obj :< actor > 
^ obj : ease : objective) 
Description containing 
path 
expansion 
voice : passive 
^ goal :< sub3" > 
^ adjunct  : eat : pp 
^ adjunct  : prep : by 
^ adjunct  : obj :< actor > 
^ adjunct  : obj : ease : objective 
path 
equivalence 
==~ 
voice : passive 
^ \[< goat >, < subj  >\] 
^ adjunct  : cat : pp 
/~ adjunct  : prep : by 
^ \[< adjunct  obj >, < actor >\] 
^ ad junct  : obj : case : objective 
Figure 6: Conversion of non-local values to equiv- 
alence classes of paths. 
263 
cat : s 
A sub j  : case : nominat ive  
A 
( (vdce  : ac~ve 
^ \[< acto,. >, < subj >i) 
V 
(voice : pas~ve 
^ |< goal >, < subj >\] 
A adjunct  : cat : pp 
A adjunct : prep : by 
A \[< ad junct  obj >, < actor >\] 
^ adjunct  : obj : case : objective)} 
^ 
(mood : declarative 
V 
mood : interrogat ive) 
Figure 7: Logical formula representing the de- 
scription of Figure 2. 
It is now possible to unify the description of 
Figure 7 (call this X in the following discus- 
sion) with another description, making use of the 
equivalence classes to simplify the result. Con- 
sider unifTing X with the description 
Y = actor : case : nominat ive .  
The commutative law (10) makes it possible to 
unify Y with any of the conjuncts of X. If we 
unify Y with the disjunction which contains the 
vo/ce attributes, we can use the distributive law 
(16) to unify Y with both disjuncts. When Y is 
unified with the term containing 
\[< adjunct  obj >, < actor >\], 
the equivalence (22) specifies that we can add the 
term 
adjunct  : obj : case : nominat ive .  
This term is incompatible with the term 
ad junct  : obj : case : objective, 
and by applying the equivalences (6, 4, 1, and 
2) we can transform the entire disjunct to TOP.  
Equivalence (8) specifies that this disjunction can 
be eliminated. Thus, we are able to use the 
path equivalences during unification to reduce the 
number of disjunctions in a formula without ex- 
panding to DNF. 
Note that path expansion does not require an 
expansion to full DNF, since disjunctions are not 
multiplied. While the DNF expansion of a for- 
mula may be exponentially arger than the origi- 
nal, the path expansion is at most quadratically 
larger. The size of the formula with paths ex- 
panded is at most n x p, where n is the length 
of the original formula, and p is the length of the 
longest path. Since p is generally much less than 
n the size of the path expansion is usually not a 
very large quadratic. 
5.5 Va lue  D is junct ion  and  
General Disjunction 
The path expansion procedure illustrated in 
Figure 6 can also be used to transform formulas 
containing value disjucntion into formulas con- 
taining general disjunction. For the reasons given 
above, value disjunctions which contain non-local 
path expressions must be converted into general 
disjunctions for further simplification. 
While it is possible to convert value disjunc- 
tions into general disjunctions, it is not always 
possible to convert general disjunctions into value 
disjunctions. For example, the first disjunction 
in the formula of Figure 7 cannot be converted 
into a value disjunction. The left side of equiva- 
lence (9) requires both disjuncts to begin with 
a common label prefix. The terms of these 
two disjuncts contain several different prefixes 
(voice, actor, subj ,  goat, and adjunct) ,  so they 
cannot be combined into a common value. 
Before the equivalences ofsection 4 were formu- 
lated, the first author attempted to implement a 
facility to represent disjunctive feature structures 
with non-local paths using only value disjunction. 
It seemed that the unification algorithm would be 
simpler if it had to deal with disjuncti+ns only 
in the context of attribute values, rather than 
in more general contexts. While it w~ possi- 
ble to write down grammatical definitions using 
only value disjunction, it was very difficult to 
achieve a correct unification algorithm, because 
each non-local path was much like an unknown 
variable. The logical calculus presented here 
clearly demonstrates that a representation f gen- 
eral disjunction provides a more direct method to 
determine the values for non-local paths. 
264 
6 Implementation 
The calculus described here is currently being 
implemented as a program which selectively ap- 
plies the equivalences of Figure 4 to simplify for- 
mulas. A strategy (or algorithm) for simplifying 
formulas corresponds to choosing a particular or- 
der in which to apply the equivalences whenever 
more than one equivalence matches the form of 
the formula. The program will make it possi- 
ble to test and evaluate different strategies, with 
the correctness of any such strategy following di- 
rectly from the correctness of the calculus. While 
this program is primarily of theoretical interest, it 
might yield useful improvements to current meth- 
ods for processing feature structures. 
The original motivation for developing this 
treatment of feature structures came from work 
on an experimental parser based on Nigel \[9\], a 
large systemic grammar of English. The parser is 
being developed at the USC/Information Sciences 
Institute by extending the PATR-II system of SRI 
International. The systemic grammar has been 
translated into the notation of Functional Uni- 
fication Grammar, as described in \[6\]. Because 
this grammar contains a large number (several 
hundred) of disjunctions, it has been necessary to 
extend the unification procedure so that it han- 
dles disjunctive values containing non-local paths 
without expansion to DNF. We now think that 
this implementation f a relatively large grammar 
can be made more tractable by applying some of 
the transformations to feature descriptions which 
have been suggested by the logical calculus. 
7 Conclusion 
We have given a precise logical interpreta- 
tion for feature structures and their descriptions 
which are used in unification-based grammar for- 
malisms. This logic can be used to guide and im- 
prove implementations of these grammmm, and 
the processors which use them. It has allowed 
a closer examination of several sources of com- 
plexity that are present in these grammars, par- 
ticularly when they make use of disjunctive de- 
scriptions. We have found a set logical equiva- 
lences helpful in suggesting ways of coping with 
this complexity. 
It should be possible to augment this logic to 
include characterizations of negation and implica- 
tion, which we are now developing. It may  also be 
worthwhile to integrate the logic of feature struc- 
tures with other grammatical formalisms based 
on logic, such as DCG \[10\] and LFP \[13\]. 
References 
\[1\] Ait-Kaci, H. A New Model of Computa- 
tion Based on a Calculus of Type Subsump- 
tion. PhD thesis, University of Pennsylva- 
nia, 1984. 
\[2\] Gazdar, G., E. Klein, G.K. Pullum, and I.A. 
Sag. Generalized Phrase Structure Gram- 
mar. BlackweU Publishing, Oxford, Eng- 
land, and Harvard University Press, Cam- 
bridge, Massachusetts, 1985. 
\[3\] G.R. Kress, editor. Halliday: System and 
Function in Language. Oxford University 
Press, London, England, 1976. 
\[4\] Kaplan, R. and J. Bresnan. Lexical Func- 
tional Grammar: A Formal System for 
Grammatical Representation. I  J. Bresnan, 
editor, The Mental Representation ofGram- 
matical Relations. MIT Press, Cambridge, 
Massachusetts, 1983. 
\[5\] Karttunen, L. Features and Values. In Pro- 
ceedings of the Tenth International Confer- 
ence on Computational Linguistics, Stanford 
University, Stanford, California, July 2-7, 
1984. 
\[6\] Kasper, R. Systemic Grammar and Func- 
tional Unification Grammar. In J. Ben- 
son and W. Greaves, editors, Proceedings of 
the I~ h International Systemics Workshop, 
Norwood, New Jersey: Ablex (forthcoming). 
\[7\] Kay, M. Functional Grammar. In Pro- 
ceedings of the Fifth Annual Meeting of the 
Berkeley Linguistics Society, Berkeley Lin- 
guistics Society, Berkeley, California, Febru- 
ary 17-19, 1979. 
\[8\] Kay, M. Parsing in Functional Unification 
Grammar. In D. Dowty, L. Kartunnen, 
and A. Zwicky, editors, Natural Language 
Parsing. Cambridge University Press, Cam- 
bridge, England, 1985. 
\[9\] Mann, W.C. and C. Matthiessen. Nigel: 
A Systemic Grammar for Text Generation. 
USC / Information Sciences Institute, RR- 
83-105. Also appears in R. Benson and 
J. Greaves, editors, Systemic Perspectives 
on Discourse: Selected Papers Papers from 
the Ninth International Systemics Work- 
shop, Ablex, London, England, 1985. 
265 
\[10\] Pereira, F. C. N. and D. H. D. Warren. Defi- 
nite clause grammars for language analysis - 
a survey of the formalism and a comparison 
with augmented transition etworks. Arh'~- 
?ial Intelligence, 13:231-278, 1980. 
\[11\] Pereira, F. C. N. and S. M. Shieber. The se- 
mantics of grammar formalisms seen as com- 
puter languages. In Proceedings of the Tenth 
International Conference on Computational 
Linguist,s, Stanford University, Stanford, 
California, July 2-7, 1984. 
\[12\] Rounds, W. C. and R. Kasper. A Complete 
Logical Calculus for Record Strucutres Rep- 
resenting Linguistic Information. Submitted 
to the ~ymposium onLogic in Computer Sci- 
ence, to be held June 16-18, 1986. 
\[13\] Rounds, W. C. LFP: A Logic for Linguis- 
tic Descriptions and an Analysis of its Com- 
plexlty. Submitted to Computational Lir,- 
Cui.~tics. 
\[14\] Shieber, S. M. The design of a computer lan- 
guage for linguistic information. In Proceed- 
ing8 o\[ t~ Tenth International Con/erence 
on Computational Linguistics, Stanford Uni- 
versity, Stanford, California, July 2-7, 1984. 
\[15\] Shieber, S. M. An Introduction to 
Uai~ation-bo~ed Approaches to Grammar. 
Chicago: University of Chicago Press, CSLI 
Lecture Notes Series (forthcoming). 
266 
