Topological Dependency Trees:
A Constraint-Based Account of Linear Precedence
Denys Duchier
Programming Systems Lab
Universita?t des Saarlandes, Geb. 45
Postfach 15 11 50
66041 Saarbru?cken, Germany
duchier@ps.uni-sb.de
Ralph Debusmann
Computational Linguistics
Universita?t des Saarlandes, Geb. 17
Postfach 15 11 50
66041 Saarbru?cken, Germany
rade@coli.uni-sb.de
Abstract
We describe a new framework for de-
pendency grammar, with a modular de-
composition of immediate dependency
and linear precedence. Our approach
distinguishes two orthogonal yet mutu-
ally constraining structures: a syntactic
dependency tree and a topological de-
pendency tree. The syntax tree is non-
projective and even non-ordered, while
the topological tree is projective and
partially ordered.
1 Introduction
Linear precedence in so-called free word order
languages remains challenging for modern gram-
mar formalisms. To address this issue, we pro-
pose a new framework for dependency gram-
mar which supports the modular decomposition
of immediate dependency and linear precedence.
Duchier (1999) formulated a constraint-based ax-
iomatization of dependency parsing which char-
acterized well-formed syntax trees but ignored is-
sues of word order. In this article, we develop a
complementary approach dedicated to the treat-
ment of linear precedence.
Our framework distinguishes two orthogonal,
yet mutually constraining structures: a syntactic
dependency tree (ID tree) and a topological de-
pendency tree (LP tree). While edges of the ID
tree are labeled by syntactic roles, those of the
LP tree are labeled by topological fields (Bech,
1955). The shape of the LP tree is a flattening of
the ID tree?s obtained by allowing nodes to ?climb
up? to land in an appropriate field at a host node
where that field is available. Our theory of ID/LP
trees is formulated in terms of (a) lexicalized con-
straints and (b) principles governing e.g. climbing
conditions.
In Section 2 we discuss the difficulties pre-
sented by discontinuous constructions in free
word order languages, and briefly touch on the
limitations of Reape?s (1994) popular theory of
?word order domains?. In Section 3 we introduce
the concept of topological dependency tree. In
Section 4 we outline the formal framework for
our theory of ID/LP trees. Finally, in Section 5
we illustrate our approach with an account of the
word-order phenomena in the verbal complex of
German verb final sentences.
2 Discontinuous Constructions
In free word order languages, discontinuous con-
structions occur frequently. German, for example,
is subject to scrambling and partial extraposition.
In typical phrase structure based analyses, such
phenomena lead to e.g. discontinuous VPs:
(1) (dass)
(that)
einen
a
Mann
manacc
Maria
Marianom
zu
to
lieben
love
versucht
tries
whose natural syntax tree exhibits crossing edges:
S
NP V
VP
NP V
DET N
(dass) einen Mann Maria zu lieben versucht
Since this is classically disallowed, discontinu-
ous constituents must often be handled indirectly
through grammar extensions such as traces.
Reape (1994) proposed the theory of word or-
der domains which became quite popular in the
HPSG community and inspired others such as
Mu?ller (1999) and Kathol (2000). Reape distin-
guished two orthogonal tree structures: (a) the un-
ordered syntax tree, (b) the totally ordered tree of
word order domains. The latter is obtained from
the syntax tree by flattening using the operation
of domain union to produce arbitrary interleav-
ings. The boolean feature [??] of each node con-
trols whether it must be flattened out or not. In-
finitives in canonical position are assigned [?+]:
(dass)
S
NP
Maria
VP[?+]
NP[??]
DET
einen
N
Mann
V
zu lieben
V
versucht
Thus, the above licenses the following tree of
word order domains:
(dass)
S
NP
DET
einen
N
Mann
NP
Maria
V
zu lieben
V
versucht
Extraposed infinitives are assigned [??]:
(dass)
S
NP
Maria
V
versucht
VP[??]
NP
DET
einen
N
Mann
V
zu lieben
As a consequence, Reape?s theory correctly pre-
dicts scrambling (2,3) and full extraposition (4),
but cannot handle the partial extraposition in (5):
(2) (dass) Maria einen Mann zu lieben versucht
(3) (dass) einen Mann Maria zu lieben versucht
(4) (dass) Maria versucht, einen Mann zu lieben
(5) (dass) Maria einen Mann versucht, zu lieben
3 Topological Dependency Trees
Our approach is based on dependency grammar.
We also propose to distinguish two structures: (a)
a tree of syntactic dependencies, (b) a tree of topo-
logical dependencies. The syntax tree (ID tree) is
unordered and non-projective (i.e. it admits cross-
ing edges). For display purposes, we pick an ar-
bitrary linear arrangement:
(dass) Maria einen Mann zu lieben versucht
det
objec
t z
uvinfsubject
The topological tree (LP tree) is partially ordered
and projective:
(dass) Maria einen Mann zu lieben versucht
n
d
n v
vdf
mfmf vc
Its edge labels are called (external) fields and are
totally ordered: df ? mf ? vc. This induces a
linear precedence among the daughters of a node
in the LP tree. This precedence is partial because
daughters with the same label may be freely per-
muted.
In order to obtain a linearization of a LP tree,
it is also necessary to position each node with
respect to its daughters. For this reason, each
node is also assigned an internal field (d, n, or v)
shown above on the vertical pseudo-edges. The
set of internal and external fields is totally or-
dered: d ? df ? n ? mf ? vc ? v
Like Reape, our LP tree is a flattened version of
the ID tree (Reape, 1994; Uszkoreit, 1987), but
the flattening doesn?t happen by ?unioning up?;
rather, we allow each individual daughter to climb
up to find an appropriate landing place. This idea
is reminiscent of GB, but, as we shall see, pro-
ceeds rather differently.
4 Formal Framework
The framework underlying both ID and LP trees
is the configuration of labeled trees under valency
(and other) constraints. Consider a finite set L
of edge labels, a finite set V of nodes, and E ?
V ? V ? L a finite set of directed labeled edges,
such that (V,E) forms a tree. We write w???`w?
for an edge labeled ` from w to w?. We define the
`-daughters `(w) of w ? V as follows:
`(w) = {w? ? V | w???`w? ? E}
We write L? for the set of valency specifications ?`
defined by the following abstract syntax:
?` ::= ` | `? | `? (` ? L)
A valency is a subset of L?. The tree (V,E) satis-
fies the valency assignment valency : V ? 2L? if
for all w ? V and all ` ? L:
` ? valency(w) ? |`(w)| = 1
`? ? valency(w) ? |`(w)| ? 1
`? ? valency(w) ? |`(w)| ? 0
otherwise ? |`(w)| = 0
4.1 ID Trees
An ID tree (V,EID, lex, cat, valencyID) consists
of a tree (V,EID) with EID ? V ? V ?R, where
the set R of edge labels (Figure 1) represents syn-
tactic roles such as subject or vinf (bare infinitive
argument). lex : V ? Lexicon assigns a lexi-
cal entry to each node. An illustrative Lexicon is
displayed in Figure 1 where the 2 features cats
and valencyID of concern to ID trees are grouped
under table heading ?Syntax?. Finally, cat and
valencyID assign a category and an R? valency to
each node w ? V and must satisfy:
cat(w) ? lex(w).cats
valencyID(w) = lex(w).valencyID
(V,EID) must satisfy the valencyID assignment as
described earlier. For example the lexical entry
for versucht specifies (Figure 1):
valencyID(versucht) = {subject, zuvinf}
Furthermore, (V,EID) must also satisfy the
edge constraints stipulated by the grammar
(see Figure 1). For example, for an edge
w?????det w? to be licensed, w? must be assigned
category det and both w and w? must be assigned
the same agreement.1
4.2 LP Trees
An LP tree (V,ELP, lex, valencyLP, fieldext, fieldint)
consists of a tree (V,ELP) with ELP ?
V ? V ? Fext, where the set Fext of edge
labels represents topological fields (Bech, 1955):
df the determiner field, mf the ?Mittelfeld?, vc
1Issues of agreement will not be further considered in this
paper.
the verbal complement field, xf the extraposition
field. Features of lexical entries relevant to LP
trees are grouped under table heading ?Topology?
in Figure 1. valencyLP assigns a F?ext valency
to each node and is subject to the lexicalized
constraint:
valencyLP(w) = lex(w).valencyLP
(V,ELP) must satisfy the valencyLP assignment
as described earlier. For example, the lexical en-
try for zu lieben2 specifies:
valencyLP(zu lieben2) = {mf?, xf?}
which permits 0 or more mf edges and at most
one xf edge; we say that it offers fields mf and xf.
Unlike the ID tree, the LP tree must be projective.
The grammar stipulates a total order on Fext,
thus inducing a partial linear precedence on each
node?s daughters. This order is partial because
all daughters in the same field may be freely per-
muted: our account of scrambling rests on free
permutations within the mf field. In order to ob-
tain a linearization of the LP tree, it is necessary
to specify the position of a node with respect to its
daughters. For this reason each node is assigned
an internal field in Fint. The set Fext ? Fint is to-
tally ordered:
d ? df ? n ? mf ? vc ? v ? xf
In what (external) field a node may land and
what internal field it may be assigned is deter-
mined by assignments fieldext : V ? Fext and
fieldint : V ? Fint which are subject to the lexi-
calized constraints:
fieldext(w) ? lex(w).fieldext
fieldint(w) ? lex(w).fieldint
For example, zu lieben1 may only land in field vc
(canonical position), and zu lieben2 only in xf (ex-
traposed position). The LP tree must satisfy:
w???`w? ? ELP ? ` = fieldext(w?)
Thus, whether an edge w???`w? is licensed de-
pends both on valencyLP(w) and on fieldext(w?).
In other words: w must offer field ` and w? must
accept it.
For an edge w???`w? in the ID tree, we say that
w is the head of w?. For a similar edge in the LP
Grammar Symbols
C = {det , n, vfin, vinf , vpast, zuvinf} (Categories)
R = {det, subject, object, vinf, vpast, zuvinf} (Syntactic Roles)
Fext = {df, mf, vc, xf} (External Topological Fields)
Fint = {d, n, v} (Internal Topological Fields)
d ? df ? n ? mf ? vc ? v ? xf (Topological Ordering)
Edge Constraints
w?????????det w? ? cat(w?) = det ? agr(w) = agr(w?)
w?????????subject w? ? cat(w?) = n ? agr(w) = agr(w?) ? NOM
w?????????object w? ? cat(w?) = n ? agr(w?) ? ACC
w?????????vinf w? ? cat(w?) = vinf
w?????????vpast w? ? cat(w?) = vpast
w?????????zuvinf w? ? cat(w?) = zuvinf
Lexicon
Word Syntax Topology
cats valencyID fieldint fieldext valencyLP
einen {det} {} {d} {df} {}
Mann {n} {det} {n} {mf} {df?}
Maria {n} {} {n} {mf} {}
lieben {vinf} {object?} {v} {vc} {}
geliebt {vpast} {object?} {v} {vc} {}
ko?nnen1 {vinf} {vinf} {v} {vc} {vc?}
ko?nnen2 {vinf , vpast} {vinf} {v} {xf} {mf?, vc?, xf?}
wird {vfin} {subject, vinf} {v} {vc} {mf?, vc?, xf?}
haben {vinf} {vpast} {v} {xf} {mf?, vc?, xf?}
hat {vinf} {subject, vpast} {v} {vc} {mf?, vc?, xf?}
zu lieben1 {zuvinf} {object?} {v} {vc} {}
zu lieben2 {zuvinf} {object?} {v} {xf} {mf?, xf?}
versucht {vfin} {subject, zuvinf} {v} {vc} {mf?, vc?, xf?}
Figure 1: Grammar Fragment
tree, we say that w is the host of w? or that w?
lands on w. The shape of the LP tree is a flat-
tened version of the ID tree which is obtained by
allowing nodes to climb up subject to the follow-
ing principles:
Principle 1 a node must land on a transitive
head2
Principle 2 it may not climb through a barrier
We will not elaborate the notion of barrier which
is beyond the scope of this article, but, for exam-
ple, a noun will prevent a determiner from climb-
ing through it, and finite verbs are typically gen-
eral barriers.
2This is Bro?cker?s terminology and means a node in the
transitive closure of the head relation.
Principle 3 a node must land on, or climb higher
than, its head
Subject to these principles, a node w? may climb
up to any host w which offers a field licensed by
fieldext(w?).
Definition. An ID/ LP analysis is a tuple (V,
EID, ELP, lex, cat, valencyID, valencyLP, fieldext,
fieldint) such that (V,EID, lex, cat, valencyID) is
an ID tree and (V,ELP, lex, valencyLP, fieldext,
fieldint) is an LP tree and all principles are sat-
isfied.
Our approach has points of similarity with
(Bro?ker, 1999) but eschews modal logic in fa-
vor of a simpler and arguably more perspicuous
constraint-based formulation. It is also related
to the lifting rules of (Kahane et al, 1998), but
where they choose to stipulate rules that license
liftings, we opt instead for placing constraints on
otherwise unrestricted climbing.
5 German Verbal Phenomena
We now illustrate our theory by applying it to the
treatment of word order phenomena in the verbal
complex of German verb final sentences. We as-
sume the grammar and lexicon shown in Figure 1.
These are intended purely for didactic purposes
and we extend for them no claim of linguistic ad-
equacy.
5.1 VP Extraposition
Control verbs like versuchen or versprechen al-
low their zu-infinitival complement to be option-
ally extraposed. This phenomenon is also known
as optional coherence.
(6) (dass) Maria einen Mann zu lieben versucht
(7) (dass) Maria versucht, einen Mann zu lieben
Both examples share the following ID tree:
(dass) Maria einen Mann zu lieben versucht
det
objec
t z
uvinfsubject
Optional extraposition is handled by having two
lexical entries for zu lieben. One requires it to
land in canonical position:
fieldext(zu lieben1) = {vc}
the other requires it to be extraposed:
fieldext(zu lieben2) = {xf}
In the canonical case, zu lieben1 does not offer
field mf and einen Mann must climb to the finite
verb:
(dass) Maria einen Mann zu lieben versucht
n
d
n v
vdf
mfmf vc
In the extraposed case, zu lieben2 itself offers
field mf:
(dass) Maria versucht einen Mann zu lieben
n
v
d
n
v
mf
df
mf
xf
5.2 Partial VP Extraposition
In example (8), the zu-infinitive zu lieben is extra-
posed to the right of its governing verb versucht,
but its nominal complement einen Mann remains
in the Mittelfeld:
(8) (dass) Maria einen Mann versucht, zu lieben
In our account, Mann is restricted to land in an mf
field which both extraposed zu lieben2 and finite
verb versucht offer. In example (8) the nominal
complement simply climbed up to the finite verb:
(dass) Maria einen Mann versucht zu lieben
n
d
n
v
v
mf
df
mf xf
5.3 Obligatory Head-final Placement
Verb clusters are typically head-final in German:
non-finite verbs precede their verbal heads.
(9) (dass)
(that)
Maria
Marianom
einen
a
Mann
manacc
lieben
love
wird
will
(10)*(dass) Maria einen Mann wird lieben
The ID tree for (9) is:
(dass) Maria einen Mann lieben wird
subject
det
obje
ct
vinf
The lexical entry for the bare infinitive lieben re-
quires it to land in a vc field:
fieldext(lieben) = {vc}
therefore only the following LP tree is licensed:3
(dass) Maria einen Mann lieben wird
n
d
n v
v
mf
df
mf vc
where mf ? vc ? v, and subject and ob-
ject, both in field mf, remain mutually unordered.
Thus we correctly license (9) and reject (10).
5.4 Optional Auxiliary Flip
In an auxiliary flip construction (Hinrichs and
Nakazawa, 1994), the verbal complement of an
auxiliary verb, such as haben or werden, follows
rather than precedes its head. Only a certain class
of bare infinitive verbs can land in extraposed po-
sition. As we illustrated above, main verbs do
not belong to this class; however, modals such as
ko?nnen do, and may land in either canonical (11)
or in extraposed (12) position. This behavior is
called ?optional auxiliary flip?.
(11) (dass)
(that)
Maria
Maria
einen
a
Mann
man
lieben
love
ko?nnen
can
wird
will
(that) Maria will be able to love a man
(12) (dass) Maria einen Mann wird lieben ko?nnen
Both examples share the following ID tree:
(dass) Maria einen Mann wird lieben ko?nnen
subject
det
object
vinf
vinf
Our grammar fragment describes optional auxil-
iary flip constructions in two steps:
? wird offers both vc and xf fields:
valencyID(wird) = {mf?, vc?, xf?}
? ko?nnen has two lexical entries, one canonical
and one extraposed:
fieldext(ko?nnen1) = {vc}
fieldext(ko?nnen2) = {xf}
3It is important to notice that there is no spurious ambi-
guity concerning the topological placement of Mann: lieben
in canonical position does not offer field mf; therefore Mann
must climb to the finite verb.
Thus we correctly account for examples (11) and
(12) with the following LP trees:
(dass) Maria einen Mann lieben ko?nnen wird
n
d
n
v
v
v
mf
df
mf
vc
vc
(dass) Maria einen Mann wird lieben ko?nnen
n
d
n
v
v
v
mf
df
mf
vc
xf
The astute reader will have noticed that other LP
trees are licensed for the earlier ID tree: they are
considered in the section below.
5.5 V-Projection Raising
This phenomenon related to auxiliary flip de-
scribes the case where non-verbal material is in-
terspersed in the verb cluster:
(13) (dass) Maria wird einen Mann lieben ko?nnen
(14)*(dass) Maria lieben einen Mann ko?nnen wird
(15)*(dass) Maria lieben ko?nnen einen Mann wird
The ID tree remains as before. The NP einen
Mann must land in a mf field. lieben is in canon-
ical position and thus does not offer mf, but
both extraposed ko?nnen2 and finite verb wird do.
Whereas in (12), the NP climbed up to wird, in
(13) it climbs only up to ko?nnen.
(dass) Maria wird einen Mann lieben ko?nnen
n
v
d
n v
v
mf
df
mf vc
xf
(14) is ruled out because ko?nnen must be in the
vc of wird, therefore lieben must be in the vc
of ko?nnen, and einen Mann must be in the mf of
wird. Therefore, einen Mann must precede both
lieben and ko?nnen. Similarly for (15).
5.6 Intermediate Placement
The Zwischenstellung construction describes
cases where the auxiliary has been flipped but its
verbal argument remains in the Mittelfeld. These
are the remaining linearizations predicted by our
theory for the running example started above:
(16) (dass) Maria einen Mann lieben wird ko?nnen
(17) (dass) einen Mann Maria lieben wird ko?nnen
where lieben has climbed up to the finite verb.
5.7 Obligatory Auxiliary Flip
Substitute infinitives (Ersatzinfinitiv) are further
examples of extraposed verbal forms. A sub-
stitute infinitive exhibits bare infinitival inflec-
tion, yet acts as a complement of the perfectizer
haben, which syntactically requires a past partici-
ple. Only modals, AcI-verbs such as sehen and
lassen, and the verb helfen can appear in substi-
tute infinitival inflection.
A substitute infinitive cannot land in canonical
position; it must be extraposed: an auxiliary flip
involving a substitute infinitive is called an ?oblig-
atory auxiliary flip?.
(18) (dass)
(that)
Maria
Maria
einen
a
Mann
man
hat
has
lieben
love
ko?nnen
can
(that) Maria was able to love a man
(19) (dass) Maria hat einen Mann lieben ko?nnen
(20)*(dass) Maria einen Mann lieben ko?nnen hat
These examples share the ID tree:
(dass) Maria einen Mann hat lieben ko?nnen
subject
det
object
xvinf
vinf
hat subcategorizes for a verb in past participle in-
flection because:
valencyID(hat) = {subject, vpast}
and the edge constraint for w??????vpast w? requires:
cat(w?) = vpast
This is satisfied by ko?nnen2 which insists on being
extraposed, thus ruling (20) out:
fieldext(ko?nnen2) = {xf}
Example (18) has LP tree:
(dass) Maria einen Mann hat lieben ko?nnen
n
d
n
v
v
v
mf
df
mf xf
vc
In (18) einen Mann climbs up to hat, while in (19)
it only climbs up to ko?nnen.
5.8 Double Auxiliary Flip
Double auxiliary flip constructions occur when
an auxiliary is an argument of another auxiliary.
Each extraposed verb form offers both vc and mf:
thus there are more opportunities for verbal and
nominal arguments to climb to.
(21) (dass) Maria wird haben einen Mann lieben
ko?nnen
(that) Maria will have been able to love a man
(22) (dass) Maria einen Mann wird haben lieben
ko?nnen
(23) (dass) Maria wird einen Mann lieben haben
ko?nnen
(24) (dass) Maria einen Mann wird lieben haben
ko?nnen
(25) (dass) Maria einen Mann lieben wird haben
ko?nnen
These examples have ID tree:
Maria einen Mann wird haben lieben ko?nnen
subject
det
object
vinf
vinf
vpast
and (22) obtains LP tree:
Maria einen Mann wird haben lieben ko?nnen
n
d
n
v
v
v
v
mf
df
mf xf
vc
xf
5.9 Obligatory Coherence
Certain verbs like scheint require their argument
to appear in canonical (or coherent) position.
(26) (dass)
(that)
Maria
Maria
einen
a
Mann
man
zu
to
lieben
love
scheint
seems
(that) Maria seems to love a man
(27)*(dass) Maria einen Mann scheint, zu lieben
Obligatory coherence may be enforced with the
following constraint principle: if w is an obliga-
tory coherence verb and w? is its verbal argument,
then w? must land in w?s vc field. Like barri-
ers, the expression of this principle in our gram-
matical formalism falls outside the scope of the
present article and remains the subject of active
research.4
6 Conclusions
In this article, we described a treatment of lin-
ear precedence that extends the constraint-based
framework for dependency grammar proposed by
Duchier (1999). We distinguished two orthogo-
nal, yet mutually constraining tree structures: un-
ordered, non-projective ID trees which capture
purely syntactic dependencies, and ordered, pro-
jective LP trees which capture topological depen-
dencies. Our theory is formulated in terms of (a)
lexicalized constraints and (b) principles which
govern ?climbing? conditions.
We illustrated this theory with an application to
the treatment of word order phenomena in the ver-
bal complex of German verb final sentences, and
demonstrated that these traditionally challenging
phenomena emerge naturally from our simple and
elegant account.
Although we provided here an account spe-
cific to German, our framework intentionally per-
mits the definition of arbitrary language-specific
topologies. Whether this proves linguistically ad-
equate in practice needs to be substantiated in fu-
ture research.
Characteristic of our approach is that the for-
mal presentation defines valid analyses as the so-
lutions of a constraint satisfaction problem which
is amenable to efficient processing through con-
straint propagation. A prototype was imple-
mented in Mozart/Oz and supports a parsing
4we also thank an anonymous reviewer for pointing out
that our grammar fragment does not permit intraposition
mode as well as a mode generating all licensed
linearizations for a given input. It was used to
prepare all examples in this article.
While the preliminary results presented here
are encouraging and demonstrate the potential of
our approach to linear precedence, much work re-
mains to be done to extend its coverage and to
arrive at a cohesive and comprehensive grammar
formalism.
References
Gunnar Bech. 1955. Studien u?ber das deutsche Ver-
bum infinitum. 2nd unrevised edition published
1983 by Max Niemeyer Verlag, Tu?bingen (Linguis-
tische Arbeiten 139).
Norbert Bro?ker. 1999. Eine Dependenzgrammatik
zur Kopplung heterogener Wissensquellen. Lin-
guistische Arbeiten 405. Max Niemeyer Verlag,
Tu?bingen/FRG.
Denys Duchier. 1999. Axiomatizing dependency
parsing using set constraints. In Sixth Meeting on
the Mathematics of Language, Orlando/FL, July.
Erhard Hinrichs and Tsuneko Nakazawa. 1994. Lin-
earizing AUXs in German verbal complexes. In
Nerbonne et al (Nerbonne et al, 1994), pages 11?
37.
Sylvain Kahane, Alexis Nasr, and Owen Rambow.
1998. Pseudo-projectivity: a polynomially parsable
non-projective dependency grammar. In Proc.
ACL/COLING?98, pages 646?52, Montre?al.
Andreas Kathol. 2000. Linear Syntax. Oxford Uni-
versity Press.
Igor Melc?uk. 1988. Dependency Syntax: Theory and
Practice. The SUNY Press, Albany, N.Y.
Stefan Mu?ller. 1999. Deutsche Syntax deklara-
tiv. Head-Driven Phrase Structure Grammar fu?r
das Deutsche. Linguistische Arbeiten 394. Max
Niemeyer Verlag, Tu?bingen/FRG.
John Nerbonne, Klaus Netter, and Carl Pollard, edi-
tors. 1994. German in Head-Driven Phrase Struc-
ture Grammar. CSLI, Stanford/CA.
Mike Reape. 1994. Domain union and word order
variation in German. In Nerbonne et al (Nerbonne
et al, 1994), pages 151?197.
Hans Uszkoreit. 1987. Word Order and Constituent
Structure in German. CSLI, Stanford/CA.
