INTEGRATED INFORMATION MANIPULATION SYSTEMS ( IMS)  - -  
A COGNITIVE VIEW 
Gerhard Fischer 
Man-Machine Communication Research Group 
Institut fuer Informatik 
Universitaet Stuttgart 
Stuttgart, W-Germany 
Abstract 
The personal computer of the future will offer 
its owner an information manipulatio, 9~stem 
(IMS). It will be a totally integrated system 
being able to manipulate arbitrary information 
structures, eg programs, prose, graphical 
objects and sound. 
An IMS will be an important step towards 
achieving the goal that we can do all our work 
on-line -- placing in computer store all of our 
specifications, plans, designs, programs, 
docummentation, reports, memos, bibliography and 
reference notes and doing all of our scratch 
work, planning, designing, debugging and most of 
our intercommunication via the consoles. 
We outline the basic principles underlying the 
design of an INS. We discuss the cognitive 
dimensions (specifically for text processing and 
programming systems) which should serve as the 
design criteria for systems whose goal is to 
reduce the cognitive burden and augment the 
capabilities of a human user. 
Keywords 
man-machine communication, problem solving, 
routine cognitive Skill, text processing, 
programming, display-oriented interfaces, 
uniformity, integrated systems 
!. Information manipulation systems (IM5) 
I.i Function and structure of an IMS 
The rapidly increasi,ng sophistication and 
cheap avai labi l i ty  of computers make it 
likely that interactive man-machine systems 
will increasingly be exploited to deal with 
complex problems in many domains. IMSs 
should be prototypes for systems in which 
the computer and the human cooperate to 
solve problems and achieve tasks more 
quickly and more rapidly than either could 
do working alone. 
The effect ive utilization of such combined 
man-machine systems will require that the 
information-processing capabilities of the 
human component be as well understood and 
designed as those of the computer. 
The bas ic  hardware  to suppor t  an IMS 
cons is ts  o f  a persona l  computer ded icated  
to a s ing le  user  wh ich  w i l l  have a high 
reso lu t ion ,  a l l  po in ts  addressabte d i sp lay  
and a mouse as a po in t ing  dev ice .  
ind iv idua l  machines w i l l  be connected in a 
network  and they w i l l  possess computat iona l  
power comparab le  to that  of todays la rgest  
t imeshar ing -mach ines .  The LISP Mach ine  
(WEINREB & MOON, 1979) and the SMALLTALK 
Machine (as a f i r s t  step toward the idea of  
a "DYNABOOK"; KAY 1977) are f i r s t  examples 
of  the techno logy  we have in mind. 
The structure of an IMS is illustrated in 
diagram I. 
Diagram I: The structure of an IMS 
text processing \]programming 
I to provide tOto preparefil outd?cumentS~forms |\[.c?mputati?nal facilities 
{ 'info1~aation manipulation system 1 
/ "-... 
database manipulation graphics 
to access prestored to compose text 
information with pictures 
--570-- 
Systems of this sort will be used for many 
applications: as office automation systems, 
as persona i  in fo rmat ion  systems (LAUBSCI4, 
F ISCHER and BOECKER 1979), as research 
tools etc .  
We are conv inced  that real problems 
requ i re  an IMS and not only a programming 
language or a text processing system, like 
the following examples demonstrate: 
1) tO write a paper for a conference, we need 
- graphics (to include diagrams and pictures) 
- database (to retrieve the references) 
- programming (to sort the references, to 
include teat runs, etc) 
2) to support the development and modification of 
programs, we need an interactive program 
development system (FISCHER and LAUBSCH, 1980), 
including all the helpful features of the 
INTERLISP system (TEITELMAN 1978) like "Do what I 
mean (DWIM)", Programmer's assistant, UNDO and 
History facilities 
This paper extends the work and the ideas 
expressed in FISCHER (1980 
1.2 Uniformity 
One of the obstac les  computer  systems 
present  to the user is the d ivers i ty  of 
di f feren~ languages and conventions which a 
user has to knew tO get a cer ta in  task 
done. To wr i te  an ord inary  program in a 
convent iona l  system the user has to know a 
large number  of d i f fe rent  languages,  
sublanguages and conventions, eg" 
* the programming language itself (with 
conventions for specifying the control flow, 
external and internal data description etc) 
* the operating system (job control language, 
linkage editor and loader) 
* the debugging system (diagnostic system, 
symbolic assembler etc) 
* the text  processing system (ed i to r  and 
formatter) 
The need for an in tegrated  system is 
obv ious  to anybody who has tr ied to 
s t rugg le  through all the idiosyncracies of 
the different systems mentioned above. 
An IMS of fers  un i fo rmi ty  in several  
dimensions to cope with this problem: 
Linguistic uniformity: All tools (eg the programming 
system and superimposed modules as well as mere 
specific creations of the user) are made from the 
same material and thus part of the same conceptual 
world. This has the sociological benefit that the 
system's implementor and users share the same 
culture. Each module in the system can be regarded as 
a "glass-box", ie it can be inspected by the user and 
the system can be explored all to the edges. This 
gives the user an amount of control aver his 
environment which is not reachable in other systems. 
Uniformity of i n te ract ion :  This is based on a good 
interface, which provides a uniform structure for 
finding, viewing and invoking the different 
components of the system. The crucial aspect for this 
interface is the use of the display screen, which 
allows for many tasks the real-time, direct 
manipulation of iconic information structures which 
are displayed on the screen. Each change is instantly 
reflected in the document's image, which reduces the 
cognitive burden for the user. The screen should be 
regarded as an extension of the limited capacity of 
our short term memory (is it provides a similar 
support like pencil and paper does for the 
multiplication of two large numbers). 
2. Exper iences  with existinq systems 
The author  has had oppor tun i t ies  to work 
in tens ive ly  with severa l  advanced systems 
dur ing the last few years.  These systems 
form the background for the ideas expressed 
in this paper; they are the current ly  
ex is t ing  sys tems (known to the author) 
which come c losest  to our idea of an 
information manipulation system. 
2.1EMACS and MACLISP 
EMACS (STALLMAN 1979) i s  a rea l - t ime 
d isp lay  o r iented  ed i to r ,  wh ich  can be 
extended by the user .  This a l lows  users to 
make extens ions  that  f ie  the ed i to r  bet te r  
to  the i r  own d iverse  app l i ca t ions ,  to 
exper iment  w i th  a l te rnat ive  command 
Languages and to share extens ions  which ace 
genera l ly  use fu l .  I t  runs  on la rge  
t imeshar ing  machines (eg PDP-IO) and la rge  
persona l  computers  (eg LISP machine;  
WEINREB and MOON, 1979).  It conta ins  
speciaI  subsystems ("modes"; see Diagram 2) 
to take advantage  of the structures which 
occur in the systems to be edited. EMACS is 
a s ing le  key -s t roke  system, which puts a 
heavy demand on our recal l  memory.  For 
these reasons,  it is spec i f i ca l l y  suited 
for the expert user. 
- -571-  
Diagram 2: Extens ib i l i ty  and Uniformity in E~S 
(extensibitity means that arbitrary modes can be 
implemented and uniformity implies that the user does 
not need to learn a seperate editor for each system) 
I EMACS I 
I mode "prosel'l I mode "mail" I I mode I'LISP"I 
* contains commands for 
words, sentences and 
paragraphs; 
* fill and justify commands 
* transforms regions from 
upper tolower case 
* contains commands 
for s-expressions 
* operations for 
automatic indenting 
("pretty pr int ing")  
EMACS is wel l  in ter faced with the MACLISP 
programming system. EMACS and MACLISP are 
kept in the machine as parallel jobs which 
is a necessary  requirement  to switch back 
and forth with a few keyst rokes .  This is 
quite different from the editing philosophy 
of the INTERL ISP  system (TEITELMAN 1978) 
where the editor is an integral part of the 
INTERLISP system itself. The advantages and 
d isadvantages  of these two approaches  
( "source - f i l e "  versus " res ident ia l "  
systems) are thorough ly  d i scussed  in 
SANDEWALL (1978). 
Power fu l  persona l  computer  sys tems (like 
the LISP machine)  cont r ibute  to the 
extens ib i l i ty  and mod i f iab i l i ty  of an 
in fo rmat ion  man ipu la t ion  system because 
they make the ent i re so f tware  system 
interaetively extensible by writing it in a 
h igher  level  language (eg LISP) and 
al lowing the user to redefine the functions 
compos ing  the innards of the system (ie 
they prov ide the l inqu is t i c  un i formity  
which we have mentioned in 1.2). 
they  only requi res  the  recoqn i t ion  of 
commands (ie no recall). These environments 
prov ide proto types  for man-mach ine  
in ter faces  which are heav i ly  based on 
graphics .  The problem of not having enough 
space on the screen is solved by allowing 
the w indows  to over lap.  The resul t ing 
conf igurat ion  cons iderab ly  increases  the 
user 's  e f fec t ive  work space and it 
cont r ibutes  to the i l lusion that the user 
is v iewing a desk top containing a number 
of sheets of paper which he can manipulate 
in various ways. 
Diagram 3: The DLISP d isp lay fac i l i t ies  
(from Teitelman 1977) 
the display shows the following features: 
- several menues (which are context dependent and 
therefore can be kept small in size; they allow the 
recognition of commends and do not require a recall) 
- windows to receive and send messages 
- "WORK AREA" window which allows additional 
communication with the system 
selected text is indicated by reversing the color 
of the screen 
- the virtual size of the screen is increased because 
the windows can overlap 
2.2 SMALLTALK and DLISP 
SMALLTALK (KAY 1977) and DLISP (TEITELMAN 
1977)  are  sys tems at  Xerox  Pa lo  A l to  
Research  Center ,  wh ich  re ly  heav i ly  on a 
h igh  reso lu t ion  b i t  map d isp lay ,  a mouse as 
a po in t ing  dev ice  and exce l lent  so f tware ,  
which suppor ts  mul t ip le  w indows w i th  
assoc ia ted  menues and multiple fonts (see 
D iagram 5 for an example) ;  through their 
iconic  representat ions  and their  menues 
Abi l i t i es  l i ke  suspend ing  an operat ion ,  
per fo rming  o ther  operat ions  (eg to answer 
qu ick ly  to  an urgent  request  rece ived  
through the mai l  sys tem)  and then  re turn  
w i thout  loss  of context  have turned out to 
be essent ia l  fo r  many prob lem so lv ing  
act iv i t ies .  The techn ique  of using 
--572-- 
dif ferent windows for different tasks does 
make this switch ing of contexts easy and 
painless. 
These systems combine the best features of 
display and hardcopy terminals. A standard 
complaint  with convent ional  display 
terminals is that mater ia l  that the user 
wants to refer to repeatedly (eg the text 
of a function, the trace of a program 
execution) is d isplaced by subsequent, 
incidental interactions with the system. In 
a s i tuat ion like this when using a hard 
copy terminal the user tears off the part 
he is interested in. The equivalent action 
in a window system is to freeze the 
relevant port ion of the interact ion in a 
seperate window (eg like the "WORK AREA" 
window in Diagram 3) whose content will not 
be af fected by the following interactions 
(see TEITELMAN, 1977). 
The graphical  orientation of these systems 
has inspired research (eg SMITH 1977 and 
BORNING \[979) to create programming systems 
where more and more symbolic descriptions 
can be replaced by iconic descr ipt ions.  
These efforts have the gnat to integrate 
some of the features wh ichhave  made 
d isp lay-or iented edit ing systems so 
successfu l  into programming environments. 
Teletype-oriented editors require sequences 
of commands like "4DOWN 12LEFT 4DELETE" to 
delete four characters  somewhere in a 
buffer. In a display-or iented environment 
we see the content of the buffer on the 
screen and can move with the cursor 
(supported by cont inuous visual feedback) 
to the object to be manipulated. An example 
of symbol ic  versus iconic programming is 
given in Diagram 4. The operat ion to be 
performed is to change the value of the 
third element of an array. In the symbolic 
ca.se we have to "tell" the computer that we 
want to assign a new value to the third 
element of an array, whereas in an iconic 
programming environment the array would be 
displayed on the sereen and changed 
directly. 
Diagram 4: 
Programming 
Symbolic versus Iconic 
symbolic pcogramming: 
print x<3> 
Mathematics 
x<5> <-- "History 
print x<5> 
History 
iconic programmi.g ("you get what you see"; emphasis 
is on doinq rather than tellinn_q): 
28 
Teacher 
Mathematics 
Male 
Grade 12 
29 
Teacher 
History 
Male 
Grade 12 
2.2 TINTE and LOGO 
TINTE (RATHKE i979), also a a real-t ime 
display oriented editor, has limited set 
of user-def inable keys. It runs on a small 
personal computer  and through its 
incrementaI  design it can be used by users 
of all levels of expert ise.  Incremental  
design is one of the most essential 
features of a complex system, because the 
novice user of any reasonably powerful 
computer system is more confused than 
assisted by a full d isplay of the 
informat ion and opt ions available to him. 
(Note:This paper was written with the help of TINTE). 
The interface between TINTE and the 
programming system LOGO (BOECKER 1977) is 
not as smooth as in the systems described 
above. The main reason for this is the 
l imited memory space avai lable in small 
computers which does not allow to load the 
two systems as parallel jobs. 
Our research during the last few years has 
not only been concerned with the technology 
of provid ing interactive computer service, 
but also with changes in conceptualizing, 
v i sua l i z ing  and organ iz ing  work and. 
research with these systems and in 
procedures ? and methods for working 
ind iv idual ly  and cooperat ive ly  (FISCHER 
1979; FISCHER, BROWN and BURTON, 1978; 
FISCHER and LAUBSCH, 1980). 
--573-- 
3. Theoret i ca l  cons iderat ions  for the 
desiqn of  an IMS 
If a civil engineer has to design a bridge, 
he acqu i res  a deta i led  knowledge  of the 
country  side in which the br idge will be 
bui l t  and he wi l l  use the laws of physics 
to come up with a plan. 
Unfor tunate ly  things are not quite as 
easy with respect to the design of an IMS. 
Changing hardware is the smallest problem; 
the major  obstac le  is that there is no 
cogn i t ive  theory  o f  su f f i c ient  p red ic t ive  
power ( fu l f i l l ing the same function as the 
laws of physics for the bridge) which would 
be spec i f i c  enough to prov ide a complete 
set of des ign c r i te r ia  for an IMS. NEWELL 
and SIMON (1976) argue conv inc ing ly  why 
research l ike the design of an IHS has to 
be carried out as "empirical inquiry" 
Desp i te  the lack of a complete  cognitive 
theory, work in Cogn i t ive  Sc ience has 
accumulated a substantial body of knowledge 
wh ich  is important for integrated IMSs. The 
scope of this paper does not allow us to 
give a deta i led  descr ip t ion  of our 
theoretical framework; therefore we mention 
only the most important aspects: 
i) research in AI and cognitive psychology has 
shown that knowledge is at the basis of all 
problem solving; the active research in the 
development of knowledge representation languages 
(like KRL and FRL) is based on this insight 
2) psychological research and empirical evidence 
supports the hypothesis that "thinking always 
begins with suggestive but imperfect plans and 
images; these are progressively replaced by 
better, but usually still imperfect plans". This 
hypothesis indicates the evolutionary character of 
complex systems, it implies that linear 
approximation is an important methodology and that 
debugging processes have to be understood 
thoroughly 
5) problem solving theories about planning (which 
operates in a simplified abstraction space), 
analogy (which forms the basis for recognition 
methods), debugging (see previous point) and 
multiple representations (see 3.2) are not any 
more only directed towards the understanding of 
abstract and well-structured problems but 
investigate ill-structured problems in 
semantically rich domains (SIMON 1978) 
4) knowledge about human information processig 
capabilities (eg about the limited capacity of our 
short term memory) shows that for complex systems 
there exists a need to prefold information for the 
user so that more pieces of the whole picture can 
be maintained in the user's immediate attention at 
once 
5) SIMON (1969) has provided an insightful 
analysis of the structure of ce~le? systems (by 
showing their hierarchical structure, their 
property of being "nearly decomposable" etc) 
3.1 Generative Processes 
One purpose of an IMS is to support  the 
c reat ive  aspects  of the wr i t ing  and 
programming process.  Wr i t ing  and 
programming often means to make a rough 
draft and ref ine it over a cons iderab le  
period of time (in ether words: it subsumes 
all the processes  required to go from the 
f irst idea to the final product; see FLOWER 
and HAYES,  1979).  It inc ludes  the 
expectat ion  of an "unacceptab le  first 
draf t"  which wil l  deve lop through 
successive changes into a presentable form. 
An impor tant  genera l  character i s t i c  of 
computers  is that they al low us to build 
quickly low-cost modif iable models which we 
can ana lyze and exper iment  with. We 
bel ieve,  contrary  to the formal, 
ver i f i ca t ion  or iented  group in the 
Structured Programming community, that this 
view is as adequate  for programming as it 
is for writing. 
Text p rocess ing  and programming are 
examples  of generative processes which are 
best unders tood  as prob lem solving. 
Inadequate technologies (eg a typewriter, a 
batch system) force the wr i ter  or 
p rogrammer  to limit himself to a small set 
of s t ra teg ies .  For example he has to 
proceed in a ser ia l  fashion,  whereby the 
form of the wr i t ten  word imposes 
res t r i c t ions  on the generation of language 
and ideas. On the other hand it is well 
known that knowledge is not simply additive 
which impl ies  that a new ins ight  or idea 
may requi re  a major  restructuring of what 
has been done before. 
Creat ive  wr i t ing  and programming i s  an 
i l l - s t ruc tured  prob lem (SIMON 1978) .  In 
these prob lem so lv ing s i tuat ions  the 
prob lem so lver  has to contribute actively 
to the exact spec i f i ca t ion  of the problem 
and he has to define criteria what will be 
accepted as a solution. 
- -574- -  
).2 Multiple Perspectives 
The computer  as an act ive medium offers 
more pos ib i l i t i es  than paper for a person 
who wants to wr i te,  unders tand  or read a 
repor t  or a program. For complex 
descr ipt ions it is often a big advantage to 
be able to generate  mult ip le perspectives 
which fac i l i ta te  or h igh l ight  cer ta in  
aspects  of a system. Multiple perspectives 
are able to resolve the basic conflict that 
symbols ,  which are ordered in one fixed 
order (eg on a pr in ted  page),  serve as 
po inters  to concepts  which form a highly 
in ter re la ted  network. This implies that 9_2o 
s inq le  l inear  order is adequate.  The value 
of multiple perspectives can be i l lustrated 
in a nice way us ing ~ as an example: 
there may be many d i f fe rent  maps for the 
same ter r i to ry  us ing large and small 
scales,  showing the perc ip i ta t ion ,  the 
popu la t ion  densi ty ,  the economica l  
structure and any other relevant criteria. 
In read ing text ean be selected according 
to the wishes  or needs of the reader (to 
a l low "dynamic  reading" ;  a display screen 
can be regarded as a dynamic blackboard): 
l) for the novice and the expert, different parts 
may be left out or included 
2) to get a global overview, we can generate a 
table of contents at arbitrary levels of 
abstraction 
5) information can be reordered such that all 
oecurences of a certain concept are selected 
(which occur in other representations at arbitrary 
places) 
S imi la r  poss ib i l i t i es  exist 
representation of programs: 
for the  
i) certain modules of the program can be listed 
selectively (eg all the data accessing functions, 
all declarative information, all procedures which 
achieve a specific subtask); procedures can be 
listed in different orders (eg alphabetically or 
according to U~ calling structure) 
2) the calling structure which Shows the 
connectivity structure between different 
procedures can be displayed at arbitrary levels of 
detail; the user should be allowed to define a 
"view specification" 
3) symbol tables give a receding of information 
according to a different criterion 
).5 Problem solving versus routine skill 
An IMS Should  also support  the routine 
ski l l  (CARD 1978) of editing a manuscript 
or cod ing an known algorithm in the syntax 
of a p rogramming language. In this case it 
helps to e l im inate  the boring, 
t ime-consuming  and unproduct ive  work of 
secretar ies who have to spend long hours to 
retype manuscr ip ts ,  to make only trivial 
changes to a pro to type  of a letter but 
st i l l  have to retype it as a whole and who 
become greater  exper ts  in us ing scissors 
and glue than in anyth ing else. A routine 
cogn i t ive  ski l l  means that the methods to 
be used are well  known and that the 
sequence  of act ions  which occur  are of a 
modest  var iety  ( there fore  there is little 
search to find out what to do next). 
4. Implications for the process of system 
desi__q_n 
"Truth emerges more readily from error than from 
confusion". 
4.1 The necessity for empirical 
investigations 
\[t is genera l ly  accepted  that when a 
program is to be wr i t ten ,  spec i f icat ions  
should be designed in advance. But for real 
des ign tasks or i l l - s t ruc tured  problems 
(see 5.i) this is more w ish fu l  th ink ing 
than a rea l i s t i c  goal. The history of the 
deve lopment  of text ed i tors  is a good 
example for this assertion (another example 
wou ld  be t imeshar ing  systems;  see 
NEWELL /S IMON (1976) for an ins ight fu l  
analys is  of this topic) and provides a good 
i l l us t ra t ion  of the co-evolution of 
imp lementat ions  and in ter face  
spec i f i ca t ions .  As exper ience accumulates 
in us ing an imp lementat ion ,  more of the 
real needs and benef i t s  are d iscovered 
caus ing  the par t ia l  inter face 
spec i f i ca t ions  to change.  The chain of 
necessary  steps lead ing to one of the 
systems descr ibed  in sect ion  2 s ta r t ing  
with the ava i l ib i l ty  of the display 
processors  would have been simply too long 
for anyone to have imag ined  the final 
result  before the first step had been taken 
(for a genera l  d i scuss ion  of these issues 
see FISCHER, BROWN and BUR\[ON, 1978). 
- -575- -  
4.2 A design conflict 
In the in i t ia l  phase of us ing a text 
process ing system it is very important that 
the in t roduct ion  Of the computer  system 
changes the tasks per fo rmed as little as 
poss ib le .  For computer  naive user it is a 
t raumat ic  exper ience  anyway to change the 
tangeb i l i l y  of a piece of paper by the 
i l l us iveness  of e lec t ron ic  documents  and 
f i les. It is a step that drastically alters 
the appearance of their tools. 
As users become more experienced and more 
famil iar,  the systems should take advanlaqe 
of the new medium. Str ict  adherence  to 
normal typ ing conventions in an IMS is not 
a lways advantageous  (eg good text 
p rocess ing  systems do not require that the 
user pays a t tent ion  to the end of a line, 
they a l low him to define abbreviations, to 
exper iment  eas i ly  with the layout,  they 
take care automat ica l ly  for constra ints ,  
etc).  Lack of a t tent ion  to this essential 
phenomena is one of the reasons that many 
innovations fail. 
Regard ing  the efficient use of an IMS as a 
sk i l l  wh ich  develops over a long period of 
t ime and which gets used repeated ly  
(F ISCHER,  BROWN and BURTON, 1978) implies 
that we have to pay a t tent ion  to the 
following design issues: 
I) time: how long does it take to accomplish a 
task? 
2) errors: what kind and how many errors does a 
user make and how serious are they? 
5) learning: how long does it take a novice user 
to learn to use the system (for a secretary, for a 
trained computer scientist)? 
4) functionality: what range of tasks can a user 
perform with the system? How can it be made 
extensible to take care for unforeseen 
requirements? 
5) recall: how easy is it for a user to reesll how 
to use the system for a task that he has not done 
for some time?? 
5. Empirical f indinqs 
Observ ing  many people how they use IMS and 
taking into account empirical data based on 
in terv iews  and questionaires, has revealed 
the following: 
i) the systems can reduce the psyc~logical stress 
of doing something wrong (because wrong things can 
be easily corrected) 
2) they increase the willingness to experiment 
with new and different ideas 
3) the small amount of effort to change things in 
a non-trivial way (eg to find a major 
rearrangenment of a text or a more modular 
solution to a programming problem) leads in many 
cases to an improvement not only in form but also 
in content 
Much more empi r i ca l  work is needed to 
deve lop a deta i led  requ i rement  ana lys is  
which can serve as a gu ide l ine  for the 
des ign of the next generat ion  of 
in fo rmat ion  man ipu la t ion  system. 
Unfor tunate ly  the verd ict  of users is not 
par t i cu la ry  re l iab le :  as usual ,  users of 
the respect ive  systems tend to prefer what 
they are used to. 
6. Conclusions 
In the 1980's  there wi l l  be a mass ive  
at tempt  to in t roduce  in fo rmat ion  
man ipu la t ion  systems into un ivers i t ies ,  
o f f ices ,  c ler ical  operations and the home. 
The we l l -be ing  of many workes  as well as 
the techn ica l  success  of the systems 
themse lves  wil l  depend on how much the 
des ign pays a t tent ion  to cogn i t ive  
dimensions. 
One of the major  research  goals for the 
future wil l  be to build totally integrated 
IMS a l low ing  to make computer  systems 
aecess ib te  to many more people and to make 
computer  sys tems do many more things for 
people. 
Acknowleqdements 
I am indebted to the members of several research 
groups at Xerox Palo Alto Research Center and to many 
members of the HIT AI and LOGO Lab for giving me a 
chance to visit both places several limes over a 
longer period of time and letting me explore and work 
with their systems. H.-D. Boecker has made 
substantial contributions to this paper. 
--576-- 
References 
Boecker, H.-D. (1977): "LOGO Manual", 
Forschungsgruppe CUU, Projekt PROKOP, Darmstadt 
Borning, A. (1979): "Thinglab -- A 
Constraint-oriented Simulation Laboratory", SSL-79-3, 
July 1979, Xerox Palo Alto Research Center, Calif 
Card, S. E. (1978): "Studies in the Psychology of 
Computer Text Editing Sytems", SSL-78-1, Xerox Pale 
Alto Research Center, Calif 
Engelbart, D. C. and W.K. English (1968): "A research 
center for augmenting the human intellect", AFIPS 
FJCC, pp 395-400 
Fischer, G. (1979): "Powerful ideas in Computational 
Linguistics - Implications for Problem Solving and 
Education", in Proceedings of the 17th Annual Meeting 
of the Association for Computational Linguistics, San 
Diego, pp lll-125 
Fischer, G. (1980): "Cognitive Dimensions of 
Information Manipulation Systems", in P.R. Wossidlo 
(ed): "Textverarbeitung und Informatik", Informatik 
Fachberichte Vol 30, Springer Verlag, pp 17-31 
Fiseher, G., J.S. Brown, R. Burton (1978): "Aspects 
of a theory of simplification, debugging and 
coaching", in Proceedings of the 2nd Conference of 
the Canadian Society for Computational Studies of 
Intelligence, Toronto, July 1978, pp 139-145 
Fischer, G. and J. Laubsch (1980): "LISP-basierte 
Programmentwicklungssysteme zur Unterstuetzung des 
Problemloesungsprozesses", in Heft 3 der Notizen zum 
Interaktiven Programmieren, Fachausschuss 2 der 
Gesetlschaft fuer Informatik, Darmstadt, Maerz 1980 
Flower, L. S. and J. R. Hayes (1979): "Problem 
solving and the cognitive process of writing", in J. 
Lochhead and J. Clement (eds): "Cognitive process 
instruction", The Franklin Institute, Philadelphia 
Kay, A. (1977): "Mioroelectronics and the personal 
computer", Scientific America, September 1977, pp 
231-244 
Laubsch, J., G. Fischer and H.-D. Boecker (1979): 
"LISP~based systems for educational applications", 
BYTE, Vol. 4, No. 8, August 1979, pp 18-25 
Newell, A. and H. Simon (1976): "Computer Science as 
Empirical Inquiry: Symbols and Search", CACM, Vol 19, 
No 3, March 1976, pp 113-126 
Rathke, C. (1979): "TINTE .- ein in terakt iver  
Texted i to r " ,  MMK Memo 16, Ins t i tu t  fuer Informatik, 
Universitaet Stuttgart 
Sandewall, E. (1978): "Programming in an interactive 
environment: The LISP experience", ACM Computing 
Surveys, Vol lO, No l, March 1978, pp 35-71 
Simon, H. (1969): "The Sciences of the Artificial", 
MIT Press, Cambridge, Ma 
Simon, H. (1978): "The structure of ill-stuctured 
problems", in H. Simon: "Models of Discovery", D. 
Reidel Pulishing Co, Boston, Ha, pp 304-325 
Smith, D. (1977): "Pygmalion - A Computer Program to 
Model and St imulate Creative Thought", Birkhaeuser 
Verlag, Basel und Stuttgart 
Stal lman, R. (1979): "EMACS -- the extens ib le ,  
oustomizable, self-documenting display editor",  MIT 
AI Lab, Memo 519, Cambridge, Ma 
Teitelman, W. (1978): "INTERLISP Reference Manual", 
Xerox Palo Alto Research Center, Palo Alto, Ca 
Teitelman, W. (1977): "A Display-oriented 
Programmer's Assistant", in Proceedings of the 5th 
International Joint Conference on Artificial 
Intelligence, Cambridge, Ha, pp 905-915 
Weinreb, D. and D. Moon (1979): "LISP Machine 
Manual", 2nd preliminary version, January 1979, MIT 
AI Lab, Cambridge, Ms 
--577-- 
