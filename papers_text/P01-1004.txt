Low-cost, High-performance Translation Retrieval:
Dumber is Better
Timothy Baldwin
Department of Computer Science
Tokyo Institute of Technology
2-12-1 O-okayama, Meguro-ku, Tokyo 152-8552 JAPAN
tim@cl.cs.titech.ac.jp
Abstract
In this paper, we compare the rela-
tive effects of segment order, segmen-
tation and segment contiguity on the
retrieval performance of a translation
memory system. We take a selec-
tion of both bag-of-words and segment
order-sensitive string comparison meth-
ods, and run each over both character-
and word-segmented data, in combina-
tion with a range of local segment con-
tiguity models (in the form of N-grams).
Over two distinct datasets, we find that
indexing according to simple character
bigrams produces a retrieval accuracy
superior to any of the tested word N-
gram models. Further, in their optimum
configuration, bag-of-words methods are
shown to be equivalent to segment order-
sensitive methods in terms of retrieval
accuracy, but much faster. We also pro-
vide evidence that our findings are scal-
able.
1 Introduction
Translation memories (TMs) are a list of
translation records (source language strings
paired with a unique target language translation),
which the TM system accesses in suggesting a
list of target language (L2) translation candi-
dates for a given source language (L1) input (Tru-
jillo, 1999; Planas, 1998). Translation retrieval
(TR) is a description of this process of selecting
from the TM a set of translation records (TRecs)
of maximum L1 similarity to a given input. Typi-
cally in example-based machine translation, either
a single TRec is retrieved from the TM based on
a match with the overall L1 input, or the input
is partitioned into coherent segments, and indi-
vidual translations retrieved for each (Sato and
Nagao, 1990; Nirenburg et al, 1993); this is the
first step toward generating a customised transla-
tion for the input. With stand-alone TM systems,
on the other hand, the system selects an arbitrary
number of translation candidates falling within a
certain empirical corridor of similarity with the
overall input string, and simply outputs these for
manual manipulation by the user in fashioning the
final translation.
A key assumption surrounding the bulk of past
TR research has been that the greater the match
stringency/linguistic awareness of the retrieval
mechanism, the greater the final retrieval accu-
racy will become. Naturally, any appreciation in
retrieval complexity comes at a price in terms of
computational overhead. We thus follow the lead
of Baldwin and Tanaka (2000) in asking the ques-
tion: what is the empirical effect on retrieval per-
formance of different match approaches? Here,
retrieval performance is defined as the combina-
tion of retrieval speed and accuracy, with the ideal
method offering fast response times at high accu-
racy.
In this paper, we choose to focus on retrieval
performance within a Japanese?English TR con-
text. One key area of interest with Japanese
is the effect that segmentation has on retrieval
performance. As Japanese is a non-segmenting
language (does not explicitly delimit words or-
thographically), we can take the brute-force ap-
proach in treating each string as a sequence of
characters (character-based indexing), or al-
ternatively call upon segmentation technology in
partitioning each string into words (word-based
indexing). Orthogonal to this is the question of
sensitivity to segment order. That is, should our
match mechanism treat each string as an unor-
ganised multiset of terms (the bag-of-words ap-
proach), or attempt to find the match that best
preserves the original segment order in the in-
put (the segment order-sensitive approach)?
We tackle this issue by implementing a sample
of representative bag-of-words and segment order-
sensitive methods and testing the retrieval per-
formance of each. As a third orthogonal param-
eter, we consider the effects of segment contigu-
ity. That is, do matches over contiguous segments
provide closer overall translation correspondence
than matches over displaced segments? Segment
contiguity is either explicitly modelled within the
string match mechanism, or provided as an add-in
in the form of segment N-grams.
To preempt the major findings of this pa-
per, over a series of experiments we find that
character-based indexing is consistently superior
to word-based indexing. Furthermore, the bag-
of-words methods we test are equivalent in re-
trieval accuracy to the more expensive segment
order-sensitive methods, but superior in retrieval
speed. Finally, segment contiguity models provide
benefits in terms of both retrieval accuracy and
retrieval speed, particularly when coupled with
character-based indexing. We thus provide clear
evidence that high-performance TR is achievable
with naive methods, and moreso that such meth-
ods outperform more intricate, expensive meth-
ods. That is, the dumber the retrieval mechanism,
the better.
Below, we review the orthogonal parameters of
segmentation, segment order and segment conti-
guity (? 2). We then present a range of both bag-
of-words and segment order-sensitive string com-
parison methods (? 3) and detail the evaluation
methodology (? 4). Finally, we evaluate the dif-
ferent methods in a Japanese?English TR context
(? 5), before concluding the paper (? 6).
2 Basic Parameters
In this section, we review three parameter types
that we suggest impinge on TR performance,
namely segmentation, segment order, and segment
contiguity.
2.1 Segmentation
Despite non-segmenting languages such as
Japanese not making use of segment delimiters,
it is possible to artificially partition off a given
string into constituent morphemes through the
process of segmentation. We will collectively
term the resultant segments as words for the
remainder of this paper.
Looking to past research on string compari-
son methods for TM systems, almost all sys-
tems involving Japanese as the source lan-
guage rely on segmentation (Nakamura, 1989;
Sumita and Tsutsumi, 1991; Kitamura and Ya-
mamoto, 1996; Tanaka, 1997), with Sato (1992)
and Sato and Kawase (1994) providing rare in-
stances of character-based systems. This
is despite Fujii and Croft (1993) providing evi-
dence from Japanese information retrieval that
character-based indexing performs comparably to
word-based indexing. In analogous research,
Baldwin and Tanaka (2000) compared character-
and word-based indexing within a Japanese?
English TR context and found character-based in-
dexing to hold a slight empirical advantage.
The most obvious advantage of character-based
indexing over word-based indexing is that there
is no pre-processing overhead. Other arguments
for character-based indexing over word-based in-
dexing are that we: (a) avoid the need to com-
mit ourselves to a particular analysis type in the
case of ambiguity or unknown words; (b) avoid
the need for stemming/lemmatisation; and (c) to
a large extent get around problems related to the
normalisation of lexical alternation.
Note that all methods described below are ap-
plicable to both word- and character-based index-
ing. To avoid confusion between the two lexeme
types, we will collectively refer to the elements of
indexing as segments.
2.2 Segment Order
Our expectation is that TRecs that preserve the
segment order observed in the input string will
provide closer-matching translations than TRecs
containing those same segments in a different or-
der.
As far as we are aware, there is no TM sys-
tem operating from Japanese that does not rely
on word/segment/character order to some degree.
Tanaka (1997) uses pivotal content words identi-
fied by the user to search through the TM and
locate TRecs which contain those same content
words in the same order and preferably the same
segment distance apart. Nakamura (1989) simi-
larly gives preference to TRecs in which the con-
tent words contained in the original input occur in
the same linear order, although there is the scope
to back off to TRecs which do not preserve the
original word order. Sumita and Tsutsumi (1991)
take the opposite tack in iteratively filtering
out NPs and adverbs to leave only functional
words and matrix-level predicates, and find TRecs
which contain those same key words in the
same ordering, preferably with the same seg-
ment types between them in the same num-
bers. Sato and Kawase (1994) employ a more lo-
cal model of character order in modelling similar-
ity according to N-grams fashioned from the orig-
inal string.
2.3 Segment contiguity
Given the input ?1?2?3?4 , we would expect that
of ?1?1?2?2?3?3?4 and ?1?2?3?4?1?2?3 , the
latter would provide a translation more reflective
of the translation for the input. This intuition
is captured either by embedding some contiguity
weighting facility within the string match mecha-
nism (in the case of weighted sequential correspon-
dence ? see below), or providing an independent
model of segment contiguity in the form of seg-
ment N-grams.
The particular N-gram orders we test are simple
unigrams (1-grams), pure bigrams (2-grams), and
mixed unigrams/bigrams. These N-gram models
are implemented as a pre-processing stage, fol-
lowing segmentation (where applicable). All this
involves is mutating the original strings into N-
grams of the desired order, while preserving the
original segment order and segmentation schema.
From the Japanese string? ?? ?? [natu?no?ame]
?summer rain?,1 for example, we would generate
the following variants (common to both character-
and word-based indexing):
1-gram: ? ?? ??
2-gram: ?? ???
Mixed 1/2-gram: ? ??? ?? ??? ??
3 String Comparison Methods
As the starting point for evaluation of the
three parameter types targeted in this re-
search, we take two bag-of-words (segment order-
oblivious) and three segment order-sensitive meth-
ods, thereby modelling the effects of segment or-
der (un)awareness. We then run each method over
both segmented and unsegmented data in combi-
nation with the various N-gram models proposed
above, to capture the full range of parameter set-
tings.
The particular bag-of-word approaches we tar-
get are the vector space model (Manning and
Schu?tze, 1999, p300) and ?token intersection?.
For segment order-sensitive approaches, we test
3-operation edit distance and similarity, and also
?weighted sequential correspondence?.
All methods are formulated to operate over an
arbitrary wt schemata, although in L1 string com-
parison throughout this paper, we assume that
any segment made up entirely of punctuation is
given a wt of 0, and any other segment a wt of 1.
1 Character boundaries (which double as word
boundaries in this case) indicated by ???.
All methods are subject to a threshold on
translation utility, and in the case that the
threshold is not achieved, the null string is re-
turned. The various thresholds are as follows:
Comparison method Threshold
Vector space model 0.5
Token intersection 0.4
3-operation edit distance len(IN)
3-operation edit similarity 0.4
Weighted seq. correspondence 0.2
where IN is the input string, and len is the con-
ventional segment length operator.
Various optimisations were made to each string
comparison method to reduce retrieval time, of the
type described by Baldwin and Tanaka (2000).
While the details are beyond the scope of this pa-
per, suffice to say that the segment order-sensitive
methods benefited from the greatest optimisation,
and that little was done to accelerate the already
quick bag-of-words methods.
3.1 Bag-of-Words Methods
Vector Space Model
Within our implementation of the vector
space model (VSM), the segment content of each
string is described as a vector, made up of a single
dimension for each segment type occurring within
S or T . The value of each vector component is
given as the weighted frequency of that type ac-
cording to its wt value. The string similarity of S
and T is then defined as the cosine of the angle
between vectors S and T , respectively, calculated
as:
cos(S, T ) =
S ? T
|
S||T |
=
?
j
sjtj
?
?
j
s2j
?
?
j
t2j
Token Intersection
The token intersection of S and T is de-
fined as the cumulative intersecting frequency of
segment types appearing in each of the strings,
normalised according to the combined segment
lengths of S and T using Dice?s coefficient. For-
mally, this equates to:
tint(S,T ) =
2 ?
?
e?S,T
min
(
freqS(e), freqT (e)
)
len(S) + len(T )
where each e is a segment occurring in either S or
T , freqS(e) is defined as the wt-based frequency of
segment type e occurring in string S, and len(S)
is the segment length of string S, that is the wt-
based count of segments contained in S (similarly
for T ).
3.2 Segment Order-sensitive Methods
3-op Edit Distance and Similarity
Essentially, the segment-based 3-operation
edit distance between strings S and T is the min-
imum number of primitive edit operations on sin-
gle segments required to transform S into T (and
vice versa). The three edit operations are seg-
ment equality (segments si and tj are identical),
segment deletion (delete segment si) and segment
insertion (insert segment a into a given position
in string S). The cost associated with each opera-
tion is determined by the wt values of the operand
segments, with the exception of segment equality
which is defined to have a fixed cost of 0.
Dynamic programming (DP) techniques are
used to determine the minimum edit distance
between a given string pair, following the clas-
sic 4-operation edit distance formulation of
Wagner and Fisher (1974).2 For 3-operation edit
distance, the edit distance between strings S =
s1s2...sm and T = t1t2...tn is defined as
D3op(S, T ):
D
3op(S,T ) = d3(m,n)
d
3
(i, j) =
?
?
?
?
?
?
0 if i = 0 ? j = 0
d
3
(0, j ? 1) + wt(tj) if i = 0 ? j = 0
d
3
(i ? 1, 0) + wt(si) if i = 0 ? j = 0
min
(
d
3
(i ? 1, j) + wt(si),
d
3
(i, j ? 1) + wt(tj),
m
3
(i, j)
)
otherwise
m
3
(i, j) =
{
d
3
(i ? 1, j ? 1) if si = sj
? otherwise
It is possible to normalise operation edit dis-
tance D3op into 3-operation edit similarity
S3op by way of:
S3op(S, T ) = 1 ?
D3op(S, T )
len(S) + len(T )
Weighted Sequential Correspondence
Weighted sequential correspondence (originally
proposed in Baldwin and Tanaka (2000)) goes one
step further than edit distance in analysing not
only segment sequentiality, but also the contiguity
of matching segments.
Weighted sequential correspondence associates
an incremental weight (orthogonal to our wt
weights) with each matching segment assessing the
contiguity of left-neighbouring segments, in the
manner described by Sato (1992) for character-
based matching. Namely, the kth segment of
a matched substring is given the multiplicative
weight min(k,Max ), where Max is a positive in-
teger. This weighting up of contiguous matches
is facilitated through the DP algorithm given be-
low:
Sw(S, T ) = s(m,n)
s(i, j) =
{
0 if i = 0 ? j = 0
max
(
s(i ? 1, j),
s(i, j ? 1),
s(i ? 1, j ? 1) + mw(i, j)
)
otherwise
mw(i, j) =
{
cm(i, j) ? wt(i) if si = sj
0 otherwise
cm(i, j) =
{
0 if i = 0 ? j = 0 ? si = tj
min(Max , cm(i? 1, j ? 1) + 1) otherwise
2 The fourth operator in 4-operation edit distance
is segment substitution.
The final similarity is determined as:
WSC (S,T ) =
2 ? Sw(S,T )
lenWSC (S) + lenWSC (T )
where lenWSC (S) is the weighted length of S, de-
fined as:
lenWSC (S) =
?m
i=1
wt(si) ? min(Max , i)
4 Evaluation Specifications
4.1 Details of the Dataset
As our main dataset, we used 3033 unique
Japanese?English TRecs extracted from construc-
tion machinery field reports for the purposes of
this research. Most TRecs comprise a single sen-
tence, with an average Japanese character length
of 27.7 and English word length of 13.3. Impor-
tantly, our dataset constitutes a controlled lan-
guage, that is, a given word will tend to be trans-
lated identically across all usages, and only a lim-
ited range of syntactic constructions are employed.
In secondary evaluation of retrieval performance
over differing data sizes, we extracted 61,236
Japanese?English TRecs from the JEIDA parallel
corpus (Isahara, 1998), which is made up of gov-
ernment white papers. The alignment granular-
ity of this second corpus is much coarser than for
the first corpus, with a single TRec often extend-
ing over multiple sentences. The average Japanese
character length of each TRec is 76.3, and the av-
erage English word length is 35.7. The language
used in the JEIDA corpus is highly constrained,
although not as controlled as that in the first cor-
pus.
The construction of TRecs from both corpora
was based on existing alignment data, and no fur-
ther effort was made to subdivide partitions.
For Japanese word-based indexing, segmenta-
tion was carried out primarily with ChaSen v2.0
(Matsumoto et al, 1999), and where specifically
mentioned, JUMAN v3.5 (Kurohashi and Nagao,
1998) and ALTJAWS3 were also used.
4.2 Semi-stratified Cross Validation
Retrieval accuracy was determined by way of
10-fold semi-stratified cross validation over the
dataset. As part of this, all Japanese strings of
length 5 characters or less were extracted from
the dataset, and cross validation was performed
over the residue, including the shorter strings in
the training data (i.e. TM) on each iteration.
In N-fold stratified cross validation, the dataset
is divided into N equally-sized partitions of uni-
form class distribution. Evaluation is then carried
out N times, taking each partition as the held-
out test data, and the remaining partitions as the
training data on each iteration; the overall accu-
racy is averaged over the N data configurations.
As our dataset is not pre-classified according to a
discrete class description, we are not able to per-
form true data stratification over the class distri-
bution. Instead, we carry out ?semi-stratification?
over the L1 segment lengths of the TRecs.
3
http://www.kecl.ntt.co.jp/icl/mtg/resources/altjaws.html
4.3 Evaluation of the Output
Evaluation of retrieval accuracy is carried out ac-
cording to a modified version of the method pro-
posed by Baldwin and Tanaka (2000). The first
step in this process is to determine the set of ?op-
timal? translations by way of the same basic TR
procedure as described above, except that we use
the held-out translation for each input to search
through the L2 component of the TM. As for L1
TR, a threshold on translation utility is then ap-
plied to ascertain whether the optimal translations
are similar enough to the model translation to be
of use, and in the case that this threshold is not
achieved, the empty string is returned as the sole
optimal translation.
Next, we proceed to ascertain whether the ac-
tual system output coincides with one of the opti-
mal translations, and rate the accuracy of each
method according to the proportion of optimal
outputs. If multiple outputs are produced, we se-
lect from among them randomly. This guaran-
tees a unique translation output and differs from
the methodology of Baldwin and Tanaka (2000),
who judged the system output to be ?correct? if
the potentially multiple set of top-ranking outputs
contained an optimal translation, placing methods
with greater fan-out of outputs at an advantage.
So as to filter out any bias towards a given string
comparison method in TR, we determine transla-
tion optimality based on both 3-operation edit dis-
tance (operating over English word bigrams) and
also weighted sequential correspondence (operat-
ing over English word unigrams). We then de-
rive the final translation accuracy as the average
of the accuracies from the respective evaluation
sets. Here again, our approach differs from that
of Baldwin and Tanaka (2000), who based deter-
mination of translation optimality exclusively on
3-operation edit distance (operating over word un-
igrams), a method which we found to produce a
strong bias toward 3-operation edit distance in L1
TR.
In determining translation optimality, all punc-
tuation and stop words were first filtered out of
each L2 (English) string, and all remaining seg-
ments scored at a wt of 1. Stop words are defined
as those contained within the SMART (Salton,
1971) stop word list.4
Perhaps the main drawback of our approach
to evaluation is that we assume a unique model
translation for each input, where in fact, multiple
translations of equivalent quality could reasonably
be expected to exist. In our case, however, both
corpora represent relatively controlled languages
and language use is hence highly predictable. The
proposed evaluation methodology is thus justified.
5 Results and Supporting Evidence
5.1 Basic evaluation
In this section, we test our five string comparison
methods over the construction machinery corpus,
under both character- and word-based indexing,
and with each of unigrams, bigrams and mixed
unigrams/bigrams. The retrieval accuracies and
times for the different string comparison meth-
ods are presented in Figs. 1 and 2, respectively.
4
ftp://ftp.cornell.cs.edu/pub/smart/english.stop
50
52
54
56
58
60
62
V
S
M
T
IN
T
3o
p
D
3o
p
S
W
S
C
V
S
M
T
IN
T
3o
p
D
3o
p
S
V
S
M
T
IN
T
3o
p
D
3o
p
S
R
et
ri
ev
a
l 
a
cc
u
ra
cy
 (
%
)
String comparison method
Word-based indexingChar-based indexing
*
* *
*
*
*
1-gram 2-gram 1/2-gram
Figure 1: Basic retrieval accuracies
Here and in subsequent graphs, ?VSM? refers to
the vector space model, ?TINT? to token inter-
section, ?3opD? to 3-op edit distance, ?3opS? to
3-op edit similarity, and ?WSC? to weighted se-
quential correspondence; the bag-of-words meth-
ods are labelled in italics and the segment order-
sensitive methods in bold. In Figs. 1 and 2, results
for the three N-gram models are presented sepa-
rately, within each of which, the data is sectioned
off into the different string comparison methods.
Weighted sequential correspondence was tested
with a unigram model only, due to its inbuilt mod-
elling of segment contiguity. Bars marked with an
asterisk indicate a statistically significant5 gain
over the corresponding indexing paradigm (i.e.
character-based indexing vs. word-based indexing
for a given string comparison method and N-gram
order). Times in Fig. 2 are calibrated relative to
3-operation edit distance with word unigrams, and
plotted against a logarithmic time axis.
Results to come from these figures can be sum-
marised as follows:
? Character-based indexing is consistently su-
perior to word-based indexing, particularly
when combined with bigrams or mixed uni-
grams/bigrams.
? In terms of raw translation accuracy, there is
very little to separate the best of the bag-of-
words methods from the best of the segment
order-sensitive methods.
? With character-based indexing, bigrams offer
tangible gains in translation accuracy at the
same time as greatly accelerating the retrieval
process. With word-based indexing, mixed
unigrams/bigrams offer the best balance of
translation accuracy and computational cost.
? Weighted sequential correspondence is mod-
erately successful in terms of accuracy, but
grossly expensive.
Based on the above results, we judge bi-
grams to be the best segment contiguity model
for character-based indexing, and mixed uni-
grams/bigrams to be the best segment contiguity
5 As determined by the paired t test (p < 0.05).
1
10
100
V
S
M
T
IN
T
3o
p
D
3o
p
S
W
S
C
V
S
M
T
IN
T
3o
p
D
3o
p
S
V
S
M
T
IN
T
3o
p
D
3o
p
S
R
el
a
ti
v
e 
re
tr
ie
v
a
l 
ti
m
e
String comparison method
Word-based indexing
Char-based indexing1-gram
2-gram 1/2-gram
Figure 2: Basic unit retrieval times
model for word-based indexing, and for the re-
mainder of this paper, present only these two sets
of results.
While we have been able to confirm the find-
ing of Baldwin and Tanaka (2000) that character-
based indexing is superior to word-based indexing,
we are no closer to determining why this should be
the case. In the following sections we look to shed
some light on this issue by considering each of: (i)
the retrieval accuracy for other segmentation sys-
tems, (ii) the effects of lexical normalisation, and
(iii) the scalability and reproducibility of the given
results over different datasets. Finally, we present
a brief qualitative explanation for the overall re-
sults.
5.2 The effects of segmentation and
lexical normalisation
Above, we observed that segmentation consis-
tently brought about a degradation in translation
retrieval for the given dataset. Automated seg-
mentation inevitably leads to errors, which could
possibly impinge on the accuracy of word-based
indexing. Alternatively, the performance drop
could simply be caused somehow by our particular
choice of segmentation module, that is ChaSen.
First, we used JUMAN to segment the con-
struction machinery corpus, and evaluated the re-
sultant dataset in the exact same manner as for
the ChaSen output. Similarly, we ran a devel-
opment version of ALTJAWS over the same cor-
pus to produce two datasets, the first simply seg-
mented and the second both segmented and lex-
ically normalised. By lexical normalisation, we
mean that each word is converted to its canonical
form. The main segment types that normalisation
has an effect on are verbs and adjectives (conju-
gating words), and also loan-word nouns with an
optional long final vowel (e.g.monita? ?monitor??
monita) and words with multiple inter-replaceable
kanji realisations (e.g. ?? [zyu?buN] ?sufficient?
? ??).
The retrieval accuracies for JUMAN, and ALT-
JAWS with and without lexical normalisation
are presented in Fig. 3, juxtaposed against
the retrieval accuracies for character-based in-
dexing (bigrams) and also ChaSen (mixed uni-
grams/bigrams) from Section 5.1. Asterisked bars
50
52
54
56
58
60
62
VSM TINT 3opD 3opS WSC
R
et
ri
ev
a
l 
a
cc
u
ra
cy
 (
%
)
String comparison method
ChaSen
Char-based JUMAN
ALTJAWS (?norm)
ALTJAWS (+norm)
*
*
*
* *
*
*
*
* *
*
Figure 3: Results using different segmentation
modules
indicate a statistically significant gain in accuracy
over ChaSen.
Looking first to the results for JUMAN, there is
a gain in accuracy over ChaSen for all string com-
parison methods. With ALTJAWS, also, a con-
sistent gain in performance is evident with simple
segmentation, the degree of which is significantly
higher than for JUMAN. The addition of lexi-
cal normalisation enhances this effect marginally.
Notice that character-based indexing (based on
character bigrams) holds a clear advantage over
the best of the word-based indexing results for all
string comparison methods.
Based on the above, we can state that the choice
of segmentation system does have a modest im-
pact on retrieval accuracy, but that the effects of
lexical normalisation are highly localised. In the
following, we look to quantify the relationship be-
tween retrieval and segmentation accuracy.
In the next step of evaluation, we took a random
sample of 200 TRecs from the original dataset, and
ran each of ChaSen, JUMAN and ALTJAWS over
the Japanese component of each. We then man-
ually evaluated the output in terms of segment
precision and recall, defined respectively as:
Segment precision =
# correct segs in output
Total # segs in output
Segment recall =
# correct segs in output
Total # segs in model data
One slight complication in evaluating the out-
put of the three systems is that they adopt in-
congruent models of conjugation. We thus made
allowance for variation in the analysis of verb and
adjective complexes, and focused on the segmen-
tation of noun complexes.
A performance breakdown for ChaSen (CS),
JUMAN (JM) and ALTJAWS (AJ) is presented in
Tab. 1. ALTJAWS was found to outperform the
remaining two systems in terms of segment pre-
cision, while ChaSen and JUMAN performed at
the exact same level of segment precision. Look-
ing next to segment recall, ChaSen significantly
outperformed both ALTJAWS and JUMAN. The
source of almost all errors in recall, and roughly
half of errors in precision for both ChaSen and
CS JM AJ
Ave. segs/TRec 13.0 12.0 11.7
Segment precision 98.3% 98.3% 98.6%
Segment recall 98.1% 96.2% 97.7%
Sentence accuracy 70.5% 59.0% 72.0%
Total segment types 650 656 634
Table 1: Segmentation performance
JUMAN was katakana sequences such as ge?to-
rokku-barubu ?gate-lock valve?, transcribed from
English. ALTJAWS, on the other hand, was re-
markably successful at segmenting katakana word
sequences, achieving a segment precision of 100%
and segment recall approaching 99%. This is
thought to have been the main cause for the dis-
parity in retrieval accuracy for the three systems,
aggravated by the fact that most katakana se-
quences were key technical terms.
To gain an insight into consistency in the case
of error, we further calculated the total number
of segment types in the output, expecting to find
a core set of correctly-analysed segments, of rel-
atively constant size across the different systems,
plus an unpredictable component of segment er-
rors, of variable size. The system generating the
fewest segment types can thus be said to be the
most consistent.
Based on the segment type counts in Tab. 1,
ALTJAWS errs more consistently than the re-
maining two systems, and there is very little to
separate ChaSen and JUMAN. This is thought to
have had some impact on the inflated retrieval ac-
curacy for ALTJAWS.
To summarise, there would seem to be a di-
rect correlation between segmentation accuracy
and retrieval performance, with segmentation ac-
curacy on key terms (katakana sequences) having
a particularly keen effect on translation retrieval.
In this respect, ALTJAWS is superior to both
ChaSen and JUMAN for the target domain. Ad-
ditionally, complementing segmentation with lex-
ical normalisation would seem to produce meager
performance gains. Lastly, despite the slight gains
to word-based indexing with the different segmen-
tation systems, it is still significantly inferior to
character-based indexing.
5.3 Scalability of performance
All results to date have arisen from evaluation over
a single dataset of fixed size. In order to validate
the basic findings from above and observe how
increases in the data size affect retrieval perfor-
mance, we next ran the string comparison meth-
ods over differing-sized subsets of the JEIDA cor-
pus.
We simulate TMs of differing size by randomly
splitting the JEIDA corpus into ten partitions,
and running the various methods first over par-
tition 1, then over the combined partitions 1 and
2, and so on until all ten partitions are combined
together into the full corpus. We tested all string
comparison methods other than weighted sequen-
tial correspondence over the ten subsets of the
JEIDA corpus. Weighted sequential correspon-
dence was excluded from evaluation due to its
overall sub-standard retrieval performance. The
translation accuracies for the different methods
40
50
60
70
80
90
5976 11952 17937 23922 29898 35874 41859 47835 53820 61236
A
cc
u
ra
cy
 (
%
)
Dataset size (# translation records)
1/2-gram 3opS +seg
2-gram 3opS ?seg
1/2-gram 3opD +seg
2-gram 3opD ?seg
1/2-gram VSM +seg
2-gram VSM ?seg
Figure 4: Retrieval accuracies over datasets of in-
creasing size
over the ten datasets of varying size, are indicated
in Fig. 4, with each string comparison method
tested under character bigrams (?2-gram ?seg?)
and mixed word unigrams/bigrams (?1/2-gram
+seg?) as above. The results for token intersec-
tion have been omitted from the graph due to their
being almost identical to those for VSM.
A striking feature of the graph is that it is right-
decreasing, which is essentially an artifact of the
inflated length of each TRec (see Section 4.1) and
resultant data sparseness. That is, for smaller
datasets, in the bulk of cases, no TRec in the TM
is similar enough to the input to warrant consid-
eration as a translation candidate (i.e. the trans-
lation utility threshold is generally not achieved).
For larger datasets, on the other hand, we are hav-
ing to make more subtle choices as to the final
translation candidate.
One key trend in Fig. 4 is the superiority of
character- over word-based indexing for each of
the three string comparison methods, at a rela-
tively constant level as the TM size grows. Also
of interest is the finding that there is very little
to distinguish bag-of-words from segment order-
sensitive methods in terms of retrieval accuracy
in their respective best configurations.
As with the original dataset from above, 3-
operation edit similarity was the strongest per-
former just nosing out (character bigram-based)
VSM for line honours, with 3-operation edit dis-
tance lagging well behind.
Next, we turn to consider the mean unit re-
trieval times for each method, under the two in-
dexing paradigms. Times are presented in Fig. 5,
plotted once again on a logarithmic scale in order
to fit the full fan-out of retrieval times onto a single
graph. VSM and 3-operation edit distance were
the most consistent performers, both maintaining
retrieval speeds in line with those for the original
dataset at around or under 1.0 (i.e. the same re-
trieval time per input as 3-operation edit distance
run over word unigrams for the construction ma-
chinery dataset). Most importantly, only minor
increases in retrieval speed were evident as the
TM size increased, which were then reversed for
the larger datasets. All three string comparison
methods displayed this convex shape, although
the final running time for 3-operation edit simi-
larity under character- and word-based indexing
1
10
100
5976 11952 17937 23922 29898 35874 41859 47835 53820 61236
R
el
a
ti
v
e 
re
tr
ie
v
a
l 
ti
m
e
Dataset size (# translation records)
2-gram VSM ?seg
1/2-gram VSM +seg
2-gram 3opD ?seg
1/2-gram 3opD +seg
1/2-gram 3opD +seg
2-gram 3opD ?seg
Figure 5: Relative unit retrieval times over
datasets of increasing size
was, respectively, around 10 and 100 times slower
than that for VSM or 3-operation edit distance
over the same dataset.
To combine the findings for accuracy and speed,
VSM under character-based indexing suggests it-
self as the pick of the different system configura-
tions, combining both speed and consistent accu-
racy. That is, it offers the best overall retrieval
performance.
5.4 Qualitative evaluation
Above, we established that character-based index-
ing is superior to word-based indexing for distinct
datasets and a range of segmentation modules,
even when segmentation is coupled with lexical
normalisation. Additionally, we provided evidence
to the effect that bag-of-words methods offer supe-
rior translation retrieval performance to segment
order-sensitive methods. We are still no closer,
however, to determining why this should be the
case. Here, we seek to provide an explanation for
these intriguing results.
First comparing character- and word-based in-
dexing, we found that the disparity in retrieval
accuracy was largely related to the scoring of
katakana words, which are significantly longer in
character length than native Japanese words. For
the construction machinery dataset as analysed
with ChaSen, for example, the average charac-
ter length of katakana words is 3.62, as com-
pared to 2.05 overall. Under word-based index-
ing, all words are treated equally and character
length does not enter into calculations. Thus
a katakana word is treated identically to any
other word type. Under character-based index-
ing, on the other hand, the longer the word, the
more segments it generates, and a single matching
katakana sequence thus tends to contribute more
heavily to the final score than other words. Ef-
fectively, therefore, katakana sequences receive a
higher score than kanji and other sequences, pro-
ducing a preference for TRecs which incorporate
the same katakana sequences as the input. As
noted above, katakana sequences generally repre-
sent key technical terms, and such weighting thus
tends to be beneficial to retrieval accuracy.
We next examine the reason for the high corre-
lation in retrieval accuracy between bag-of-words
and segment order-sensitive methods in their op-
timum configurations (i.e. when coupled with
character bigrams). Essentially, the probabil-
ity of a given segment set permuting in differ-
ent string contexts diminishes as the number of
co-occurring segments decreases. That is, for a
given string pair, the greater the segment over-
lap between them (relative to the overall string
lengths), the lower the probability that those seg-
ments are going to occur in different orderings.
This is particularly the case when local segment
contiguity is modelled within the segment de-
scription, as occurs for the character bigram and
mixed word uni/bigram models. For high-scoring
matches, therefore, segment order sensitivity be-
comes largely superfluous, and the slight edge
in retrieval accuracy for segment order-sensitive
methods tends to come for mid-scoring matches,
in the vicinity of the translation utility threshold.
6 Conclusion
This research has been concerned with the rela-
tive import of segmentation, segment order and
segment contiguity on translation retrieval per-
formance. We simulated the effects of word or-
der sensitivity vs. bag-of-words word order insen-
sitivity by implementing a total of five compar-
ison methods: two bag-of-words approaches and
three word order-sensitive approaches. Each of
these methods was then tested under character-
based and word-based indexing and in combina-
tion with a range of N-gram models, and the rel-
ative performance of each such system configu-
ration evaluated. Character-based indexing was
found to be superior to word-based indexing, par-
ticularly when supplemented with a character bi-
gram model.
We went on to discover a strong correlation be-
tween retrieval accuracy and segmentation accu-
racy/consistency, and that lexical normalisation
produces marginal gains in retrieval performance.
We further tested the effects of incremental in-
creases in data on retrieval performance, and con-
firmed our earlier finding that character-based in-
dexing is superior to word-based indexing. At the
same time, we discovered that in their best con-
figurations, the retrieval accuracies of our bag-of-
words and segment order sensitive string compar-
ison methods are roughly equivalent, but that the
computational overhead for bag-of-words methods
to achieve that accuracy is considerably lower than
that for segment order sensitive methods.
References
T. Baldwin and H. Tanaka. 2000. The effects of
word order and segmentation on translation re-
trieval performance. In Proc. of the 18th Inter-
national Conference on Computational Linguistics
(COLING 2000), pages 35?41.
H. Fujii andW.B. Croft. 1993. A comparison of index-
ing techniques for Japanese text retrieval. In Proc.
of 16th International ACM-SIGIR Conference on
Research and Development in Information Retrieval
(SIGIR?93), pages 237?46.
H. Isahara. 1998. JEIDA?s English?Japanese bilin-
gual corpus project. In Proc. of the 1st Interna-
tional Conference on Language Resources and Eval-
uation (LREC?98), pages 471?81.
E. Kitamura and H. Yamamoto. 1996. Translation
retrieval system using alignment data from parallel
texts. In Proc. of the 53rd Annual Meeting of the
IPSJ, volume 2, pages 385?6. (In Japanese).
S. Kurohashi and M. Nagao. 1998. Nihongo keitai-
kaiseki sisutemu JUMAN [Japanese morphological
analysis system JUMAN] version 3.5. Technical re-
port, Kyoto University. (In Japanese).
C. Manning and H. Schu?tze. 1999. Foundations
of Statistical Natural Language Processing. MIT
Press.
Y. Matsumoto, A. Kitauchi, T. Yamashita, and Y. Hi-
rano. 1999. Japanese Morphological Analysis Sys-
tem ChaSen Version 2.0 Manual. Technical Report
NAIST-IS-TR99009, NAIST.
N. Nakamura. 1989. Translation support by retrieving
bilingual texts. In Proc. of the 38th Annual Meeting
of the IPSJ, volume 1, pages 357?8. (In Japanese).
S. Nirenburg, C. Domashnev, and D.J. Grannes. 1993.
Two approaches to matching in example-based ma-
chine translation. In Proc. of the 5th International
Conference on Theoretical and Methodological Is-
sues in Machine Translation (TMI-93), pages 47?
57.
E. Planas. 1998. A Case Study on Memory Based
Machine Translation Tools. PhD Fellow Working
Paper, United Nations University.
G. Salton. 1971. The SMART Retrieval System:
Experiments in Automatic Document Processing.
Prentice-Hall.
S. Sato and T. Kawase. 1994. A High-Speed Best
Match Retrieval Method for Japanese Text. Techni-
cal Report IS-RR-94-9I, JAIST.
S. Sato and M. Nagao. 1990. Toward memory-
based translation. In Proc. of the 13th International
Conference on Computational Linguistics (COL-
ING ?90), pages 247?52.
S. Sato. 1992. CTM: An example-based transla-
tion aid system. In Proc. of the 14th International
Conference on Computational Linguistics (COL-
ING ?92), pages 1259?63.
E. Sumita and Y. Tsutsumi. 1991. A practical method
of retrieving similar examples for translation aid.
Transactions of the IEICE, J74-D-II(10):1437?47.
(In Japanese).
H. Tanaka. 1997. An efficient way of gauging similar-
ity between long Japanese expressions. In Informa-
tion Processing Society of Japan SIG Notes, volume
97, no. 85, pages 69?74. (In Japanese).
A. Trujillo. 1999. Translation Engines: Techniques
for Machine Translation. Springer Verlag.
A. Wagner and M. Fisher. 1974. The string-to-
string correction problem. Journal of the ACM,
21(1):168?73.
