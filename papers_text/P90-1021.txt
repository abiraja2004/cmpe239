DEFAULTS IN  UNIF ICAT ION GRAMMAR 
Gosse Bouma 
Research Institute for Knowledge Systems 
Postbus 463, 6200 AL Maa.qtrlcht. The Netherlands 
e-mall : gosse@riksnl.uucp 
ABSTRACT 
I ncorporat ion  of  defau l ts  in g rammar  
formal isms is impor tant  for reasons of 
l ingu is t i c  adequacy  and  grammar  
organization. In this paper we present an 
algorithm for handling default information in 
unification grammar. The algorithm specifies 
a logical operat ion on feature structures,  
merging with the non-default structure only 
those parts of the default feature structure 
which are not constrained by the non-default 
s t ructure.  We present  var ious l inguistic 
applications of default unification. 
L INTRODUCTION 
MOTIVATION. There a two, not quite unrelated, 
reasons  for  incorporat ing  de fau l ts  
mechanisms into a linguistic formalism. First, 
l inguists have often argued that  certain 
phenomena re described most naturally with 
the use of rules or other formal devices that 
make use of a notion of default (see, for 
instance, Gazdar 1987). The second reason is 
that  the use of defaults  simplif ies the 
development of large and complex grammars, 
in particular, the development of lexicons for 
such grammars (Evans & Gazdar 1988). The 
latter suggests that the use of defaults Is of 
part icu lar  relevance for those brands  of 
Unification Grammar (UG) that are lexicalist, 
that is, in which the lexicon is the main source 
of  g rammat ica l  in fo rmat ion  (such as 
Categorial Unif ication Grammar  (Uskorelt 
1986, Calder et al 1988) and Head-driven 
Phrase Structure Grammar  (Pollard & Sag 
1987)). 
We propose a method for incorporat ing 
defaults Into UG, in such a way that It both 
extends the linguistic adequacy of UG and 
supports the formulation of rules, templates 
and lexical entries for many unification-based 
theories. In the next section, we define default 
unification, a logical operation on feature 
structures. It is defined for a language. FM/, ~, 
which is in many respects identical to the 
language FML as defined in Kasper & Rounds 
(1986). Next, we come to l inguist ic  
applications of default unification. A linguistic 
notation is introduced, which can be used to 
describe a number of linguistically interesting 
phenomena,  such as feature percolation. 
coordination, and many aspects of inflectional 
morphology. Furthermore. it can be used in the 
sense of Fllcglnger et al (1985) to define 
except ions  to ru les ,  non-monoton ic  
specialization of templates or irregular lexlcal 
entries. 
BACKGROUND. There are several proposals 
which hint at the possibility of adding default 
mechanisms to the linguistic formalisms and 
theories Just mentioned. The fact that GPSG 
(Gazdar et al, 1985) makes heavy use of 
defaults, has led to some research concerning 
the compatibil ity of GPSG with a formalism 
such PATR-II (Shieber 1986a) and concerning 
the logical nature of the mechanisms used in 
GPSG (Evans 1987). Shieber (1986a) proposes 
an operation . r id conservatively, which adds 
information of a feature s t ructure  A to a 
feature s t ructure  B, in as far as this 
information is not in conflict with information 
In B. Suggestions for similar operations can be 
found in Shivber (1986b:59-61) (the overwrite 
option of PATR-II) and Kaplan (1987) (priority 
union). Fllckinger et al (1985) argue for the 
incorporat ion  of  de fau l t  inher i tance  
mechanisms In UG as an alternative for the 
template system of PATR-II. 
A major problem with attempts to define an 
operat ion such as default unif icat ion for 
complex feature structures. Is that there are at 
least two ways to think about this operation. It 
can be defined as an operation which Is like 
ordinary unification, with the exception that In 
case of a unification failure, the value of the 
non-defau l t  feature  s t ructure  takes  
precedence (Kaplan 1987, Shieber 1986a). 
Another option Is not to rely on unification 
failure, but to remove default information 
about  a feature f already if the non-default 
feature structure constrains the contents o f f  
in some way. This view underlies most of the 
default  mechan isms used in GPSG 1 . The 
1 Actually, in GPSG both notions of 
default unif ication are used. In Shleber's 
(1986a) formulation of the of the Foot Feature 
Principle, for example, the operation add 
conservatively (which normal ly relies on 
unification failure) is restricted to features 
that are f ree (i.e. un instant la ted  and not 
covarying with some other feature). 
165 
dist inct ion between the two approaches  is 
especia l ly  re levant  for reent rant  feature 
values. 
The definition presented in the next section is 
defined as an operation on arbitrary feature 
structures, and thus it is more general than the 
operations odd conservatively or overwrite, in 
which only one sentence at a time (say, <X 0 
head> = <X 1 head> or <subject case> = 
nominative\] is added to a feature description. 
An obvious advantage of our approach is that 
overwriting a structure F with 1 ~ is equivalent 
to adding F as default information to F'. Default 
unif ication, as defined below, follows the 
approach  in which default  information is 
removed if it is constrained in the non-default 
structure. This decision is to a certain extent 
l inguistically motivated (see section 3), but  
perhaps more important  is the fact that  we 
wanted to avoid the following problem. For 
arb i t rary  feature st ructures ,  there is not 
always a unique way to resolve a unification 
conflict, nor is it necessarily the case that one 
solution subsumes  other solutions. Consider 
for instance the examples in (I). 
(1) default non-default 
a <f>ffia <f> = <g> 
<g> = b 
b. <f> = <g> <f>fa 
<g> ffi b 
To resolve the conflict, in Ca), either one of the 
equations could be removed. In (b), either the 
fact that <g> = b or the reentrancy could be 
removed (in both cases, this would remove the 
inpllcit fact that  <f> = b). An approach which 
only tr ies to remove the sources  of  a 
unification conflict, will thus be forced to make 
arbitrary decisions about  the outcome of the 
default unification procedure. At least for the 
purposes of g rammar  development, this seems 
to be an undesirable situation 1. 
2.  DESCRIPTION OF THE ALGORITHM 
THE LANGUAGE FML*. Default  unif icat ion is 
defined in terms of a formal language for 
feature structures, based on Kasper & Rounds' 
(1986) language FML. FML* does not contain 
d is junct ion ,  however ,  and fu r thermore ,  
equat ions  of the form / : f (where  ?~ is an 
arbitrary formula) are replaced by equations 
1 However, in Evans'  (1987) version of 
Feature Specification Defaults, it is s imply 
allowed that a category description has more 
than one 'stable expansion'. 
of the form <p> : ?x (where a is atomic or NIL or 
TOP). 
(2) ~ ~ FML* 
NIL 
TOP 
a a ? A (the set of atoms) 
<p> : a p e L* (L the set of labels) 
and a ? A u {TOP,NIL} 
\[<pl>,..,<pn>\] each P ie  L* 
? ^ ? ?,? ? FML* 
We assume that feature structures are 
represented as directed acycllc graphs (dags). 
The denotat ion D(?) of a formula ? is the 
minimal e lement w,r.t, subsumpt ion  2 in the 
set of dags that satisfy it. The conditions under 
which a dag D satisf ies a formula of FML* 
(where D/<p> is the dag that  is found if we 
follow the path p through the dag D) are as 
follows : 
(3) S~-WmTZCS Or FML ? 
a D ~ NIL always 
b. D ~ TOP never 
c D ~ a i fD fa  
d D ~ <p>: a i fD/<p> is defined 3 and 
D/<p> ~ a, 
e. D J=?^X ffD ~b and DR 
? D ~ \[<pl>,..,<pn>\] if the values of all 
Pl ( I  _< I < n) are equivalent. 
NORMAL FORM REQUIREMENTS. Defau l t  
unif ication should be a semant ica l ly  well- 
behaved operation, that  is, the result  of this 
operat ion  shou ld  depend only  on the 
denotat ion of the formula's  involved. Since 
defaul t  un i f icat ion is a non-monoton ic  
operation, however, in which par ts  of the 
default information may disappear,  and since 
there are in general many  formulae denoting 
the same dag, es tab l i sh ing  th is  is not 
completely trivial. In particular, we must  make 
sure that  the formula  which provides the 
default information is in the following normal 
form: 
2 A dag D subsumes a dag D' if the set of 
formulae satisfying D' conta ins the set of 
formulae satisfying D (Eisele & DSrre. 1988: 
287}. 
3 D/<l> is defined iff I e Dom(D). 
D/<Ip> is defined iff D/,<l> and D' /<p> are 
defined, where D'= D/<I>. 
166 
(4) FML" Normal  Form 
A formula Sis in FML* NFiff: 
a VE /nS ,<P lP2>:a  inS:  
<p l>e E "->VP3EE :<P3P2>:u in  S 
l~ ~EI ,  E2 in S: 
<plP2 > E E2, <pl > E E 1 --> 
~P3 6 E1 : <p3P2 > E E 2 
c. V E in S, there is no <p> e E, 
such that <pl> is re~ll,ed in S. 
d V E in S, there is no <p> e E such that 
<p> : a (a e A) is in S. 
(5) B 
A path  <pl> is realized in S lff <pr> is 
defined in D(@ (l,r E L) (cf. Elsele & D0n-e, 
1988 : 288). 
For every formula S in FML*, there is a formula 
S' in FML* NF. which is equivalent o it w.r.t 
unification, that  is, for which the following 
holds: 
(6) ~/7. e FML*: S ^  7. ~ TOP ?~ S' ^  7. ~ TOP 
Note that  this does not imply that  S and S' 
have the same denotation. The two formulae 
below, for example,  are equivalent w.r.t. 
unification, yet denote different dags : 
(7) a. <:f> : a ^  \[<f>,<g>\] 
b. <f>:a^ <g>:a 
For conditions (4a,b), it is easy to see that (6) 
holds (it follows, for instance,  f rom the 
equivalence laws (21} and (22) in Kasper & 
Rounds, 1986: 261). Condition (4c} can be met 
by  rep lac ing  every  occurence  of  an  
equivalence class \[<pl>,..,<pn>\] in a formula S 
by  a con junct ion  of  equ iva lences  
\[<p11>,..,<pnl>\] for every <pi/> (1 < i < n} realized 
in D(S}. For example, if L = {f,g), (Sb} is the NF of 
(Sa). 
{8) a \[<f>,<g>\]^ <ff>:NiL 
b. \[<ff>,<gf>\] ^ [<fg>,<gg>\] ^ ~ : NIL 
Condit ion (4d} can be met  by el iminating 
equivalence classes of paths  leading to an  
atomic value. Thus, (To) is the NF of (7a). Note 
that  the effect of (4c,d) is that the value of 
every path  which is member  of some 
equivalence class is NIL. 
A default formula has to be in FML" NF for two 
reasons.  First,  all in format ion which is 
implicit in a formula, should be represented 
explicitly, so we can check easily which parts 
of a formula need to  be removed to avoid 
potential unif ication conflicts with the non- 
default formula. .  This Is guaranteed by (4a,b). 
Second, all reentrant paths should have NIL as 
value. This is guaranteed by (4c,d) and makes 
it possible to replace an equivalence class by 
a weaker set of equat/ons, in which arbitrary 
long extensions of the old pathnames  may 
occur (if some path would have a value other 
than NIL, certain extensions could lead to 
inconsistent results}. 
LAWS FOR DEFAULT UNIFICATION. Defau l t  
unification is an operation which takes two 
formulas as arguments,  representing default 
and non-default informat/on respectively. The 
dag denoted by the resu l tant  formula  is 
subsumed by  that  of  the non-defau l t  
argument,  but  not necessari ly by that of the 
default argument. 
The laws for default unif ication (defined as 
Default ~ Non-default = Result, where Default 
is in FMLS-NF\] are listed below. 
(9) D~AULTUNa~C.ATSOm : 
a Se NIL =S 
SeTOP =TOP 
NIL (B S =~b 
TOP ~B S =S 
b. a~S =S 
S ~a =a 
c. <p>:a~S =S, ffD(S)I=<P'> :a,  
p' a preflxofp, a e A. 
= ~, ifD(S} I = <pp'> :a. 
=~, ff 3p 'EE:D(O)  I =Eandp '  
is a prefix of p. 
= <p>: a ^ S, otherwise. 
cL E G) S = F~E//~ 
where E ' is  {<p>~ E I D(S)~E'and p'e E'} 
u { <p>e E I D(S) ~ <p'> : a} (p' a prefix of 
p, a e A) and Z is {<p'> l D(S) l = <pp'> :a. 
and p ~ E}. 
e. (?A~)(B~= $, f fyA~=TOP,  
= (W (B ?) A (X ~B ?}, otherwise. 
167 
This definition of default unification removes 
all default information which might lead to a 
un i f icat ion  confl ict. Fur thermore ,  it is 
designed in such a way that the order in which 
information is removed is irrelevant (note that 
otherwise the second case in (9e) would be 
invalid). The first two cases of (9c) are needed 
to remove all sentences <p> : a, which refer to 
a path  which is blocked or which cannot  
receive an atomic value in ?. The third case in 
(9c) is needed for situations uch as (I0). 
(I0) (<fg> : a ^ <h g> : b) (9 \[<f>, <h>\] 
In (9d), we first remove from an equivalence 
class all paths  which have a prefix that  is 
already in an equivalence class or which has 
an atomic value. The result of this step is E-E'. 
Next, we modify the equivalence class, so that 
it allows exceptions (i.e. the posslbtlity of non- 
unif iable values) for all paths  which are 
extensions of paths in E-E' and are defined in 
?. We can th ink of modif ied equivalence 
c lasses  as abbrev ia t ions  for a set  of 
(unmodified) equivalence classes: 
(11) \[<pl > .... <pn>\ ] / /Z  = ? ,where  ~ is the 
conjunct ion of all equivalence classes 
\ [<plpl> .... <pnpl>\]. such that pl is not 
defined in Z, but  pr is in z, for some l,r e 
L 
An example should make this clearer: 
(12) \[<f>,<g>,<h>l (9 (<g>:aA<fg>:b)= 
l<f>,<h> l//{<g>} A (<f> : a ^ <fg> : b). 
The result of default unification in this case is 
that one element ( <g> } is removed from the 
de fau l t  equ iva lence  c lass  s ince it is 
constrained in by the non-default information. 
Furthermore,  the equivalence is modified, so 
that it allows for exceptions for the paths <fg> 
and <h g>. Applying the rule in (I I), and 
assuming that L = {f,g,h}, we conclude that 
(13) \[<f>,<h> \]//{<g>} = 
\[<ff>, <hf>\] A \[<fh>, <h h> \]. 
Note that  the rep lacement  of modif ied 
equivalence classes by ordinary equivalence 
classes is always possible, and thus the result 
of (9el) is equivalent to a formula in FML*. 
Finally. (ge) says that.  given a cons istent  
default formula, the order in which default 
in format ion is added to the non-defau l t  
formula is unimportant.  1 (This does not hold 
for inconsistent default  formulae, however, 
since default unification with the individual 
conJuncts might filter out enough information 
to make the resultant formula a consistent 
extension of the non-defauR formula, whereas 
TOPO? = ?}. 
The monotonlclty properties of default 
unification are listed below {where < is 
subsumption}: 
(14} a ,~X^,  
(but not X~X^* ) 
b. X-<X ' ~ (X ^@ ~ 0C'^~) 
(butnot  ? s? '  ~ (g ^?) <_ (X^?' )  ) 
(14a) says that default unification is montonlc 
addit ion of information to the non-defaul t  
information. (14b) says that the function as a 
whole is monotonic only w.r.t, the default 
argument:  adding more default information 
leads to extensions of the result. Adding non- 
de fau l t  in fo rmat ion  is non-monoton ic .  
however, as this might  cause more of the 
defau l t  in fo rmat ion  to get removed or 
overwritten. 
The laws in (9) prove that formulae containing 
the (9-operator can always be reduced to 
standard formulae of FML*. This implies that 
formulae using the (9-operator can still be 
interpreted as denoting dags. Furthermore, it
follows that addition of default unification to a 
unif icat ion-based formal ism should be seen 
only as a way to increase the expressive 
power of tools used in defining the grammar  
(and thus. according to D6rre et al (1990) 
default  unif icat ion would be an 'off l ine' 
extension of the formalism, that is, its effects 
can be computed at compile time). 
A NOTE ON IMPLEMENTATION.  We have  
implemented default  unif ication in Prolog. 
Feature st ructures  are represented by open 
ended lists (containing elements of the form 
label=Value ), atoms and var iab les  to 
represent complex feature structures,  atomic 
va lues and reentranc ies  respect ively (see 
Gazdar & Mellish, 1989). This implementation 
has the advantage that it is corresponds to 
FML* NF. 
1 This should not be confused with the 
(invalid) statement that ? (9 (X (9 ~ } = X (9 (V 
(9?).  
168 
(15) a. I f=X, gfXl Y\] 
b. \ [ f=a,g=a I _Y\] 
c. \[f=\[h=a I X l  \ ] ,g=\[hfa I X I  \] I_Y\] 
d \[f=\[h=a I Xl,g=\[h=._Z IX1\] I Y \ ]  
If we unify (15a) with \[\[=al_Yl\]. we get (15b), in 
which the value of g has been updated as well 
Thus, the requirements of (4a,b) are always 
met, and furthermore, the reentrancy as such 
between fand  g is no longer visible (condition 
4c). If we unify (I 5a) with U'=\[h=a IX2)  I Y3\], 
we get (15c), in which the variable Xhas  been 
replaced by X1, which can be interpreted as 
ranging over all paths that are realized but not 
defined underf(condlt lon (4d)). Note also that 
this representation has the advantage that we 
can define a reentrancy for all realized 
features, without having to specify the set of 
possible features or expanding the value o f f  
into a list containing all these features. If we 
defaul t  un i fy  (15a) w i th  \[f=\[hffial_X2II_X,3\] as 
non-default  information, for instance, the 
resu l t  is representab le  as (15d). The 
reentrancy for all undefined features under f is 
represented by X1. The constant NIL of FML* 
is represented as a Prolog variable ( _Z in this 
case). Thus, the seemingly space consuming 
procedure of bringing a formula into FML* NF 
and transforming the output of (9d) into FML* 
is avoided completely. The actual  default  
unification procedure is a modified version of 
the merge operation defined in D6rre & Elsele 
(1986). 
3.  L INGUIST IC  APPL ICAT IONS 
Default unification can be used to extend the 
s tandard  PATR-II (Shieber et al. 1983) 
methods for defining feature structures. In the 
examples, we freely combine default and non- 
default information (prefixed by I') in template 
definitions. 
(16) a. DET:( l<cat arg> ffi N 
t<cat val> ffi NP 
<cat dir> = r ight 
<cat arg> = <cat val> 
<cat val num> = sg 
<cat val case> = nom ). 
b. NP: ( <cat> =noun 
<bar> ffi2 ). 
c. N : ( <cat> =noun 
<bar> =1 ). 
(16) descr ibes a f ragment of Categorlal  
Unification Grammar (Uszkorelt. 1986, Calder 
et al 1988. Bouma. 1988). The corresponding 
feature structure for a definition such as (16a) 
169 
is determined as follows: first, all default 
information and all non-default information is 
unif ied separately,  which resul ts  in two 
feature-structures (17a,b). The resulting two 
feature structures are merged by means of 
default unification (I 7c). 
(\]7) \] \] case  = nora 
a. |d i r  = r ight  
t -a rg  = <1> 
b. El t?"  'II vaJ = bar  = cat = \ [cat=: \ ]
Larg  bar  = 
c. 
ml 
cat ffi 
m r?., = \] l bar  = 2 
va l  ffi {1} /nu  m 
Lcase  
d i r  ffi r ight  
r,,,,, = 2r,,\] I bar  arg ffi {1} /nu  m 
- Lease  
m 
m m 
In (17c) the equivalence <cat val> = <cat an3> 
had to be replaced by a weaker  set of 
equivalences, which holds for all features 
under  val or arg. except cat and bar. We 
represent his by using \[\]-bracketed indices, 
instead of <> and by marking the attr ibutes 
which are exceptions in ix)/(\[ i ta l ic . .  
TWo things are worth noticing. First of all, the 
unificaUon of non-default information prior to 
merging it with the non-default information, 
guarantees that all default information must  
be unifiable, and thus  it e l iminates the 
possibi l ity of inher i tance confl icts inside 
template definitions. Second, the distinction 
between default and non-default information 
is relevant only in definitions, not in the 
corresponding feature structures. This makes 
the use of the T-operator completely local: if a 
definlUon contains a template, we can replace 
this template by the corresponding feature 
structure and we do not need to worry about 
the fact that this template might contain the 
T-operator. 
The notation Just introduced increases the 
expressive power of standard methods for the 
description of feature structures and can be 
used for an elegant t reatment  of several 
linguisUc phenomena. 
NON-MONOTONIC INHERITANCE OF INFORMATION IN 
TEMPLATES. The use of default unif ication 
enables us to use templates even in those 
cases where not all the information in the 
template Is compatible with the information 
already present in the definition. 
German transitive verbs normally take an 
accusative NP as argument  but there are some 
verbs which take a dative or genitive NP as 
argument.  This Is easily accounted for by 
defining the case of the argument of these 
verbs and lnherittng all other Information 
from the template ~r. 
(\]8) a. "IV: ( <cat val> =VP 
<cat arg> ffi NP 
<cat arg case> =acc ). 
b. he\]fen (Whelp) : 
( TV 
I <cat arg case> ffi dat ). 
gedenken (to c~nmem~ate) 
( TV 
! <cat arg case> = gen ). 
SPECIALIZATION OF REENTRANCIES. An  important 
function of default unification is that It allows 
us to define exceptions to the fact that two 
reentrant feature structures always have to 
denote exactly the same feature structures. 
There Is a wide c lass of  l inguist ic  
construct ions which seems to require such 
mechanisms. 
Specifiers in CUG can be defined as functors 
which take a const i tuent of category C as 
argument, and return a constituent of category 
C, with the exception that one or more specific 
feature values are changed (see Bach, \]983, 
Bouma, \]988). Examples of such categories 
are determiners (see (\]6a)), complementizers 
and auxiliaries. 
(\]9) a. that :(  <cat yah  = <cat arg> 
<cat arg> = S 
<cat arg vform> = fin 
1<cat arg comp> = none 
l<cat val comp> = that ). 
b. will : ( <cat val> = <cat arg> 
<cat rag> = VP 
<cat val> =VP 
1<cat arg vform> ffi bse 
l<cat val vform> ffi fin ). 
Note that the equation <cat val> = <cat arg> 
will cause all addit ional features on the 
argument which are not explicitly mentioned 
In the non-default  part of the definition to 
percolate up to the value. 
Next, consider coordination of NPs. 
(20) X0 --> X\] X2Xo 
<X2 cat> ffi conJ 
?X0> ffi <XI> 
?Y,O> ffi ~ 
<g0 cat> = np 
<X 2 wform> ffi and 
kX0 num> ffi plu 
I<X 1 num> =NIL 
! <X2 num> ffi NIL). 
{20) could be used as a rule for conjunction of 
NPs in UG. It requires identity between the 
mother and the two coordinated elements. 
However, requiring that  the three nodes be 
unifiable would be to strict. The number  of a 
conjoined NP Is always plural and does not 
depend on the number of the coordinated NPs. 
Furthermore, the number of two coordinated 
elements need not be identical. The non- 
default information in (20) takes care of this. 
The effect of this statement Is that adding the 
default informaUon <X0> = <XI> and <gO > ffi 
<X3> will result in a feature structure in which 
XO, X1 and X3 are unified, except for their 
values for <num>. We are not interested in the 
ruan-values of the conJuncts, so they are set to 
N/L {which should be interpreted as in section 
2). The hum -value of the result is always p/u. 
INFLECTIONAL MORPHOLOGY. When seen from a 
CUG perspective, the categories of inflectional 
affixes are comparable to those of specifiers. 
The plural suffix -s for forming plural nouns 
can, for instance, be encoded as a function 
from (regular) singular nouns into Identical, 
but plural, nouns. Thus. we get the following 
categorization: 
(21) - s  : ( <cat val> = <cat arg> 
<cat arg cat> ffi noun 
<cat arg class> = regular 
l<cat arg num> ffi sg 
l<cat val Hum> = plu ). 
Again, all additional information present on 
the argument which Is not mentioned in the 
non-defau l t  part  of  the definit ion, Is 
percolated up to the value automatically. 
I, EXICAL DEFAULTS. The lexical feature 
specification defaults of GPSG can also be 
incorporated. Certain information holds for 
most lexlcal items of a certain category, but 
not for phrases  of th ls  category.  A 
uniflclatlon-based grammar that includes a 
morphological component (see, for instance, 
Calder, 1989 and Evans & Gazdar, 1989), would 
probably list only (regular) root forms as 
lexlcal items. For regular nouns, for instance, 
170 
only the singular form would be listed in the 
lexicon. Such information can be added to 
lexicon definit ions by means of a lexlcal 
default rule: 
{22) v. N ==> ( 3SG <class> = regular} 
b. (x~v ffi N. 
sheep = ( N 
<mum> =NIL 
<class> = irregular}. 
The interpretation of A ==> B is as follows: If 
the definition D of a lexical item is unifiable 
with A, than extend D to B(B D. Thus, the 
lexlcal entry cow would be extended with all 
the information in the default rule above, 
whereas the lexical entry for sheep would only 
be extended with the informat ion that  
<person> = 3. Note that adding the default 
information to the template for N directly, and 
then overwriting it in the irregular cases is not 
a feasible alternative, as this would force us to 
distinguish between the template N if used to 
describe nouns and the template N if used in 
complex categories uch as NP/N or N/N (i.e. 
for determiners or adjectives it is not typically 
the case that they combine only with regular 
and singular nouns). 
& CONCLUSIONS 
We have presented a general definition for 
default unification. The fact that It does not 
focus one the resolution of feature conflicts 
alone, makes it possible to define default 
uni f icat ion as an operat ion on feature 
structures, rather than as an operation adding 
one equation at a tlme to a given feature 
description. This general ization makes it 
possible to give a uniform treatment of such 
things as adding default Information to a 
template, overwriting of feature values and 
lexical default rules. We believe that the 
examples in section 3 demonstrate hat this is 
a useful extension of UG, as it supports the 
definition of exceptions, the formulation more 
adequate theories of feature percolation, and 
the extension of UG with a morphological 
component. 
REFERENCES 
Bach, Emmon 1983 Generalized Categorial 
Grammars and the English Auxiliary. In 
F.Heny and B.R/chards (eds.) Linguistic 
Cateyor/es, Vol II, Dordrecht, Reidel. 
Bouma, Gosse 1988 Modifiers and Specifiers 
in Categor la l  Unif icat ion Grammar ,  
Lingu/st/cs, vo126, 21-46. 
Calder,  Jonathan  1989 Parad igmat ic  
Morphology. Proceedings of the fourth 
Conference of the European Chapter of 
the ACL, Univers i ty of Manchester ,  
Institute of Science and Technology, 58- 
65. 
Calder, Jo; Klein, Ewan & Zeevat, Henk 1988 
Unif icat ion Categor ia l  Grammar :  a 
concise, extendable grammar for natural  
language processing.  Proceedings of 
Collng 1988, Hungar ian  Academy of 
Sciences, Budapest, 83-86. 
DOrre, Jochen; Eisele, Andreas; Wedekind, 
Jflrgen; Calder, Jo; Reape, Mike 1990 A 
Survey of  Lingustfcally Motivated 
extens ions to Unlf icatlon-Based 
Formalisms. ESPRIT Basic Research 
Action 3175, Deliverable R3.I.A. 
Eisele, Andreas & D6rre, Jochen1986 A 
Lexlcal-Functlonal Grammar  System in 
Prolog. Proceedings of COLING 86, 
Institut fQr angewandte KommunikaUons- 
und Sprachforschung, Bonn, 551-553. 
Eisele, Andreas & D6rre, Jochen 1988 
Uni f icat ion of D is junct ive  Feature  
Descr ipt ions.  Proceedings of the 26th 
Annual Meeting of the Association for 
Computat ional  L inguist ics,  State 
University of New York, Buffalo, NY, 286- 
294. 
Evans,  Roger 1987 Towards a Formal  
specification of Defaults in GPSG. In E. 
Klein & J.  van Benthem (eds.), Categories, 
Polymorphlsm and Unification. University 
of Edinburgh, Ed inburgh/  University of 
Amsterdam, Amsterdam, 73-93. 
Evans, Roger & Gazdar, Gerald 1989 Inference 
in DATR. Proceedings of the fourth 
Conference of the European Chpater of 
the ACL, Univers i ty of Manchester ,  
Institute of Science and Technology, 66- 
71. 
Fllckinger, Daniel; Pollard, Carl & Wasow, 
Thomas 1985 Structure-Sharlng In I.exical 
Representation. Proceedings of the 23rd 
Annual Meeting of the Association for 
171 
Computational Linguistics, University of 
Chicago, Chicago, Illinois, 262-267. 
Gazdar, Gerald 1987 Linguistic Applications of 
Default Inheritance Mechanisms. In P. 
Whitelock, H. Somers, P. Bennett, R, 
Johnson, and M. McGee Wood (eds.), 
Linguistic Theory and Computer 
Applicatfons. Academic Press, London, 
37-68. 
Gazdar, Gerald; Klein, Ewan: Pullum, Geoffry; 
Sag, Ivan 1985 Generalized Phrase 
Structure Grammar. Blackwell, London. 
Oazdar, Gerald & Mellish, Chris 1989 Natural 
Language Processing in Prolog. An 
introduct ion to Computat ional  
Linguistics. Addison-Wesley, Reading, M/L 
Kaplan, Ronald 1987 Three seductions of 
Computational Psycholinguistics. In P. 
Whitelock, H. Somers, P. Bennett, R, 
Johnson, and M. McGee Wood (eds.), 
Linguistic theory and Computer 
Applications. Academic Press, London, 
149-188. 
Kasper, Robert & Rounds, William1986 A 
Logical Semantics for Feature Structures. 
Proceedings of the 26th Annual Meeting of 
the Association for Computational 
Linguistics, Columbia University, New 
York, NY, 257-266. 
Pollard, Carl & Sag, Ivan 1987 Information- 
Based Syntax and Semantics, vol I : 
Fundamentals, CSLI Lecture Notes 13, 
University of Chicago Press. Chicago. 
Shieber, Stuart; Uszkorelt, Hans; Perelra, 
Fernando; Robinson, Jane; & Tyson, 
Mabry 1983 The Formal ism and 
Implementation f PATR-II. In B. Grosz & 
M. SUckel (eds.) Research on Interactive 
Acquisition and Use of Knowledge, SRI 
International, Menlo Park, Ca. 
Shieber ,  S tuar t  1986a A Simple 
Reconstruction of GPSG. Proceedings of 
COL/NG 1986. Instltut f(Ir angewandte 
Kommunikations- und Spraehforschung, 
Bonn, 211-215. 
Shieber, Stuart 1986b An Introduction to 
Unlf lcatlon-based Approaches to 
Grammar .  CSLI Lecture Notes 4, 
University of Chicago Press, Chicago. 
Uszkoreit, Hans 1986 Categorlal Unification 
Grammars. Proceedings of COIINO 1986. 
I ns t l tu t  fQr angewandte  
Kommunikations- und Sprachforschung, 
Bonn, 187-194. 
172 
