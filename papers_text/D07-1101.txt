Proceedings of the CoNLL Shared Task Session of EMNLP-CoNLL 2007, pp. 957?961,
Prague, June 2007. c?2007 Association for Computational Linguistics
Experiments with a Higher-Order Projective Dependency Parser
Xavier Carreras
Massachusetts Institute of Technology (MIT)
Computer Science and Artificial Intelligence Laboratory (CSAIL)
32 Vassar St., Cambridge, MA 02139
carreras@csail.mit.edu
Abstract
We present experiments with a dependency
parsing model defined on rich factors. Our
model represents dependency trees with fac-
tors that include three types of relations be-
tween the tokens of a dependency and their
children. We extend the projective pars-
ing algorithm of Eisner (1996) for our case,
and train models using the averaged percep-
tron. Our experiments show that consider-
ing higher-order information yields signifi-
cant improvements in parsing accuracy, but
comes at a high cost in terms of both time
and memory consumption. In the multi-
lingual exercise of the CoNLL-2007 shared
task (Nivre et al, 2007), our system obtains
the best accuracy for English, and the second
best accuracies for Basque and Czech.
1 Introduction
Structured prediction problems usually involve
models that work with factored representations of
structures. The information included in the factors
determines the type of features that the model can
exploit. However, richer representations translate
into higher complexity of the inference algorithms
associated with the model.
In dependency parsing, the basic first-order model
is defined by a decomposition of a tree into head-
modifier dependencies. Previous work extended this
basic model to include second-order relations?i.e.
dependencies that are adjacent to the main depen-
dency of the factor. Specifically, these approaches
considered sibling relations of the modifier token
(Eisner, 1996; McDonald and Pereira, 2006). In this
paper we extend the parsing model with other types
of second-order relations. In particular, we incorpo-
rate relations between the head and modifier tokens
and the children of the modifier.
One paradigmatic case where the relations we
consider are relevant is PP-attachment. For example,
in ?They sold 1,210 cars in the U.S.?, the ambigu-
ity problem is to determine whether the preposition
?in? (which governs ?the U.S.?) is modifying ?sold?
or ?cars?, the former being correct in this case. It is
generally accepted that to solve the attachment deci-
sion it is necessary to look at the head noun within
the prepositional phrase (i.e., ?U.S.? in the exam-
ple), which has a grand-parental relation with the
two candidate tokens that the phrase may attach?
see e.g. (Ratnaparkhi et al, 1994). Other ambigu-
ities in language may also require consideration of
grand-parental relations in the dependency structure.
We present experiments with higher-order models
trained with averaged perceptron. The second-order
relations that we incorporate in the model yield sig-
nificant improvements in accuracy. However, the in-
ference algorithms for our factorization are very ex-
pensive in terms of time and memory consumption,
and become impractical when dealing with many la-
bels or long sentences.
2 Higher-Order Projective Models
A dependency parser receives a sentence x of n to-
kens, and outputs a labeled dependency tree y. In
the tree, a labeled dependency is a triple ?h, m, l?,
where h ? [0 . . . n] is the index of the head token,
957
lh m ccch mi mo
Figure 1: A factor in the higher-order parsing model.
m ? [1 . . . n] is the index of the modifier token, and
l ? [1 . . . L] is the label of the dependency. The
value h = 0 is used for dependencies where the
head is a special root-symbol of the sentence. We
denote by T (x) the set of all possible dependency
structures for a sentence x. In this paper, we restrict
to projective dependency trees. The dependency tree
computed by the parser for a given sentence is:
y?(x) = arg max
y?T (x)
?
f?y
score(w,x, f)
The parsing model represents a structure y as a set of
factors, f ? y, and scores each factor using param-
eters w. In a first-order model a factor corresponds
to a single labeled dependency, i.e. f = ?h, m, l?.
The features of the model are defined through a fea-
ture function ?1(x, h, m) which maps a sentence to-
gether with an unlabeled dependency to a feature
vector in Rd1 . The parameters of the model are a
collection of vectors wl1 ? Rd1 , one for each pos-
sible label. The first-order model scores a factor as
score1(w,x, ?h, m, l?) = ?1(x, h, m) ? wl1.
The higher-order model defined in this paper de-
composes a dependency structure into factors that
include children of the head and the modifier. In
particular, a factor in our model is represented by
the signature f = ?h, m, l, ch, cmi, cmo? where, as
in the first-order model, h, m and l are respectively
the head, modifier and label of the main dependency
of the factor; ch is the child of h in [h . . .m] that
is closest to m; cmi is child of m inside [h . . .m]
that is furthest from m; cmo is the child of m out-
side [h . . . m] that is furthest from m. Figure 1 de-
picts a factor of the higher-order model, and Table 1
lists the factors of an example sentence. Note that a
factor involves a main labeled dependency and three
adjacent unlabeled dependencies that attach to chil-
dren of h and m. Special values are used when either
of these children are null.
The higher-order model defines additional
m h ch cmi cmo
They 1 2 - - -
sold 2 0 - 1 5
1,200 3 4 - - -
cars 4 2 - 3 -
in 5 2 4 - 7
the 6 7 - - -
U.S. 7 5 - 6 -
Table 1: Higher-order factors for an example sentence. For
simplicity, labels of the factors have been omitted. A first-order
model considers only ?h, m?. The second-order model of Mc-
Donald and Pereira (2006) considers ?h, m, ch?. For the PP-
attachment decision (factor in row 5), the higher-order model
allows us to define features that relate the verb (?sold?) with the
content word of the prepositional phrase (?U.S.?).
second-order features through a function
?2(x, h, m, c) which maps a head, a modifier
and a child in a feature vector in Rd2 . The param-
eters of the model are a collection of four vectors
for each dependency label: wl1 ? Rd1 as in the
first-order model; and wlh,wlmi and wlmo, all three
in Rd2 and each associated to one of the adjacent
dependencies in the factor. The score of a factor is:
score2(w,x, ?h, m, l, ch, cmi, cmo?) =
?1(x, h, m) ? wl1 + ?2(x, h, m, ch) ? wlh +
?2(x, h, m, cmi) ? wlmi + ?2(x, h, m, cmo) ? wlmo
Note that the model uses a common feature func-
tion for second-order relations, but features could
be defined specifically for each type of relation.
Note also that while the higher-order factors include
four dependencies, our modelling choice only ex-
ploits relations between the main dependency and
secondary dependencies. Considering relations be-
tween secondary dependencies would greatly in-
crease the cost of the associated algorithms.
2.1 Parsing Algorithm
In this section we sketch an extension of the pro-
jective dynamic programming algorithm of Eis-
ner (1996; 2000) for the higher-order model de-
fined above. The time complexity of the algo-
rithm is O(n4L), and the memory requirements are
O(n2L + n3). As in the Eisner approach, our algo-
rithm visits sentence spans in a bottom up fashion,
and constructs a chart with two types of dynamic
programming structures, namely open and closed
structures?see Figure 2 for a diagram. The dy-
namic programming structures are:
958
h m h m ecmo
l
micr+1rhc
l
Figure 2: Dynamic programming structures used in the pars-
ing algorithm. The variables in boldface constitute the index of
the chart entry for a structure; the other variables constitute the
back-pointer stored in the chart entry. Left: an open structure
for the chart entry [h, m, l]O ; the algorithm looks for the r, ch
and cmi that yield the optimal score for this structure. Right:
a closed structure for the chart entry [h, e, m]C ; the algorithm
looks for the l and cmo that yield the optimal score.
? Open structures: For each span from s to e and
each label l, the algorithm maintains a chart
entry [s, e, l]O associated to the dependency
?s, e, l?. For each entry, the algorithm looks
for the optimal splitting point r, sibling ch and
grand-child cmi using parameters wl1, wlh and
wlmi. This can be done in O(n2) because our
features do not consider interactions between
ch and cmi. Similar entries [e, s, l]O are main-
tained for dependencies headed at e.
? Closed structures: For each span from s to e
and each token m ? [s . . . e], the algorithm
maintains an entry [s, e, m]C associated to a
partial dependency tree rooted at s in which m
is the last modifier of s. The algorithm chooses
the optimal dependency label l and grand-child
cmo in O(nL), using parameters wlmo. Similar
entries [e, s, m]C are maintained for dependen-
cies headed at e.
We implemented two variants of the algorithm.
The first forces the root token to participate in ex-
actly one dependency. The second allows many de-
pendencies involving the root token. For the single-
root case, it is necessary to treat the root token dif-
ferently than other tokens. In the experiments, we
used the single-root variant if sentences in the train-
ing set satisfy this property. Otherwise we used the
multi-root variant.
2.2 Features
The first-order features ?1(x, h, m) are the exact
same implementation as in previous CoNLL sys-
tem (Carreras et al, 2006). In turn, those features
were inspired by successful previous work in first-
order dependency parsing (McDonald et al, 2005).
The most basic feature patterns consider the sur-
face form, part-of-speech, lemma and other morpho-
syntactic attributes of the head or the modifier of a
dependency. The representation also considers com-
plex features that exploit a variety of conjunctions
of the forms and part-of-speech tags of the follow-
ing items: the head and modifier; the head, modifier,
and any token in between them; the head, modifier,
and the two tokens following or preceding them.
As for the second-order features, we again
base our features with those of McDonald and
Pereira (2006), who reported successful experiments
with second-order models. We add some patterns to
their features. Let dir be ?right? if h < m, and
?left? otherwise; let form(xi) and cpos(xi) return
the surface form and coarse part-of-speech of token
xi, respectively. The definition of ?2(x, h, m, c) is:
? dir ? cpos(xh) ? cpos(xm) ? cpos(xc)
? dir ? cpos(xh) ? cpos(xc)
? dir ? cpos(xm) ? cpos(xc)
? dir ? form(xh) ? form(xc)
? dir ? form(xm) ? form(xc)
? dir ? cpos(xh) ? form(xc)
? dir ? cpos(xm) ? form(xc)
? dir ? form(xh) ? cpos(xc)
? dir ? form(xm) ? cpos(xc)
3 Experiments and Results
We report experiments with higher-order models for
the ten languages in the multilingual track of the
CoNLL-2007 shared task (Nivre et al, 2007).1
In all experiments, we trained our models us-
ing the averaged perceptron (Freund and Schapire,
1999), following the extension of Collins (2002) for
structured prediction problems. To train models, we
used ?projectivized? versions of the training depen-
dency trees.2
1We are grateful to the providers of the treebanks that con-
stituted the data for the shared task (Hajic? et al, 2004; Aduriz
et al, 2003; Mart?? et al, 2007; Chen et al, 2003; Bo?hmova? et
al., 2003; Marcus et al, 1993; Johansson and Nugues, 2007;
Prokopidis et al, 2005; Csendes et al, 2005; Montemagni et
al., 2003; Oflazer et al, 2003).
2We obtained projective trees for training sentences by run-
ning the projective parser with an oracle model (that assigns a
score of +1 to correct dependencies and -1 otherwise).
959
Catalan Czech English
First-Order, no averaging 82.07 68.98 83.75
First-Order 86.15 75.96 87.54
Higher-Order, ch 87.50 77.15 88.70
Higher-Order, ch cmo 87.68 77.62 89.28
Higher-Order, ch cmi cmo 88.04 78.09 89.59
Table 2: Labeled attachment scores on validation data
(?10,000 tokens per language), for different models that ex-
ploit increasing orders of factorizations.
3.1 Impact of Higher-Order Factorization
Our first set of experiments looks at the performance
of different factorizations. We selected three lan-
guages with a large number of training sentences,
namely Catalan, Czech and English. To evaluate
models, we held out the training sentences that cover
the first 10,000 tokens; the rest was used for training.
We compared four models at increasing orders of
factorizations. The first is a first-order model. The
second model is similar to that of McDonald and
Pereira (2006): a factor consists of a main labeled
dependency and the head child closest to the mod-
ifier (ch). The third model incorporates the modi-
fier child outside the main dependency in the fac-
torization (cmo). Finally, the last model incorpo-
rates the modifier child inside the dependency span
(cmi), thus corresponding to the complete higher-
order model presented in the previous section.
Table 2 shows the accuracies of the models on
validation data. Each model was trained for up to
10 epochs, and evaluated at the end of each epoch;
we report the best accuracy of these evaluations.
Clearly, the accuracy increases as the factors in-
clude richer information in terms of second-order
relations. The richest model obtains the best accu-
racy in the three languages, being much better than
that of the first-order model. The table also reports
the accuracy of an unaveraged first-order model, il-
lustrating the benefits of parameter averaging.
3.2 Results on the Multilingual Track
We trained a higher-order model for each language,
using the averaged perceptron. In the experiments
presented above we observed that the algorithm
does not over-fit, and that after two or three train-
ing epochs only small variations in accuracy occur.
Based on this fact, we designed a criterion to train
models: we ran the training algorithm for up to three
training test
sent./min. mem. UAS LAS
Arabic 1.21 1.8GB 81.48 70.20
Basque 33.15 1.2GB 81.08 75.73
Catalan 5.50 1.7GB 92.46 87.60
Chinese 1461.66 60MB 86.20 80.86
Czech 18.19 1.8GB 85.16 78.60
English 15.57 1.0GB 90.63 89.61
Greek 8.10 250MB 81.37 73.56
Hungarian 5.65 1.6GB 79.92 75.42
Italian 12.44 900MB 87.19 83.46
Turkish 116.55 600MB 82.41 75.85
Average - - 84.79 79.09
Table 3: Performance of the higher-order projective models
on the multilingual track of the CoNLL-2007 task. The first two
columns report the speed (in sentences per minute) and mem-
ory requirements of the training algorithm?these evaluations
were made on the first 1,000 training sentences with a Dual-
Core AMD OpteronTM Processor 256 at 1.8GHz with 4GB of
memory. The last two columns report unlabelled (UAS) and
labelled (LAS) attachment scores on test data.
days of computation, or a maximum of 15 epochs.
For Basque, Chinese and Turkish we could complete
the 15 epochs. For Arabic and Catalan, we could
only complete 2 epochs. Table 3 reports the perfor-
mance of the higher-order projective models on the
ten languages of the multilingual track.
4 Conclusion
We have presented dependency parsing models that
exploit higher-order factorizations of trees. Such
factorizations allow the definition of second-order
features associated with sibling and grand-parental
relations. For some languages, our models obtain
state-of-the-art results.
One drawback of our approach is that the infer-
ence algorithms for higher-order models are very ex-
pensive. For languages with many dependency la-
bels or long sentences, training and parsing becomes
impractical for current machines. Thus, a promising
line of research is the investigation of methods to
efficiently incorporate higher-order relations in dis-
criminative parsing.
Acknowledgments
I am grateful to Terry Koo, Amir Globerson and Michael
Collins for their helpful comments relating this work, and to the
anonymous reviewers for their suggestions. A significant part
of the system and the code was based on my previous system in
the CoNLL-X task, developed with Mihai Surdeanu and Llu??s
Ma`rquez at the UPC. The author was supported by the Catalan
Ministry of Innovation, Universities and Enterprise.
960
References
A. Abeille?, editor. 2003. Treebanks: Building and Using
Parsed Corpora. Kluwer.
I. Aduriz, M. J. Aranzabe, J. M. Arriola, A. Atutxa, A. Diaz
de Ilarraza, A. Garmendia, and M. Oronoz. 2003. Con-
struction of a Basque dependency treebank. In Proc. of the
2nd Workshop on Treebanks and Linguistic Theories (TLT),
pages 201?204.
A. Bo?hmova?, J. Hajic?, E. Hajic?ova?, and B. Hladka?. 2003. The
PDT: a 3-level annotation scenario. In Abeille? (Abeille?,
2003), chapter 7, pages 103?127.
X. Carreras, M. Surdeanu, and L. Ma`rquez. 2006. Projective
dependency parsing with perceptron. In Proc. CoNLL-X.
K. Chen, C. Luo, M. Chang, F. Chen, C. Chen, C. Huang, and
Z. Gao. 2003. Sinica treebank: Design criteria, representa-
tional issues and implementation. In Abeille? (Abeille?, 2003),
chapter 13, pages 231?248.
M. Collins. 2002. Discriminative training methods for hidden
markov models: Theory and experiments with perceptron al-
gorithms. In Proc. of EMNLP-2002.
D. Csendes, J. Csirik, T. Gyimo?thy, and A. Kocsor. 2005. The
Szeged Treebank. Springer.
J. Eisner. 1996. Three new probabilistic models for depen-
dency parsing: An exploration. In Proc. COLING.
J. Eisner. 2000. Bilexical grammars and their cubic-time pars-
ing algorithms. In H. C. Bunt and A. Nijholt, editors, New
Developments in Natural Language Parsing, pages 29?62.
Kluwer Academic Publishers.
Y. Freund and R. E. Schapire. 1999. Large margin classifi-
cation using the perceptron algorithm. Machine Learning,
37(3):277?296.
J. Hajic?, O. Smrz?, P. Zema?nek, J. ?Snaidauf, and E. Bes?ka. 2004.
Prague Arabic dependency treebank: Development in data
and tools. In Proc. of the NEMLAR Intern. Conf. on Arabic
Language Resources and Tools, pages 110?117.
R. Johansson and P. Nugues. 2007. Extended constituent-to-
dependency conversion for English. In Proc. of the 16th
Nordic Conference on Computational Linguistics (NODAL-
IDA).
M. Marcus, B. Santorini, and M. Marcinkiewicz. 1993. Build-
ing a large annotated corpus of English: the Penn Treebank.
Computational Linguistics, 19(2):313?330.
M. A. Mart??, M. Taule?, L. Ma`rquez, and M. Bertran.
2007. CESS-ECE: A multilingual and multilevel
annotated corpus. Available for download from:
http://www.lsi.upc.edu/?mbertran/cess-ece/.
R. McDonald and F. Pereira. 2006. Online learning of approx-
imate dependency parsing algorithms. In Proc. of EACL-
2006.
R. McDonald, K. Crammer, and F. Pereira. 2005. Online large-
margin training of dependency parsers. In Proc. ACL.
S. Montemagni, F. Barsotti, M. Battista, N. Calzolari, O. Coraz-
zari, A. Lenci, A. Zampolli, F. Fanciulli, M. Massetani,
R. Raffaelli, R. Basili, M. T. Pazienza, D. Saracino, F. Zan-
zotto, N. Nana, F. Pianesi, and R. Delmonte. 2003. Build-
ing the Italian Syntactic-Semantic Treebank. In Abeille?
(Abeille?, 2003), chapter 11, pages 189?210.
J. Nivre, J. Hall, S. Ku?bler, R. McDonald, J. Nilsson, S. Riedel,
and D. Yuret. 2007. The CoNLL 2007 shared task on de-
pendency parsing. In Proc. of EMNLP-CoNLL.
K. Oflazer, B. Say, D. Zeynep Hakkani-Tu?r, and G. Tu?r. 2003.
Building a Turkish treebank. In Abeille? (Abeille?, 2003),
chapter 15, pages 261?277.
P. Prokopidis, E. Desypri, M. Koutsombogera, H. Papageor-
giou, and S. Piperidis. 2005. Theoretical and practical is-
sues in the construction of a Greek dependency treebank. In
Proc. of the 4th Workshop on Treebanks and Linguistic The-
ories (TLT), pages 149?160.
A. Ratnaparkhi, J. Reinar, and S. Roukos. 1994. A maximum
entropy model for prepositional phrase attachment. In Proc.
of the ARPA Workshop on Human Language Technology.
961
