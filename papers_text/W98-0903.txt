Three Formal Extensions to Primitive Optimality Theory 
Danie l  M .  A lb ro  
Linguistics Department ,  UCLA 
3125 Campbel l  Hall 
Los Angeles, CA 90095-1543, USA 
albro?humnet, ucla. edu 
Abst rac t  
This paper proposes an expansion of set of prim- 
itive constraints available within the Primitive 
Optimality Theory framework (Eisner, 1997a). 
This expansion consists of the addition of a 
new family of constraints--existential implica- 
tional constraints, which allow the specification 
of faithfulness constraints that can be satis- 
fied at a distance--and the definition of two 
ways to combine simple constraints into com: 
plex constraints, that is, constraint disjunction 
(Crowhurst and Hewitt, 1995) and local con- 
straint conjunction (Smolensky, 1995). 
1 In t roduct ion  
Primitive Optimality Theory (OTP) (Eisner, 
1997a), and extensions to it (e.g., Albro (1998)), 
can be useful as a formal system in which phono- 
logical analyses can be implemented and evalu- 
ated. However, for certain types of constraints, 
translation into the primitives of OTP (Eisner 
(1997b)) can only be accomplished by adding to 
the grammar a number of ad hoc phonological 
tiers. Because these tiers serve no phonological 
purpose other than to allow calculation of the 
constraints without adding new primitives, and 
because the addition of phonological tiers to an 
OTP grammar can have a dramatic negative im- 
pact on the efficiency of OTP implementations 1, 
it is preferable to avoid the addition of ad hoc 
tiers by adding new primitives to the system. 
This paper looks at three types of constraints 
employed throughout the Optimality Theoretic 
literature that cannot be translated in to the 
1The computation time for an Optimality Theoretic 
derivation within the implementation of Albro (1998) 
increases exponentially with the number of tiers. The 
same is true for the implementation described in Eisner 
(1997a), although a proposal is given there for a method 
that might improve the situation. 
primitives of OTP without reference to ad hoc 
tiers, and proposes a formalization of these con- 
straints that is compatible with the finite state 
model described in Eisner (1997a) and Albro 
(1998). These are constraints of existential im- 
plication (that is, of faithfulness without the re- 
quirement of alignment), constraint disjunction, 
and local constraint conjunction. 
2 Ex is tent ia l  Imp l i ca t ion  
2.1 Mot ivat ion  
OWP as described in Eisner (1997a) provides 
some support for correspondence constraints 
(input-output only). These may be defined by 
means of implication constraints of the form 
P --4 P or P --+ P, which can be inter- 
preted as requiring, in the first case, that each 
surface constituent representing property P be 
aligned with an underlying constituent repre- 
senting that property, and in the second case 
that every underlying constituent representing 
property P be aligned with a surface con- 
stituent representing that property. Constraints 
of this type may be employed to require corre- 
spondence between the underlying representa- 
tion and the surface representation where corre- 
sponding constituents must be aligned with one 
another. However, natural anguages also seem 
to follow weaker constraints requiring only that 
for each underlying constituent there be a corre- 
sponding surface constituent, regardless of the 
position of that constituent relative to its po- 
sition in the underlying representation. For ex- 
ample, in Sanskrit roots with at least two voiced 
stops, where the root ends in a voiced aspirated 
stop, the underlying aspiration of the root-final 
stop can be realized upon that stop in the sur- 
face representation only when the root is fol- 
lowed by a suffix beginning with a vocoid or a 
nasal (data from Whitney (1889)): 
21 
/da,9a/ reach to \[dagfli~janti\] (Fut.) 
/bud~/  know, wake \[bod~i\] (Aor.) 
/dab~/  harm \[dab~ati\] (Pres.) 
Otherwise, the aspiration is realized on the pre- 
ceding stop: 
/dag~/  reach to \[d~ak\] (root noun) 
/buda/  know, wake \[baut\] (root noun) 
/dab~/  harm \[dfiap\] (root noun) 
In these forms it is clear that  aspiration is be- 
ing preserved, but that it is surfacing in a po- 
sition that  cannot overlap with the underlying 
form. Another example is the Bantu language 
Chizigula (Kenstowicz and Kisseberth, 1988), 
in which roots with underlying high vowels ap- 
pear on the surface with a single high tone in 
the penult imate syllable of the word, where this 
syllable could belong to a suffix. Additionally, if 
a prefix with an underlying high tone is prefixed 
to a root with no underlying high tone, the high 
tone of the prefix appears in the penult imate 
syllable of the resulting word. The existence of 
a high tone in the underlying form implies the 
existence of a high tone in the surface form, but 
the position where that high tone occurs in the 
underlying form has nothing to do with where 
the tone appears on the surface. 
2.2 Formal i za t ion  
Existential implication constraints can be used 
to drive correspondence ffects such as the 
above. These constraints take the form "If X 
appears within domain D, then Y must ap- 
pear within D as well." Using the terms of 
OTP, this family of constraints can be written 
as a'l A . . .A  am ~ /31 V ...V/3n/9,1 A . . .A  9,p- 
Here each a'i or /3j is a constituent interior or 
edge, one of tier, \]tier, or \[tier, where tier rep- 
resents a constituent ype, and each 9,k must 
be a constituent interior (tier). The constraint 
represented by this notation outputs a violation 
for each domain 9,, where 9' represents the in- 
tersection of the domains 9,k, in which the time 
slice represented by the oq occurs, but no/3j oc- 
curs. Using the FST notation of Eisner (1997a), 
the implementation for this constraint would be 
the following FST: 
\[/0 N/0 
X/0 
where X represents ".E*-((in or begin all 7k) - 
(in all 7k))," N represents "((in all 7k) A -~(in 
all ai) A -~(in some/3j))," B represents "((in all 
9,k) A (in some/3j))," A represents "((in all 7k) A 
(in all cq) A -~(in some/3j))," \[ represents "((in 
or begin all 9,k) - (in all 9,k))," and \] represents 
"((in or end all 9,k) - (in all 9,k))." That  is, 
the machine moves from state S to state 1 if 
the domain 9, is entered. It moves from there 
back to state S if the end of the domain appears 
before cv does, or if any/3 appears. If a appears, 
the machine moves from state 1 to state 2. From 
state 2, if/3 appears, the machine returns to 
the start state without outputt ing a violation, 
but if the end of the domain appears without 
any/3 having appeared, the machine outputs  a 
violation. 
3 Const ra in t  D is junct ion  
Crowhurst and Hewitt (1995) cite a number 
of instances in which it appears that  multiple 
simple constraints must be combined via dis- 
junction (there called conjunction) into com- 
plex constraints. Here a simple constraint is 
a function that takes an input, surface pair as 
its input and returns true if a particular dis- 
allowed phonological structure or lack of corre- 
spondence is present in the pair, otherwise false. 
A constraint disjunction would thus be a func- 
tion that  returns the disjunction of the outputs  
of its component constraints. Thus a constraint 
defined by disjunction of component constraints 
outputs a violation whenever any one of its com- 
ponents does. 
Formalization of constraint disjunction re- 
quires reference only to intersection of weighted 
finite state machines. Specifically, if constraint 
Cx is defined as a weighted finite state ma- 
chine T1 = (~E1, ~2,Qi, F1,81, Ex), where E1 is 
22 
the alphabet of labels, E2 is the alphabet of 
weights, drawn from the natural numbers, Q1 
is the set of states of the machine, F1 C Q1 is 
the final states, Sl is the start state, and E1 C 
Q1 ? Y.q ? Z,2 ? Q1 is the set of edges, and con- 
straint C2 is another weighted eterministic fi-
nite state machine T2 -- (~1, ~2, Q2, F2, s2, E2), 
then the disjunction of the two constraints may 
be defined as follows: 
T = (~1, ~2, Q1 ? Q2, F1 ? F2, (81,82), E>, 
((q1,1, q2,1>, a, n, (ql,2, q2,2)> 6 E iff 
(ql,1, a l ,  nl ,ql ,2> E E iA  
(q2,1, a2, n2, q2,2) E E2A 
a ---- a I N a2A 
n = (nl v n2) 
A possible notation for the disjunction of two 
constraints C1 and C2 is C1 v C2, for example 
"(yce --+ vce) V (cont --+ cont)". 
A similar concept is that of mutually un- 
ranked primitive constraints. For any given in- 
put, a complex constraint defined as a group 
of mutually unranked primitive constraints re- 
turns the sum of the violations that the primi- 
tive constraints returned. Although it has been 
argued that the formal power provided by allow- 
ing new constraints to be defined by grouping 
mutually unranked primitive constraints i too 
great, constraints so defined are fairly prevalent 
in the literature. For example, Steriade (1996) 
makes use of a constraint Parad igm Unifor-  
mi ty  (PU)  Stress which requires that all fea- 
tures within stressed syllables in-one member 
of a paradigm must be preserved in the cor- 
responding syllable of other members of that 
paradigm. PU Stress is equivalent o a set 
of mutually unranked paradigm uniformity con- 
straints for all phonological features. The em- 
pirical prediction of PU  Stress is that changes 
in any one feature are as important as changes 
in any other. If PU  Stress were instead to 
be considered a block of ranked constraints for 
the individual features, the prediction would be 
that in the comparison between one candidate 
in which the top-ranked feature is identical be- 
tween stressed syllables of the paradigm mem- 
bers, but all other features are different, and 
another candidate in which only a lower-ranked 
feature is different, the first candidate would 
prevail. The data seems to bear out the predic- 
tion of the definition using mutually unranked 
constraints. Another possible definition of PU  
Stress would be to make use of constraint dis- 
junction. In this definition, all features would 
be equally important, but the number of non- 
identical features would not matter--candidates 
differing in three features would be equal to can- 
didates differing in one feature. Once again, the 
definition using mutually unranked constraints 
seems better borne out by the data. 
Leaving aside constraints such as PU Stress,  
we will see that complex constraints defined as 
combinations of mutually unranked constraints 
are useful as inputs to local constraint conjunc- 
tions. The formal definition of a complex con- 
straint in terms of mutually unranked subcon- 
straints is identical to the definition of a con- 
straint disjunction, except that the weight n of 
a new edge is defined as the sum of the weights 
of the input edges nl and n2 rather than the 
disjunction: 
T = (El, E:, Q1 ? Q2, F1 ? F2, (sl, s2), E), 
((q1,1, q2,1), a, n, (ql,2, q2.2)) E E iff 
(ql,1,al, nl, ql,2) E E1A 
(q2,1, a2, n2, q:,2) E E2A 
a 1 N a2 ---- aA 
A possible notation for a complex constraint 
C combining mutually unranked constraints C1 
and C2 is C1 + C2, for example "(vce ~ vce) + 
(cont ~ cont)". 
4 Loca l  Const ra in t  Con junct ion  
Smolensky (1995) and Kirchner (1996) propose 
a different method for combining constraints: 
local conjunction. A local conjunction of con- 
straints is defined as a constraint hat outputs 
a violation for each domain of a specified type 
in which all of the component constraints are 
violated. A constraint may be locally conjoined 
with itself, in which case the resulting conjunc- 
tion outputs a violation whenever there are two 
violations of the component constraint within 
the specified omain. The conjunction of a con- 
straint C1 with itself within a domain 7 may be 
notated "A(C1)/7." 
The following algorithm computes the local 
conjunction of constraint C1, where C1 is rep- 
resented by the weighted finite state machine 
T1 = (El, 22, Q1, Sl, F1, El), with itself within 
23 
a domain 7 defined as the intersection of the 
domains '71 A . . .  A 'Tn: 
1. Weaken C1 to a new constraint C1 ~ such 
that for any utterance to which C1 assigns 
a non-zero number n of violations, C1' as- 
signs n - 1 violations. This may be accom- 
plished as follows: 
(a) Copy T1 as T~, renumbering the states 
of T2 so that there is no ambiguity. 
(b) Combine T1 and T2 into T = 
(E1,E2, Q1uQ2,sl,FiUF2, E= E1U 
(c) For each edge (qi, a, w, qj) E El, where 
w > 0, modify the edge to (qi, a, w-  
1, s~}, where s2 is the state correspond- 
ing to the start state of T~. T repre- 
sents constraint C1'. 
2. Define a finite state machine M as follows: 
+G 
-G\[ 
G\[ 
. 
where G\[ represents the beginning of do- 
main '7, G\[ represents anything other than 
G\[, -4-6 represents the interior of the do- 
main, \]G represents a boundary between 
two '7 domains, and \]G represents he end 
of the '7 domain. 
The machine M will be used to limit the 
evaluation of constraint C1 ~ to the domain 
'7. To accomplish this, we need to define 
the behavior at the edges of the '7 domain. 
Outside the '7 domain, violations of C1 ~ will 
have no effect. At the left edge of the 3' 
domain, violations that do not involve the 
left. edge of constituents will have no effect. 
At the right edge of the '7 domain, viola- 
tions that do not involve the right edge of 
constituents will have no effect. The final 
weighted finite state machine L represent- 
ing the local conjunction of C1 with itself 
is produced by intersecting M with T, with 
the following modifications made to the in- 
tersection algorithm. Edges from T that 
are intersected with the edge G\[, or edges 
from T that are intersected with the edge 
G\[ and contain no reference to a left edge, 
or edges from T that are intersected with 
the edge \]G and contain no reference to a 
right edge, are assigned a weight of 0, and 
if their destination within T was state s2, 
their destination in T is treated as having 
been Sl. This has the effect of limiting the 
constraint violations of C1 ~ to the domain 
7. Edges from T that are intersected with 
edge IG keep their original weight, but are 
treated as though their destination within 
T was sl. This has the effect of resetting 
C1 ~ to zero violations at the beginning of a 
'7 domain immediately following another. 
The constraint A(C1)/7 produced by the above 
algorithm outputs a violation for every viola- 
tion of C1 after the first within domain '7. Thus 
A(C1)/7 penalizes two or more violations of C1 
within '7, but does not penalize single violations 
of C1. 
For example, the constraint A_kA is repre- 
sented as the following weighted finite state ma- 
chine: 
\]lA/1 
The result of the above algorithm is the follow- 
ing machine: 
IWd/0 
While this algorithm does not allow defini- 
tion of local conjunction of different constraints, 
24 
it can be given nearly equivalent power by ap- 
plying it to the output of complex constraints 
formed from mutually unranked subconstraints. 
References  
Daniel M. Albro. 1998. Evaluation, implemen- 
tation, and extension of Primitive Optimality 
Theory. Master's thesis, UCLA. 
Megan Crowhurst and Mark Hewitt. 1995. 
Conjunctive constraints and templates in Op- 
timality Theory. Ms. 
Jason Eisner. 1997a. Efficient generation in 
primitive Optimality Theory. In Proceedings 
of the A CL. 
Jason Eisner. 1997b. What constraints should 
OT allow? Handout for talk at LSA, 
Chicago, January. 
Michael Kenstowicz and Charles Kisseberth. 
1988. Chizigula tonology--the word and be- 
yond. Ms. 
Robert Kirchner. 1996. Synchronic hain shifts 
in optimality theory. Linguistic Inquiry. 
Paul Smolensky. 1995. On the internal struc- 
ture of the constraint component Con of UG. 
Handout of talk given at UCLA, April. 
Donca Steriade. 1996. Paradigm uniformity 
and the phonetics-phonology boundary. In 
5th Conference in Laboratory Phonology, 
Evanston, Illinois. 
W. D. Whitney. 1889. Sanskrit grammar. Har- 
vard University Press, Cambridge. 
25 
