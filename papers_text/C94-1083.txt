CATEGORIAL  GRAMMAR AND DISCOURSE REPRESENTATION THEORY 
Reinhard Muskens  
Institute for Language Technology and Artificial Intelligence (ITK) 
PO Box 90153, 5000 LE, Tilburg, The Netherlands, R.A.Muskens@kub.nl 
Abstract 
In this paper it is shown how simple texts that can 
be parsed in a Lambek Categorial Grammar can 
also automatically be provided with a semantics in 
the form of a Discourse Representation Structure 
in the sense of Kamp \[1981\]. The assignment of 
meanings to texts uses the Curry-Howard-Van 
Benthem correspondence. 
O. INTRODUCTION 
In Van Benthem \[1986\] it was observed that the 
Curry-Howard correspondence between proofs 
and lamtxla terms can be used to obtain a very el- 
egant and principled match between Lambek 
Categorial Grammar and Montague Semantics. 
Each proof in the gambek calculus is matched 
with a lambda term in this approach, and Van 
Benthem shows how this lambda term can be in- 
terpreted as a recipe for obtaining the meaning of 
the expression that corresponds to the conclusion 
of the Lambek proof from the meanings of its 
constituent parts. 
Usually the semantics that is obtained in this 
way is an extensional variant of the semantics 
given in Montague \[1973\] (Hendriks \[1993\] 
sketches how the method can be generalized for 
the full intensional fi'agment). However, it is gen- 
erally acknowledged nowadays that the empirical 
coverage of classical Montague Grammar falls 
short in some important respects. Research in 
semantics in the last fifteen years or so has in- 
creasingly been concerned with a set of puzzles 
for which Montague's original system does not 
seem to provide us with adequate answers. The 
puzzles I am referring to have to do with the intri- 
cacies of anaphoric linking. What is the mecha- 
nism behind ordinary cross-sentential naphora, 
as in 'Harry has a cat. He feeds it'? Is it essen- 
tially the same mechanism as the one that is at 
work in the case of temporal anaphora? I low is it 
possible that in Geach's notorious 'donkey' 
sentences, uch as ' I f  a farmer owns a donkey, he 
beats it', the noun phrase 'a farmer' is linked to 
the anaphoric pronoun 'it' without its having 
scope over the conditional and why is it that the 
noun phrase is interpreted as a universal quanti- 
tier, not as an existential one? 
While it has turned out rather fi'uitless to stt, dy 
these and similar questions within classical Mon- 
tague Grammar (MG), they can be studied prof- 
itably within the framework of Discourse 
Representation Theory (DRT, see Heim \[1982, 
1983\], Kamp \[1981\], Kamp & Reyle \[1993\]). 
This semantic theory offers interesting analyses 
of tile phenomena that were mentioned above and 
many researchers in the field now adopt some 
form of DRT as the formalism underlying their 
semantical investigations. 
But the shift of paradigm seems to have its 
drawbacks too. Barwise \[1987\] and Rooth  
\[198711, for example, observe that the new theory 
does not give us the nice unified account of norm 
phrases as generalized quantifiers that Monta- 
gut 's  approach had to offer and it is also clear 
from Ka,n 1) & Reyle \[1993\] that the standard 
DRT treatment of coordination in arbitrary cate- 
gories cannot claim the elegance of the 
Montagovian treatment. For the purposes of this 
paper a third consequence of the paradigm shift is 
important. The Curry-Howard-Van B enthem 
method of providing l~mlbek proofs with mean- 
ings requires that meanings be expressed as 
typed lambda terms. Since this is not the case in 
standard DRT, the latter has no natural interface 
with Lambek Catego,'ial Grammar. 
It seems then that the niceties of MG and DRT 
have a complementary distribution and that con- 
siderablc advantages could be gained f rom 
merging the two, provided that the best of both 
worlds can be retained in the merge. In fact the 
last eight years have witnessed a growing conver- 
gence between the two sem:mtic frameworks. The 
articles by Barwise and Rooth that were men- 
tioned above are early examples of this trend. 
Other important examples are Zeew~t \[1989\] and 
Groenendijk & Stokhof \[1990, 1991\]. 
None of these l)apers gives the combination 
of DRT and type logic that is needed for attach- 
ing the first to Lambek's calculus, but in 
Muskens \[forthcoming\] it was shown how the 
necessary fusion can be obtained. The essential 
obserwttion is that the meanings of DRT's dis- 
course representation structures (boxes) are first 
order definable relations. They can thus be ex- 
pressed within first order logic and within the 
first order part of ordinary type logic (i.e. the 
logic that was described in Church \[1940\], Gallin 
\[197511 and Andrews \[1986\]). This allows us to 
508 
CII ~- Cll 
n l -n  s l - sLxL i  
n I- n n, n \ s t- s 17 L\] 
n, (n \ s) / n, n i- s \ [ /R \ ]  
n, (n \ s) / n t- s / n s I " s 
n,(n \ s ) l  n,(sl  n) \ sk  s 
\[\ L\] 
\[ \  \]~:1 
(n \ s ) ln , ( s ln )  \ s V n \ s 
CH ~ ell s / (n \ s),(n \ s) / n,(s / n) \ s F s 
(s / (n \ s)) / on, or, (n \ s) / n, (s / n) \ s F s 
S t " S I lL\] 
\[I L\[ 
IlL\] 
(s / (n \ s)) I on, cn, (n \ s) I n, ((s I n) \ s) I cn, cn F- s 
fig. 1. Proof lor 'a ma,t adores It wonlan' 
treat noun phrases as expressions of a siilgle type 
(a generalized kind of generalized quantifiers) 
and to have a simple rule for coordination in arbi- 
trary categories (see Muskens \[forthcoming\] for 
It discussion of the latter). In this paper we build 
on the result and show how the system can also 
be attached to Lambek Categorial Granun,'tr. 
The rest of the paper consists of five main scc- 
tions. The first takes us from English to l~ambek 
proofs and the second takes us from Lambek 
proofs to semantical recipes. After the third sec- 
tion has described how wc can emulate boxes in 
type logic, the fourth will take us from semantical 
recipes to lx)xes and tile fifth from boxes to truth 
conditions. 
1. FROM ENGLIS I I  TO LAMBEK PROOFS 
I shall assume familiarity with I~tmbck's calculus 
and rehearse only its most elementary features. 
Starting with it set of basic categoric.v, which for 
tile purposes of this paper will be {txt, s, n, cn} 
(for texts, sentences, names and common nouns), 
we define it category to be either a basic category 
or anything of one of the forms a / b or b \ a, 
where a and b are categories. A sequent is an ex- 
pression 7" l- c, where T is a not>empty finite se- 
quence of categories (the antecedent) and c (the 
succedent) is a category. A sequent is provable if 
it can be proved with the help of the following 
Gentzen rules. 
~\[AX\ ]  
cL-c  
Tt-I> U>a, VFc  
U, alb, T, Vt-c 
Tt -b  U,a, V l -c  
U,T,b \a,  V t -c  
I /L \ ]  
\[\ L\] 
"s: bl_- a_ \[/RI 
Tl-alb 
b,'rl- a 
IX *el 7"l-b \a 
An example of a proof in this calculus is given in 
fig. 1, where it is shown that (s / (n \ s)) / on, cn, 
(n \ s) / n, ((s / n) \s)  / cn, cn }- s is a provable se- 
quent. If the categories in the antecedent of this 
sequent are assigned to the words 'a ' ,  'man ' ,  
'adores', 'It' and 'woman'  respectively, wc Call 
interpret he derivability of tile given sequent ,'is 
saying that these words, in this order, belong to 
the category s. 
2. FROM LAMBEK PROOFS TO 
SEMANTICAL  I~I,~CI PES 
Proof theory teaches us that there is a close co,- 
respondence between proofs and lanlt)da terms. 
The lambda term which corresponds to a given 
proof can be obtained with the help of the so- 
called Curry-ltoward correspondence. Van 
Bcnthem \[1986\] observed that the lambda term 
that we get in this way also gives us a COlTCSpOn- 
dence between L:unbek proofs on the one hand 
and the intended meanings of the resulting ex- 
pressions on the other. In the present exposition 
of the Curry-I loward-Van Benthem correspon- 
dence I sh;dl follow the set-up and also tile nota- 
tional conventions of I lendriks 111993\]. For more 
Cxl)lanation, the reader is rcferred to this work, to 
Van Benthenl \[1986, 1988, 1991\[ and to 
Moortgat \[198811. 
The idea behind the correspondence is that we 
match each rule in the Lambek calcuhis with a 
corresponding senvintic rnle and that, for each 
p,'oof, we build an isomorphic tree of semantic 
sequenls, which we define as expressions "/"F- Y, 
where 7" is a seqt,ence of variables and y is a 
hunbda term with exactly the variables in 7" free. 
The semantic rules that are to match the rules of 
509 
1't- P 
? v1-v P1-P\[\L\]  
v' 1- v' v, 1"" 1- t'"(v) \[/Z,\] 
v,R,v' 1- R(v')(v) \[/R\] 
v,R F Zv'.R(v')(v) p'1- p' 
v,R, QFQ(3.v,.R(v,)iv)) , \ [ \L\]  
\[\R\] 
R, 0 F Zv. O(Zv'. R(v'Xv)) 
Q',& Q F Q'(Zv.Q(Xv'. R(v')(v))) 
p"1- p" \[/L\] 
\[/L\] 
P'1- P' D,P,R,Q 1- D(P)(Xv.Q(Xv'. R(v')(v))) l/L\] D, P, R, D', P' 1- D(P)(Zv. D'(l")(Zv'. R (v')(v))) 
fig. 2. Semantic tree for 'a man adores a woman' 
the Lambek calculus above are as follows. (Tile 
term y\[u := w(fl)\] is meant to denote the result of 
substituting w(fl) for u in 7.) 
~, \ [AX\ ]  
x1- x 
~'Ffl  v', ,~v'1-r ,...., 
, ~, ' L /L \ ]  
U,w, 7,  V '1-  f lu:= wq/)\]  
7f'k~ u ' , . , v 'k  r "\L\] 
u', T',w, V' 1- r\[;,:= ,,,qj)\] t
7",v1-a \[IRI 
)"1- Zv.  
v,T'1- a \[\R\] 
T'1- Zv.a 
Note that axioms and the rules l/L\] and \[~L\] in- 
troduce new free variables. With respect o these 
some conditions hold. The first of these is that 
only variables that do not already occur elsewhere 
in the tree may be introduced. To state the second 
condition, we assume that some fixed function 
TYPE from categories to semantic types is given, 
such that TYPE(a / b) = "rYPg(b \ a) = (TYPE(b), 
TYPI~a)). The condition requires that the variablc 
x in an axiom x 1- x must be of TYPE(c) if x 1- x 
corresponds to c ~ c in the Lambek proof. Also, 
the variable w that is introduced in l/L\] (\[\L\]) 
must be of (TYPE(b), TYPE(a)), where a / b (b \ a) 
is the active category in the corresponding se- 
quent. 
With the help of these rules we can now build 
a tree of semantic sequents that is isomorphic to 
the Lambek proof in fig. I; it is shown in fig. 2. 
The semantic sequent at the root of this tree gives 
us a recipe to compute the meaning of 'a man 
adores a woman' once we are given the meanings 
of its constituting words. Let us suppose momen- 
tarily that the translation of the determiner 'a '  is 
given as the term ZI"XP3x(P'(x) ^  P(x)) of type 
(et)((et)t) and that the remaining words are trans- 
lated as the terms man, adores and woman of 
types el, e(et) and et respectively, then substitut- 
ing ZP'ZP3x(P'(x) ^ P(x)) for D and for D '  in 
the succedent and substituting man, adores and 
woman for P, R and 1" gives us a lambda term 
that readily ,'educes to the sentence 3x(man(x) ^ 
By(woman(y) ^ adores(y)(x) ) . 
The same recipe will assign a meaning to any 
sentence that consists of a determiner followed by 
a noun, a transitive verb, a determiner and a noun 
(in that order), provided that meanings for these 
words are given. For example, if we translate the 
word 'no'  as ZP'XP~qx( l"(x)  ^ P(x)) and 
'every'  as ZPgvPVx(P'(x) ---, P(x)), substitute tile 
first term for D, the second for D ' ,  and man,  
adores and woman for P, R and P '  as before, we 
get a term that is equivalent o - -3x(man(x)  ^  
Vy(woman(y) --, adores(y)(x))), the translation 
of 'no mall adores every womiul'. 
3. BOXES IN TYPE LOGIC  
In this section I will show that there is a natural 
way to emtflate tile DRT language ill tile first-or- 
dcr part of type logic, provided that we adopt a 
few axioms. This possibility to view DP, T as be- 
ing a fragnaent of ordinary type logic will enable 
us to define our interface between Catcgorial 
Grammar and DRT in the next section, 
We shall have four types of primitive objects 
in our logic: apart from the ordinary cabbages 
and kings sort of entities (type e) and the two 
truth values (type t) we shall also allow for what i 
woukl like to call pigeon-holes or registers (type 
n) and for states (type s). Pigeon-holes, which 
are the things that are denoted by discourse refer- 
ents, may be thought of as small chunks of space 
that can contain exactly one object (whatever its 
size). States may be thought of as a list of the 
current inhabitants of all pigeot>holcs. States arc 
very much like the program states that theoretical 
510 
computer scientists talk about, which are lists of 
the current values of all variables in a given pro- 
gram at some stage of its execution. 
In order to be able to impose the necessary 
structure on our m~xlels, we shall let V be some 
fixed non-logical constant of type ~(se) and de- 
note the inhabitant of pigeon-hole u in state i with 
the type e term V(u)(0. We define i\[u I... unl \] to 
be short for 
Vv((l i  Ir? V A... A It n * V) ~ V(v)(i) = V('e)(\]')), 
a term which expresses that states i and j differ at 
most in u I ..... un; i\[\]j will stand for tile formula 
Vv(V(v)( i )  = V(v)(\])). We impose the following 
axioms. 
AX1 ViVvVx  3j(i\[v\]\] ^V(v)(\]) =x) 
AX2 ViVj(i\[\]\]---* i= j )  
AX3 It ~ It" 
for each two different diseonrse referents 
(constants of type ~) u and u'  
AX1 requires that for each state, each pigeon-hole 
and each object, there must be a second state that 
is just like the first one, except that the given ob- 
ject is an occupant of the given pigeon-hole. AX2 
says that two states cannot be different if they 
agree in all pigeon-holes. AX3 makes sure that 
different discourse referents refer to different pi- 
geon-holes, so that an update on one discourse 
referent will not result in a change in some other 
discourse referent's value. 
Type logic enriched with these three first-order 
non-logical axioms has the very useful property 
that it allows us to have a tk~rm of the 'unselective 
binding' that seems to be omnipresent in natural 
language (see Lewis \[1975\]). Since states corre- 
spond to lists of items, quantifying over states 
corresponds to quantifying over such lists. The 
following lemma gives a precise formulation of 
this phenomenon; it has an elementary proof. 
UNSELF, CI'IVE BINDING LEMMA. Let Ul ..... un be 
constants of type ~, let xl ..... x n be distinct vari- 
ables of type e, let q~ be a formula that does not 
contain j and let qo'be the result of the simultane- 
ous substitution of V(ttl)(j ) for Xl and ... and 
V(un)(j) for xn in ep, then: 
I=Ax Vi(3j( i \[to ..... un Y AtD) ~ ~Xl...  ~Xnq~ ) 
I=Ax Vi(Vj( i \ [u,  ..... u,,\]j-," q)) -,-," Vxl... Vx,,q)) 
We now come to the enmlation of the DRT lan- 
guage in type logic. Let us fix some type s vari- 
able i and define (tO t = V(u)(i) for each discourse 
referent (constant of type J~) u and (/)i = t for 
each type e term t, and let us agree to write 
l'w for X/l'(@, 
"rlRT 2 for  t~..i( R( 171l '~ ("f2) \]" )i 
~) is v 2 for )d((v/)"=(v2) , 
if 1' is it term of type et, R is a term of type e(et) 
and the z's are either discourse referents or terms 
of type e. This gives us our basic conditions of 
the DRT language as terms of type st. In order to 
have complex conditions and boxes as well, we 
shall write 
not ? for ,a.i-,3jO(O0), 
? or 'I t for M3j(O(i)( j)  v ff*(O(J)), 
q' ~ lit for )dVj(O(i)(\]) --+ 3k~P(j)(k)), 
\[ul...u,, Ib  ..... y,,,\[ for 
ZiZj(itu, ..... u,,lj A yIQ/) A...A 'gin(J)), 
O ;  q,r for MZf\]k(O(i)(k)  ^ ql(k)(\])). 
Ilere ? and qJ stand for any tc,'m of type s(st), 
which shall be the type we associate with boxes, 
:rod the y's stand for conditions, terms of type st. 
\[ttl."It,, \]Yl ..... Ym\] will be our linear notation for 
standard DRT boxes and the last clause elnbodies 
an addition to the standard DRT language: in or- 
der to be able to give conlpositional translations 
tO natural ilngu'lge expressions and texts, we bor- 
row the sequencing operator ' ; '  from the usual 
imperative programming hmguages and stipulate 
that a sequence of boxes is again a box. The fol- 
lowing useful lemma is easily seen to hold. 
MI-k~GING LEMMA. If /~' do not occur in any of 
~," then 
I=^x \[/i I g\[ : \ ] / r  I g ' \ ]  = I/i if' I g ? \ ]  
Tim present emulation of DRT in type logic 
should be compared with tile semantics for DRT 
given in Groenendijk & Stokhof \]199l\]. While 
Groenendijk & Stokhof giw; a Tarski definition 
for DRT in terms of set theory and thus interpret 
the object DRT language in a metalanguage, the 
clauses given above are simply abbreviations on 
the object level of standard type logic. Apart from 
this difference, tile chmses given above and tile 
clauses given by Oroenendijk & Stokhof are 
tnueh the same. 
4. FROM SEMANTIC RECIPES TO 
BOXES 
Now that we have the DRT language as it part of 
type logic, connecting l~ambck proofs for sen- 
tenccs and texts with Discourse Representation 
511 
Structures is just plain sailing. All that needs to 
be done is to define a function TYPE of the kind 
described in section 3 and to specify a lexicon for 
some fragment of English. The general mecha- 
nism that assigns meanings to proofs will then 
take care of the rest. The category-to-type func- 
tion TYPE is defined as follows. WYPE(txt) 
TYPE(s) = s(s0, TYPE(n) = ~ and TYPE(cn) = 
z(s(st)),  while TYPE(a / b) = TYPE(b \ a) = 
(TYPE(b), TYPE(a)) in accordance with our previ- 
ous requirement, It is handy to abbreviate a type 
of the form at( . . .  (ctn(s(st))... ) as \ [a , . . .  a,,\], so 
that the type of a sentence now becomes \[1 (a 
box!), the type of a common noun \[or\] and so on. 
In Table 1 the lexicon for a limited fragment of 
English is given. The sentences in this fragment 
are indexed as in Barwise \[1987\]: possible an- 
tecedents with superscripts, anaphors with sub- 
scripts. The second column assigns one or two 
categories to each word in the first column, the 
third column lists the types that correspond to 
these categories according to the function TYPE 
and the last column gives each word a translation 
of this type. Here P is a variable of type \[or\], P
and q are variables of type \[\], and v is a variable 
of type ~r. 
Let us see how this immediately provides us 
with a semantics. We have seen before that our 
Lambek analysis of (1) provides us with a se- 
mantic recipe that is reprinted as (2) below. If we 
substitute the translation of a 1, AP'ZP(\[u I 1\] ; 
P'(Ul) ; P(Ul) ) for D in the succedent of (2) and 
substitute Av\[ \[ man v\] for P, we get a lambda 
term that after a few conversions reduces to (3). 
This can be reduced somewhat further, for now 
the merging lemma applies, and we get (4). 
Proceeding further in this way, we obtain (5), the 
desired translation of (1). 
(I) A I man adores  a = woman 
(2) D,P,R,D" I" F D(l')(Av.D'(l")(Zv'.le(v3(v))) 
(3) ZP(\[Ul\[ \] ; \ [ Iman it1\] ;D'(P')(Zv'.R(v)(ul))  
(4) ZP(\[ul lman Ul\] ; D'(P')(Zv'.R(v3(u~))) 
(5) \[U 1 tt 2 I man u 1, woman u> u I adores u2\] 
(6) Every  ~ man adores  a 2 woman 
(7) \[I \[,tl \[ ,,,a. ,1,1 \[a= I woma,, u> 
u\] adores u2\] \] 
(8) D,P,R,D ;1"~- D'(l")(Xv'.D(P)(Zv.R(v')(v))) 
(9) \[U2 \[ woman 112, \[ttl l man 11l\] :=?" 
\[ I ul adores u2\]\] 
(10) A ~ man adores  a 2 woman.  Sh% 
abhors  him1 
(1 l) \[It I It 2 \[ mat t  It1, womal t  tt 2, It I adores u 2, 
u 2 abhors 111\] 
(12) I f  a ~ man bores  a 2 woman she= 
ignores  h im I 
(13) \[I \['11 u21 ' ' 'a" ul, woma, u> u~ bores' u2\] 
\[ tu2 ignores ul\]\] 
The same semantical recipe can be used to obtain 
a translation fo," sentence (6). we find it in (7). 
But (1) and (6) have alternative derivations in the 
Lambek calculus too. Some of these lead to se- 
mantical recipes equivalent to (2). but others lead 
EXPR. CATEGORIES TYPE 
a" (s / (n \ s)) / en \[\[~\]D\]\] 
((s / n) \ s) / cn 
no" (s / (n ', s)) / cn 
((s / n) \ s) / cn 
every"  ( s / (n \s ) ) / cn  
((s / n) \ s) / cn 
Mary  n S / (n \ s) 
(s / n) \ s 
he  n s I (n \ s) \[\[or\]\] 
h im n (s / n) \ s II=\[1 
who (cn \ cn) / (n \s)  \[\[~r\] \[zc\]or\] 
man cn \[or\] 
s t inks  n \ s \[or\] 
adores  (n \ s) I n \[xx\] 
i f  (s / s) / s \[\[\]\[\]\] 
s \ (txt / s) \[\[\]\[\]l 
txt \ (txt / s) 
and  s \ (s / s) 
or  s \ (s / s) 
TRANSI.AT1ON 
AP'ZI'(\[u,, \[1 ; l"(u,) ; l '(u,)) 
\[\[or\]Eor\]\] Z/"ZI'\[ I ,,ot(\[u,, 171 ; P'(u,,) ; P(u,,))\] 
\[\[or\]D\]\] AP'ZI'\[I \[ (Iu,, 1\] ; l"(a,,)) -=> l'(a,,)\] 
\[\[or\]\] AP(\[un I u, is mary\] ; P(un)) 
~(  l'( u,,) ) 
Zl'( l'( u,,) ) 
Zl")a'Xv(l'(v) ; l"(v)) 
Zv\[ \[ ms ,  v\] 
/,v\[ I stinks v\] 
)~v?~v\[ I v adores v'\] 
Ipq\[ lp ~ q\] 
tl)q(p ; q) 
\[\[\]\[\]\] ;wq(p ; q) 
\[\[\]\[\]\] ~wq\[ Ip orq\ ]  
Table 1. The Lexicon 
512 
to recipes that are equivalent to (8) (for lnore ex- 
planation consult Hendriks \[1993\]). If we apply 
this recipe to the translations of the words in (6), 
we obtain (9). the interpretation of the sentence in 
which a = woman has a wide scope specific 
reading and is available for anaphoric reference 
from positions later in the text. 
I leave it to the reader to verify that the little 
text in (10) translates as (11) by the same method 
(note that the stop separating tile first and second 
sentences i lexicaliscd as an item of category s \ 
(txt/ s)), and that (12) translates as (13). A reader 
who has worked himself through one or two of 
these examples will be happy to learn from 
Moortgat \[11988\] that there are relatively fast 
Prolog programs that automatically find all se- 
mantic recipes for a given sentence. 
5. FROM BOXES TO TRUT l l  
CONDIT IONS 
Wc now have a way to provide the expressio,ls of 
our fragmcnt automatically with Discourse Re- 
presentation Structures which denote relations 
between states, but of course we arc also inter- 
ested in the truth conditions of a given text. These 
we equate with the domain of the relation that is 
denoted by its box translation (as is done in 
Groenendijk & Stokhof \[11991\]). 
Theoretically, if we are in the possession of a box 
(/), we also have its truth conditions, since these 
are denoted by the first-oMer terln xiqj(q)(i)(j)). 
but in practice, reducing the last term to some 
manageable first-order term may be a less than 
trivial task. Therefore we define an algorithmic 
function that can do the job for us. The function 
given will in fact be a slight extension of a sinlilar 
function defined in Kamp & Reyle \[1993\]. 
First some technicalities. Define adr(~),  the 
set of active discourse referents of a box ~1), by 
adr(\[ii I }'-\]) = {/i} and adr((D ; Ill) = adr(qO U 
adr(~lO. Let us define l l t /u\ ] l ,  tile substitution of 
the type e term t for the discourse referent u in the 
construct of the tx)x hmguage F,, by letting it / ttlu 
= t and \ [ t /u \ ]u '  = u'  if a ' ,  u; for type e terlns t' 
We let \ [ t /U \ ] t '= t'. For complex constructs It/ I \[1I '  
is defined as follows. 
I.t / u\]l 'v : Pit~ u\]v 
\[t I ulvlRv 2 : llt I u\]vlR\[t I u\]v 2
\[t / u\](v 1 is ~c2) = \[t / Ill'IT 1 iS llt / u\]*'2 
\[t l u\]not @ = not \[t l u\ ]?  
\ [ t lu l (q,  or ~P) = \ [ t lu l?or \ [ t lu \ ]~ l /  
\ [ t /u l (q '~  ip) = \ [ t /u \ ]q~ \[t/u\[~l/ 
if u C adr( qO 
\ [ t lu \ ] (q '~  tl 0 = lt lu\]4)=~ ll/ 
if u G adr(@) 
l t /u \ ] \ [~ IY~ . . . . .  h,,\] = 
lift \] \[t / Ulrl ..... 14 / ulh,,l if u q~ { ~ } 
\ [ i t / . \ ] \ [F t lh  ..... y,,;l = \[~lY~ ..... Y,,,\] 
i fuU  {ft} 
lit / Ul(? ; ~I*) : \[t / ,\] (I) ; \[t / u\] ~I/ 
if u e~ adr( (b) 
It~ u\]((P ; ip) = 17/u\]q) ; Ill 
if u ~ adr( q 0 
The next definition gives our translation function 
1" from boxes and coMitions to first-order formu- 
lae. The wuiable x that is appearing in the sixth 
and eighth chmscs is supposed to be fresh in both 
cases, i.e. it is defined to be the first variable in 
sonic fixed oMering that does not occur (at all) in 
q) or in tl*. Note that the sequencing operation ; is 
associative: q, ; (q/; ~) is equivalent with (q~ ; lit) 
; E for all q), q/and ~. This lneans that wc may 
assume that all boxes are either of the form \[Ft \] 
\] \]  ; (P or of tim form \ [ i i \ ]  ?'\]. We shall use the 
form I F/: q) to cover both cases, thus allow- 
ing the possibility that q~ is clnply, if ~1~ is elnpty, 
q~ ~.. q/denotes Ill. 
(p4~ : p (@ 
O:fl,h:,)~ : R(~:~ll(T2)t 1 
(T 1 is~2)'t = (1;1)" = ('V2)" 
(not q))f = -~(q))l 
(4) o r  l ist  q)t' v Ipl 
((\[. ii \[ ~; 1 ; 40 ~ q,)r 
Vx( lx  / ul((\[Ft \] ~; \] ; @ ~ qO) t 
( ( \ [ I r z  . . . . .  ~,,1 ; ? ) :~  qO* = 
(), j  t. ^ . . .  ^ h . r )_ , .  ( (b  ::> ~I/) t 
( I . / / I~- \ ] ;  q,)-r = 3x( lx / . \ ] ( \ [ / / l  ~7\] ; q,))l 
( \ [ \ [Ys  ..... 7,,,1; q,)l = y/ l  A ... A ym r n rill 
By way of examl)le, the reader may verify that the 
fttnction 1" sends (10) to (11). 
(14) \[\[ \[ul "2 I ma.  ul, woman u2, u 1 bores "2\[ 
\[ \]u 2 ignores ul\] \] 
(15) Vxrr2((man(xl)  ^ woman(x2) ^ 
bores(xl)(x2) ) ~ ignores(x2)(Xl) ) 
It is clear that the function ~ is algoritlunic: at 
each stage in tile reduction of a box or condition 
it is determined what step should be taken. The 
folk)wing tl~eorem, which has a surprisingly te~ 
dious proof, says that the function does what it is 
intended to do. 
573 
TIIEOREM. For all conditions yand boxes 05: 
I=A? ~m* = M3j(q~(i)(,/)) 
I=AX/3t/i/I" .~ \]t 
REFERENCES 
Andrews, P.B.: 1986, An Introduction to 
Mathematical Logic and Type Theory: to 
Truth through Proof, Academic Press, 
Orlando, Florida. 
Barwise, J.: 1987, Noun Phrases, Generalized 
Quantifiers and Anaphora, in P. G',irdenfors 
(ed.), Generalized Quantifiers, Reidel, 
Dordrecht, 1-29. 
Van Benthem, J.F.A.K.: 1986, Essays in Logical 
Semantics, Reidel, Dordrecht. 
Van Benthem, J.F.A.K.: 1988, The Lambek 
Calculus, in: R.E. Oehrle, E. Bach and D. 
Wheeler (eds.), 1988, Categorial Grammars 
and Natural Language Structures, Reidel, 
Dordrecht. 
Van Benthem, J.F.A.K.: 1991, Language in 
Action, North-Holland, Amsterdam. 
Church, A.: 1940, A Formulation of the Simple 
Theory of Types, The Journal of Symbolic 
Logic 5, 56-68. 
Gallin, D.: 1975, Intensional and Higher-Order 
Modal logic, North-Holland, Amsterdam. 
Groenendijk, J. and Stokhof, M.: 1990, Dynamic 
Montague Grammar, in L. K,'ihmin and L. 
Pdlos (eds.), Papers from the SecoJrd 
Symposium on Logic attd Language, 
Akaddmiai Kiad6, Budapest, 3-48. 
Groenendijk, J. and Stokhof, M.: 1991, Dynamic 
Predicate Logic, Linguistics and t'hilosophy 
14,39-100. 
Heim, I.: 1982, The Semantics of Definite aml 
Indefinite Noun Phrases, Dissertation, 
University of Massachusetts, Amherst. 
Published in 1989 by Garland, New York. 
Heim, I.: 1983, File Change Semantics and the 
Familiarity Theory of Definiteness, in R. 
B;duerle, Ch. Schwarze and A. yon Stechow 
(eds.), Meaning, Use attd Interpretation of 
Language, De Gruyter, Berlin, 164-189. 
Hendriks, H.: 1993, Studied Flexibility, ILLC 
Dissertation Series, ILLC, University of 
Amsterdam. 
Janssen, T.: 1983, Foundations and Applications 
of Montague Grammar, Dissertation, 
University of Amsterdam. Published in 1986 
by CWI, Amsterdam. 
Kamp, H.: 1981, A Theory of Truth and Semantic 
Representation, i  J. Groenendijk, Th. Janssen, 
and M. Stokhof (eds.), Formal Methods in the 
Sttuly of Language, Part L Mathematisch 
Centrum, Amsterdam, 277-322. 
Kamp, H. and Reyle, U.: 1993, From Discourse 
to Logic, Kluwer, Dordrecht. 
Lewis, D.: 1975, Adverbs of Quantification, in E. 
Keenan (ed.), Formal Semantics of Natural 
Language, Cambridge University Press, 3-15. 
Montague. R.: 1973, The Proper Treatment of 
Quantification in Ordinary English, in R. 
Montague, Formal Philosophy, Yale 
University Press, New Haven, 1974, 247-270. 
Moortgat, M.: 1988, Categorial Investigations, 
Foris, Dordrecht. 
Muskens, R.A.: forthcoming, A Compositional 
Discourse Representation Theory, to appear in 
the proceedings of the Ninth Amsterdam 
Colloquium. 
Rooth, M.: 1987, North Phrase Interpretation i
Montague Grammar, File Change Semantics, 
and Situation Semantics, in P. G~,irdenfors 
(ed.), Generalized Quantifiers, Reidel, 
Dordrecht, 237-268. 
Zcevat, H.: 1989, A Compositional Approach to 
Discourse Representation Theory, Linguistics 
arid l'hilosophy 12, 95-131. 
514 
