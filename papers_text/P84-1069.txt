Grammar Writ ing System (GRADE) of Mu-Machtne Trans lat ion Pro ject  
and i t s  Character is t ics  
Jun-tcht NAKAMURA. Jun-tcht TSUJII. Makoto NAGAO 
Department of E lec t r i ca l  Engineering 
Kyoto Un ivers i ty  
Sakyo. Kyoto. Japan 
ABSTRACT 
A powerful grammar wr i t ing  system has been 
developed. Thts grammar wrt t tng  system ts ca l led 
GRADE (GRAmmar DEscriber).  GRADE allows a grammar 
wr i te r  to  wr i te  grammars Including analysts,  
t ransfer ,  and generation using the  same expression. 
GRADE has powerful grammar wr i t ing  fac i l i ty .  GRADE 
allows a grammar wr i te r  to control  the process of a 
machine t rans la t ion .  GRADE also has a funct ion to 
use grammatical rules wr i t ten  tn a word d ic t ionary .  
GRADE has been used for  more than a year as the 
software of the machine t rans la t ion  pro jec t  from 
Japanese Into Engltsh. which ts supported by the 
Japanese Government and ca l led Nu-proJect. 
1. Object ives 
Vhen we develop a machine t rans la t ion  
system, the intent ion of a grammar wr i te r  should be 
accurately stated tn the form of grammatical ru les.  
Otherwise, a good grammar system cannot be 
achieved. A programming language to wr i te  a 
grammar, which ts composed of a grammar wr i t ing  
language, and a software system to execute t t .  ts 
necessary for  the development of a machine 
t rans la t ion  system (Bottet  82). 
I f  a grammar wr i t ing  language for a machine 
t rans la t ion  system is to have a powerful wr i t ing  
fac i l i ty ,  t t  must fu l f i l l  the fo l lowing needs. 
A grammar wr t t lng  language must be able to 
manipulate l ingu is t i c  character i s t i cs  tn Japanese 
and other languages. The 11ngulst lc structure of 
Jcpanese tS la rge ly  d i f fe rent  from that  of Engltsh, 
for  instance. Japanese does not res t r i c t  the word 
order s t rongly ,  and allows the omission of some 
syntact ic  components. Vhen a machine t rans la t ion  
system trans lates  sentences between Japanese and 
English, a grammar wr i te r  must be able to express 
such character i s t i cs .  
A grammar wr i t ing  language should have a 
framework to wr i te  grammars tn analys is ,  t ransfer ,  
and generation phase using the same expression. I t  
Is undeslrable for  the grammar wr i te r  to learn 
several d i f fe rent  expressions for  d i f fe rent  stages 
of a machine t rans la t ion .  
There are many word spec i f i c  l i ngu is t i c  
phenomena tn a natural  language. A grammar wr i te r  
must be able to add word spec i f i c  rules to a 
machine t rans la t ion  system one a f te r  another to 
deal wtth word spec i f i c  l i ngu is t i c  phenomena, and 
improve hts machine t rans la t ion  system over a long 
per iod.  Therefore. a grammar wr i t ing  language must 
be able to handle grammatical rules wr i t ten  tn word 
d ic t ionar ies .  
There ts a natural  sequence tn a 
t rans la t ion  process. For example, a parstng of 
noun phrases which do not contain sententta l  forms 
is executed before a parsing of more complex noun 
phrases. An approximate parsing of compound 
sentences is executed before a parsing of complex 
sentences. Also. when an app l i ca t ion  sequence of 
grammatical rules are wr i t ten  exp l i c i t l y ,  a grammar 
wr i t ing  system can execute the rules e f f i c ient ly .  
because the system Just needs to tes t  the 
app l i cab i l i ty  of a res t r i c ted  number of grammatical 
ru les.  So. a grammar wr i t ing  language must be able 
to express several phases of a t rans la t ion  process 
in the expression exp l i c i t l y .  
A grammar wr i t ing  language must be able to 
t reat  the syntact ic  and semantic ambiguit ies tn 
natural languages. But t t  must have some 
mechanisms to avoid a combinator ial  explos ion.  
Keeping these points in mind, we developed 
a new programming system, which ts composed of the 
grammar wr i t ing  language and i t s  executing system. 
Ve wt l l  ca l l  i t  GRADE (Grammar Descr iber) .  
2. Expression of the data for  a processing 
The form of data to express the structure 
of a sentence during an analys is ,  a t rans fer ,  and a 
generation process has a strong e f fec t  on the 
framework of a grammar wrt t tng language. GRADE 
uses an annotated tree structure for  expressing a 
sentence. Grammatical rules tn GRADE are described 
tn the form of t ree - to - t ree  transformation wtth 
annotation to each node. 
338 
The annotated t ree  tn GRADE ts a t ree  
s t ruc ture  whose nodes have l t s ts  of  p roper ty  names 
and the i r  va lues.  F igure 1 shows an example of  the 
annotated t ree .  
~ -CAT - S~ 
-NUMBER - SINGULAI LE-NUMBER - 
-SEM = HUMAN 
E-CAT : Engl lsh Category Symbol 
E-NUMBER: Engl ish Number (SINGULAR or PLURAL) 
E-SEM :Eng l tsh  Semantic Marker 
Ftgure 1 An example of  the annotated t ree tn GRADE 
The annotated t ree  can express a lo t  of 
In format ion  such as syntact i c  category ,  number. 
semantic marker, and other  th tngs .  The annotated 
t ree  can a lso express a f lag  tn t t s  node. whlch ts 
s tmt la r  to a f lag  tn a convent iona l  programming 
language, to cont ro l  the process of  a t rans la t ion .  
For example, in a grammar of a generat ion ,  a 
grammatical ru le  ts app l led  to  a l l  nodes tn the 
annotated t ree ,  whose processtngs are not f in i shed .  
In such a case, a grammatical ru le  checks the DONE 
f lag  whether t t t s  processed or not .  end sets T to  
the newly processed ones. 
3. Rewriting Rule tn GRADE 
The bastc component of  a grammar wr t t tng  
language is a rewr i t ing  ru le .  The rewr i t ing  ru le  
In GRADE transforms one annotated t ree tnto  anoti~er 
annotated t ree .  The rewr i t ing  ru le  can be used In 
the grammars of ana lys ts ,  t rans fer  and generat ion  
phase in a machtne t rans la t ion  system, because the 
t ree - to - t ree  t rans format ion  by th ts  rewr i t ing  ru le  
ts very power fu l .  
A rewr i t ing  ru le  tn GRADE conststs  of a 
dec la ra t ion  par t  and amatn  par t .  The dec la ra t ion  
par t  has the fo l low ing  four  components. (1)  
D i rec tory  Entry par t ,  whtch conta ins  a grammar 
wr i te r ' s  name, a verston number of the rewr t t in  9 
ru le ,  and the las t  date of  the rev is ion .  Thts par t  
ts not used at  the execut ion  ttme of  the rewr i t ing  
ru le .  A grammar wr t te r  ts able to  see the 
in fo rmat ion  by ustng the help fac t l t ty  of  the GRADE 
system. (2)  P roper ty  Def in i t ion  par t ,  where a 
grammar wr i te r  dec lares  the proper ty  names and 
thet r  va lues.  (3)  Var tab le  In t t .  par t ,  where a 
grammar wr t te r  dec lares  the names of  var iab les .  
(4) Matchtng Ins t ruc t ion  par t ,  where a grammar 
wr t te r  spec i f ies  the mode to apply the rewr i t ing  
ru le  to  an annotated t ree .  
The matn pant spec i f ies  the t rans format ion  
tn the rewr i t ing  ru le .  and has the fo l low ing  three 
par ts .  (1) Matchtng Cond i t ion  par t .  where the 
cond i t ion  of  a s t ruc ture  and the proper ty  values of 
an annotated t ree  ts descr ibed .  (2) Subst ructure  
Operat ion par t ,  whtch spec i f ies  operat ions  fo r  the 
annotated t ree  that  has matched wtth the cond i t ion  
wr t t ten  tn the matching cond i t ion  pant.  (3) 
Creatton par t ,  whtch spec | f tes  the s t ruc ture  and 
the proper ty  values of  the transformed annotated 
t ree .  
3.1.  Matching Cond i t ion  par t  
The matchtng cond i t ion  par t  spec i f ies  the 
cond i t ion  of the s t ruc ture  and the proper ty  values 
of the annotated t ree .  The matchtng cond i t ion  par t  
a l lows a grammar wr i te r  to spect fy  not on ly  a r tg td  
s t ruc ture  of  the annotated t ree ,  but a lso 
s t ruc tures  whtch may repeat  several  ttmes, 
s t ruc tures  which may be omtt ted ,  and s t ruc tures  tn 
which the order  of  thetn sub-s t ruc tures  ts not 
res t r i c ted .  
For example, the s t ruc ture  tn whtch 
ad jec t ives  (ADJ) repeat  a rb i t ra ry  ttmes and a noun 
(N) fo l lows  them tn Engl lsh ts expressed as 
fo l lows .  
ADJ . . .  ADJ N 
- - ->  
match ing_cond i t ion :  
? (ADJS N): 
AOJS: anyC~(ADJ)): 
The s t ruc ture  11ke a combinat ion of  a verb (V) and 
an adverb ia l  par t tc le  (ADVPART) tn th ts  sequence 
wtth or w i thout  a pronoun (PRON) tn between tn 
Engltsh t swr t t ten  as fo l lows .  
V (PRON) ADVPART 
- - ->  
match ing_cond i t ion :  
? (V PRON ADVPART): 
PRON: opt iona l :  
A typtca l  Japanese sentent ta l  s t ruc ture  tn whtch 
three adverb ia l  phrases (ADVP). each composed of  a 
noun phrase (NP) and a case par t i c le  (GA, WO. or 
NI)  proceed an verb (V) tn no par t i cu la r  order  ts 
expressed as fo l lows .  
match ing_cond i t ion ;  
~(A1 A2 A3 Y); 
A1. A3: d i sorder ;  
ADVP1 ADVP2 ADVP3 V - - ->  A l :  ~((ADVP1NP1GA)) :  
A A A A2:zCCADVP2 NP2 WO)): 
NPl GA NP2 we NPa NZ A3: zCCAOVPa Ne3 .X ) ) :  
The matchtng cond i t ion  par t  a l lows a 
grammar wr t te r  to spect fy  cond i t ions  about p roper ty  
names and proper ty  values fo r  the nodes of  the 
annotated t ree .  A grammar wr t te r  can compare not 
on ly  a p roper ty  value of  a node wt tha  constant  
va lue,  but a lso values between two nodes tn a t ree .  
339 
For example, the number agreement between a sub jec t  
noun and a verb Is wr i t ten  as fo l lows .  
match ing_cond i t ion :  
~(NP UP): 
NP.NUNBER " VP.NUNBE~; 
3.2.  Subst ructure  Operat ion  par t  
The subst ructure  operat ion  par t  spec ' t f tes  
operat ions  fo r  the annotated  t ree  which has matched 
wtth the matchtng cond i t ion  par t .  The subst ructure  
operat ion  par t  a l lows  a grammar wr i te r  to  set  a 
proper ty  va lue  to  a node. and to  ass ign a t ree  or  a 
proper ty  va lue  to  a var iab le ,  whtch is  dec la red  tn 
the var iab le  tn t t .  par t .  I t  a l so  a l lows  htm to  
ca l l  a subgnammar, a subgnammar network ,  a 
d ic t lonary  ru le .  a bu l l t - ln  funct lon ,  and a LISP 
funct ion .  The subgrammar, the subgramman network .  
the d ic t tonany  ru le ,  and the but l t - tn  funct ion  w111 
be d iscussed tn sect ton  4 . .  5 . ,  and 6. In 
add i t ion ,  a grammar wnt ter  can wr i te  a cond i t iona l  
operat ion  by us ing the IF-THEN-ELSE form. An 
operaL ion  to  set  'A '  to  the lex tca l  unt t  o f  the 
determiner  node (DET.LEX). t f  the number o f  the NP 
node |S SINGULAR. Is wr t t ten  as fo l lows .  
substnuctune_operat ton :  
t f  NP.NUMBER - 'SINGULAR': 
then DET.LEX <- "A ' :  
e l se  DET.LEX <- "N IL ' ;  
end_t f :  
T rans format ion  o f  matn par t  tn a newntt tng  ru le :  
A A 
/b , ,  I 
B C O - - ->  E 
/t, , ,  
B C D 
Trans format ion  o f  a whole annotated  t ree :  
A A 
A B C D  - - ->  A E 
/ t , ,  I /b , ,  
BCD E BCD 
/t,,, 
BCD 
F igure  2 An example o f  an app l i ca t ion  o f  the main 
par t  
The matching tns tnuct ton  pant spec i f ies  the 
t ravense  path o f  the annotated  t ree .  There are 
four  types o f  the t raverse  pathes ,  whtch are the 
combinat ions  o f  < le f t - to - r ight  or  n ight - to - le f t> 
and <bot tom-to - top  on top- to -bot tom>.  When a 
grammar wr i te r  spec i f ies  le f t - to - r ight  and 
bot tom-to - top  mode, the annotated  t ree  w111 be 
t raversed  as fo l lows .  
5 
3 /
3.3 .  Creat ion  par t  
The s t ruc ture  and the proper ty  va lues  o f  
the t rans formed annotated  t ree  ts wr i t ten  tn the 
c reat ion  par t .  The t rans formed t ree  ts descr ibed  
by node names such as NP and VP, whtch are used in 
the matchtng cond i t ion  par t  on the subst ructure  
operat ion  par t .  A cneat ton  par t  to  c reate  the t ree  
whose top node ts S and whtch has a NP sub- t ree  and 
a VP sub- t ree  ts wnt t ten  as fo l lows .  
c reat ion :  
Z((S NP VP) ) :  
3.4 .  Matching Ins t ruct ion  par t  
The maln part of a rewrltlng rule In GRADE 
(the matching condition part, the substructure 
operation part. and the creatlon part) can be 
applied not only to a whole tree, but also to 
sub-trees. Figure 2 shows an example of the 
app l i ca t ion  o f  a maln par t .  
4. Cont ro l  o f  the grammatical  ru le  app l i ca t ions  
A grammar wr i t ing  language must be ab le  to  
express  deta i led  phases o f  a t rans la t ion  process  tn 
the express ion  exp l tc t t \ ]y .  GRADE a l lows  a grammar 
wr i te r  to  d iv ide  a whole grammar i n to  severa l  
par ts .  Each par t  o f  the grammar ts ca l led  a 
subgnammar. A subgrammar may cor respond to  a 
grammatical  un i t  such as the pars tng  o f  a stmple 
noun phrase and the par tng  o f  a compound sentence.  
A whole grammar ts then descr ibed  by a network o f  
subgrammars. Thts network ts ca l led  a subgnammar 
network .  A subgrammar network a l lows  a grammar 
wr i te r  to  cont ro l  the process o f  a t rans la t ion  tn 
detat l .  When ? subgrammar network tn the ana lys ts  
phase cons is ts  o f  a subgrammar fo r  a noun-phrase 
(SG1) and a subgrammar for a verb -phrase  (SG2) tn 
th i s  sequence, the executor  o f  GRADE f i r s t  app l tes  
SG1 to an input  sentence,  then app l tes  SG2 to  the 
resu l t  o f  an app l i ca t ion  o f  SG1. 
4 .1 .  Subgrammar 
A subgrammar consts ts  o f  a set  o f  rewr i t ing  
ru les .  Rewr i t ing  ru les  tn a subgrammar have a 
pr tont ty  onder tng tn the i r  app l i ca t ion .  The n - th  
340 
rewr i t ing  rule tn a subgrammar ts t r ted  before the 
(n+l ) - th  ru le .  
A grammar wr t te r  can spectfy four types of 
app l i ca t ion  sequence of rewr i t ing  rules tn a 
subgrammar. Let us assume the s i tuat ion  that a set 
or rewr i t ing  rules tn the subgrammar ts composed of 
RR1. RR2 . . . . .  and RRn. that  RR1 . . . . .  and RR|-I 
cannot be appl ied to an tnput t ree.  and that RRt 
can be applted to t t .  When a grammar wr t ter  
spec i f ies  the f t r s t  type. whtch ts ca l led  ORDER(I). 
the e f fec t  of the subgrammar execution ts the 
app l i cat ion  of RRt to the tnput tree.  When a 
grammar wr t te r  spec i f ies  the second type. which |s 
ca l led ORDER(2). the executor of GRADE t r tes  to 
apply RRt+I . . . . .  RRn to the resu l t  of the 
app l i cat ion  of RRt. So. ORDER(2) means that 
rewr i t ing  rui~s tn the subgrammsr are sequent ia l ly  
applted to an tnput t ree.  
The th t rd  and fourth type. whtch are ca l led 
ORDER(3) and ORDER(4). are the I te ra t ion  type of 
ORDER(l) end ORDER(2) respect ive ly .  So, the 
executor of GRADE t r tes  to apply rewr i t ing  rules 
untt1 no rewr i t ing  rule Is appl icab le  to the 
annotated tree.  
SEARCH-CANDIDATE-OF-HOUNS.sg: 
sg_mode: order(Z) :  
rr_tn_sg: 
CANDIDATE-OF-NOUNS-t: 
UP-NP-TO-PNP: 
CANDIDATE-OF-NOUNS-Z; 
end_sg.SEARCH-CANDIDATE-OF-NOUNS: 
Ftgure 3 An example of a subgrammar 
Ftgure 3 shows an example of a subgrammsr. 
When thts  subgrammar is applted to an annotated 
tree.  the executor of GRADE f t r s t  t r tes  to apply 
the rewr i t ing  rule CANDIDATE-OF-NOUNS-1 to the 
tnput t ree.  I f  the app l |cat ton  of thts  rule 
succeeds, the tnput tree ts transformed to the 
resu l t  of the app l i ca t ion  of the rewr i t ing  rule 
CANDIDATE-OF-NOUNS-1. Otherwise. the tnput tree ts 
not modif ied.  In et ther  case. the executor of 
GRADE next t r |es  to apply the rewrt t |ng  rule 
UP-NP-TO-PNP to the tnput t ree.  The executor 
continues such a process untt1 the app l i ca t ion  of 
the las t  rewr i t ing  rule CANDIDATE-OF-NOUNS-2 ts 
f in ished.  
4.2. Subgramar Network 
A subgrammar network descr|bes the 
app l i cat ion  sequence of subgrauars .  The 
spec i f i ca t ion  of a subgrammar network conststs of 
the fo l lowing  f tve  parts .  (1) D i rectory  Entry 
part .  whtch ts as the same as the one tn a 
rewr i t ing  ru le .  (2) Property Def in i t ion  part .  
whtch Is the same as the one tn a rewr i t ing  ru le .  
This part  ts used as the defau l t  dec larat ion  tn 
rewr i t ing  ru les .  (3) Vsrtable \ ]n t t .  par t .  which ts 
the same as the one tn a rewr i t ing  ru le .  The 
var iab les  are used to contro l  the t rans i t ion  of the 
subgrammar network. The var iab les  are referred to 
and asstgned tn the substructure operat ion part  of 
the rewr i t ing  ru le .  The var iab les  are also 
referred tne  11nk spec i f i ca t ion  part .  whtch wt l l  
be described la ter .  (4) Entry part .  whtch 
spec i f ies  a s ta r t  node of the network. (5) Network 
part .  whtch spec i f ies  a network of subgrammars, 
The network part  spec| f \ ]es  the network 
structure of subgrammars, and conststs of node 
spec i f i ca t ions  and 11nk spect f tca t |ons .  The node 
spec i f i ca t ion  has a label  and a subgrammer or s 
subgnammar network name. whlch ts ca l led  when the 
node gets the control  of the processing. The 11nk 
spec i f i ca t ion  spec i f ies  the t rans i t |on  among nodes 
tn a subgramman network. The 11nk spec i f i ca t ion  
checks the value of a ver teb le  whtch |s set tn ? 
rewr i t ing  ru le .  and dectdes the label  of a node 
whtch wt l l  be processed next.  
PRE.sgn; 
d i rec tory_ent ry :  
owner(J.NAKAHURA): verston(VO2L05): 
last_update(83/12/25):  
var_ tn t t ;  
OPRE-FLAG tn t t (T ) :  
entry :  
START: 
network: 
START: PRE-STEP-|osg; 
LOOP : PRE-STEP-2.sg; 
A: PRE-STEP-3.sg: 
B: PRE-END-CHECK.sg: 
| f  OPRE-FLAG: then goto LOOP: 
else goto LAST: 
LAST: PRE-STEP-4.s9: 
ex t t :  
end_sgn.PRE; 
Ftgure 4 An example of a subgrammar network. 
Ftgure 4 shows an example of a subgrammar 
network. When the executor of GRADE appltes thts  
subgranunar network to an tnput t ree.  the executor 
checks the var - tn t t  par t .  then puts a new var tab le  
OPRE-FLAG on a stack, and sets T to OPRE-FLAG as an 
tn t t ta l  value. A f ter  that .  the executor checks the 
entry part  and f ind  the label  of the s ta r t  node 
START tn the network. Then the executor searches 
the node START and appl les the subgrammar 
PRE-STEP-1 to the tnput t ree.  A f ter  the 
app l i ca t ion ,  the executor appltes the subgrammer 
PRE-STEP-2 (node name: LOOP) and PRE-STEP-3 (node 
name: A) to the annotated tree tn thts  sequence. 
Next. the executor appl les the subgrammar 
PRE-END-CHECK (node name: B) to the t ree.  
341 
Rewr i t ing  ru les  in PRE-END-CHECK examine the t ree 
and set T or NIL to the var iab le  ePRE-FLAG. The 
executor  checks the l ink  spect f | ca t Jon  par t ,  which 
is s ta r ted  by IF. and examines the value of the 
var iab le  @PRE-FLAG. The node in the network which 
w i l l  be ac t ivated  next  is the node LOOP i f  
@PRE-FLAG is not NZL, o therwlse ,  the node LAST. 
Thus, wh i le  @FRE-FLAG ts not NIL, the executor  
repeats the app l i ca t ions  of  three subgrammars, 
PRE-STEP-2. PRE-STEP-3. and PRE-END-CHECK. to the 
annotated t ree .  When @PRE-FLAG becomes NIL. the 
subgrammar PRE-STEP-4 tn the node LAST ts app l ted  
to the t ree .  and the app l i ca t ion  of  th l s  subgrammar 
network PRE Is terminated.  
5. Handl ing the grannaatlcal ru le  tn the word 
d ic t ionar ies  
GRADE a l lows a grammar wr t te r  to wr i te  word 
spec i f i c  grammatical ru les  as a subgramman In an 
ent ry  of word d ic t ionar ies  of a machine t rans la t ion  
system. A subgramman wr i t ten  in a d ic t ionary  ent ry  
is ca l led  a d ic t ionary  ru le .  The d ic t ionary  ru le  
is spec i f i c  to a par t i cu la r  word In the d ic t ionary .  
The d ic t ionary  ru le  is re t r ieved  wt tha  
ent ry  word and a ru le  ident i f ie r  as the key. and is 
app l ied  to the annotated t ree  which is spec i f ied  by 
a grammar wr i te r ,  when CALL-DIC operat ion  In the 
subst ruc ture  operat ion  par t  Is executed.  F igure 5 
shows an example of  a rewr i t ing  ru le  which ca l l s  a 
d ic t ionary  ru le .  In th ts  case. a d ic t ionary  ru le  
which ts wr i t ten  in an ent ry  of  a word as ind icated  
by V.LEX ( the va lue of  the lex tca l  unt t  of  verb) .  
and whose name ts ANALYSIS. ts epp l ted  to the 
sequence of  NP1. V. NP2. and PP (noun phrase 1. 
verb phrase, noun phrase 2. and prepos i t iona l  
phrase) .  Then the resu l t  of the app l i ca t ion  of  the 
d ic t ionary  rule Is assigned to the var tab le  aS. 
CASE-FRANE.rr: 
var_ tn t t :  aS; 
match ing_cond i t ion :  
Z(NPZ v Me2 PP): 
subst ruc ture_operat ion :  
@S <- ca11-dtc(V.LEX 
ANALYSIS Z(NP1V NP2 PP)): 
creat ion :  
~(es):  
end_Pr.CASE-FRAME: 
Ftgure S An example of a rewr i t ing  ru le  which ca l l s  
a d ic t ionary  ru le  
6. Treatment of Ambigu i t ies  
A grammar wr t t tng  language must be able to 
t reat  the syntact i c  end semantic ambigu i t ies  in 
natura l  languages. GRADE a l lows a grammar wr i te r  
to co l lec t  a l l  the resu l t  of  poss ib le  t ree - to - t ree  
t rans format ions  by a subgrammar. However, It must 
avoid a combinator ia l  exp los ion ,  when t t  encounters 
the ambigu i t ies .  
For instance,  le t  us assume that  a grammar 
wr i te r  wr i tes  a subgramman which conta ins  two 
rewr i t ing  ru les  to analyze the case frame of  ? 
verb,  that  a rewr i t ing  ru les  ts the ru le  to 
const ruc t  VP (verb phrase) from V and UP (a verb 
and a noun phrase) ,  and that  the other  ts the ru le  
to const ruc t  VP (verb phrase) from V. NP and PP (a 
verb.  a noun phrase, and a prepos i t iona l  phrase) .  
When he spec i f ies  NONDETERMINISTIC_PARALLELED mode 
to the subgremmar, the executor  of  GRADE 8pp l tes  
both rewr i t ing  ru les  to an Input  t ree ,  const ruc ts  
two transformed t rees ,  and merges them tnto  8 new 
t ree  whose top node has 8 specta l  p roper ty  PARA. 
The top node of  th i s  s t ruc ture  is  ca l led  a pare 
spec ia l  node. whose sub- t rees  are the transformed 
trees by the rewr i t ing  ru les .  F igure 6 shows an 
example of  th ts  mode and apara  node. 
- - '7  
V NP PP SG 
PARA 
VP PP VP 
A A",, 
V NP V NP PP 
Figure 6 An example of  a pars spec la l  node 
A grammar wr i te r  can se lec t  the most 
appropr ia te  one from the sub- t rees  under a pare 
spec ia l  node. A grammar wr i te r  ts able to use 
bu i l t - in  funct lons .  MAP-SG. MAP-SGN. SORT. CUT. and 
INJECTION in the subst ruc ture  operat ion  par t  to 
choose the most appnopr la te  one. F igure 7 shows an 
example to use these bu l l t - Jn  funct ions .  
subst ruc ture_operat ion :  
eX <= ca11-dtc(V.LEX CASE-FRAME Z(N NP PP)): 
eX <- ca11-but l t (map-sg  ~(gX) t ree  
EVALUATE-CASE-FRAME): 
@X <- ca l l -bu i l t ( sor t  Z(@X) t ree  SCORE): 
@X <- ce l l -bu i l t ( cut  \ [ (eX)  t ree  1):  
9X <- ca l l -bu i l t ( In jec t ion  ~(eX) t ree  1): 
F igure 7 An example of  bu l l t - ln  funct ions  
In th i s  subst ruc ture  operat ion  par t .  the 
executor  of GRADE appl tes  the d ic t ionary  ru le  
wr t t ten  tn a word which ts the value of  V.LEX 
( lex lca l  unt t  of  verb)  to the t ree .  and sets the 
resu l t  to the var tab le  eX. When the 
nondetermtn is t tc -para l le led  mode ts used tn the 
d ic t ionary  ru le .  the value of eX ts the t ree  whose 
root  node tsa  pare specte l  node. A f te r  that ,  the 
executor  ca l l s  but l t - tn  funct ton  MAP-SG to apply  
342 
the subgrammar EVALUATE-CASE-FRAME to each sub-t ree 
of the value of OK. and sets the resu l t  to eX 
again.  The subgrammar EVALUATE-CASE-FRAME computes 
the eva luat ion  score end sets the score to the 
value of the proper ty  SCORE tn the root  node of the 
sub-trees.  Next, the executor  ca l l s  but l t - tn  
funct ton SORT. CUT. and INJECTION to get the 
sub-tree whose score Is the h ighest  one among the 
sub-trees under the pare spectal  node. This t ree  
ts then set to 9X as the most appropr ia te  resu l t  of  
the d ic t ionary  ru \ ]e .  
The para spectal  node ts t reated  as the 
same as the other  nodes tn the cur rent  
Implementation of GRADE. A grammar wr t te r  can use 
the para node as he want, and can se lec t  a sub-tree 
under a pare node at the la ter  grammatical ru le  
app l i ca t ion .  
7. System conf igurat ion  end the environment 
The system conf igurat ion  of GRADE ts Shown 
tn Figure 8. Grammatical ru les  wr i t ten  tn GRADE 
are f i r s t  t rans la ted  tnto  tn terna l  forms, which are 
expressed by s-expressions tn LISP. This 
t rans la t ion  ts performed by GRADE t rans la tor .  The 
In terna l  forms of grammatical ru les are applted to 
an tnput t ree .  which ts an output  of the 
morphological  analysts  program. Thts ru le  
app l i ca t ion  Is performed by GRADE executor .  The 
resu l t  of  ru le  app l i ca t ions  |s sent to the 
morphological  generat4on program. 
D ic t ionary  Grammar 
f 
J GRADE 
t rans la tor  
1/  \ 
Dic t ionary  Grammar 
( In terna l  form) ru le  ~ ~ r~ 
tnput_~ GRADE ~output  
sentent ta l  t ree |executor  J sentent ta l  t ree  
Ftgure 8 The system conf igurat ion  of  GRADE 
GRADE system ts mrt t ten  tn UTILISP 
(Un ivers i ty  of  Tokyo In teract ive  LISP) and 
Implemented on FACON M382 wtth the add i t iona l  
funct ton of handl lng Chatnese characters .  The 
system ts a lso usable on Ltsp Machtne Symbollcs 
3600. The program stze of GRADE system ts about 
10.000 l tnes .  
the form of t ree - to - t ree  t rans format ion  r t th  
annotat ion  to each node. (2) Rewr i t ing  ru le  has ? 
powerful wr t t tng  fac i l i ty .  (3) Grammar can be 
d iv ided Into  several  parts  and can be 11nked 
together  as a subgrammar network. (4) Subgrammar 
can be wr i t ten  tn the d ic t ionary  ent r tes  to express 
word spect f tc  l ingu iS t iC  phenomena. (5) Spectel 
node ts provtded tn a t ree  fo r  embedding 
ambigu i t ies .  
GRADE has been used fo r  more than a year as 
the software of the nat tona l  machtne t rans la t ion  
pro jec t  from Japanese Into  Engl ish.  The 
e f fec t iveness  of GRADE has been demonstrated tn 
thts  p ro jec t .  The l ingu is t i c  parts  of the pro jec t  
such as the morphological  ana lys ts /generat ion  
programs, the grammars fo r  the analysts  of 
Japanese. the t rans fer  from Japanese Into  Engltsh 
and the generat ion of Engl lsh.  are discussed tn 
other  papers (Sakamoto 84) (TsuJt1 84) (Raged 84).  
Thts study:  "Research on the machtne 
t rans la t ion  system ( Japanese-Engl ish)  of sc ient i f i c  
and techno log ica l  documents" Is betng performed 
through Spectal Coord inat ion  Funds for  Promoting 
Science & Technology of the Science and Technology 
Agency of the Japanese Government. 
ACKNOWLEDGEMENTS 
Ve would 11ke to acknowlege the 
cont r ibut ion  of N. Kogt. F. Ntshtno. Y. Sakane. M. 
Kobayasht. S. Sate. and Y. Senda. who programmed 
much of the system. We mould a lso 11ke to thank 
the other  member of  Me-pro ject  fo r  the i r  useful  
comments. 
REFERENCES 
Bot te t .  Ch., e t  e l .  Implementat ion and 
Conversat ional  Environment of ARIANE 78.4. Proc. 
COLING82. 1982. 
RageD, M., et  e l ,  Dealtng wtth Incompleteness of 
L ingu is t i c  Kno~ledego on Language Trans la t ion .  
Proc. COLING84o ;964. 
Sakamoto, Y. .  et  a l ,  Lextcon Features fo r  Japanese 
Syntact i c  Analysts In Mu-ProJect-JE, Proc. 
COLING84, 1984. 
TsuJt t ,  J . ,  e t  e l ,  Analysts  Grammar or Japanese tn 
Hu-ProJect,  Proc. COLING84, ;984. 
8. Conclusion 
The grammar wr t t tng  system GRADE ts 
discussed 4n thts  paper. GRADE has the fo l low4ng 
featureS.  ( I )  Rewr i t ing ru le  ts an expression tn 
343 
