Constraints on strong generative power
David Chiang
University of Pennsylvania
Dept of Computer and Information Science
200 S 33rd St
Philadelphia, PA 19104 USA
dchiang@cis.upenn.edu
Abstract
We consider the question ?How
much strong generative power can
be squeezed out of a formal system
without increasing its weak generative
power?? and propose some theoret-
ical and practical constraints on this
problem. We then introduce a formal-
ism which, under these constraints,
maximally squeezes strong generative
power out of context-free grammar.
Finally, we generalize this result to
formalisms beyond CFG.
1 Introduction
?How much strong generative power can be
squeezed out of a formal system without increas-
ing its weak generative power?? This question,
posed by Joshi (2000), is important for both lin-
guistic description and natural language process-
ing. The extension of tree adjoining grammar
(TAG) to tree-local multicomponent TAG (Joshi,
1987), or the extension of context free gram-
mar (CFG) to tree insertion grammar (Schabes
and Waters, 1993) or regular form TAG (Rogers,
1994) can be seen as steps toward answering this
question. But this question is difficult to answer
with much finality unless we pin its terms down
more precisely.
First, what is meant by strong generative
power? In the standard definition (Chomsky,
1965) a grammar G weakly generates a set of
sentences L(G) and strongly generates a set of
structural descriptions ?(G); the strong genera-
tive capacity of a formalism F is then f?(G) j
F provides Gg. There is some vagueness in the
literature, however, over what structural descrip-
tions are and how they can reasonably be com-
pared across theories (Miller (1999) gives a good
synopsis).
(a) X

X
X a
X
X b
(b) XNA
a X
b X a
b
Figure 1: Example of weakly context-free TAG.
The approach that Vijay-Shanker et al (1987)
and Weir (1988) take, elaborated on by Becker
et al (1992), is to identify a very general class
of formalisms, which they call linear context-
free rewriting systems (CFRSs), and define for
this class a large space of structural descriptions
which serves as a common ground in which the
strong generative capacities of these formalisms
can be compared. Similarly, if we want to talk
about squeezing strong generative power out of
a formal system, we need to do so in the context
of some larger space of structural descriptions.
Second, why is preservation of weak generative
power important? If we interpret this constraint to
the letter, it is almost vacuous. For example, the
class of all tree adjoining grammars which gen-
erate context-free languages includes the gram-
mar shown in Figure 1a (which generates the lan-
guage fa, bg). We can also add the tree shown in
Figure 1b without increasing the grammar?s weak
generative capacity; indeed, we can add any trees
we please, provided they yield only as and bs. In-
tuitively, the constraint of weak context-freeness
has little force.
This intuition is verified if we consider that
weak context-freeness is desirable for computa-
tional efficiency. Though a weakly context-free
TAG might be recognizable in cubic time (if we
know the equivalent CFG), it need not be parsable
in cubic time?that is, given a string, to compute
all its possible structural descriptions will take
O(n6) time in general. If we are interested in com-
puting structural descriptions from strings, then
Derivations Structuraldescriptions
Sentences
Figure 2: Simulation: structural descriptions as
derived structures.
we need a tighter constraint than preservation of
weak generative power.
In Section 3 below we examine some restric-
tions on tree adjoining grammar which are weakly
context-free, and observe that their parsers all
work in the same way: though given a TAG G,
they implicitly parse using a CFG G0 which de-
rives the same strings as G, but also their corre-
sponding structural descriptions under G, in such
a way that preserves the dynamic-programming
structure of the parsing algorithm.
Based on this observation, we replace the con-
straint of preservation of weak generative power
with a constraint of simulability: essentially, a
grammar G0 simulates another grammar G if it
generates the same strings that G does, as well as
their corresponding structural descriptions under
G (see Figure 2).
So then, within the class of context-free rewrit-
ing systems, how does this constraint of simu-
lability limit strong generative power? In Sec-
tion 4.1 we define a formalism called multicom-
ponent multifoot TAG (MMTAG) which, when
restricted to a regular form, characterizes pre-
cisely those CFRSs which are simulable by a
CFG. Thus, in the sense we have set forth, this
formalism can be said to squeeze as much strong
generative power out of CFG as is possible. Fi-
nally, we generalize this result to formalisms be-
yond CFG.
2 Characterizing structural descriptions
First we define context-free rewriting systems.
What these formalisms have in common is that
their derivation sets are all local sets (that is, gen-
erable by a CFG). These derivations are taken as
structural descriptions. The following definitions
are adapted from Weir (1988).
Definition 1 A generalized context-free gram-
mar G is a tuple hV, S , F, Pi, where
1. V is a finite set of variables,
2. S 2 V is a distinguished start symbol,
3. F is a finite set of function symbols, and
X
Y

XNA
a X d
YNA
b Y c
S ! ?(X, Y) ?(hx1, x2i, hy1, y2i) = x1y1y2x2
X ! ?1(X) ?1(hx1, x2i) = hax1, x2di
X ! () () = h, i
Y ! ?2(Y) ?2(hy1, y2i) = hby1, y2ci
Y ! () () = h, i
Figure 3: Example of TAG with corresponding
GCFG and interpretation. Here adjunction at foot
nodes is allowed.
4. P is a finite set of productions of the form
A! f (A1, . . . , An)
where n  0, f 2 F, and A, Ai 2 V .
A generalized CFG G generates a set T (G) of
terms, which are interpreted as derivations under
some formalism. In this paper we require that G
be free of spurious ambiguity, that is, that each
term be uniquely generated.
Definition 2 We say that a formalism F is a
context-free rewriting system (CFRS) if its deriva-
tion sets can be characterized by generalized
CFGs, and its derived structures are produced by
a function ~F from terms to strings such that for
each function symbol f , there is a yield function
fF such that
~ f (t1, . . . , tn)F = fF (~t1F , . . . , ~tnF )
(A linear CFRS is subject to further restrictions,
which we do not make use of.)
As an example, Figure 3 shows a simple TAG
with a corresponding GCFG and interpretation.
A nice property of CFRS is that any formal-
ism which can be defined as a CFRS immedi-
ately lends itself to several extensions, which arise
when we give additional interpretations to the
function symbols. For example, we can interpret
the functions as ranging over probabilities, cre-
ating a stochastic grammar; or we can interpret
them as yield functions of another grammar, cre-
ating a synchronous grammar.
Now we define strong generative capacity as
the relationship between strings and structural de-
scriptions.1
1This is similar in spirit, but not the same as, the notion
of derivational generative capacity (Becker et al, 1992).
Definition 3 The strong generative capacity of a
grammar G a CFRS F is the relation
fh~tF , ti j t 2 T (G)g.
For example, the strong generative capacity of the
grammar of Figure 3 is
fhambncndm, ?(?m1 (()), ?n2(()))ig
whereas any equivalent CFG must have a strong
generative capacity of the form
fhambncndm, f m(gn(e()))ig
That is, in a CFG the n bs and cs must appear later
in the derivation than the m as and ds, whereas in
our example they appear in parallel.
3 Simulating structural descriptions
We now take a closer look at some examples of
?squeezed? context-free formalisms to illustrate
how a CFG can be used to simulate formalisms
with greater strong generative power than CFG.
3.1 Motivation
Tree substitution grammar (TSG), tree insertion
grammar (TIG), and regular-form TAG (RF-TAG)
are all weakly context free formalisms which can
additionally be parsed in cubic time (with a caveat
for RF-TAG below). For each of these formalisms
a CKY-style parser can be written whose items are
of the form [X, i, j] and are combined in various
ways, but always according to the schema
[X, i, j] [Y, j, k]
[Z, i, k]
just as in the CKY parser for CFG. In effect the
parser dynamically converts the TSG, TIG, or RF-
TAG into an equivalent CFG?each parser rule of
the above form corresponds to the rule schema
Z ! XY .
More importantly, given a grammar G and a
string w, a parser can reconstruct all possible
derivations of w under G by storing inside each
chart item how that item was inferred. If we think
of the parser as dynamically converting G into a
CFG G0, then this CFG is likewise able to com-
positionally reconstruct TSG, TIG, or RF-TAG
derivations?we say that G0 simulates G.
Note that the parser specifies how to convert G
into G0, but G0 is not itself a parser. Thus these
three formalisms have a special relationship to
CFG that is independent of any particular pars-
ing algorithm: for any TSG, TIG, or RF-TAG G,
there is a CFG that simulates G. We make this no-
tion more precise below.
3.2 Excursus: regular form TAG
Strictly speaking, the recognition algorithm
Rogers gives cannot be extended to parsing; that
is, it generates all possible derived trees for a
given string, but not all possible derivations. It
is correct, however, as a parser for a further re-
stricted subclass of TAGs:
Definition 4 We say that a TAG is in strict reg-
ular form if there exists some partial ordering 
over the nonterminal alphabet such that for ev-
ery auxiliary tree ?, if the root and foot of ? are
labeled X, then for every node ? along ??s spine
where adjunction is allowed, X  label(?), and
X = label(?) only if ? is a foot node. (In this vari-
ant adjunction at foot nodes is permitted.)
Thus the only kinds of adjunction which can oc-
cur to unbounded depth are off-spine adjunction
and adjunction at foot nodes.
This stricter definition still has greater strong
generative capacity than CFG. For example, the
TAG in Figure 3 is in strict regular form, because
the only nodes along spines where adjunction is
allowed are foot nodes.
3.3 Simulability
So far we have not placed any restrictions on
how these structural descriptions are computed.
Even though we might imagine attaching arbi-
trary functions to the rules of a parser, an algo-
rithm like CKY is only really capable of com-
puting values of bounded size, or else structure-
sharing in the chart will be lost, increasing the
complexity of the algorithm possibly to exponen-
tial complexity.
For a parser to compute arbitrary-sized objects,
such as the derivations themselves, it must use
back-pointers, references to the values of sub-
computations but not the values themselves. The
only functions on a back-pointer the parser can
compute online are the identity function (by copy-
ing the back-pointer) and constant functions (by
replacing the back-pointer); any other function
would have to dereference the back-pointer and
destroy the structure of the algorithm. Therefore
such functions must be computed offline.
Definition 5 A simulating interpretation ~ is a
bijection between two recognizable sets of terms
such that
1. For each function symbol ?, there is a func-
tion ?? such that
~?(t1, . . . , tn) = ??(~t1, . . . , ~tn)
2. Each ?? is definable as:
?
?(hx11, . . . , x1m1)i), . . . , hxn1, . . . , xmnmi) =
hw1, . . . ,wmi
where each wi can take one of the following
forms:
(a) a variable xi j, or
(b) a function application f (xi1 j1 , . . . xin jn),
n  0
3. Furthermore, we require that for any recog-
nizable set T , ~T is also a recognizable set.
We say that ~ is trivial if every ?? is definable as
?
?(x1, . . . xn) = f (xpi(1), . . . xpi(n))
where pi is a permutation of f1, . . . , ng.2
The rationale for requirement (3) is that it
should not be possible, simply by imposing local
constraints on the simulating grammar, to produce
a simulated grammar which does not even come
from a CFRS.3
Definition 6 We say that a grammar G from a
CFRS F is (trivially) simulable by a grammar G?
from another CFRS F if there is a (trivial) simu-
lating interpretation ~s : T (G0) ! T (G) which
satisfies ~tF 0 = ~~tsF for all t 2 T (G0).
As an example, a CFG which simulates the
TAG of Figure 3 is shown in Figure 4. Note that
if we give additional interpretations to the simu-
lated yield functions ?, ?1, and ?2, this CFG can
compute any probabilities, translations, etc., that
the original TAG can.
Note that if G0 trivially simulates G, they are
very nearly strongly equivalent, except that the
yield functions of G0 might take their arguments
in a different order thanG, and there might be sev-
eral yield functions of G0 which correspond to a
single yield function ofG used in several different
contexts. In fact, for technical reasons we will use
this notion instead of strong equivalence for test-
ing the strong generative power of a formal sys-
tem.
Thus the original problem, which was, given
a formalism F , to find a formalism that has as
much strong generative power as possible but re-
mains weakly equivalent to F , is now recast as
2Simulating interpretations and trivial simulating inter-
pretations are similar to the generalized and ?ungeneralized?
syntax-directed translations, respectively, of Aho and Ull-
man (1969; 1971).
3Without this requirement, there are certain pathological
cases that cause the construction of Section 4.2 to produce
infinite MM-TAGs.
S ! ?0 ?(x1, x2)   hx1, x2i
?
0 ! ?0 h(), x2i    h?, x2i
?
0
 ! ?1
 h?, x2i    h?, x2i
?
1 ! ?1 h?, ()i    h?,?i
?
1
 !  h?,?i    h?,?i
?
0 ! ?01[?0] h?1(x1), x2i    hx1, x2i
?
0
1[?0]! a ?21[?0] d hx1, x2i    hx1, x2i
?
2
1[?0]! ?01[?0] h?1(x1), x2i    hx1, x2i
?
2
1[?0]! ?0 h(), x2i    h?, x2i
?
1 ! ?02[?1] h?, ?2(x2)i    h?, x2i
?
0
2[?1]! b ?22[?1] c h?, x2i    h?, x2i
?
2
2[?1]! ?12[?1] h?, ?2(x2)i    h?, x2i
?
2
2[?1]! ?1 h?, ()i    h?,?i
Figure 4: CFG which simulates the grammar
of Figure 3. Here we leave the yield functions
anonymous; y    x denotes the function which
maps x to y.
the following problem: find a formalism that triv-
ially simulates as many grammars as possible but
remains simulable by F .
3.4 Results
The following is easy to show:
Proposition 1 Simulability is reflexive and tran-
sitive.
Because of transitivity, it is impossible that a for-
malism which is simulable by F could simulate
a grammar that is not simulable by F . So we are
looking for a formalism that can trivially simulate
exactly those grammars that F can.
In Section 4.1 we define a formalism called
multicomponent multifoot TAG (MMTAG), and
then in Section 4.2 we prove the following result:
Proposition 2 A grammar G from a CFRS is
simulable by a CFG if and only if it is trivially
simulable by an MMTAG in regular form.
The ?if? direction (() implies (because simu-
lability is reflexive) that RF-MMTAG is simula-
ble by a CFG, and therefore cubic-time parsable.
(The proof below does give an effective proce-
dure for constructing a simulating CFG for any
RF-MMTAG.) The ?only if? direction ()) shows
that, in the sense we have defined, RF-MMTAG
is the most powerful such formalism.
We can generalize this result using the notion
of a meta-level grammar (Dras, 1999).
Definition 7 If F1 and F2 are two CFRSs, F2 
F1 is the CFRS characterized by the interpretation
function ~F2F1 = ~F2  ~F1 .
F1 is the meta-level formalism, which generates
derivations for F2. Obviously F1 must be a tree-
rewriting system.
Proposition 3 For any CFRS F 0, a grammar G
from a (possibly different) CFRS is simulable by
a grammar in F 0 if and only if it is trivially simu-
lable by a grammar in F 0  RF-MMTAG.
The ?only if? direction ()) follows from the
fact that the MMTAG constructed in the proof of
Proposition 2 generates the same derived trees as
the CFG. The ?if? direction (() is a little trickier
because the constructed CFG inserts and relabels
nodes.
4 Multicomponent multifoot TAG
4.1 Definitions
MMTAG resembles a cross between set-local
multicomponent TAG (Joshi, 1987) and ranked
node rewriting grammar (Abe, 1988), a variant of
TAG in which auxiliary trees may have multiple
foot nodes. It also has much in common with d-
tree substitution grammar (Rambow et al, 1995).
Definition 8 An elementary tree set ~? is a finite
set of trees (called the components of ~?) with the
following properties:
1. Zero or more frontier nodes are designated
foot nodes, which lack labels (following
Abe), but are marked with the diacritic ;
2. Zero or more (non-foot) nodes are desig-
nated adjunction nodes, which are parti-
tioned into one or more disjoint sets called
adjunction sites. We notate this by assigning
an index i to each adjunction site and mark-
ing each node of site i with the diacritic i .
3. Each component is associated with a sym-
bol called its type. This is analogous to the
left-hand side of a CFG rule (again, follow-
ing Abe).
4. The components of ~? are connected by d-
edges from foot nodes to root nodes (notated
by dotted lines) to form a single tree struc-
ture. A single foot node may have multiple
d-children, and their order is significant. (See
Figure 5 for an example.)
A multicomponent multifoot tree adjoining gram-
mar is a tuple h?, P, S i, where:
A
 X 1
Y 2 
X 1

X 1

A
 X 1
Y 3 
X 1

X 1

{
A
 A
Y 3 X 1
Y 2 
X 1

X 1

Figure 5: Example of MMTAG adjunction. The
types of the components, not shown in the figure,
are all X.
1. ? is a finite alphabet;
2. P is a finite set of tree sets; and
3. S 2 ? is a distinguished start symbol.
Definition 9 A component ? is adjoinable at a
node ? if ? is an adjunction node and the type of
? equals the label of ?.
The result of adjoining a component ? at a node
? is the tree set formed by separating ? from its
children, replacing ? with the root of ?, and re-
placing the ith foot node of ? with the ith child
of ?. (Thus adjunction of a one-foot component
is analogous to TAG adjunction, and adjunction
of a zero-foot component is analogous to substi-
tution.)
A tree set ~? is adjoinable at an adjunction site
~? if there is a way to adjoin each component of ~?
at a different node of ~? (with no nodes left over)
such that the dominance and precedence relations
within ~? are preserved. (See Figure 5 for an ex-
ample.)
We now define a regular form for MMTAG that
is analogous to strict regular form for TAG. A
spine is the path from the root to a foot of a sin-
gle component. Whenever adjunction takes place,
several spines are inserted inside or concatenated
with other spines. To ensure that unbounded in-
sertion does not take place, we impose an order-
ing on spines, by means of functions ?i that map
the type of a component to the rank of that com-
ponent?s ith spine.
Definition 10 We say that an adjunction node ? 2
~? is safe in a spine if it is the lowest node (except
the foot) in that spine, and if each component un-
der that spine consists only of a member of ~? and
zero or more foot nodes.
We say that an MMTAGG is in regular form if
there are functions ?i from ? into the domain of
some partial ordering  such that for each com-
ponent ? of type X, for each adjunction node
? 2 ?, if the jth child of ? dominates the ith foot
node of ? (that is, another component?s jth spine
would adjoin into the ith spine), then ?i(X) 
? j(label(?)), and ?i(X) = ? j(label(?)) only if ?
is safe in the ith spine.
Thus the only kinds of adjunction which can oc-
cur to unbounded depth are off-spine adjunction
and safe adjunction. The adjunction shown in Fig-
ure 5 is an example of safe adjunction.
4.2 Proof of Proposition 2
(() First we describe how to construct a simu-
lating CFG for any RF-MMTAG; then this direc-
tion of the proof follows from the transitivity of
simulability.
When a CFG simulates a regular form TAG,
each nonterminal must encapsulate a stack (of
bounded depth) to keep track of adjunctions. In
the multicomponent case, these stacks must be
generalized to trees (again, of bounded size).
So the nonterminals ofG0 are of the form [?, t],
where t is a derivation fragment of G with a dot
() at exactly one node ~?, and ? is a node of ~?. Let
?? be the node in the derived tree where ? ends up.
A fragment t can be put into a normal form as
follows:
1. For every ~? above the dot, if ?? does not lie
along a spine of ~?, delete everything above
~?.
2. For every ~? not above or at the dot, if ?? does
not lie along a d-edge of ~?, delete ~? and
everything below and replace it with > if ??
dominates ~?; otherwise replace it with ?.
3. If there are two nodes ~?1 and ~?2 along a
path which name the same tree set and ?? lies
along the same spine or same d-edge in both
of them, collapse ~?1 and ~?2, deleting every-
thing in between.
Basically this process removes all unboundedly
long paths, so that the set of normal forms is finite.
In the rule schemata below, the terms in the left-
hand sides range over normalized terms, and their
corresponding right-hand sides are renormalized.
Let up(t) denote the tree that results from moving
the dot in t up one step.
The value of a subderivation t0 of G0 under ~s
is a tuple of partial derivations of G, one for each
> symbol in the root label of t0, in order. Where
we do not define a yield function for a production
below, the identity function is understood.
For every set ~? with a single, S -type compo-
nent rooted by ?, add the rule
S ! [?, ~?(>, . . . ,>)]
~?(x1, . . . , xn)   hx1, . . . , xni
For every non-adjunction, non-foot node ? with
children ?1, . . . , ?n (n  0),
[?, t]! [?1, t]    [?n, t]
For every component with root ?0 that is adjoin-
able at ?,
[?, up(t)]! [?0, t]
If ?0 is the root of the whole set ~?0, this rule
rewrites a > to several > symbols; the corre-
sponding yield function is then
h. . . , ~?0(x1, . . . , xn), . . .i    h. . . , x1, . . . , xn, . . .i
For every component with ith foot ?0i that is ad-joinable at a node with ith child ?i,
[?0i , t]! [?i, up(t)]
This last rule skips over deleted parts of the
derivation tree, but this is harmless in a regular
form MMTAG, because all the skipped adjunc-
tions are safe.
()) First we describe how to decompose any
given derivation t0 of G0 into a set of elementary
tree sets.
Let t = ~t0s. (Note the convention that primed
variables always pertain to the simulating gram-
mar, unprimed variables to the simulated gram-
mar.) If, during the computation of t, a node ?0
creates the node ?, we say that ?0 is productive
and produces ?. Without loss of generality, let us
assume that there is a one-to-one correspondence
between productive nodes and nodes of t.4
To start, let ? be the root of t, and ?1, . . . , ?n its
children.
Define the domain of ?i as follows: any node
in t0 that produces ?i or any of its descendants is
in the domain of ?i, and any non-productive node
whose parent is in the domain of ?i is also in the
domain of ?i.
For each ?i, excise each connected component
of the domain of ?i. This operation is the reverse
of adjunction (see Figure 6): each component gets
4If G0 does not have this property, it can be modified
so that it does. This may change the derived trees slightly,
which makes the proof of Proposition 3 trickier.
 ?
 ?1

a  
 

d
{
Q1 :  ?1

a  

d
 ?
Q1 1
 

Figure 6: Example derivation (left) of the gram-
mar of Figure 4, and first step of decomposition.
Non-adjunction nodes are shown with the place-
holder  (because the yield functions in the origi-
nal grammar were anonymous), the Greek letters
indicating what is produced by each node. Ad-
junction nodes are shown with labels Qi in place
of the (very long) true labels.
S : 
Q1 1
Q2 2

Q1 : 

a Q1 1

d
Q1 : 

Q2 : 

b Q2 2 c
Q2 : 

Figure 7: MMTAG converted from CFG of Fig-
ure 4 (cf. the original TAG in Figure 3). Each
components? type is written to its left.
foot nodes to replace its lost children, and the
components are connected by d-edges according
to their original configuration.
Meanwhile an adjunction node is created in
place of each component. This node is given a la-
bel (which also becomes the type of the excised
component) whose job is to make sure the final
grammar does not overgenerate; we describe how
the label is chosen below. The adjunction nodes
are partitioned such that the ith site contains all
the adjunction nodes created when removing ?i.
The tree set that is left behind is the elementary
tree set corresponding to ? (rather, the function
symbol that labels ?); this process is repeated re-
cursively on the children of ?, if any.
Thus any derivation of G0 can be decomposed
into elementary tree sets. Let ?G be the union of
the decompositions of all possible derivations of
G0 (see Figure 7 for an example).
Labeling adjunction nodes For any node ?0,
and any list of nodes h?01, . . . , ?
0
ni, let the sig-
nature of ?0 with respect to h?01, . . . , ?
0
ni be
hA, a1, . . . , ami, where A is the left-hand side of
the GCFG production that generated ?0, and ai =
h j, ki if ?0 gets its ith field from the kth field of
?
0
j, or  if ?
0 produces a function symbol in its ith
field.
So when we excise the domain of ?i, the la-
bel of the node left behind by a component ? is
hs, s1, . . . , sni, where s is the signature of the root
of ? with respect to the foot nodes and s1, . . . , sn
are the signatures of the foot nodes with respect to
their d-children. Note that the number of possible
adjunction labels is finite, though large.
?G trivially simulates G. Since each tree of ?G
corresponds to a function symbol (though not
necessarily one-to-one), it is easy to write a triv-
ial simulating interpretation ~ : T ( ?G) ! T (G).
To see that ?G does not overgenerate, observe that
the nonterminal labels inside the signatures en-
sure that every derivation of ?G corresponds to a
valid derivation ofG0, and therefore G. To see that
~ is one-to-one, observe that the adjunction la-
bels keep track of how G0 constructed its simu-
lated derivations, ensuring that for any derivation
t? of ?G, the decomposition of the derived tree of t?
is t? itself. Therefore two derivations of ?G cannot
correspond to the same derivation of G0, nor of G.
?G is finite. Briefly, suppose that the number of
components per tree set is unbounded. Then it is
possible, by intersecting G0 with a recognizable
set, to obtain a grammar whose simulated deriva-
tion set is non-recognizable. The idea is that mul-
ticomponent tree sets give rise to dependent paths
in the derivation set, so if there is no bound on
the number of components in a tree set, neither is
there a bound on the length of dependent paths.
This contradicts the requirement that a simulating
interpretation map recognizable sets to recogniz-
able sets.
Suppose that the number of nodes per compo-
nent is unbounded. If the number of components
per tree set is bounded, so must the number of ad-
junction nodes per component; then it is possible,
again by intersecting G0 with a recognizable set,
to obtain a grammar which is infinitely ambigu-
ous with respect to simulated derivations, which
contradicts the requirement that simulating inter-
pretations be bijective.
?G is in regular form. A component of ?G corre-
sponds to a derivation fragment ofG0 which takes
fields from several subderivations and processes
them, combining some into a larger structure and
copying some straight through to the root. Let
?i(X) be the number of fields that a component
of type X copies from its ith foot up to its root.
This information is encoded in X, in the signa-
ture of the root. Then ?G satisfies the regular form
constraint, because when adjunction inserts one
spine into another spine, the the inserted spine
must copy at least as many fields as the outer
one. Furthermore, if the adjunction site is not safe,
then the inserted spine must additionally copy the
value produced by some lower node.
5 Discussion
We have proposed a more constrained version of
Joshi?s question, ?How much strong generative
power can be squeezed out of a formal system
without increasing its weak generative power,?
and shown that within these constraints, a vari-
ant of TAG called MMTAG characterizes the limit
of how much strong generative power can be
squeezed out of CFG. Moreover, using the notion
of a meta-level grammar, this result is extended to
formalisms beyond CFG.
It remains to be seen whether RF-MMTAG,
whether used directly or for specifying meta-level
grammars, provides further practical benefits on
top of existing ?squeezed? grammar formalisms
like tree-local MCTAG, tree insertion grammar,
or regular form TAG.
This way of approaching Joshi?s question is by
no means the only way, but we hope that this work
will contribute to a better understanding of the
strong generative capacity of constrained gram-
mar formalisms as well as reveal more powerful
formalisms for linguistic analysis and natural lan-
guage processing.
Acknowledgments
This research is supported in part by NSF
grant SBR-89-20230-15. Thanks to Mark Dras,
William Schuler, Anoop Sarkar, Aravind Joshi,
and the anonymous reviewers for their valuable
help. S. D. G.
References
Naoki Abe. 1988. Feasible learnability of formal
grammars and the theory of natural language ac-
quisition. In Proceedings of the Twelfth Inter-
national Conference on Computational Linguistics
(COLING-88), pages 1?6, Budapest.
A. V. Aho and J. D. Ullman. 1969. Syntax directed
translations and the pushdown assembler. J. Comp.
Sys. Sci, 3:37?56.
A. V. Aho and J. D. Ullman. 1971. Translations on
a context free grammar. Information and Control,
19:439?475.
Tilman Becker, Owen Rambow, and Michael Niv.
1992. The derivational generative power of formal
systems, or, Scrambling is beyond LCFRS. Tech-
nical Report IRCS-92-38, Institute for Research in
Cognitive Science, University of Pennsylvania.
Noam Chomsky. 1965. Aspects of the Theory of Syn-
tax. MIT Press, Cambridge, MA.
Mark Dras. 1999. A meta-level grammar: redefining
synchronous TAG for translation and paraphrase.
In Proceedings of the 37th Annual Meeting of the
Assocation for Computational Linguistics, pages
80?87, College Park, MD.
Aravind K. Joshi. 1987. An introduction to tree ad-
joining grammars. In Alexis Manaster-Ramer, ed-
itor, Mathematics of Language. John Benjamins,
Amsterdam.
Aravind K. Joshi. 2000. Relationship between strong
and weak generative power of formal systems. In
Proceedings of the Fifth International Workshop on
TAG and Related Formalisms (TAG+5), pages 107?
113.
Philip H. Miller. 1999. Strong Generative Capacity:
The Semantics of Linguistic Formalism. Number
103 in CSLI lecture notes. CSLI Publications, Stan-
ford.
Owen Rambow, K. Vijay-Shanker, and David Weir.
1995. D-tree grammars. In Proceedings of the
33rd Annual Meeting of the Assocation for Com-
putational Linguistics, pages 151?158, Cambridge,
MA.
James Rogers. 1994. Capturing CFLs with tree ad-
joining grammars. In Proceedings of the 32nd An-
nual Meeting of the Assocation for Computational
Linguistics, pages 155?162, Las Cruces, NM.
Yves Schabes and Richard C. Waters. 1993. Lexical-
ized context-free grammars. In Proceedings of the
31st Annual Meeting of the Association for Com-
putational Linguistics, pages 121?129, Columbus,
OH.
K. Vijay-Shanker, David Weir, and Aravind Joshi.
1987. Characterizing structural descriptions pro-
duced by various grammatical formalisms. In Pro-
ceedings of the 25th AnnualMeeting of the Associa-
tion for Computational Linguistics, pages 104?111,
Stanford, CA.
David J. Weir. 1988. Characterizing Mildly Context-
Sensitive Grammar Formalisms. Ph.D. thesis, Univ.
of Pennsylvania.
