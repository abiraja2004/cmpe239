Proceedings of the 10th International Workshop on Finite State Methods and Natural Language Processing, pages 108?115,
Donostia?San Sebastia?n, July 23?25, 2012. c?2012 Association for Computational Linguistics
Refining the Design of a Contracting Finite-State Dependency Parser
Anssi Yli-Jyra? and Jussi Piitulainen and Atro Voutilainen
The Department of Modern Languages
PO Box 3
00014 University of Helsinki
{anssi.yli-jyra,jussi.piitulainen,atro.voutilainen}@helsinki.fi
Abstract
This work complements a parallel paper of
a new finite-state dependency parser archi-
tecture (Yli-Jyra?, 2012) by a proposal for
a linguistically elaborated morphology-syntax
interface and its finite-state implementation.
The proposed interface extends Gaifman?s
(1965) classical dependency rule formalism
by separating lexical word forms and morpho-
logical categories from syntactic categories.
The separation lets the linguist take advantage
of the morphological features in order to re-
duce the number of dependency rules and to
make them lexically selective. In addition,
the relative functional specificity of parse trees
gives rise to a measure of parse quality. By fil-
tering worse parses out from the parse forest
using finite-state techniques, the best parses
are saved. Finally, we present a synthesis of
strict grammar parsing and robust text pars-
ing by connecting fragmental parses into trees
with additional linear successor links.
1 Introduction
Finite-state dependency parsing aims to combine de-
pendency syntax and finite-state automata into a sin-
gle elegant system. Deterministic systems such as
(Elworthy, 2000) are fast but susceptible to garden-
path type errors although some ambiguity is encoded
in the output. Some other systems such as (Oflazer,
2003; Yli-Jyra?, 2005) carry out full projective de-
pendency parsing while being much slower, espe-
cially if the syntactic ambiguity is high. In the worst
case, the size of the minimal finite-state automa-
ton storing the forest is exponentially larger than
the sentence: an 80-word sentence has potentially
1.1?1062 unrooted unlabeled dependency trees that
are stored ?compactly? into a finite-state lattice that
requires at least 2.4?1024 states, see Table 4 in Yli-
Jyra? (2012).
A truly compact representation of the parse forest
is provided by an interesting new extended finite-
state parsing architecture (Yli-Jyra?, 2012) that first
recognizes the grammatical sentences in quadratic
time and space if the nested dependencies are lim-
ited by a constant (in cubic time if the length of the
sentence limits the nesting). The new system (Yli-
Jyra?, 2012) replaces the additive (Oflazer, 2003) and
the intersecting (Yli-Jyra?, 2005) validation of depen-
dency links with reductive validation that gradually
contracts the dependencies until the whole tree has
been reduced into a trivial one. The idea of the con-
tractions is illustrated in Example 1. In practice, our
parser operates on bracketed trees (i.e., strings), but
the effect will be similar.
(1) a. time flies like an arrow
SUBJ ADVL
NOBJ
DET
b. time flies like an arrow
NOBJ
c. time flies like an arrow
108
Despite being non-deterministic and efficient,
there are two important requirements that are not ful-
filled by the core of the new architecture (Yli-Jyra?,
2012):
1. A mature finite-state dependency parser must
be robust. The outputs should not be restricted
to complete grammatical parses. For exam-
ple, Oflazer (2003) builds fragmental parses but
later drops those fragmental parses for which
there are alternative parses with fewer frag-
ments. However, his approach handles only
gap-free bottom-up fragments and optimizes
the number of fragments by a counting method
whose capacity is limited.
2. Besides robustness, a wide-coverage parser
should be able to assign reasonably well-
motivated syntactic categories to every word in
the input. This amounts to having a morpho-
logical guesser and an adequate morphology-
syntax interface. Most prior work trivializes
the complexity of the interface, being compara-
ble to Gaifman?s (1965) legacy formalism that
is mathematically elegant but based on word-
form lists. A good interface formalism is pro-
vided, e.g., by Constraint Grammar parsers
(Karlsson et al., 1995) where syntactic rules
can refer to morphological features. Oflazer
(2003) tests morphological features in compli-
cated regular expressions. The state complexity
of the combination of such expressions is, how-
ever, a potential problem if many more rules
would be added to the system.
This paper makes two main contributions:
1. It adapts Gaifman?s elegant formalism to the re-
quirements of morphologically rich languages.
With the adapted formalism, grammar writing
becomes easier. However, efficient implemen-
tation of the rule lookup becomes inherently
trickier because testing several morphological
conditions in parallel increases the size of the
finite-state automata. Fortunately, the new for-
malism comes with an efficient implementation
that keeps the finite-state representation of the
rule set as elegant as possible.
2. The paper introduces a linguistically motivated
ranking for complete trees. According to it, a
tree is better than another tree if a larger propor-
tion of its dependency links is motivated by the
linguistic rules. In contrast to Oflazer (2003),
our method counts the number of links needed
to connect the fragments into a spanning tree.
Moreover, since such additional links are in-
deed included in the parses, the ranking method
turns a grammar parser into a robust text parser.
The paper is structured as follows. The next section
will give an overview of the new parser architecture.
After it, we present the new morphology-syntax in-
terface in Section 3 and the parse ranking method in
Section 4. The paper ends with theoretical evalua-
tion and discussion about the proposed formalism in
Section 5.
2 The General Design
2.1 The Internal Linguistic Representation
We need to define a string-based representation for
the structures that are processed by the parser. For
this purpose, we encode the dependency trees and
then augment the representation with morphological
features.
Dependency brackets encode dependency links
between pairs of tokens that are separated by an (im-
plicit) token boundary. The four-token string abcd
has 12 distinct undirected unlabeled dependency
bracketings a((()b)c)d, a((b())c)d, a(()b()c)d,
a(()bc())d, a(()b)c()d, a(b(()c))d, a(b(c()))d,
a(b()c())d, a(b())c()d, a()b(()c)d, a()b(c())d,
a()b()c()d.1
The basic dependency brackets extend with labels
such as in (LBL LBL) and directions such as in <LBL
LBL\ and in /LBL LBL>. Directed dependency links
designate one of the linked words as the head and
another as the dependent. The extended brackets let
us encode a full dependency tree in a string format
as indicated in (2).2 The dependent word of each
1Dependency bracketing differs clearly from binary phrase-
structure bracketings that put brackets around phrases: the
string abcd has only five distinct bracketings ((ab)(cd)),
(((ab)c)d), ((a(bc))d), (a((bc)d)), and (a(b(cd))).
2The syntactic labels used in this paper are: AG=Agent,
by=Preposition ?by? as a phrasal verb complement,
D=Determiner, EN=Past Participle, FP=Final Punctuation,
P=adjunctive preposition, PC=Preposition Complement,
S=Subject, sgS=Singular Subject.
109
link is indicated in trees with an arrowhead but in
bracketing with an angle bracket.
(2) it
<S
was
S\ /FP/EN
inspired
EN> /AG
by
AG> /PC
the
<D
writings
D\PC> FP>
.
S EN
G
PC
D
FP
In Table 1, the dependency bracketing is com-
bined with a common textual format for morpho-
logical analyses. In this format, the base forms are
defined over the alphabet of orthographical symbols
? whereas the morphological symbols and syntactic
categories are multi-character symbols that belong,
respectively, to the alphabets ? and ?. In addition,
there is a token boundary symbol #.
Table 1: One morpho-syntactic analysis of a sentence
1 i t PRON NOM SG3 <S #
2 b e V PAST SG13 S\ /FP /EN #
3 i n s p i r e EN EN> /AG #
4 b y PREP AG> /PC #
5 t h e DET SG/PL <D #
6 w r i t i n g N NOM PL D\ PC> #
7 . PUNCT FP> #
Depending on the type of the languages, one or-
thographical word can be split into several parts such
as the inflectional groups in Turkish (Oflazer, 2003).
In this case, a separate word-initial token boundary
can be used to separate such parts into lines of their
own.
The current dependency bracketing captures pro-
jective and weakly non-projective (1-planar) trees
only, but an extended encoding for 2-planar and
multi-planar dependency trees seems feasible (Yli-
Jyra?, 2012):
2.2 The Valid Trees
We are now going to define precisely the semantics
of the syntactic grammar component using finite-
state relations.
The finite-state languages will be defined over a
finite alphabet ? and they include all finite subsets of
the universal language ??. The (binary) finite-state
relations are defined over ?? and include all finite
subsets of ?? ? ??. In addition, they are closed un-
der the operations over finite-state languages L and
M and finite-state relations R and S according to
Table 2. The language relation Id(L) restricts the
identity relation to a language L. The composition
of language relations corresponds to the intersection
of their languages.
Table 2: The relevant closure properties
language relation meaning
LM RS concatenation
L? R? (Kleene) star
L+ R+ (Kleene) plus
L ?M R ? S union
Id(L) language relation
Id?1(R) L for R = Id(L)
L?M Id(L)?Id(M) set difference
L?M cross product
R|L input restriction
R ? S composition
R?1 inverse
Proj1(R) Id(the input side of R)
Proj2(R) Id(the output side of R)
For notational convenience, the empty string is
denoted by ?. A string x is identified with the sin-
gleton set {x}.
The syntactic component of the grammar defines
a set of parse strings where the bracketing is a valid
dependency tree. In these parses, there is no mor-
phological information. One way to express the set
is to intersect a set of constraints as in (Yli-Jyra?,
2005). However, the contracting dependency parser
expresses the Id relation of the set through a compo-
sition of simple finite-state relations:
Synt = Proj1(Abst ?R ? ... ?R? ?? ?
t
?Root), (1)
Root = Id(#). (2)
In (1), Abst is a relation that removes all non-
syntactic information from the strings,
Abst = (Id(?) ? Id(#) ? Delete)?, (3)
Delete = {(x, ?) | x ? ? ??}, (4)
110
and R is a relation that performs one layer of con-
tractions in dependency bracketing.
R = (Id(?) ? Id(#) ? Left ? Right)?, (5)
Left = {(<? # ?\, ?) | <?, ?\ ? ?}, (6)
Right = {(/? # ?>, ?) | /?, ?> ? ?}. (7)
The parameter t determines the maximum number
of layers of dependency links in the validated brack-
etings. The limit of Synt as t approaches ? is not
necessarily a finite-state language, but it remains
context-free because only projective trees are as-
signed to the sentences.
2.3 The Big Picture
We are now ready to embed the contraction based
grammar into the bigger picture.
Let x ? ?? be an orthographical string to be
parsed. Assume that it is segmented into n tokens.
The string x is parsed by composition of four rela-
tions: the relation {(x, x)}, the lexical transducer
(Morph), the morphology-syntax interface (Iface),
and the syntactic validator Synn?1.
Parses(x) = Id(x) ?Morph ? Iface ? Synn?1. (8)
The language relation Proj2(Parses(x)) encodes
the parse forest of the input x.
In practice, the syntactic validator Synn?1 cannot
be compiled into a finite-state transducer due to its
large state complexity. However, when each copy of
the contracting transducer R in (1) is restricted by
its admissible input-side language, a compact rep-
resentation for the input-side restriction (Synn?1)|X
where X = Proj2(Id(x)?Morph?Iface) is computed
efficiently as described in (Yli-Jyra?, 2012).
3 The Grammar Formalism
In the parser, the linguistic knowledge is organized
into Morph (the morphology) and Iface (the lexical-
ized morphology-syntax interface), while Syn has
mainly a technical role as a tree validator. Imple-
menting the morphology-syntax interface is far from
an easy task since it is actually the place that lexical-
izes the whole syntax.
3.1 Gaifman?s Dependency Rules
Gaifman?s legacy notation (Gaifman, 1965; Hays,
1964) for dependency grammars assigns word forms
to a finite number of potential morpho-syntactic cat-
egories that relate word forms to their syntactic func-
tions. The words of particular categories are then
related by dependency rules:
X0(Xp, . . . , X?1,*, X1, . . . , Xm). (9)
The rule (9) states that a word in category X0 is the
head of dependent words in categories Xp, . . . , X?1
before it and words in categories X1, . . . , Xm after
it, in the given order. The rule expresses, in a cer-
tain sense, the frame or the argument structure of the
word. Rule X(*) indicates that the word in category
X can occur without dependents.
In addition, there is a root rule *(X) that states
that a word in category X can occur independently,
that is, as the root of the sentence.
In the legacy notation, the distinction between
complements and adjuncts is not made explicit, as
both need to be listed as dependents. To compact the
notation, we introduce optional dependents that will
be indicated by categories Xp?, . . . , X?1? and cat-
egories X1?, . . . , Xm?. This extension potentially
saves a large number of rules in cases where sev-
eral dependents are actually adjuncts, some kinds of
modifiers.3
3.2 The Decomposed Categories
In practice, atomic morpho-syntactic categories are
often too coarse for morphological description but
too refined for convenient description of syntactic
frames. A practical description requires a more ex-
pressive and flexible formalism.
In our new rule formalism, each morpho-syntactic
category X is viewed as a combination of a morpho-
logical category M (including the information on
the lexical form of the word) and a syntactic cate-
gory S. The morphological category M is a string
of orthographical and morphological feature labels
while S is an atomic category label.
The morphological category M0 and the syntactic
category S0 are specified for the head of each de-
pendency rule. Together, they specify the morpho-
syntactic category (M0, S0). In contrast, the rule
specifies only the syntactic categories Sp, . . . , S?1,
3Optional dependents may be a worthwhile extension even
in descriptions that treat the modified word as a complement of
a modifier.
111
and S1, . . . , Sm of the dependent words and thus
delegates the selection of the morphological cate-
gories to the respective rules of the dependent words.
The categories Sp, . . . , S?1, and S1, . . . , Sm may
again be marked optional with the question mark.
The rules are separated according to the direction
of the head dependency. Rules (10), (11) and (12)
attach the head to the right, to the left, and in any di-
rection, respectively. In addition, the syntactic cate-
gory of the root is specified with a rule of the form
(13).
? S0(Sp, . . . , S?1,*[M0], S1, . . . , Sm), (10)
? S0(Sp, . . . , S?1,*[M0], S1, . . . , Sm), (11)
S0(Sp, . . . , S?1,*[M0], S1, . . . , Sm), (12)
*(S0). (13)
The interpretations of rules (10) - (12) are similar to
rule (9), but the rules are lexicalized and directed.
The feature string M0 ? (??%?? ? ??)?? defines
the relevant head word forms using the features pro-
vided by Morph. The percent symbol (%) stands for
the unspecified part of the lexical base form.
The use of the extended rule formalism is illus-
trated in Table 3. According to the rules in the table,
a phrase headed by preposition by has three uses:
an adjunctive preposition (P), the complement of a
phrasal verb (by), or the agent of a passive verb (AG).
Note that the last two uses correspond to a fully lexi-
calized rule where the morphological category spec-
ifies the lexeme. The fourth rule illustrates how mor-
phological features are combined in N NOM SG and
then partly propagated to the atomic name of the
syntactic category.
Table 3: Extended Gaifman rules
1 P (*[% PREP], PC) % prepos.
2 by (*[b y PREP], PC) % phrasal
3 AG (*[b y PREP], PC) % agent
4 sgS (D?, M?, *[% N NOM SG], M?) % noun
3.3 Making a Gaifman Grammar Robust
Dependency syntax describes complete trees where
each node is described by one of the dependency
rules. Sometimes, however, no complete tree for an
input is induced by the linguistically motivated de-
pendency rules. In these cases, only tree fragments
can be motivated by the linguistic knowledge. To
glue the fragments together, we interpret the roots
of fragments as linear successors ? thus dependents
? for the word that immediately precedes the frag-
ment.
The link to a linear successor is indicated with a
special category ++ having a default rule ++(*). Since
any word can act as a root of a fragment, every word
is provided with this potential category. In addi-
tion, there is, for every rule (12), an automatic rule
++(Sp, . . . , S?1,*[M ], S1, . . . , Sm) that allows the
roots of the fragments to have the corresponding de-
pendents. Similar automatic rules are defined for the
directed rules.
The category ++ is used to indicate dependent
words that do not have any linguistically motivated
syntactic function. The root rule *(++) states that
this special category can act as the root of the whole
dependency tree. In addition to the root function ex-
pressed by that rule, an optional dependent ++? is
appended to the end of every dependency rule. This
connects fragments to their left contexts.
With the above extensions, all sentences will have
at least one complete tree as a parse. A parse with
some dependents of the type ++ are linguistically in-
ferior to parses that do not have such dependents or
have fewer of them. Removing such inferior analy-
ses from the output of the parser is proposed in Sec-
tion 4.
3.4 The Formal Semantics of the Interface
Let there be r dependency rules. For each rule i,
i ? {1, ..., r} of type (10), let
Fi = M0, (14)
Gi = S?1\ . . . Sp\ S0> /Sm.../S1, (15)
where S?1\, . . . , Sp\, S0>, /Sm, . . . , /S1 ? ?. For
each rule of type (11), S0> in (15) is replaced with
<S0. Rules with optional dependents are expanded
into subrules, and every undirected rule (12) splits
into two directed subrules.
In (16), Iface is a finite-state relation that injects
dependency brackets to the parses according to the
112
dependency rules.
Iface = Intro ? Chk, (16)
Intro = (Id(????)(????)Id(#))?, (17)
Chk = Proj1(Match ? Rules), (18)
Rules = Id (?ri=1FiGi#)? . (19)
Match = (Id(??) Mid Id(??) Tag? Id(#))? (20)
Mid = Id(?) ? (???%), (21)
Tag = Id(?) ? (???). (22)
Iface is the composition of relations Intro and Chk.
Relation Intro inserts dependency brackets between
the morphological analysis of each token and the fol-
lowing token boundary. Relation Chk verifies that
the inserted brackets are supported by dependency
rules that are represented by relation Rules.
In order to allow generalizations in the specifi-
cation of morphological categories, the relation In-
tro does not match dependency rules directly, but
through a filter. This filter, Match, optionally re-
places the middle part of each lexeme with % and ar-
bitrary morphological feature labels with the empty
string.
In addition to the dependency rules, we need to
define the semantics of the root rules. Let H be the
set of the categories having a root rule. The category
of the root word will be indicated in the dependency
bracketing as an unmatched bracket. It is checked by
relation Root = Id(H#) that replaces Root = Id(#)
in the composition formulas (1) .
3.5 An Efficient Implementation
The definition of Iface gives rise to a naive parser
implementation that is based on the formula
Parses(x) = MIx ? Chk ? Synn?1, (23)
MIx = Id(x) ?Morph ? Intro. (24)
The naive implementation is inefficient in practice.
The main efficiency problem is that the state com-
plexity of relation Chk can be exponential to the
number of rules. To avoid this, we replace it with
Chkx, a restriction of Chk. This restriction is com-
puted lazily when the input is known.
Parses(x) = MIx ? Chkx ? Synn?1, (25)
Chkx = Proj1(Matchx?Rules) (26)
Matchx = Proj2(MIx) ?Match. (27)
In this improved method, the application of Iface de-
mands only linear space according to the number of
rules. This method is also fast to apply to the input,
as far as the morphology-syntax interface is con-
cerned. Meanwhile, one efficient implementation of
Synn?1 is already provided in (Yli-Jyra?, 2012).
4 The Most Specific Parse
The parsing method of (Yli-Jyra?, 2012) builds the
parse forest efficiently using several transducers,
but there is no guarantee that the whole set of
parses could be extracted efficiently from the com-
pact representation constructed during the recogni-
tion phase. We will now assume, however, that
the number of parses is, in practice, substantially
smaller than in the theoretically possible worst case.
Moreover, it is even more important to assume that
the set of parses is compactly packed into a finite au-
tomaton. These two assumptions let us proceed by
refining the parse forest without using weights such
as in (Yli-Jyra?, 2012).
In the following, we restrict the parse forest to
those parses that have the smallest number of ?linear
successor? dependencies (++). The number of such
dependencies is compared with a finite-state relation
Cp ? (??{#})??(??{#})? constructed as follows:
?? = ?? {++>}, (28)
Cp = Mapi?(Id(++>?)(??++>)+)?Map?1i , (29)
Mapi = (Id(++>) ? (????))?. (30)
In practice, the reduction of the parse forest is pos-
sible only if the parse forest Proj2(Parses(x)) is rec-
ognized by a sufficiently small finite-state automa-
ton that can then be operated in Formula (33). The
parses that minimize the number of ?linear succes-
sor? dependencies are obtained as the output of the
relation Parses?(x).
Parses?(x) = MIx ? Chkx ? Tx,1, (31)
Tx,0 = Proj2(Parses(x)), (32)
Tx,1 = Tx,0 ? Proj2(Tx,0 ? Cp ? Tx,0). (33)
This restriction technique could be repeatedly ap-
plied to further levels of specificity. For example,
lexically motivated complements could be preferred
over adjuncts and other grammatically possible de-
pendents.
113
5 Evaluation and Discussion
5.1 Elegance
We have retained most of the elegancy in the
contracting finite-state dependency parser (Yli-Jyra?,
2012). The changes introduced in this paper are
modular and implementable with standard opera-
tions on finite-state transducers.
Our refined design for a parser can be imple-
mented largely in similar lines as the general ap-
proach (Yli-Jyra?, 2012) up to the point when the
parses are extracted from the compact parse forest.
Parsing by arc contractions is closely related
to the idea of reductions with restarting automata
(Pla?tek et al., 2003).
5.2 Coverage
The representation of the parses can be extended to
handle word-internal token boundaries, which facil-
itates the adequate treatment of agglutinative lan-
guages, cf. (Oflazer, 2003).
The limit for nested brackets is based on the psy-
cholinguistic reality (Miller, 1956; Kornai and Tuza,
1992) and the observed tendency for short depen-
dencies (Lin, 1995; Eisner and Smith, 2005) in nat-
ural language.
The same general design can be used to produce
non-projective dependency analyses as required by
many European languages. The crossing dependen-
cies can be assigned to two or more planes as sug-
gested in (Yli-Jyra?, 2012). 2-planar bracketing al-
ready achieves very high recall in practice (Go?mez-
Rodr??guez and Nivre, 2010).
5.3 Ambiguity Management
Oflazer (2003) uses the lenient composition opera-
tion to compute the number of bottom-up fragments
in incomplete parses. The current solution improves
above this by supporting gapped fragments and un-
restricted counting of the graph components.
Like in another extended finite-state approach
(Oflazer, 2003), the ambiguity in the output of our
parsing method can be reduced by removing parses
with high total link length and by applying filters
that enforce barrier constraints to the dependency
links.
5.4 Computational Complexity
Thanks to dynamically applied finite-state opera-
tions and the representation of feature combinations
as strings rather than regular languages, the depen-
dency rules can be compiled quickly into the trans-
ducers used by the parser. For example, the actual
specifications of dependency rules are now com-
piled into a linear-size finite-state transducer, Chk.
The proposed implementation for the morphology-
syntax interface is, thus, a significant improvement
in comparison to the common approach that com-
piles and combines replacement rules into a single
transducer where the morphological conditions of
the rules are potentially mixed in a combinatorial
manner.
Although we have started to write an experimental
grammar, we do not exactly know how many rules
a mature grammar will contain. Lexicalization of
the rules will increase the number of rules signifi-
cantly. The number of syntactic categories will in-
crease even more if complements are lexicalized.
5.5 Robustness
In case the grammar does not fully disambiguate or
build a complete dependency structure, the parser
should be able to build and produce a partial anal-
ysis. (In interactive treebanking, it would be useful
if an additional knowledge source, e.g. a human, can
be used to provide additional information to help the
parser carry on the analysis to a complete structure.)
The current grammar system indeed assumes that
it can build complete trees for all input sentences.
This assumption is typical for all generative gram-
mars, but seems to contradict the requirement of ro-
bustness. To support robust parsing, we have now
proposed a simple technique where partial analyses
are connected into a tree with the ?linear succes-
sor? links. The designed parser tries its best to avoid
these underspecific links, but uses the smallest pos-
sible number of them to connect the partial analyses
into a tree if more grammatical parses are not avail-
able.
5.6 Future Work
Although Oflazer (2003) does not report significant
problems with long sentences, it may be difficult to
construct a single automaton for the parse forest of a
114
sentence that contains many words. In the future,
a more efficient method for finding the most spe-
cific parse from the forest can be worked out us-
ing weighted finite-state automata. Such a method
would combine the approaches of the companion pa-
per (Yli-Jyra?, 2012) and the current paper.
It seems interesting to study further how the speci-
ficity reasoning and statistically learned weights
could complement each other in order to find the
best analyses. Moreover, the parser can be modified
in such a way that debugging information is pro-
duced. This could be very useful, especially when
learning contractions that handle the crossing depen-
dencies of non-projective trees.
A dependency parser should enable the building
of multiple types of analyses, e.g. to account for
syntactic and semantic dependencies. Also adding
more structure to the syntactic categories could be
useful.
6 Conclusions
The current theoretical work paves the way for a full
parser implementation. The parser should be able to
cope with large grammars to enable efficient devel-
opment, testing and application cycles.
The current work has sketched an expressive and
compact formalism and its efficient implementation
for the morphology-syntax interface of the contract-
ing dependency parser. In addition, the work has
elaborated strategies that help to make the grammar
more robust without sacrificing the optimal speci-
ficity of the analysis.
Acknowledgments
The research has received funding from the
Academy of Finland under the grant agreement #
128536 and the FIN-CLARIN project, and from the
European Commission?s 7th Framework Program
under the grant agreement # 238405 (CLARA).
References
