Cond iL ioned Un i f i caL iou  fo r  Natura l  l , an~uage Process inp ,  
A\]\]STV~ACT 
This paper  prescnLs what wc c.all a condiLiol'md unif ication, a 
r'm'w meLhod of unificatiol'~ for processing natura l  languages. 
The key idea is to annotate  Lhe pat terns  wiLh a cerLcdn sort  
of condi t ions,  so that  they car ry  abundant  inforrnation. '\]'his 
met.bed t .ransmits inforrnaLion frorn one pattern to another  
more  efl'icienLly Lhan proecdurc  aLLachmenLs, in which 
i n fo rmat ion  cortLa incd in the procedure  is embcddcd in the  
progranl  ra ther  Lhan dirccl./y aLLachcd Lo paLL(ms Coupled 
wi l t  techn iques  in for rna l  l inguist ics> i \ ] \ ]orcovcr ,  cond i t io r led  
unif icat ion serves  most. types  o1" opcrat ions  for natlu'ai 
\]ar/guage processil'q~,. 
KSiti f/asida 
\] ' \] \]ecLroLechll ica\[ 1, be' A.ory 
Ul\] lczorlo I } 4, 7~aktlra MtlFa, Niibari-Gurl, 
Ibaraki,  \[tOb Japan 
(\[3) pt l t_t l lS psrl nrnb(prcsonL,  P, N) : 
notAlrd ~'-tng(P, N)  
l~ut_Lns, psn nl:nl)(T, l", N) : not_pres(T) 
noL_3rd sng( ls t . ,  ,N). not  p res (past )  
not_~rd~'-;ng(;~nd, N)  not pres(past4~a' r t l c lp \ ]e  ) 
r lotA/rd, sr~g(,'Wd, p lu ra l )  not pres(basc). 
1. I n t roduct ion  
A currcr 'd ,  ma jor  t.rcrY.t of naturu l  la~/guage process ing  is 
ehara.cterized by Lhc overa l l  use o\[ un i f i ca t ion  (Sttiebc~r 
(198'l), Kay (1985), Proudir:~ and Pollard (1,985), Perc ira 
(198b),  Sh icbcr  (1985) ,  e tc )  ref lecLing lhe recent  deve lop  
mer i t s  in nonLra .ns formaL Jona l  l ingu is t i c  \ [o rmal i s rns ,  such  as 
Lexica l  FuncUona l  Grammar  (} l rcsnan (198E)), Genera l i zcd  
Phrase  St.r'tJcl.ur( ( \ ] ra rnrnar  (GPS(\]) (Gazdar ,  Klein, Pu lh lm 
and Sag (I 985)),  i I cad Grammar  (Pol}ard (19f1,1)), and  t Icad-  
l ) r iven Phrase  St ructure  Grammar  (l IPS(;) (Pc \ ] la rd  
(1985a.,b)) .  These  fo rmal i sn ls  d i spense  wiLt ,qlobal opcra -  
Lioits sueh as t.ransfornlaLion, alld i ns tead  cxp!o i t  h~cal 
operat ions  each C'Ollf'lrled wttJ/i\[l a local t ree  Such local 
operat ions  ar'c forunulatcd in Lcrms of uni~caLion 
\ ] Iowevcr ,  Lhe ord inary  un i f i ca t ion  as in P ro log  is 
insuff icient,  seeu rrorn both scientif ic (here, alias liriguJsl,ic) 
and cngin( . 'er ing poilfl'.? of vicw '\['he F, robh-'trl is that  p , t  
tc\]~\[\]s Lo bc tl\[li(ie({ wiL\]l each  o ther  lack the  cape.c i ty  rot  car -  
ry ing  i r f forrnaLion 
In Lhis papcr  we \[)rcscnl a new mcLhod of unificaLion 
which we (call cond i t ioned  un i f i ca t ion .  The essence  of the 
method is t.o deal wit.h paLLcrns aimoLated by se ine sort  of 
condit, ioils. These  eondiLioi<ls are so cortsl, raincd /-Is Lo 'oe 
c f f i c i cnt ly  operated  on, and  yet  to be ab le  to car ry  r i ch  
enough i n fo rmaL ion  t.o caDLure l ingu is t i c  gcnera l i za t ions .  
2. The  Prob lem 
Ordinary patterns  as it/ Pr(;h)g Is.el< cxprcssivc power ,  
t)esatlSC var\[ablcs theFcirl arc Sil)i\[)ly il\](iClCl"tlliltdt(7 alld 
Ihtis car'ry almost no i r f fqrrna l ion 'l 'hercforc, stie}l pa lL (ms 
aud unif icat ion among thcm arc msuff ie i0nt for' captur lng 
t\]le {~,i<'al/l rYlat ic al <!,>erm 'al ixat ior~ and tim process:n~> 
ef f i c i (ncy .  \ ] , I t  us look a.t some c:<amph.~s be low A ~,,l'anl 
matical catc?>ory is assumed Lo be it llst of features A 
feature consisLs of a feature nalnc and a w~hic, and 
rcprcscnLcd as a t.cmn like tt~rn.e (vat,z(). 
'\['hc \ ]cx ica l  entry of Eng l i sh  vcrb  p'u,t, for ins tance ,  can  
not. be descr ibed  as a I ' ro loc  patLcrn ,  bi l l  needs  some arlllO- 
Lat ion ( i .c . ,p~zt Im.s~)s?t.~zmS(T, P, N)) as in (1 )  
(1) k:xicorl(puL, I tensc('I'), p(msorl(\]')> number(N) I )  : 
put_Lns_ psn nrnb(T, P, N) 
}let(?, fcaLLIICS ol incr Lhan ten, se., perso?t, and ?lattnher arc 
omitLed, arm predicate p~ztmtm.spsTt~z?n.b is dcfinc.d c,s in 
(2)  
For  a biL morc COIT/I)I i:aLcd ins tance ,  conmdcr  the rela-  
t ionsh ip  between a synLacLic  gap  and  iLs filler. In GPSG, 
IIPSC, cte . ,  tiffs re la t ionsh ip  is; captured  in te rms of the 
SI,ASI\[ fea/ .urc,  wh ich  reprcscnts gaps  in the category  of \] 
U~.i~tk is craz U, for cxamplc,  thc SI,ASII feature is spccif lcd 
as \[NI j\] l ler 'e SI,ASI{ is assumed to take  as its wdue a l i s t  of 
ca tcgorncs .  SLaLcd below is a s impl i l3cd pr inc ip le  about  the  
d is t i ' ibut ion  of th is  featqrc  in I.yptca\] cascs  
(3) lu a local  tr'ec, Lhc r l lot l ;cr catcgor /s  S\],ASI\] 
tea.Lure is obl.aJncd by coneatcr~at i r ,  g from h.fi\[. Lo 
rip, ht the S I,ASII fcat,wcs of hey de.,.ightcrs 
In order  to describe: this pr inciple,  s('nnetlting :uorc than a 
nlerc pat t.crn ts lcquir(x\]  again: 
(i) IocalJr'cc.(lslc, sh(X)\], Ismsh(?)l, Islash(Z)\])- 
append(Y, Z, X) 
l 'eaturcs othcr thanSI ,AS}l  arc omit ted herc. 
The so called procedure a l tachmcnts  is the most coln- 
rnon way or conllflclncntJnp, the \])oor clcscriplivc capacM.y or 
ord inary  pat terns  \["or i ns tance ,  you  may regard  Lhc bod ies  
of \ ]h)rn e laus(s  (1) and  (4) as at la,_hed procedures  
The dr 'awbacl< of procedure  atLachr~lcn l  is ut the fac t  
t.hnt the ouly way of us ing Lhc proccc lurcs  Is to execute  
thorn I"or t.his reason, proecdur,}s arc Irmrcly embedded lu 
programs,  rcAhcr  than  at . lath(x\ ]  to those  paLterr ls  which 
th(sc  itrotu'ams operate on The irtforrnaLion which 
\[)ro((durcs cantain car/rx~t {U.'nera\]\]y be I~.',rricd aFOlllld 
a( ross  scvc ;a /  par t  ial s\[rtlC\[ tlI( s c i \ ]ch Of which it pFoocc \ ]arc  
d i rcc l ly  operates on, bccausc> oncc a procc( lurc is cxc 
cnt.td, the in forms. l ion  whkh it c.ontainc:d is palq ia l ly  lost  
For ins tance ,  when Icx ica l  ent ry  (1) is cxploiLecl, 
p~ztJ.n.s pstt.n;/m,6(?', I), /\i) is cxecut.cd and 7' and /~ arc 
il~stanliatcd Lo be preset~.t and Ist, icsp(cLivc\[y 'l'h'ds Ic\[L 
bchh~d is the informaLion abotlL the other ways Lo instan- 
LiaLc those wwiablcs. 
Actual procedure attaclu'ncrd.s musL be arr-ar<e, ed so 
that infornlat on shouhl not be it)st whelt  p rocedures  arc 
cxccutcd Freeze of Prolog (Colmcraucr  (1982)), for 
i ns tanc / ,  is a mcans  of t ins  arr~ingerncnt. \]\]y exc(tl l . i \[\]g 
f reeze(V ,  "~), atomic  fo rmula  ~ is f rozen;  i.c , the exccuLlon 
of '~  is >-uspcnded unt i l  w~riable X is ins tant ta t .cd  \ ] f '?  con-  
tams .'(, thc l ' c fo rc ,  }lop(ful ly uot. so rnuch  lrtforrnat.iol~ is test. 
whcc  ? is cxecuLed 
Ncvc . r thc less ,  f reeze  is p rob lemat ic  in two rcspt ( ts  
Virsk, i r Jo rn \ ]a t ion  cart stil l be lost  when the f rozen  pro-- 
ccdtll'CS LIFe cxccnted. Seeond, too nltlCh illforrllatiol3 cat\] 
be accumulatcd  whilc several procedures arc frozen Sup 
pose,  for i t lst .ance, thaL f reeze IX, t~tet~ber(.Y, \[a, 6 })) and 
fr<,t~.~<~. (r ,  ,~.',~,.~.,'(}'. I~'.~ I)) have bccn execut, cd '\['herr, X 
and Y can be ulfif\]cd with each other witt~ouL awaken ing  
ciLbcr procedure.  In that  (asc, Lho iifforn/at, ion that X may 
bc t) is redundant  bctwccn Lhc I.wo proccdures,  and Litc 
other part or irlfornmLion those Droecdtlres contain is Ill(Of\]" 
sistcitL What one might hope here is \[o Jrlstitntiatc )( (and 
Y) to be b If we had cxect i tcd f reeze(Y ,  member (Y ,  I t ,  
cL ) i r i s tcad  of f reeze  (Y, rn .ernber (Y ,  Ib, c I), computat iona l  
85 
resources  would be wasted  as the  pr i ce  for  a wrong process -  
int .  
A f ter  all, it is up to a programmer  to Lake a de l iberate  
care  so that i n fo rmat ion  shou ld  t)e e f f ic ient ly  t ransmi t ted  
across pat terns  This causes sewra l  problems interwoven 
with one another .  F i rs t ,  s ince  those  programs re f lec t  the 
in tended order  of execut ion ,  they  fad to s t ra ight fo rward ly  
capture  the nn i fo r rn i t Jes  captured  by ru les  or  p r inc ip les  
such  as (3). Accord ing ly ,  p rogramnnng takes  rnuch  labor'. 
Moreover ,  the resu l t ing  programs work  e f f ic ient ly  only a long 
t.he in i t ia l ly  inLer~ded order .  
3o Cond i t ioned  Un i f i ca t ion  
3.1 .  Cond i t ioned  Pat terns  
These  prob lems will be. se t t led  if we earl  a t tach  in forma-  
t ion to pat terns ,  ins tead  of a t tach ing  procedures  to pro -  
g rams l \ [e re  wc cons ider  that  such  in format ion  is car r ied  
by some cond i t ions  on var iab les  Var iab les  a re  then  
regarded as car ry ing  some in format ion  ra ther  than  remain: -  
ing s imply  indcterminatc  
I-}y a cond i t ioned  pa l . te rn  let. us re fer  to a pa i r  o \ [a  pat  
te rn  and  a cond i t ion  on the w~riables conta ined  in that  pat.- 
te rn .  l~'or s impl i c i ty ,  assume LhaL the  cond i t ion  of a condi -  
t ioned  pat tern  cons is ts  of a tomic  fo rmulas  of P ro /og  whose  
argument  pos i t ions  are  filled with var iab les  appear ing  m tile 
pattx. 'rn, and  that  the  pre(hcates  head ing  those  a tomic  for 
mulas  are  defh~ed in l .erms of Horn  c lauses .  For  ins tance ,  
we would hkc  to regard  the whole  tb ing  in ( \[)  or  (4) as a con- 
d J t ioncd  pattern.  
? 3 .2 .  Modular  Cond i t ions  
The cond i t ions  in cond i t ioned  pat terns  must  not  be exe-  
cuted ,  or the conta ined  in format ion  would  be par t ia l l y  lost  
Tile cond i t ions  have  to be somehow jo ined  when cond i t ioned  
pat terns  are  uni f ied,  so t.hat the  in format ion  they  conta in  
shou ld  be t ransmi t ted  proper ly  in tile sense  that  the  resu l t -  
ing condi t . ion is equ iva lent  \[o the  Logical con junct ion  of tam 
input  rend i t ions  and  conta ins  nciCrmr rcdnndant  nor  ineon  
s i s tent  in fo rmat ion .  We cal l  suet  a un i f i ca t ion  a cond i t ioned  
un i f i ca t ion  
A s imple  way to reduce  redundancy  and  incons is tency  
in a ('.ondiLion is to let  each  par t  of each  poss ib le  va lue of 
each  var iab le  be sLlb jcct  to at, most  one  const ra in t .  \],eL us  
fo rmulate  th is  below. We say  that  a cond i t ion  is 
super f i c ia l l y  modu lar ,  when no var iab le  appears  twice  in 
that  rend i t ion  For  ins tance ,  (Sa) is a super f i c ia l l y  modu lar  
cond i t ion ,  whereas  (Sb,c)  a re  not. (Cond i t ions  are  some.  
t imes  wr' itterr as  l i s ts  of a tomic  fo r rnu las  ) 
(',9 a \[a(X, Y), b(Z), a(U, v)\] 
b. l a(X, Y), b(Y)\] 
e \ [a (X ,Y ,X) \ ]  
l , 'u r ther  we say that  a cond i t ion  ~I' is modu lar ,  when all the 
re levant  rend i t ions  are  super f i c ia l l y  modu lar ,  l Iere ,  the 
re levant ,  cond i t ions  are  {I} and  the bod ies  of Horn  c lauses  
reached by  descend ing  a long  the def in i t ions  of the  pred i -  
cat .es appear ing  in ?. A pred icate  is sa id to be modu lar  
when its de f in i t ion  conta ins  only those  I io rn  c lauses  whose  
bod ies  a re  modu lar  cond i t ions .  A pred icate  is potent ia l l y  
modu lar  when it is equ iva lent  to some modu lar  p red icate  
A modu lar  cond i t ion  does  not. impose  two const ra in ts  
on any  one part.  of any  var iab le ,  and  thcrc fore  conta ins  ne> 
kher  redundancy  nor  ineons is tency ,  l te reaRer  we cons ider  
that  the  cond i t ion  m (.'very cond i t ioned  pat tern  shou ld  be 
modu lar .  
a .a .  l ' Jxpress ive Power  
Cond i t ioned  pat terns  can  car ry  r i ch  enough in forma-  
t ion for  captur ing  the  l ingu is t i c  genera l i ty .  Obvious ly ,  at 
86 
'st., they can descr ibe any finite set of f inite patterns.  \];'or 
i ns tance ,  ( I )  is regarded as a cond i t ioned  pat tern  with 
modular  condi t ion \[pztt_g'ms_pstt~q,r~zb (T, P, N)\].  Moreover,  
also some recurs ivc  pred icates  are  modu lar ,  as  is demon-  
strated below. 
(6) a appcnd(\ [ \ ] ,  Y, Y): 
append(\ [U I X\], Y, \[U I Z\]) : -  append(X, Y, Z). 
b subl ist( \ [ \ ] ,  Y). 
sub\]ist(\[U I<I, \[U I Y\]) : -  sublist(X, Y). 
subl Jst(X,  \[U IY \ ] ) : - sub l i s t (X ,  Y). 
Thus, (4) is also a cond i t ioned  pat tern .  
\ ] lowever ,  some recurs ive  pred icates  are  not  potent ia l l y  
modu lar .  They inc lude  reverse  ( the  b inary  pred ieate  wh ich  
is sa t i s f ied  i~r i ts two arguments  a re  the reversa ls  of each  
o i l ier ,  as  in reverse( \ [ to t ,  b \ ] ,  c ,  all, \ [d,  c , \ [ c t  b \ ] \ ] ) ) ,  .perm 
(Lbe b inary  pred icate  sat i s f ied  iff i ts a rguments  a rc  permu-  
tat, ions of each  o ther ,  as  i nperm( \ [ i ,  2, 3\], \[2, 1, 3\])), subset 
( the b inary  pred icate  wh ich  obta ins  iff the f i rs t  a rgument  is 
a subset  of the  second,  as  in s~zbset(\[d! b\] ,  to ,  b, c ,  all)), 
etc .  
New. ' r the less ,  t.his causes  no prob lem regard ing  natura l  
language proeess ing ,  because  potent ia l l y  inf in i te pat terns  
corne up on ly  out of features  such  as SLASt\[, wh ich  do not  
requ i re  those  non ruodu lar  p red icates .  
3.4 .  The Un i f ie r  
Shown below is a ' t race  of the cond i t ioned  un i f i ca t ion  
between cond i t ioned  pat ter 'us  (7) and  (8) (here  we use  the  
same notat ion  for  eond i t . ioned pat terns  as for  I Io rn  c lauses) ,  
where  the pred icates  there in  have  been def ied as  in (9). 
(The def in i t ions  of c0  and  e3  are  not  exp lo i ted . )  F i rs t ,  we 
un i fy  iX, )2 Z,  g/\] and  \[A, 7\], C, D\] with one  another  and  get. 
X-  A, Y : /3, Z = C, and W = D \]n the env i ronment  under  
lifts un i f i ca t ion ,  the two cond i t ions  are  concatenated, result- 
ing in \ [c0(X) ,  e I(Y, Z), e2(Z, W)\]. The major  task  of th is  
cond i t ioned  un i f i ca t ion  is to obta in  a modu lar  cond i t ion  
equ iva lent  to this  rmn- rnodu lar  cond i t io r l  This is tire job of 
funcl . ion ~tod~zlayi, ze. Mod~zla.~tze ra i l s  funct ion  ~;~ttegrctte, 
which r 'eLtlrns an  a tomic  fo rmula  equ iwr lent  Lo the  g ives  
cond i t ion .  The Lcrminat ior~ of a ?rtodulct,'ize or  an i r~fegrate  
is ind icated  by ~ preced ing  the  reLurn-wa luc ,  with the  
same amount  of indentat ion  as  the outset  of th is  funct ion -  
ra i l  was ind icated  w i tb  When an  {~ztegro, te ca l l s  a ~zodula~'- 
i ze ,  the a lphabet ic  ident i f ie r  of the  exp lo i ted  I lo rn  c lause  is 
ind icated  to the h.'ft hand side,  and  the tempora l  un i f i ca t ion  
to the  r ight -hand side.  A tomic  fo rmulas  made in integrate 
is wr i t ten  fo l lowing 4. Each  l Io rn  c lause  entered  into  the  
def in i t ion  is shown fol lowing % and g iven  an  a lphabet ic  
ident i f ie r  ind icatedto  the r ight -hand side.  
(7) IX, Y, Z, W\] :-- e0(X), el (Y, Z). 
(8) \[A, \]~, C, D\] : -  e2(C, D). 
(9) e*(0, \]). (a) 
e ~ (q, e)  (b) 
ca(l, P):-e:Xl ') .  (c) 
c~(e, 0). (d) 
modular i ze ( \ [e0(X) ,  c l (Y,  Z), c2(Z, W)\]) 
in tegrate( \ [e0(X)  \]
cO(X) 
in tegPate( \ [c l (Y ,  Z), e2(Z, W)\]) 
c4(Y, Z, W) 
(a) modu lar i ze ( \ [e2(1 ,  W)\]) Y = 0, Z = 1 
in tegrate( to2(1 '  W)\]) 
* eS(W) 
(c) rnodu lar i ze ( \ [e3(P) \ ] )  W = P 
in tegrate( \ [e3(P) \ ] )  
=~ e3(P)  
tea(p)\] 
c~(p) : -  ca(P). (0 
=:> eS(W) 
-~  \[c,~)(w)\] 
1' o4(o, :, w) :. ~:',~(w). (j) 
(b) n:odular:'zc(\[c2(2, W)i) ? :- q, '/, :~ 
i:,t.o~ra~,'.(Im<3(a W)\]) 
* cO(W) 
(d) nladularizc( l  I) w =.: o 
=-~ \[\] 
cS(0)  (k) 
=+ c6(W) 
> I cs(w)J 
" o,3(q, ~, w) : o6(w).  (I) 
=> c4(Y, Z, W) 
- > \[co(x) ,  <:4(< z , W) l 
We CaN refine Lhe progra\]'n o\[ "btt~.grcs, ta so that it should 
avoid ally predicaLe w}iose def iniL ion coiuLains only one l lo rn  
c lause .  For  ins tance ,  Lhe def iniL ion of cb  cons isLs  only o \ [ ( i )  
InsLead of (j), LhereR)re,  we may }rove cd(0 ,  1, P )  : c3(P )  
Also (1) can  bc  rep laced  by c 4 (0 ,  2> 0), based  on (k )  
We are  ab le  Lo work  out  r ' ccurs ivc  cond iL ions  f rom F, lvor; 
recursivc coI:dit.iolls, lVor example, considor how X and Z 
arc  uni f iod under" t, ha conclit,iol: (10), whore  ~rte'n~be.r is 
def ined  as in (1 1 )  
(10) \[n,e:nher(X, Y), o0(z)\] 
(11) n/cinber(A, IA I IJl). (a) 
member(A,  IC I i~i) : - i  ....... her(A, i t)  (b) 
The Lracc of this ulfif\]cat.k~n is showl~ b('\]:'w, whc's'c prcdica.l~' 
c 1 is rccurs ivc ly  (\]o/~ll/Cd based on Lhc i'(,ctlrsiv(! dcfillJLioH of 
77"~ (? 77}, t) I~, ?' 
modular i zc ( lmcmbcr (X ,  Y), cO(X)I) 
int.cgraLo(I member(X,  Y), cO(X)\]) 
, el(X, Y) 
(a) modu lar i ze ( \ [cO(A) \ ] )  X = A, V -. \[A Ill\] 
int.e<~';ratc (I c O(A)I) 
= > oO(A) 
=~ 1 <:)(A)\] 
1' c I(A, \[A I ~<J) :-- c0(A) 
(1)) n :odu lar i zc ( lmcn,bcr (A ,  11), c0(A) l )  X :: A, Y :: \ [ c ! i ; I  
Jnl.c<qral.e(\[ n le rnbcr (A ,  I~), cO(A)I) 
:~  el (A,  1~) 
: :> \ [c l (A ,  33)1 
1'ci(A, I c l t< l ) :  c~(A, 13). 
.... > c:(X, Y) 
:.~ \[o:(x, Y)I  
IL Js a job of in, tegra, te, Lo hand le  re ,curs ive de ,h iL ton .  The 
lasL g?l, te.g?,ts, te. above  recogn izes  Lhat. the f i rst  4m.tegrate, 
which is Lrying Lo (\]cNr/c c 1, was ca l led  wit.h the  same argu-  
ITlCrlI.S except ,  the var iab le  narnes, l l encc  t.he l as t  "inttegrctte 
s imply  reLul 'ns  c. I(A, H), because  t,hc conLent, or c l  is now 
bring worked ouL tlrldoY Lhc J'\]rsl. ~?ttegro.te arid thus  it is 
rednndanL  fol' t, he lasL {~tfegrate Lo \ [u rLhcr  examine  c 1. 
It is not. a \ ]ways  poss ib le  fro' the  above  uni f ier  t.~ uni fy 
paLL(2i"\[/s tlrl(\](~r roc. tlr'sivo Col\]d\[Liol/S \["or J//sLalloL', J\[ Cf/illIOL 
uni fy X wi th  )" under  \[appe~td.(X, Y, Z)\] ,  becal_tsc Lhe resu l t  
ing cond iL ion  is noL potsnL ia \ ] \ ]y  rnodu lar ,  l l owcver ,  such  a 
situaLiol'l CtOCS FioL seoln t.o occur Jn actual \[al:g:lagc proccss- 
ir:g. 
4. Conc lus io r i  
We have prc.'-~er, Led a new nle/hod a\[ umfieal ion, wh,ch 
wc cal l  o. coildiLior~c(\] tltti(loaLioli, Whcl'e paLLorils to be 
uniPlc(\] "'re annoLaked by a certain sort. of corldit.ions on lhe 
var iab les  wif ich octroi" ill those  patt.crn.<;. Theso cond iL ions  
are  so r 'est . r ic ted t.haL Lhey con la in  as  lit.Lie redundancy  a<'; 
poss ib le ,  and  d 'ms arc  a lways  assured  to be sat i s f iab le .  
This method has Lhe fo/h)wtng welcome character i s t i cs  
l"h'st, I.he \ ] )a t to rns  to bc uni f ied can  car ry  at)llllda\]'lL infos' 
mat. ion rcprcscnLcd  by t.he cond i t ions  han:,~in!,; on t.hClll The 
express ive  capac i ty  of Lhe,<?c ondiLion,s is sl:fl'Jc{en\[ for cap- 
t.uring \]JH~U, IIihLJ(: ~sCHCl'a\]i',,iOS ~ccor ld ,  such  i r f format. ion is 
cf rec l ivc ly  Ir'ansrnitLed, by h~t.egrat.\[n? the col~dil,ion.~ v;her, 
pat.'..crl:,<s o.ro unif'ied Unlike procedure aLLacl:ment.s, in thil~ 
COllne(:l ion, Ll/c infornGaLioi~-conveying <.'fficicl:cy of our  Colt 
dilioiued unif'icat.\[on is no{ afl 'c'(gcd by the direct . ion of t.i~c 
daLa.flow Therefore, O/ll" col'l(\]{lioned unifies.Lion is oo;rn- 
p le l / l y  r(ver'sJbk< and ',hns is \[n'on:ising its a Los\] for 
dcscril)h'T> <~{l'all/lllilrs fOF bo lh  SCllL(Hb':C compre l /ens io l :  s l id 
prochl(d toll 
Owing t.o Lhese cllar'act(!risLics, Otll condit ioned 
unif'caLian l)r'avh|es a now prog, ra.unniiug 1.1aradigtn foi  
I/illt/l'/tl lar/y,/lag(." \[)l'OCCSSil/lJ>, rcph~.cing proccd/1Fc  aLt, o.ctl- 
I3:ont.s which haw3 tradlLionally el2joyed i.\]lc Llbiq/lity Lhat. 
t.hcy do noL descrvc 
Rcfer ' cnees  
Brc.~nan, J ( cd)  (1,98~) Th, a Me~ztal ifeprese.?l, tat~.o~l, u f  
()rcv,>n?n:l./'/,ctz/, /fetc#./'~o?l.s, MI'P Press ,  C0.rnbFidFc , Mas- 
sa( htmeLt.s 
Co lnmraucr ,  A. (198g) I'roLog 11 \]fefere~a, ce Mc~.mt~.f.o.n.d 
77t, eoretical.  Model, I!',I{A CNRS \[163, Groupe d ' InLe l l igcnce  
Art i~c ic lh : ,  Univcrsit.L' dc  Marsei l le ,  Marsel le .  
(b :zdar ,  G ,  E. Klein, C, K. Pu{hlm, and  \] A %ag (198'0) Ca'e'Klr 
ercllized. \[-'h,rase St, ru, ct~zre. (,)'omzmct~', Hasil I~lackwcll, 
Oxford.  
Kay, M (1985) " \ ]bws ing  in \ ] "unct iona /  l \ ]n f fk :at ion  (h 'am.  
nlar ,"  Ncs, t~x.rat /,csm,g~zaga /J~s, rs'Otg, pp  251 278, C,,anl 
bri<t<e>e 1.Jldversi/y Press, Cambridge, \]'hl<q\]and 
lJereira, I", (;. N (198'o) "A SI.rllettlse-~harJrLt ~ \]&'pr'escnta- 
tiou for Unif\]caLiol! \[~ascd ( ;roml/ lar  J"orrua\]isi'ns,' 
I:~'occerecl,7\]7),(JS of  th.e. iT<'h'c/. All.Tt%czl, Mee?'i,?),\[\] o f the AssQcI,u, 
tioTi, fo r  O)Trtp7l.tcs.i;,io?),{?l \[,q,'n,g~zgstT,c& LJnlversity of Clu 
ca.go, (;hic~,fV), I l l inois. 
Po l la rd ,  C J (198,1) Ce~i.eral'i, zed /Jh,rq, me h'trizct~zre .O'q.~Y,. 
? m.ar, / lead (#'tl.~zT)wt.rs, cz~rl, Nahl.ra, f, Lmtg~x.u.ges, \])oc.'- 
1oral di.'-;sertat.ion, .<'gt.anford /.JlliVCrsiLv, SLalqford, Cai{ 
fo rn ia  
I 'o l lard,  (7 J. (198ha)  l,~cDzre N~te.~ mi. ttead-Drivcm. \]qu'cs,se 
~'~?'ttc~\[l/.'/'ck (,~Przt7%Tn, u.?', (\](?il{.(~l' for  I\]V: S i t ldy of l ,at lyt lagc 
and  \[n forI/Mtt iOlL 
Pollard, C <J (l{){~{)b) "\[qn'ase S\[.l'llcLtlFe ( \ ] ra lnmar ~4,1LhotlL 
Mot altl l( s," \]Troceeel.{'n.gs Of th,7 l 7)l/,rfh, Ig: eS, t (.'O U.:~ t
('n ~tfe're. "n, ce o'n, \]<'or?~csl /,zlU/~z'L<~'Zt, cs, I.Jtlivcr,'siLy of Lgouth 
ern California, Los Ar:gelc.s, Ca/i fort/is 
\ ] ) roudin,  I) and  C. J Po l la rd  (\]gfk)) "Pal'.<;ing l l cad Driven 
IJi/i<'as( St.iu.lct.Hro (b'alnn/ar," /5"oceeU.i?Ws of H~.e 2,'}rcl, 
A?t?ttDcd, Mc..r;f'/,'n.g of  :,h,e AS.S'OC?.a.~'/,O?Z fo r  CoT~tplx,~ci, tmor~z/. 
/ittgw, Tlslic.s, {JniversiLy of Ch icago,  Ch icago,  I l l inois. 
Shiebcr, S M (198,t) "The I)csi?n of a ( 'omputer  I,ar/guage 
for I,in,o::i:-;I.ic h:folrtw.Lion," /Xrsc~eel'i?tcj.~ cJf ti?:. 7Of, h, 
l?~,ter?m,~io?ta.t L?mfere~?.ce o'n. Co?n.pw.ta.tio?w*l \[mWu,3,s 
if.on, SLanfovd Ur~i,:ersiLy, Stratford, C.alJfornia 
Shiel>ci, S M (198b)  -b':-dn<q rrmlvict:<'>n t.o I';xlcnd \[Jarsillg 
AIForit.hlus for (7onlp\]cx-Feal.tlre-Based \] 'ornlal isms," 
lS"cceecli'n,<js ~f  th.e 23rcl Al),n, lm.1. Mee/b:Tt.q f)f tli,e. Assoczo, 
tzo?,., fn r  (.'e~?Aplztu, t iottat /,7,t~,gn.i, sti, cs, Umwn'sil.y o\[ Ch/ 
(:ago, (;llJca/;o, I l l inois  
87 
