Power fu l  ideas  in computat iona l  l inqu is t i cs  
Imp l i ca t ions  for  p rob lem ,solvinq, and educat ion  
Abst rac t  
Gerhard Fischer, Inst itut fuer Informatik 
Universitaet Stuttgart, West-Germany 
It is our firm belief that solving problems in 
the domain  of computat iona l  l inguistics (CL) 
can prov ide  a set of metaphors  or powerful 
ideas which are of great impor tance  to many 
f ie lds .  We have taught severa l  exper imenta l  
c lasses  to s tudents  from high schoo ls  and 
un ivers i t ies  and s major part of our work was 
centered around problems dealing with language. 
We have set up an exper imenta l  Language 
Laboratory  in which  the students  can explore 
existing computer programs, modify them, design 
new ones and implement them. The goal was that 
the student should gain a deeper understanding 
of language itself and that he/she should learn 
genera l  and t rans ferab le  prob lem solving 
skills. 
exerc i se  in pat tern  match ing  and symbol 
man ipu la t ion ,  where certain keywords trigger a 
few prestored answers. I t  may also serve as an 
example  for how l itt le machinery is necessary 
to create the i l lusion of understanding. 
\[n our in terd isc ip l inary  research  pro jec t  
(KLING eL el, 1977) we have tried to overcome 
these prob lems by providing opportunit ies for 
the s tudent  to exp lore  powerfu l  ideas in the 
context  of non-trivial problems and by showing 
that the computer  p rescence  can do much more 
for educat ion than improve the delivery system 
for curricula establ ished independently of it. 
I .  Introduction 
Prob lem so lv ing with the computer  for the 
non-computer  expert is slowly recognized as an 
impor tant  act iv i ty  in our educational system. 
It is done best in a project-or iented course in 
which  the student  learns to solve problems in 
d i f fe rent  domains .  In the past, act ivit ies of 
this sort have been centered around numerical 
p rob lems,  phys ics  prob lems and the s tandard 
computer  sc ience  prob lems (eg like writ ing a 
sorting procedure). 
2.  The s ta te  o f  the  ar t  
The relevance of problems from l inguistics has 
been ignored.  The reasons  for this fact are 
easy to explain: 
I) the  educat iona l  communi ty  in  the 
language-oriented f ie lds  has very l i t t le 
knowledge about  us ing a computer  to wr i te  
in teres t ing  programs to gain a deeper 
understanding of the problems in their domain 
2) the computer  exper ts  were  not fami l ia r  
with l inguistics 
3) the most commonly used programming 
l snguegee end eyetemo ere inadequate to  dea l  
with the data s t ruc tures  and dia log 
requ i rements  which are relevant for language 
processing 
4) new f ie lds  l ike art i f icial  intelligence, 
cogn i t ive  sc ience  end computat iona l  
llnguletlee were not widely known 
The level of ignorance  can best be seen by 
us ing  ELIZA as an example: many people thought 
that it was a program which would "understand" 
the contents of a dialog. It was not evident to 
them that ELIZA represents nothing more than an 
~. Coqn i t ive  Sc ience  and Proqrammin~ 
In recent  years the view has emerged that the 
language of computat ion  is the proper dialect 
to  descr ibe  bas ic  i ssues in psycho logy ,  
l ingu is t i cs  and educat ion .  Research  in 
Cogn i t ive  Sc ience  has demonst ra ted  that the 
phenomena sur round ing  computers  are deep and 
obscure ,  requ i r ing  much exper imentat ion .  
Cogn i t ive  Sc ience  theor ies  about problem 
so lv ing,  representat ion of knowledge and other 
cogn i t ive  ab i l i t i esprov ide  the foundation for 
our understanding of programming. 
We be l ieve  that the whole  enterpr i se  of 
p rogramming can be much better explained with 
concepts  from CL than with those from 
mathemat ics .  P rob lems in CL are o f ten  
i l l -de f ined ,  a lgor i thms are seldom given and 
programming is more a design task than it is s 
cod ing of a known a lgor i thm.  The prob lem 
formulat ion  phase is more  re levant  than the 
execut ion  of a Program and systems are needed 
to support  this phase of the problem solving 
process .  Success ive  fo rmulat ion  of programs 
serve aa s tepp ing  s tones  towards the goal of 
defining the specif icat ion of a problem. 
Humane have a good intuitive understanding of 
the prob lems in CL and they can do the things 
( l ike communicate  in natura l  language,  deal 
with vast amounts  of knowledge,  infer new 
knowledge from exit ing one) - even if they do 
not know how they do it. P rogramming can be 
unders tood  as an e f fo r t  to make our own 
knowledge exp l i c i t  and can prov ide  us with 
adequate  metaphors  to describe our own mental 
functions. 
111 
4. Oes iqn  of a Lanquaqe Laboratory  
The des ign  of learn ing  env i ronments  is an 
important goal for the educational  theorist and 
the teacher .  The computer as a new technology 
has c reated  a lmost  unl imited poss ib i l i t ies  to 
c reate  new and cha l leng ing  environments.  The 
Tur t le  wor ld  (PAPERT 1979) and the s imulat ion 
wor ld  of Sms l l t s lk  (KAY 1977) p rov ide  good 
models of what can be done. 
In our p ro jec t  we have set up an exper imenta l  
Language Laboratory  in which the students can 
explore  ex is t ing programs, modify them, dealgn 
new ones and implement them. We took great care 
in our design (by fo l low ing  the t rad i t ion  of  
the  LOGO pro je ts  as opposed to  CAI approaches)  
that  the students could work in an act ive  mode 
end deve lop  ideas  in  8 persona l  way (not  
l im i ted  by the  teachers  approach) .  Our teach ing  
s ty le  was not to p rov ide  answers  but the 
l earners  were  encouraged to  use  the i r  own 
language knowledge to f ind  e so lut ion.  The i r  
work had to rely on self mot ivat ion which seems 
a more reasonable goal in CL where the products 
(eg  poems,  horoscopes ,  quest ion /answer ing  
sys tems etc )  can be more i n te res t ing  and 
aesthet i ca l ly  p leas ing  then  a set  o f  numbers  
appearing as s resul t  in numerical mathematics. 
With our Language Laboratory  we wanted  to 
create  an env i ronment  in  wh ich  the  s tudent ' s  
task  i s  not  to  learn  a set  o f  fo rmal  ru les  (eg 
about the syntax of a programming language) ,  
but to g ive  them s wor ld  in which they  could 
deve lop  su f f i c ient  ins ide  into the  way they 
used language to a l low the t ranspos i t ion  of  
this self-knowledge into programs. 
The s tudents  were  exposed  to d i f fe rent  
fo rmal i sms  (pr imar i l y  to LOGO, but a lso to 
L ISP ,  ATNs, semant ic  networks ,  MICRO-PLANNER) 
and cou ld  exp lore  the  range  o f  poss ib le  mode ls  
wh ich  cou ld  be imp lemented  in  a cogn i t ive ly  
e f f i c ient  way w i th  these  fo rmal i sms .  We t r ied  
to engage them in problems of moderate 
complex i ty  ( the  s tudents  ware no researchern 
working fu l l - t ime in a project) and we crested 
micro-vers lons of programs by ommltlng feoturea 
wh ich  were not essent ia l  for a conceptua l  
understanding.  
5.~ P pw~rful ~dees  
There is  l i t t le  doubt  that  we w i l l  be unab le  to  
so lve  the  prob lems o f  coverage  in  our  schoo l  
and un ivers i ty  sub jec ts  and o f  p red ic t ing  whet  
spec i f i c  knowledge  our  s tudents  w i l l  need in  
th i r ty  or fo r ty  years. Despite the fact  that we 
would  l i ke  to  have more empi r i ca l  ev idence  that  
p rob lem so lv ing  sk i l l s  can be taught ,  we have 
l i t t le  cho ice ,  because  we don't have any rea l  
a l te rnat ive  ( fo r  a deta i led  d i scuss ion  o f  th i s  
i ssue ,  Bee SIMON 1978) .  
Cogn i t ive  Sc ience  and Art i f ic ia l  Inte l l igence 
have cont r ibuted  to our unders tand ing  of 
prob lem so lv ing  processes  and we be l ieve  that  
genera l  p rob lem so lv ing  sk i l l s ,  c rys ta l l i zed  as 
power fu l  ideas ,  can be taught  exp l i c i t l y  in  the  
context  o f  a r i ch  env i ronment  o f  problems. The 
main  goa l  o f  th i s  paper  i s  to  show that  CL 
provides this r ich context (which i f  i t  is not 
super io r  than  mathemat ics ,  s t  leas t  complements  
mathemat ics ) .  
Power fu l  ideas  are  nuggets  o f  knowledge ,  wh ich  
ere  un iversa l ly  use fu l ,  wh ich  appear  over  and 
over  in  d i f fe rent  d i sc ip l ines  and wh ich  can be 
connected  In  ? natura l  and i l l uminat ing  way 
with a large complex  o f  o ther  ideas. 
One example  o f  e power fu l  ides  i s  the  
heur i s t i c :  "d iv ide  and conquer" .  I t  appears  to  
be an a lmost  un iversa l  t ru th ,  but  how i t  i a  
done  in  the  context  o f  a concrete  prob lem 
s i tuat ion  is fa r  f rom being t r iv ia l .  Many of 
the typ ica l  problems ( l i ke  wr i t ing  a program to 
compute  Factor ia l ,  to  sor t  ? se t  o f  ob jec ts  or  
to  so lve  e t r iv ia l  puzz le )  a re  too  s imp le ,  so 
there ia l l t t le  need to use th i s  heur i s t i c .  
Furthermore many t rad i t iona l  programming 
systems are  not  bu i ld  fo r  (o r  do not  even 
suppor t )  th i s  p rob lem so lv ing  approach ,  whereas  
in  our  work  the  heur i s t i c  took  on a concrete  
mean ing  and was the  on ly  success fu l  way to  
so lve  a prob lem.  
In  the  fo l low ing  par ts  o r  th i s  sect ion  we 
br ie f ly  descr ibe  a sa t  o r  power fu l  ideas  wh ich  
can be exp lored  in  the  context  o f  rea l i s t i c  
p rob lems and research  areas  in  CL ( the  pro jec ts  
a re  fu l l y  descr ibed  in  BOECKER/FISCHER, 1978) :  
11 d i f fe rence  between syntax  end semant ic  (eg 
in  the  context  o f  wr i t ing  a program to  generate  
poet ry ,  in  so lv ing  word prob lems in  a lgebra)  
2)  ru le  sys tems (s sor t  o f  p roduct ion  sys tems;  
they  ere  use fu l  fo r  the  organ iss t ion  o f  
p rograms to  der ive  the  p lu ra l  fo rm o f  an 
Eng l i sh  noun g iven  the  s ingu lar ,  to  con jugate  
F rench  verbs ,  to  character i ze  the  ru les  and 
heur i s t i cs  in  a game or  to  imp lement  the  
eva luat ion  procedure  o f  L ISP)  
31 des ign  and Imp lementat ion  o f  s min i - language 
( th i s  s i l o .as  us to  descr ibe  s p rob lem in  terms 
wh ich  ere  character i s t i c  fo r  the  prob lem 
ins tead  o f  be ing  fo rced  to  use e g iven  genera l  
purpose  programming language;  examples  e re :  
p roduct ion  sys tems,  pat tern  matcher ,  e tc ) ;  in  
programming, i t  is a natura l  task to design 
your  own representat iona l  sys tem whereas  in  
mathemat ics  peop le  most ly  use the  
representat iona l  sys tem g iven  to  them 
4) exper imentat ion  w i th  a w ide  var ie ty  of  
d i f fe rent  grsmmewa (eg to  generate  and ana lyse  
a lgebra ic  express ions ;  to  t rans form arab ic  
112 
numera ls  into roman ones and vice versa; to 
exp lo re  t rans i t ion  networks  and augmented  
t rans i t ion  networks  in dea l ing  with natural  
language) 
5) knowledge  representat ion :  eg to der ive 
impl ic i t  knowledge  and to study the impact of 
p rocess ing  at read-time (antecendent theorems) 
versus quest ion-t ime (consequent theorems) in a 
system which dealt with fami ly re la t ions  (a 
system of this sort can be cont ras ted  with 
EL IZA or a program to cast horoscopes) ;  the 
fo l low ing  d iagram i l lus t ra tes  how ? implicit 
re la t ionsh ips  (---) can be der ived  from 3 
explicit ones within a family of four persons: 
', ~ /  ~,~ " \  |1 ", 
\ , \~,  "~-~ "-- l I"o ' 
6) exp lo ra t ion  of s ta t i s t i ca l  p roper t ies  of 
languages  in the context of s wide variety of 
different language games (eg like designing the 
d i s t r ibut ion  of a Scrabb le  game, information 
content of vowels in different languages etc) 
7) genera l  computat iona l  ideas (eg like 
backt rack ing ,  which is encounterd  in parsing 
non-determin is tc  g rammars  and which could be 
appl ied  to pattern matching and tree like data 
s t ructures )  
6. Pattern Match inq-  an example  fo r  the.deslqn 
9nd implementation of s minir lsnquaqe 
A match ing capabil ity can be a key element for 
many prob lem so lv ing  tasks invo lv ing  the 
computer  to make otherwise large, complicated 
efforts reachable. The following powerful ideas 
can be invest igated  in the context  of this 
pro jec t :  
I) inc rementa l  des ign:  we can start with s 
pat te rn  marcher  wh ich  is bas ic ly  en EQUAL 
pred icate .  The next steps could be: a 
membership predicate, s pattern with slots of 
fixed size, s pattern with slots of arbitrary 
size (which c reates  the need for back-up), 
the possib i l ty  for simultanous assignment of 
matched  e lements  to pat te rn  variables, the 
res t r i c t ion  of matching by using predicates 
etc 
Z) the prob lem is i l l -de f ineds  the 
spec i f i ca t ion  of the pattern marcher should 
be der ived from the needs of us ing it to 
s impl i fy  p rob lem so lv ing  tasks. A par t ia l  
implementation can be an important help for a 
fur ther  spec i f i ca t ion  or for a revision of 
a l ready ex is t ing  parts ,  ie the prob lem 
formula t ion  is an impor tant  part of the 
problem solving process 
3) de f in i t ion  of a new language layer: the 
pattern matcher can be used as a new language 
layer between the problem and the programming 
language and it can help to reduce  the 
distance between the two. 
4) g lass -box  approach:  in many situations, we 
are primarily interested in using the pattern 
marcher .  But by mak ing  use of an a lready 
ex is t ing  program the student is not confined 
to a b lack box ( l ike it wou ld  be in CAI 
env i ronment ) ;  at any t ime he/she can look 
ins ide the program, open it up, change it to 
h i s /her  own needs etc. A prerequis i te for a 
p rogram to be a g lass -box  is that it is 
imp lemented  in a fo rmal i sm the s tudent  is 
familiar with. 
5) recurs ive  cont ro l  s t ruc ture ,  a pat tern  
marcher  i s  a good  example  fo r  the  power  o f  
recurs ive  definit ions and control structures 
which can be used in many other situations 
A pat tern  marcher  can be used in all projects 
where symbolic structures have to be dissected 
and ident i f ied ,  eg for the t rans la t ion  from 
inf ix to pref ix ,  for pars ing  and translating 
processes ,  for morpho log ica l  ana lys i s ,  for 
s imple  I/0 rout ines  (eg the identi f icat ion of 
keywords) ,  for EL IZA l ike programs and for 
symbolic manipulat ion of algebraic expressions. 
We do not have the space to document  the 
prob lem so lv ing  processes  ( including all the 
incomplete  vers ions)  wh ich  "occured in the 
context  of imp lement ing  the pat tern  marcher  
(see BOECKER/FISCHER 1978) but we want to give 
examples  of its use. The s impl i f icat ion with 
the help of a pat te rn  marcher  can be 
demonst ra ted  by a program for infix to prefix 
t rans la t ion  (written in LOGO! the program also 
n ice ly  shows the power of recurs ive 
definit ions): 
~0 PRM"ZX : IIIVIX 
10 LOCAL "A "B 
20 IF (EQUAL COUNT :INFIX I) TH\]~ 0UTFJT :INFIX 
3o zF ~ \[?A + ?B\] :inFiX 
OVrIK~ (s~?l~c~ "SUM I~ IX  :A PREFIX :B) 
OUTPUT (S~NT~CE "DI~I~/~CE PREFIX :A PREFIX :S) 
50 zF MA~ \[?A * ?B\] :n~zx 
~ (S~TI'~CE "PRODUCT ~IX  :A PREFIX :B) 
60 ~ ~m \[?A I ?S\] :zm~zx 
OU'I'I~ (S~I'I'~OE "QUOTIENT PREFIX :A PREFIX :B) 
70 == \ [~Om S~AX\]  
The fo l low ing  test runs  show how the program 
works :  
su~u v 
113 
A ~l~E~ ~o~r  ~ ~ o ~  c A 
This vers ion  of the program can be extended 
eas i ly  to inc lude  other operators  l ike ">" or  
"<" : 
~ (S~'I~C@ "~ ' l "~ ~ :~ R~I~ :~) 
CIJTRE (S~TE~CE " I~  I~ IX  :a PREFIX :~) 
I t  i e  an instance in the class of rule systems 
which we mentioned ear l ie r .  The ordering of  the 
ru les  takes  care  fo r  the  precedence  convent ions  
o f  in f ix  nota t ion .  We have  chosen  th i s  
app l i ca t ion  spec i f i ca l l y  to  support our claim 
that  many prob lems cons idered  to  be 
mathemat ica l  can be more c lear ly  unders tood  by 
l ook ing  s t  them f rom ? l i ngu is t i c  v iewpoint  
(and the  APL exper ience  shows that  chang ing  the  
precedence  ru les  fo r  the  eva luat ion  o f  
ar i thmet ic  expressions poses a non- t r iv ia l  
problem). 
Another  app l i ca t ion  o f  the  pat tern  marcher  
wou ld  be to  parse  sentences  in  a language where  
the  grammar is g iven .  For th i s  purpose  we 
assume that  the  pat tern  may conta in  pred icates  
(wh ich  ere  marked by "<" and ">"): 
TRUE 
The fo l low ing  grammer  may serve  ss an example  
( i t  descr ibes  the  language o f  s t  leas t  one "O" 
fo l lowed by at  leas t  one "1" ) :  
<$8~1~ --> <SO> <$1> 
<SB> --> 0 I 0<$1> 
<51> --> 11 1<51> 
SENT, SO and S I  can be imp lemented  w i th  the  
pat tern  mstcher  aa lo l lowed:  
Io 0OTI~ ~TCHP \[<SO> <sl>\] : I~t~ 
~OSO :D~er 
10 ~Y ~tITC\]~ 0 :\]\];POT ~ ~ "~ 
2o 0mg~ ~nc~ \[o <so>\] :n~oT 
~0 $I :I\]l@~ 
10 :IY ~t~TC\]~ I :D~t~  Otfigb5 "T I~ 
20 OU'lg~ ~ \[:1 <St>\] : ~  
A few tes t runs  show the working of the parser :  
?ALSE 
I~II~ ~ \[0 0 0 1\] PIlINT SI~T \[0 t O 1\] 
TRUE FALSE 
7.  Imo l i ce t~ons  fo r  p rob lem eo lv~nq and 
educat ion  
Power fu l  ideas have the potent ial  to lead to a 
breakdown of the tradit ional  boundar ies  between 
es tab l i shed  sc ient i f i c  d isc ip l ines and reduce 
the d iv i s ion  of school knowledge in to  
d is Junct ive  compartments. ~By working on some of 
the  pro Jec ts  descr ibed  above  our  s tudents  found  
that  the knowledge which they acquired or 
d iscovered  was not only useful in the context 
of a spec i f i c  task but cou ld  be successfu l ly  
used  to  unders tand  end so lve  prob lems in  o ther  
domalns  as wel l ,  wh ich  shou ld  be i l lustrated 
through the fo l lowing two speci f ic  examples: 
1) the  s tudents  became aware  that  the  
eva luat ion  of ar i thmet ic  express ions  (as  i t  
i s  commonly used in mathematics) is not 
something determined by God but that i t  is 
only s convention and that the laws behind i t  
can be eas i l y  exp la ined  by the use of a 
grammar .  
2) s s tudent  d i scovered  why mathemat ic ians  
ta lk  about  one- to -one  mapp ings  (wh lch  never  
made any sense  to  him in mathematics) by 
t ry ing  to design secret codes in some of the 
language games (eg Pig Lat in and other ones) 
Another  impor tant  feature  of our  approach  wee 
that  the students extended the range of the i r  
"sub jec t ive ly  computab le"  p rob lems,  wh ich  
he lped  them to  rep lace  the i r  v iew o f  the  
computer being a giant adding machine with the 
more  adequate  v iew of being s genera l  
i n fo rmat ion  process ing  dev ice .  We chal lenged 
the i r  views th ink ing  about the computer .  
Despite the fac t  that computation is s t i l l  in 
i t s  infancy there are many strong be l ie fs  whet 
computers  a re ,  whet  they  can do and what  they  
can not  do .  
By being exposed to the complex problems 
mentioned above the students got fami l ia r  with 
general  problem so lv ing  ideas about 
representat ions ,  p lanning and debugging. The 
in tu i t i ve  understanding which a person has 
about h i s /her  own language provided the basis 
that  debugging incomplete and incor rec t  
programs becomes  an easy - to -grasp  ac t iv i ty ,  
because  bugs in language programs have a high 
v is ib i l i ty  ( ie  we can  d i scover  them by 
i nspect ion  and not only by extens ive  
ca lcu la t ions  l i ke  i t  i s  the  case  in  numer ica l  
computations). 
Problems in CL prov ide good prototypes  to 
understand the theoret i ca l  re levance of 
debugging. Opposed to the dominant view in 
114 
computer sc ience,  where many people regard bugs 
as an awkward  obstac le  (or as an ind icat ion  
that  the programmer  is unable to think c lear ly  
and care fu l ly  enough)  we cons ider  bugs  as 
potent ia l l y  in fo rmat ive  f r iends  and as a 
s tar t ing  po in t  to f ind  out  about  the 
d i sc repanc ies  between 'a  spec i f i ca t ion  (a model,  
e theory) and an imp lementat ion  (s program).  In 
CL, most  peop le  are  aware  that if a conf l ic t  
a r i ses  we can not  a lways  conc lude  that the 
spec i f i ca t . ions  are  cor rect  and the  
imp lementat ion  is wrong (as in Ga l i leo 's  case, 
where  the theory  was wrong and his data were 
cor rec t ) .  
Work ing  on the pro jec ts  descr ibed  above, the 
s tudents  can do work  wh ich  is c lose  to the 
research  f ront  ( i f  they would have done their  
work ten years ear l ier  they could have earned e 
PhO degree  w i th  it).  Th is  makes  this subject  
mater ia l  once again more in terest ing  than much 
of mathemat ics  where the students  have to think 
about  what  is not even  c lose  to the current  
research front. 
9. \ [mpi r ice l  f ind inqe 
Most  of the hypotheses  and asser t ions  of the 
prev ious  sect ions  ere  suppor ted  by the 
empir ica l  work in our project .  We have not made 
an e f fo r t  to do any kind of formal eva luat ion,  
but  we have  car r ied  out  a la rge  number  of 
in fo rmal  invest igat ions  to unders tand  the 
impact  of our  approach .  S tudents  f i l l ed  out 
quest iona i res ,  par t i c ipated  in th ink -a loud  
protoco ls  for many problem solv ing s i tuat ions  
end we t r ied  to unders tand  their programs and 
the bugs they produced dur ing the so lut ion  of a 
complex problem. There is no space here to talk 
about  th is  in deta i l ;  the in fo rmat ion  is 
documented  in KL ING et al(1977) end F ISCHER 
(1978 end 1979). 
We be l ieve  that  our approach turned out to be 
very  success fu l .  The students  en joyed work ing  
in our laboratory  and they learned a lot about 
language as wel l  as general  prob lem so lv ing snd 
programming sk i l l s .  Espec ia l l y  s tudents  with 
l i t t le  in teres t  in mathemat ica l  prob lems were 
mot ivated  by language-or iented  appl icat ions .  
They cou ld  work  in an ac t ive  mode and 
invest igate  arb i t ra ry  fo rmal i sms and 
con jec tures .  They cou ld  see that  ideas  from 
l ingu is t i cs  cou ld  he lp  them to unders tand  
prob lems in o ther  domains,  which supports  our 
hypothes is  that  p rob lems from CL can serve as 
an entry point and as a t rans ient  object  to the 
wor ld  of p rob lem so lv ing ,  p rogramming end 
mathemat ics .  
Acknowledqements  
I would  l ike to thank H.-D. Boecker ,  A. Fauser,  
3. Laubsch  end O. Roesner  for many c r i t i ca l  
comments  about ear l ier  drafts  of this paper.  
References  
Boecker,H.-O. and G. Fischer (1978): " In terakt ives  
Problemloesen mit Computerhilfe: Problemaufgaben zur 
L ingu is t ik ,  Informetik und Kuenstlichen In te l l igenz" ,  
Forschungsg~CUU, Darmstadt 
Fischer, G. (1978). "Probleme und Erfehrungen bei dec 
Programmiersuabildung im Informatik-Unterricht" in W. Arlt 
(ed) ; "EDV-Einsatz in Schule und Ausbildung", Oldenburg 
Verlaq, Huenchen, pp ?0-75 
Fischer, G. (1979). "Fehlerdiegnose - Grundbauatein fuer ein 
Verstehen yon Lehr- und Lernprozessen", in Beitreege zum 
Methematikunterricht, Soh~oedel Verleg 
Key, A. (1977): "Microelectronics and the personal computer", 
Scientific America 1977, pp 2}I-2~w~ 
Kling, U., Boecker H.-D., Fischer, G., Freiburg, D., 
Schneider, B. end Schroeder, 3. (1977): "Projekt PROKOP", 
Forschongscjruppe CUU, Darmstadt 
Papert, S. (1979): "The LOGO Book", unpublished raft, MIT AI 
Lab 
Simon, H. (1978): "problem Solving and Education", CIP Working 
Paper No. }91, Carnegie Mellon University 
115 

