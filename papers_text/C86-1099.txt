BetaText: An Event Driven Text P~oessir~\] ~ Text ~lyz in~\]  Systeml 
Benny Brodda 
Department of Linguistics 
University of Stockholm 
S-I06 91 Stockholm, $%~eden 
Abstract. BetaText  can be descr ibed  as an event 
driven pr(xluction system, in which (c~mbinations of) 
text events lead to cer ta in  actions, such as the 
printing of sentences that exh ib i t  certain, say, 
syntactic phenomena. %~\]e ana lys is  mechan ism used 
allows for arbitrarily complex parsing, but is par- 
ticularly suitable for finite state i~arsing. A care- 
ful invest igat ion  of what  is actua l ly  needed in 
linguistically relevant text processing resulted in 
a rather sn%all but carefully chosen set of "elemen- 
tary actions" to be implemented. 
1. Introdnction. The field of c~mputa'tior~\]\[ linguis- 
tics seems, roughly speaking, to o~IiprJ.se two rather 
disjoint subf ie lds ,  one  J.n wh ich  the  typ ica l  
researcher predominantly occupies himself  witJl pro- 
blems such as "concordance generation", "backward 
sorting", "word frequencies" and so on, whereas  the 
prototypic researd\]er in tJ~e otJler field has things 
like "pars ing strategies", "semant ic  representa-  
tions" on top of h is  mind. 
qhis division into almost disjoint subfields is 
to be regretted, because we al l  are (or should be) 
students of one and the same thing - language as it 
is. %~e responsibility for this sad state of affairs 
can probably be divided equal by the researchers in 
these two  subfields: the "concordance makers"  .~-  
cause they seem so entirely ha~)py with rather unso- 
phisticated cx)raputational tools de~eloped a\].reac~ in 
the sixties (and which al low the researcher to look 
at words  or word  fo rms only, and their  d is t r ibu-  
tion), and the theoret i c ians  ~yecause they seem so 
obsessed with the idea of developing their fantastic 
ir~dels of \]xln(}lage in greater and greater detail, a 
mode\], that at a closer scrutiny is found to c~Dmprise 
a lex icon of, at best, a couple  of hundred  words, 
and cvavering, at best, a couple of hundred sentences 
or so. No wonder  that the researchers  in these two  
canlos thirJ< so little of each other. 
One way  of c los ing the gap can be to deve lop 
niDre soph is t i ca ted  tools  for the invest igat ion  of 
actual texts; there is a need for die theoreticians 
to test  to what  extent  the i r  mode ls  actua l ly  cover  
actual language (and to get  impu lses  f rom actual  
language), and there is a need for the "pract ic ion-  
ers" to have s imp le  tools for invest igat ing  snore 
complex st\[llctures in texts than mere words and word 
:totals. BetaText  is an a t tempt  to prov ide tools for 
both those needs. 
2. Text events and text oiyerations. BetaText  is a 
system intended both for sc ient i f i c  invest igat ions  
(or analyses) of texts, and text  p rocess ing  in a 
i~ore technical sense, such as reformattlng, washing 
spurious characters  away, and so on. Due to the 
internal o rgan isat ion  of the system, even large 
texts can \[se run at a reasonab le  cost  (of. Brodda-  
Karlsson ?98i). In this section we give some general 
definitions, and show thei r  consequences  for Beta-  
Te xt. 
i~i e lementary  (text) event  cons is ts  of the obser -  
vation of one specif ied,  concrete  str ing in the 
text. The systera records sudl an observation through 
the in t roduct ion  of a spec i f ic  internal  state (oz 
through a spec i f i c  change of the interna l  state), 
the internal  state be ing an interna l  var iab le  that  
can take arbitrary, positive integral values. 
/Lrbitrarily chosen states (sets of states, in 
fact.) can be t ied to spec i f i c  act iv i t ies  (or pro 
cesses), and each t ime such a state is intro duced 
(i.e. the interna l  state becomes  equal  to that  
state) the corresponding process is aeti vated. Such 
states are called action states. 
A complex event (or just event, even elementary 
events can be. cor~lalex in the sense used here) is the 
c~3mbined resul t  of a sequence of in terconnected  
elementary events, poss ib ly  resu l t ing  in an act ion  
state. 
In BetaText all this is coi~pletely controlled by 
a set of prEx~uction rules (cf. Smullyan 196\].) of the 
type~ 
(<striug>, <set of states>) -> 
( <slew string>, <move>, <new state>, <action(s) >) 
where <string> is the string that is to be observed, 
<set of states> a cond i t ion  for app ly ing  the rule, 
viz. that the current inter\]lal state belongs to this 
set; it is via such cond i t ions  that the cha in ing of  
several elementary events into one con~91ex event is 
achieved. <new str ing> is a str ing that is subst i -  
tuted for the observed  s t r ing  (the defaul t  is that  
the original string is retained), <move> is a direc- 
tive to Che sys tem w'here (in the text) it shal l  
continue the analysis; the default is immediately to 
421 
the right of the observed string. <new state> is the 
state that the appl ication of the rule results in. 
<action(s)>, finally, is the set of actions that are 
invoked through the appl ication of the rule; the 
action part of a rule is only indirectly present, as 
the actions are invoked if the  resulting state of 
the rule belongs to the corresponding action sets. 
The actual rule format also al lows for context 
conditions (and not only state condit ions as is 
indicated above), h/t it is the way state conditions 
are evaluated that makes the Beta formal ism as 
strong as it is; cf. Brodda-Karlsson 81 and Brodda 
86. 
3. internal organiT~tion. The text corpus to be ana- 
lyzed is assumed to adhere to a format that ,~re or 
less has become the international standard, where 
each line of the running text is assumed to be 
preceded by a fixed length line head, usually con- 
taining some k~id of line identifier. (Typically a 
doct~nerrt identif ier + a running line enumeration.) 
~ne running text is presented to the user (well, the 
program) as if consisting of one immensely long 
string (without the line heads) and in which the 
originnl line divisions are represented by number 
signs (or some other unique symbol not appearing 
otherwise in the text). %~e original line heads are 
also lined up in an internal queue, and the corre- 
spondence between lines and line heads is retained 
via pointers. (This is completely hidden for the 
user. ) 
%~e system has (or can be thought to have) a 
cn/rsor that is moved to and fro inside the text. At 
start up, the cursor is placed at the beginning of 
the text, and the internal state is init iated to l~ 
from there on, the user has complete control (via 
the appl icat ion of rules) of the cursor and the 
internal state. (The the cursor is, however, auto- 
i~tically moved r ightwards in the text as long as 
there is no rule applicable.) 
Output is again organized in the line head, text 
line format, but now the line head may be given an 
internal structure, viz. as 
<-kwoc-fie Id-> <-id-field-> <-enum- field-> 
where the id-f ield corresponds to the line head of 
the input text, the kwoc-f ie ld may be fil led with 
material from the text itself (e.g. words if one is 
making a word concordance of the KWOC-type), and the 
ent~n(eration)-field, if defined, contains a running 
entuneration. These fields - if defined - must be 
explicitly fil led wi th  cor respond ing  mater ia l ,  
through the appl icat ion of action rules, which we 
describe in the next section. 
4. Actions. The actions that can be invoked through 
the appl icat ions of rules can be divided into four 
different groups~ i) analysis actions, actions that 
422 
control in detail  how the analysis proceedes in- 
ternally; ii) block and line head actions, actions 
through which one can move material  from the text 
into the line head (and vice versa); iii) outl~It (or 
print) actions, actions which result in some kind 
of output, and, finally, iv)count actions. 
q%le analysis actions control how the analysis is 
to proceed internally. In an accumulat ing rule the 
resulting state is added to (or subtracted from) the 
current internal state, rather than assigned to it 
(which is the default case). In stack rules some 
important internal parameters (internal state and 
the present posit ions of the cursor and the flag; 
cf. below) are pushed onto or popped from an in- 
ternal stack. %~rough the use of stack actions ATN- 
like grammars can ~ writtern very conveniently in 
the Beta formalism (cf. Brodda 86.) 
Block and line head actions: A flag setting 
action impl ies that an internal pointer is set to 
the present posit ion of the cursor. The flag can 
later be the target of move directives (i.e. the 
cursor can be moved back to the flag). The area from 
the flag to the current posit ion of the cursor can 
also be moved out into the kwoc-f ie ld as one block 
in a kwoc action. 
In output actions the output can be forn~tted in 
n~ny convenient ways. in kwic-format, for instance, 
always exactly one line at a time is output, and in 
such a way that the cursor is posit ioned in a fixed 
co itu~In. 
BetaText has not in itself any advanced sta- 
tistical apparatus, but one can at least count 
things, and perhaps in a little bit more advanced 
way than is usually the case. Arbitrary sets of 
states can be assigned specific registers (up to \]28 
such sets can present ly be defined), and ~henever 
any of these states is introduced, the correslxgnding 
register is raised by one. The content of the reg- 
isters are then presented in a log file that ac- 
conloanies all sessions with Beta'l~xt. 
Several examples of actual analyses wil l  k~ 
shown at the conference. 
RE ~7~h~N C~I~ : 
Brodda, B. & Karlsson, i.'. "An Exper iment with 
Auton~tic Morphological  Analysis of Fin- 
nish", Del~rt~f~ent of Linguistics, Universi- 
ty of Helsinki, Helsinki 1981. 
Brodda B. "~ Experiment with Heuristic Parsing of 
Swedish" in Papers from the Seventh Sc6~idi- 
navian Conference of Linguistics, Publica- 
tions No. 10, Department of Linguistics, 
University of Helsinki, Helsinki 1983. 
Brodda, B. "Beta%%xt: 7~i event Driven Text Proces- 
sing System and Text Analyzing System", to 
appear in Papers ~om the ~Ehglish Language 
and Literature department, University of 
Stockholm, Stockholm 1986. 
Sn~llyan, R.M. "Theory of Formal  Systems", Annals 
of Math. Studies, New York 1961. 
