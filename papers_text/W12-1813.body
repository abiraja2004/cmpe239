NAACL-HLT 2012 Workshop on Future directions and needs in the Spoken Dialog Community: Tools and Data, pages 25?28,
Montre?al, Canada, June 7, 2012. c?2012 Association for Computational Linguistics
Framework for the Development of Spoken Dialogue System 
based on Collaboratively Constructed Semantic Resources 
 
 
Masahiro Araki       Daisuke Takegoshi 
Department of Information Science 
Kyoto Institute of Technology 
Matsugasaki Sakyo-ku Kyoto 6068585 Japan 
araki@kit.ac.jp 
 
 
 
 
 
 
Abstract 
We herein introduce our project of realizing a 
framework for the development of a spoken 
dialogue system based on collaboratively con-
structed semantic resources. We demonstrate 
that a semantic Web-oriented approach based 
on collaboratively constructed semantic re-
sources significantly reduces troublesome rule 
descriptions and complex configurations, 
which are caused by the previous relational 
database-based approach, in the development 
process of spoken dialogue systems. In addi-
tion, we show that the proposed framework 
enables multilingual spoken dialogue system 
development due to clear separation of model, 
view and controller components. 
1 Introduction 
In recent years, some large scale repositories of 
collaboratively constructed semantic resources 
(CSRs), such as Freebase1 , are available online. 
Those semantically structured data enable more 
precise search than simple text matching (e.g. 
"Find a dental clinic near Kyoto station opens at 
Saturday night.") and more complex search than 
simple query to relational database (RDB) (e.g. a 
query "Find machine learning books written by a 
researcher of NLP." needs cross search on a book 
                                                          
1 http://www.freebase.com/ 
DB and a researcher DB). Since search conditions 
of such queries to the structured data become com-
plex, natural language, especially speech, for smart 
phone and tablet PC, is a promising method of que-
ry input. 
There are some previous researches on convert-
ing natural language input to the query of struc-
tured data (Lopez et al., 2006) (Tablan et al., 2008). 
These researches basically concentrated on the in-
put sentence analysis and the query construction. If 
the developer want to apply existing natural lan-
guage understanding methods to spoken dialogue 
system (SDS) for structured data search, there re-
mains fair amount of components that need to be 
implemented, such as speech input component, 
dialogue flow management, backend interface, etc. 
In order to realize a development environment 
of SDS for structured data search, we designed a 
data model driven framework for rapid prototyping 
of SDS based on CSRs. The proposed framework 
can be regarded as an extension of existing Rails 
framework of Web application to (1) enabling 
speech interaction and (2) utilizing a benefit of 
CSRs. By using CSRs and the extended Rails 
framework, the troublesome definitions of rules 
and templates for SDS prototyping can be reduced 
significantly compared with the ordinary RDB-
based approach.  
As this data model driven approach is independ-
ent of language for interaction, the proposed 
framework has a capability of easily implementing 
multilingual SDS. 
25
The remainder of the present paper is organized 
as follows. Section 2 describes the proposed ap-
proach to a data modeling driven development 
process for SDS based on CSRs and explains the 
automatic construction of the spoken query under-
standing component. Section 3 demonstrates the 
multilingual capability of the proposed framework. 
In Section 4, the present paper is concluded, and a 
discussion of future research is presented. 
2 Data modeling driven approach based 
on CSRs 
2.1 Object-oriented SDS development 
framework 
We previously proposed a data modeling driven 
framework for rapid prototyping of SDS (Araki 
2011). We designed a class library that is based on 
class hierarchy and attribute definitions of an exist-
ing semantic Web ontology, i.e., Schema.org2. This 
class library is used as a base class of an applica-
tion-specific class definition. An example of class 
definition is shown in Figure 1. 
 
 
Figure 1: Example of class definition. 
 
In this example, the "MyBook" class inherits all 
of the attributes of the "Book" class of Schema.org 
in the same manner as object-oriented program-
ming languages. The developer can limit the at-
tributes that are used in the target application by 
listing them in the constraints section of the class 
definition. On the other hand, the developer can 
add additional attributes (ranking attributes as the 
type of Integer, which is not defined in original 
"Book" class) in the definition of the class. 
The task type and dialogue initiative type are in-
dicated as annotations at the beginning of the class 
                                                          
2 http://schama.org/ 
definition. In this example, the task type is DB 
search and the initiative type is user initiative. This 
information is used in generating the controller 
code (state transition code, which is equivalent to 
Figure 2) and view codes of the target SDS. 
 Input
query
Display
result
Help
submit
help
modify
query
exit
Home
 
Figure 2: Control flow of the DB search task. 
 
Using Grails3, which is a Rails Web application 
framework, the proposed framework generates the 
dialogue controller code of the indicated task type 
and the view codes, which have speech interaction 
capability on the HTML5 code from this class def-
inition. The overall concept of the data modeling 
driven framework is shown in Figure 3. 
 Data model
definition
Mix-in of
traits
embed
application
logic
State
definition
generate
convert
Grails
Data model
definition
Groovy
generate
HTML5
code
Model
Controller
View
 
Figure 3: Overview of the data modeling driven 
SDS development framework. 
2.2 Using CSRs 
The disadvantage of our previous framework, de-
scribed in the previous subsection, is the high de-
pendence on the dictation performance of the 
speech recognition component. The automatically 
generated HTML5 code invokes dictation API, 
irrespective of the state of the dialogue and initia-
tive type. In order to improve speech recognition 
accuracy, grammar rules (in system initiative dia-
logue) and/or the use of a task/domain-dependent 
language model (in mixed/user initiative dialogue) 
                                                          
3 http://grails.org/ 
@DBSearch 
@SystemInitiative 
class MyBook extends Book { 
  Integer ranking 
  static constraints = { 
    name(onsearch:"like") 
    author(onsearch:"like") 
    publisher() 
    ranking(number:true) 
  } 
} 
26
are key factors. In our previous framework, the 
developer had to prepare these ASR-related com-
ponents using language resources, which are be-
yond the proposed data-driven framework. 
In order to overcome this defect, we add the 
Freebase class library, which is based on large-
scale CSRs, because Freebase already includes the 
contents of the data. These contents and a large-
scale Web corpus facilitate the construction of 
grammar rules and a language model that is specif-
ic to the target task/domain. 
For example, the Film class of Freebase has 
more than 191 thousand entries (as of May 2012), 
most of which have information about directors, 
cast members, genres, etc. These real data can be 
used as resources to improve ASR accuracy. 
In system initiative type dialogue, the contents 
of each attribute of the target class can construct 
word entries of the grammar rule for each attribute 
slot. For example, the grammar rule for the user's 
response to "Which genre of movie are you search-
ing for?" can be constructed from the contents of 
the genres attribute of the Film class. We imple-
mented a generator of the set of content words 
specified in the data model definition from the data 
of Freebase. The generator is embedded as one 
component of the proposed framework. 
In the mixed/user initiative type tasks, since 
content words and functional words make up the 
user's utterance, we need a language model for 
speech recognition and a semantic frame extractor 
for the construction of query to semantic data. We 
designed and implemented a language model gen-
erator and a semantic frame extractor using a func-
tional expression dictionary that corresponds to the 
attributes of Freebase (Araki submitted). The flow 
of the language model generation is shown in Fig-
ure 4. 
Freebase
data
Web
corpus
Data model
inition
content
words
in-domain
entries
domain
dependent
LM
example
sentences
 
Figure 4: Construction process of LM. 
2.3 Helper application for data definition 
In order to facilitate the data-model definition pro-
cess, we implemented a helper application called 
MrailsBuilder. A screenshot of one phase of the 
definition process is shown in Figure 5, which 
shows the necessary slots for data definition in the 
GUI and a list of properties once the developer 
selects the parent class of the target class. 
 
 
Figure 5: Screenshot of MrailsBuilder. 
3 Multilingual extension of the framework 
With the internationalization capability of the 
Grails base framework and multilingual data re-
sources provided as CSRs, we can generate a mul-
tilingual SDS from the data model definition. All 
of the language-dependent information is stored in 
separated property files and is called at the time of 
the dynamic view code generation process in the 
interaction, as shown in Figure 6. 
 
Please input 
search 
condit ns.
B ok of AI.
Below items are 
found.
 
 
Figure 6: Example of realized interaction. 
27
We also implemented a contents extractor from 
Freebase data. In Freebase, each class (called 
"type") belongs to one domain. For example, the 
"Dish" type belongs to the "Food & Drink" domain 
(see Figure 7). Although it assigned to a two-level 
hierarchy, each type has no inherited properties. 
Therefore, it is easy for Freebase data to represent 
a set of property values as a string instead of a uni-
form resource identifier (URI). Each instance has 
the name property and its value is written in Eng-
lish. For some instances, it also has the name de-
scription in another language with the language 
code. Therefore, we can extract the name of the 
instance in various languages. 
 
? Books
? Business
? Film
? Food&Drink
? ...
Domain
? Ingredient
? Restaurant
? Dish
? ...
Type
? 2,421 Instances
? Properties
Dish
Property Expected Type
Type of dish /food/type_of_dish
Cuisine /dining/cuisine
Typical ingredients /food/ingredient
Recipes /food/recipe
 
Figure 7: Domain and type of Freebase. 
 
The input of the contents extractor is the model 
definition code as in Figure 1 and the language 
code (e.g., "ja" for Japanese). As an example, the 
"MyDish" class is defined as shown in Figure 8. 
 
 
Figure 8: Model definition of the "MyDish" class. 
 
The contents extractor outputs the instance rec-
ords of the given language code and this instance 
can be used for LM generator explained in section 
2.2. For example, the extracted words in the case 
of "de" (German) is shown in Figures 9. 
 
Figure 9: German contents of the "MyDish" class. 
4 Conclusions and future research 
We have proposed a framework for development 
of a SDS on CSRs and have explained rapid con-
struction method of spoken query understanding 
component and showed its multilingual capability. 
In future research, we plan to evaluate the quan-
titative productivity of the proposed framework. 
Acknowledgments 
The present research was supported in part by the 
Ministry of Education, Science, Sports, and Cul-
ture through a Grant-in-Aid for Scientific Research 
(C), 22500153, 2010. 
References  
