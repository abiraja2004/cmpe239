INDIRECT RESPONSES TO LOADED QUESTIONS* 
S. Jerrold Kaplan 
Department of Computer and Informat ion Science 
Univers i ty  of Pensylvania 
Phi ladelphia,  Pa. 19104 
Casual users of Natural  Language (NL) 
computer systems are typica l ly  inexpert not 
only with regard to the technical  detai ls 
of the underly ing programs, but often with 
regard to the structure and/or content of 
the domain of discourse. Consequent ly ,  NL 
systems must be designed to respond 
appropr iate ly  when they can detect a 
misconcept ion on the part of the user. 
Several  convent ions exist in cooperat ive 
conversat ion that al low a speaker to 
indirect ly encode their intentions and 
bel iefs about the domain into their 
utterances, ("loading" the utterances),  and 
al low (in fact, often require) a 
cooperat ive respondent to address those 
intentions and bel iefs beyond a l iteral, 
direct response. To be effect ive,  NL 
computer systems must do the same. The 
problem, then, is to provide pract ical  
computat ional  tools which wil l  determine 
both when an indirect response is required, 
and wh-~ that response should be, wi thout  
requir ing that large amounts of domain 
dependent world knowledge be encoded in 
special  formalisms. 
This paper wil l  take the posit ion that 
d is t inguish ing language dr iven inferences 
f rom domain dr iven inferences provides a 
f ramewor -~r  a s--~ution to this prob lem in 
the Data Base (DB) query domain. An 
implemented query system (CO-OP) is 
descr ibed that uses this d ist inct ion to 
provide cooperat ive responses to DB 
queries, using only a standard (CODASYL) DB 
and a lexicon as sources of world 
knowledge. 
WHAT IS A LOADED QUESTION? 
A loaded quest ion is one that 
indicates that the quest ioner  presumes 
something to be true about the domain of 
d iscourse that is actual ly false. Quest ion 
IA presumes lB. A cooperat ive speaker must 
* This work part ia l ly  supported by NSF 
grant MCS 76-19466 
find IB assumable (i.e. not bel ieve it to 
be false) in order to appropr iate ly  utter 
IA in a cooperat ive conversat ion,  intend it 
l i teral ly,  and expect a correct, direct 
response. 
IA. What day does John go to his 
weekly piano lesson? 
lB. John takes weekly piano lessons. 
IC. Tuesday. 
S imi lar ly,  2A presumes 2B. 
2A. How many Bloody Marys did Bil l  
down at the banquet? 
2B. Hard liquor was avai lable at the 
banquet. 
2C. Zero. 
If the quest ioner  bel ieved 2B to be false, 
there would be no point in asking 2A - s/he 
would a l ready know that the correct answer 
had to be "Zero." (2C). 
Both examples 1 and 2 can be expla ined 
by a convent ion of conversat ional  
cooperation: that a quest ioner should leave 
the respondent a choice of direct answers. 
That is, from the quest ioner 's  v iewpoint  
upon asking a question, more than one 
direct answer must be possible.  
It fol lows, then, that if a quest ion 
presupposes something about the domain of 
discourse, as IA does, that a quest ioner  
cannot fe l ic i tous ly  utter the quest ion and 
believe the presuppos i t ion  to be false. 
This is a result of the fact that each 
direct answer to a quest ion entai ls  the 
quest ion's  presupposi t ions.  (More 
formally, if quest ion Q presupposes 
propos i t ion P, then each quest ion-d i rect  
answer pair (Q, Ai) entails P*.) Therefore,  
* This entai lment condit ion is a necessary 
but not suff ic ient condit ion for 
presuppos i t ion.  The concept of 
presuppos i t ion  normal ly  includes a 
condit ion that the negat ion of a 
202 
if a quest ioner bel ieves a presuppos i t ion 
to be false, s/he leaves no options for a 
correct, direct response - v io lat ing the 
convention. Conversely,  a respondent can 
infer in a cooperative conversat ion from 
the fact that a quest ion has been asked, 
that the quest ioner finds it's 
presuppos i t ions assumable. (In the terms 
of \[Keenan 71\], the logical presuppos i t ion 
is pragmatically presupposed.)  
Surpr is ingly,  a more general  semantic 
re lat ionship exists that stil l  a l lows a 
respondent to infer a quest ioner 's  beliefs. 
Consider the situat ion where a proposi t ion 
is entai led by all but one of a quest ion's  
direct answers. (Such a proposi t ion wil l  
be cal led a presumption of the question.) 
By a s imi lar argument, it fo l lows that if a 
quest ioner bel ieves that proposi t ion to be 
false, s/he can infer the direct, correct 
answer to the quest ion - it is the answer 
that does not entai l  the proposit ion.  Once 
again, to ask such a quest ion leaves the 
respondent no choice of (potentially) 
correct answers, v io lat ing the 
conversat ional  convention. More 
importantly,  upon being asked such a 
question, the respondent can infer what the 
quest ioner presume s about the context. 
Quest ion 2A above presumes 2B, but 
does not presuppose it: 2B is not entai led 
by the direct answer 2C. Nonetheless,  a 
quest ioner must find 2B assumable to 
fe l ic i tously ask 2A in a cooperat ive 
conversat ion - to do otherwise would 
violate the cooperative convention. 
Similar ly,  3B below is a presumption but 
not a presuppos i t ion of 3A (it is not 
entai led by 3C). 
the fai lure of a presuppos i t ion renders a 
ques?ion infe1-\[cTtius because it leaves n~ 
Options for a direct response; 6he- - -~ur-6 
of a pres impt ion renders a - -quest ion  
T~fe lTc ihous because it leaves at most one 
opt ion for a direct "response. (Note th-a-6 
the d-~fl-6Tti~n of presumpt ion subsumes the 
def in i t ion of presuppos i t ion  in this 
context.) 
CORRECTIVE INDIRECT RESPONSES 
In a cooperat ive conversat ion,  if a 
respondent detects that a quest ioner 
incorrect ly  presumes something about the 
domain of discourse, s/he is required to 
correct that misimpression.  A fai lure to 
do so wil l  impl ic i t ly conf i rm the 
quest ioner 's  presumption. Consequent ly,  it 
is not always the case that a correct, 
direct answer is the most cooperat ive 
response. When an incorrect presumption is 
detected, it is more cooperat ive to correct 
the presumpt ion than to give a direct 
response. Such a response can be called a 
Correct ive Indirect Response. For example, 
imagine quest ion 4A uttered in a 
cooperat ive conversat ion when the 
respondent knows that no departments sell 
knives. 
4A. Which departments that 
knives also sell blade sharpeners? 
4B. None. 
4C. No deparments sell knives. 
sell 
3A. Did Sandy pass the prel ims? 
3B. Sandy took the prelims. 
3C. No. 
If a quest ioner bel ieves in the falsehood 
of a presupposi t ion of a quest ion, the 
quest ion is inappropriate because s/he must 
believe that no direct answer can be 
correct; similarly, if a quest ioner 
bel ieves in the falsehood of a presumption, 
the quest ion is inappropriate because the 
quest ioner must know the answer to the 
question - it is the direct answer that 
does not entai l  the presumption. In short, 
proposi t ion (in this case, the negat ion of 
the proposi t ion expressed by a 
quest ion-d i rect  answer pair) should also 
entail its presupposit ions.  Consequent ly,  
the truth of a presupposi t ion of a quest ion 
is normal ly  considered a prerequis i te for 
an answer to be either true or false (for a 
more detai led discussion see \[Keenan 73\]). 
These subtlet ies of the concept of 
presupposi t ion are irrelevant to this 
discussion,  because false responses to 
questions are considered a-priori  to be 
uncooperat ive.  
Although 4B is a direct, correct response 
in this context, it is less cooperat ive 
than 4C. This effect is explained by the 
fact that 4A presumes that some departments 
sell knives. To be cooperative, the 
respondent should correct the quest ioner 's  
mis impress ion w i th  an indirect response, 
informing the quest ioner that no 
departments sell knives (4C). (The direct, 
correct response 4B will reinforce the 
quest ioner 's  mistaken presumption in a 
cooperat ive conversat ion through it's 
fai lure to state otherwise.) A fai lure to 
produce correct ive indirect responses is 
highly inappropr iate in a cooperat ive 
conversat ion,  and leads to "stonewal l ing" - 
the giving of very l imited and precise 
responses that fail to address the larger 
goals and bel iefs of the questioner.  
RELEVANCE TO DB QUERIES 
Most NL computer systems stonewall ,  
because their designs erroneously assume 
that s imply producing the correct, direct 
response to a query insures a cooperat ive 
response. (To a great extent, this 
assumption results from the view that NL 
203 
functions in this domain simply as a 
high- level  query language.) Unfortunately,  
the domain of most real ist ic DB's are 
suf f ic ient ly  complex that the user of a NL 
query faci l i ty (most l ikely a naive user) 
wil l  f requent ly make incorrect presumpt ions 
in his or her queries. A NL system that is 
only capable of a direct-- response ~i~r  
necessar i ly  produce meaningless responses 
to fai led presupposit ions,  and stonewall  on 
failed presumptions.  Consider t~-e 
fol lowing hypothet ical  exchange with a 
typical NL query system: 
Q: Which students got a grade of F in 
CIS500 in Spring, '77? 
R: Nil. \[the empty set\] 
Q: Did anyone fail CIS500 in Spring, 
'77? 
R: No. 
Q: How many people passed CIS500 in 
Spring, '77? 
R: Zero. 
Q: Was CIS500 given in Spring '77? 
R: No. 
A cooperat ive NL query system should 
be able to detect that the init ia l  query in 
the dialog incorrectly presumed that CIS500 
was offered in Spring, '77, and respond 
appropr iately.  This abi l i ty is essential  
to a NL system that wil l  funct ion in a 
pract ical  environment, because the fact 
that NL is used in the interact ion wil l  
imply to the users that the normal 
cooperat ive conventions fol lowed in a human 
dialog wil l  be observed by the machine. 
The CO-OP query system, descr ibed below, 
obeys a number of conversat ional  
conventions.  
While the def in i t ion of presumpt ion 
given above may be of interest from a 
l inguist ic  standpoint,  it leaves much to be 
desired as a computat ional  theory. 
A l though it provides a descr ipt ive model of 
certain aspects of conversat ional  behavior,  
it does not provide an adequate basis for 
computing the presumptions of a given 
quest ion in a reasonable way. By l imit ing 
the domain of appl icat ion to the area of 
data retr ieval,  it is possible to show that 
the l inguist ic  structure of quest ions 
encodes considerable informat ion about the 
presumptions that the quest ioner  has made. 
This structure can be explo i ted to compute 
a s igni f icant class of presumpt ions  and 
provide appropr iate correct ive indirect 
responses. 
LANGUAGE DRIVEN VS. DOMAIN DRIVEN INFERENCE 
A long standing observat ion in AI 
research is that knowledge about the world 
- both procedural  and declarat ive - is 
required in order to understand NL.* 
Consequent ly ,  a great deal of s tudy  has 
gone into determining just what type of 
knowledge is required, and how that 
knowledge is to be organized, accessed, and 
uti l ized. One practical  d i f f icu l ty  with 
systems adopt ing this approach is that they 
require the encoding of large amounts of 
world knowledge to be proper ly  tested, or 
even to function at all. It is not easy to 
determine if a part icular fai lure of a 
system is due to an inadequacy in the 
formal ism or simply an insuff ic ient  base of 
knowledge. Frequently,  the col lect ion and 
encoding of the appropr iate knowledge is a 
painstaking and time consuming task, 
further h inder ing an ef fect ive evaluat ion.  
Most NL systems that fo l low this paradigm 
have a common property: they decompose the 
input into a suitable "meaning" 
representat ion,  and rely on various 
deduct ion and/or reasoning mechanisms to 
provide the " intel l igence" required to draw 
the necessary  inferences. Inferences made 
in this way can be called domain** dr iven 
inferences, because they are mot ivated by 
the domain itself***. 
Whi le domain driven inferences are 
surely essent ia l  to an understanding of NL 
(and wil l  be a required part of any 
comprehensive cognit ive model of human 
intel l igence),  they alone are not 
suf f ic ient  to produce a reasonable 
understanding of NL. Cons ider  the 
fo l lowing story: 
John is pretty crazy, and sometimes 
does strange things. Yesterday he went 
to Sardi 's  for dinner. He sat down, 
examined the menu, ordered a steak, and 
got up and left. 
For a NL system to infer that something 
unusual has happened in the story, it must 
d ist inguish the story from the events the 
story describes.  A quest ion answering 
system that would respond to "What did John 
eat?" with "A steak." cannot be said to 
understand the story. As a sequence of 
events, the passage contains nothing 
unusual - it simply omits detai ls that can 
be f i l led in on the basis of common 
knowledge about restaurants.  As a story, 
* For example, to understand the statement 
"I bought a br iefcase yesterday,  and today 
the handle broke off." it is necessary to 
know that br iefcases typical ly  have 
handles. 
** "Domain" here is meant to include 
general world knowledge, knowledge about 
the specif ic  context, and inferencial  rules 
of a general  and/or speci f ic  nature about 
that knowledge. 
*** Of course, these inferences are 
actual ly  made on the basis of descr ipt ions 
of the domain (the internal meaning 
representat ion) and not the domain itself. 
What is to be evaluated in such systems is 
the suf f ic iency of that descr ipt ion in 
represent ing the domain. 
204 
however, it raises expectat ions that the 
events do not. Drawing the inference "John 
didn't  eat the steak he ordered."  requires 
knowledge about the language in addit ion to 
knowledge about the domain. Inferences 
that require language related knowledge can 
be cal led language dr iven inferences. 
Language driven inferences can be 
character ized as follows: they are based on 
the fact that a story, dialog, utterance, 
etc. is a descr ipt ion,  and that the 
descr ipt ion itself ma Z exhibit  useful 
propert ies not associated with the 
being desc--~bed.* These addit ional  
propert ies are used by speakers to encode 
essential  information - a knowledge of 
language related convent ions is required to 
understand NL. 
Language driven inferences have 
several useful propert ies in a 
computat ional  framework. First, being 
based on general knowledge about the 
language, they do not require a large 
infusion of knowledge to operate in 
di f fer ing domains. As a result, they are 
somewhat more amenable to encoding in 
computer systems (requiring less 
programming effort), and tend to be more 
transportable to new domains. Second, they 
do not appear to be as subject to runaway 
inferencing, i.e. the inferencing is 
driven (and hence control led) by the 
phrasing of the input. Third, they can 
often achieve results approximat ing that of 
domain driven inference techniques with 
substant ia l ly  less computat ional  machinery 
and execut ion time. 
As a simple example, consider the case 
of factive verbs. The sentence "John 
doesn't  know that the Beat les broke up." 
carries the inference that the Beatles 
broke up. Treated as a domain driven 
inference, this result might typical ly  be 
achieved as follows. The sentence could be 
parsed into a representat ion indicat ing 
John's lack of knowledge of the Beatles'  
breakup. Either immediately or at some 
suitable later time, a procedure might be 
invoked that encodes the knowledge "For 
someone to not know something, that 
something has to be the case." The 
inferencial  procedures can then update the 
knowledge base accordingly.  As a language 
driven inference, this inference can be 
regarded as a lexical property,  i.e. that 
factive verbs presuppose their complements,  
and the complement immediately asserted, 
namely, that the Beat les broke up. (Note 
that this process cannot be reasonably said 
to "understand" the utterance, but achieves 
the same results.) Effect ively,  certain 
* In the story example, assumptions about 
the connectedness of the story and the 
uniformity of the level of descr ipt ion give 
rise to the inference that John didn't  eat 
what he ordered. These assumpt ions are 
conventions in the language, and not 
propert ies of the s i tuat ion being 
described. 
inference rules have been encoded d i rect ly  
into the lexical and syntact ic  structure of 
the language - faci l i tat ing the drawing of 
the inference without resort ing to general  
reasoning processes. 
Another (simpler) type of language 
driven inferences are those that relate 
speci f ica l ly  to the structure of the 
discourse, and not to it's meaning. 
Consider the interpretat ion of anaphoric 
references such as "former", "latter", 
"vice versa", "respectively",  etc. These 
words exploit  the linear nature of language 
to convey their meaning. To infer the 
appropr iate referents, a NL system must 
retain a suff ic ient amount of the structure 
of the text to determine the relative 
posit ions of potent ia l  referents. If the 
system "digests" a text into a non- l inear 
representat ion (a common procedure),  it is 
l ikely to lose the information required for 
understanding.  
The CO-OP system, described below, 
demonstrates that a language dr iven 
inference approach to computat ional  systems 
can to a considerable extent produce 
appropr iate NL behavior in pract ical  
domains without the overhead of a detai led 
and comprehensive world model. By l imiting 
the domain of discourse to DB queries, the 
lexical and syntact ic structure of the 
quest ions encodes suff ic ient information 
about the user's beliefs that ~ s igni f icant 
class of presumptions can be computed on a 
purely language dr iven--~si~. 
CO-OP: A COOPERATIVE QUERY SYSTEM 
The design and a pilot implementat ion 
of a NL query system (CO-OP) that provides 
cooperat ive responses and operates with a 
standard (CODASYL) DB system has been 
completed. In addit ion to producing direct 
answers, CO-OP is capable of producing a 
var iety of indirect responses, including 
correct ive indirect responses. The design 
methodology of the system is based on two 
observat ions:  
I) To a large extent, the inferencing 
required to detect the need for an 
indirect response and to select the 
appropr iate one can be driven direct ly  
from the lexical and syntact ic  
structure of the input quest ion, and 
2) the information already encoded in 
standard ways in DB systems complements 
the language related knowledge 
suf f ic ient ly  to produce appropr iate 
conversat ional  behavior without the 
need for separate "world knowledge" or 
"domain specif ic knowledge" modules. 
Consequent ly ,  the inferencing mechanisms 
required to produce the cooperat ive 
responses are domain transparent,  in the 
205 
sense that they wil l  produce appropr iate 
behavior without modi f icat ion from any 
suitable DB system. These mechanisms can 
therefore be transported to new DB's 
without  modif icat ion.  
To i l lustrate this claim, a detai led 
descr ipt ion of the method by which 
correct ive indirect responses are produced 
follows. 
THE META QUERY LANGUAGE 
Most DB queries can be viewed as 
request ing the select ion of a subset (the 
response set) from a presented set of 
ent it ies (this analysis fol lows \[Belnap 
76\]). Normal ly,  the presented set is put 
through a series of restr ict ions,  each of 
which produces a subset, until the response 
set is found. This view is formal ized in 
the procedures that manipulate an 
intermediate representat ion of the query, 
cal led the Meta Query Language (MQL). 
The MQ\[. is a graph structure,  where 
the nodes represent sets (in the the 
mathemat ica l ,  not the DB sense) "presented" 
by the user, and the edges represent 
relat ions def ined on those sets, derived 
from the lexical and syntactic structure of 
the input query. Conceptual ly ,  the direct 
response to a query is an N-place relation 
real ized by obtaining the referent of the 
sets in the DB, and composing them 
according to the binary relations. Each 
composi t ion wil l  have the effect of 
select ing a subset of the current sets. 
The subsets will contain the elements that 
survive (participate) in the relation. 
(Actually, the responses are real ized in a 
much more eff ic ient fashion - this is 
s imply a convenient  view.) 
As an example, consider the query 
"Which students got Fs in L inguist ics 
courses?" as diagrammed it: FIGURE i. 
GOT 
Meta Query Language representat ion of 
"Which students got FS in L inguist ics 
courses ?" 
FIGURE 1 
This query would be parsed as present ing 4 
sets: "students",  "Fs", "L inguist ics",  and 
"courses". (The sets "L inguist ics"  and 
"Fs" may appear counter intu i t ive,  but 
should be viewed as s ingleton ent i t ies 
assumed by the user to exist somewhere in 
the DB.) The direct answer to the query 
would be a 4 place relation consist ing of a 
column of students, grades (all Fs), 
departments (all L inguist ics) ,  and courses. 
For convenience,  the columns containing 
s ingleton sets (grades and departments)  
would be removed, and the remaining l ist of 
students and associated courses presented 
to the user. 
Execut ing the query consists of 
passing the MQL representat ion of the query 
to an interpret ive component that produces 
a query suitable for execut ion on a CODASYL 
DB using information associated for this 
purpose with the lexical items in the MQL. 
(The specif ic knowledge required to perform 
this t ranslat ion is encoded purely at the 
lexical level: the only addit ional  domain 
dependent knowledge required is access to 
the DB schema.) 
The MQL, by encoding some of the 
syntact ic re lat ionships  present in the NL 
query, can hardly be said to capture the 
meaning of the question: it is merely  a 
convenient representat ion formal iz ing 
certain l inguist ic  character is t ics  of the 
query. The procedures that main ipulate 
this representat ion to generate inferences 
are based on observat ions of a general  
nature regarding these syntact ic 
re lat ionships.  Consequent ly ,  these 
inferences are language driven inferences.  
COMPUTING CORRECTIVE INDIRECT RESPONSES 
The crucial  observat ion required to 
produce a reasonable set of correct ive 
indirect responses is that the MQL query 
presumes the non-empt iness of - -~  
connected -~bgraphs .  Each c-onnected 
subgraph corresponds to a presumpt ion the 
user has made about the domain of 
discourse. Consequent ly,  should the 
initial query return a null response, the 
control structure can check the users 
presumpt ions by passing each connected 
subgraph to the interpret ive component to 
check it's non-emptiness (notice that each 
subgraph itself const i tutes a well  formed 
query). Should a presumpt ion prove false, 
an appropr iate indirect response can be 
generated, rather than a meaningless or 
mis leading direct response of "None." 
For example, in the query of FIGURE i, 
the subgraphs and their corresponding 
correct ive indirect responses are (the 
numbers represent the sets the subgraphs 
consist of): 
i) "I don't  know of any students."  
2) "I don't  know of any Fs." 
3) "I don't  know of any courses." 
4) "I don't  know of any L inguist ics ."  
1,2) "I don't  know of any students 
that got Fs. " 
2,3) "I don't know 6f any Fs in 
206 
courses." 
3,4) "I don't know of any L inguist ics 
courses." 
1,2,3) "I don't  know of any students 
that got Fs in courses." 
2,3,4) "I don't know of any Fs in 
l inguist ics courses." 
Suppose that there are no l inguist ics 
courses in the DB. Rather than present ing 
the direct, correct answer of "None.", the 
control structure will pass each connected 
subgraph in turn to be executed against the 
DB. It wil l  discover that no l inguist ics 
courses exist in the DB, and so wil l  
respond with "I don't know of any 
l inguist ics courses." This corrective 
indirect response (and all responses 
generated through this method) wil l  entail  
the direct answer, since they wil l  entail  
the emptiness of the direct response set. 
Several  aspects of this procedure are 
worthy of note. First, although the 
select ion of the response is dependent on 
knowledge of the domain (as encoded in a 
very general sense in the DB system - not 
as separate theorems, structures, or 
programs),  the computat ion of the 
presumptions is total ly indepen-dent o f  
domain s~ecifi~-" knowledge. Because these 
ihferences are driven sole ly by the parser 
output (MQL representat ion),  the procedures 
that determine the presumptions (by 
computing subgraphs) require no knowledge 
of the DB. Consequent ly,  producing 
correct ive indirect responses from another 
DB, or even another DB system, requires no 
changes to the inferencing procedures. 
Secondly,  the mechanism for select ing the 
indirect response is identical to the 
procedure for execut ing a query. No 
addit ional  computat ional  machinery need b-e 
invoked to select the appropr iate indl--~ec--6 
~ e  \[ T--~d i~--, the computat ional  
overhead involved in checking and 
correct ing the users presumpt ions is not 
incurred unless it has been determined that 
an indirect response may be required. 
Should the query succeed init ial ly,  no 
penalty in execut ion time will be paid f~-{ 
the ab~-\[i ty t__oo produce t-~e-- in~rect  
responses. In addit ion, the--~ly increase 
in space overhead is a small control  
program to produce the appropr iate 
subgraphs (the l inguistic generat ion of the 
indirect response is essent ia l ly  free - it 
is a tr ivial  addit ion to the paraphrase 
component already used in the parsing 
phase). 
Correct ive indirect responses, 
produced in this fashion, are language 
driven inferences, because they are derived 
direct ly  from the structure of the query as 
represented by the MQL. If the query were 
phrased di f ferent ly,  a d i f ferent  set of 
presumptions would be computed. (This is 
not a drawback, as it might seem at first - 
it insures that the response wil l  be in 
terms that the user understands.)  For these 
reasons, corrective indirect responses, 
made possible by a careful choice of 
representat ions and associated algorithms, 
are produced in a domain transparent 
fashion with minimal system overhead using 
knowledge already avai lable in the DB. 
A SHORT SAMPLE SESSION 
This section contains an example 
interact ion with the prel iminary 
implementat ion of the CO-OP system as it 
now stands. An actual session has been 
abstracted and commented here. 
CO-OP is currently implemented on a 
DEC KI-10 under TOPS-10 mainly in 
UCI -RUTGERS-L ISP,  and runs in 95K words, 
including the SEED DB system. SEED is a 
commerc ia l ly  avai lable CODASYL DB system, 
marketed by International  Data Base 
Systems, Inc. \[Gerritsen 78\]. The DB is a 
live one, used by the National  Center For 
Atmospher ic  Research (NCAR) in Boulder Co. 
to keep track of their computer users, 
projects,  research sponsors, etc. The 
pr imary purpose of the DB is to track the 
use of NCAR facil it ies, for account ing and 
other uses. 
The user in the example is a 
hypothet ical  Computer Science department 
chairperson who has heard that the NCAR DB 
contains information about who is 
sponsoring research in var ious areas, and 
is interested in securing some research 
funds. S/he bel ieves (incorrectly, it 
turns out) that funds are avai lable to 
study mass storage. S/he begins by asking: 
Q: Who sponsors active projects in mass 
storage? 
R: I don't  know of any projects in mass 
storage. 
The system is unaware of any projects in 
mass storage, and so expl ic i t ly  corrects 
the users presumption that there are some. 
The user tries a more general question. 
Q: Who sponsors research in computer 
science? 
R: I don't know of anyone that sponsors 
research in computer science. 
Again, a correct ive indirect response - but 
this time stat ing that no sponsors are 
known, rather than that no suitable 
projects are known. In addit ion to being 
able to generate corrective indirect 
responses, the system can choose the most 
appropr ia te  one when more than one is 
appl icable.  This is done by observing that 
207 
the subgraphs of an MQL query are part ia l ly  
ordered according to a subgraph relation, 
and it is most appropr iate to correct the 
"least" fai l ing subgraphs with respect to 
this ordering. 
Gett ing nowhere, the chairperson now 
asks: 
list (sorted by contact), along with the 
projects they sponsor. A l though the user 
has presumed that there is only one contact 
at Nasa Headquarters,  the system provides 
the entire list, without objecting. This 
and other forms of s loppy reference are 
tolerated by the system. 
Q: What are the areas? 
and receives a list of the areas of 
interest (s/he knew that the projects at 
NCAR are grouped according to a 
predetermined list of areas of interest), 
ident i f ied by the area number and name. 
S/he observes that area #6 (data 
processing) and area #12 (numerical 
methods) look interesting, and fol lows up 
with: 
Q: Who sponsors pro jects  in area 6? 
The response is a list of sponsor names 
with a support ive indirect component of the 
projects they sponsor in area 6, the name 
of the area (because only the number was 
suppl ied - the system doesn' t  current ly 
remember that it just provided the area 
name to the user), and the project numbers 
of the sponsore, d projects. The user now 
decides that Nasa Headquarters looks the 
most promising,  and so asks: 
Q: What is sponsored in numerical  methods 
by Nasa Headquarters?  
After checking the DB, the system discovers 
that Nasa Headquarters doesn't  sponsor 
anything in numerical  methods. 
Addi t ional ly ,  it is unable to detect any 
failed presumptions on the part of the 
user. It therefore provides a negative 
response fol lowed by a suggest ive indirect 
response l ist ing the projects that Nasa 
Headquarters  sponsors in any area, in the 
hope that this will be helpful  to the user. 
R: I don't  know of anything in numerical  
methods that Nasa Headquarters  sponsors .  
But you might be interested in anything 
that Nasa Headquarters  sponsors. . .  
After perusing this list, the chairperson 
concludes that although the projects don't 
look very promising,  s/he wil l  get in touch 
with Nasa Headquarters.  S/he asks: 
Q: Who is the contact at Nasa Headquarters?  
CONCLUSION 
The prob lem of producing apparent ly  
intel l igent behavior from a NL system has 
t rad i t ional ly  been viewed in Art i f ic ia l  
Inte l l igence as a problem of model l ing 
human cognit ive processes, or model l ing 
knowledge about the real world. It has 
been demonstrated here that such approaches 
must include a pragmatic theory of the 
convent ions and propert ies of the use of 
language, to funct ion effect ively.  Domain 
dr iven inferences must be complemented by 
language dr iven inferences to appropr iate ly  
process NL. Further, it has been argued 
that language driven inference mechanisms 
help to control  the inference process, and 
can provide a more general  and 
computat iona l ly  attract ive solut ions to 
many problems previously  thought to require 
domain dr iven inference. 
A descr ipt ive theory of one type of 
cooperat ive indirect response to 
inappropr iate quest ions has been presented, 
and extended to a prescr ipt ive 
(computational) theory by restr ict ing the 
domain of appl icat ion to DB query systems. 
This theory has been implemented using 
language dr iven mechanisms in the design of 
CO-OP, a cooperat ive query system. The 
result is the generat ion of appropr iate 
correct ive indirect responses in a 
computat iona l ly  eff ic ient and domain 
transparent fashion. 
REFERENCES 
Austin,  J .L., How To Do Th ings  With Words, 
J.O. Urmson, Ed.,--Oxf~'{d Univers i ty  Press, 
N.Y. 1965. 
Belnap, N. D., and T. B. Steel, The 
o f  Quest ions and Answers,  Yale 
Unlv rsT-ty Press, New Haven, Conn.,  1976. 
Gerr i tsen,  Rob, SEED Reference Manual,  
Vers ion CO0 - B04 draft, In ternat iona- -~a 
Base Systems, Inc., Phi ladelphia,  Pa., 
19104, 1978. 
It turns out that there is a contact at 
Nasa Headquarters for each project 
sponsored, and so the system prints out the 
Grice, H. P., "Logic and Conversat ion" ,  in 
Syntax and Semantics: Speech Acts, Vol. 3, 
(P. Cole and J. L. Morgan, Ed.), 
208 
Academic Press, N.Y., 1975. University Press, London, 1969. 
Harris, L. R., "Natural Language Data Base 
Query: Using the Data Base Itself as the 
Definition of World Knowledge and as an 
Extension of the Dictionary", Technical 
Report #TR 77-2, Mathematics Dept., 
Dartmouth College, Hanover, N.H., 1977. 
Weischedel, R. M., Computation of a Unique 
Class of Inferences: Presuppos--\[tTon and 
Entailment, Ph.D. dissertation, Dept. of 
Computer and Information Science, 
University of Pennsylvania, Philadelphia, 
Pa. 1975. 
Joshi, A. K., S. J. Kaplan, and R. M. 
Lee, "Approximate Responses from a Data 
Base Query System: An Application of 
Inferencing in Natural Language", in 
Proceedings of the 5th IJCAI, Vol. i, 
1977. 
Kaplan, S. Jerrold, "Cooperative Responses 
from a Natural Language Data Base Query 
System: Preliminary Report", Technical 
Report, Dept. of Computer and Information 
Science, Moore School, University of 
Pennsylvania, Philadelphia, Pa., 1977. 
Kaplan, S. J., and Joshi, A. K., 
"Cooperative Responses: An Application of 
Discourse Inference to Data Base Query 
Systems", to appear in proceedings of the 
Second Annual Conference of the Canadian 
Society for Computational Studies of 
Intelligence, Toronto, Ontario, July, 1978. 
Joshi, A. K., Kaplan, S. J., and Sag, I. 
A., "Cooperative Responses: Why Query 
Systems Stonewall", to appear in 
proceedings of the 7th International 
Conference on Computational Linguistics, 
Bergen, Norway, August, 1978. 
Keenan, E. L., "Two kinds of 
Presupposition in Natural Language", in 
Studies i_~n Linguistic Semantics, (C. J. 
Fillmore and D. T. Langendoen, Ed.), 
Holt, Rinehart, and Winston, N.Y., 1971. 
Keenan, E. L., and Hull, R. D., "The 
Logical Presuppositions of Questions and 
Answers", in Prasuppositionen in 
Philosophie und Lin@uistik, (Petofi an--d 
Frank, Ed.), Athenaum Verlag, Frankfurt, 
1973. 
Lee, Ronald M. "Informative Failure in 
Database Queries", Working Paper #77-11-05, 
Dept. of Decision Sciences, Wharton 
School, University of Pennsylvania, 1977. 
Lehnert, W., "Human and Computational 
Question Answering", in Cognitive Science, 
Vol. i, #i, 1977. 
Searle, J. R., Speech Acts, an Essay in 
th.__ee Philosophy of Language, Cambridge 
209 
