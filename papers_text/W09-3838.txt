Proceedings of the 11th International Conference on Parsing Technologies (IWPT), pages 234?237,
Paris, October 2009. c?2009 Association for Computational Linguistics
Dependency Parsing with Energy-based Reinforcement Learning
Lidan Zhang
Department of Computer Science
The University of Hong Kong
Pokfulam Road, Hong Kong
lzhang@cs.hku.hk
Kwok Ping Chan
Department of Computer Science
The University of Hong Kong
Pokfulam Road, Hong Kong
kpchan@cs.hku.hk
Abstract
We present a model which integrates
dependency parsing with reinforcement
learning based on Markov decision pro-
cess. At each time step, a transition is
picked up to construct the dependency tree
in terms of the long-run reward. The op-
timal policy for choosing transitions can
be found with the SARSA algorithm. In
SARSA, an approximation of the state-
action function can be obtained by calcu-
lating the negative free energies for the
Restricted Boltzmann Machine. The ex-
perimental results on CoNLL-X multilin-
gual data show that the proposed model
achieves comparable results with the cur-
rent state-of-the-art methods.
1 Introduction
Dependency parsing, an important task, can be
used to facilitate some natural language applica-
tions. Given a sentence, dependency parsing is
to find an acyclic labeled directed tree, projective
or non-projective.The label of each edge gives the
syntactic relationship between two words.
Data-driven dependency parsers can be catego-
rized into graph-based and transition-based mod-
els. Both of these two models have their advan-
tages as well as drawbacks. As discussed in (Mc-
Donald and Satta, 2007), transition-based mod-
els use local training and greedy inference algo-
rithms, with a rich feature set, whereas they might
lead to error propagation. In contrast, graph-based
models are globally trained coupled with exact in-
ference algorithms, whereas their features are re-
stricted to a limited number of graph arcs. Nivre
and McDonald (2008) presented a successful at-
tempt to integrate these two models by exploiting
their complementary strengths.
There are other researches on improving the
individual model with a novel framework. For
example, Daume? et al (2006) applied a greedy
search to transition-based model, which was ad-
justed by the resulting errors. Motivated by his
work, our transition-based model is expected to
overcome local dependencies by using a long-term
desirability introduced by reinforcement learning
(RL). We rely on a ?global? policy to guide each
action selection for a particular state during pars-
ing. This policy considers not only the current
configuration but also a few of look-ahead steps.
Thus it yields an optimal action from the long-
term goal. For example, an action might return
a high value even if it produces a low immediate
reward, because its following state-actions might
yield high rewards. The reverse also holds true.
Finally we formulate the parsing problem with the
Markov Decision Process (MDP) for the dynamic
settings.
The reminder of this paper is organized as fol-
lows: Section 2 describes the transition-based de-
pendency parsing. Section 3 presents the proposed
reinforcement learning model. Section 4 gives the
experimental results. Finally, Section 5 concludes
the paper.
2 Transition-based Dependency Parsing
In this paper, we focus on the transition-based
dependency parsing in a shift-reduce frame-
work (Ku?bler et al, 2009). Given a sentence
x = w0, w1, ..., wn, its dependency tree is con-
structed by a sequence of transitions. The data
structures include a stack S to store partially pro-
cessed words and a queue I to record the remain-
ing input words and the partial labeled dependency
structure constructed by the previous transitions.
Four permissible transitions are considered: Re-
duce: pops word wi from the stack; Shift: pushes
the next input wj onto the stack; Left-Arcr: adds
a labeled dependency arc r from the next input wj
to the top of the stack wi, then pops word wi from
the stack; Right-Arcr: adds a dependency arc r
234
S1
A1
r1
S2
A2
r2
St
At
rt
St+1
At+1
rt+1 AtSt
Ht
tis tja
tkh
tikw tjkv
t
Figure 1: The MDP with factored states and actions. Left: The general network. Right: Detailed network
with one hidden layer at time t. Visible variables (states and actions) are shaded. Clear circles represent
hidden variables.
from the top of the stack wi to the next input wj ,
and pushes word wj onto the stack.
Starting from the empty stack and initializing
the queue I as the input words, the parser termi-
nates when the queue I is empty. The optimal
transition (or say, action/decision A) in each step
is conditioned on the current configuration c of
the parser. For non-projective cases, preprocess-
ing and postprocessing are applied.
3 Reinforcement Learning
3.1 General Framework
We begin with looking at the general framework to
integrate RL into the transition-based dependency
model. In this paper, we reformulate the depen-
dency parsing as Markov Decision Process (MDP,
(S,A, T , r)) where:
? S is the set of states.
? A is the set of possible actions.
? T is the transition function, T : S ?A ? S.
we denote the transition probability Pij(a) =
P (st+1 = j|st = i, At = a).
? r is the reward function by executing action
a in a certain state, which is denoted as ri(a).
As aforesaid, the key task of dependency pars-
ing is to select the optimal action to be performed
based on the current state. Given the expected im-
mediate reward r, the optimal policy (pi : S 7? A)
is to maximize the long-term expected reward as
follows:
Rt =
??
k=0
?krt+k (1)
Given a policy pi, state-action function Qpi(i, a)
can be defined as the expected accumulative re-
ward received by taking action a in state s. It takes
the following form:
Qpi(i, a) = Epi[
??
k=0
?krt+k|st = i, at = a]
= ?
j
Pij(a)[ri(a) + ?
?
b
pi(j, b)Qpi(j, b)]
(2)
Here pi(j, b) is the probability of picking up action
b in state j, ? ? [0, 1] is a discount factor to con-
trol the involvement of further actions. According
to the Bellman equation, the state-action function
can be updated iteratively with equation( 2).
Given the state-action function, a greedy policy
can be found by maximizing over possible actions:
pi? = argmax
a
Qpi(i, a) (3)
In the following, we will discuss how to com-
pute the state-action function Q by investigating
the free energy in RBM.
3.2 Restricted Boltzmann Machine
3.2.1 Free Energy
Figure 1 shows the general framework of our
model. At each time step t, there is no connections
between nodes within the same layer. In the net-
work, ?visible? variables include both states and
actions (V = S?A). The visible layer is fully con-
nected to a ?hidden? layer, which can be regarded
as a Restricted Boltzmann Machine (RBM).
In our model, both states and actions are fac-
tored. They are consisted of a sets of discrete vari-
ables (Sallans and Hinton, 2004). The stochas-
tic energy of the network can be computed by
the conductivities between visible and hidden vari-
ables.
E(s, a, h) = ??
i,k
wiksihk ?
?
j,k
?jkajhk (4)
235
The above energy determine their equilibrium
probabilities via the Boltzmann distribution:
P (s, a, h) = exp(?E(s, a, h))?
s?,a?,h? exp(?E(s?, a?, h?))
(5)
By marginalizing out the hidden variables, we
can obtain the ?equilibrium free energy? of s and
a, which can be expressed as an expected energy
minus an entropy:
F (s,a)=??k(
?
i(wiksi?hk?)+
?
j(?jkaj?hk?))
+
?
k?hk? log?hk?+(1??hk?) log(1??hk?)
(6)
where ?hk? is the expected value of variable hk:
?hk? = ?(
?
i,k
wiksi +
?
j,k
?jkaj) (7)
where ? = 1/(1 + e?x) is a sigmoid function.
As is proved in (Sallans and Hinton, 2004), the
value of a state-action function can be approxi-
mated by the negative free energy of the network:
Q(s, a) ? ?F (s, a) (8)
3.2.2 Parameter Learning
The parameters of the network can be updated by
the SARSA (State-Action-Reward-State-Action)
algorithm. The inputs of the SARSA algorithm
are the state-action pairs of the two neighboring
slices. Then the error can be computed as:
E(st, at) = [rt+?Q(st+1, tt+1)]?Q(st, at) (9)
Suppose the state-action function is parameter-
ized by ?. The update equation for the parameter
is:
4? ? E(st, at)??Q(st, at) (10)
Back to our model, the parameters ? = (w, u)
are given by:
?wik ?(rt+?Q(st+1,at+1)?Q(st,at))sti?hk?
?ujk ?(rt+?Q(st+1,at+1)?Q(st,at))atj?hk?
(11)
Leemon (1993) showed that the above update
rules can work well in practice even though there
is no proof of convergence in theory. In addition,
in dependency parsing task, the possible action
number is small (=4). Our experimental results
also showed that the learning rule can converge in
practice.
3.3 Action Selection
After training, we use the softmax rules to select
the optimal action for a given state. The probabil-
ity of an action is given by Boltzmann distribution:
P (a|s) ? e
Q(s,a)/?
Z (12)
Here Z is an normalization factor. ? is a pos-
itive number called the temperature. High tem-
perature means the actions are evenly distributed.
Low temperature case a great variety in selection
probability. In the limit as ? ? 0, softmax action
selection becomes greedy action selection.
4 Experiments
4.1 Settings
We use the CoNLL-X (Buchholz and Marsi,
2006) distribution data from seven different lan-
guages (Arabic, Bulgarian, Dutch, Portuguese,
Slovene, Spanish and Swedish). These treebanks
varied in sizes from 29,000 to 207,000 tokens. The
cut-off frequency for training data is 20, which
means we ignores any attribute (FORM, LEMMA,
POS or FEATS) occurred less than 20. Further-
more we randomly selected 10 percent of train-
ing data to construct the validation set. Test sets
are about equal for all languages. Since our algo-
rithm only deals with projective cases, we use pro-
jectivization/deprojectivization method for train-
ing and testing data.
For fair comparison, we use the exactly same
feature set as Nivre et al (2006), which is com-
prised of a variety of features extracted from the
stack, the queue and the partially built dependency
graph.
In our experiment, the immediate reward value
is defined as the Hamming Loss between partial
tree and expected tree, which counts the number
of places that the partial output y? differs from the
true output y: ?Ti=1 1[yi 6= y?i].As shown in Figure 1, we compute the state-
action function using a feed-forward neural net-
work with one hidden layer. The number of hid-
den variables is set to match the variable number in
the visible layer (i.e. total number of state and ac-
tion variables). The parameters of the network are
modified by SARSA algorithm according to equa-
tion 2. Finally, 10-width beam search is employed
for all languages, during testing.
There are other parameters in our experiments,
which can be tuned using search. For simplicity,
236
Ar Bu Du Po Sl Sp Sw
LAS Our 63.24 88.89 79.06 87.54 72.44 82.79 87.20Nivre 66.71 87.41 78.59 87.60 70.30 81.29 84.58
UAS Our 75.30 92.88 83.14 91.34 80.06 86.18 91.84Nivre 77.51 91.72 81.35 91.22 78.72 84.67 89.50
Table 1: Comparison of dependency accuracy with Nivre
the learning rate was exponentially decreased form
0.1 to 0.01 in the course of each epoch. In ideal
cases, the discount factor should be set to 1. In our
experiments, discount factor is fixed to 0.6 consid-
ering the computational burden in long sentence.
The study of the this parameter is still left for fu-
ture work. Finally, the inverse temperature linearly
increased from 0 to 2.
4.2 Results
The performance of our model is evaluated by
the official attachment score, including labeled
(LAS=the percentage of tokens with the correct
head and label) and unlabeled (UAS=the percent-
age of tokens with the correct head). Punctuation
tokens were excluded from scoring.
The result comparison between our system and
Nivre?s transition-based system is shown in Ta-
ble 11. From the table, we can see that the pro-
posed model outperformed the Nivre?s score in all
languages except Arabic. In Arabic, our results are
worse than Nivre, with about 3.5% performance
reduction in LAS measure and 2.2% in UAS. Most
of our errors occur in POSTAGS with N (16%
head errors and 31% dep errors) and P (47% head
errors and 8% dep errors), which is probably due
to the flexible usage of those two tags in Ara-
bic. The best performance of our model happens
in Swedish. The LAS improves from 84.58% to
87.20%, whereas UAS improves from 89.5% to
91.84%. The reason might be that the long depen-
dent relationship is not popular in Swedish. Fi-
nally, we believe the performance will be further
improved by carefully tuning parameters or broad-
ening the beam search width.
5 Conclusions
In this paper we proposed a dependency parsing
based on reinforcement learning. The parser uses
a policy to select the optimal transition in each
parsing stage. The policy is learned from RL in
1The performance of other systems can be accessed from
http://nextens.uvt.nl/?conll
terms of the long-term reward. Tentative experi-
mental evaluations show that the introduction of
RL is feasible for some NLP applications. Finally,
there are a lot of future work, including the hierar-
chical model and parameter selections.
References
Sabine Buchholz and Erwin Marsi. 2006. Conll-
x shared task on multilingual dependency parsing.
In Proceedings of the Tenth Conference on Com-
putational Natural Language Learning (CoNLL-X),
pages 149?164, New York City, June. Association
for Computational Linguistics.
Hal Daume? III, John Langford, and Daniel Marcu.
2006. Searn in practice.
Leemon C. Baird III and A. Harry. Klopf. 1993. Rein-
forcement learning with high-dimensional, contin-
uous actions. Technical Report WL?TR-93-1147,
Wright-Patterson Air Force Base Ohio: Wright Lab-
oratory.
Sandra Ku?bler, Ryan McDonald, and Joakim Nivre.
2009. Dependency parsing. Calif, Morgan & Clay-
pool publishers, US.
Ryan McDonald and Giorgio Satta. 2007. On the com-
plexity of non-projective data-driven dependency
parsing. In Proceedings of the Tenth International
Conference on Parsing Technologies, pages 121?
132, Prague, Czech Republic, June. Association for
Computational Linguistics.
Joakim Nivre and Ryan McDonald. 2008. Integrat-
ing graph-based and transition-based dependency
parsers. In Proceedings of ACL-08: HLT, pages
950?958, Columbus, Ohio, June. Association for
Computational Linguistics.
Joakim Nivre, Johan Hall, Jens Nilsson, Gu?ls?en
Eryig?it, and Svetoslav Marinov. 2006. Labeled
pseudo-projective dependency parsing with support
vector machines. In Proceedings of the Tenth Con-
ference on Computational Natural Language Learn-
ing (CoNLL-X), pages 221?225, New York City,
June. Association for Computational Linguistics.
Brian Sallans and Geoffrey E. Hinton. 2004. Rein-
forcement learning with factored states and actions.
Journal of Machine Learning Research, 5:1063?
1088.
237
