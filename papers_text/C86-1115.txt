A Concept of Derivation for LFG 
Jiirgen Wedekind 
Department of Linguistics 
University of Stuttgart 
West Germany 
Abstract 
In this paper a version of LFG will be developed, which has only 
one level of representation and is equivalent o the modified 
version of \[2\], presented in \[3\]. The structures of this mono- 
stratal version are f-structures, augmented by additional infor- 
mation about the derived symbols and their linear order. For these 
structures it is possible to define an adequate concept of direct 
derivability by which the derivation proeess becomes more 
efficient, as the f-description solution algorithm is directly 
simulated during the derivation of these structures, instead of 
being postponed. Apart from this it follows from tiffs redueability 
that LFG as a theory in its present form does not make use of the 
c-structure information that goes beyond the mere linear order of 
the derived symbols. 
1 .Introduction* 
The derivation process of sentences in LFG as defined in \[2\] is 
very complex, because an additional filter has to be applied to 
derived c-structures. Within this filter component the f- 
structures are constructed. An f-structure can be regarded as a 
special kind of labelled directed acyclic graph (DAG), which re- 
presents a structure of partial functions (i.e. the labels of the 
edges leaving each node have to be different). 1) A terminal string 
(x) is wellformed if it satisfies the following conditions: 
i. There is a e-structure for x that can be generated by the 
contextfree (of) base of the grammar. 
ii. There is an f-structure d and a mapping f from the set of 
nodes of c to the set of subDAGs of d such that d is a unique 
minimal f-structure that satisfies the annotations associated 
with the c-structure nodes (f and d are constructed by the f- 
description solution algorithm, for short KB-algorithm). 
iii. d satisfies all constraints in the f-description. 
iv. d is complete and coherent. 
The derivation process is performed by checking these conditions in 
the order i. < ii. < iii.,iv.. 
This kind of derivation has several theoretical and practical 
disadvantages: 
a. A parser/generator that works in accordance witb this deri- 
rational process is not very efficient, because usually many 
strings are parsed completely or many c-structures are generated 
completely, although the strings themselves are not wellformed 
and therefore rejected by the filter (ii.-iv.). 
b. The process is formally not very transparent and complicates a 
comparison wlth other formalisms. 
c. The grammar is multistratal. It has two levels of representation 
(c-structures, f-structures), although it can be shown that the 
c-structure information, which goes beyond the linear order of 
the derived symbols is not exploited in the present version of 
the theory (\[2\],\[3\]) at all. 2) 
In the following it will be demonstrated that for each LFG a mono- 
stratal version can be constructed, which describes the same 
language with the monostratal concept of derivation. The entities 
of these derivations are augmented f-structures which are con- 
structed along the following lines: In the KB version the 
c-structure derivation of a wellformed terminal string is a 
sequence of annotated c-structures, where each c-structure results 
from the application of an annotated cf rule to a terminal node of 
the preceding c-structure. If one applies the KB-algorithm to each 
annotated c-structure then it constructs a minimal f-structure and 
a mapping from the e-structure nodes to the substructures of the 
f-structure. The augmented f-structures are then constructed by 
attaching the occurrences of the derived string, represented by the 
labelled terminal nodes of the c-structure tree, as additional 
labelled edges to the start nodes of those subDAGs, which are the 
values of the mapping for the corresponding c-structure nodes. An 
example: 
NP VP ~ ~"~ #7 \~ => 
/ ,l ,1 
NP NP 
(<I,NP>, <2,V>, <3,NP>) 
The reduction will be complete, if a definition of an adequate 
concept of direct derivability for these structures can be given. 
This will be done here in three steps in the following sections. 
The reducability to these structures will show that the LFG makes 
no essential use of c-structure informations, as the new structures 
contain only information about the linear order of the derived 
symbols and no other overt or hidden c-structure information. (The 
wellformedness conditions iii. and iv. are defined on 
f-structures.) The reduction leads to a more efficient derivation 
process, because the postponed filter component ii. (the KB- 
algorithm) is integrated in the concept of direct derivability. 3) 
2. Derivation of f-description solutions parallel to c-structures 
In tiffs section the derivation process of KB will be modified in 
such a way, that in each step, besides a partial c-structure, also 
that partial f-structure is generated, which would be the result of 
the KB-algorithm, if it were applied to the annotated partial c- 
structure. A derivation is then a special sequence of triples 
consisting of a partial c-structure, a partial f-structure and a 
mapping from the c-structure nodes to the subDAGs of the f- 
structure. Before stating the definition for the start entity and 
the concept of direct derivability the derivation concept will be 
defined analogously to the standard erivation concepts. 
DEF A derivation is a sequence s0...s n where 
s i =: <c,d,f>; 0~i~<n ; c =: c-structure; d =: partial f-structure 
f~ IN(c) ->T(d)\] (mapping from the c-struoture nodes (N(c)) 
to the subDAGs of" d (T(d))) 
So=: start triple 
s=: derived triple; with a c-structure of a terminal string 
si.CF-> si; 0<i~<n (~ follows from ~.lbY rule?) 
The c-structure of the start triple consists, as usual in 
c-structure derivations, only of the start node (1) with the label 
S ({<I,S>}). If each node is to be in the domain of f, each node 
(including the start node) has to be annotated with a 'v' meta- 
variable. Thus it is possible to apply the KB-algorithm to the 
start node. The algorithm creates a place-holder (DAG, consisting 
only of one node), to which the c-structure node is mapped. So it 
is adequate to introduce for d o a minimal DAG to which the 
c-structure node (I) is mapped qua f0. 
S d 0 
So = <{<l,S>},d0,f0 > f0 1___ ) .  
As the entities of a derivation are complex, an application of a 
rule to a triple expands each component of that triple. The 
expansion, that is aohieved by a rule, can then be isolated if one 
applies the KB-algorithm to the annotated c-structure which is 
introduced by this annotated rule. Example: 
487 
(^OBJ)=v (^ VCOMP)=v 
Thus it is possible to construct for each annotated cf rule ~- with 
cf base r a rule of the form <Pl (r)'<{<~'P2(r)>}'dr'fr>> where Pl (r) 
is the first projection of r (the lefthand side of the rule r 
which equals the lefthand side of r-') and {<~t,P2(r)>} is the intro- 
duced c-structure. (If one represents the cf part of the righthand 
side of the annotated rule ? (P2(r)) as a sequence of symbols in 
the set theoretical sense, it is possible to interpret the 
integers as nodes and the symbols as labels of the nodes. 
For the above rule: {<~,{<I,NP>,<2,VP>}>}.) 
The concept of direct derivability now has to be defined as 
follows: The application of a constructed rule to a triple, which 
is constructed for an annotated c-structure by the KB-algorithm, 
has to yield exactly that expansion that would be the result of the 
KB-algorithm, if it were applied to the annotated c-structure which 
is derived by the corresponding annotated rule. Before stating the 
expansions formally we will describe them informally and 
illustrate them by an example. That the definition of direct 
derivability is adequate in this sense can only be sketched here. 
Assuming that the triple s i .l=<C,d,f> 
c S d 
vP J 
\[(^SUBJ)=v\] _t^=v\] ~ ~'~.V ~1 ~"o 
NP VP / V '  / \ , :  
\[( ^ OBJ)=v\] t(~VCOMP) =v\] / \[^=vl / I~ 
/ / \ / /~  
1231 1232 / ~  
V V' ~ .~ 
V V' f 
\[^=v\] \[(^VCOMP)=v\] 
is derived and the rule ~ (above) is applied to node 122, tile new 
components of si=<c',d',f'> are determined as follows: 4) 
1. (c-structure) The new c-structure is the expansion which results 
from applying r to a terminal node (122 in the example) which is 
labelled with the lefthand symbol of the rule. 
2. (f-structure) As the c-structure, introduced by the rule, 
expands the node 122 in c', all '^' metavariables in the 
annotations of the rule have to be instantiated by 122 (and not by ~). 
Thus )f122=f\[' and it is necessary to merge the subDAG of d 
denoted by dVCOMP with d r . 5) The new DAG d' is then the minimal 
extension of d which results from unifying the DAG which is 
introduced by the rule with that subDAG of d to which the expanded 
node was mapped qua f. 
d &,'A"~@t., ~. .~. d' 
3.(mapping) As the new DAG is an extension of d all attribute paths 
of d are also paths of d'. 
a) If the value of f for a node eDom(f) is denoted in d by dp, 
it's f' value in d' will be denoted by d'p. 
b) For the new nodes f' is defined as follows: 
As the c-structure introduced by the rule expands 122 in c', the 
node 0 is identified with 122. Therefore 'f122 =f~' and by the 
application of the Merge operator dVCOMP~d riS constructed as the 
(new) substructure of d', denoted by d'VCOMP. By the application 
of the Substitute operator d'VCOMP becomes the (new) value of ~'z2, 
By the expansion of 122, a node j of the c-structure, introduced 
by the rule, becomes the node 122j in c'. If 'f;.=drP" then by the 
recursion of Merge dVCOMPp'udrp' is constructed as the (new) 
488 
substructure of d', denoted by d'VCOMPp'. By the application of 
Substitute dVCOMPp'tJdrp' becomes the (new) value of ~22j ? 
Therefore: If the value of fr for the node j (~<j) of the rule's 
c-structure is denoted by d r P' and the value of f for the expanded 
node i is denoted by dp, then the value of f' for ij is denoted by 
d'pp'. For the new nodes in the example the values of f' are 
determined as follows: 
f~= drOBJ' f12~ dVCOMP => f'1221 =d'VCOMP OBJ 
f~= drVCOMP' f12~ dVCOMP => f'122Y d'VCOMP VCOMP 
and <c',d',f'> is 
c' S d' 
121 "- '-f  122 / 123 t' 
NP VP / V' . ~  -~/\, 
\[ (^ OB J )--v\] ~COMp) :v\] ^: g /% 
12321 12322 ~ 
V V' f' 
t^=v\] \[(^VCOMP )=v\] 
The concept of direct derivability is defined in the following way: 
DEF <c,d,f> = ~.fT>si = <c',d',f'> <-> 
c-y->c' and if node i is expanded 
d'=I~{d'~DAGId-d"AVpePATH(fi= dp -> d"p = dpuc~ ))
fk \[N(c') -> T(d')\] 
VjeDom(f)VpePATH(fj= dp -> f\]=d'p) 
f.'.= d'pp') VjeDom(I~(r))Vp,p'ePATH(f i = dp^ fj L drP' -> ~j 
3. Derivation of f-descriptlon solutions parallel to strings 
Since in the derivation process ketched above only the values of f 
for the terminal nodes are needed to define the next triple, it is 
possible to define an alternative version for strings instead of 
c-structures. The c-structure information which goes beyond the 
linear order of the labelled terminal nodes is not required. 
Derivations are to be defined for tripels <w,d,g> ,~n analogy to 
Chap. 2, with w being a string, d a DAG and ge\[~? -> T(d)\]. The 
entities of a derivation and the triples which are introduced by 
tile rules can be constructed from the entities of the preceding 
version easily: 
If <c,d,f> is such an entity of the preceding version then w is the 
final string represented by c, the DAG equals d and g maps each 
occurrence of the final string represented by c to that subDAG of d 
which is ttle value of f for the corresponding terminal node. The 
start triple is s,= <{<l,S>},do,f?> and a rule has the form 
<Pl(r),<P2(r),dr,gr>> ~, By this construction one obtains the fol- 
lowing entities for s o and for the examples ~- and si. 1 of the pre- 
ceding section: 
s o d o ? si .  1 d . 
(<1 ,S>} . ' ~,2~, 
VP --> 
gr T T (<I~NP>, <2, NP>, <3,VP>, <4, V>, <5, V>, <6, V' >} 
{<I,NP>, <2? VP~} 
The definition of an adequate concept of direct derivability is now 
relatively simple. Assuming that s i . 1 = <w,d,g> and s i = <w',d',g'>: 
1.(string) The direct derivability for the strings is defined as 
usual: 
w' follows from w iff there is a rule ~" and w' follows by the cf 
part of Tfrom w. 
2.(f-structure) Because 
a.the DAG, to which the expanded node is mapped in the c-structure 
version equals that DAG (dp), to which the replaced occurrence is
mapped and 
b.the DAG dr, which is introduced by a rule, is in both versions 
the same; it follows that the minimal extension of d, which results 
from dpu d r, equals the derived DAG in the c-structure version. 
3.(mapping) To define g' we have to account for: 
a.The indices of the occurrences of w corresponding to the terminal 
nodes in the right context of the expanded node in the c-structure 
version are increased at the transition to w' depending on the 
length of the ril,hthand side of the applied rule (IP e (r)l). 
b.The indices of the occurrences of l)(r) which are used to 
construct he new nodes in tim c-structure version are here in- 
creased depending on the index of the replaced occurrence. This 
leads to the following definition: 
DEF <w,d,g> = S~.l~-> si = <w',d',g'> <-> 
w-F>w' and if <i,wi> is the replaced occurrence 
d,=r\]{d.gDAG\[dt_-_-d",,,?~PATH(g(<i,v~ >)=dp -> d"p=dpudr)} 
g'~\[w' -> T(d')l 
Vj~Dom(w')(j<i-> Vly, PATH(g(<j,~>)=dp ->g'(<j,w;>)=d'P)) 
VjsDom(w')(j>~i+(lP e r)l) -> VpePATH(g(<J-(IP2(r)I-I)~'>)=dP -> 
g'(j,w'>) =d'p)) 
Vj~Dom(w')(i~j<i+lP2(r)l -> Vp,p'ePATH(g(<i,~ >)=dp ^ 
g r(<j-(i-1),w~>=drP' -> g'(<j,w~>)=d'pp')) 
4. The monostratal derivation concept 
One obtains the monostratal version quite naturally if for all 
triples <w,d,g> of a derivation and a rule's right side in the 
string version the arguments of g are attached as additional label- 
led edges to the start nodes of the subDAGs of d to which they are 
assigned qua g. Thus one obtains for the start triple, the derived 
triple s i.1 and the rule r the following structures: 6) 
So 11 si\[ ,~/CI~--~Z~ 
vp 11 ~ Np ,~ v0 ~\v 
NP VP V 
If <w,d,g> is a triple of the string version then a DAG 
s= N{d'eDAGId-C;d'^ V<i,w i >~w VpePATH(g(<i,w i >)=dp->d'p(i)=~ )} 
is the corresponding entity in the monostratal version. These 
entities are augmented partial f-structures. They have additional 
terminal edges. These edges are labelled with integers and lead to 
elements of the vocabulary. The labels of such edges which are 
attached to different nodes have distinct labels. All such edges 
represent a string over V. 
If FSp is the (undefined) set of partial f-structures then the new 
structures are elements of the set FSe 
FSo=(s~DAG\] ~ deFSp ~weV*3 g~\[w->T(d)\](s=l'q{d'eDAGld -rod' ", 
V<i,w i >ewVpaPATH(g(<i,w  >)=dp->d'p(i)=wi)))} 
The string of such a structure s (S(s)) is simply the set of all 
these additional edges. 
DEF Vs eFSe(S(s )={<i,x>e//VxVl~ P ~PATH(sp(i)=x)} 
The derivation concept is defined as follows: 
DEF A derivation is a sequence s0...s n where 
si~FSe ; 0~<i~n ; So--: . -1 ,S  
S(Sn)eVT* ; si.-y-v>si ; 0<i<,n 
As in this version the occurrences are attached as edges to the 
start nodes of those subDAGs, to which they are assigned in the 
string version, an adequate concept of direct derivability can be 
inferred from the definition of the preceding section. 
One properly re-indexes the DAG s i . 1 and the DAG, which is intro- 
duced by the rule (d,dr), according to the definition of g'. 
The derived DAG is constructed by the elimination of the edge to be 
replaced, and the unification of d r with that subDAG of d, to which 
the replaced edge was attached. A successful unification in the 
string version can't fail here because the labels of the additional 
edges of d (after elimination of the edge to be replaced) and d r 
are pairwise different. 
In the example the result of the application of T on <3,VP> of s i . 1 
is defined as follows: 
IA 
o~ v6/\b~<~, A t ~ 1" 2 ~ ,~\~?o_~-\~ 
NP NP \~ ~ NP VP NP ~ ~p 
V' V' NP 
The concept of direct derivability is defined in the following way: 
DEF s=s i .T - - -~->s i=s  ' <-> 
~pePATH3i~N(sp( i )=p I (~) ^ s'=\[-\]{d'e DAGId~-d  ' ^ d 'p=dp u d r )) 
with C as the set of atomic values and s r as righthand side of i: 
VI)~PATH(s rp~C->d'p=SrP) A , ) 
d r =lT{d'eDAG VpePATH(s r p\S(Sr)=?->d'p\S(d )=?)^ 
VI) ePATHVj~-~/(s p(j)=d'p(j+(i- 1))) J 
Vp~PATH(speC->d'p=sp) ^ 
\[ Vpel~ATII(sp\S(s)=~->d'p\S(d')=?) ~', 
d=\[~(d'e DAG I VpePATIIVj?~/(j<i->d,p(j)=sp(j)) /', 
1VpePATHVj~gC(j>i->d p(j+IS(?. )l-t)=sp(j)) 
FOOTNOTES: 
* The mater ial  in th i s  paper is based on work supported by the BMFT under 
grant no. 1013207 O. 
1) \[2\] suggests, that atomic feature values are not represented as label- 
led nodes. Thus in the fo l lowing i l l us t ra t ions  only edges labelled with 
complex valued features (g ran~t icat  functions) lead to nodes; edges 
label led with atomic valued features (morphological features) point at 
the atomic values. 
2) In th i s  version (c f .  \ [3\])  tong distance dependencies are handled on f -  
s t ructure level .  For that purpose regular expressions over the set of 
nuclear functions (governable functions plus ADd, XADJ) are allowed to 
occur in the equations. These rules can be interpreted ns schemata. A 
rule which is an instance of a schema is then annotated with an ex- 
pression that is eten~nt of the set, denoted by the regular expression. 
3) This in tegrat ion is  necessary because f -s t ructures  are control  
structures of the f i l te r  eomt:~nent i i .  and the new structures are 
expanded f - s t ructures .  I t  is  also possible to simulate the postponed 
f i l te r  components i i i .  end iv .  in an adequate way during the der i -  
vat ion.  This can't  be discussed here for  tack of space. 
4) This example is der ivable with the grannmr of \ [1\] .  The annotations are 
attached to the nodes in order to make d and f reconstructable, l 
represent nodes as sequences ef integers in the usual way (s ta r t  node 
1; i j  is  the j - th  daughter of the node i ) .  For reasons of c la r i ty  f is  
spec i f ied only for  the terminal nodes. 
5) I f  d is a DAG and p a path (a sequence of a t t r ibutes ) ,  then dp is an 
abbreviat ion of a term (descr iptor )  denoting a sub0AG of d. The actual 
s t ructure of such s term depel~ds on the chosen metatheoreticat recon- 
s t ruet ion  of DAGs (par t ia l  functions vs. graphs) (c f .  eg. \ [4\ ] ) .  
6) Note that the VCORP substructure comprises a discontinous structure 
whose corresponding symbols do not form a proper subs\[ring in w. 
REFERENCES 
\[I\] BRESNAN, J./R.KAPLAN/S.PETERS/A.ZAENEN (1982), 
Cross-Serial  Dependencies in Dutch. In: L ingu is t i c  Inquiry 13.4 
\[2\] KAPLAN, R./J.BRESNAN (1982), Lexical Functional Grammar. A Formal 
System for GramnBtical Representation. In: BRESNAN, J. (ed.), 
The Mental Representation of Granlnatical Relations. 
Cambridge, Mass. 1982 
\[3\] KAPLAN, R/A.ZAENEN (1986), Functional Incer ta in ty  in LFG. unpub\[, ms., 
Stanford 
\[4\] PEREIRA, F.C.N./S.M.SNIEBER (1984), The Semantics of Gran~ar 
Formalisms Seen as Computer Lenguages. In: Proceedings of COLING 84 
489 
