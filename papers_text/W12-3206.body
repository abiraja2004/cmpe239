Proceedings of the ACL-2012 Special Workshop on Rediscovering 50 Years of Discoveries, pages 55?65,
Jeju, Republic of Korea, 10 July 2012. c?2012 Association for Computational Linguistics
Extracting glossary sentences from scholarly articles:
A comparative evaluation of pattern bootstrapping and deep analysis
Melanie Reiplinger1 Ulrich Scha?fer2 Magdalena Wolska1?
1Computational Linguistics, Saarland University, D-66041 Saarbru?cken, Germany
2DFKI Language Technology Lab, Campus D 3 1, D-66123 Saarbru?cken, Germany
{mreiplin,magda}@coli.uni-saarland.de, ulrich.schaefer@dfki.de
Abstract
The paper reports on a comparative study of
two approaches to extracting definitional sen-
tences from a corpus of scholarly discourse:
one based on bootstrapping lexico-syntactic
patterns and another based on deep analysis.
Computational Linguistics was used as the tar-
get domain and the ACL Anthology as the
corpus. Definitional sentences extracted for a
set of well-defined concepts were rated by do-
main experts. Results show that both meth-
ods extract high-quality definition sentences
intended for automated glossary construction.
1 Introduction
Specialized glossaries serve two functions: Firstly,
they are linguistic resources summarizing the ter-
minological basis of a specialized domain. Sec-
ondly, they are knowledge resources, in that they
provide definitions of concepts which the terms de-
note. Glossaries find obvious use as sources of ref-
erence. A survey on the use of lexicographical aids
in specialized translation showed that glossaries are
among the top five resources used (Dura?n-Mun?oz,
2010). Glossaries have also been shown to facil-
itate reception of texts and acquisition of knowl-
edge during study (Weiten et al., 1999), while self-
explanation of reasoning by referring to definitions
has been shown to promote understanding (Aleven
et al., 1999). From a machine-processing point of
view, glossaries may be used as input for domain
ontology induction; see, e.g. (Bozzato et al., 2008).
?Corresponding author
The process of glossary creation is inherently de-
pendent on expert knowledge of the given domain,
its concepts and language. In case of scientific do-
mains, which constantly evolve, glossaries need to
be regularly maintained: updated and continually
extended. Manual creation of specialized glossaries
is therefore costly. As an alternative, fully- and
semi-automatic methods of glossary creation have
been proposed (see Section 2).
This paper compares two approaches to corpus-
based extraction of definitional sentences intended
to serve as input for a specialized glossary of a scien-
tific domain. The bootstrapping approach acquires
lexico-syntactic patterns characteristic of definitions
from a corpus of scholarly discourse. The deep ap-
proach uses syntactic and semantic processing to
build structured representations of sentences based
on which ?is-a?-type definitions are extracted. In
the present study we used Computational Linguis-
tics (CL) as the target domain of interest and the
ACL Anthology as the corpus.
Computational Linguistics, as a specialized do-
main, is rich in technical terminology. As a cross-
disciplinary domain at the intersection of linguistics,
computer science, artificial intelligence, and mathe-
matics, it is interesting as far as glossary creation
is concerned in that its scholarly discourse ranges
from descriptive informal to formal, including math-
ematical notation. Consider the following two de-
scriptions of Probabilistic Context-Free Grammar
(PCFG):
(1) A PCFG is a CFG in which each production
A ? ? in the grammar?s set of productions
R is associated with an emission probabil-
55
ity P (A ? ?) that satisfies a normalization
constraint
?
?:A???R
P (A? ?) = 1
and a consistency or tightness constraint [...]
(2) A PCFG defines the probability of a string
of words as the sum of the probabilities of
all admissible phrase structure parses (trees)
for that string.
While (1) is an example of a genus-differentia
definition, (2) is a valid description of PCFG which
neither has the typical copula structure of an ?is-a?-
type definition, nor does it contain the level of de-
tail of the former. (2) is, however, well-usable for a
glossary. The bootstrapping approach extracts defi-
nitions of both types. Thus, at the subsequent glos-
sary creation stage, alternative entries can be used to
generate glossaries of different granularity and for-
mal detail; e.g., targeting different user groups.
Outline. Section 2 gives an overview of related
work. Section 3 presents the corpora and the prepro-
cessing steps. The bootstrapping procedure is sum-
marized in Section 4 and deep analysis in Section 5.
Section 6 presents the evaluation methodology and
the results. Section 7 presents an outlook.
2 Related Work
Most of the existing definition extraction methods
? be it targeting definitional question answering or
glossary creation ? are based on mining part-of-
speech (POS) and/or lexical patterns typical of def-
initional contexts. Patterns are then filtered heuris-
tically or using machine learning based on features
which refer to the contexts? syntax, lexical content,
punctuation, layout, position in discourse, etc.
DEFINDER (Muresan and Klavans, 2002), a rule-
based system, mines definitions from online medical
articles in lay language by extracting sentences us-
ing cue-phrases, such as ?x is the term for y?, ?x
is defined as y?, and punctuation, e.g., hyphens and
brackets. The results are analyzed with a statistical
parser. Fahmi and Bouma (2006) train supervised
learners to classify concept definitions from medi-
cal pages of the Dutch Wikipedia using the ?is a?
pattern and apply a lexical filter (stopwords) to the
classifier?s output. Besides other features, the posi-
tion of a sentence within a document is used, which,
due to the encyclopaedic text character of the cor-
pus, allows to set the baseline precision at above
75% by classifying the first sentences as definitions.
Westerhout and Monachesi (2008) use a complex set
of grammar rules over POS, syntactic chunks, and
entire definitory contexts to extract definition sen-
tences from an eLearning corpus. Machine learn-
ing is used to filter out incorrect candidates. Gaudio
and Branco (2009) use only POS information in a
supervised-learning approach, pointing out that lex-
ical and syntactic features are domain and language
dependent. Borg et al. (2009) use genetic program-
ming to learn rules for typical linguistic forms of
definition sentences in an eLearning corpus and ge-
netic algorithms to assign weights to the rules. Ve-
lardi et al. (2008) present a fully-automatic end-to-
end methodology of glossary creation. First, Term-
Extractor acquires domain terminology and Gloss-
Extractor searches for definitions on the web using
google queries constructed from a set of manually
lexical definitional patterns. Then, the search results
are filtered using POS and chunk information as well
as term distribution properties of the domain of in-
terest. Filtered results are presented to humans for
manual validation upon which the system updates
the glossary. The entire process is automated.
Bootstrapping as a method of linguistic pattern
induction was used for learning hyponymy/is-a re-
lations already in the early 90s by Hearst (1992).
Various variants of the procedure ? for instance, ex-
ploiting POS information, double pattern-anchors,
semantic information ? have been recently pro-
posed (Etzioni et al., 2005; Pantel and Pennacchiotti,
2006; Girju et al., 2006; Walter, 2008; Kozareva et
al., 2008; Wolska et al., 2011). The method pre-
sented here is most similar to Hearst?s, however, we
acquire a large set of general patterns over POS tags
alone which we subsequently optimize on a small
manually annotated corpus subset by lexicalizing the
verb classes.
3 The Corpora and Preprocesssing
The corpora. Three corpora were used in this
study. At the initial stage two development corpora
were used: a digitalized early draft of the Jurafsky-
56
Martin textbook (Jurafsky and Martin, 2000) and the
WeScience Corpus, a set of Wikipedia articles in the
domain of Natural Language Processing (Ytrest?l et
al., 2009).1 The former served as a source of seed
domain terms with definitions, while the latter was
used for seed pattern creation.
For acquisition of definitional patterns and pat-
tern refinement we used the ACL Anthology, a dig-
ital archive of scientific papers from conferences,
workshops, and journals on Computational Linguis-
tics and Language Technology (Bird et al., 2008).2
The corpus consisted of 18,653 papers published be-
tween 1965 and 2011, with a total of 66,789,624
tokens and 3,288,073 sentences. This corpus was
also used to extract sentences for the evaluation us-
ing both extraction methods.
Preprocessing. The corpora have been sentence
and word-tokenized using regular expression-based
sentence boundary detection and tokenization tools.
Sentences have been part-of-speech tagged using the
TnT tagger (Brants, 2000) trained on the Penn Tree-
bank (Marcus et al., 1993).3
Next, domain terms were identified using the C-
Value approach (Frantzi et al., 1998). C-Value is
a domain-independent method of automatic multi-
word term recognition that rewards high frequency
and high-order n-gram candidates, but penalizes
those which frequently occur as sub-strings of an-
other candidate. 10,000 top-ranking multi-word to-
ken sequences, according to C-Value, were used.
Domain terms. The set of domain terms was com-
piled from the following sub-sets: 1) the 10,000 au-
tomatically identified multi-word terms, 2) the set
of terms appearing on the margins of the Jurafsky-
Martin textbook; the intuition being that these are
domain-specific terms which are likely to be defined
or explained in the text along which they appear,
3) a set of 5,000 terms obtained by expanding fre-
quent abbreviations and acronyms retrieved from the
ACL Anthology corpus using simple pattern match-
ing. The token spans of domain terms have been
marked in the corpora as these are used in the course
of definition pattern acquisition (Section 4.2).
1http://moin.delph-in.net/WeScience
2http://aclweb.org/anthology/
3The accuracy of tokenization and tagging was not verified.
S
ee
d
te
rm
s
machine translation language model
neural network reference resolution
finite(-| )state automaton hidden markov model
speech synthesis semantic role label(l)?ing
context(-| )free grammar ontology
generative grammar dynamic programming
mutual information
S
ee
d
pa
tt
er
ns
T .* (is|are|can be) used
T .* called
T .* (is|are) composed
T .* involv(es|ed|e|ing)
T .* perform(s|ed|ing)?
T \( or .*? \)
task of .* T .*? is
term T .*? refer(s|red|ring)?
Table 1: Seed domain terms (top) and seed patterns (bot-
tom) used for bootstrapping; T stands for a domain term.
4 Bootstrapping Definition Patterns
Bootstrapping-based extraction of definitional sen-
tences proceeds in two stages: First, aiming at recall,
a large set of lexico-syntactic patterns is acquired:
Starting with a small set of seed terms and patterns,
term and pattern ?pools? are iteratively augmented
by searching for matching sentences from the ACL
Anthology while acquiring candidates for definition
terms and patterns. Second, aiming at precision,
general patterns acquired at the first stage are sys-
tematically optimized on set of annotated extracted
definitions.
4.1 Seed Terms and Seed Patterns
As seed terms to initialize pattern acquisition, we
chose terms which are likely to have definitions.
Specifically, from the top-ranked multi-word terms,
ordered by C-value, we selected those which were
also in either the Jurafsky-Martin term list or the list
of expanded frequent abbreviations. The resulting
13 seed terms are shown in the top part of Table 1.
Seed definition patterns were created by inspect-
ing definitional contexts in the Jurafsky-Martin and
WeScience corpora. First, 12 terms from Jurafsky-
Martin and WeScience were selected to find domain
terms with which they co-occurred in simple ?is-a?
patterns. Next, the corpora were searched again to
find sentences in which the term pairs in ?is-a? rela-
tion occur. Non-definition sentences were discarded.
57
Finally, based on the resulting definition sentences,
22 seed patterns were constructed by transforming
the definition phrasings into regular expressions. A
subset of the seed phrases extracted in this way is
shown in the bottom part of Table 1.4
4.2 Acquiring Patterns
Pattern acquisition proceeds in two stages: First,
based on seed sets, candidate defining terms are
found and ranked. Then, new patterns are acquired
by instantiating existing patterns with pairs of likely
co-occurring domain terms, searching for sentences
in which the term pairs co-occur, and creating POS-
based patterns. These steps are summarized below.
Finding definiens candidates. Starting with a set
of seed terms and a set of definition phrases, the first
stage finds sentences with the seed terms in the T-
placeholder position of the seed phrases. For each
term, the set of extracted sentences is searched for
candidate defining terms (other domain terms in the
sentence) to form term-term pairs which, at the sec-
ond stage, will be used to acquire new patterns.
Two situations can occur: a sentence may con-
tain more than one domain term (other than one of
the seed terms) or the same domain terms may be
found to co-occur with multiple seed terms. There-
fore, term-term pairs are ranked.
Ranking. Term-term pairs are ranked using four
standard measures of association strength: 1) co-
occurrence count, 2) pointwise mutual information
(PMI), 3) refined PMI; compensates bias toward
low-frequency events by multiplying PMI with co-
occurrence count (Manning and Schu?tze, 1999), and
4) mutual dependency (MD); compensates bias to-
ward rare events by subtracting co-occurrence?s self-
information (entropy) from its PMI (Thanopoulos et
al., 2002). The measures are calculated based on the
corpus for co-occurrences within a 15-word window.
Based on experimentation, mutual dependency
was found to produce the best results and therefore it
was used in ranking definiens candidates in the final
evaluation of patterns. The top-k candidates make
up the set of defining terms to be used in the pattern
acquisition stage. Table 2 shows the top-20 candi-
4Here and further in the paper, regular expressions are pre-
sented in Perl notation.
Domain term Candidate defining terms
lexical functional phrase structure grammar
grammar (LFG) formal system
functional unification grammar
grammatical representation
phrase structure
generalized phrase
functional unification
binding theory
syntactic theories
functional structure
grammar formalism(s)
grammars
linguistic theor(y|ies)
Table 2: Candidate defining phrases of the term ?Lexical
Functional Grammar (LFG)?.
date defining terms for the term ?Lexical Functional
Grammar?, according to mutual dependency.
Pattern and domain term acquisition. At the
pattern acquisition stage, definition patterns are re-
trieved by 1) coupling terms with their definiens can-
didates, 2) extracting sentences that contain the pair
within the specified window of words, and finally
3) creating POS-based patterns corresponding to the
extracted sentences. All co-occurrences of each
term together with each of its defining terms within
the fixed window size are extracted from the POS-
tagged corpus. At each iteration also new definien-
dum and definiens terms are found by applying the
new abstracted patterns to the corpus and retrieving
the matching domain terms.
The newly extracted sentences and terms are fil-
tered (see ?Filtering? below). The remaining data
constitute new instances for further iterations. The
linguistic material between the two terms in the ex-
tracted sentences is taken to be an instantiation of a
potential definition pattern for which its POS pattern
is created as follows:
? The defined and defining terms are replaced by
placeholders, T and DEF,
? All the material outside the T and DEF anchors
is removed; i.e. the resulting patterns have the
form ?T ... DEF? or ?DEF ... T?
? Assuming that the fundamental elements of a
definition pattern, are verbs and noun phrases,
58
all tags except verb, noun, modal and the in-
finitive marker ?to? are replaced with by place-
holders denoting any string; punctuation is pre-
served, as it has been observed to be infor-
mative in detecting definitions (Westerhout and
Monachesi, 2008; Fahmi and Bouma, 2006),
? Sequences of singular and plural nouns and
proper nouns are replaced with noun phrase
placeholder, NP; it is expanded to match com-
plex noun phrases when applying the patterns
to extract definition sentences.
The new patterns and terms are then fed as input
to the acquisition process to extract more sentences
and again abstract new patterns.
Filtering. In the course of pattern acquisition in-
formation on term-pattern co-occurrence frequen-
cies is stored and relative frequencies are calculated:
1) for each term, the percentage of seed patterns it
occurs with, and 2) for each pattern, the percentage
of seed terms it occurs with. These are used in the
bootstrapping cycles to filter out terms which do not
occur as part of a sufficient number of patterns (pos-
sibly false positive definiendum candidates) and pat-
terns which do not occur with sufficient number of
terms (insufficient generalizing behavior).
Moreover, the following filtering rules are ap-
plied: Abstracted POS-pattern sequences of the
form ?T .+ DEF?5 and ?DEF T? are discarded;
the former because it is not informative, the latter
because it is rather an indicator of compound nouns
than of definitions. From the extracted sentences,
those containing negation are filtered out; negation
is contra-indicative of definition (Pearson, 1996).
For the same reason, auxiliary constructions with
?do? and ?have? are excluded unless, in case of the
latter, ?have? is followed by a two past participle
tags as in, e.g., ?has been/VBN defined/VBN (as).?
4.3 Manual Refinement
While the goal of the bootstrapping stage was to find
as many candidate patterns for good definition terms
as possible, the purpose of the refinement stage is to
aim at precision. Since the automatically extracted
patterns consist only of verb and noun phrase tags
5?.+? stands for at least one arbitrary character.
# Definitions # Non-definitions
25 is/VBZ 24 is/VBZ
8 represents/VBZ 14 contains/VBZ
6 provides/VBZ 9 employed/VBD
6 contains/VBZ 6 includes/VBZ
6 consists/VBZ 4 reflects/VBZ
3 serves/VBZ 3 uses/VBZ
3 describes/VBZ 3 typed/VBN
3 constitutes/VBZ 3 provides/VBZ
3 are/VBP 3 learning/VBG
Table 3: Subset of verbs occurring in sentences matched
by the most frequently extracted patterns.
between the definiendum and its defining term an-
chors, they are too general.
In order to create more precise patterns, we tuned
the pattern sequences based on a small development
sub-corpus of the extracted sentences which we an-
notated. The development corpus was created by ex-
tracting sentences using the most frequent patterns
instantiated with the term which occurred with the
highest percentage of seed patterns. The term ?on-
tology? appeared with more than 80% of the patterns
and was used for this purpose. The sentences were
then manually annotated as to whether they are true-
positive or false examples of definitions (101 and
163 sentences, respectively).
Pattern tuning was done by investigating which
verbs are and which are not indicative of defini-
tions based on the positive and negative example
sentences. Table 3 shows the frequency distribu-
tion of verbs (or verb sequences) in the annotated
corpus which occurred more than twice. Abstract-
ing over POS sequences of the sentences contain-
ing definition-indicative verbs, we created 13 pat-
terns, extending the automatically found patterns,
that yielded 65% precision on the development set,
matching 51% of the definition sentences, and re-
ducing noise to 17% non-definitions. Patterns re-
sulting from verb tuning were used in the evaluation.
Examples of the tuned patterns are shown below:
T VBZ DT JJ? NP .* DEF
T , NP VBZ IN NP .* DEF
T , .+ VBZ DT .+ NP .* DEF
T VBZ DT JJ? NP .* DEF
The first pattern matches our both introductory
59
example definitions of the term ?PCFG? (cf. Sec-
tion 1) with ?T? as a placeholder for the term it-
self, ?NP? denoting a noun phrase, and ?DEF? one
of the term?s defining phrases, in the first case, (1),
?grammar?, in the second case, (2), ?probabilities?.
The examples annotated with matched pattern ele-
ments are shown below:6
[PCFG]T [is]VBZ [a]DT [CFG]NP [in which each
production A ? ? in the].? [grammar]DEF ?s
set of productionsR is associated with an emis-
sion probability . . .
A [PCFG]T [defines]VBZ [the]DT
[probability]DEF of a string of words as
the sum of the probabilities of all admissible
phrase structure parses (trees) for that string.
5 Deep Analysis for Definition Extraction
An alternative, largely domain-independent ap-
proach to the extraction of definition sentences is
based on the sentence-semantic index generation of
the ACL Anthology Searchbench (Scha?fer et al.,
2011).
Deep syntactic parsing with semantic predicate-
argument structure extraction of each of the approx.
3.3 million sentences in the 18,653 papers ACL An-
thology corpus is used for our experiments. We
briefly describe how in this approach we get from
the sentence text to the semantic representation.
The preprocessing is shared with the
bootstrapping-based approach for definition
sentence extraction, namely PDF-to-text extraction,
sentence boundary detection (SBR), and trigram-
based POS tagging with TnT (Brants, 2000). The
tagger output is combined with information from
a named entity recognizer that in addition delivers
hypothetical information on citation expressions.
The combined result is delivered as input to the
deep parser PET (Callmeier, 2000) running the open
source HPSG grammar (Pollard and Sag, 1994)
grammar for English (ERG; Flickinger (2002)).
The deep parser is made robust and fast through
a careful combination of several techniques; e.g.:
(1) chart pruning: directed search during parsing to
6Matching pattern elements in square brackets; tags from
the pattern subscripted.
increase performance and coverage for longer sen-
tences (Cramer and Zhang, 2010); (2) chart map-
ping: a framework for integrating preprocessing in-
formation from PoS tagger and named entity recog-
nizer in exactly the way the deep grammar expects it
(Adolphs et al., 2008)7; (3) a statistical parse rank-
ing model (WeScience; (Flickinger et al., 2010)).
The parser outputs sentence-semantic represen-
tation in the MRS format (Copestake et al., 2005)
that is transformed into a dependency-like vari-
ant (Copestake, 2009). From these DMRS represen-
tations, predicate-argument structures are derived.
These are indexed with structure (semantic subject,
predicate, direct object, indirect object, adjuncts) us-
ing a customized Apache Solr8 server. Matching
of arguments is left to Solr?s standard analyzer for
English with stemming; exact matches are ranked
higher than partial matches.
The basic semantics extraction algorithm consists
of the following steps: 1) calculate the closure for
each (D)MRS elementary predication based on the
EQ (variable equivalence) relation and group the
predicates and entities in each closure respectively;
2) extract the relations of the groups, which results in
a graph as a whole; 3) recursively traverse the graph,
form one semantic tuple for each predicate, and fill
information under its scope, i.e. subject, object, etc.
The semantic structure extraction algorithm gen-
erates multiple predicate-argument structures for
coordinated sentence (sub-)structures in the in-
dex. Moreover, explicit negation is recognized and
negated sentences are excluded for the task for the
same reasons as in the bootstrapping approach above
(see Section 4.2, ?Filtering?).
Further details of the deep parsing approach are
described in (Scha?fer and Kiefer, 2011). In the
Searchbench online system9, the definition extrac-
tion can by tested with any domain term T by using
statement queries of the form ?s:T p:is?.
6 Evaluation
For evaluation, we selected 20 terms, shown in Ta-
ble 4, which can be considered domain terms in the
7PoS tagging, e.g., helps the deep parser to cope with words
unknown to the deep lexicon, for which default entries based on
the PoS information are generated on the fly.
8http://lucene.apache.org/solr
9http://aclasb.dfki.de
60
integer linear programming (ILP)
conditional random field (CRF)
support vector machine (SVM)
latent semantic analysis (LSA)
combinatory categorial grammar (CCG)
lexical-functional grammar (LFG)
probabilistic context-free grammar (PCFG)
discourse representation theory (DRT)
discourse representation structure (DRS)
phrase-based machine translation (PSMT;PBSMT)
statistical machine translation (SMT)
multi-document summarization (MDS)
word sense disambiguation (WSD)
semantic role labeling (SRL)
coreference resolution
conditional entropy
cosine similarity
mutual information (MI)
default unification (DU)
computational linguistics (CL)
Table 4: Domain-terms used in the rating experiment
domain of computational linguistics. Five general
terms, such as ?English text? or ?web page?, were
also included in the evaluation as a control sample;
since general terms of this kind are not likely to be
defined in scientific papers in CL, their definition
sentences were of low quality (false positives). We
do not include them in the summary of the evalua-
tion results for space reasons. ?Computational lin-
guistics?, while certainly a domain term in the do-
main, is not likely to be defined in the articles in the
ACL Anthology, however, the term as such should
rather be included in a glossary of computational lin-
guistics, therefore, we included it in the evaluation.
Due to the lack of a gold-standard glossary defi-
nitions in the domain, we performed a rating exper-
iment in which we asked domain experts to judge
top-ranked definitional sentences extracted using the
two approaches. Below we briefly outline the evalu-
ation setup and the procedure.
6.1 Evaluation Data
A set of definitional sentences for the 20 domain
terms was extracted as follows:
Lexico-syntactic patterns (LSP). For the lexico-
syntactic patterns approach, sentences extracted by
the set of refined patterns (see Section 4.3) were
considered for evaluation only if they contained at
least one of the term?s potential defining phrases as
identified by the first stage of the glossary extraction
(Section 4.2). Acronyms were allowed as fillers of
the domain term placeholders.
The candidate evaluation sentences were ranked
using single linkage clustering in order to find sub-
sets of similar sentences. tf.idf-based cosine be-
tween vectors of lemmatized words was used as a
similarity function. As in (Shen et al., 2006), the
longest sentence was chosen from each of the clus-
ters. Results were ranked by considering the size of
the clusters as a measure of how likely it represents
a definition. The larger the cluster, the higher it was
ranked. Five top-ranked sentences for each of the 20
terms were used for the evaluation.
Deep analysis (DA). The only pattern used for
deep analysis extraction was ?subject:T predi-
cate:is?, with ?is? restricted by the HPSG grammar
to be the copula relation and not an auxiliary such as
in passive constructions, etc. Five top-ranked sen-
tences ? as per the Solr?s matching algorithm ? ex-
tracted with this pattern were used for the evaluation.
In total, 200 candidate definition sentences for
20 domain terms were evaluated, 100 per extraction
methods. Examples of candidate glossary sentences
extracted using both methods, along with their rat-
ings, are shown in the appendix.
6.2 Evaluation Method
Candidate definition sentences were presented to 6
human domain experts by a web interface display-
ing one sentence at a time in random order. Judges
were asked to rate sentences on a 5-point ordinal
scale with the following descriptors:10
5: The passage provides a precise and concise de-
scription of the concept
4: The passage provides a good description of the
concept
3: The passage provides useful information about
the concept, which could enhance a definition
10Example definitions at each scale point selected by the au-
thors were shown for the concept ?hidden markov model?.
61
DALSP
100,0%
80,0%
60,0%
40,0%
20,0%
0,0%
21,6727,33
18,1715,33
32,5026,17
16,3316,00
11,3315,17
1
2
3
4
5
Rating
Figure 1: Distribution of ratings across the 5 scale points;
LSP: lexico-syntactic patterns, DA: deep analysis
2: The passage is not a good enough description
of the concept to serve as a definition; for in-
stance, it?s too general, unfocused, or a subcon-
cept/superconcept of the target concept is de-
fined instead
1: The passage does not describe the concept at all
The judges participating in the rating experiment
were PhD students, postdoctoral researchers, or re-
searchers of comparable expertise, active in the ar-
eas of computational linguistics/natural language
processing/language technology. One of the raters
was one of the authors of this paper. The raters were
explicitly instructed to think along the lines of ?what
they would like to see in a glossary of computational
linguistics terms?.
6.3 Results
Figure 1 shows the distribution of ratings across
the five scale points for the two systems. Around
57% of the LSP ratings and 60% of DA ratings fall
within the top three scale-points (positive ratings)
and 43% and 40%, respectively, within the bottom
two scale-points (low ratings). Krippendorff?s or-
dinal ? (Hayes and Krippendorff, 2007) was 0.66
(1,000 bootstrapped samples) indicating a modest
degree of agreement, at which, however, tentative
conclusions can be drawn.
ILP
CRF
SVM
LSA
CCG
LFG
PCFG
DRT
DRS
PSMT;PBSMT
SMT
MDS
WSD
SRL
coref. resolution
cond. entropy
cos similarity
MI
DU
CL
Mode ratings
54321
DALSP
Method
Figure 2: Mode values of ratings per method for the indi-
vidual domain terms; see Table 4
Figure 2 shows the distribution of mode ratings
of the individual domain terms used in the evalua-
tion. Definitions of 6 terms extracted using the LSP
method were rated most frequently at 4 or 5 as op-
posed to the majority of ratings at 3 for most terms
in case of the DA method.
A Wilcoxon signed-rank test was conducted to
evaluate whether domain experts favored defini-
tional sentences extracted by one the two methods.11
The results indicated no significant difference be-
tween ratings of definitions extracted using LSP and
DA (Z = 0.43, p = 0.68).
Now, considering that the ultimate purpose of the
sentence extraction is glossary creation, we were
also interested in how the top-ranked sentences were
rated; that is, assuming we were to create a glossary
using only the highest ranked sentences (according
to the methods? ranking schemes; see Section 6.1)
we wanted to know whether one of the methods pro-
poses rank-1 candidates with higher ratings, inde-
pendently of the magnitude of the difference. A sign
test indicated no statistical difference in ratings of
the rank-1 candidates between the two methods.
11Definition sentences for each domain term were paired by
their rank assigned by the extraction methods: rank-1 DA sen-
tence with rank-1 LSP, etc.; see Section 6.1.
62
7 Conclusions and Future Work
The results show that both methods have the poten-
tial of extracting good quality glossary sentences:
the majority of the extracted sentences provide at
least useful information about the domain concepts.
However, both methods need improvement.
The rating experiment suggests that the concept of
definition quality in a specialized domain is largely
subjective (borderline acceptable agreement overall
and ? = 0.65 for rank-1 sentences). This calls for
a modification of the evaluation methodology and
for additional tests of consistency of ratings. The
low agreement might be remedied by introducing
a blocked design in which groups of judges would
evaluate definitions of a small set of concepts with
which they are most familiar, rather than a large set
of concepts from various CL sub-areas.
An analysis of the extracted sentences and their
ratings12 revealed that deep analysis reduces noise in
sentence extraction. Bootstrapping, however, yields
more candidate sentences with good or very good
ratings. While in the present work pattern refine-
ment was based only on verbs, we observed that also
the presence and position of (wh-)determiners and
prepositions might be informative. Further exper-
iments are needed 1) to find out how much speci-
ficity can be allowed without blocking the patterns?
productivity and 2) to exploit the complementary
strengths of the methods by combining them.
Since both approaches use generic linguistic re-
sources and preprocessing (POS-tagging, named-
entity extraction, etc.) they can be considered
domain-independent. To our knowledge, this is,
however, the first work that attempts to identify
definitions of Computational Linguistics concepts.
Thus, it contributes to evaluating pattern bootstrap-
ping and deep analysis in the context of the defini-
tion extraction task in our own domain.
Acknowledgments
The C-Value algorithm was implemented by Mi-
hai Grigore. We are indebted to our colleagues
from the Computational Linguistics department and
DFKI in Saarbru?cken who kindly agreed to partic-
ipate in the rating experiment as domain experts.
12Not included in this paper for space reasons
We are also grateful to the reviewers for their feed-
back. The work described in this paper has been
partially funded by the German Federal Ministry
of Education and Research, projects TAKE (FKZ
01IW08003) and Deependance (FKZ 01IW11003).
References
