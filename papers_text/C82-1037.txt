COLING 82, J. Horeckp (ed.) 
North-Holland Publishing Compa~ 
? Academia. 1982 / 
A SOFTWARE ENVIRONMENT FOR DEVELOPING NATURAL LAN~JAGE 
UNDERSTANDING SYSTEM 
Fumio Mizoguchi and Shozo Kondo 
Department of Industrial Administrat ion 
Science Univers i ty of Tokyo 
Noda 278, Chiba 
Japan 
This paper dea ls  with a software environment 
for developing the natural language understanding 
system. The system called Mult i -Layered Software 
Environment ( MLSE ) is proposed for providing a 
designer of a language understanding system with 
wide varieties of design alternatives in software 
components which derive from Computational 
Linguistics. The MLSE is a collection of module 
packages for building the tools for language 
understanding system. That is, by integrating the 
Computational Linguistics methods into the MLSE 
scheme, we have emphasized the layered approach to 
bui ld the software environment as the basis for 
developing the language understanding system. In 
order to i l lustrate the strategy of the MLSE 
scheme, we have discussed the case study for 
designing Question and Answering system. Based 
upOn this case study, we have developed a new 
language understanding system called Japanese Q & 
A system ( JQAS ) which was a product of the MLSE 
scheme. The MLSE has implemented in variety of 
LISPs such as Inter-Lisp on DEC-20 and Lisp F3 on 
IBM370. 
The JQAS has domain specif ic Q & A system 
for computer documentation and explanation system. 
I NTRODU CTI ON 
This paper is focussed on the necessary software 
environment for designing Natural Language Understanding ( NLU ) 
systems . Here,the notion of software environment is to provide a 
designer of an understanding system with wide varieties of design 
alternatives in software components which derive from the 
computational l inguistics methods. Therefore,the goal of this 
paper is to propose a scheme for the software environment which is 
appropriate for the design of a NLU system. In order to 
accomplish this goal, the Mult i -Layered Software Environment ( 
MLSE ) which we propose in this paper is described and implemented 
for the development of a NLU system. 
In order to bui ld a NLU program,we must formulate the 
problem to fit the existing tools of Knowledge Engineering, or 
bui ld the tools that will be applicable to the problem. For  this 
purpose, there have been a number of attempts to support these 
design activities such as E-LINGOL and ATN. As for knowledge 
representation, KRL, FRL, Unit  and RLL are proposed as general 
purpose semantic representation systems. If the tools for NLU 
233 
234 F. MIZOGUCHI and S. KONDO 
systems are su i table  to the problem domain, the necessary  task of 
the designer is to select  the best  tool among them and to 
formulate  the proble m in terms of the format which are spec i f ied  
in the tool. Problably,  this design process is h ighly dependent  
upon the sof tware or tool which is appl ied to the problem. Then, 
the design act iv i t ies  wil l  focus on how to formulate  the "Domain 
Semant ic"  in NLU. 
SOFTWARE ENVIHON~.ENT 
The present  study proposed to support  the design of natural  
language unders tand ing  system by cons ider ing the fo l lowing 
components.  
i. As the bas ic  implementat ion  language, we select  Lisp F3 
wr i t ten in FORTRAN which is not machine dependent.  Our comput ing 
fac i l i t ies  are both IBM 3031 of the Sc ience Un ivers i ty  of Tokyo 
and M200 of the Tokyo Un ivers i ty  of Computer  Center. However,  the 
implementat ion  is carr ied out by  In ter -L i sp  of DEC-20. 
2. The necessary  Lisp funct ions are deve loped by the F3 
users.  As a result,  the user  of Lisp F3 can extend the fac i l i t ies  
of Lisp funct ion  to meet his requirements.  The Lisp system at 
this stage inc ludes the same level of Inter-L isp.  
3. In order to support  the coding and debugging, we have 
des igned the pret typr in t  and zoom editor  as usefu l  funct ions.  
These funct ions are cons idered as the pr imi t ive  funct ions for 
developing the modules l ibrary. 
4. There are a number of module  programs which are further  
developed into sub-components  of the Computat iona l  L inguist ic .  
These programs are main ly  parser, generator  and semant ic  
representat ion  system. 
5. The natural  language unders tand ing  system,espec ia l ly ,  
Quest ion  & Answer ing  system is deve loped by combining these 
modules with schedul ing  funct ion which is ca l led Agenda. 
There fore , the  design of Agenda is important  part  for developing 
the var ious control  s t ructures which deal wi th  language process-  
ing. 
TO develop these several  components,  we have prepared  the 
scheme cal led MLSE which is shown in F ig. l .  MLSE consists of f ive 
layers which correspond to the above components.  
The main layers f rom CLL to UFL  in F ig . l  are the basis for 
developing the rest of two layers which are regarded as a tool 
level for natural  language unders tand ing  system. In case of a 
Module  Package Layer( MPL ), there are two kinds of program 
packages. One is a co l lect ion of module  programs for pattern 
matchers which are fur ther  served as components of parser,  
generator  and F rame base system. These pattern match ing modules 
can treat a var iety  of data structures f rom Lisp bas ic  data to 
user def ined data such as F rame and semant ic  nets. The other is 
der ived f rom the pre-ex is t ing  tools such as natural  language 
inter face and knowledge representat ion  system. In this respect,  
we have deve loped ATN base semant ic  nets system for Japanese.  
Therefore,  MPL is a large co l lect ion of tool module program from 
components to tool levels. These modules are cons is tent  in coding 
style which is usefu l  for a not ion of module l ibrary. 
The top level of the layer is ca l led Language Unders tander  
Layer ( LUL ) which is bu i l t  as domain spec i f i c  language 
process ing system. The LUL is the language system which is 
implemented by us ing the components of MPL with user 's  def ined 
main program. That is, by us ing the package programs f rom MPL, we 
SOFTWARE ENVIRONMENT FOR AN NLU SYSTEM 235 
can deve lop  the domain  spec i f i c  too l  fo r  the language process ing  
system.  In  the  scheme,  LUL  is in tegrated  in to  the spec i f i c  
knowledge  base  sys tems such  as Sys tem- l ,  Sys tem-2  ... and  so  on. 
The  sys tem cor responds  to the ac tua l  Q & A system.  
The  present  imp lementat ion  is car r ied  out  fo r  des ign ing  
Japanese  Q & A sys tem for  ins t ruc t ing  computer  documentat ion  
system.  That  is, JQAS is a k ind  of ins t ruc t iona l  sys tem for  
suppor t ing  the user ' s  documentat ion  and  re t r ieva l  of necessary  
in fo rmat ion  on MLSE programs.  
l~%gu~je :3nderstander i~wer 
/ ,  ( r / 
('.~L) Language System designer 
PrOCessor f l  _ _  f l  ComputationalLisp_FunctionLinguistics Progr~ns 
F~P~ , 
h~F- -  .h I 
oti,..~=ti= / Q---o-O ,~ o/oti,...~.o~. 
~ ~ v ~ ~ EDITF  , EDITS , PP ~ gOON 
! 
DE , DF 
a,lqic FUnctiC., 0 I ? fO\ ~0 prj2aiti%~-Fu~ctior~ 
/A  \2! \ 7 "?=-"" 
I 1 ,  , 
CAR , I I ,  R , O0~lS , 
f t r l "  , G '~P . . . .  
. . . . . . . . . . .  k . . . . . . . . . . . . . . . . . . .  
C~oe 
Lanqu,Ne I.~y~r F3-Lisp or ( Inter-Lisp , MAC-Lisp ) 
Fig.l A Sr~ne for Mult/-l~yered Software Environment 
236 F. MLZOGUC~ and S. KONDO 
Sol t~'4~e i'ackage 
\ 
( LISP functions ) 
Module Pr~graus for : 
Parsing System 
Natural Language Inference 
eslgne 
I 
I ~ Donain Specific 
Control Mechanism 
(Knowledge Base-2 ) Mossagos 
List of Variable 
Content of Function 
Date of coding 
MOdification Date 
Code 
Module Library 
Name of Function ~ Core + Modules~ 
Tool of Domain 
Test and !l 
Modification Phase 
Fig.2 Design Process for NLU System 
SOFTWARE ENVIRONMENT FOR AN NLU SYSTEM 237 
DESIGN PROCESS 
The design process within MLSE is described by the scheme 
which is shown in Fig.2. This scheme is obtained from the 
general ization of the design process in an interactive system by 
introducing the notion of " shared package user's group " that 
have the common files and uti l ize the basic componets of a NI/J 
program. As is shown in Fig.2, the activities are divided into 
three parts. 
The first is program packages which consist of various 
program modules for computational l inguistic methods. These 
modules include the components for a paser and a knowledge 
representation system. 
The second is the shared package user's group that 
develops cooperatively the NLU system. The communication among 
the group is made by the use of a mail system. 
The third corresponds to the construction of NLU system by 
using the modules programs. This implementation is carried out by 
combining the package into the core program which fits the purpose 
of the NLU system. If there are  some changes in the package 
program,then the user must accept the message on the code 
modif ication by documentation. 
The entire design process is usual ly step by step in order 
to meet the requirement of a given problem domain. Therefore, 
there are a number of messages passing among the designers to 
accomplish the knowledge base system. This feedback loop is 
described in terms of a testing and modif ication phase in Fig.2. 
Probably, the main activities of this process are to document the 
mo~11e library which is  a collection of LISP code, name of 
function, list of variable,coding date and so on. By looking at 
these documentations, the designer can bui ld the domain specif ic 
tool without constructing the common programs for a NLU system. 
CASE STUDY TO DEVELOP SIMPLE AGENDA SYSTEM 
In this section, we shall show details of how to bui ld the 
tools by using components within the MLSE scheme? The tools that 
we have selected as case studies are a design of various Agenda 
systems? We believe that agenda is one of the important system 
for bui lding a NLU system. 
Let us start with the first example of simple agenda system 
which is shown in Fig.3. In this flow chart, the agenda system 
operates within a control mechanism called the matching-act cycle. 
In matching, it finds the rule to be executed, and in action it 
executes this rule which is described by the action sides of the 
rule form. The matching-act cyle is repeated until either no rule 
can be found or an action element of rule will stop the process- 
ing. The LISP code of this f low chart is shown in Fig.3. The 
definition called PS-TOP is the function for dealing with the 
matching-act cycle in the agenda system. Although this coding 
example is simple, the design of agenda system is started in this 
way. In this coding, the other functions are not included, but it 
is clear in order to show the Control structure of agenda system. 
Therefore, this example is regarded as the basic component of 
agenda system. 
238 F. MIZOGUCHI and S. KONDO 
Return to 
the first rule set.I I ~= 
~ ~  "i" =\[ Replace Jby 
next rule set. 
<PS-TOP 
( LAMBDA NIL 
(* PS-TOP CONTROLS SYSTEM FLOW OF puRE PRODUCTION SYSTEM) 
(PROG (RULES MODEL RULES* DB RULE RULE-NAME) 
LOOP1 
(START) 
LOOP2 
(SETQ RULES* RULES) 
LOOP3 
<COND ( (NULL RULES*) 
(COND ((END) (GO LOOP1)) {T (RETURN N IL> 
(SETQ RULE (CAR RULES*)) 
(SET~ RULE-NAME (CAR RULE)) : 
(* IF PATTERN-MATCH-DB RETURNS TRUE , ACTIONS OF THE MATCHED RULE 
IS ACTIVATED) 
(COND ( (PATTERN-MATCH-DB (CADR RULE) ) 
(ACTIVATE-ACTIONS (CAR (CDDDR RULE) ) ) 
(PRINT-RESULT) 
(GO LOOP2) ) ) 
(SETQ RULES* (CDR RULES*)) 
(GO LOOP3) ) ) > 
F ig .3  A f low chart for control  s t ructure  of a s imple  agenda system 
and LISP code 
CONCLUSION 
AS for the scheme of sof tware env i ronment  to meet  the 
requi rements  for a design of NLU sys tem,  we have proposed  a f ive 
layered env i ronment  which has h ierarchica l ,  mul t i - leve l  s t ructures 
of sof tware systems. The scheme is ca l led MLSE and these 
character is t ics  are fo l lowing:  
i. There exists the core language which served as the 
assembly  language in NLU systems. In this case, LISP is selected.  
2. In case of des igning the NLU systems, the u t i l i ty  
funct ions such as s t ructura l  and zoom editor  are some of the 
important  funct ions.  In this respect,  L ISP is a l ready deve loped 
in these funct ions.  These fac i l i t ies  are important  to develop the 
module  packages.  
3. There exists a number of NLU module  packages which  may be 
fur ther  used  as the components of tools. 
We be l ieve that these three character is t ics  are app l icab le  
for des igning NLU system. 
REFERENCE 
Winograd ,T . "Language as a cogni t ive process"Read ing ,Mass . :Add ison-  
Wes ley , (draf t ) .  
