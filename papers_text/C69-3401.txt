ABSTRACT 
REL, Rapidly Extenslble Language System, permits a variety of 
languages to coexist within a single computer system. Here the term 
"language" is understood to include a particular data base. New lan- 
guages may be defined by constructing a new base language with its 
syntax and semantics, by extending the terminology from a given base 
level in order to reflect specific concepts, or by associating a given 
base language with a certain data base. 
REL consists of an operating environment, a language processor, 
and the set of currently defined languages. The structural properties 
of these languages which determine the characterization and organization 
of the language processor are described. In particular, representation 
and manipulation of syntax and semantics are discussed, the mechanism 
of language extension is outlined, and the concept of a generator is 
introduced. 
I. INTRODUCTION 
Language plays a twofold role. For an individual, or a group of 
individuals with some common interest, it establishes a framework within 
which to express the structuration of their experience and conceptuali- 
zation of their environment. In a social organization it provides the 
conventions through which these individuals or groups exchange and relate 
their views. In this second role, language facilitates communication 
between co--,unitles with divergent interests. In its first role lan- 
guage supports the creative process within a given conununlty. St becomes 
highly idiosyncratic and dynamic in nature as the community, or individual 
develops distinctive and specific concepts~ and continuously reconciles 
them with further observations of its environment. 
In such a community, the computer functions as an external memory 
which allows efficient and rapid presentation end organization of its 
stored information according to the various concepts developed. Since 
these concepts are expressed in a highly specific language, one must be 
able to converse with the computer in that very language. REL, a Rapidly 
Extenslble Language System~ is a conversational computer system designed 
for these purposes \[1\]. REL provides a community with a base language 
suitable to its own interests. As the co~nunity develops the conceptual 
structure which deals most efficiently with its environment, it constructs 
/ ! 
recurs ive ly  f rom the  base  leve l  a h ie rarchy  o f  new terms or  ad jus ts  
them. S ince  the  conceptua l  s t ruc ture  i s  determined  by observat ions  
o f  the  env i ronment  ( the  "data" ) ,  so i s  the  language.  Language and 
data  thus  become c lose ly  in ter re la ted .  I f  chosen  appropr ia te ly ,  the  
base  language w i l l  remain  invar lant  and a l l  conceptua l  changes  w i l l  
be re f lec ted  in  i t s  ex tens ions .  
REL i s  des igned  to suppor t  a la rge  number o f  d iverse  groups .  As 
a consequence ,  i t  must  be ab le  to  hand le  a la rge  var ie ty  o f  languages .  
E f f i c iency  cons iderat ions ,  as  we l l  as  the  necess i ty  fo r  easy  fo rmat ion  
and extens ion  o f  a par t i cu la r  language suggest  that  a s ing le  processor  
be prov ided  wh ich  dea ls  w i th  a l l  the  implemented languages .  In  o rder  
to  determine  the  prec i se  nature  o f  the  language processor  we must  
deve lop  a s t ruc tura l  descr ip t ion  o f  language .  Th is  descr ip t ion ,  in  
tu rn ,  w i l l  spe l l  out  the  deta i led  o rgan izat ion  o f  the  language pro -  
cessor .  I t  i s  these  quest ions  that  the  present  paper  w i l l  concern  
itself with. 
2. LANGUAGES AND LANGUAGE PROCESSOR 
We sha l l  base  our  s t ruc tura l  descr ip t ion  of  a language on the 
formal ism presented  ear l ie r  by F. B. Thompson \ [2 ,3 \ ] .  I t  pos tu la tes  a 
one- to -one  correspondence between the syntact i c  and semant ic  aspects .  
A language re fers  to some domain of  d i scourse  cons is t ing  of  ob jec ts  
and relationships among them. One can order the objects and relation- 
ships into a finite number of sets, or "semantic categories" according 
to their structural properties. As a practical example, the ordering 
may he with respect to representation within the computer memory. 
There exist certain "transformations" mapping categories to categories; 
these deal wlth the structural properties of the sets and apply to 
any of their elements. On the syntactic level, the equivalent of 
categories and transformations are the syntactic classes ("parts 
of speech") and rewrite rules of the grammar. A particular composition 
of rules in the graummr (a parsing tree) corresponds to a particular 
composition of underlying transformations. The meaning of a sentence 
is the effect of a given sequence of transformations on the domain of 
discourse. 
The language processor is designed to handle these "formal languages". 
Even though the majority of the languages in the system can be expected 
to evolve from a relatively small set of base languages, the language 
processor must provide for languages with diverse characteristics. Our 
definition of formal language spans a large variety of grmmnars, ranging 
f rom those  that  a re  easy  to  descr ibe  to  o thers  that  a re  d i f f i cu l t  to 
character i ze  in  a conc ise  fash ion .  How much o f  th i s  spect rum shou ld  
be covered  by the  language processor?  In  o ther  words ,  how complex 
shou ld  i t s  a rch i tec ture  be? I f  we push  i t s  des ign  towards accommo- 
dat ing  the  ent i re  spect rum,  the  language processor  w i l l  be very  ine f f i -  
c ient  in  dea l ing  w i th  fo rmal ly  s imp le  languages  because  i t  would 
constant ly  have to t reat  aspects  per t inent  to  on ly  a few complex 
languages .  I f  we were to  ta i lo r  the  processor  to  e f f i c ient  man ipu la t ion  
o f  languages  o f  l i t t le  complex i ty  we would l im i t  the  express iveness  which  
any language w i th in  the  sys tem cou ld  a t ta in .  We chose  a compromise - -  
a so lu t ion  in  which the  language processor  dea ls  w i th  those  s t ruc tura l  
p roper t ies  that  a re  common to the  major i ty  of  what  we cons ider  in -  
te res t ing  languages ,  and which  are  s imp le  to  fo rmal i ze  in  te rms  of  the  
demands on computer  memory, and complex i ty  o f  p rograms.  The remainder  
o f  th i s  paper  spec i f ies  and d i scusses  these  proper t ies .  On the  o ther  
hand ,  a l l  i n fo rmat ion  regard ing  the  present  s ta te  and h i s to ry  o f  the  
sentence  ana lys i s  i s  made ava i lab le  to  any language.  Languages  w i th  
specific characteristics are thus  allowed to perform certain steps in 
the analysis, and change the status of the analysis, on their own. 
The compos i te  o f  syntact i c  ru les  and under ly ing  t rans format ions  i s  
a " language s t ruc ture" .  Language i s  the  comblnat lon  o f  the  language 
s t ruc ture  and a par t i cu la r  data  base  w i th  ob jec ts  and re la t ionsh ips .  
The language processor  dea ls  w i th  a language 'on ly  in  te rms  o f  i t s  s t ruc ture  
and i s  ent i re ly  d ivorced  f rom the  data .  The language i t se l f t  th rough i t s  
t rans format ions ,  i s  respons ib le  fo r  car ry ing  out  a l l  the  w~mlpu la t lons  
o f  i t s  data .  
3. ANALYSIS OF A SENTENCE 
The c lose  cor respondence  between the  syntact i c  and semant ic  
aspects  o f  a language suggests  a syntax -d l rec ted  ana lys i s .  The 
syntact i c  ana lys i s  o f  a sentence  prov ides  c lues  as  to  the  semant ic  
t rans format ions  to be app l led~ the i r  combinat ion  and sequence .  Thus 
sentence  ana lys i s  p roceeds  in  two major  s tages ,  syntact i c  ana lys i s  
and semant ic  in terpreta t ion .  
The syntact i c  ana lys i s  i t se l f  cons i s ts  o f  th ree  phases  per fo rmed 
in  success ion :  (1) pars ing ,  (2) feature  tes ts ,  and (3) syntax  comple-  
t ion .  The f i r s t  examines  the  phrase  marker  accumulated  so fa r  in  
o rder  to  determine  whether  a new ru le  o f  grammar can be app l ied  to  
some por t ion  o f  i t .  The second phase  i s  suggested  by the  fac t  that  
r i ch  languages  may inc lude  a la rge  number o f  s t ruc tura l  ca tegor ies  
and,  consequent ly ,  a h igh  number o f  grammar ru les .  I t  i s  o f ten  poss ib le  
to  es tab l i sh  categor ies  whose s t ruc tura l  p roper t ies  d i f fe r  on ly  in  
minor  respects ,  and to group them in to  more comprehens ive  sets .  For 
example ,  cons ider  the  s ingu lar  and p lu ra l  forms o f  a noun.  Par ts  o f  
speech w i l l  denote  such  sets  o f  ca tegor ies ,  e .g .  "noun" ;  a par t  o f  
speech  may then  be qua l i f i ed  by " features"  (N. Chomsky \ [4\])  accord ing  
to  the  spec i f i c  character i s t i cs ,  e .g .  s ingu la r  or  p lu ra l .  Fur thermore ,  
e lements  in  a g iven  category  must  o f ten  by subcategor i z led  in  te rms  o f  
the i r  ana ly t i ca l  character i s t i cs .  Take as an example the  precedence  ru les  
govern ing  the sequence of  a r i thmet ica l  operat ions  on numbers.  Features  
can serve  th i s  purpose  as well. 
As a consequence,  a ru le  of  g rammr i s  expressed  in  terms of  
par ts  of  speech ,  and may be ass igned subru les  operat ing  on features .  
This  o f fe rs  two d is t inc t  advantages .  F i r s t ,  the number of  ru les ,  and 
wi th  i t  the amount of  search ing  necessary ,  i s  reduced cons iderab ly .  
Second, many ru les  need not  d i s t ingu ish  among a l l  the categor ies  in  a 
set  so that  the to ta l  number of  grammar u les  and subru les  i s  less  than 
the number of  ru les  had no features  been employed. In  many pract i ca l  
cases, subrules assume an extremely simple form. If a feature can be 
expressed as a binary choice, then for all features being mutually 
independent the subrule may be formulated as "the grammar rule applies 
if, for each of its parts of speech, all features in a given llst hold 
and all in a second llst do not hold." In other words, the subrule may 
be expressed in form of two bit maps per part of speech, one identifying 
the features which must hold, the other specifying those which must not 
hold; features not referred to in either map are ignored. 
I f  the subru le  assumes a more compl icated form, the language pro -  
v ides  an exp l i c i t  program, the "syntax  complet ion"  rout ine ,  to accompl ish 
the ana lys i s  necessary .  Such a program may a lso  be needed to per form 
aspects  of  the syntact i c  ana lys i s  not  covered by the language processor .  
Indeed,  each ru le  has i t s  syntax  complet ion par t  to determine the syntact i c  
por t ion  of  the resu l t ,  poss ib ly  on the bas is  o f  i t s  a rguments .  
A node in the phrase marker denotes either a "phrase" or a funetlon 
symbol. A phrase consists of syntactic information (part of speech and 
features), and a semantic interpretatlonwhich for the time being we 
assume to describe a particular element in the category denoted by the 
syntax. In a string matched by a rule of grmmmar, the phrases constitute 
the arguments of the corresponding rule while function symbols only serve 
the purpose of identifying the rule. For example, in the string 
N + N (N - part of speech "number") the N constitute the arguments of 
the rule N---->N + N I, and "+" is a function symbol. Thus syntax comple- 
tlon and semantic transformation are functions mapping categories to a 
category, and individual objects to an obJect~ respectively. The syntax 
completion furnishes the syntactic portion of the resulting phrase~ the 
transformation determines its interpretation. 
In many languages, the rules will be context-free, that is, of 
the form a---~bl...b n. For more interesting languages, we may expect 
the granmmr to include general rewrite rules of the form al...am---~ bl...b n. 
Since the combination of syntax completion and semantic transformation 
gives rise only to a single phrase, the language must provide an 
This notation is referred to as "generative". In the remainder of 
this paper the terms "left-hand side" and "right-hand side" refer to 
this form. 
/ 
Indlvldual pair for each a i. 
Sentence analysls consists of repeated applications of the four 
steps:recognlt lon of a rule (parsing), feature subrule, syntax comple- 
tion, and semantic transformation. Since the language processor accepts 
general rewrite rule grammars, the primary objective in parsing is to avoid 
any redundant analyses, that is, repetitions of portions of the analysis. 
This is achieved by means of a very elegant algorithm due to Martin Kay 
and adapted to our purposes. Basically, parsing is slngle pass, right-to- 
left 2, bottom-to-top; all analyses of a sentence allowed by the grammar 
are produced. 
The details of the algorlthm cannot be discussed here. Let us 
briefly indicate that it achieves its objectives by means of dummy 
nodes; the connections between these nodes carry the phrases or 
function symbols. This is shown in figure i. The analysis at any 
stage is described in terms of a directed graph. The parser explores 
all possible paths through the graph from a given node to its right 
before advancing to the next node to the left. The result of a rule 
is inserted as a new connection, or, in case of a general rewrite rule, 
as a sequence of nodes and connections. If several phrase markers 
develop they cannot be distinguished and are only recoEnlzed by the 
fact that more than one successful analysis is observed. Likewise, 
I 
2 The parser organization is symmetric and could easily be changed 
to left-to-rlght direction. 
10 
pars lngs  that  did not  cont r ibute  to  the f ina l  ana lyses  appear  in  the 
graph in  the same way as those that  did cont r ibute .  
So far we implied that syntax and semantics for a given rule are 
performed simultaneously; syntactic and semantic analysis proceed "in 
parallel". A rule may not only fall to apply on syntactic grounds but on 
semantic grounds as well. Its arguments may not map into any object; the 
path matched by the rule is meaningless. As a consequence~ by simultaneously , 
considering the semantic aspects the size of the parsing graph may he 
kept considerably below what it would otherwise he, with concomitant 
reduction in parsing time. On the other hand, spurious parsings may not 
be recognized i~mediately but only after they participated in the analysis 
to considerable extent. The corresponding transformations may often be 
complex end tlme-consumlng, especially when manipulating large-slze 
data bases. Many of these parsings are finally excluded on syntactic 
grounds. Unnecessary execution of such transformations can be avoided 
by postponing the semantic analysis until the syntactic analysis has 
been completed; in this case syntactic and semantic analyses are per- 
formed "serially". The decision as to which alternative is the appropriate 
one under given circumstances is made by the language itself; it 
notifies the language processor of its choice? 
A statement entered into the system must be converted into a form 
suitable for analysis. In turn, the result of the analysis must be 
I I  
re turned  to  the  user  in  in te l l ig lb le  form. Nost languages w i l l  w ish to 
t reat  some aspects  of  input  and output  in  a spec i f i c  way. For example,  
p re -ed?t lng  of  the s ta tement ,  o r  subst i tu t ion  of  lex lca l  i tems may be 
des i red  pr io r  to ana lys i s .  On output ,  the language may examine the 
pars ing  graph fo r  success fu l  ana lyses ,  t reat  s t ruc tura l  ambigu i t ies  
appropr ia te ly ,  or  in i t ia te  the execut ion  of  postponed semant ics .  As a 
consequence,  input  and output  rout ines  are  par t  o f  a language,  as ide  
from some bas ic  serv ices  prov ided by the system.  
F ig .  2 summarizes the bas ic  o rgan izat ion  of the language processor  
as d i scussed  in  th i s  sect ion .  
12 
4. COMPILATION AND LANGUAGE EXTENSION 
When postponing the semantic analysis, the language processor 
must "compile" information during the syntactic analysis which enables it 
to perform the appropriate semantic transformations in the correct sequence, 
Since the syntactic analysis reflects the individual transformatlonsD and 
the sequence in which they are to be combined, the compiled information 
contains a list of transformations in precisely the order in which their 
corresponding rules applied. Transformations require arguments, hence 
the compiled information must also contain a llst of those. 
A list of transformations associated wlth a phrase marker repre- 
sents that portion of it whose semantic analysis must still be performed. 
In the example figure 3, this portion is marked by broken lines. Now 
consider the phrase marker in terms of the semantic analysis alone. 
By removing all broken lines and the nodes they connect to, one obtains 
the present status of the semantic analysis. The remainder of the analysis 
must, clearly, be performed on all those symbols which do not have an 
ancestor in the tree, excluding, of course, function symbols since they 
do not participate as arguments. Because transformations expect their 
argtunents in left-to-rlght order, the phrases are listed in that very 
order. Figure 4a shows the compiled information for the given example. 
13 
After a step in the semantic analysis has been carried out, the 
compiled information must  reflect the new status of the analysis. Thus 
in figure 4b transformation T/ has been executed, "adding" node~ to 
the phrase marker. Correspondingly, T/ has been removed from the 
lufo~tlo,  n i le phrases ~3 and ~ have been substituted by phrase ~ 
Figures 4c,d illustrate this process through the subsequent two steps. 
The semantic analysis is completed when no transformation is left; the 
llst of arguments has been reduced to a single element, the result. 
The arguments of a particular transformation are identified by their 
total number, and their position in the list of arguments. These 
specifications remain unchanged during successive steps because of 
the strict rlght-to-left order of the analysis. 
I f  no spur ious  pars iugs  were ever  found dur ing syntact i c  ana lys i s ,  
and the poss ib i l i ty  of s t ruc tura l  ambigui ty  could be exc luded,  the 
language processor  would have to ma inta in  only a s ing le  compiled in fo r -  
mat ion and update i t  for  each ru le  which did not  fa i l  on syntact i c  grounds.  
Since usua l ly  that  i s  not the case ,  each phrase in  the pars ing  graph 
car r ies ,  in  p lace  of  i t s  in te rpreta t ion ,  the compiled in fo rmat ion  re f lec t -  
ing the ana lys i s  which gave r i se  to i t  and which, i f  executed,  de l ivered  
the ac tua l  in te rpreta t ion  of the phrase .  Whenever a ru le  app l ies ,  the 
resu l t ing  phrase rece ives  a new compiled in fo rmat ion  der ived from that  
of each of i t s  arguments ,  and the character i s t i cs  of  the present  ru le .  
14 
Our discussion so far did not distinguish between gr--,--r rules 
constituting the base level of the language and those which are its 
extensions. The base level, being the invariant portion of the language, 
cannot be changed in the conversational mode. Its syntax completions and 
transformations are computer programs which determine the structural cate- 
gories as well as the "primitive" operations on them. Extensions are 
recursively constructed from the base level in conversational mode. 
There are  two extreme pos i t ions  fo r  hand l ing  extens ions ,  (1) 
s t r ing  man ipu la t ion ,  or  (2) compi la t ion  in to  some bas ic  notat ion ,  fo r  
example the base leve l  of the language.  In  the f i r s t  case ,  a def ined 
s t r ing  of  symbols i s  always rep laced  by the s t r ing  o f  symbols which 
const i tu tes  i t s  de f in i t ion .  Redef in i t ion  of  a term e f fec t ive ly  propa-  
gates  to redef ine  a l l  terms d i rec t ly  or  ind i rec t ly  der ived  from i t .  
However~ i f  the h ie rarchy  of  compounded extens ions  i s  deep there  i s  
excess ive  expans ion  of the or ig ina l  s t r ing  w i th  concomitant  cos t  in  
pars ing  t ime. I fp  on the o ther  hand,  the extens ion  i s  compiled down 
to  the base  leve l  a redef in i t ion  cannot propagate .  We have chosen a 
compromise pos i t ion  that  incorporates  most of  the advantages  of  both :  
syntact i c  ana lys i s  i s  car r ied  out  whi le  the semant ics  are  postponed.  
Hence the  semant ic  aspects  of  a new term are  determined by the t rans -  
fo rmat ions  of  the terms which are  d i rec t ly  re fer red  to in  i t s  de f in i -  
t ion ,  be they base leve l  or  extens ion  terms.  At the  same t ime,  th i s  
compromise pos i t ion  i s  ident ica l  to the compi la t ion  scheme in t roduced 
above, permi t t ing  use of  th i s  scheme for  language extens ion  as we l l .  
the 
15 
The language processor  shou ld  t reat  base  leve l  and extens ion  ru les  
a11ke.  Indeed ,  one can ident i fy  the  syntax  complet ion  rout ine  and 
semant ic  t rans format ion  fo r  an extens ion  ru le .  Both a re  obta ined  by 
ana lyz lng  the  de f in ing  express ion .  For example ,  in  the  extens ion  
f (x ,y )  : x * x + 4 /y  
the  syntax  fo r  the  le f t -hand  s ide  o f  the  new ru le  i s  g iven  by the  syntax  
o f  the  phrase  dominat ing  the  express ion  "x * x + 4 /y" ;  syntax  complet ion  
s imp ly  reproduces  th i s  por t ion .  The new t rans format ion  co inc ides  w i th  
the  compi led  in fo rmat ion  fo r  the  express ion .  
In general, an extension rule will again be a function on some 
arguments with given structural properties. In the example above, the 
t rans foz~mt ion  fo r  f (x ,y )  operates  on any pa i r  of  ob jec ts  from the  
categor ies  descr ibed  by  x and y .  Hence x and y a re  ent i re ly  syntact i c  
in  nature ;  they  represent  spec i f i c  s t ruc tura l  ca tegor ies  but  have no 
in terpreta t ion .  They are  the  " f ree  var iab les"  in  the  de f in i t ion .  
Var iab les  serve  two purposes  in  an extens ion .  
( i )  They determine  the  r ight -hand  s ide  of  the  new ru le .  The cate -  
gor ies  they  represent  a re  descr ibed  by par t  o f  speech  and 
features .  The par t  o f  speech  determines  the  sequence  o f  
symbols  in  the  ru le ;  fo r  example ,  i f  x and y a re  number 
i 
var iab les ,  the  ru le  reads  f (N ,N) .  The features  spec i fy  the  
subru les .  
16 
(2) In the compiled in fo rmat ion ,  argument l i s t  e lements  which 
correspond to var iab les  have no in terpreta t ion .  They rece ive  
the in terpreta t ion  on "de f in i t ion  expans ion" ,  that  i s ,  before  
the semant ics  are performed on the given arguments.  There fore ,  
they must conta in  some key which re la tes  them to the cor res -  
ponding argument. This key i s  provided by the var iab les  which 
may thus  be cons idered as "p lace  markers" .  Suppose the pos i t ion  
of the argument in the rule serves as key. Then ~i' ~2' and 
in figure 4a have no interpretation and are labeled by i, i, and 
2, respectively. 
Certain decisions with regard to language extension, such as 
whether to reject certain definitions on the basis of their analysis, 
or how to deal with structural or other ambiguities, must be left to a 
language itself. Consequently, each language includes a base level 
rule which determines the result of an extension. The language pro- 
cessor merely performs the compilation, ensures that the new rule is 
stored in standard form, and controls subsequent definition expansion. 
A language may also employ the extension mechanism if it wishes to avoid 
the use of a lexicon, and instead enter the referent words identifying 
objects in its universe of discourse in the form of a grammar rule. In 
this case each character must be considered a function symbol. 
17 
5. GENERATORS 
We not ice  that  genera l  rewr i te  ru les  and def in i t ion  expans ion  have 
a proper ty  in  common. In  each case a l l s t  o f  funct ions  i s  g iven.  Each 
funct ion  i s  exerc i sed  in  tu rn ,  and the resu l t  of  each s tep  i s  u t i l i zed  
in  a manner which depends on ly  on the c r i te r ion  govern ing the  l i s t .  In  
" the  case  of  a genera l  rewr i te  ru le  the resu l t s  enter  the phrase  marker 
as a sequence of  phrases ,  wh i le  fo r  de f in i t ion  expans ion  they par t i c ipate  
in  subsequent  s teps .  
Th is  i s  an ins tance  of  a phenomenon known in  l i s t -p rocess ing  as 
"generat ion"  \ [5 \ ] .  The genera l  scheme of  generat ion  i s  shown in  f ig .  5. 
A generator  can be cons idered  a re la t ion  between two sets ,  an ordered  
set  ~of  a rguments ,  and a set  ~of  resu l t s .  In  the course  of const ruct ing  
the set  ~,  the generator  repeated ly  se lec ts ,  accord ing  to  some in terna l  
c r i te r ia ,  an e lement from a set  of  p rocesses  E, supp l ies  i t  w i th  an 
ordered  set  ~of  input  a rguments ,  and rece ives  an output  se t ,wh ich  i t  
may s imply  co l lec t ,  or  u t i l i ze  in  fu r ther  ac t ions .  Two cases  are  of  
special interest: 
(z) For each selection J, ~j ? ~; each process operates on the same 
set of elements, namely the set of arguments for the generator. 
Further, each successive selection of a process is independent of 
l 
previous ones; there is a llst of processes which are applied in 
turn until the llst is exhausted. Generators of this kind will 
be termed "operator generators". 
L 
18 
(2) There i s  only a s ing le  process ,  that  i s ,  ~= {p}. For each 
se lec t ion  ( "pu ls ing" ) ,  i t  i s  supp l ied  w i th  a set~ which i s  iden-  
t i ca l  to~,  except  that  one and the same element In~ i s  subst i tu ted  
on each pu ls ing .  Again, each success ive  se lec t ion  i s  independent  
of p rev ious  ones.  Generators  of  th i s  type w i l l  be denoted as 
"operand " generators  .
Under th i s  scheme, genera l  rewr i te  ru les  become an operator  gene- 
ra tor ;  each "elementary" syntax completion/transformatlon pair utilizes 
the arguments of the rule. Definition expansion exhibits some aspects 
of an operator generator, but the first condition (_ij = a) does not hold. 
However, it is the only generator of interest which does not fall into 
one of the two specified classes. 
There is a variety of other phenomena in languages that may con- 
veniently and efficiently be represented by generators: 
Ambiguity.  - -  More complex languages ,  and cer ta in ly  natura l  
languages ,  permit  loca l  ambigu i t ies  w i th in  a sentence ;  usua l ly  
these  are  reso lved  by cons ider ing  a wider  context  w i th in  the sentence .  
I t  i s  those  ambigu i t ies  that  we wish to deal  w i th ;  of  course ,  th i s  
inc ludes  the case of  an ambiguous entence .  Ambigu i t ies  a r i se  when a 
grammr inc ludes  severa l  ru les  w i th  ident ica l  r ight -hand s ides  which 
d i f fe r  in  the i r  feature  subru les ,  syntax  complet ions ,  or  semant ic  t rans -  
fo rmat ions .  The f i r s t  two cases  of  ambigui ty  are  syntact i c  in  nature ,  the 
th i rd  one semant ic .  A l l  th ree  are descr ibed  by operator  generators  
19 
since the same set of arguments is processed by a sequence of subrules, 
syntax completions, and/or transformations. Syntactic operator ambiguities 
can usually be resolved within limited contexts and on syntactic grounds. 
On the other hand, semantic operator ambiguity may render the meaning of 
the entire sentence ambiguous, and may be introduced deliberately in order 
to compare different concepts in a variety of situations. Ambiguity also 
arises when a transformation maps its arguments into more than one obJect~ 
thus associating various meanings with a given string. In the subsequent 
analysis, such ambiguous interpretations of phrases will act as an operand 
generator. On each pulsing, the transformation of an applying rule will 
be provided with a new interpretation. 
Numerical quantification. -- Central to many programming languages 
is the notion of a loop, often taking the form of a "do" or "for" state- 
ment. A given sequence of expressions is repeatedly executed, each time 
for a new value of one of its variables. Cumulative sum (~) and product 
(~) are other examples of operand generators in arithmetic languages. 
Linguistic quantification. -- In ordinary language we have such 
expressions as "all" or "some". In examining the sentence "Does some 
boy live in Boston?"~ one must consider each boy in turn until one is 
found which satisfies the condition, or all are checked negatively. 
Similarly, "what", "how many", "at least 3", e~c. are handled by 
operand generators. 
20 
An operand generator  thus  re fers  to aggregates  of  ob jec ts .  The 
ind iv idua l  ob jec ts  are  eva luated  in  the la rger  context  o f  a l l  or  par t  of  
the sentence ,  and the resu l t s  summarized in  accordance w i th  the par t i c t t la r  
p r inc ip le  character i zed  by the generator .  Except in  the case of  ambigu i ty ,  
such a pr inc ip le  must be exp l i c i t l y  expressed  in  the language.  Conse- 
quent ly ,  operand generators  enter  the ana lys i s  through a ru le  of  grammar. 
The cor respond ing  semant ic  t rans format ions  d i f fe r  from the ones d i scussed  
so fa r  in  that  they resu l t  in aggregates  ra ther  than s ing le  e lements  
w i th in  a semant ic  category .  However, the prev ious  cons iderat ions  s t i l l  
hold i f  we requ i re  a t rans format ion  to produce a s ing le  in terpretat ion  
fo r  the resu l t ing  phrase .  This in terpretat ion  may now be of a rb i t ra ry  
complex i ty ;  in  the case of  a generator ,  i t  may l i s t  a l l  a l te rnat ives ,  or  
a method to const ruct  them, and ident i fy  the par t i cu la r  generator .  
As a consequence,  the in terpretat ion  of  a phrase  a l so  conveys 
s t ruc tura l  p roper t ies  of  a language to the language processor .  I t  
may ident i fy  a s ing le  element ( "data" ) ,  a generator ,  o r  compiled 
in fo rmat ion ,  and s imi la r ly  may d i f fe rent ia te  between the base leve l  
and extens ions .  
At the t ime generators  are  encountered in  an ana lys i s  there  i s  
o f ten  insu f f i c ient  context  to sum up a l te rnat ives .  Hence the resu l t  
of generators  may aga in  be a generator  phrase .  A par t i cu la r  generator  
thus  propagates  through the ana lys i s  unt i l  i t  i s  in  a pos i t ion  to  
summarize the e f fec t  of  the a l te rnat ives  i t  in t roduced.  As an except ion ,  
21 
ambiguity does not summarize but excludes individual altern~tlves as they 
become meaningless in a given context. Among the operator generators, 
general rewrite rules add sequences of phrases to the phrase marker while 
syntactic ambiguity may introduce structural ambiguity. Semantic operator 
ambiguity, if not resolved, propagates through the subsequent analysis 
in form of an operand generator. 
Detection of a generator indicates to the language processor that 
the present stage of the analysis is to apply separately to each of its 
alternatives. On pulsing, the generator produces a new structural 
des~rlptlon of the environment to which the analysis is reapplled. 
Pulsing will therefore cause the language processor to recurse at its 
present stage. A separate portion of the language processor directs 
pulsing, establishes the new environment, and controls recursion. 
Figure 6 shows the updated language processor organization. 
A selected alternative may itself represent a generator; for 
example, on definition expansion or operator ambiguity a transformation 
may again consist of compiled information. Hence recursion may continue 
for several levels. Moreover, several generators may occur on a given 
level, for example, when several arguments of a rule are generator 
phrases. By accepting one generator at a time such cases are resolved 
into a sequence of recurslons. Generators thus cause the language 
processor to recurse to arbitrary depth. 
22 
The use  of  generators  ra i ses  a number of  in t r i ca te  i ssues  which 
we cannot  fu r ther  pursue  here .  The i r  t reatment  and i11ust ra t lon  by 
examples  must be reserved  fo r  fu ture  pub l l ca t lon .  
6. LANGUAGE STRUCTURES 
23 
In order to be able to analyze a sentence in a given language, the 
language processor must have access to a standardized description of 
the language. This description consists of two major components. 
1. Grammar tab le .  - -  Th is  conta ins  the r lght -hand s ides  of  a l l  
ru les  of  grammar. The ru les  are  organ ized  in  the form of  a "symbol 
t ree"  in  which a symbol i s  e i ther  a par t  of  speech or  a funct ion  symbol,  
a node car ry ing  a s ing le  symbol.  A ru le  cor responds  to a path  s tar t ing  
from the top;  the b i t  maps ident i fy ing  i t s  feature  subru les  are  
a t tached to  the las t  node in  the path .  The t ree  arrangement  matches the 
pars ing  s t ra tegy ;  as the parser  advances or  backt racks  in  the pars ing  
graph i t  per fo rms ident ica l  ac t ions  in  the symbol t ree .  
S ince pars ing  and feature  tes t ing  const i tu te  major funct ions  of  
language processor ,  i t  i s  advantageous to re ta in  the grammar tab le  in  
h igh-speed memory dur ing  the ent i re  ana lys i s  of  a sentence .  Even i f  
the  gram~aar tab le  i s  o r  becomes too extens ive ,  base leve l  ru les  
shou ld  cont inue  to  res ide  in  h igh-speed memory wh i le  extens ion  ru les  may 
be re legated  to per iphera l  s to rage  s ince  they rare ly  par t i c ipate  in  the 
ana lys i s  beyond the leve l  of the input  s t r ing .  In  such a case ,  however,  
s to rage  organ izat ion  must be such as to minimize the number of  re ferences  
I 
to per iphera l  s to rage .  
24 
2. Definitions. -- The remainder of a rule, syntax completion 
and semantic transformation, is generally too voluminous to be part of 
the grammar table. Therefore, it is maintained separately on peripheral 
storage, linked to the corresponding node in the grammar table. Defi- 
nltlons are of two kinds: 
(a) Base level rule. The definition, in principle, consists of the 
programs for syntax completion and transformation. For rules 
introducing generators into the analysis, it also includes the 
pulser. Since operator generators cannot be introduced by a rule 
of grammar, they are part of the language processor. 
(b) Extension rule. The analysis of the defining expression determines 
for the rule both the syntax of its result and its transformation. 
Entering a definition for an extension rule is not always trivial. 
Since we tolerate ambiguity, accept general rewrite rules, and 
permit deletion or replacement of deflnltlons~ considerable 
bookkeeping may be necessary to ensure that any new meaning pro- 
pagates to terms based on the rule in question. Because defini- 
tions must be in standard format, the bookkeeping is a function 
of the language processor. 
I t  fo l lows that  the language processor ,  dur ing sentence  ana lys i s ,  
requests  cons iderab le  in fo rmat ion  from per iphera l  s to rage ,  some of i t  
perhaps repeated ly .  This  suggests  page organ izat ion  of memory. How- 
ever ,  i t  i s  important  that  the language processor  be able to dea l  w l th  
/7 
25 
pages explicitly in order to arrange the various components of a lan- 
guage in an optimal fashion with regard to page transfers. 
Among the temporary configurations guiding the language processor 
are the parsing graph, and the syntax and interpretations of its phrases. 
Since theconfiguratlons are described by lists~ the language processor 
demands a llst-formatted work area in core memory. This area is also 
used to describe the environment of generators, or control the recurslon. 
Manipulation of data is a concern of the language of which they 
are part. Data structures may cover a wide range, from simple fo rmats  
such as single numbers to complex ones such as hierarchical file organiza- 
tions or interconnected rings. If the data are transient in nature and 
limited in size, they may be embedded in the list work area. In most 
cases, however, they must be retained on peripheral storage. Again, 
by Controlling their arrangement on memory pages a language may be 
able to minimize the number of page transfers. 
7.  CONCLUSIONS 
26 
Some o f  the  not ions  under ly ing  the  REL language processor  were 
f i r s t  in t roduced  in  connect ion  w i th  the  DEACON pro jec t  \ [2 \ ] .  However, 
th i s  language processor  exh ib i t s  vas t ly  inc reased  capab i l i t i es ,  espe-  
c la l l y  the  fac i l l ty  of  accommodat ing a wide var ie ty  o f  languages ,  the  
inc lus ion  o f ,  and emphas is  on ,  language extens ion ,  and the  t reatment  
o f  generators .  A f i r s t  vers ion  conta in ing  most  o f  the  descr ibed  pro -  
per t ies  has  been in  use  under  the  Ca l tech  t ime-shar ing  sys tem s ince  
spr ing  of  1968. S ince  then ,  i t  has  served  as the  bas i s  fo r  the  
deve lopment  o f  a nember of  languages ,  and prov ided  us  w i th  more ins ight  
in to  the i r  s t ruc tura l  descr ip t ions .  Th is  exper ience  led  to  the  rev ised  
vers ion  of  the  language processor  which const i tu tes  the  sub jec t  of  
th i s  paper .  The processor  i s  suppor ted  by a mul t ip rogramming  operat ing  
sys tem geared  to the  needs  o f  REL \ [ I \ ] .  
Of necess i ty ,  th i s  a r t i c le  represents  a ra ther  b r ie f  sur~ary .  In  
the  accompanying paper  on REL Eng l i sh ,  some of  the  top ics  d i scussed  w i l l  
be i l l us t ra ted  by one o f  the  more prom4nent  app l i ca t ions  of  REL. 
REFERENCES 
27 
\[1\] Thompson, F. B., Lockemann, P. C., Dostert, B. H. and Deverill, 
R. S., REL: A Rapidly Extenslble Language System, to appear 
in Proc. 24th Natl. ACM. Conf. (1969) 
\[2\] Thompson, F. B., English for the computer, Proc. AFIPS 
Fall Joint Comp. Conf. 29 (1966), 349-356 
\[3\] Thompson, F. B. ,  Man-machlne communication, in :  Seminar on 
Computational Linguistics, Public Health Service Publ. 
No. 1716, 57-68 
\[4\] Chomsky, N., Aspects of the theory of syntax, The MIT 
Press, 1965, 75ff. 
\[5\] Newell, A., et al, Information Processing Language - V 
Manual, The RAND Corp., Prentlce-Hall Inc., 1964 
3 * 4 + 6 / 3 
(a) 
28 
X 
3~_*  + / 
(b) 
Fig. 1. Phrase marker  for the statement "3*4 + 6/3".  
(a) Standard representat ion,  
(b) representat ion as connected graph with nodes. 
J~= part  of speech for "number" .  
29 
input parser 
f 1 
I syntax 
completion J 
~ yeSAcon ~ile\] 
~ no 
I semantic s 
output 
Fig. 2. Basic organization f language processor 
i 
$ I  '~ ~ 
.. 'T.. . -T - .  
30 
Fig. 3. Phrase marker  of a simple ar i thmet ic  statement. 
Broken l ines indicate reductions whose semantics 
were postponed. Subscripts are used to identify 
individual phrases.  
ar~ trans arg trans arg 
~r  I T/  S, Z J~l T ,  I, Z -/~5 
J~Z T,  I, 2 J~'-2 T+ I, Z jV" 6 
.lC 3 T+ 1, 2 J~6  
X 4 
trans ar~ 
T+ I, 2 Y~7 --- 
(a) (b) (c) (d) 
trans 
Fig. 4. Compiled information for fig. 3. Values supplied with 
a t ransformat ion identify posit ion and number of 
corresponding arguments.  
(a) Information pr ior  to semantic analys is ,  
(b-d) during success ive steps of the seroantic analysis.  
arguments 
input 
generator 
i \] output 0- 
processes~o I 
Fig. 5. Generator scheme 
result 
b 
31 
input 
generator control 
parser 
IT 
~ feature Isubrule 
syntax 
completion I 
I 
" ~ s emantic s 
output I 
Fig. 6. Organization of language processor 
