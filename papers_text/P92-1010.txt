Reasoning with Descriptions of Trees * 
J ames  Rogers  
Dept .  of  Comp.  & Info. Sc ience 
Un ivers i ty  of De laware  
Newark ,  DE  19716, USA 
K. V i jay -Shanker  
Dept .  of Comp.  & Info. Sc ience 
Un ivers i ty  of De laware  
Newark ,  DE  19716, USA 
ABSTRACT 
In this paper we introduce a logic for describing 
trees which allows us to reason about both the par- 
ent and domination relationships. The use of dom- 
ination has found a number of applications, uch as 
in deterministic parsers based on Description the- 
ory (Marcus, Hindle & Fleck, 1983), in a com- 
pact organization of the basic structures of Tree- 
Adjoining Grammars (Vijay-Shanker & Schabes, 
1992), and in a new characterization of the ad- 
joining operation that allows a clean integration of 
TAGs into the unification-based framework (Vijay- 
Shanker, 1992) Our logic serves to formalize the 
reasoning on which these applications are based. 
1 Mot ivat ion  
Marcus, Hindle, and Fleck (1983) have intro- 
duced Description Theory (D-theory) which consid- 
ers the structure of trees in terms of the domination 
relation rather than the parent relation. This forms 
the basis of a class of deterministic parsers which 
build partial descriptions of trees rather than the 
trees themselves. As noted in (Marcus, Hindle & 
Fleck, 1983; Marcus, 1987), this approach is capa- 
ble of maintaining Marcus' deterministic hypothe- 
sis (Marcus, 1980) in a number of cases where the 
original deterministic parsers fail. 
A motivating example is the sentence: I drove 
my aunt from Peoria's car. The difficulty is that a 
deterministic parser must attach the NP "my aunt" 
to the tree it is constructing before evaluating the 
PP. If this can only be done in terms of the par- 
ent relation, the NP will be attached to the VP as 
its object. It is not until the genitive marker on 
"Peoria's" is detected that the correct attachment 
is clear. The D-theory parser avoids the trap by 
making only the judgment hat the VP dominates 
the NP by a path of length at least one. Subsequent 
refinement can either add intervening components 
or not. Thus in this case, when "my aunt" ends up 
as part of the determiner of the object rather than 
the object itself, it is not inconsistent with its origi- 
nal placement. It is still dominated by the VP, just 
not immediately. When the analysis is complete, a
tree, the standard referent, can be extracted from 
the description by taking immediate domination as 
the parent relation. 
*Tlfis work is supported by NSF grant IRI-9016591 
72 
In other examples given in (Marcus, Hindle &; 
Fleck, 1983) the left-of (linear precedence) rela- 
tion is partially specified during parsing, with in- 
dividuals related by "left-of or equals" or "left-of 
or dominates". The important point is that once 
a relationship is asserted, it is never subsequently 
rescinded. The D-theory parser builds structures 
which are always a partial description of its final 
product. These structures are made more specific, 
as parsing proceeds, by adding additional relation- 
ships. 
Our understanding of the difficulty ordinary de- 
terministic parsers have with these constructions i  
that they are required to build a structure cover- 
ing an initial segment of the input at a time when 
there are multiple distinct trees that are consistent 
with that segment. The D-theory parsers succeed 
by building structures that contain only those re- 
lationships that are common to all the consistent 
trees. Thus the choice between alternatives for the 
relationships on which the trees differ is deferred 
until they are distinguished by the input, possibly 
after semantic analysis. 
A similar situation occurs when Tree-Adjoining 
Grammars are integrated into the unification-based 
framework. In TAGs, syntactic structures are built 
up from sets of elementary trees by the adjunction 
operation, where one tree is inserted into another 
tree in place of one of its nodes. Here the difficulty 
is that adjunction is non-monotonic n the sense 
that there are relationships that hold in the trees 
being combined that do not hold in the resulting 
tree. In (Vijay-Shanker, i992), building on some of 
the ideas from D-theory, a version of TAG is intro- 
duced which resolves this by manipulating partial 
descriptions of trees, termed quasi-trees. Thus an 
elementary structure for a transitive verb might be 
the quasi-tree a'  rather than the tree a (Figure I). 
In a ~ the separation represented by the dotted l ine 
between odes referred to by vpl and vp2 denotes a
path of length greater than or equal to zero. Thus 
a' captures just those relationships which are true 
in a and in all trees derived from a by adjunc- 
tion at VP. In this setting trees are extracted from 
quasi-trees by taking what is termed a circumscrip- 
live reading, where each pair of nodes in which one 
dominates the other by a path that is possibly zero 
is identified. 
This mechanism can be interpreted in a manner 
similar to our interpretation of the use of partial 
S /k 
NP VP 
v NP 
(3t s : 
Figure 1. Quasi-trees 
s/7  
NP VP '~x 
Vp,~S vP2 
descriptions in D-theory parsers. We view a tree 
in which adjunction is permitted as the set of all 
trees which can be derived from it by adjunction. 
That  set is represented by the quasi-tree as the set 
of all relationships that are common to all of its 
members. 
The connection between partial descriptions of 
trees and the sets of trees they describe is made 
explicit in (Vijay-Shanker & Schabes, 1992). Here 
quasi-trees are used in developing a compact rep- 
resentation of a Lexicalized TAG grammar. The 
lexicon is organized hierarchically. Each class of 
the hierarchy is associated with that set of relation- 
ships between individuals which are common to all 
trees associated with the lexical items in the class 
but not (necessarily) common to all trees associated 
with items in any super-class. Thus the set of trees 
associated with items in a class is characterized by 
the conjunction of the relationships associated with 
the class and those inherited from its super-classes. 
In the case of transitive verbs, figure 2, the rela- 
tionships in al  can be inherited from the class of 
all verbs, while the relationships in a2 are associ- 
ated only with the class of transitive verbs and its 
sub-classes. 
The structure a '  of figure 1 can be derived by 
combining a2 with a l  along with the assertion that 
v2 and Vl name the same object. In any tree 
described by these relationships either the node 
named vpl must dominate vp~ or vice versa. Now 
in a l ,  the relationship "vpl dominates vl" does not 
itself preclude vpx and vl from naming the same ob- 
ject. We can infer, however, from the fact that they 
are labeled incompatibly that this is not the case. 
Thus the path between them is at least one. From 
a2 we have that the path between vp2 and v2 is 
precisely one. Thus in all cases vpl must dominate 
vp2 by a path of length greater than or equal to 
zero. Hence the dashed line in a '. 
The common element in these three applications 
is the need to manipulate structures that partially 
describe trees. In each case, we can understand 
this as a need to manipulate sets of trees. The 
structures, which we can take to be quasi-trees in 
each case, represent these sets of trees by capturing 
73 
the set of relationships that are common to all trees 
in the set. Thus we are interested in quasi-trees not 
just as partial descriptions of individual trees, but 
as a mechanism for manipulating sets of trees. 
Reasoning, as in the LTAG example, about the 
structures described by combinations of quasi-trees 
requires some mechanism for manipulating the 
quasi-trees formally. Such a mechanism requires, 
in turn, a definition of quasi-trees as formal struc- 
tures. While quasi-trees were introduced in (Vijay- 
Shanker, 1992), they have not been given a precise 
definition. The focus of the work described here is 
a formal definition of quasi-trees and the develop- 
ment of a mechanism for manipulating them. 
In the next section we develop an intuitive un- 
derstanding of the structure of quasi-trees based 
on the applications we have discussed. Following 
that, we define the syntax of a language capable 
of expressing descriptions of trees as formulae and 
introduce quasi-trees as formal structures that de- 
fine the semantics of that language. In section 4 
we establish the correspondence between these for- 
mal models and our intuitive idea of quasi-trees. 
We then turn to a proof system, based on semantic 
tableau, which serves not only as a mechanism for 
reasoning about tree structures and checking the 
consistency of their descriptions, but also serves to 
produce models of a given consistent description. 
Finally, in section 7 we consider mechanisms for de- 
riving a representative tree from a quasi-tree. We 
develop one such mechanism, for which we show 
that the tree produced is the circumscriptive read- 
ing in the context of TAG, and the standard refer- 
ent in the context of D-theory. Due to space limi- 
tations we can only sketch many of our proofs and 
have omitted some details. The omitted material 
can be found in (Rogers & Vijay-Shanker, 1992). 
2 Quas i -T rees  
In this section, we use the term relationship to in- 
formally refer to any positive relationship between 
individuals which can occur in a tree, "a is the par- 
ent of b" for example. We will say that a tree satis- 
fies a relationship if that relationship is true of the 
individuals it names in that tree. 
Ot x : 
NP VP ~ 
% 
v 1 'x~, v 
O~ 2 : vP  vP2 
'~v  NP 
Figure 2. Structure Sharing in a Representation of Elementary Structures 
I t 's  clear, from our discussion of their applica- 
tions, that quasi-trees have a dual nature - -  as a 
set of trees and as a set of relationships. In for- 
malizing them, our fundamental idea is to identify 
those natures. We will say that a tree is (partially) 
described by a set of relationships if every relation- 
ship in the set is true in the tree. A set of trees is 
then described by a set of relationships if each tree 
in the set is described by the set of relationships. 
On the other hand, a set of trees is characterized by 
a set of relationships if it is described by that set 
and if every relationship that is common to all of 
the trees is included in the set of relationships. This 
is the identity we seek; the quasi-tree viewed as a 
set of relationships characterizes the same quasi- 
tree when viewed as a set of trees. 
Clearly we cannot easily characterize arbitrary 
sets of trees. As an example, our sets of trees will 
be upward-closed in the sense that, it will contain 
every tree that extends ome tree in the set, ie: that 
contains one of the trees as an initial sub-tree. Sim- 
ilarly quasi-trees viewed as sets of relationships are 
not arbitrary either. Since the sets they character- 
ize consist of trees, some of the structural properties 
of trees will be reflected in the quasi-trees. For in- 
stance, if the quasi-tree contains both the relation- 
ships '% dominates b" and "b dominates c" then 
every tree it describes will satisfy "a dominates c" 
and therefore it must contain that relationship as 
well. Thus many inferences that can be made on 
the basis of the structure of trees will carry over to 
quasi-trees. On the other hand, we cannot make 
all of these inferences and maintain any distinction 
between quasi-trees and trees. Further, for some 
inferences we will have the choice of making the 
inference or not. The choices we make in defining 
the structure of the quasi-trees as a set of relation- 
ships will determine the structure of the sets of trees 
we can characterize with a single quasi-tree. Thus 
these choices will be driven by how much expressive 
power the application eeds in describing these sets. 
Our guiding principle is to make the quasi-trees as 
tree-like as possible consistent with the needs of our 
applications. We discuss these considerations more 
fully in (Rogers &5 Vijay-Shanker, 1992). 
One inference we will not make is as follows: from 
"a dominates b" infer either "a equals b" or, for 
74 
some a' and b', "a dominates a', a' is the parent of 
b', and b' dominates b". In structures that enforce 
this condition path lengths cannot be left partially 
specified. As a result, the set of quasi-trees required 
to characterize s '  viewed as a set of trees, for in- 
stance, would be infinite. 
Similarly, we will not make the inference: for all 
a, b, either "a is left-of b", "b is left-of a", "a dom- 
inates b", or "b dominates a". In these structures 
the left-of relation is no longer partial, ie: for all 
pairs a, b either every tree described by the quasi- 
tree satisfies "a is left-of b" or none of them do. This 
is not acceptable for D-theory, where both the anal- 
yses of "pseudo-passives" and coordinate structures 
require single structures describing sets including 
both trees in which some a is left-of b and others 
in which the same a is either equal to or properly 
dominates that same b (Marcus, Hindle & Fleck, 
1983). 
Finally, we consider the issue of negation. If a 
tree does not satisfy some relationship then it sat- 
isfies the negation of that relationship, and vice 
versa. For quasi-trees the situation is more subtle. 
Viewing the quasi-tree as a set of trees, if every tree 
in that set fails to satisfy some relationship, then 
they all satisfy the negation of that relationship. 
Hence the quasi-tree must satisfy the negated rela- 
tionship as well. On the other hand, viewing the 
quasi-tree as a set of relationships, if a particular 
relationship is not included in the quasi-tree it does 
not imply that none of the trees it describes atis- 
fies that relationship, only that some of those trees 
do not. Thus it may be the case that a quasi-tree 
neither satisfies a relationship nor satisfies its nega- 
tion. 
Since trees are completed objects, when a tree 
satisfies the negation of a relationship it will always 
be the case that the tree satisfies ome (positive) re- 
lationship that is incompatible with the first. For 
example, in a tree "a does not dominate b" iff "a 
is left-of b", "b is left-of a", or "b properly dom- 
inates a". Thus there are inferences that can be 
drawn from negated relationships in trees that may 
be incorporated into the structure of quasi-trees. In 
making these inferences, we dispense with the need 
to include negative relationships explicitly in the 
quasi-trees. They can be defined in terms of the 
positive relationships. The price we pay is that to 
characterize the set of all trees in which "a does 
not dominate b", for instance, we will need three 
quasi-trees, one characterizing each of the sets in 
which "a is left-of b", "b is left-of a", and % prop- 
erly dominates a". 
3 Language 
Our language is built up from the symbols: 
K - -  non-empty countable set of names, 1
r - -  a distinguished element of K, the root 
<1, ~+,  ,~*, --< 
- -  two place predicates, parent, 
proper domination, domination, 
and left-of respectively, 
- -  equality predicate, 
A,  V,  -~ - -  usual logical connectives 
(,), \[, \] - -  usual grouping symbols 
Our atomic formulae are t ,~ u, t ?+ u, t <* u, t -< 
u, and t ~ u, where t, u ? K are terms. Literals are 
atomic formulae or their negations. Well-formed- 
formulae are generated from atoms and the logical 
connectives in the usual fashion. 
We use t, u, v to denote terms and ?, ? to denote 
wffs. R denotes any of the five predicates. 
3 .1  Mode ls  
Quasi-trees as formal structures are in a sense a 
reduced form of the quasi-trees viewed as sets of 
relationships. They incorporate a canonical sub- 
set of those relationships from which the remaining 
relationships can be deduced. 
Def in i t ion  1 A model is a tuple (H, I ,  7),79,.A,?), 
where: 
H is a non-empty universe, 
iT. is a partial function from K to Lt 
(specifying the node referred to by each name), 
7 9, .4, 79, and ? are binary relations over It 
(assigned to % ,a +, ,a*, and -4 respectively). 
Let T( denote 27(r). 
Def in i t ion  2 A quasi-tree is a model satisfying the 
conditions Cq : 
For all w, x, y, z ? 11, 
c~ (~,~) ?79, 
c= (z, =) ? 79, 
ca  (=, y), (y, ~) ? 79 ~ (=, ~) ? 79, 
c4  (~, ~), (y, ~) ? 79 
(=, y) ? 79 or (y, =) ? 79, 
c5  (=, y) ? ,4 ~ (=, y) ? 79, 
ca  (x,y) ? .4  and (w,x),  (y, z) ? 79 ::~ 
(w, ~) ? A, 
c~ (=, y) ? 19 ~ (z, y) ? A 
c8 (z, z) ? 79 
1 We use names ra ther  than  constants to clarify the link 
to descr ipt ion theory. 
75 
(z, y) ? z: or (y, z) ? z: 
or (y, =) ? v or (z, y) ? 79, 
v0  (=, y) ? z and (=, w), (y, z) ? 79 
(w, z) ? ?, 
C lo  (x,y) ? z and (w,x) ?79 
(w, y) ? z or (~, ~), (~, y) ? A, 
C~1 (~, y) ? Z and (~o, y) ? 79 
(~, w) ? C or (w, =), (w, y) ? .4, 
c~2 (~, y) ? z and (y, z) ? C ~ (~, z) ? C, 
And meeting the additional condition: for every 
x ,z  ? U the set B=z = {Y I (x,Y),(Y,Z) ? 79} 
is finite, ie: the length of path from any node to 
any other is finite. 2 
A quasi-tree is consistent iff 
CC~ (x,y) ? A ~ (y,x) ? 79, 
CC2 (z, y) ? ? =:, 
(=, y) ? 79, (y, =) ? 79, and (y, =) ? z:. 
It is normal iff 
RCx  for all x # y ? H, either 
(~, y) ? 79) or (y, ~) ? 7). 
At least one normal, consistent quasi-tree (that 
consisting of only a root node) satisfies all of these 
conditions imultaneously. Thus they are consis- 
tent. It is not hard to exhibit a model for each 
condition in which that condition fails while all of 
the others hold. Thus the conditions are indepen- 
dent of each other. 
Trees are distinguished from (ordinary) quasi- 
trees by the fact that 79 is the reflexive, transi- 
tive closure of P,  and the fact that the relations 
79, 79, ,4, ? are maximal in the sense that they can- 
not be consistently extended. 
Def in i t ion  3 A consistent, normal quasi-tree M 
is a tree iff 
Te l  79M = (7~M)*, 
TC2 for all pairs (x, y) ? U M X l~ M, 
exactly one of the following is true: 
(=, y), (y,z) ? 79M; (z,y) ? .AM; 
(y, =) ? A M; (=, y) ? z:M; or (y, =) ? 1: M. 
Note that TC1 implies that .A M -- (79M)+ as well. 
It is easy to verify that a quasi-tree meets these con- 
ditions iff (H M, 79M) is the graph of a tree as com- 
monly defined (Aho, Hopcroft & Ullman, 1974). 
3 .2  Sat i s fac t ion  
The semantics of the language in terms of the 
models is defined by the satisfaction relation be- 
tween models and formulae. 
Def in i t ion  4 A model M satisfies a formula ? 
(M ~ ?) as follows: 
2 The  addit ional  condit ion excludes "non-s tandard"  mod-  
els which include components  not  connected  to the  root  by 
a finite sequence of immedia te  dominat ion  l inks. 
M ~ t,~* u i f f  
M~t<*  u iff 
M ~ t ,~ u i f f  
M ~ t C~ u i ff 
M ~ t ,~+ u iff 
M ~t ,~+u iff 
M~t<u iff 
M ~ t -.< u i f f  
M ~ ~t ~ u iff 
M ~",~ff  iff 
M ~?A? iff 
M ~-~(?A?)  i f f  
M ktV?  iff 
(zM(t),Z~(~)) e VM; 
(ZM(t), Z~(U)) ~ L ' ,  
(ZM(~),ZM(t)) ? C ~,  
or (z~(~),zM(t)) ? .4"; 
(z ' ( t ) ,z ' (~))  ? v "  
a.d (ZM(u),Z~(t)) ? VM; 
(ZM(t), ZM(,,)) ? .4 M, 
(ZM(u),ZM(t)) ? ,4 M, 
(Z'(t), Z'(,.,)) ? c ' ,  
or (z'(~),zM(t)) ? c M 
(zu(t),ZM(u)) ? AM; 
(ZM(,,),Z~(t)) ? V M, 
(ZM(t),ZM(~)) ? z~ ~, 
or (ZM(~),ZM(t)) ? CM; 
(ZM(t),ZM(~)) ? vM; 
(zM(u),z~(t)) ? v ~, 
(z~(t),Z~(u)) ? z: ~, 
(ZM(u), :z:M(t)) ? z: ~, or 
(z~(t), =), (=,z~(u)) ? A ~, 
for some x ? l~M ; 
(z ' ( t ) ,z~(~))  ? c; 
(z~(~),z~(t)) ? ~, 
(IM(t),:~M(u)) ? V, 
or (z~(~),z~(t))  ? v;  
U~?;  
M ~? andM ~?;  
M ~? orM~- - l? ;  
M~?orM~?;  
M ~-~(?V?)  i f fM~-~? andM~'~?.  
In addition we require that ZM(k) be defined for all 
k occurring in the formula. 
It is easy to verify that for all quasi-trees M
(3t, u, R)\[M ~ t R u,-~t R u\] ==~ M inconsistent. 
If 2: M is surjective then the converse holds as well. 
It is also not hard to see that if T is a tree 
4 Character i za t ion  
We now show that this formalization is complete 
in the sense that a consistent quasi-tree as defined 
characterizes the set of trees it describes. Recall 
that the quasi-tree describes the set of all trees 
which satisfy every literal formula which is satis- 
fied by the quasi-tree. It characterizes that set if 
every literal formula which is satisfied by every tree 
in the set is also satisfied by the quasi-tree. The 
property of satisfying every formula which is satis- 
fied by the quasi-tree is captured formally by the 
notion of subsumption, which we define initially as 
a relationship between quasi-trees. 
Definit ion 5 Subsumption. 
Suppose M = (l~M,~ M 7)M,'DM,.AM,f-.M) and 
t M ~ M j M ~ M ~ M I M ~ M = (14 ,Z ,7 ) ,7) ,,4 ,? ) are consis- 
tent quasi-trees, then M subsumes M z (M ~ M I) 
iff there is a function h : lA M ~ 14 M' such that: 
76 
zM'(t) = h(7:M(t)), 
(x, y) e 7)M =V (h(x), h(y)) e 7)M' 
(x, y) e V M ~ (h(z), h(y)) E 7 )M', 
(x, y) E .A M =v (h(x), h(y)) e .A M', 
(x, y) e ?M ~ (h(x),h(y)) e ?M'. 
We now claim that any quasi-tree Q is subsumed 
by a quasi-tree M iff it is described by M. 
Lemma 1 If M and Q are normal, consistent 
quasi-trees and 3 M is surjective, then M E Q iff 
for all formulae ?, M ~ ? ~ Q ~ ?. 
The proof in the forward direction is an easy in- 
duction on the structure of ? and does not depend 
either on normality or surjectiveness of I M. The 
opposite direction follows from the fact that, since 
Z M is surjective, there is a model M' in which/~M' 
is the set of equivalence classes wrt ~ in the domain 
of Z M, such that M E M~ E Q- 
The next lemma allows us, in many cases, to as- 
sume that a given quasi-tree is normal. 
Lemma 2 For every consistent quasi-tree M, 
there is a normal, consistent quasi-tree M ~ such 
that M E M~, and for all normal, consistent quasi- 
tree M ' ,  M E M"  ::?. M ~ E M ' .  
The lemma is witnessed by the quotient of M with 
respect o S M, where sM = { (x, y) I (x, y), (y, x) e 
vM}. 
We can now state the central claim of this sec- 
tion, that every consistent quasi-tree characterizes 
the set of trees which it subsumes. 
Proposition 1 Suppose M is a consistent quasi- 
tree. For all literals ? 
M ~ ? ?~ (VT, tree)\[M E T ::~ T ~ ?\] 
The proof ollows from two lemmas. The first estab- 
lishes that the set of quasi-trees subsumed by some 
quasi-tree M is in fact characterized by it. The sec- 
ond extends the result to trees. Their proofs are in 
(Rogers & Vijay-Shanker, 1992). 
Lemma 3 If M is a consistent quasi-tree and ? a 
literal then 
(3Q, consistent quasi-tree)\[M E_ Q and Q ~ -~?\] 
Lemma 4 I f  M is a consistent quasi-tree, then 
there exists a tree T such that M E T. 
Proof(of  proposition 1) 
(VT) \[M _ T :=~ T b ?\] 
?=~ -~(3T)\[M _ T and T ~ -~?\] 
(:=~ by consistency, ?== by completeness of trees) 
?V -~(3Q, consistent q-t)\[M E Q and Q ~ -~?\] 
(==~ by lemma 4, ?= since T is a quasi-tree) 
(::~ by lemma 3, ?=: by lemma 1) O 
5 Semant ic  Tab leau  
Semantic tableau as introduced by Beth (Beth, 
1959; Fitting, 1990) are used to prove validity by 
means of refutation. We are interested in satisfi- 
ability rather than validity. Given E we wish to 
build a model of E if one exists. Thus we are in- 
terested in the cases where the tableau succeeds in 
constructing a model. 
The distinction between these uses of semantic 
tableau is important, since our mechanism is not 
suitable for refutational proofs. In particular, it 
cannot express "some model fails to satisfy ?" ex- 
cept as "some model satisfies -?" .  Since our logic is 
non-classical the first is a strictly weaker condition 
than the second. 
Def in i t ion  6 Semantic Tableau: 
A branch is a set, S, of formulae. 
A configuration is a collection, {S1, . . . ,S~},  of 
branches. 
A tableau is a sequence, (C1, . . . ,  Cnl, of configura- 
tions where each Ci+~ is a result of the application 
of an inference rule to Ci. 
I f  s is an inference rule, (C i \{S})  U 
{sl,..., s',} is the result of applying the rule to G 
iff z eG.  
A tableau for ~, where E is a set of formulae, is a 
tableau in which C1 = {E}. 
A branch is closed iff (9?)\[{?,--,?} C 5'\]. A con- 
figuration is closed iff each of its branches is closed, 
and a tableau is closed iff it contains some closed 
configuration. A branch~ configuration, or tableau 
that is not closed is open. 
5.1 Inference Rules 
Our inference rules fall into three groups. The 
first two, figures 3 and 4, are standard rules 
for propositional semantic tableau extended with 
equality (Fitting, 1990). The third group, figure 5, 
embody the properties of quasi-trees. 
The --,,~ rule requires the introduction of a new 
name into the tableau. To simplify this, tableau are 
carried out in a language augmented with a count- 
ably infinite set of new names from which these are 
drawn in a systematic way. 
The following two lemmas establish the correct- 
ness of the inference rules in the sense that no rule 
increases the set of models of any branch nor elim- 
inates all of the models of a satisfiable branch. 
Lemma 5 Suppose S' is derived from S in some 
tableau by some sequence of rule applications. Sup- 
pose M is a model, then: 
M~S' : :~M~S.  
This follows nearly directly from the fact that all of 
our rules are non-strict, ie: the branch to which an 
inference rule is applied is a subset of every branch 
introduced by its application. 
Lemma 6 I f  S is a branch of some configuration 
of a tableau and ,S' is the set of branches resulting 
from applying some rule to S, then if there is a 
77 
consistent quasi-tree M such that M ~ S, then for 
some 5;~ E S '  there is a consistent quasi-tree M '  
such that M '  ~ S~. 
We sketch the proof. Suppose M ~ S. For all 
but --,,a it is straightforward to verify M also sat- 
isfies at least one of the S~. For ~,~, suppose M 
fails to satisfy either u ,~* t or -,t ,~* u. Then we 
claim some quasi-tree satisfies the third branch of 
the conclusion. This must map the new constant k
to the witness for the rule. M has no such require- 
ment, but since k does not occur in S, the value of 
2: M(k) does not affect satisfaction of S. Thus we 
get an appropriate M'  by modifying z M' to map k 
correctly. 
Coro l la ry  1 I f  there is a closed tableau for ? then 
no consistent quasi-tree satisfies ?. 
No consistent quasi-tree satisfies a closed set of for- 
mulae. The result then follows by induction on the 
length of the tableau. 
6 Constructing Models 
We now turn to the conditions for a branch to be 
sufficiently complete to fully specify a quasi-tree. 
In essence these just require that all formulae have 
been expanded to atoms, that all substitutions have 
been made and that the conditions in the definition 
of quasi-trees are met. 
6 .1  Saturated  Branches  
Def in i t ion  7 A set of sentences S is downward 
saturated iff for all formulae ?, ?, and terms t, u, v: 
1-Is CVCES=v.?ES orCES 
1-13 -',(? V ?) E S =?, ",? E S and ",? E S 
I-I 4 C A C E S =~ ff E S and C E S 
1-I6 t ,~ t E S for all terms t occurring in S 
117 tl ~ ul,t2 ~, uz E S =~ 
tl ,~* t2 E S ~ ul ,~* u2 E S, 
tl ,~+ t2 E S =?, ul ,~+ u2 E S, 
t l  ~ t2 E S ==~ u 1 <l u 2 ~ S, 
t l  -< t2 E S =?. Ul -.4 u2 E S, 
tl ~ t2 E S ~ ua ,~ u2 E S. 
t118 r ,~* t E S for all terms t occurring in S 
H9  t~uES~t ,~*  uES  
111,o t ~ u E S =C, -,t ,~* u E S or ~u ,~* t E S 
11,, t,~* u,u~* tES~t~uES 
I - I , z  t ,~" u, u ,~* v E S ~ t ,~* v E S 
H*3  t ,~* v, u ,~* v E S ~ 
t ,~* u E S or u ,~* t E S 
H,  4 -.t ,~* u E S 
t-< uES  oru -<t  GS oru ,?  t ES  
H ,  5 t ,~+ u E S ~ t ,~* u, ~u ,~* t E S 
H,6  t ,~+ u,s,~* t,u,~* vES  ~ s,~+ v~S 
H*7  ~t ,~+ u E S ~ --t ,~* u E S or u .~* t E S 
H,8  t ,~ u E S ::C, t ,~+ u E S 
S,.? v?  
s ,?v? ,?  I s ,?v? ,?  
S,?A? 
A S,? A? ,? ,?  
S, "m "~ ~ 
S,-~-~?, ?
V 
s,-X? v ?) 
s,-X? v ?),-~?,-~? 
~V 
S,-~(? A ?) 
S,-~(? A ?), "-~? I s , -4?  A ?),-'~? 
-~A 
Figure 3. Elementary Rules 
1-1, 9 t ,a v E S :----~ u -4 v E S or v -4 u E S 
or u ,~* t E S or v ,~* u E S 
H2o  ",t ,~ u E S ::~ u ,~* t E S or-~t ,~* u E S 
or t ,~+ w, w ,~+ u E S, fo r  some term w 
H2x  t -4 u E S ~ -~t ,~* u, -~u ,~* t, --,u -4 t E S 
I-I2~* t -4 u, t ,~* s ,u  ,~* v E S ~ s -4 v E S 
H23 t -4 u, v ,~* t E S 
v -4 u E S or v ,~ + t, v ,~ + u E S 
1-124 t -4 u, v ,l* u E S =~ 
t -4 v E S or v ,~ + t, v ,~ + u E S 
H25 t -4u ,  u -4vES~t -4vES 
H26 ~t-4 uE  S=?, 
u -4 t E S or t ,~* u E S or u ,~* t E S. 
The next lemma (essentially Hintikka's lemma) 
establishes the correspondence b tween saturated 
branches and quasi-trees. 
Lemma 7 For every consistent downward satu- 
rated set of  formulae S there is a consistent quasi- 
tree M such that M ~ S. For every f inite consis- 
tent downward saturated set of  formulae, there is a 
such a quasi-tree which is f inite. 
Again, we sketch the proof. Consider the set T(S)  
of terms occurring in a downward saturated set S. 
I-I6 and I-/7 assure that ~ is reflexive and substi- 
tutive. Sincet ~u,u~v E S=~t  ~v E S, and 
u~u,u ,~vE S~v~ u E Sby  substitution of 
v for (the first occurrence of) u, it is transitive and 
symmetric as well. Thus ~ partitions T(S)  into 
equivalence classes. 
Define the model H as follows: 
u n = 7" (s ) /~ ,  
z~(k)  = \[k\]~, 
:pH = {(\[t\]~., \[u\]~) It '~ u ~ S}, 
:p .  = {(\[t\]~., \[u\]~.) It "~* u E S}, 
.A H = {(\[t\]~,\[u\]~) I t, + uE  S}, 
c"  = {(\[t\]~, \[u\]~) I t -4 ~ ~ s}.  
Since each of the conditions C1 through Cx2 corre- 
sponds directly to one of the saturation conditions, 
it is easy to verify that H satisfies Cq. It is equally 
easy to confirm that H is both consistent and nor- 
mal. 
78 
We claim that ? E S =?- H ~ ?. As is usual for 
versions of Hintikka's lemma, this is established by 
an induction on the structure of ?. Space prevents 
us from giving the details here. 
For the second part of the lemma, if the set of 
formulae is finite, then the set of terms (and hence 
the set of equivalence classes) is finite. 
6.2  Saturated  Tab leau  
Since all of our inference rules are non-strict, if a 
rule once applies to a branch it will always apply to 
a branch. Without some restriction on the applica- 
tion of rules, tableau for satisfiable sets of formulae 
will never terminate. What is required is a control 
strategy that guarantees that no rule applies to any 
tableau more than finitely often, but that will al- 
ways find a rule to apply to any open branch that 
is not downward saturated. 
Def in i t ion  8 Let EQs be the reflexive, symmetr ic ,  
transitive closure of { (t, u) l t ~ u e S} .  
An inference rule, I ,  applies to some branch S 
of a configuration C i f f  
? S is open 
? S  {Si I Si results f rom application of  I to S}  
? i f  I introduces a new constant a occurring in 
formulae Cj(a) E Si, there is no term t and 
pairs (ul ,  va), (u2, v2), . . . E EQs such that for  
each of the Cj, ?{t/a, ul/Vl,~2/v2,...} E S. 
(Where ?{t /a ,  Ul/Vl, U2/V2,...} denotes the re- 
sult of uniformly substituting t fo r  a, ul  for  vl ,  
etc., in ? . )  
The last condition in effect requires all equality 
rules to be applied before any new constant is in- 
troduced. It prevents the introduction of a formula 
involving a new constant if an equivalent formula 
already exists or if it is possible to derive one using 
only the equality rules. 
We now argue that this definition of applies does 
not terminate any branch too soon. 
Lemma 8 I f  no inference rule applies to an open 
branch S of a configuration, then S is downward 
saturated. 
This follows directly from the fact that for each of 
H1  through H26,  if the implication is false there 
is a corresponding inference rule which applies. 
5: 
,5', t ,~ t 
any term t 
occurring in 5: 
~ (reflexivity of ,~) 
5:, t u, ?(t)  
s,t u, +(t), ?(?) 
~s (substitution) 
?( i )  denotes the result of substituting u for any or all occurrences o f t  in ?. 
Figure 4. Equality Rules 
5: 
5:, r <1" t 
t any term occurring in S 
o r t=r  
<1" (r  min imum wrt <1") 
5:, t ~ u (reflexivity of <1") 
S, t ~ u, t .~* u, u ,~* t <1r 
5:,t <1" U, u <1" t 
5:,t<1" u, u ,~* t, t ~, u 
* (ant i -symmetry) <1a 
S, t  ~ U <1" 
5:,t ~ u , - . t  <1* u \[ 5:,t # u , -~u <1* t r'. 
S, t <1" u, u <1" v * (transit ivity) 
5:~ t <1" U~ U <1" V~ t <1" V <it 
5:, t .~* V~ U <1" V 
5:, t <1" v, u .~* v, t ,~* u \[ 5:, t ,~* v, u .~* v, u <1" t <1~ (branches linearly ordered) 
5:~ --,t <1" u 
---1<1" 
5:, -~t <1* u, t -4 u \[ 5:,-~t<1" u ,u -4t  \[ S, "-,t <1* u, u <1 +t  
5:, t <1 + u 5:, t ,~+ u, s <1" t, u <1" v 
5:,t<1 + u, t <1* u, --,u <1* t <1+1 5:,t<1 + u, s <1* t, u <1* v, s <1 + v ~1+ 2 
5:, - , t  <1 + u 5:t t <1 u 
-1<1 + <11 
5:, -~t <1 + u, -~t 4* u I 5:,-.t<1 + u, u <1* t 5:, t <1u, t <1 + u 
5:, t <1v 
<12 
5:,t<1v, u -4v  \[ 5: , t<1v,  v -4u  I 5: , t<1v,  u<1*t  \[ 5: , t<1v,  v<1* u 
any term u occurring in 5:. 
S~ ~t  <J u "n<1 
S, - . t  <1u, u <1* t \[ S , - . t  ~ u , -~t  <1* u \[ 5:, ".t <1 u, t <1 + k, k <1 + u 
k new name 
5:, t -4 U S,  t -4 U, t <1* 8, U <1" V 
-<a "42 
5:,t  -4 u,  ~t  <1" u, ~u <1" t, ~U -4 t 5:~t -4 u , t  <1" s~u <1" V ,s  -4 V 
5:, t -4 u, v <1* t -<a 
5:, t -4 u, v ,~* t, v -4 u \[ 5:, t -4 u, v ,~* t, v <1+ t, v <1+ u 
5:, t -4 u,  v <1* u 
5:~ t -4 U, v'~* u,  t -4 v \[ 
5: , t -4 U , U -4 V 
-<t 
5:~ t -4 U~ V "~* U~ V <1 + t~ V <1+ U 
5:, "~t -4 u 
S , t .-4 u , u -4 v , t -4 v 
"44 
,5 ' , - - t -~u,u -~t  \[ S , - - , t -4u,  t<1*u \[ S , - - , t -4u,  u<1*t 
Figure 5. Tree Rules 
-,-< 
79 
Proposition 2 (Termination) All tableau for fi- 
nite sets of formulae can be extended to tableau in 
which no rule applies to the final configuration. 
This follows from the fact that the size of any 
tableau for finite sets of formulae has a finite upper 
bound. The proof is in (Rogers & Vijay-Shanker, 
1992). 
Proposition 3 (Soundness and Completeness) 
A saturated tableau for a finite set of formulae 
exists iff there is a consistent quasi-tree which sat- 
isfies E. 
Proof: The forward implication (soundness) 
follows from lemma 7. Completeness follows from 
the fact that if E is satisfiable there is no closed 
tableau for E (corollary 1), and thus, by propo- 
sition 2 and lemma 8, there must be a saturated 
tableau for E. \[\] 
7 Ext rac t ing  Trees  f rom Quas i - t rees  
Having derived some quasi-tree satisfying a set 
of relationships, we would like to produce a "mini- 
mal" representative of the trees it characterizes. In
section 3.1 we define the conditions under which a 
quasi-tree is a tree. Working from those conditions 
we can determine in which ways a quasi-tree M 
may fail to be a tree, namely: 
, (~oM)* is a proper subset of:D M, 
? L M and/or 7) M may be partial, ie: for some 
t,u, U ~: (t -~ uV-~t -~ u) or U ~ (t ,~* 
u V -~t ,~* u). 
The case of partial L: M is problematic in that, 
while it is possible to choose a unique representa- 
tive, its choice must be arbitrary. For our applica- 
tions this is not significant since currently in TAGs 
left-of is fully specified and in parsing it is always 
resolved by the input. Thus we make the assump- 
tion that in every quasi-tree M from which we need 
to extract a tree, left-of will be complete. That is, 
for all terms t,u: M ~ t -~ uV-~t -~ u. Thus 
M ~ t ~* u V-~t ~* u ::v M ~ u ~* t. 
Suppose M ~ u ,~* t and M ~: (t 4" u V-~t ,~* u), 
and that zM(u) = x and zM(t) = y. In D-theory, 
this case never arises, since proper domination, 
rather than domination, is primitive. It is clear that 
the TAG applications require that x and y be iden- 
tified, ie: (y, x) should be added to / )m.  Thus we 
choose to complete 7) M by extending it. Under the 
assumption that /: is complete this simply means: 
if M ~ -~t ,~* u, 7) M should be extended such that 
M ~ t ,~* u. That M can be extended in this way 
consistently follows from lemma 3. That the re- 
sult of completing ~)M in this way is unique follows 
from the fact that, under these conditions, extend- 
ing "D M does not extend either ,A M or ~M.  The 
details can be found in (Rogers & Vijay-Shanker, 
1992). 
In the resulting quasi-tree domination has been 
resolved into equality or proper domination. To 
arrive at a tree we need only to expand pM such 
that (,pM)* .: ~)M. In the proof of lemma 4 we 
show that this will be the case in any quasi-tree T 
closed under: 
(x, z) E A T and (Yy)\[(z, y) fL A T or (y, z) ft A T\] 
(z, z) ? pT 
(x, y)  ?w and (y, x) ~ ?T U .A T 
u) ? v r. 
The second of these conditions is our mechanism 
for completing/)M. The first amounts to taking 
immediate domination as the parent relation - -  
precisely the mechanism for finding the standard 
referent. Thus the tree we extract is both the cir- 
cumscriptive r ading of (Vijay-Shanker, 1992) and 
the standard referent of (Marcus, Hindle & Fleck, 
1983). 
References  
Aho, A. V., Hopcroft, J. E., & Ullman, J. D. (1974). 
The Design and Analysis of Computer Algo- 
rithms. Reading, MA: Addison-Wesley. 
Beth, E. W. (1959). The Foundations of Mathe- 
matics. Amsterdam: North-Holland. 
Fitting, M. (1990). First-order Logic and Auto- 
mated Theorem Proving. New York: Springer- 
Verlag. 
Marcus, M. P. (1980). A Theory of Syntactic Recog- 
nition for Natural Language. MIT Press. 
Marcus, M. P. (1987). Deterministic parsing and 
description theory. In P. Whitelock, M. M. 
Wood, H. L. Somers, R. Johnson, & P. Ben- 
nett (Eds.), Linguistic Theory and Computer 
Applications. Academic Press. 
Marcus, M. P., Hindle, D., & Fleck, M. M. (1983). 
D-theory: Talking about talking about trees. 
In Proceedings of the 21st AnnuaiMeeting of 
the Association for Computational Linguistics, 
Cambridge, MA. 
Rogers, J. & Vijay-Shanker, K. (1992). A formal- 
ization of partial descriptions of trees. Techni- 
cal Report TR92-23, Dept. of Comp. and Info. 
Sci., University of Delaware, Newark, DE. 
Vijay-Shanker, K. (1992). Using descriptions of 
trees in a tree-adjoining grammar. Computa- 
tional Linguistics. To appear. 
Vijay-Shanker, K. & Schabes, Y. (1992). Structure 
sharing in lexicalized tree-adjoining grammars. 
In Proceedings of the 16th International Con- 
ference on Computational Linguistics (COL- 
ING'92), Nantes. 
80 
