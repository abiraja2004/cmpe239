CHART PARSING ACCORDING TO THE SLOT AND FILLER PRINCIPLE 
Peter  HELLWIG 
Univers i ty of Heidelberg 
P.O. Box 105 760 
D-6900 Heidelberg, FRG 
Abst rac t  
A parser is an algorithm that assigns a 
structural descr ipt ion to a string according 
to a grammar. It follows from this defini- 
t ion that there are three general issues in 
parser design: the structure to be assigned, 
the type of grammar, the recognit ion algo~ 
rithm. Common parsers employ phrase struc- 
ture descriptions, rule-based grammars, and 
der ivat ion or transit ion oriented recogni- 
tion. The fol lowing choices result in a new 
parser: The structure to be assigned to the 
input is a dependency tree with lexical, 
morpho-syntact ic  and funct ional-syntact ic 
information associated with each node and 
coded by complex categories which are sub- 
ject to unif icat ion.  The grammar is lexica- 
lized, i.e. the syntactical relat ionships 
are stated as part of the lexical descrip- 
tions of the elements of the language. The 
algorithm relies on the slot and fil ler 
principle in order to draw up complex struc- 
tures. It ut i l izes a wel l - formed substring 
table (chart) which allows for discont inuous 
segments. 
1. Dependency  S t ruc ture  
The structuring principle of const i tuency 
trees is concatenation and the part-whole 
-relationship. The structuring principle of 
dependency trees is the relat ionship between 
lexemes and their complements. Note: It is 
not correct (or at least misleading) to de- 
fine dependency as a relat ionship between 
words, as it is often done. The possibi l i ty 
and necessity of complements depend on the 
lexical meaning of words, i.e. a word which 
denotes a relat ionship asks for entit ies 
which it relates, a word which denotes a mo- 
di f icat ion asks for an entity which it modi- 
fies etc. While it is awkward to associate 
functions (deep cases, roles, grammatical 
relationships) with phrase structures, it is 
not dif f icult  to paraphrase the functions of 
complements on a lexical basis. For example, 
the argument of the predicate "sleep" deno- 
tes the sleeper; the meaning of "persuade" 
includes the persuader, the persuaded person 
and the contents of the persuasion. In a 
next step, one can abstract from the con- 
crete function of dependents and arrive at 
abstract functions like subject, object, ad- 
junct etc. 
Of course, the complements covering these 
roles can be single words as well as large 
phrases; for example "John", "my father", 
"the president of the United States" can all 
fill the role of the sleeper with respect to 
the predicate "sleep". However, phrases need 
not be represented by separate nodes in de- 
pendency trees (as they do in phrase mar- 
kers) because their internal structure is 
again a quest ion of dependency between lexe- 
mes and their complements. In a dependency 
tree, phrases are represented direct ly by 
their internal structure, which results in 
an arc between the superodinated head and 
the head within the complementary phrase. 
Nevertheless, the real pr inciple of depen- 
242 
dency is a relationship between words and 
structures, or, formally, between single 
nodes and trees. Taking this into account, 
dependency trees are much more appeal ing 
than has been recognized so far. 
In order to restrict l inguistic structures 
according to syntactic and semantic require- 
ments, the use of complex categories is 
state of the art. Complex categories are 
sets of parameters (attributes) and values 
(features). Agreement between entit ies can 
be formulated in a general way in terms of 
parameters; the assignment of actual feature 
values is achieved by the mechanism of uni- 
fication. If dependency J.s the relat ionship 
along which the catagories are unified, 
functional=syntactic and mo~ho-syntact i c  
features can be handeled completely in par- 
allel, as opposed to the two-phase mechanism 
which, for example, character izes Lexical 
Functional Grammar. Each element in the de- 
pendency tree carries three labels: a role 
(which applies to the (sub)tree of which the 
element is the head), a lexeme, and a set of 
grammatical features. 
Const i tuency and dependency both have to be 
represented somehow or other in the syntac- 
tic description. As a consequence, recent 
developments have led to a convergence of 
formalisms of both origins with respect to 
their contents. (A good example is the simi- 
larity between Head-Driven Phrase Structure 
Grammar /Pollard, Sag 1987/ and Dependency 
Uni f icat ion Grammar /Hel lwig 1986/.) If 
phrase structure trees are used, the differ- 
ence between governor and dependent must be 
denoted by the categories that label the 
nodes, e.g. by a x-bar notation. If depen- 
dency trees are used, the concatenation 
relat ionship must be denoted by posit ional 
features which are part of the complex 
morpho-svntact ic  category. 
2. Char t  pars ing  based  on a lexical ized 
grammar  
The structure to be associated with a well- 
formed string can be defined in two ways: 
either by a set of abstract rules which 
describe the possible construct ions of the 
~language or by a descr ipt ion of the combi-. 
nation capabi l i t ies of the basic elements. 
The latter fits with the dependency ap- 
proach. Given a lexical item and its morpho- 
syntactic properties, it is relat ively easy 
to give a precise descript ion of its possi- 
ble complements. The main advantage of this 
lexical ist ic approach is the fact that aug- 
menting or changing the descript ion of an 
item normal ly does not interfere with the 
rest while any change in a rule-based gram- 
mar might produce unforeseen side effects 
with regard to the whole. 
The prerequis i te for a lexical ized dependen- 
cy grammar are trees that comprise slots. A 
slot is a descr ipt ion of the head of a tree 
that fits into another tree. Formally, a 
slot is a direct dependent of a head with a 
role associated to it, with a variable in 
the lexeme posit ion,  and with a categor iza-  
t ion that covers  all of the morpho-syntact i c  
p roper t ies  of the apper ta in ing  complement.  
If cross categor i za t ion  does not a l low all 
of the p~ss ib le  proper t ies  of a complement  
w i th in  one category  to be stated, a d is junc-  
t ion of s lots is used to express the alter-  
nat ives.  The only mechan ism needed for draw-- 
ing up complex s t ructures  is the un i f i ca t ion  
of s lots and potent ia l  f i l lers. 
The contro l  of the pars ing  process  is 
ach ieved  by means of a we l l - fo rmed subst r ing  
table ((\]hart). It is w ide ly  accepted that 
chart  pars ing  is super ior  to backt rack ing  or 
to para l le l  p rocess ing  of every path. A com- 
mon vers ion  of a chart  can be v i zua l i zed  as 
a network  of ver t i ces  represent ing  po ints  in 
the input, l inked by edges represent ing  seg- 
ments. The edges are label led with the cate- 
gor ies that the parser  has ass igned to the 
const i tuents  concerned. A l ternat ive ly ,  each 
edge is assoc ia ted  with a complete structur-  
al descrLpt ion,  inc lud ing  the in format ion  
which  is car r ied  by the covered edges. In 
this case, a chart  is s imply a co l lec t \ ]on  of 
trees ( implemented as lists) p ro jec ted  on 
the var ious segments in the input. The inno- 
vat ion  with regard to chart  pars ing  th~vt is 
p roposed  in this paper  is a label.ling of 
edges by trees that compr ise slots. 
At the beginning,  an edge for each word is 
entered  into the chart. Each edge is label\] o~ 
ed wi th  a tree. The head of this tree con- 
tains the lexeme that is assoc ia ted  with the 
word accord ing  to the \].exicon; it carr ies  a 
morpho-syntact i c  category  accord ing to the 
morpho log ica l  p roper t ies  of the word in 
quest ion:  it normal ly  conta ins  a variab\].e as 
a role l~arker, since the syntagmat ic  func- 
t ion of the cor respond ing  segment is sti l l  
unknown. A slot is subord inated to the head 
for each e lement  that is to be dependent  in 
the resu l t ing  structure,  if any. Slots are 
added to a lexical  i tem accord ing to c~>mple- 
t ion  pat terns  refered to in the lexicon. (We 
can not qo into deta i l s  here.) 
Subsequent ly ,  each tree in the chart  looks 
for a slot in a "tree that is assoc ia ted  with 
annother  edge. If the head of the searching 
tree fitn the descr ip t ion  in the slot then a 
new edge is drawn and label led wi th  the com- 
pound tree that resul ts  from inser t ing  the 
f i rst  tree into the second. The categor ies  
of the ~ew tree are the result  of un i fy ing  
the categor ies  of the slot tree and the fil- 
ler tree. Specia l  features  state the posi- 
t ional re~/ i rements,  e.g. whether  the seg- 
ment  cor respond ing  to the f i l ler  has to pre- 
ceed or to fo l low of the segment correspond-  
ing to the e lement dominat ing  the slot. This 
p rocess  cont inues  unt i l  no new tree is pro- 
duced. Pars ing  was successfu l  if at \].east 
one edge covers  the whole  input. The depen- 
dency  tr~e assoc ia ted  with this edge is the 
des i red  st ructura l  descr ipt ion.  
The fo\].lowing example i l lust rates  the me-  
chan ism.  
(I) Flyir,g p lanes  can be dangerous.  
The lex icon lookup leads to the in i t ia l i za-  
t ion of %he chart  in f igure i. 
I%?,- 
noun re) 
un---  I vu~b - f~n I veTb  in f  lad je )  lassert$on\[  
(ATr{._ I (~v_  I (eA_  I I - - ~ I  
adje la)) I verb I ndje ra))l I verb I 
l~ f  ~~) I i I f in  ~a))\[  
Flying planes can be dangerous 
Fig. 1 The chart at the end of the lexicon phase 
(The notat ion  is s impl i f ied  and we have 
omit ted a deta i led  categor izat ion.  The de- 
pendency  structure is represented by the 
bracket ing.  Lexemes are under l ined;  roles 
are in capita\]  letters; slots are marked by 
the underscore  in the lexeme posit ion.  "re" 
means r ight adjacent, "la" means left adja- 
cent wi th respect  to the head. ) 
At the end of the slot fi\].\].ing process  the 
chart  looks like f igure 2. 
(ILLOC assertion (ILLOC asser t ion  
(PRED c gl~verb fin (PRED .can verb fin 
(MV !)f{ verb inf (MV be. verb inf 
( \[~A (lal)gero~l_s adj e ) ) (PA daDqerous ad\] e ) ) 
(SUBJ flying, noun (SUBJ planes noun 
(OBJ p\] anes noun) ) (ATR f~ffl~\[\[ adj e) ) ) ) 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  m 
c~n verb fin (ca! ~ verb fin ! 
(MV be verb inf (MV be_verb inf I 
(PA dan~erotjs adje)) (PA _d.a!)~erqu~ adje}) 1 
SUSJ flyilj~_ ~loUn ( SUBJ \]31anes noun \] 
OBJ \]/la~es \[loun)) (ATR f\]~in!\[ ddje)))) I 
(p_lanes noun ~(E~n verb -in 
(ATR fl~i\q ad je ) ) \ [  (MV \]pc verb ~l~f | 
(OBJ ~ lanes  noun re))  I I 
f g~nq \[ | l(be verb inf I 
no\]?n ~ ~(PA dan?ierous aci e ' ' 
< ..... I . . . . . . .  I 
......... ,,\[ i t 
(fl~\[lq l(/~lanes \[(c n ~(be l(danqerous ILL C I 
aTi~e)-" \[,~-6un'- veTb f in  I,'Trrb lnf  la<\]}e\] ~asse~t~on I 
I (A'r~ - (MY _ (PA.  I ~aEo- -~ i  I 
| ad\]e la) verb a.~ije re)) I verb I 
| inf re) I fin !a))i 
/ I (suBJ _. / I i 
Flying planes can be dangerous 
Fig. 2 The ch~Lrt at the end of tbe pnrsl:~g process 
3. A char t  for  d i scont inuous  segments  
In f igure 2, the vert ices  represent  left and 
r ight marg ins  of segments. Ad jacency  is the 
inherent  pos i t iona l  re la t ionsh ip  in this mo- 
del. As a consequence,  this chart  does not 
a l low for d i scont inuous  const i tuents.  This 
is a ser ious de f i c iency  cons ider ing  the phe- 
nomena of unbound dependenc ies  which occur 
in many languages. The representat ion  of po- 
s i t ion by categor ies j  however,  opens up the 
poss ib i l i ty  to state var ious  kinds of posi-  
t ional  re la t ionsh ips  between heads and de- 
pendents.  In order  to form d iscont inuous  
segments, the contro l  of pos i t ions  in the 
chart  must  be altered. The so lut ion which we 
adopt is to represent  the extens ions  of seg-- 
ments  by bit  str ings cons is t ing  of one bit  
21,3  
for each  word that is part of the segment 
and a zero bit for any word that is not 
within the segement (cf. fig. 3, trai l ing 
zeros are omitted). Discontinuous segements 
are depicted by the alternation of ones and 
? zeros in the bit string. The intersect ion of 
the appertaining bit strings is formed be- 
fore a fi l ler is compared with a slot. This 
intersect ion must be empty, because other- 
wise both segments contain overlapping por- 
tions and one can not be a dependent of the 
other. After a f i l ler is inserted into a 
slot, the union of both bit strings is form- 
ed and associated with the new tree. This 
amounts to island extension of the parsed 
substrings. Other operations on the bit 
strings allow for calculat ing the specific 
posit ional relat ionships stated within the 
categories of slots. The parser runs through 
alternate cycles: It tries to bui ld continu- 
ous segments first. Then it uses these seg- 
ments to form discont inuous segments. From 
the results it tries to bui ld continuous 
segments again and so on. The input is ac- 
cepted if a b i tstr ing can be obtained that 
contains as many bits as there are words in 
the input. 
The example in figure 3 roughly i l lustrates 
the device. (Integers among the categories 
represent the sequence of dependents belong- 
ing to the same head. Lines separate the 
cycles.) 
(2) What does Gudrun feed to her cat ? 
The parser is ful ly implemented within the 
system PLAIN (Programs for Language Analysis 
and Inference), developed at the Univers i ty 
of Heidelberg. So far, it is applied to Ger- 
man (Heidelberg, Kiel), French (Paris), and 
Engl ish (Surrey/UK, Pisa, Hawaii). 
References 
Peter Hellwig: "PLAIN - A Program System for 
Dependency Analysis and for Simulating Na- 
tural Language Inference". In: Leonard Bolc 
(ed.): Representat ion and Processing of Na- 
tural Language. Wien: Hanser; London, Bas- 
ingstoke: Macmil lan 1980, pp. 271-376. 
Peter Hellwig: "Dependency Unif icat ion Gram- 
mar". In: llth International Conference on 
Computational  Linguistics. Proceedings. 
Bonn, August, 25th to 29th, 1986, University 
of Bonn, pp. 195-198. 
Carl Pollard, Ivan A. Sag: Information-Based 
Syntax and Semantics. Vol. I. Fundamentals. 
CSLI Lecture Notes, No. 12., Stanford Uni- 
vers ity 1987. 
Position: Tree: 
(i) 1 (whatpron)  
(2) Ol (do verb f in  
(SUBJ - noun ra i) 
(MV _ verb inf 2)) 
(3) 001 (Gudrun noun) 
(4) 0001 (feed verb inf 
(DOBJ - 15 
(IDOBJ _ to ra 2)) 
(5) OOO01 (to 
(._ noun ra)) 
(6) 000001 (her poss) 
(7) GO00001 (cat noun 
(DET _ poss la)5 
(85 00000001 ( I LLOC~uest ion  
(PRED _ do verb fin la)) 
(95 Oll (d o verb fin 
(SUBJ Gudrun noun ra I) 
(MV _ verb inf 25) 
(I0) 0000011 (c~at 
(DET her poss la)5 
(ii) 0000111 (to 
(cat noun ra 
(DET her poss laS) ) 
(12) OOOll l l  (feed verb inf 
(DOBJ - l) 
(IDOBJ t.~ora 2 
(cat noun 
(DET he rposs  I~55)) 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  
(13) I001111 (feed verb inf 
(DOBJ what i) 
(IDOBJ t__oora 2 
(cat noun 
(DET he_rrposs La))5) 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  
(I~ 5 lll l l l l (d~overb fin 
(SUBJ Gudrun noun ra I) 
(MV feed verb inf 
(DOBJ wha___t 15 
(IDOBJ t_~ora 2 
(cat noun 
(DET her poss Ia5)5) 5 
I15) II i i i i i i  ( I LLOC~n 
(PREDdoverb  fin 
(SUBJ Gudrun noun ra I) 
(MV feed verb inf 
(DOBJ what i) 
(IDOBJ to ra 2 
( c a-~--noun 
(DET her poss la)))5) 
Fig. 3 States of a chart including discontinuous segments 
244 
