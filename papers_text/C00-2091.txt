Generation, Lambek Calculus, Montague's Semantics 
and Semantic Proof Nets 
Syivain Pogodalla 
Sylvain.Pogodalla@xrce.xerox.com 
Xerox Research Centre Europe 
6, chemin de Maupertuis 
38240 Meylan - -  France 
Abstract 
Most of the studies in the framework of Lambek 
calculus have considered the parsing process and 
ignored the generation process. This paper wants 
to rely on the close link between Lambek calculus 
and linear logic to present a method for the genera- 
tion process with semantic proof nets. We express 
the process as a proof search procedure based on a 
graph calculus and the solutions appear as a matrix 
computation preserving the decidability properties, 
and we characterize a polynomial time case. 
1 Introduction 
From the type logical grmnmars point of view, the 
parametric part of the language analysis is the lexi- 
con, and the constant one is the logical rules. This 
should of course hold both for parsing and genera- 
tion, hence we can consider the reversibility proper- 
ties of such grammars. And a relevant problem is to 
compare the complexity of the two cases. 
For Lambek calculus (Lambek, 1958), the pars- 
ing complexity is still an open problem. But the 
question arises to know how to generate in this 
framework, and how d(~cult (on the computational 
side) it is. (Merenciano and Morrill, 1997) an- 
swered with a labelled deductive system guided 
with A-term unification. But a drawback of this lat- 
ter mechanism consists in its algorithmic undecid- 
ability (from second order unification). 
Relying on the linear logic (Girard, 1987) (which 
provides a powerful framework to express Lam- 
bek calculus, specially with proof nets for the lat- 
ter (Roorda, 1991; Lamarche and Retor6, 1996)), 
this paper wants to adress the problem of finding 
the way we can associate given lexical entries to fit 
a given semantic expression and generate a syntacti- 
cally correct expression (for the moment, we do not 
care to the choice of the lexical items). For this pur- 
pose, we express our problem as a proof search one 
in (multiplicative) linear logic which is decidable. 
Moreover, we characterize the semantic recipes of 
lexical items that provide a polynomial solution for 
the syntactic realization process. Then we give an 
example of this process. 
2 Proof Nets for Linear Logic 
Linear logic (Girard, 1987) proposes for proofs a 
morn compact and accurate syntax than sequent cal- 
culus: proof nets (they group distinct sequential 
proofs that only have inessential differences). They 
have both a related to sequential proof definition 
and a geometrical definition: they can be defined 
as a class of graphs (proof structures) satisfying a 
geometrical property so that every proof net corre- 
sponds to a sequential proof and every proof struc- 
ture built from a sequential proof has this prop- 
erty (Retor6, 1998). 
In this paper, we only consider proof nets of the 
intuitionistic implicative linear logic: sequents are 
made of several antecedent formulas, but only one 
succedent formula. To deal with the intuitionis- 
tic notion for proof nets (since we consider one- 
sided sequents), we use the notion of polarities with 
the input (o: negative) and the output (o: posi- 
tive) (Danes, 1990; Lamarche, 1995) to decorate 
formulas. Positive ones correspond to succedent 
formulas and negative ones to antecedent formulas. 
Given the links of table 1, we define proof struc- 
tures (we consider implicative fragment) as graphs 
made of these links such that: 
1. any premise of any link is connected to exactly 
one conclusion of some other link; 
2. any conclusion of any link is connected to at 
most one premise of some other link; 
3. input (resp. output) premises are connected to 
input (resp. output) conclusions of the same 
type. 
Proof nets are proof structures that respect he cor- 
rectness criterion. 
628 
Table 1: Links 
Name Axiom Tensor Par Cut 
pl 1)~ Pl P2 
Premises none P l ,  P2 P l  ~ P2 P l ,  P2 
Conclusions Cl, c2 c none 
Types cl :A + c2 :A -  
C 
Pl :A + 
p2:B-  
c : (A - -o /3) -  
p l  :A -  
P2 : 13 + 
c: (A -o B)+ 
pl :A -  
P2 : A + 
The last link of table 1, the Cut link, allows the 
combination of proofs of 17 I- A and of A, A t- /3 
into a single proof of I', A I- /3. In sequential cal- 
culs, tile cut-elimination property states that there 
exists a normal (not using the Cut rule) proof for 
the same sequent only IYom premises of 17 and A 
(and builds it). 
Of course, this property hokls for proof nets too. 
And to enforce the intrinsic definition of these latter, 
a simple rewriting process (described in table 2) ac- 
tually performs the cut-elimination (in case of com- 
plex fornmlas as in the third rewriting rule, those 
rules can apply again on the result and propagate 
until reaching atoms). 
2.1 Proof Nets for Lambek Calculus 
As Lambek calculus is an intuitionistic l'ragment of 
non commutative linar logic (with two linear impli- 
cations: "\"  on the left and "/"  on the right), proof 
nets for it naturally appeared in (Roorda, 1991). 
They slightly differ from those of table 1 : 
? we get two tensor links: one for the fornmla 
( /3 /A) -  (the one in table 1) and one for the 
formula ( /3 \A) -  (just inverse the polarities of 
the premises). And two par links: one for the 
fommla (A \B)  + and one for (A /B)  + (idem); 
? formulas in Lambek's equents arc ordered, so 
that conclusions of the proof nets are cyclically 
ordered and axiom links may not cross. 
From a syntactic ategory, we can unfold the for- 
mula to obtain a graph which only lacks axiom links 
to become aproof structure. So that the parsing pro- 
cess in this framework is, given the syntactic ate- 
gories of the items and their order, to put non cross- 
ing axiom links such that the proof structure is a 
proof net. It means there is a proof of ,5' given types 
in a certain order. Proving that John lives in Palls 
is a correct sentence w.r.t, the lexicon of table 3 
(the two first columns) is finding axiom links be- 
tween the atoms in the figme 1 (a) so that the proof 
structure is correct. Figure l(b) shows it actually 
happens (for technical reasons, ill the proof net, the 
order ot' the syntactic ategories i the inverse of the 
order of the words in the sentence to be analysed. 
Figure 1 (c) shows John lives Palls in cannot be suc- 
cessfully parsed). 
2.2 Proof Nets for Montague's Semantics 
Capitalizing on tile fact that both A-torms (with the 
Curry-Howmzl isomorphism) and proof nets repre- 
sent proofs of intuitionistic implicative linear logic, 
(de Groote and Retor6, 1996) propose to use proof 
nets as semantic recipes: since proof nets encode 
linear A-terms, instead of associating a )~-term in tile 
Montagovian style to a lexicai entry, they associate 
a proof net (decorated with typed constants). An ex- 
ample of such a lexicon is given in table 31 (par links 
encode abstraction, and tensor links encode applica- 
tion). 
Of course, to respect semantic types based on 
Montagovian basic types e and t, they use the fol- 
lowing homomorphism: 
7\[(NP) = e "H(S) : I 7t (A\B)  = 7t(A) --o'H(B) 
7t(N) = e --o I 7t(A/13) = ~(B)  --o 7t(A) 
Let us illustrate the process in parsing tile sen- 
tence John lives in Paris. First we have to find 
the syntactic proof net of figure l(b) as explained 
in 2.1. It provides the way syntactic omponants 
combine, hence how semantic recipes of each lexi- 
cal item combine: we take its homomorphic image 
I Unlike in (de Groote and Retor6, 1996), we restrict our- 
selves for llle moment to linear ~-terms. 
629 
Table 2: Cut-elimination rewriting rules 
Y 
r - -q  ............... + 
Y x 
L , q l  
x I x.2 Yl Y'2 
Y 
;13 
S- ,5 '+ "q9  
N P --q\]/S- N P + 
OC------------ ? ? .............. 0 ? / /  ~'-,\ /," 
o l\r l)- ~ X~V c I\r P, O,S "+ 
Paris in li "s John 
(a) Unfolding of the syntac- 
tic typos 
,d :itrl ........ j
l 'S'+ 
(b) Matching the dual atoms 
to obtain a prool' net 
i !  N/')ri! ;~' ; i ' \ r~ht  S+ 
(c) Incorrect prool' structure 
for parsing Jolm lives I'aris in 
Figure 1 : Parsing of John lives in Paris 
as in figure 3(a). The substitution of every input 
with its semantic definition we would like to per- 
form on the ~-calculus ide appears on the logical 
side as plugging selnantic proof nets with cut-links. 
Then, the fl-reduction we would like to perforln 
has its logical counterpart in the cut-elimination on 
the resulting proof net. it gives a new proof net (on 
figure 3(b)) we can use as the semantic analysis of 
John lives in Paris. If necessary, we can come back 
to the k-term expression: (in p)(live j). 
In other words, the syntactic proof net yields a 
term t expressing how the elementary parts combine 
(in this case t = (ab)(cd)). Then the resulting proof 
net of figure 3(b) corresponds to the/3-normal form 
of t\[)~x.*y.(in x )y/a, p/b, Az.live z / c, j/d\]. 
3 What is Generation? 
We can now state the problem we arc dealing with: 
given a semantic proof net (like the one in fig- 
ure 3(b)), we want to put together syntactic entries 
with axiom links such that: 
1. this yields a correct (syntactic) proof net; 
2. the meaning of the resulting proof net matches 
the given semantic expression. 
Thus, if we define: 
* l\]o the semantic proof net of the expression we 
want to generate; 
? Hi the semantic proof nets associated to the 
given lexical entries i we use; 
. Ti the nnfolding in proof slructure of the syn- 
tactic formula of the lexical item i (as in fig- 
ure 1 (a)); 
? F the forest made of the syntactic trees (7~) of 
all the considered lexical entries plus the out- 
put (the type we want to derive), 
the generation problem (see figure 4) is to find a 
matching M of atomic formulas of F such that: 
1. F endowed with M (let us call this proof struc- 
ture F/) is a correct proof net; 
2. when cut-linking 7\[(1 v/) with tile lIi, and elim- 
inating these cuts, we obtain 110. 
We note that the problem is intrinsically decidable 
(because the finitness of the number of the match- 
ings) without making any assumption on the form 
of tile semantic entries. Of course, we want to keep 
these good properties in our algorithm. 
630 
Table 3: Lexicon 
lexical entw syntaxic category associated.k-term 
John NP  j 
Mary N / ~ m 
Paris N l ~ p 
Lives N / ~\,5' Xa:. l ive :c 
in (S\ ,S ' ) /NI"  k:c.)~j.(in ,~)~j 
semantic proof net 
\] \[John (cf. tigure 2(a)) 
\]\[Mary (cf. ligure 2(b)) 
l lpari s (cf. figure 2(c)) 
lltive (cf. figure 2(d)) 
\]lin (cf. figure 2(el) 
c' + ~ . . . . .  Ja c- c-'- ~--~,m c- c-' ~-----ap c- ,i!e '"\[/ 
(a) tljohn (b) \]I John (c) Ill,aris (d) lllivc 
" . / / 
1 , 
in 
(el \]\]in 
Figure 2: Semantic proof nets of the lexicon of table 3 
4 Cut-el iminat ionas Matrix Computation 
U:dng proof nets resulling from a cut-elimination 
to guide a proof search on proof nets b@)re cut- 
elimination relies on the algebraic representation f 
cut-elimination on proof nets expressed in (Girard, 
1989) and rel'ormulated in (Retor6, 1990; Girard, 
1995). Due Io lack of space, we can not developp 
il, but tile principle is to express cut-elimination be- 
tween axioms with incidence matrices and paths in 
graphs. 
Let us consider a proof net U. We can define 
U the incidence matrix of axiom links', c, tile inci- 
dence matrix of cut links (we assume wilhout loss 
of generality that llley happen only between axiom 
links), and \]\[ the incidence matrix of axiom links of 
1I where 111 is lhe proof net resulting from all lhe cut- 
eliminations on U. Then we have (Girard, 1989): 
\ ] l - -  (:l - ~2)U(:l - ~l:;)- '( : l  - ~)  ( l )  
We want to give an equiwflent relation to (1) fo- 
cusing on some axiom links we are interested in. 
Without loss of generality, we assume tile lack of 
any axiom link in U such that none of its conclu- 
sions are involved in cut links. 
Then we can choose an el'tier for tile atoms (from 
lhe proof net before the cut-elimination, there is 
three subsets of atoms: those not involved in a cut 
link, those involved in a cut link and whose dual is 
not involved in a cut link, and those involved in a 
cut link and their dual as well) such that: 
f o :: o 1 n t::o o l  
u = o- 
\["(Y'~0"IU;iJ, , . 0 i<~ic4\] 
Note that all the atoms belonging to the matching 
we are looking for in the generation process (see 
ligure 4) are in U:I. 
If we detine A = ( llJ 1111 - o~ eU 1 l/J1 and X = 
U:~(1 - ~r.l U3)- J, we can state tilt theorem: 
Theorem 1 Lel g/ be a correcl proof net reducing 
in Res(o, U) after cul-eliminalion. These relations 
are equivalenl: 
? u)  = (: i  -   )cr(t - - 
? (q / j i l l  - a:l *(/1 )U1 = o'21&(l - o,lU3) -1 l~r u 
? A - -  I (T2X(T  2 andU:~ = X -1 + o4. 
Of course, all the terms are defined. 
We bast the proof search algorithm corresponding 
to the generation process we are dealing with on this 
third relation. 
Indeed, the axiom links we are looking for are 
those whose two conclusions are involved in cut 
links. That is we want Io complete U3 (knowing 
all the other matrices). The previous theorem states 
that solving tile equation (1) correponds to solving 
631 
' I 
=================================== i:i::::\]:::::: :i }iiiiiiiiiiiiiiiii :: 
(a) Before cut-elimination 
% __~g 7:1 
p m l ive j 
(b) After cut-elimination 
It 
Figure 3: Semantic proof nets for (in p)(live j) 
~ - " ' ~ ' ' ;L cut -c l im ina lkm I l l )  l 
Figure 4: The generation problem 
the equation A = cr2X tcr2 in X with X inversible. 
Then, we have to solve U3 = X -1 + or4 such that 
tU~ = U3 and U~ -- 1. 
Theorem 2 If or4 = 0 and there exists a solution, 
then the latter is unique and completely defined (as 
matrices product)from A and ~2. 
If cq 7~ 0 we generally have many solutions, and we 
have to investigate this case to obtain good compu- 
tational properties for example in adding word order 
constraints. 
Nevertheless, we can decide the case we are han- 
dling as soon as we are given the lexical entries. 
5 Example  
Let us process on an example the previous results. 
We still use the lexicon of table 3, and we want to 
generate (if possible) a sentence whose meaning is 
given by the proof net of figure 3(b). 
We first need to associate very atom with an in- 
dex (in the figures, we indicate a number i beside 
the atom). Of course, we have to know how to rec- 
ognize the atoms that are the same in U (figure 5(b)) 
and in I\[ (figure 5(a)). This can be done by looking 
at the typed constants decorating the input conclu- 
sions (for the moment, we don't have a general pro- 
cedure). 
We also assume in this numbering that we know 
which of the atoms in ~(F )  is linked to t + (the 
unique output). In our case where ?4 = 0, it is 
not a problem to make such a statement. In other 
cases, the complexity would increase at most poly- 
nomially. 
Then, the given 
\] 000000 
0100000 
0010000 
Ut = 0001000 
0000100 
0 0 0 0 0 1 0 
000000 l 
0000000 
000000 
000000 
000000 
000010 
~1 = 000100 
000000 
000000 
000  
And the unique 
matrices are: 
0 
0 
0 
0 117 = 
0 
0 
0 
1 
0 0- 
O0 
O0 
O0 
00 ~2 = 
O0 
00 
00000.  
solution is: 
x=u~= 
0:1000000 
10000000 
00000010 
0000 \] 000  
00010000 
00000001 
00100000 
.00000100.  
-100000 
0 \ ]0000 
001000 
000000 
000000 
000010 
000100 
.000001.  
\[;'???i\]  oooo  0010 0100 0000 0001 
632 
We can add this matching to the syntactic forest of 
figure 6(a) (do not forget that the link between S+ 
alld c~,- is in U1 and not in U3, and that U:3 represents 
edges between atoms with i E \[17, 22\]) and obtain 
on F the matching of figure 6(b). 
We still have to ensure the correctness of this 
proof net (because we add all the tensor and par 
links), but it has a quadratic omplexity (less than 
the matricial computation). In this case, it is cor- 
rect. 
Actually, this only gives us the axiom links. It 
still requires to compute the word order to have no 
crossing axiom link. This can be done from the ax- 
iom links easier than quadratic time (it is a bracket- 
ing problem). 
6 Conclusion 
We showed that the problem of generation in the 
Lambek calculus fi-amework is decidable, and we 
relied on selnantic proof nets to express it as a 
guided proof search. On top of keeping the decid- 
ability property of this framework, we characterized 
the semantic proof nets that euable a polynomial 
time processing. 
Nevertheless, some work remains: we should 
soon work on the atom numbering and the choice 
of the lexical items to enable a practical ilnplemen- 
tation of this work. Moreover, we want to benefit 
from the power of linear logic (and modalities) to 
deal with non linear A-terms. 
Finally, since different extensions of Lambek cal- 
culus based on proof nets (Moortgat, 1996; Lecomte 
and Retord, 1995) have been considered, we hope 
our proposal and its good properties to apply to 
other linguistic approaches. 
Acknowledgments 
I would like to thank Christian Retord who pointed 
out to me Girard's algebraic interpretation of the cut 
elimination, and the anonymous reviewers for their 
helpful colnments. 
References 
Vincent Danos. 1990. Une Application tie la 
Logique Lin&tire ?t I Etude des Processus tie Nor- 
malisation (principalement du A-calcul). Ph.D. 
thesis, Universitd Paris VII, June. 
Philippe de Groote and Chritian Retord. 1996. 
On the semantic readings of proof-nets. In 
Glyn Morrill Geert-Jan Kmijff and Dick Oehrle, 
editors, Formal Grammar, pages 57-70, Prague, 
August. FoLLI. 
Jean-Yves Girard. 1987. Linear logic. Theoretical 
Conq)uter Science, 50:1-102. 
Jean-Yves Girard. 1989. Geometry of interaction 
I: Interpretation of system F. In C. Bonotto, 
R. Ferro, S. Valentini, and A. Zanardo, editors, 
Logic Colloquium '88, pages 221-260. Nortll- 
Holland. 
Jean-Yves Girard. 1995. Geometry of interaction 
III: The general case. In J.-Y. Girard, Y. La- 
font, and L. Regniel; editors, Advances in Lin- 
ear Logic, pages 329-389. Cambridge University 
Press, Proceedings of the Workshop on Linear 
Logic, ithaca, New York, June 1993. 
Franqois Lamarche and Christian Retor6. 1996. 
Proof-nets for the lambek calculus - an overview. 
In V. Michele Abrusci and Claudio Casadio, edi- 
tors, PIvceedings 1996 Roma Workshop. Proof~ 
and Linguistic Categories, pages 241-262. Ed- 
itrice CLUEB, Bologna, April. 
Franqois Lamarche. 1995. Games semantics for 
full propositional linear logic. In Proceedings, 
Tenth Annual IEEE Symposittm on l_z~gic in Com- 
puter Science, pages 464-473, San Diego, Cal- 
ifornia, 26-29 June. IEEE Computer Society 
Press. 
Joachim Lambek. 1958. The mathematics of 
sentence structure. American Mathematical 
Monthly, 65(3):154-170. 
Alain Lecomte and Christian Retord. 1995. Pore- 
set logic as an alternative categorial grammar. In 
Formal Grammar, Barcelona. 
Josep M. Merenciano and Glyn Morrill. 1997. 
Generation as deduction on labelled proof nets. 
In Christian Retord, editor, hvceedings of LACL- 
96, volume 1328 of LNA I, pages 310-328, Bed in. 
Springer. 
Michael Moortgat. 1996. Categorial type logics. In 
Johan van Benthem and Alice ter Meulen, edi- 
tors, Handbook of lx~gic and Lzmguage, pages 5- 
91. Elsevier Science Publishers, Amsterdam. 
Christian Retor6. 1990. A note on turbo cut elimi- 
nation. Manuscript, September. 
Christian Retor6,. 1998. Handsome proofilets: 
R&b-graphs, series-parallel graphs and perfect 
matchings. Technical Report 1234, IRISA. 
l)irk Roorda. 1991. Resource Lz)gics: Proof- 
theoretical hlvestigations. Ph.D. thesis, Univer- 
sity of Amsterdam, September. 
633 
3 4 
t __Z- 6 7 
(a) Marking atoms on \]I 
. . . . .  F . i ,~  . . . . . . . . . . . . . . . . . . . . . .  ..- 
,1 12,! 18 '_e~_+:3 _~./ 
) 
e- -  
19 22 20 21 
l ives 
gIq 
Pc. 
17 
. . . . . .  ~lives . . . . . . . . . . . . .  
,5 I 7 
~-,:+/~/~+ ~-/ 
, ,  ~A ? oc-----~:" !~to,~ np,:,~ . . . . . .  
,4 - .7  \~  : ,:::: ....... , i 
...... --:'- ............. live :: :: 116...!.. ! ::l~ ..... .P. :: 
I~_~77ZT-Z7272 ~!............ _ \ ]  
(b) Marking atoms oll U 
I 
Figure 5: Defining the indices on U and \]1 
l 
r 
- 20Np+21 
'~ N, . - i  72 
Pearls 11"~ lives Jol~l S + S+ 
(a) The syntactic forest (b) The syntactic forest endowed with 
the matching described by U3 
Figure 6: App ly ing the matching on the syntactic forest 
634 
