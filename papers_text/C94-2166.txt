A Dutch to SQL database interface using 
C4cnc, elized Quantifier Theory 
\])irk Spce lmml  \[I\] (\]ccri; Adr iaens  \[1'2\] 
\[1\] Un ivers i l y  of l ,cuvcn (Jcnl;er \[or Comput~t iona l  , inguisi; ics, 
B l i jdc - Inkomstst ra .~t  21, 3000 l ,cuven,  Be lg ium 
\[2\] Sicme:ns-Nixdorf  Sof tware Cent re  Lib.ge, 
Rue  des lJ'orics 2, 4020 Lib.ge, Be lg ium 
Abst rac t  
This paper presents the treatment, of quantitication as 
it was imI)lemented in a prototyl)c of a natural lan- 
guage relational database interface for l)utch 1. It is 
shown how the theoretical 'generalized (tuantifier' ap- 
l ) ;tratlts introduced in formM semantics by Barwise 
and (\]oot)er can be I, uned to irrq)lementational feasi- 
" ( bility. (,ompm ~d to the t, raditional tl'(~atl'flellt of (luan -
tilication, tile alternative l)rcs('nted here offers gre;tl;er 
ext)ressive l)ower, great,re' similarity to natural lan- 
guage and, as ~t consequoxmo., the possibility o\[' a more 
straighl,forward tral,slation from natural language to 
tbrmal repres('.ntation. 
1 INTRODUCTION 
In the prototyl)e at hand, as in many database inter 
faces, the natural anguag(', input is translated go a con- 
ventional formal query language, viz. ,qQL, the most 
widely used and supported of these languages. The re- 
sulting SQL queries can then be 1)asscd to an already 
existing SQL interpreter. 
The translation i)roccdui:e fi'om Dutch to SQI, 
is spill, up in two (:OrlSCcutive trl~tior sl,eps, using 
a logic-based itllierrrlediate sel/la.nLic represellta?ion 
called GonerM Sem~mtic l{epresentation (GSH.) 2. The 
functionality of' the whole database interface, includ- 
ing the SQI, interpreter, was seen as a straight, forward 
implementation f the fornial semantic Montague-style 
(Montague,197:l) mechamsm of indirect interpretat;ion 
of natural language (see Fig. 1). 
T I 
NI,  - -b . -C~Sl{ -  -~ 1)13 
NL i . . . . .  + (}~{It . . . . .  -q~ SQI ,  - -  - -  ~ I )B 
l!'igure 1: Major processing steps in the I)B interface 
'Grafting' tbrmal semantic pro(:essing steps upon ~tn 
NI, datal)ase interface architecture has 1)een \[)r(>l)~- 
1 \[u this i>aper the actual iinl)lelnentation is not in focus (see 
Sl)eelman , 1992). 
2WiLh ln  a f rmnewor l?  o f  mach ine  I , r ;ms l ; t t i (m,  we c ;m say  1 l la l ,  
(-ISIt, is a kind of logic-based intcrlingua. 
gated and (succesflllly) worked out betbre in a some 
whal, comparable project carried out at the university 
of l,',ssex (see 1)e Pmeck, Fox, Lowden, Ttlrner gz Walls, 
1991). The main concern in that project was to clearly 
separate domain (-- database) dependent semantic in- 
tbrmation t?om domain independent semantic informa- 
tion. In the project presented he.re a similar but more 
general ol/jective was to maximize the separation of 
the N LI ) data and filnctionality of the system fi:om its 
purely database oriented data and fimctionality, GSR 
being the interface structure. 
13ntch ques l ion  
I 
I 1 ..... I 1 .1. NI, d&ta ~ 1, (If4l{ generat , , r  I I 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  t.  . . . . . . . . . . . .  n 
C~SR expre~aion  
iT)rl -:*B ~s~ s2 gzK . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  t . . . . . . . . . . . . .  
I ) l lSI I .  query  
1 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  t . . . . . . . . . . .  
SQL  query  
Figure 2: General architecture of the program 
'File main topic of this paper, treated in section 3, 
is the application of 'generalized quantitier theory' in 
GSR. llaving become classical in mathematical and 
some theoretical linguistic studies on quantification 
(SeC resp. Mostowski, 1!)57 and Barwise ,~z Cooper, 
1981), tile theory is now beginning to be appreciated 
in A\[ (and NI,P) for its richness and flexibility. Proba- 
bly the best illustration of this upcoming interc'st is the 
incorporation of 'generalized quantifiers' in the popu- 
lar (kmccI)tuat Graph knowledge represenl;ation for-- 
realism (see e.g. Sowa, 1991). A somewhat differently 
7029 
oriented AI-application also using 'generalized quanti- 
tiers' can be found in (Kaan, Kas & Puhland, 1990). 
These applications concentrate on the expressive and 
inferential power of 'generalized quantifier theory' re- 
spectively. The program presented here additionally 
illustrates how the use of (a variant of) the theory re- 
duces the complexity of implementing {;he translation 
from natural to formal and artificial language. 
2 GSR:  GENERAL OUTL INE  
The question what GSR should look like was to a l~rge 
extent tackled in a very pragmatical way. As far as 
the linguistic module of the program is concerned, the 
following criteria were formulated. GSR had to be a 
formal representation 
(i) with sufficient expressive power so theft every possibly useful 
query can be formulated in it in a not too complex fashion, 
(ii) that is relatively easy to reach computationally, start ing off 
from natural language. 
A general observation is that, considering the kind 
of NL sentences one can expect as input to the system, 
GSR, inevitably had to differ from logical formalisms 
such as the ones used in formal semantics (focussing 
on propositions). In view of the general decision to 
work with intermediate, semantic expressions the de- 
notation of which is the answer to the NL questions, 
the basic types of complete xpressions listed in Pig. 3 
were found useful. In this figure 9~ stands for an ar- 
bitrary proposition in some logical language L. The 
e.xtension of L created by introducing these new types 
will be called L '. 
(i) propositions (format: ?p), to be used when people ask yes-or-no 
questions 
(ii) set expressions (format: {a~, \[ ~o}), to be used when people ask 
non-numerical identity questions 
(iii) mathematical  expressions (formFtt: #({~" \] go})), to be used 
when people ask for nmnerieal information 
Figure 3: GSR: types of expressions 
3 FROM DUTCH TO GSR 
3.1 ~ and V: problems 
The traditional.way of coping with quantification in 
NL database interfaces is by using _~ and V, the clas- 
sical first order predicate logic (PL) instrmnents (see 
e.g. Warren & Pereira, 1982). This approach, however, 
does not meet the criteria set out above. To illustrate 
this, we basically rely on two observations Barwise &. 
Cooper (1981) made to show a fundamental difference 
in the natures of NL and PL. Their observations will be 
'transposed' to the computational pplication at hand. 
The first observation is illustrated in figure 4, which 
contains ome Dutch questions attd their most natural 
PL' counterparts. Whereas the Dutch sentences have 
the same syntactic structure, their PL' counterparts 
have different formats. These and many other exam- 
ples suggests that there is no trivially compositionM 
way of translating NL expressions to their nearest PL' 
equivalents. The problem is thai; the quantiticational 
information, which in NL has a fixed location, is spread 
over the PL' expression in a seemingly arbitrary way. 
It may be concluded that criterium (ii) for a good GSR 
is violated. 
1 Zijn alle werknemers gehuwd ? 
'Are all employees married?' 
2 Zijn bcidc werknemers gehuwd? 
'Are both employees married?' 
~.~-ff~((,~ ? ~2)A 
Vy(ert~plo~dec(y ) ~ ((y = Xl)V (y : 0C2)))A 
rnarried(:q ) A mar,'ied(x2))  
3 Zijn precies drie werknemers gehuwd? 
'Are exactly three employees married?' 
(:/"1 # '~2) A (a31 ? "r:'3) A (:';2 ~;~ gJ3) A 
. . . .  p loyee(x  I ) a employee(z" 2 ) A errzployce(~: 3 ) 
^Vy(( . . . . . .  "icd(y) A employee(y ) )  
((y : Xl) V (y : "2) V (y = Xg))A 
. . . . .  "ried(eo" l ) A .. . . . . .  ied(x2 ) A ...... "ried( a; 3 ) ) ) ) 
4 Zijn rncer dan de helft van de 
werkrlerners gehuwd7 
'Are more than half of the employees married?' 
Figure 4: Translation of quantification from Dutch to 
PL' 
A second, more serious reason f'or the inadequacy of 
E and V is that some forms of Nil, quantification (:art 
only be expressed in a very complex way (e.g. Fig. 4, 
examples 2 and 3) or simply cannot be expressed at 
all (e.g. Fig. 4, example 4). llere criterium (i) is not 
satisfied. 
A third problem, mentioned in Kaan, Kas & Puh- 
land (1990), is that in practice, e.g. in implementa- 
tions, one is tempted to make rough translations, and 
to neglect nuances or strong conversational implica- 
lures in natural language, when one is limited to 3 
and V. So, for instance, in Warren & Pereira (1982) 
%', 'some' and 'the' all are simply interpreted as ~. 
3.2 L(GQ)': a solution 
There are many ways to try atnl get around the short- 
comings of the traditional approach. To score better 
on criterium (i), i.e. to increase expressive power, one 
could consider the introduction of nnmbers in the log- 
ical formalism. Only, one can imagine that, if made in 
an ad hoc way, this extension could result in a hybrid 
formalism (with respect o quantification) showing an 
even greater syntactical mismatch with NL (decreasing 
the score on criterium ii). 
A solution for these probleins was first explored by 
Montague (1973), and later thoroughly worked out by 
Barwise & Cooper (1981)in a formalism called L(GQ). 
In contrast o traditionM Pfi, which only has 3 and V, 
the language of generalized qnantifiers L(GQ) specilies 
no limitation of the number of primitives to express 
quantification. All kinds of del, erminers ('.an be used. 
The translation of the examples of Vig. 4 to L(GQ)' 
is given in Fig. 5. Some special notational conven- 
tions Barwise & Cooper introduced, are left ont. Fur- 
1030 
thermore ~t relal, ion~fl perspective (see Zw;u'ts, 1983) is 
l l sed.  
2 
:1 
4 
Zi jn  al le werknemers gehuwd ? 
,u({~ I .... vlov~,(,:)), {* I ,,,,.,.i~d(x)}) 
Zijn be|de  werknemcrs gehuwd? 
th~_~({,, I ~,,~vtow4:,:)}, {~ I ... . .  . , , i~a(x)}) 
gijn precies drie werknemers gehuwd? 
e:t: act  ly Zl 
({a: I emptoyee(,:)), {a: I mar,'ied(.v)}  
-~Zijn meet dan de he l f t  wm de 
werknemers gehnwd? 
r rzm'e_than_~.  2 tit 
({:,: I ..... .1o . , ,4 . : )} ,  {.,: I ...... , '~-,z(20)D _ 
I?igure 5: Tr ;mslat ion o\[  ql~m21;ifical,ion from Dutch t.o 
I , ( ( \ ]q) '  
The. denotat ion of I , (GQ)'  determiners  is de.fined ~l; 
a meta--h',vel, Some (,xamples are given in (1) Co (/1). 12, 
these examples I s tands for m~ inl, erpreA, al;ion funcl;ion 
mNq)ing ~m expression on its de.notation. 
"r, . . .  (it (x (v )  \ * (x) )  = ~) b )  ~(,11(~, x)) :: i,,,,~,~,~ (oth,,,'wi~;(0 
I ( t l  . . . . . .  (q~,X) )  = Undef iTze .d  (if #(l(V~)) 7': ,z) 
~(,m(v,, x)) (,,th(,,.,,,i,~) (P') 
*(~:.,,(,~.ttu_,,(~o, x) )  = "r,..~ (if #(v  n x)  = ,*) 
? Fa l se  (atherwise) (3) 
t( . ,o, . ,~.~ . . . . . . . . . . .  th (e ,  x) ) : :  
"~',.,,, (it #(/(w) r~ X(x))  > #( t (w) ) / , , )  (d) 
l , 'a lsc (ot, herwise) 
In Fig. 5 the sl;ructural similarity of the NI, expres- 
sions is |'eflected in that  of the I , (GQ)'  expressions. 
l;urthermore., all N l, e.xamples (;&II\[ le expressed almost 
equally easily in \[,(QQ)'. By consequence, the formal- 
ism does not \[brce peol)le tel Ioe satisfied wil,h rough 
l;r~msl~l,ions. In shorl;, 1;t1(; problems o\[' l, radil, ional log- 
ical quant, ifi(;ation are overcome. 
3.3 L(GQ)': complications 
Unfortnnately,  there are two reasons for not, consider-. 
ing I , (GQ)'  an ideal sohll, ion. The first probhml ac- 
tual ly is not typic~d of I,(GQ), lml, of l;he fact that  
B~rwise & COOl/er take over i;he Mont~Govian way of 
coping with I)ossible ambiguiW due to phenomena of 
quanti l ier scope. In these cases one reading is gener- 
;*ted in ~t straighl,forwa,rd way by H~rwise &, COOlmr. 
To allow for altern~ttive red,dings, they introduce extra 
machinery (called t,\]2o 'qumll, itieat;ion rule'). 
' l 'he  l~ttl, er iFleella, lliSlil~ howeve l ;  coiivelli(:l l~; \[1!o211 it 
l,heoretic?fl point of view, is rather imph~me~ntation-. 
unfriendly. It Ol)eral;es ou coml)lete sl, ructural  de- 
scr ipt ions (=non-t;r ivial  trees), and generat,es comph'l,e 
strucl, urM descril/tions. Allowing for such ;~ rule dras- 
tically changes the l)rolih~ of I, hc pm:ser thai; is needed. 
The second problem is (,h~l, il, is undesirable for GS It, 
being mt interface \[;mgm~ge with ;~ non NI,P me(hi lt ,  
to court,in the set of (NL instlircd ) det, erminers l;hal, 
I , (GQ)'  contains. It wonld prol)~d)ly be I)el.ter it' GSt{ 
had fewer primil Jves, prererably of a l,ype not com. 
plei;ely uncust, oma,ry in t radi t iomd I)I}MSs. 
3.4 GSR: an L(GQ)' derivative 
As a soluti(/n for these problems I , (GQ) '  gets two new 
neighbours in the 1,ransh~tion process, as shown in 
Fig. 6. 
NI ,  - -  - - i k -  StI . I  - - ~ , - -  b (G-q) ' - -  - - I~  ( \ ]S I t  
I"igure 6: Major processing steps in the, N I,P subsys.- 
\[,(Jill 
In order to avoid l,he N)pli(:~Ltion of the 'qu~mlJti- 
cation rule', th(; choice has been to first generate, an 
expression that  is neul;ral wil, h resl)ect, l;o l, he SeOlle of 
its quantifie.rs (SR.1), and then solve the scope I)rOt> 
lem in a second step, hereby generat ing m2 I , (GQ) '  ex~ 
press|on. The 1,rick of first ge.ne.rating a scope-neula'M 
expression is not new. I,'or instance, it, is used in the 
l ,OQUl system (see Gailly, l~.ibb('.ns & Binot,  1990). 
The originality lies ral, her in the eflbrt to respect well-- 
l'ormedne.ss iut, he scope-neutral  expre.ssions. 
hdbrn,a l ly  speaking, SILl is a llre.dieate-logic;fl or-- 
realism in which the arguments  of the l lredicates ~Lre in- 
te.rnally structure.d as l;hl~ N \[, arguments  of verbs. The 
most imt)ort~mt (:onsequence is that  del;erminers are lo- 
cal,ed within the predi(:~fl;e-~rguments, q'o give an ex- 
ample, 'Werk('n alle werknemers a~m l,wee pro jekten? '  
( l)o all employees work on two projects?) wouhl be 
represent;ed ;ts (5). For idenl;il;y and cm:dinMil,y ques 
t.ions l, he formats in gig. 3 ;~re rn~( le  SUl)ertluous by 
the pseudo .(M;ermin(:rs Wl l  and CARl ) .  For insl,ance, 
|;he quest,|e22 'Ue lke  werkt lem( ' . r s  werke l l  aan  t,wee pro  
jekten? '  (Which e.mph}yees work on two projects?) is 
translated to (6). 
..... q:(all({a" I .... ploy,.'e(x)}), 2({~: I proj~:ct(x)})) (5) 
...... k(W//({~: I . . . .  ployee(,v)}),  2({:c I p , 'o jeet (x)}) )  (Ci) 
The l, ranslation of NL l,o SI{1 is a sl, raightA'orward 
eoint)ositionM process, compar~tbh'~ t,() the I}arwisc 
()oopcr processing of readings for which no 'quantif i-  
cation rule' is ne.eded. The a lgor i thm lbr going fi'om 
SRI 1,o L(GQ)'  is given in l?ig. 7. 
If an S1{1 expression contains a pseudo-determiner  
W\]I or CAll.l), the schema in Fig. 7 is adapl;ed as fol 
lows. In the first step the arguments  with reM deter- 
miners are replaced by w~rb~bles vl up to v~,, ~md the 
cial w~riable v0. l!'urther, |;he result ~o of the norm;fl 
secolld sl,(}l/ is IAil'l|ed into ;t se|, expression or ~t numer~ 
i~ l  ,:xt,,:,~.~.io. ({,,,, I & A ~} ,l,: #({~,~ I ,v,, A ~}) )  'rhe 
t, hird step, which is ~o-inl, ernal, remains unchanged. 
The essent;iM part  in Fig. 7 is l;he procedure that  d(' 
te.rmines th(; possi/)le SCOlle-configur~tions. In l;he pro- 
gl'a, lrl only one, I;he most I)robad)le scope-conligurat,ion 
is genexai;e(l. The algor i thm st~d, es that  <,he e~rlier 
some quantif ier occurs in I;he N l, e.xpression, the larger 
its s(:ol)e should be in the I , (GQ)'  expression. In t, he 
1031 
P(D 1 (S 1 ), 02(S  2 ) . . . . .  D n(Sn )) 
t 
Every argument Di(,~i) is replaced by a new, unique 
variable vi (i E {1,. . . . .  }) 
t 
. . .p (~,v2 , . . . , v ,O . . .  
t 
An independent procedure is run to determine tim probable or 
possible scope of the determiners. The determiners are wrapped 
around the initial proposition according to this scope. Formally 
the scope-determining procedure generates for every probable or 
possible reading a permutation f of {1, . . .  ,n}. 
t 
01(1) ( . . .D j ( .2 ) ( . . .D j ( , ) ( . .  P (V l ,V2 , . . . , v ,~) . . . ) . . . ) . . . )  
t 
The remaining lacunes are filled up by adding, as shown, to 
every determiner 0 i  its original domain-set Si, and the 
variable vi that was introduced before to replace 
l ) i (S i )  (i C {1 . . . . . . .  }) 
t 
D t(1)(sj(t),.{vf(t) I Ds(2)(sf(2), {vL(?) I ;q;, 
01(n) (S l (n ) ,{V l (n  ) l~tV l ,~2, ' ' ' , v " )1 ) ' ' ' l )1 )  
Figure 7: Schema for translation fl:om SR.1 to L(GQ)' 
NL fragment hat was tested extensively with the pro- 
gram, this procedure proved to be amazingly accurate 
(see Specimen, 1992, 85 98). The fllture goal, how- 
ever, is that instead of on(.' most probable reading a 
list of all possible readings, tagged with a degree of 
probability, is generated. Since the procedure is a sep- 
arate module, any extension or alteration of cat, be 
made without affecting the rest of the program. 
What remains to be overcome, is the fact that intro- 
ducing a large set of determiners in GSH. would burden 
the interpreters used it, the database subsystem with 
an extra, NLP-type recognition tank. This problem 
is solved by giving L(GQ)' a righthand neigbonr (see 
Fi X. 6 in which the determiners are replaced by what 
was originally the recta-level definition of their seman- 
tics (see (1)-(4)). In the resulting I,(GQ)' derivative, 
called GSR, the numl)er of primitives (set, set inter- 
section, set difference, set cardmality, ...) is drastically 
reduced. Fnrthermore, the new primitives are much 
closer to, and even at the heart of, the procedural and 
semantic building blocks of traditional computer sci- 
ence in general, and of relational DBMSs in particnlar. 
An example of the complete procedure, going from 
SILl to L(GQ)' to (\]SP~, is given in (7) up to (9). '\['he 
question is 'Zijn alle werknemers gehuwd?' (Are all 
employees married?). 
all({:q l employee(:q)}, {xl lmarried(x,))) (8) 
4 FROM GSR TO SQL 
As the NLP subsystem, the database subsystem ishilly 
implemented. However, we shall restrict ourselves to 
a very brief sketch of its functionality here. As can be 
seen in Fig. 2, a GSH, expression is first translated to a 
formalism called I)BSIL This was clone for reasons of 
modularity, primarily for facilitating the extension of 
the system to dill?rent target languages. 
DBSR, which stands for DataBase specitic Seman- 
tic Representation, is a declarative relational database 
query language that is both close to GSR and eas- 
ily translatable to any of the commercialized \]{.I)BMS 
query languages. Apart from the treatment of quantifi- 
cation the formalism is very sffnilar to relational eah:n- 
lt, s. The major effort in the step fron, (\]S\[{ to I)BSR 
lies in adapting GSl{-terminology to concrete names 
of tabels and columns of a database. This is done us- 
ing a Dl3-1exicon, which can be seer, as an augmented 
l~,t{-mode\] of a data/)ase. 
The last step, from I)BSR to SQL, is extremely 
straightforward. Sets and cardinality expressions are 
translated l,o (sub)qneries. Relations between sets or 
cardinality expressions are. translated to conditions for 
(sub)queries. 
For completeness, an example of the database sub- 
system ontlmt is given. For the last example of the 
foregoing section a I)BSI{ expression and an SQI, query 
are giver, in (10) and (11)respectively. YES contains 
only 'Yes'. 
{:el I .... ployee(': l)} \ {':1 I a"l .rr'a?'7"i('d = w\],J} = ~ (10) 
SFLECq ? * 
Ft{OM YES 
WIIl';ll, l'3 NOT EXISTS 
( SI'~I,I'~C'F Xl.* 
FII.OM t!'MPI,OYI'~E X1 
WI,I'~RE NO'I' (X1.MAII.I(\[I'~D = 'q")) 
(11) 
5 IMPLEMENTATION 
The system is written in Common Lisp (according ;o 
the' de facto standard Steele,90) and generates tar> 
dard SQL queries (ISO). It has prow'd to be a perfectly 
portable product. Originally written on a Macintosi 
SE/30, it has afterwards been tested on several Sym- 
belies, Macintosh and PC platforms. 
The major modules of the linguistic component are 
a 'letter tree' tool for efficient communication with the 
lexicon, a transition etwork based morphological nal- 
ysis tool, and an augmented chart parser for syntactic 
and semantic analysis. 
6 CONCLUSION 
In some subfields of formal semantics the traditional 
logical apparatus for quantification, i.e. the use of 
and V., is being abandoned in favor of 'generalized 
quantifiers', because the latter are both ch)ser to nat- 
ural language and richer in expressive power. In this 
text it has been shown how this theory can he put 
to use in a natnral languagc database interface, an 
other field ht which ~ and V had become traditional. 
Some modifications had to be made in order to l'on- 
der the theoretical 'generalized quantifier' approach 
7032 
more implementation-friendly. The major moditica- 
I;ions were \[,he inl;roduction of a sepal:al;e module to 
replace the 'quanl;ilication rule', and the shift, from 
rnet;a-lew'J I;o logical representation of some settheo- 
retical primitfives. 
References  
\[1\] Ba,:wisc, J. & (;ooper, IL (1981). '(;<;neralizcd 
Quanl, ilicrs and Nal,nral Language'. Linguistics and 
Philosophy 4, 159-219. 
\[2\] (?odd, E.I ~. (1!)70). 'A Data Sublanguagc Founded 
on l, he Rdal;ional Calculus'. AUM 5'IUI,'IDI,27 '
Workshop on l)ala Description, Access and Control, 
November 1971. 
\[3\] l)c II.o<!ck, A.N., Fox, (L,1., 1,owden, I/. (UI'., Tur-- 
nor, II.. & Walls, I/.H,. (1991). 'A Natural Language 
Sysl.ern Based on Formal Semantics'. Proceedings of 
lhe lnlernalional CoT@fence on (/urrcnt l.s.rues in 
Compulalional Linguistics. 268-281. 
\[4\] Gailly, P.J., l{,ibbens, 1). & Binot, ,I .L. (199(/). ' l ,a 
<tuanl, i ieation en Traitcment du Language Naturel'. 
\[5\] IS() '1'(797/8C21/W(;3 and ANSI X3H2 (1987). 
ISO 9075 Dalabasc Language SQL. 
\[s\] Ka~,~, E., Kas, M. ,~: Puht~,,d, ll.. (l~J!t0). 'f,;,'.n pro- 
cedure veer  l'ed()llel'(Hl l\[lel, kw~l, l l t ( ) re l l ' .  TABU I\]ul- 
lelin veer T<tahvete~z.schap 2(\] (4). 205 221. 
\[7\] Montague, H,. (I.9TI). 'Tho l'rop<;r Treatment of 
quantii ication in Or<linary l!;nglish', llintikka J., 
Moravcsik J. & Suppes P. (otis.) Approache.s lo Nat- 
ur'al Language. I)ordrcch\[; : H,eidel. 221-.242. 
\[8\] Mostowski, A. (1957). 'On a (\]eneralization of
Qnantitiers'. 1,'~tnd. Math. 44, 12-36. 
\[9\] Sowa, J.F. (19!)1). 'Towards the Expressive Power 
o\[ Natm:al Language'. J F. Sowa (ed.), I'ri'nciples of 
Scmanlic Net'work,~. San Marco, (laliibrnia : Morgan 
Kaufinann. 157 189. 
\[10\] Spcelman, 1). (1992). l,;cn prototype voor ecn 
da?abase-interfacc in Lisp. Vc'rtaling van Ncder'- 
landse w'agen naar SQL-queries, (?omlmtationa\[ 
1,inguisti<'s Thesis, University of \],euven (in l)utch). 
\[11\] Steel<:', C;.L. (1992). Common Li,sl, : 7'he Lan- 
g'u<l<le. Second Edition. Digital Press : Be<tford MA. 
\[12\] Warren, I).ll. & P<~reira, F.C.N. (1982). 'An Efli- 
cicnl, Easily Adapl;al>le System for Interpreting N~tl,- 
ural Language Qu<;ries'. American Journal of Com- 
lrulalional Linguistics 8. 110:\] 19. 
\[13\] Zwarts, F. (1983). 'Determiners: a relational per- 
spective'. \['er Meulen (ed.) ,q'ludies in Modellheorelic 
Semantics. I,'oris : I)ordrechl;. 37-62. 
1033 
