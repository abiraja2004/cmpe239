USING A NATURAL-ART IF IC IAL  HYBRID LANGUAGE 
FOR DATABASE ACCESS 
Teruaki  A IZAWA and Nobuko HATADA 
NHK Technica l  Research Laborator ies  
1-10-11, Kinuta, Setagaya,  Tokyo 157, Japan 
In this paper we propose a natura l -  
ar t i f ic ia l  hybr id  language for database 
access. The global  construct ion of a 
sentence in this language is h ighly 
schematic,  but a l lows express ions  in the 
chosen language such as Japanese or 
Engl ish. Its art i f ic ia l  language part, 
SML, is c losely  re lated to our newly 
int roduced data model,  ca l led scaled 
lattice. Adopt ing  Japanese as its 
natural  language part, we implemented a 
Japanese-SML hybr id  language process ing 
system for our compact  database system 
SCLAMS, whose  database consists  of scal-  
ed latt ices. The main features of this 
implementat ion  are (i) a small  lex icon 
and l imited grammar, and (2) an a lmost  
free form in wr i t ing  Kana Japanese. 
1. In t roduct ion 
Var ious query languages for database 
access have been developed, among which 
unambiguous art i f ic ia l  ones are bet ter  
adapted to computers.  For man, on the 
other hand, it wou ld  be more convenient  
to communicate  wi th  computers  in a 
natural  language. The poss ib i l i ty  of 
man-mach ine  communicat ion  in a natura l  
language has been one of the main 
concerns in the f ield of art i f ic ia l  
inte l l igence,  and cons iderab le  results  
have been obta ined spec i f ica l ly  in 
research into natura l  language access to 
a database. I~5 These results,  however,  
seem to be too complex and inf lex ib le  
for pract ica l  app l icat ion to general -  
purpose database systems. 
We wi l l  propose in this paper  a 
"natura l -ar t i f i c ia l  hybrid" language for 
database access. The global  construc-  
t ion of a sentence in this language is 
h igh ly  schemat ic  but al lows express ions  
in the chosen language such as Japanese 
or English. A Japanese vers ion of this 
language has been implemented for our 
compact  database system SCLAMS6; (SCa led  
LAtt ice Man ipu lat ion  System). The main 
features of this implementat ion  are: 
(I) Use of only a small  lexicon and 
l imited grammar so that they are 
quite easy to implement,  and 
(2) A l lowance of a lmost  free form in 
wr i t ing  Kana Japanese. 
Feature (i), wh ich  wil l  be achieved 
also when using other  languages l ike 
Engl ish,  French, and so on, is one of the 
most  not iceable  mer i ts  obta ined by us ing 
such a natura l -a r t i f i c ia l  hybr id  language 
for database access. 
We beg in  wi th  an exp lanat ion  of our 
bas ic  logical  uni t  of data, Scaled 
Latt ice,  or S.L. for short, s ince the 
proposed language is c lose ly  re lated to 
this unit. 
2. SML:Sca led latt ice manipu la-  
tion language 
2.1 Scaled latt ice as a data model 
What  the normal i za t ion  theory in 
the re lat ional  data model  tel ls us can 
be stated very loosely as "one fact in 
one place" 8 The concept of Scaled 
Latt ice, or S.L. for short, also goes 
along this d irect ion.  
Roughly speaking an S.L. is a mult i -  
d imens iona l  table, and is def ined as a 
co l lect ion of data of one species arrang-  
ed at mul t i -d imens iona l  latt ice points 
cor respond ing  to the combinat ions  of 
att r ibute values. Fig. 1 shows a 
graphica l  image of S.L. wh ich  represents  
populat ion  data by year, prefecture,  and 
sex. 
Ye. 
1980 
d 
1950 
mYi 
I ( 
Sex 
r Population data 
o 
o ~ 
/ / /  
- - -~ '< 
LJ 
/ / /  
/ 
, Male popula- 
tion of Tokyo 
_--=in 1980. 
Female popul~ 
tion of Tokyo 
in 1980. 
Prefecture 
r 
o ~ 
All of male population 
data are arranged on 
this axis. 
Fig. 1 Graphical image of S.L. data model 
--543-- 
This is an example of three dimen- 
sional S.L's, which can be furthermore 
regarded as a mapping or a funct ion 
with three var iab les  in the mathemat ica l  
sense. Let  SI, $2, and $3 be f inite 
sets such as 
S1 = { 1950, 1951 . . . . .  1980}, 
{ Tokyo, Osaka, Nagoya . . . .  }, $2 
and 
$3 ={ male, female}. 
Also let A be an appropr iate  set hav ing  
enough e lements to represent  values of 
populat ion.  Then the above S.L. can be 
natura l ly  regarded as a mapping: 
F : S1 x $2 x S3 ~ A, (i) 
which assoc iates any tr iple (x, y, z) 
of at t r ibute values in S1 x $2 x $3 
with the cor respond ing  populat ion  value 
F(x, y, z). Thus, for example,  
F (1980, Tokyo, male) 
denotes the male popu lat ion  of Tokyo in 
1980. 
Genera l ly  an S.L. is a mapp ing  F 
of the d i rect  product  of f inite sets 
SI, ..., Sn into an appropr ia te  set A 
denoted by 
F : S1 x ... x Sn~ A. (2) 
These sets S1, ..., Sn and their  
e lements wi l l  be somet imes ca l led root 
words and leaf words respect ive ly .  
The fo l lowing are the advantages 
of this data model:  
(i Data conta ined in an S.L. can be 
d isp layed exact ly  in the two- 
d imens ional  table form, which is 
v isua l ly  very understandable .  
(2 In order  to d isp lay  data in table 
form, it is necessary  to cut out 
an appropr ia te  two-d imens iona l  
cross sect ion from the S.L., or 
more prec ise ly  to se lect  two 
appropr ia te  scales on which the 
table is constructed,  and, at the 
same time, to fix the remain ing 
scales at some att r ibute values. 
This is noth ing but  a retr ieval  
operat ion.  Cutt ing out such a 
sect ion is very easy, wh ich  means 
that certa in  retr ieval  operat ions  
are also easy. 
(3 Since an S.L. is regarded as a 
mapping, prec ise and powerfu l  
notat ions concern ing "sets and 
mappings"  are d i rect ly  appl icable  
for man ipu la t ion  of the S.L. data. 
2.2 Br ief  out l ine of SCLAMS 
We have implemented a compact  data-  
base system SCLAMS (Scaled latt ice 
man ipu la t ion  system), whose database 
consists  of S.L.'s.6, 7 SCLAMS has the 
fo l lowing three major  modes: 
(i) Storage mode: Storage of data as a 
set of S.L. 's ed i t ing from any fi le 
into the database.  
(2) Retr ieval  mode: Se lect ion of one 
or more sui table S.L. 'S from the 
database. 
(3) Man ipu la t ion  mode: Data extract ion 
from the above S.L. 's  and some 
operat ion  on the data. 
Thus, a retr ieval  operat ion accord-  
ing to a user's query is d iv ided into 
two modes: Retr ieval  and Manipulat ion.  
Retr ieval  mode is s imi lar  to the docu- 
ment  retr ieval  system, and Man iPu la t ion  
mode to the database system, in a narrow 
sense, regard ing each S.L. as a small  
file. The main concern of our des ign 
of SCLAMS was to combine ef fect ive ly  
these two modes, in other  words, to 
integrate the funct ion of document  
retr ieval  systems and that of database 
systems. 
2.3 Man ipu lat ion  of scaled latt ices by 
SML 
In this paper we wi l l  focus our 
at tent ion exc lus ive ly  on Manipu lat ion  
mode of SCLAMS. The major  funct ion of 
this mode is to man ipu la te  S.L. 's  in a 
var iety  of ways such as ext ract ion  of 
data sat is fy ing spec i f ied condit ions,  
join of more than two S.L. 's  data, 
e lementary  ca lcu lat ions  for extracted 
data, etc. These operat ions  are done 
through a query language for end users, 
named as SML (Scaled latt ice Manipula-  
t ion Language).  
We now show a few examples to 
i l lust rate  some aspects of SML. Let F1 
and F2 be two S.L. 's,  i.e. two mappings 
such as 
F1 : S lx  $2 x S3~AI ,  and (3 
F2 : S1 x $2 ~A2,  (4 
where S1 = Year scale 
{ 1950, 1951 ..... 1980}, (5 
--544 
$2 = Prefecture  scale 
= { Tokyo, Osaka, Nagoya, . . ) ,  (6) 
$3 = Sex scale 
= { male, female}, (7) 
A1 = Set of popu lat ion  values, 
A2 = Set of numbers of TV sub- 
scr ibers.  
These S.L. 's may be cons idered as an 
output  of Retr ieval  mode. 
Each example  be low consists  of an 
informal query and the cor respond ing  
formal one expressed by SML. Not ice 
that the SML express ions  conta in the 
mathemat ica l  notat ions  to descr ibe sets 
and mappings.  
Example i. L ist  the male popula-  
t ion of Tokyo in 1980. 
L IST A; 
A = FI(1980, Tokyo, male); 
Example 2. L ist  names and the 
number of prefectures  in which  the male 
populat ion in 1980 is greater  than one 
mil l ion.  
L IST B, C; 
B = <X:FI(1980, X, male)> 
1,000,000>; 
C = COUNT (B); 
In this example B is def ined as 
the set of prefecture X's wi th  the 
populat ion value FI(1920, X, male) > 
1,000,000, and C as COUNT of B, where 
COUNT is one of aggregate funct ions 
prepared in SCLAMS. 
Example  3. L ist  numbers of TV sub- 
scr ibers in 1980 of prefectures  ?n 
which the female populat ion in 1975 is 
less than one mil l ion.  
L IST NUM; 
NUM = F2(1980, P); 
P = <X:FI(1975, X, female) 
<i ,000,000>; 
In this example two S.L. 's  F1 and 
F2 are re lated by a common scale $2. 
General  format of a query or a 
sentence by SML is shown in Fig. 2. 
L IST al, a2, ..., am; 
b l  = express ion  i; 
b2 = express ion  2; 
bn = express ion  n; 
Fig. 2 General  format of a query by SML 
In this format each of var iables al, . . . ,  
am is equal to one of those bl, ..., bn; 
and the order of bl, ..., bn is arbitrary.  
The types of express ions  can be c lass i -  
f ied into ?he fo l lowing six categor ies:  
i) Numeral  or l i teral  constants;  e.g. 
1980, Tokyo, male, etc. 
2) Aggregate funct ion values; e.g. 
COUNT (x), SUM (y), etc. 
3) S.L. 's  values; e.g. 
F(xl . . . .  , xn) , etc. 
4) Set operat ion  formulas; e.g. 
x & y, xly, x-y, etc. 
5) Set def in i t ion  formulas; e.g. 
<3, 5, 7, ii>, <Tokyo, Nagoya, 
Osaka>, 
<xi:F(xl,...,xi, ...,xn)<y>, etc. 
6) Abbrev iate  notat ions for e lements of 
a scale, i.e. leaf words; e.g. 
S.l, S. I I -20, etc. 
? The latter, for example,  represents  
from l lth to 20th e lements of a 
scale S. 
It wou ld  be easi ly  seen, from the 
above explanat ion,  that a query by SML 
is expressed bas ica l ly  as a set of "non- 
procedura l"  local  queries,  and thus the 
query as a whole has also of non- 
procedura l  nature. 
3. Hybr id i za t ion  of SML with  
a natural  language 
3.1 An i l lust rat ive  example 
We have assured that  our query 
language SML is suf f ic ient ly  f lexible 
and has strong express ive power, 
spec i f ica l ly  for those who are fami l iar  
--545-- 
with mathemat ica l  notat ions concern ing 
sets and mapping s . However,  we can also 
say that SML is less conven ient  than a 
natural  language which seems to be best  
suited for casual  users. We therefore 
tr ied to hybr id ize  SML with a natural  
language l ike English, Japanese, etc., 
be l iev ing that such a natura l -a r t i f i c ia l  
hybr id  language should be one of the 
mi lestones to a rea l i zat ion of database 
systems whol ly  access ib le  via unrest r ic t -  
ed natural  languages. 
The next  example, c losely  re lated 
to Example 2 in the last section, wi l l  
show us how to hybr id ize  SML with  a 
natural  language, say Engl ish.  
Example 4. L ist  names and the 
number of prefectures  in which the male 
populat ion in 1980 is less than the 
female populat ion  of Tokyo in 1970. 
Now we consider  the fo l lowing two 
types of express ions  for this query. 
T_~e I (Original formal express ion by 
SML) 
LIST A, B; 
A = <X:FI(1980, X, male) < C >; 
B = COUNT (A) ; 
C = FI(1970, Tokyo, female); 
Type II (Extended new expression) 
LIST A, B; 
A = Names of prefectures  in which 
the male populat ion  in 1980 is 
less than C; 
B = Number  of e lements of A; 
C = Value of the female popu la t ion  
of Tokyo in 1970; 
The features of Type II express ions  
are: 
(i) The global  const ruct ion  is quite 
s imi lar  to that of Type I expres-  
sion, but it a l lows us to wr i te  
phrases in the chosen natural  
language for def in i t ions  of vari -  
ables such as A, B, and C. (If 
necessary,  some of the var iab les  
may retain the or ig ina l  formal 
def in i t ions.)  
(2) Not ice that var iable  symbols such 
as A and C can be embedded in 
ord inary  Engl ish phrases, so that 
the or ig inal  query expressed as a 
complex sentence is d iv ided into 
some simple queries.  This contr i -  
butes to readabi l i ty  of quer ies 
both for man and computer.  
3.2 Features of a Japanese-SML vers ion 
We have implemented a " Japanese-  
SML" hybr id  language process ing system, 
as an extens ion of SCLAMS. The major  
des ign goal was to be pract ica l  rather 
than just ambit ious.  The process ing 
system, which  wi l l  be cal led Translator ,  
is essent ia l ly  a t rans lator  of a Japanese 
phrase into the cor respond ing  SML expres-  
sion, or in the above terminology,  of a 
Type II express ion  into its Type I 
equivalent .  The main process of Trans- 
lator is shown in Fig. 3. 
Type II eipression 
Syntax Analysis l<-------- 
Conversion .... \] ~ -  
Type I expression 
Japanese 
Grammar 
Rules 
Fig. 3 Process of Translator 
Some cons iderat ions  in achieving 
pract i cab i l i ty  of the implemented system 
are : 
(i) In our implementat ion  a Japanese 
sentence or phrase can be wr i t ten  
as a str ing of only Kana characters ,  
in which case it is desirable,  for 
convenience,  to guarantee f reedom 
from segmentat ion as much as 
possible.  Our system indeed al lows 
the free wr i t ing  of a Kana sentence, 
as long as the leaf words (the 
e lements  of scales) cause no con- 
fusion wi th  the reserved words in 
the lexicon. 
(2) It is des i rab le  to keep the grammar 
as compact  as poss ib le  to save 
storage space and process ing time. 
This was done by rest r ic t ing  forms 
of poss ib le  Type II express ions.  
4. Trans lat ion of Japanese into SML 
4.1 M ic ro -grammar  for Japanese 
As ment ioned in Sect ion 2.3, the 
set of all Type I express ions  are 
546 
classif ied into six categories i)~6). 
Then the possible Type II expressions, 
which our Translator can accept, are 
restricted to those corresponding to the 
categories 2), 3), and a part of 5), 
i.e. the so-called implicit set defini- 
tions. It should be noticed that 
expressions belonging to the other 
categories are neatly expressed rather 
by Type I forms. 
We now show the lexicon and the 
grammatical rules prescribing these 
Type II expressions. 
Lexical items and their categories. 
There are 12 categories of lexical items. 
l) Num : Numbers, e.g. 
12, 165.3, -0.137, etc. 
2) Naux: Auxil iary numbers, e.g. 
hyaku, byaku, pyaku, sen, man 
(hundred, thousand, million), 
etc. 
3) ~ : Names of aggregate functions, 
e.g. 
kosu, souwa, saidai, heikin 
(count, sum, maximum, average), 
etc. 
4) e~ : Equality words or copulas, 
e.g. 
no, dearu, deatte, nihitoshii, 
nihitoshiku (is equal to), 
etc. 
5) ~ :  Words for comparison, e.g. 
ijo, ika, miman, igo 
(more, less, later), etc. 
6) Comp____~2: Particle for comparison, i.e. 
yori, yorimo ( % than). 
7) adj : Adjectives, e.g. 
ookii, hayail shouno, daino 
(large, early, small, wide), 
e tc. 
8)* Root : Root words, i.e. names of 
scales, e.g. 
nen, ken (year, prefecture), 
etc. 
9)* Leaf : Leaf words, i.e. elements of 
scales, e.g. 
1980, Tokyo, otoko (male), 
etc. 
l0 * Unit: Words for data units, e.g. 
en, nin, km (Yen, person, 
kilometer), etc. 
ii) * SL  : Names of S.L.'s representing 
the sort of the S.L. data, 
usually given at Storage 
mode, e.g. 
jinko, TV keiyakusha 
(population, TV subscriber), 
etc. 
12)** Var: Variable names such as 
A, B, KEN, etc. 
The items in the categories marked 
by one asterisk are automatical ly added 
to the lexicon at the beginning of 
Manipulation mode in order to cover 
those S.L.'s which are passed from 
Retrieval mode, and deleted after use. 
They are thus highly application oriented. 
The lexicon would become very large 
if it included the items in Leaf 
category. We tried to exclude them 
from our lexicon by contriving a re- 
cognition method of them from the 
contexts, so that the lexicon contains 
only about 100 application independent 
items plus application oriented ones. 
Var category marked by two asterisks 
was also excluded from our lexicon, 
since the formation rules of this 
category is wel l -def ined and easily 
programmed. 
Grammatical rules. It was suffici- 
ent to prepare merely a dozen grammatical 
rules expressed as context-free-l ike 
productions with conditions of applica- 
tion. 
l) Initial production 
IRI S~ D 
V 
2) Range-of-S.L. phrase 
R-~- I Var 
Mod Mod . . .  Mod 
i 
n 
SL 
Condition: n = dim(SL), where the 
right-hand side of the equality 
denotes the dimension of S.L. 
represented by SL. 
547 
3) Root modifier 
~ ~Mod Mod ... Mod 
Y 
n 
SL 
Condition: n = dim(SL)-l. 
4) 
5) 
6) 
Modifier 
Mod ~ {(R??tD ga) 
Leaf 
k 
Domain-of-S .L. phrase 
D ~ I Var } 
(R ga cond) Root 
Numer ic value 
eq 
V~ i Var 1 
Num (Naux) (Unit) 
D nita--~suru Agg 
7) Condition 
cond~V < (c?mp i) eq } 
comp 2 adj 
An example of parsing trees by this 
grammar is given in Fig. 4. We assume 
that 'jinko' S.L. is of dimension three. 
D 
I E Mod Mod 
A 
Leaf eq Leaf eq SL 
I J I i t  
eolnd 
Var compl eq Root 
i u i i 
1980 no otoko no jinko ga C ijo no ken 
(Prefectures in which the male population in 
1980 is greater than C.) 
Fig. 4 Example of a parsing tree 
4.2 Translation into SML 
Translation from Type II expressions 
in Japanese into Type I expressions in 
'pure' SML is performed by using two 
fundamental tools: a word-for-word 
conversion table and a conversion 
procedure. 
Word-for-word conversion table. 
This is prepared for the following five 
categories of lexical items: 
Agg, compl, adj, Root*, SL*. 
For the asterisked categories the table 
is made up whenever Manipulation mode is 
invoked. A portion of the conversion 
table is shown in Table i. 
Table 1 Word-for-word conversion 
table (a part) 
Category 
Agg 
compl 
adj 
Root 
SL 
Words (Items) 
source target 
kosu COUNT 
souwa SUM 
saidai MAX 
ijo >= 
miman < 
ookii > 
hayai < 
daino > 
nen Sl 
ken $2 
jinko F1 
menseki F2 
Conversion procedure. Since the 
proposed grammar is so compact, we 
considered that the conversion procedure 
including syntax analysis would be best 
realized through a general-purpose 
programming language, say PL/I, rather 
than a comprehensive grammar-writ ing 
system like ATN. 9) This will also 
contribute to a portabil ity of the 
system. 
The programming considerations were: 
(1) To insure a free writ ing of a 
Japanese Kana phrase, we adopted a 
left-to-right parsing, predicting 
the succeedilg category. However, 
the lexicon does not include the 
leaf words, we had to impose the 
restriction that any leaf word 
should be enclosed by a space or an 
apostrophe. 
(2) An SML expression is generated, by 
introducing a new variable symbol 
in the form 'SYS**', whenever a 
partial result of parsing becomes 
sufficient to do so. (This point 
can be best i l lustrated by the 
" 548  
example given below.) 
(3) Two important  steps in a pars ing 
f low are the decis ions:  
a) Which of the init ia l  product ions  
can be applied; S~R,  S---~D, 
or S~V?  
b) Which~phrase  actua l ly  appears, 
R or R? 
4.3 An example 
We now return to Example 4 in 
Sect ion 3.1. That  query wi l l  be wr i t ten  
in Type II form in Japanese as fol lows. 
(We adopt  here a real notat ion  of our 
system using Kana characters.)  
Example 5. (A Japanese t rans lat ion  
of Example 4). 
L IST A, B; 
A = ' I980 ' I '~=" I~Y~C~/~w;  
B = A /  =~;  
C = 1970 / ~?#~ / ~YT  / ~Y=~ ; 
This Type II express ion  wi l l  be 
t rans lated into the fo l lowing Type I 
equivalent .  
L IST A, B; 
SYS01 = '1980'; 
SYS02 = '~ b = ' ; 
A = <X:FI(SYS01,  X, SYS02) < C > ; 
B = COUNT (A) ; 
SYS03 = '1970'; 
SYS04 = ' b ~ ~ ~ ' ; 
SYS05 = ' ~ YT '  ; 
C = FI(SYS03, SYS04, SYS05); 
5. Conc luS ions  
Our compact  database system SCLAMS 
wi th  a t rans lator  from Japanese into SML 
has been implemented for IBM 370/138. 
The t rans lator  is a PL/I program con- 
s ist ing of about 500 statements includ- 
ing the lexicon and the grammat ica l  
rules themselves.  The overal l  per-  
formance of the t rans lator  seems to be 
suf f ic ient  for pract ica l  use. In fact, 
the t rans lat ion t ime of each Type II 
express ion  is about  1 second. 
We bel ieve,  from our exper iences,  
that a natura l -a r t i f i c ia l  hybr id  language 
l ike ours wi l l  be a pract ica l  step to 
explore the better  languages for data- 
base access, spec i f ica l ly  for casual 
users. 
Acknowledgement .  The authors wish 
to exp-~s  ~?~ g-r-atitute to Y. Suzuki, 
the former Deputy -D i rector  of NHK 
Technica l  Research Laborator ies  and M. 
Machida, Head of In format ion Process ing 
Research Group of the Laborator ies  for 
encouragement  and guidance.  They are 
also gratefu l  to J. Kutsuzawa, Senior  
Research Engineer  of our group for his 
va luable  comments concern ing the im- 
p lementat ion  of the system. 
i. 
2. 
3. 
4.  
5. 
6.  
7. 
8.  
9 .  
References 
W.A. Woods et al: The luner sc iences 
natura l  language in format ion system. 
BBN Rep. 2378, Bolt  Beranek and 
Newman, Cambridge,  Mass.,  1972. 
E.F. Codd: Seven steps to rendezvous 
wi th  the casual  user. In "Data base 
management" ,  J.W. K l imbie et al, 
eds., North-Hol land,  Amsterdam, 1974, 
pp. 179-200. 
L.R. Harris:  User or iented data base 
query wi th  the ROBOT natura l  language 
query system. Proc. 3rd VLDB, Tokyo, 
Oct. 1977. 
G.G. Hendr ix  et al: Deve lop ing  a 
natural  language interface to com- 
plex data. ACM Trans. on Database 
Systems, Vol. 3, No.2, June 1978, 
pp. 105-147. 
M. S ibuya et al: Noun-phrase model 
and natural  query language. IBM J. 
RES. DEVELOP.,  Vol. 22, No.5, Sep. 
1978, pp. 533-540~ 
T. A izawa et al: SCLAMS - a data 
process ing system (in Japanese).  
Prepr int  of WGDBMS of IPSJ, Tokyo, 
Ju ly 1979. 
T. A izawa (ed.) : SCLAMS - a user's 
manual.  NHK Res. Lab., Tokyo, Apr. 
1980. 
C. J. Date: An int roduct ion to data- 
base systems, 2nd ed.. Addison-  
Wesley,  1977. 
P.H. Winston: Ar t i f i c ia l  intel l i -  
gence, Addison-Wesley,  1977. 
--549 
