An Alternative Conception of 
Tree-Adjoining Derivation* 
Yves Schabes 
Department of Computer and 
Information Science 
University of Pennsylvania 
Philadelphia, PA 19104 
Stuart M. Shieber 
Aiken Computation Laboratory 
Division of Applied Sciences 
Harvard University 
Cambridge, MA 02138 
Abst rac t  
The precise formulation of derivation for tree- 
adjoining grammars has important ramifications 
for a wide variety of uses of the formalism, from 
syntactic analysis to semantic interpretation and 
statistical language modeling. We argue that the 
definition of tree-adjoining derivation must be re- 
formulated in order to manifest he proper linguis- 
tic dependencies in derivations. The particular 
proposal is both precisely characterizable, through 
a compilation to linear indexed grammars, and 
computationally operational, by virtue of an ef- 
ficient algorithm for recognition and parsing. 
1 In t roduct ion  
In a context-free grammar, the derivation of a 
string in the rewriting sense can be captured in 
a single canonical tree structure that abstracts all 
possible derivation orders. As it turns out, this 
derivation tree also corresponds exactly to the hi- 
erarchical structure that the derivation imposes on 
the str!ng, the derived tree structure of the string. 
The formalism of tree-adjoining grammars (TAG), 
on the other hand, decouples these two notions of 
derivation tree and derived tree. Intuitively, the 
derivation tree is a more finely grained structure 
*The authors are listed in alphabetical order. The first 
author was supported in part by DARPA Grant N0014- 
90-31863, ARO Grant DAAL03-S9-C-0031 and NSF Grant 
IRI90-16592. The second author was supported in part by 
Presidential Young Investigator award IRI-91-57996 from 
the National Science Foundation. The authors wish to 
thank Aravind Joshi for his support of the research, and 
Aravind Joshi, Anthony Kroeh, Fernando Pereira, and 
K. Vijay-Shanker for their helpful discussions of the issues 
involved. We are indebted to David Yarowsky for aid in 
the design of the experiment mentioned in footnote 5 and 
for its execution. 
167 
than the derived tree, and as such can serve as a 
substrate on which to pursue further analysis of 
the string. This intuitive possibility is made man- 
ifest in several ways. Fine-grained syntactic anal- 
ysis can be pursued by imposing on the deriva- 
tion tree further combinatoriM constraints, for 
instance, selective adjoining constraints or equa- 
tional constraints over feature structures. Statis- 
tical analysis can be explored through the speci- 
fication of derivational probabilities as formalized 
in stochastic tree-adjoining rammars. Semantic 
analysis can be overlaid through the synchronous 
derivations of two TAGs. 
All of these methods rely on the derivation tree 
as the source of the important primitive relation- 
ships among trees. The decoupling of derivation 
trees from derived trees thus makes possible a 
more flexible ability to pursue these types of anal- 
yses. At the same time, the exact definition of 
derivation becomes of paramount importance. In 
this paper, we argue that previous definitions of 
tree-adjoining derivation have not taken full ad- 
vantage of this decoupling, and are not as appro- 
priate as they might be for the kind of further 
analysis that tree-adjoining analyses could make 
possible. In particular, the standard definition of 
derivation, due to Vijay-Shanker (1987), requires 
that elementary trees be adjoined at distinct nodes 
in elementary trees. However, in certain cases, 
especially cases characterized as linguistic modi- 
fication, it is more appropriate to allow multiple 
adjunctions at a single node. 
In this paper, we propose a redefinition of TAG 
derivation along these lines, whereby multiple aux- 
iliary trees of modification can be adjoined at a 
single node, whereas only a single auxiliary tree 
of predication can. The redefinition constitutes a 
new definition of derivation for TAG that we will 
refer to as extended erivation. In order for such 
a redefinition to be serviceable, however, it is nec- 
essary that it be both precise and operational. In 
service of the former, we provide a rigorous peci- 
fication of our proposal in terms of a compilation 
of TAGs into corresponding linear indexed gram- 
mars (LIG) that makes the derivation structure 
explicit. With respect o the latter, we show how 
the generated LIG can drive a parsing algorithm 
that recovers, either implicitly or explicitly, the 
extended erivations of the string. 
The paper is organized as follows. First, we re- 
view Vijay-Shanker's standard definition of TAG 
derivation, and introduce the motivation for ex- 
tended erivations. Then, we present he extended 
notion of derivation informally, and formalize it 
through the compilation of TAGs to LIGs. The 
original compilation provided by Vijay-Shanker 
and Weir and our variant for extended erivations 
are both decribed. Finally, we briefly mention a 
parsing algorithm for TAG that recovers extended 
derivations either implicitly or explicitly, and dis- 
cuss some issues surrounding it. Space limitations 
preclude us from presenting the algorithm itself, 
but a full description is given elsewhere (Schabes 
and Shieber, 1992). 
2 The  Standard  Def in i t ion  of 
Der ivat  ion 
To exemplify the distinction between standard and 
extended erivations, we exhibit the TAG of Fig- 
ure 1. This grammar derives some simple noun 
phrases uch as "roasted red pepper" and "baked 
red potato". The former, for instance, is associ- 
ated with the derived tree in Figure 2(a). The tree 
can be viewed as being derived in two ways 1 
Dependent :  The auxiliary tree fifo is adjoined 
at the root node (address e) of fire. The re- 
sultant tree is adjoined at the root node (ad- 
dress e) of initial tree ap~. This derivation is 
depicted as the derivation tree in Figure 3(a). 
Independent :  The auxiliary trees fir? and fire 
are adjoined at the root node of the initial 
tree ape. This derivation is depicted as the 
derivation tree in Figure 3(b). 
In the independent derivation, two trees are sepa- 
rately adjoined at one and the same node in the 
initial tree. In the dependent derivation, on the 
other hand, one auxiliary tree is adjoined to the 
1 As is s tandard  in the TAG l iterature we disallow ad- 
junct ion at the foot nodes of auxil iary trees. 
168 
NP NP 
I I 
N N 
1 I 
potato pepper 
N 
Adj N* 
I 
roasted 
(%) (%) (g.,) 
N N 
Adj N* Adj N* 
1 ( 
"red baked 
Figure 1: A sample tree-adjoining grammar 
NP NP 
I I 
N N 
Adj N Adj N 
roasted Adj N red Adj N 
i I I I 
red pepper roasted pepper 
(a) (b) 
Figure 2: Two trees derived by the grammar of 
Figure 1 
g, % 
(a) (b) 
Figure 3: Derivation trees for the derived tree of 
Figure 2(a) according to the grammar of Figure 1 
other, the latter only being adjoined to the initial 
tree. We will use this informal terminology uni- 
formly in the sequel to distinguish the two general 
topologies of derivation trees. 
The standard definition of derivation, as codified 
by Vijay-Shanker, estricts derivations so that two 
adjunctions cannot occur at the same node in the 
same elementary tree. The dependent notion of 
derivation is therefore the only sanctioned eriva- 
tion for the desired tree in Figure 2(a); the inde- 
pendent derivation is disallowed. Vijay-Shanker's 
definition is appropriate because for any indepen- 
dent derivation, there is a dependent derivation of 
the same derived tree. This can be easily seen in 
that any adjunetion of/32 at a node at which an 
adjunction of/31 occurs could instead be replaced 
by an adjunction of/32 at the root of/31. 
The advantage of this standard definition of 
derivation is that a derivation tree in this normal 
form unambiguously specifies a derived tree. The 
independent derivation tree on the other hand is 
ambiguous as to the derived tree it specifies in 
that a notion of precedence of the adjunctions at 
the same node is unspecified, but crucial to the 
derived tree specified. This follows from the fact 
that the independent derivation tree is symmetric 
with respect o the roles of the two auxiliary trees 
(by inspection), whereas the derived tree is not. 
By symmetry, therefore, it must be the case that 
the same independent derivation tree specifies the 
alternative derived tree in Figure 2(b). 
3 Mot ivat ion  for Extended 
Der ivat ions  
In the absence of some further interpretation of
the derivation tree nothing hinges on the choice 
of derivation definition, so that the standard ef- 
inition is as reasonable as any other. However, 
tree-adjoining rammars are almost universally 
extended with augmentations that make the issue 
apposite. We discuss three such variations here, all 
of which argue for the use of independent deriva- 
tions under certain circumstances. 
3.1 Add ing  Ad jo in ing  Const ra in ts  
Already in very early work on tree-adjoining gram- 
mars (Joshi et al, 1975) constraints were allowed 
to be specified as to whether a particular auxiliary 
tree may or may not be adjoined at a particular 
node in a particular tree. The idea is formulated 
in its modern variant as selective-adjoining con- 
straints (Vijay-Shanker and Joshi, 1985). As an 
application of this capability, we consider the re- 
mark by Quirk et al (1985, page 517) that "di- 
rection adjuncts of both goal and source can nor- 
mally be used only with verbs of motion", which 
accounts for the distinction between the following 
sentences: 
(1)a. Brockway escorted his sister to the annual 
cotillion. 
b. #Brockway resembled his sister to the an- 
nual cotillion. 
This could be modeled by disallowing through se- 
lective adjoining constraints he adjunction of the 
elementary tree corresponding toa to adverbial at 
the VP node of the elementary tree corresponding 
to the verb resembles. 2 However, the restriction 
applies even with intervening (and otherwise ac- 
ceptable) adverbials. 
(2)a. Brockway escorted his sister last year. 
b. Brockway escorted his sister last year to 
the annual cotillion. 
(3)a. Brockway resembled his sister last year. 
b. #Brockway resembled his sister last year to 
the annual cotillion. 
Under the standard efinition of derivation, there 
is no direct adjunction in the latter sentence of 
the to tree into the resembles tree. Rather, it is 
dependently adjoined at the root of the elemen- 
tary tree that heads the adverbial last year, the 
latter directly adjoining into the main verb tree. 
To restrict both of the ill-formed sentences, then, 
a restriction must be placed not only on adjoining 
2Whether  the adjunct ion occurs at the VP node or the 
S node is immaterial  to the argtnnent. 
169 
(4)a. 
b. 
(5)a. 
b. 
(6)a. * 
b. * 
the goal adverbial in a resembles context, but also 
in the last year adverbial context. But this con- 
straint is too strong, as it disallows entence (2b) 
above as well. 
The problem is that the standard derivation 
does not correctly reflect he syntactic relation be- 
tween adverbial modifier and the phrase it modi- 
fies when there are multiple modifications in a sin- 
gle clause. In such a case, each of the adverbials 
independently modifies the verb, and this should 
be reflected in their independent adjunction at the 
same point. But this is specifically disallowed in a 
standard erivation. 
It is important to note that the argument ap- 
plies specifically to auxiliary trees that correspond 
to a modification relationship. Auxiliary trees are 
used in TAG typically for predication relations as 
well, 3 as in the case of raising and sentential com- 
plement constructions. 4 Consider the following 
sentences. (The brackets mark the leaves of the 
pertinent rees to be combined by adjunction in 
the assumed analysis.) 
Brockway conjectured that Harrison 
wanted to escort his sister. 
\[Brockway conjectured that\] \[Harrison 
wanted\] [to escort his sister\] 
Brockway wanted to try to escort his sis- 
ter. 
\[Srockway wanted\] [to try\] \[to escort his 
sister\] 
Harrison wanted Brockway tried to escort 
his sister. 
\[Harrison wanted\] [Brockway tried\] \[to es- 
cort his sister\] 
Assume (following, for instance, the analysis of 
Kroch and Joshi (1985)) that the trees associ- 
ated with the various forms of the verbs "try", 
"want", and "conjecture" all take sentential com- 
plements, certain of which are tensed with overt 
subjects and others untensed with empty subjects. 
The auxiliary trees for these verbs specify by ad- 
3We use the te rm 'predicat ion '  in its logical sense, that  
is, for auxi l iary trees that  serve as logical predicates over 
the  trees into which they  adjoin,  in contrast  o the te rm's  
l inguist ic  sub-sense in which the argument  of the predicate 
is a l inguist ic  subject .  
4 The  d ist inct ion between predicat ive and  modif ier  trees 
has  been proposed previous ly  for pure ly  l inguist ic reasons 
by Kroch (1989), who refers to them as themat ic  and  ath-  
emat ic  trees, respectively.  The  arguments  presented here 
can be seen as prov id ing fur ther  evidence for di f ferent iat ing 
the two k inds  of auxi l iary  trees. 
170 
junction constraints which type of sentential com- 
plement hey take: "conjecture" requires tensed 
complements, "want" and "try" untensed. Under 
this analysis the auxiliary trees must not be al- 
lowed to independently adjoin at the same node. 
For instance, if trees corresponding to "Harrison 
wanted" and "Brockway tried" (which both re- 
quire untensed complements) were both adjoined 
at the root of the tree for "to escort his sister", the 
selective adjunction constraints would be satisfied, 
yet the generated sentence (6a) is ungrammatical. 
Thus, the case of predicative trees is entirely unlike 
that of modifier trees. Here, the standard notion 
of derivation is exactly what is needed as far as in- 
terpretation of adjoining constraints i concerned. 
In summary, the interpretation f adjoining con- 
straints in TAG is sensitive to the particular no- 
tion of derivation that is used. Therefore, it can be 
used as a litmus test for an appropriate definition 
of derivation. As such, it argues for a nonstandard, 
independent, notion of derivation for modifier aux- 
iliary trees and a standard, dependent, notion for 
predicative trees. 
3.2 Add ing  Sta t i s t i ca l  Parameters  
In a similar vein, the statistical parameters of 
a stochastic lexicalized TAG (SLTAG) (Resnik, 
1992; Schabes, 1992) specify the probability of ad- 
junction of a given auxiliary tree at a specific node 
in another tree. This specification may again be 
interpreted with regard to differing derivations, 
obviously with differing impact on the resulting 
probabilities assigned to derivation trees. (In the 
extreme case, a constraint prohibiting adjoining 
corresponds to a zero probability in an SLTAG. 
The relation to the argument in the previous ec- 
tion follows thereby.) Consider a case in which 
linguistic modification of noun phrases by adjec- 
tives is modeled by adjunction of a modifying tree. 
Under the standard efinition of derivation, mul- 
tiple modifications of a single NP would lead to 
dependent adjunctions in which a first modifier 
adjoins at the root of a second. As an example, 
we consider again the grammar given in Figure 1, 
that admits of derivations for the strings "baked 
red potato" and "baked red pepper". Specifying 
adjunction probabilities on standard erivations, 
the distinction between the overall probabilities 
for these two strings depends olely on the ad- 
junction probabilities of fire (the tree for red) into 
apo and ape (those for potato and pepper, respec- 
tively), as the tree fib for the word baked is adjoined 
in both cases at the root of fl~ in both standard 
derivations. In the extended erivations, on the 
other hand, both modifying trees are adjoined in- 
dependently into the noun trees. Thus, the overall 
probabilities are determined as well by the prob- 
abilities of adjunction of the trees for baked into 
the nominal trees. It seems intuitively plausible 
that the most important relationships to charac- 
terize statistically are those between modifier and 
modified, rather than between two modifiers. 5 In 
the case at hand, the fact that potatoes are more 
frequently baked, whereas peppers are roasted, 
would be more determining of the expected overall 
probabilities. 
Note again that the distinction between modi- 
fier and predicative trees is important. The stan- 
dard definition of derivation is entirely appropriate 
for adjunction probabilities for predicative trees, 
but not for modifier trees. 
3 .3  Add ing  Semant ics  
Finally, the formation of synchronous TAGs has 
been proposed to allow use of TAGs in semantic 
interpretation, atural language generation, and 
machine translation. In previous work (Shieber 
and Schabes, 1990), the definition of synchronous 
TAG derivation is given in a manner that requires 
multiple adjunctions at a single node. The need 
for such derivations follows from the fact that syn- 
chronous derivations are intended to model seman- 
tic relationships. In cases of multiple adjunction 
of modifier trees at a single node, the appropri- 
ate semantic relationships comprise separate mod- 
ifications rather than cascaded ones, and this is 
reflected in the definition of synchronous TAG 
derivation. 6 Because of this, a parser for syn- 
chronous TAGs must recover, at least implicitly, 
the extended erivations of TAG derived trees. 
5Intu i t ion is an  appropr iate  guide in the design of the 
SLTAG framework,  as the idea is to  set  up a l inguisti-  
cally plausible in f rast ructure  on top of which a lexically- 
based stat ist ical  model  can be bui lt .  In addit ion,  sugges- 
tive ( though certainly not  conclusive) evidence along these 
lines can be gleaned f rom corpora analyses.  For instance,  in 
a s imple exper iment  in which med ium frequency triples of 
exact ly  the discussed form "(adjective) (adjective) (noun)" 
were examined,  the mean mutua l  in format ion between the 
first adject ive and  the noun  was found to be larger than  
that  between the two adjectives. The  stat ist ical  assump-  
t ions beh ind the exper iment  do not  allow very robust  con- 
clusions to be drawn,  and  more work is needed along these 
lines. 
6The  impor tance  of the d ist inct ion between predicat ive 
and  modif ier  trees with respect  to how der ivat ions are de- 
f ined was not  apprec iated in the earlier work; der ivat ions 
were taken to be of the  independent  variety in all cases. In 
future work, we p lan to remedy this flaw. 
171 
Note that the independence of the adjunction of 
modifiers in the syntax does not imply that seman- 
tically there is no precedence or scoping relation 
between them. As exemplified in Figure 4, the de- 
rived tree generated by multiple independent ad- 
junctions at a single node still manifests nesting 
relationships among the adjoined trees. This fact 
may be used to advantage in the semantic half of 
a synchronous tree-adjoining rammar to specify 
the semantic distinction between, for example, the 
following two sentences: 7 
(7)a. Brockway paid for the tickets twice inten- 
tionally. 
b. Brockway paid for the tickets intention- 
ally twice. 
We hope to address this issue in greater detail in 
future work on synchronous tree-adjoining gram- 
mars. 
4 Informal Specification of 
Extended Derivations 
We have presented several arguments that the 
standard notion of derivation does not allow for 
an appropriate specification of dependencies tobe 
captured. An extended notion of derivation is 
needed that 
. Differentiates predicative and modifier auxil- 
iary trees; 
2. Requires dependent derivations for predica- 
tive trees; 
3. Requires independent derivations for modifier 
trees; and 
4. Unambiguously specifies a derived tree. 
Recall that a derivation tree is a tree with un- 
ordered arcs where each node is labeled by an el- 
ementary tree of a TAG and each arc is labeled 
by a tree address pecifying a node in the parent 
tree. In a standard derivation tree no two sibling 
arcs can be labeled with the same address. In an 
extended derivation tree, however, the condition 
is relaxed: No two sibling arcs to predicative trees 
can be labeled with the same address. Thus, for 
any given address there can be at most one pred- 
icative tree and several modifier trees adjoined at 
rWe are indebted to an  anonymous  reviewer for ra is ing 
this issue crisply th rough examples  imi lar  to those given 
here. 
T 
(a) Co) ~N--N*~ 
A 
Figure 4: Schematic extended erivation tree and 
associated erived tree 
that node. So as to fully specify the output derived 
tree, we specify a partial ordering on sibling arcs 
by mandating that arcs corresponding to modifier 
trees adjoined at the same address are treated as 
ordered left-to-right. However, all other arcs, in- 
cluding those for predicative adjunctions are left 
unordered. 
A derivation tree specifies a derived tree through 
a bottom-up traversal (as is standard since the 
work of Vijay-Shanker (1987)). The choice of a 
particular traversal order plays the same role as 
choosing a particular rewriting derivation order 
in a context-free grammar - -  leftmost or right- 
most, say - -  in eliminating spurious ambiguity due 
to inconsequential reordering of operations. An 
extended derivation tree specifies a derived tree 
in exactly the same manner, except that there 
must be a specification of the derived tree spec- 
ified when several trees are adjoined at the same 
node. 
Assume that in a given tree T at a particular 
address t, the predicative tree P and the k mod- 
ifier trees M1, . . . ,  Mk (in that order) are directly 
adjoined. Schematically, the extended erivation 
tree would appear as in Figure 4(a). Associated 
with the subtrees rooted at the k + 1 elementary 
auxiliary trees in this derivation are k + 1 derived 
auxiIiary trees (Ap and A1, . . . ,  Ak, respectively). 
(The derived auxiliary trees are specified induc- 
tively; it is this sense in which the definition cor- 
responds to a bottom-up traversal.) 
There are many possible trees that might be en- 
tertained as the derived tree associated with the 
derivation rooted at T, one for each permutation 
172 
of the k + 1 auxiliary trees. Since the ordering of 
the modifiers in the derivation tree is essentially 
arbitrary, we can fix on a single ordering of these 
in the output tree. We will choose the ordering in 
which the top to bottom order in the derived tree 
follows the partial order on the nodes in the deriva- 
tion tree. Thus A1 appears higher in the tree than 
A2, A2 higher than A3 and so forth. This much is 
arbitrary. 
The choice of where the predicative tree goes, 
however, is consequential. There are k + 1 possible 
positions, of which only two can be seriously main- 
tained: outermost, at the top of the tree; or inner- 
most, at the bottom. We complete the (informal) 
definition of extended erivation by specifying the 
derived tree corresponding to such a derivation to 
manifest outermost predication as depicted in Fig- 
ure 4(b). 
Both linguistic and technical consequences ar- 
gue for outermost, rather than innermost, predi- 
cation. Linguistically, the outermost method spec- 
ifies that if both a predicative tree and a modifier 
tree are adjoined at a single node, then the pred- 
icative tree attaches "higher" than the modifier 
tree; in terms of the derived tree, it is as if the 
predicative tree were adjoined at the root of the 
modifier tree. This accords with the semantic in- 
tuition that in such a case, the modifier is modify- 
ing the original tree, not the predicative one. (The 
alternate "reading", in which the modifier modi- 
fies the predicative tree, is still obtainable under 
an outermost-predication standard by having the 
modifier auxiliary tree adjoin at the root node of 
the predicative tree.) In contrast, the innermost- 
predication method specifies that the modifier tree 
attaches higher, as if the modifier tree adjoined at 
the root of the predicative tree and was therefore 
modifying the predicative tree, contra semantic in- 
tuitions. 
From a technical standpoint, the outermost- 
predication method requires no changes to the 
parsing rules to be presented later, but only a sin- 
gle addition. The innermost-predication method 
induces ome subtle interactions between the orig- 
inal parsing rules and the additional one, necessi- 
tating a much more complicated set of modifica- 
tions to the original algorithm. (In fact, the com- 
plexities in generating such an algorithm consti- 
tuted the precipitating factor that led us to revise 
our original, innermost-predication, attempt at re- 
defining tree-adjoining derivation.) 
5 Formal  Spec i f i ca t ion  o f  Ex -  
tended Der ivat ions  
In all three application areas of TAGs, the need 
is evidenced for a modified notion of derivation 
that retains the dependent notion of derivation for 
predicative trees but mandates independent ad- 
junction for modifier trees. A formal definition 
of extended erivation can be given by means of a 
compilation of tree-adjoining grammars into linear 
indexed grammars. We discuss such a compilation 
in this section. This compilation is especially use- 
ful as it can be used as the basis for a parsing al- 
gorithm that recovers the extended erivations for 
strings. The design of the algorithm is the topic 
of Section 6. 
Linear indexed grammars (LIG) constitute a 
grammatical framework based, like context-free, 
context-sensitive, and unrestricted rewriting sys- 
tems, on rewriting strings of nonterminal and ter- 
minal symbols. Unlike these systems, linear in- 
dexed grammars, like the indexed grammars from 
which they are restricted, allow stacks of marker 
symbols, called indices, to be associated with the 
nonterminal symbols being rewritten. The linear 
version of the formalism allows the full index infor- 
mation from the parent to be used to specify the 
index information for only one of the child con- 
stituents. Thus, a linear indexed production can 
be given schematically as: 
curred. For these reasons, we use the technique in 
this work. 
The compilation process that manifests the 
standard efinition of derivation can be most eas- 
ily understood by viewing nodes in a TAG elemen- 
tary tree as having both a top and bottom compo- 
nent, identically marked for nonterminal category, 
that dominate (but may not immediately domi- 
nate) each other. (See Figure 5.) The rewrite 
rules of the corresponding linear indexed gram- 
mar capture the immediate domination between 
a bottom node and its child top nodes directly, 
and capture the domination between top and bot- 
tom parts of the same node by optionally allowing 
rewriting from the top of a node to an appropriate 
auxiliary tree, and from the foot of the auxiliary 
tree back to the bottom of the node. The index 
stack keeps track of the nodes that adjunction has 
occurred on so that the recognition to the left and 
the right of the foot node will occur under identical 
assumption of derivation structure. In summary, 
the following LIG rules are generated: 
. Immediate domination dominating foot: For 
each auxiliary tree node r/ that dominates 
the foot node, with children 01, ? . . ,  rl, . . . .  , r/,, 
where r/a is the child that also dominates the 
foot node, include a production 
b\[..r/\] - , t\[,1\].., t\[o,-x\]t\[..,,\]t\[r/,+l\].-- t\[o,\] 
/o\[../3o\] --. Nile1\].." N,-1\[/3,-1\] 
N,J..~3,\] 
U,+l \[/3,+d""" gk \[/3k\] 
The Ni are nonterminals, the/3/strings of indices. 
The ".." notation stands for the remainder of the 
stack below the given string of indices. Note that 
only one element on the right-hand side, Ns, in- 
herits the remainder of the stack from the parent. 
(This schematic rule is intended to be indicative, 
not definitive. We ignore issues such as the option- 
ality of the inherited stack, how terminal symbols 
fit in, and so forth. Vijay-Shanker and Weir (1990) 
present a complete discussion.) 
Vijay-Shanker and Weir (1990) present a way of 
specifying any TAG as a linear indexed grammar. 
The LIG version makes explicit the standard no- 
tion of derivation being presumed. Also, the LIG 
version of a TAG grammar can be used for recog- 
nition and parsing. Because the LIG formalism 
is based on augmented rewriting, the parsing al- 
gorithms can be much simpler to understand and 
easier to modify, and no loss of generality is in- 
. Immediate domination not including foot: 
For each elementary tree node r/ that does 
not dominate a foot node, with children 
r / i , . . . ,  r/,~, include a production 
b\[,\] --, t\[r/d...t\[,,\] 
. No adjunction: For each elementary tree node 
r/that is not marked for substitution or oblig- 
atory adjunction, include a production 
. Start root of adjunction: For each elementary 
tree node r/on which the auxiliary tree/3 with 
root node r k can be adjoined, include the fol- 
lowing production: 
t\[..,or\] 
5. Start foot of adjnnction: For each elementary 
tree node r/on which the auxiliary tree fl with 
178 
Type 4 , ,~  
Type1/2 2 ~  ~ -b \ [ ; \ ]  
/ : 
Type $ / 
Figure 5: Schematic structure of adjunction with top and bottom of each node separated 
foot node r/! can be adjoined, include the fol- 
lowing production: 
---. b\[. . ,f l  
6. Start substitution: For each elementary tree 
node ~/marked for substitution on which the 
initial tree a with root node qr can be substi- 
tuted, include the production 
We will refer to productions generated by Rule i 
above as Type i productions. For example, Type 3 
productions are of the form t\[..~/\] -* b\[..T/\]. For fur- 
ther information concerning the compilation see 
the work of Vijay-Shanker and Weir (1990) and 
Schabes (1991). For present purposes, it is suf- 
ficient to note that the method directly embeds 
the standard notion of derivation in the rewriting 
process. To perform an adjunction, we move (by 
Rule 4) from the node adjoined at to the top of 
the root of the auxiliary tree. At the root, ad- 
ditional adjunctions might be performed. When 
returning from the foot of the auxiliary tree back 
to the node where adjunction occurred, rewriting 
continues at the bottom of the node (see Rule 5), 
not the top, so that no more adjunctions can be 
started at that node. Thus, the dependent ature 
of predicative adjunction is enforced because only 
a single adjunction can occur at any given node. 
In order to permit extended erivations, we 
must allow for multiple modifier tree adjunctions 
at a single node. There are two natural ways this 
might be accomplished, asdepicted in Figure 6. 
174 
(a) predicative 
tree 
Figure 6: Schematic structure of possible predica- 
tive and modifier adjunctions with top and bottom 
of each node separated 
1. Modified start foot of adjunction rule: Allow 
moving from the bottom of the foot of a mod- 
ifier auxiliary tree to the top (rather than the 
bottom) of the node at which it adjoined (Fig- 
ure 6b). 
2. Modified start root of adjunction rule: Allow 
moving from the bottom (rather than the top) 
of a node to the top of the root of a modifier 
auxiliary tree (Figure 6c). 
As can be seen from the figures, both of these 
methods allow recursion at a node, unlike the orig- 
inal method depicted in Figure 6a. Thus multi- 
ple modifier trees are allowed to adjoin at a single 
node. Note that since predicative trees fall under 
the original rules, at most a single predicative tree 
can be adjoined at a node. The two methods cor- 
respond exactly to the innermost- and outermost- 
predication methods discussed in Section 4. For 
the reasons described there, the latter is preferred. 
In summary, independent derivation structures 
can be allowed for modifier auxiliary trees by start- 
ing the adjunction process from the bottom, rather 
than the top of a node for those trees. Thus, we 
split Type 4 LIG productions into two subtypes 
for predicative and modifier trees, respectively. 
4a. Start root of predicative adjunction: For each 
elementary tree node r/on which the predica- 
tive auxiliary tree fl with root node fir can be 
adjoined, include the following production: 
-+ 
4b. Start root of modifier adjunction: For each 
elementary tree node y on which the modi- 
fier auxiliary tree/~ with root node r/~ can be 
adjoined, include the following production: 
--, 
Once this augmentation has been made, we no 
longer need to allow for adjunctions at the root 
nodes of modifier auxiliary trees, as repeated ad- 
junction is now allowed for by the new rule 4b. 
Consequently, P~ules 4a and 4b must treat all mod- 
ifier auxiliary tree root nodes as if they have ad- 
joining constraints that forbid modifier tree ad- 
junctions that do not correspond to modification 
of the tree itself. 
This simple modification tothe compilation pro- 
cess from TAG to LIG fully specifies the modified 
notion of derivation. The recognition algorithms 
for TAG based on this compilation, however, must 
be adjusted to allow for the new rule types. 
175 
6 Recogn i t ion  and  Pars ing  
Following Schabes (1991), the LIG generated by 
compiling a TAG can be used as the basis for Ear- 
Icy recognition. Schabes's original method must 
be modified to respect he differences in compi- 
lation engendered by extended erivations. Such 
parsing rules, along with an extension that allows 
building of explicit derivation trees on-line as a ba- 
sis for incremental interpretation, have been devel- 
oped, and are presented in an extended version of 
this paper (Schabes and Shieber, 1992). In sum- 
mary, the algorithm operates as a variant of Earley 
parsing on the corresponding LIG. The set of ex- 
tended derivations can subsequently be recovered 
from the set of Earley items generated by the al- 
gorithm. The resultant algorithm can be further 
modified so as to build an explicit derivation tree 
incrementally as parsing proceeds; this modifica- 
tion, which is a novel result in its own right, al- 
lows the parsing algorithm to be used by systems 
that require incremental processing with respect 
to tree-adjoining grammars. 
As a proof of concept, the parsing algorithm 
just described was implemented in Prolog on top 
of a simple, general-purpose, agenda-based infer- 
ence engine. Encodings of explicit inference rules 
are essentially interpreted by the inference ngine. 
The Prolog database is used as the chart; items 
not already subsumed by a previously generated 
item are asserted to the database as the parser 
runs. An agenda is maintained of potential new 
items. Items are added to the agenda s inference 
rules are triggered by items added to the chart. 
Because the inference rules are stated explicitly, 
the relation between the abstract inference rules 
described in this paper and the implementation is 
extremely transparent. Because the prototype was 
implemented asa meta-interpreter it is not partic- 
ularly efficient. (In particular, the implementation 
does not achieve the theoretical O(n 6) bound on 
complexity, because of a lack of appropriate in- 
dexing.) Code for the prototype implementation 
is available for distribution electronically from the 
authors. 
7 Conc lus ion  
The precise formulation of derivation for tree- 
adjoining grammars has important ramifications 
for a wide variety of uses of the formalism, from 
syntactic analysis to semantic interpretation and 
statistical language modeling. We have argued 
that the definition of tree-adjoining derivation 
must be reformulated in order to take greatest ad- 
vantage of the decoupling of derivation tree and 
derived tree by manifesting the proper linguistic 
dependencies in derivations. The particular pro- 
posal is both precisely characterizable, through a 
compilation to linear indexed grammars, and com- 
putationally operational, by virtue of an efficient 
algorithm for recognition and parsing. 
References  
Aravind K. Joshi, L. S. Levy, and M. Takahashi. 
1975. Tree adjunct grammars. Journal of Com- 
puter and System Sciences, 10(1). 
Anthony Kroch and Aravind K. Joshi. 1985. Lin- 
guistic relevance of tree adjoining grammars. 
Technical Report MS-CIS-85-18, Department of 
Computer and Information Science, University 
of Pennsylvania, April. 
Anthony Kroch. 1989. Asymmetries in long dis- 
tance extraction in a tag grammar. In M. Baltin 
and A. Kroch, editors, Alternative Conceptions 
of Phrase Structure, pages 66-98. University of 
Chicago Press. 
Randolph Quirk, Sidney Greenbaum, Geoffrey 
Leech, and Jan Svartvik. 1985. A Comprehen- 
sive Grammar of the English Language. Long- 
man.  
Philip Resnik. 1992. Lexicalized tree-adjoining 
grammar for distributional analysis. To appear 
in Proceedings of the 14 th International Confer- 
ence on Computational Linguistics. 
Yves Schabes and Stuart M. Shieber. 1992. An 
alternative conception of tree-adjoining deriva- 
tion. Technical Report 08-92, Harvard Univer- 
sity. 
Yves Schabes. 1991. Computational and 
mathematical studies of lexicalized grammars. 
Manuscript in preparation based on the author's 
PhD dissertation (University of Pennsylvania, 
August 1990). 
Yves Schabes. 1992. Stochastic lexicalized tree- 
adjoining grammars. To appear in Proceedings 
of the 14 th International Conference on Com- 
putational Linguistics. 
Stuart M. Shieber and Yves Schabes. 1990. Syn- 
chronous tree-adjoining rammars. In Pro- 
ceedings of the 13 th International Conference 
176 
on Computational Linguistics (COLING'90), 
Helsinki. 
K. Vijay-Shanker and Aravind K. Joshi. 1985. 
Some computational properties of Tree Adjoin- 
ing Grammars. In 23 ~d Meeting of the Associ- 
ation for Computational Linguistics, pages 82- 
93, Chicago, Illinois, July. 
K. Vijay-Shanker and David J. Weir. 1990. Poly- 
nomial parsing of extensions of context-free 
grammars. In Masaru Tomita, editor, Current 
Issues in Parsing Technologies, pages 191-206. 
Kluwer Accademic Publishers. 
K. Vijay-Shanker. 1987. A Study of Tree Ad- 
joining Grammars. Ph.D. thesis, Department 
of Computer and Information Science, Univer- 
sity of Pennsylvania. 
