The ALLIGATOR Theorem Prover for
Dependent Type Systems: Description and
Proof Sample
Paul Piwek
Centre for Research in Computing
The Open University, Milton Keynes, UK
p.piwek@open.ac.uk
Abstract
This paper introduces the Alligator theorem prover for Dependent Type Systems (dts).
We start with highlighting a number of properties of dts that make them specifically suited
for computational semantics. We then briefly introduce dts and our implementation. The
paper concludes with an example of a dts proof that illustrates the suitability of dts for
modelling anaphora resolution.
1 Introduction
Automated symbolic inference requires a formal language as the substratum for
reasoning. Blackburn and Bos ([7]) make a good case for the use of First Order
Predicate Logic (fopl) in computational semantics, citing both practical (availabil-
ity of high performance theorem provers and to a lesser extent model builders) and
theoretical reasons (they discuss a range of interesting phenomena which can be
dealt with in fopl).
We agree with the idea that fopl is a good starting point, but also think that for
computational semantics to develop further as a field, extensions going beyond fopl
should be actively explored. In this paper, a research tool is described that takes
such explorations in one particular direction. The tool ? alligator ? is a theorem
prover for Dependent Type Systems (dts) [4,5]. The Sicstus Prolog source code
of this prover is available, free of charge, for research purposes ([18]). dts are an
attractive option for computational semantics for a number of reasons:
(i) Dynamic potential (cf. [15]): The notion of a context that is built up incre-
mentally is inherent to dts.
(ii) Flexibility: By varying a limited number of parameters, it is possible to
switch from, for example, propositional to predicate logic, or first order to
higher order logics. Additionally, although the basic underlying logic is con-
structive, dts allows for the flexible use of axioms to regain full classical
logic, or more fine-grained alternatives. For example, it is possible to specify
for individual predicates whether they are bivalent.
(iii) Extensibility: A dts-context includes what is known as the signature in fopl.
Consequently, the signature can be extended incrementally, making it possible
to model the acquisition of new concepts by language users.
(iv) Proof-objects: In dts, Gentzen-style natural deduction proofs are first-class
citizens. This gives us the following advantages: (a) Reliability: It allows us
to heed the de Bruijn criterion for reliable proof systems: ?A proof assistant
satisfies the de Bruijn criterion if it generates ?proof-objects? (of some form)
that can be checked by an easy algorithm.? (cited from [5]) (b) Naturalness:
dts proofs correspond with natural deduction proofs. This is of interest if one
is concerned with models of human reasoning in natural language understand-
ing. In psychology, some schools of thought argue that natural deduction is a
good approximation of human reasoning (see, e.g., [21]). (c) Relevance: Proof
objects can help to identify proofs which are valid but spurious in the sense
that they do not really consume their premises (see [14]). (d) Justification of
behaviour: Explicit proof objects provide direct access to the justifications
that an agent has for the conclusions and the interpretations that it constructs.
This is particularly useful for dialogue agents that need to respond to utter-
ances of other agents. Such responses can themselves again be queried, for
example, through clarificatory questions (cf. [22]) and why questions (A:p, B:
no, ?p, A: Why ?p?). In order to respond appropriately, the agent needs to ac-
cess its own background knowledge and how it was used to draw conclusions.
dts proof objects provide a compact representation of this information.
(v) Applications: dts-style analyses exist for a wide range of linguistic phe-
nomena including donkey sentences ([23]), anaphoric expressions and tem-
poral reference ([20]), belief revision ([8]), bridging anaphora ([19]), clar-
ification ellipsis ([10]), metonymy ([9]), inter-agent communication, knowl-
edge and observation ([1]), ontological reasoning for feedback dialogues ([6]),
and human-machine dialogue ([2]). Additionally, there is research on relating
dts proof-theoretic natural language semantics to model-theoretic approaches
([12]), and there are studies employing the related formalism of labelled de-
duction to natural language semantics ([16]). In 2005, the 2nd Workshop on
Lambda-Calculus, Type Theory, and Natural Language took place at King?s
College London ([11]).
We concede that none of the properties we have listed is on its own unique to dts.
However, to the best of our knowledge, no extant logical calculus combines all
these properties in a single system with well-understood meta-mathematical prop-
erties (dts play a central role in theoretical computer science, see [4]).
2 Dependent Type Systems
dts come in a wide variety of flavours and variations. All these systems share,
however, two features: a typing system and a notion of dependency. Firstly, dts are
type systems. That is, given a set of assumptions ?, also known as the context, they
provide rules for determining whether a particular object, say a, belongs to a given
type, say t. We write ? ? a : t, if, given the context ?, a is of type t, i.e., a inhabits
type t. The objects that are classified using type systems are (normalizing) terms
of the ?-calculus. ? is a sequence of statements x1 : t1, . . . , xn : tn (with n ? 0).
Dependency is the second feature of dts, and it comes in two forms. First, there
is dependency between statements in the context: in order to use a type tk to classify
an object xk, this type tk needs to have been introduced in that part of the context
that precedes it or tk has to be a sort. In other words, tk can only be used if (1) it
itself inhabits a type or can be constructed from other types that are available in the
context preceding it, or (2) it belongs to a fixed and usually small set of designated
types that are called sorts. Because sorts need no preceding context, they make it
possible to keep contexts finite.
Second, there is a variety of dependency that occurs inside types. Since type
systems are used to classify terms of the ?-calculus, they can also deal with func-
tions. A function f from objects of type t1 to objects of type t2 inhabits the function
type t1 ? t2. Dependent function types are a generalization of function types: a
dependent function type is a function type where the range of the function changes
depending on the object to which the function is applied. The notation for depen-
dent function types is ?x : A.B (we also use our own alternative ?arrow notation?:
[x : A] ? B). If we apply an inhabitant of this function type, say f , to an object of
type A, then the resulting object fa (f applied to a) is of type B, but with all free
occurrences of x in B substituted with a (that is, the type of fa is B[x := a]).
One way to make the leap from type systems to logic is as follows. From a log-
ical point of view, we are interested in propositions as the constituents of deductive
arguments. In classical logic, one focuses on judgements of the following form:
the truth of proposition q follows/can be derived from the truth of the propositions
p1, . . . , pn. We reason from the truth of the premises to the truth of the conclu-
sion. To do logic in a dts, we move from truth to proof: we, now, reason from the
proofs that we (assume to) have for the premises to a proof for the conclusion. In
other words, we are interested in judgements of the following form: a is proof of
proposition q follows/can be derived assuming that a1 is a proof of p1, a2 is a proof
of p2, . . ., and an is a proof pn. Such a judgement can be formalized in a dts as
a1 : p1, . . . , an : pn ? a : p. Thus, we read a : p as ?a is a proof for p?. Thus, we
model proofs as (?-calculus) terms and propositions as (a certain class of) types in
dts. This is known as the Curry-Howard-de Bruijn embedding.
The embedding is grounded in the Brouwer-Heyting-Kolmogorov interpreta-
tion of proofs as constructions; e.g., a proof for a conditional p ? q is identified
with a method that transforms a proof of p into a proof for q. In a dts, this is for-
malized by modelling the proof f for a type p ? q as a function from objects of
type p to objects of type q, such that if a is a proof of p, then f applied to a is a
proof of q (i.e., fa : q). Universal quantification is dealt with along the same lines.
In a dts, the counterpart for universal quantification is the dependent function type.
In particular, ?x ? A : P (x) becomes (?x : A.Px). A proof for this type is a
function f which, given any object a : A, returns the proof fa for Pa.
Pure Type Systems (pts; [4]) are of particular interest, because of their gen-
erality. With a small number of parameters, pts can be tailored to match a wide
variety of dts. Alligator implements an extension of pts with ? types. ? types
are also known as dependent product types and can be used to model ? and ?.
3 System Architecture, Implementation and Proof Sample
There is no room for a detailed description of the system here, for that we refer to
the documentation and code available at [18]. What we can offer is, firstly, a list of
differences between alligator and other dts provers: (a) alligator directly con-
structs proof objects for natural deduction proofs. Other provers for dts typically
work with internal representations that are only at the end of the reasoning process
translated to natural deduction proof objects. For example, Cocktail ([13]) uses
tableaux and translates these, whereas tps ([3]) is based on the mating method.
The handbook chapter by Barendregt and Geuvers on proof assistants for dts ([5])
lists a number of further automated theorem provers, none of which works directly
with proof objects. (b) alligator was not developed with mathematical/program
specification reasoning in mind, but rather for inferences in language interpretation.
As a consequence, it has been streamlined to link up with notation and function-
ality relevant to computational semantics (specifically, allowing for notation which
is close to [15] and omission of inductive types). (3) To the best of our knowl-
edge, alligator is the only automated theorem prover which directly conforms to
the specification of Pure Type Systems ([4]), the most general and flexible kind of
dts (most dts can be emulated in pts; see [17] for an overview of dts and their
counterparts in pts).
Alligator 1.0 has been implemented in Sicstus Prolog and been tested with
version 3.12.2 of Sicstus. An overview of the architecture is presented in Figure
1.a. Note that the system applies both forward and backward inferencing. Most
of the forward inferencing takes place before backward inferencing (though some
backward inferencing rules do also have forward inferencing component). Reduc-
tion of terms is also carried out mainly before backward inferencing. Inferencing
is done with a flattened representations of dts terms (the arrow notation). Proofs
are checked at the end of the inferencing process for their correctness (the code for
proof checking is separate from the theorem proving code).
Currently, alligator has the status of an experimental research tool. It is in-
tended for testing computational solutions to theoretically challenging problems in
computational semantics. Scalability has, so far, not been given much attention,
though it will obviously need to be addressed if the system is to be used in large-
scale practical applications. Currently, the system is merely intended as a baseline
and starting point for implementing efficient and effective proof search heuristics.
We now conclude with an example of the use of alligator.
The discourse ?The barn contains a chain saw or a power drill. It . . .? (p. 205 of
[15]) poses a problem for the structural approach to anaphora resolution proposed in
Fig. 1. Overview of Alligator 1.0 Architecture (a) and graphical representation of a
proof-object (b)
[15]: the first sentence does not directly introduce an accessible discourse referent
that can bind the pronoun ?It?. Rather, an object (something that is either a power
drill or a chain saw) needs to be inferred from a disjunction. An inferential account
of anaphora resolution that can deal with such cases is presented in [19]. In a
nutshell, the idea is that an anaphoric expression triggers a proof goal that needs to
be filled with a proof from the context.
Alligator can construct an antecedent for ?It? from the context (for lack of
space, our formalization is in propositional logic). Firstly, the relevant proposi-
tions need to be available: false:prop (false is a proposition), p:prop (there is a
chain saw is a proposition), q:prop (there is a power drill is a proposition), u:prop
(there is something is a proposition). Given these propositions, we can now in-
troduce background information such as a1:p?u (roughly, chain saws are things)
and a2:q?u (power drills are things). Although dts are constructive, we can en-
gage in classical reasoning by including the double negation rule in our background
knowledge: dn pr:([P:prop]?(((P?false)?false)?P)). It involves higher or-
der quantification over all propositions P. Finally, assume that the context has
been updated with the information expressed by the sentence ?The barn contains
a chain saw or a power drill?, with disjunction modelled using implication and
negation: a3:(p?false)?q. Given this information, alligator can generate the
proof/antecedent for ?It? (modelled here as u) given in Figure 1.b.
Acknowledgements We would like to thank the anonymous reviewers of ICoS-5 for their
helpful comments and suggestions.
References
[1] Ahn, R., ?Agents, Objects and Events: A computational approach to knowledge, observation
and communication,? Ph.D. thesis, Eindhoven University of Technology (2001).
[2] Ahn, R., R. Beun, T. Borghuis, H. Bunt and C. van Overveld, The DenK-architecture: a
fundamental approach to user-interfaces, Artificial Intelligence Review Journal 8 (1994),
pp. 431?445.
[3] Andrews, P., M. Bishop, S. Issar, D. Nesmith, F. Pfennig and H. Xi, TPS: A Theorem-Proving
System for Classical Type Theory, Journal of Automated Reasoning 16 (1996), pp. 321?353.
[4] Barendregt, H., Lambda Calculi with Types, in: Handbook of Logic in Computer Science, 2,
Clarendon Press, Oxford, 1992 .
[5] Barendregt, H. and H. Geuvers, Proof-assistants using Dependent Type Systems, in: Handbook
of Automated Reasoning, Elsevier, 2001.
[6] Beun, R., R. van Eijk and H. Pru?st, Ontological Feedback in Multiagent Systems, in:
N. Jennings, C. Sierra, L. Sonenberg and M. Tambe, editors, International Joint Conference
on Autonomous Agents and Multiagent Systems (2004), pp. 110?117.
[7] Blackburn, P. and J. Bos, Computational Semantics, Theoria 18 (2003), pp. 27?45.
[8] Borghuis, T. and R. Nederpelt, Belief Revision with Explicit Justifications: An Exploration in
Type Theory, CS-Report 00-17, Eindhoven University of Technology (2000).
[9] Bunt, H. and L. Kievit, Agent-dependent metonymy in a context-change model of
communication, in: Computing Meaning II, Studies in Linguistics and Philosophy 77, Kluwer
Academic Publishers, Dordrecht, 2001 pp. 75?95.
[10] Cooper, R. and J. Ginzburg, Clarification ellipsis in dependent type theory, in: J. Bos
and C. Matheson, editors, Proceedings of Edilog,the 6th Workshop on the Semantics and
Pragmatics of Dialogue, University of Edinburgh, 2002.
[11] Ferna?ndez, M., S. Lappin and C. Fox, editors, ?Procs. of Lambda Calculus, Type Theory and
Natural Language Workshop,? King?s College, London, 2005.
[12] Fernando, T., A type reduction from proof-conditional to dynamic semantics, Journal of
Philosophical Logic (2001), pp. 121?153.
[13] Franssen, M. and H. de Swart, Cocktail: A Tool for Deriving Correct Programs, Rev. R. Acad.
Cien. Serie A. Mat. 98 (2004), pp. 95?111.
[14] Helman, G., ?Restrictions on Lambda Abstraction and the Interpretation of Some Non-
Classical Logics,? Ph.D. thesis, University of Pittsburgh (1977).
[15] Kamp, H. and U. Reyle, ?From Discourse to Logic,? Kluwer Academic Publishers, Dordrecht,
1993.
[16] Kempson, R., W. Meyer-Viol and D. Gabbay, Syntactic Computation as Labelled Deduction:
WH a case study, in: R. Borsley and I. Roberts, editors, Syntactic Categories, Academic Press,
2000.
[17] Laan, T., ?The Evolution of Type Theory in Logic and Mathematics,? Ph.D. thesis, Eindhoven
University of Technology (1997).
[18] Piwek, P., Alligator Theorem Prover Home Page, mcs.open.ac.uk/pp2464/alligator (2006).
[19] Piwek, P. and E. Krahmer, Presuppositions in Context: Constructing Bridges, in: P. Bonzon,
M. Cavalcanti and R. Nossum, editors, Formal Aspects of Context, Applied Logic Series 20,
Kluwer Academic Publishers, Dordrecht, 2000.
[20] Ranta, A., ?Type-Theoretical Grammar,? Clarendon Press, 1994.
[21] Rips, L., ?The Psychology of Proof: Deductive Reasoning in Human Thinking,? The MIT
Press, Cambridge, Massachusetts, 1994.
[22] Stone, M., Specifying Generation of Referring Expressions by Example, in: Procs AAAI Spring
Symposium on Natural Language Generation in Spoken and Written Dialogue, Stanford, 2003.
[23] Sundholm, G., Proof Theory and Meaning, in: Handbook of Philosophical Logic III, D.
Reidel, 1986 pp. 471?506.
