I 
1965 In ternat iona l  Conference  
on  Computat iona l  L ingu is t i cs  
SOME QUEST IONS OF  
THEORY 
lANGUAGE 
S. Abraham 
53, Uri u., Bu6apest I., Hungary 
Computing Centre of t~e Hungarian Academy of Sciences 
I ~ L: ~ ,",':: i~ ~: '~ I 
Abraham 2 
ABSTRACT. It is shown that theassumpt ion  that 
language is non-finite involves the use of a 
constructive logic which lea#s to some restrictions 
on language theory an~ to the fact that the only 
possible definition of language is that propose~ 
by ~enerative grammars. Generative grammars can 
be formulate~ a~ normal /~ar~ov/ algorithms an~ 
thu~ their study can be reduce~ to the stu#7 of 
such algorithms of a special type. A new type 
of ~enerative grammar is ~efine~, called matrix 
grammar. It is shown that a language generated 
by a context-restricted grammar can be also 
generate~ by a matrix grammar. Some properties 
of matrix grammars are shown to be ~eci~able. 
The problem of the explicative power of generative 
grammars is ~iscusse~. 
I. language metatheory, as indeed any metatheorT, 
must exactly specify the o~erations allowed in 
building up the theory /of language/. This may be 
~one by choosing the lo~ic of the tbeorT.If language 
is consi~ere~ a non-finite set,a constructive logic 
/Kolmogorov/ must be choosen. This entails some 
restrictions on the notions an~ methods to be used 
in language theory. ~amely, we can not speak of 
actually infinite sets, au~ we can not use t~e 
quantifiers "the~ exists" an~ "all". Thus we 
can not include in language theory the notion 
Of 'language' itself in the usual way, as the set 
of al~ /grammatically or 
sentences. Similarly, we 
"distributional analysis" 
restrictinus./ , as it generally has 
semantically/ correct 
can not makeuse  of 
/at least without any 
the form: 
Abraham 3 
/the sentence/ s I has the property %~I~ ' if 
there exists /a sentence/ s 2 with the property 
R 2 /not necessarily R 1 ~ R 2 /. 
It follows that the single way of ~efining 
language is that proposed by generative grammars. 
These grammars are in fact devices that produce 
/generate/ the sentences of a language /an~ only 
those/, one after the other. So, at every moment 
we have generated a finite set of sentences, 
and a% the same, if the grammar is properly 
constructed, at evry moment we can generate a 
sentence not yet generated before. So, in fact 
the language /the set of all the sentences of 
the language/ is a potentially infinite set 
and the abovemeutione~ ~ifflculties do not arise. 
The restrictions to be respected within generative 
grammars as to the /logically correct/ notions 
an~ operations are precisely formu~ate~ /it may 
be interesting to note that Chomsky ~oes not 
respect all of them/. 
2. Most of the properties /an~ possibly even t?e 
most important ones/ of generative grammars are 
obtaineg by constructing automata, equivalent to 
Abraham 4 
different 
using the 
shown that 
study generative grammars 
generative grammars, and in this way 
results of automata theory. It is 
a more natural /an~ easy/ way to 
is to formulate them 
as normal /k,'arkov/ a lgor i thms \ [7 \ ] , \ [1 \ ] .  So, i f  
given a Phrase Structure Grammar G it can be 
given a finite set of normal algorithms G = I~LI 
so that by applying the algorithms to the initial 
strings ~.:e obtain the language generated by G. 
The algorithms ~ have the properties: 
(i) each rule /of the algorithm/ rewrites at once 
only one symbol; 
(ii) by applying a rule to a 
of the strin~ is not ~iminished. 
string the length 
For constructing G we must be able to compose the 
normal algorithms so that these properties should 
be ?reserved. The composition rule given by Markov 
does not fulfil this condition. So the following 
composition rule is proved ane used: 
If ~Lvp ' ~Vp are two normal algorithms with 
the properties (i) an~ (ii) then for every O g ~ 
/the set of initial strings/ we have 
Abraham 5 
where ~ is a normal algorithm with the scheme 
? ,,here {,~ek/p i \ [ ,~  are symbols put in 
one-to-one correspondence to the symbols from V V 
/an~ different from them and between them/; ~ is 
the list of the rules of the al@orithm ~ with 
every ~ changed to ~ . Evidently Z has the 
properties (i\] and "(ilJ ? 
It is shown that to a set of algorithms G = {C%~} 
a single algorithm ,~ corresponds if J~. /the set 
of the initial strings/ is FroFerly enlarged, .so 
that L(G) = ~%(Z)  , Thus the study of 2SG is 
reducible to t}~e study of normal algorithms of 
the type of for /the rewriting rules of which are, 
in fact, context-restrlcted rules/. The sufficient 
anc~ necessary conditions 
generating a non-f~ ~.it e 
~encrative grammars/. 
are estahlishe~ ~ for 
la:~gua\[e /by different 
AbraSam 6 
It is shown that each singular 
/Choms~y/ can be formulate~ as 
of type Ot  . 
transformation 
an algorithm 
The most  studied generative grammars are the 
context-free grammars /CFG/ and the context-restricted 
grammars /CRG/. Some properties of these grammars 
are considered to be uneeciaable. In this respect 
they are also ~ifferent. The differences are formu- 
lated in Table I \[6\]: 
Property 
I. is the language 
generate~ by a 
~zrammar empty ? 
2. is the lanEua~e 
generated by a 
grammar infinite ? 
3. fo r  any strings 
i~ ~ can some 
\[string inclu~in~ 
f 
!be ~erive~ from 
in a ~rammar ? 
CFG 
D 
I 
u I 
D U 
D U 
Abraham 7 
where D inaicates that the property in question 
is aeci~able, U that it is un~eci~able. 
The CF grammars have not the necessary generative 
power to mo~el natural languages. The CR grammars 
may have this power /altough this ~roblem has not 
been clearea up/ but the un~ecibality of the pro- 
perties I - 3 /especially, 3/ makes highly @oubt- 
ful their fitness for modeling natural languages. 
A new type of generative grammars is proposed 
under the name of matrix grammars /MG/ \[2\]. 
A matrix grammar is a quintuple 
G : (v ,  , F, 
where 
is a context-free frammar an@~ F* is a finite' set 
of matrices /called matrix rules/ @eflne@~ as follows: 
(1) f*. is a matrix rule if it has the 'form 
~ F (~z_i~_~) an~ not necessarily {~ ~{j  ; 
Abraham 8 
(2) f~ 
where {* 
is a matrix rule if it has the form 
. ! 
i 
o 
a~e matrix rule~ or belon~ to F. 
To apply a matrix rule f* to a strin G x means to 
apply to x all t}~e context-free rules which form 
it, in the given order /to a??ly a CF rule to a 
strin~ means to replace the first occureuce of 
its left-side with its r ight -s lde/ .  If at least 
one of these context-free rules can not be applied 
to x , we say that f can not. be applied to x. 
It is shown that for any context-restr icted 
grammar G it is po.~sible to construct a /stroncly/  
equivalent matrix grammar. 
For instauce, t!:e /not context-free/ language 
I = { an bn cn } 
is geuerate~ by the matr ix grammar 
o= (v ,v~,  ~ , F )  
with 
V = \[S,X,Y,Z,a,b,c\]  ; %= ; Z={SJ  
Abraham 9 
F:\[ S -~ abc\] 
IS--~ aXbYcZ\] 
X -~ a~ 
Y - ,bY  
Z --~ cZ x a\] 
g- - *b  
7~ - - - .  c 
It is shown that the properties 1,2,3 are ~eci~able 
for matrix g~ammars. So the statement that they 
are un~eci~able for the CE grammars is erroneous 
/the erroneousness of the ~roof of the un~eci~ability 
of property 3 given in ~5\] can be easily shown/. 
So the fitness of these grammars for modelin~ natu- 
ral lan~iages is most likely. 
As we have mentione~, for each singular transfor- 
mation a normal algorithm can be constructe@ which 
contains an\]y context-restricted rules, r.ep, arting 
from this, it can be shown that for a transfor- 
mational grammar /containing only singular trans- 
formations, see \[4\] / a weakly equivalent matrix 
~rammar can be constructed. 
Abraham 1O 
The matrix grammars can be formu2at~d 
algorithm, too. 
as a norma~ 
Since any normal /Mar~ov/ algorithm can he 
reversed, it is possible to devise a method for 
the construction of a recognition grammar 
corresponding to any given generative grammar. 
As the matrix grammar corresponding to a transfor- 
mational grammar Is, in general, only weakly 
equivalent to the latter, and in automatic 
/natural/ language processing /and especially in 
machine translation/ the adequate analysis is 
a crucial requirement, the to strong requirement 
of Choms~y to derive the structure of a generated 
sentence from the ~r~y it is generated, is drorred, 
and t!~e matrix ~rammar is completed with a 
definitional apparatus /rA/ that makes it possible 
to assign to a generated sentence the same struc- 
ture /analysis/ as is assigmed by a transformatio- 
nal grammar /details see in ~3\] /. By constructing 
the recognition grammar corresponding 
generative grammar, the DA of the 
crammar is taken over. 
to a given 
generative 
Abraham II 
3. Some examples are shown how the above considera- 
tions can he applie? to automatic proces~'ing of na- 
tural lanfuages. 
BIBLIOGRAPHY 
Ill Abraham, ~'J., ., Formal Stufy of Generative Gram- 
mars I, Computational Zin~uistics II, 
pp.5-18, 1964 
\[2\] Abraham, S., Some Questions of Phrase Structure 
Grammars I,/under press in Computational 
!inguistics IV/ 
\[3\] Abraham,S., Some Questions of Language Theory 
Kiefer,F., /under press in Acta Hungarica/ 
"\[4\] :3homsky,N., Cate?ories an? 
MIT Press, 1964 
Syntactic Theory, 
\[q\] Chomsky,~.,"~ Formal J rT~ operties of Grammars in 
Handbook of !~athematical Psychology, 
J.?Jiley an@ Sons,Inc. ~ew York,NY,vol.2, 
Dp.323-418, 1963 
\[6\] ~andweber,2.S., Decision Problems of Phrase 
Structure Grammars, IEE Trans.,vol.EC-13, 
Fp.354-362, 1964 
\[7\] Markov,A.A., Teorija algorifmov, Trudy Mat. Inst. 
AN SSSR, Xoscow, 1954 
