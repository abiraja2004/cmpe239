Proceedings of the Third Workshop on Statistical Machine Translation, pages 155?158,
Columbus, Ohio, USA, June 2008. c?2008 Association for Computational Linguistics
Kernel Regression Framework for Machine Translation: UCL System
Description for WMT 2008 Shared Translation Task
Zhuoran Wang
University College London
Dept. of Computer Science
Gower Street, London, WC1E 6BT
United Kingdom
z.wang@cs.ucl.ac.uk
John Shawe-Taylor
University College London
Dept. of Computer Science
Gower Street, London, WC1E 6BT
United Kingdom
jst@cs.ucl.ac.uk
Abstract
The novel kernel regression model for SMT
only demonstrated encouraging results on
small-scale toy data sets in previous works due
to the complexities of kernel methods. It is
the first time results based on the real-world
data from the shared translation task will be
reported at ACL 2008 Workshop on Statisti-
cal Machine Translation. This paper presents
the key modules of our system, including the
kernel ridge regression model, retrieval-based
sparse approximation, the decoding algorithm,
as well as language modeling issues under this
framework.
1 Introduction
This paper follows the work in (Wang et al, 2007;
Wang and Shawe-Taylor, 2008) which applied the
kernel regression method with high-dimensional
outputs proposed originally in (Cortes et al, 2005)
to statistical machine translation (SMT) tasks. In our
approach, the machine translation problem is viewed
as a string-to-string mapping, where both the source
and the target strings are embedded into their re-
spective kernel induced feature spaces. Then ker-
nel ridge regression is employed to learn the map-
ping from the input feature space to the output one.
As a kernel method, this model offers the potential
advantages of capturing very high-dimensional cor-
respondences among the features of the source and
target languages as well as easy integration of ad-
ditional linguistic knowledge via selecting particu-
lar kernels. However, unlike the sequence labeling
tasks such as optical character recognition in (Cortes
et al, 2005), the complexity of the SMT problem it-
self together with the computational complexities of
kernel methods significantly complicate the imple-
mentation of the regression technique in this field.
Our system is actually designed as a hybrid of
the classic phrase-based SMT model (Koehn et al,
2003) and the kernel regression model as follows:
First, for each source sentence a small relevant set of
sentence pairs are retrieved from the large-scale par-
allel corpus. Then, the regression model is trained
on this small relevant set only as a sparse approx-
imation of the regression hyperplane trained on the
entire training set, as proposed in (Wang and Shawe-
Taylor, 2008). Finally, a beam search algorithm is
utilized to decode the target sentence from the very
noisy output feature vector we predicted, with the
support of a pre-trained phrase table to generate pos-
sible hypotheses (candidate translations). In addi-
tion, a language model trained on a monolingual cor-
pus can be integrated either directly into the regres-
sion model or during the decoding procedure as an
extra scoring function.
Before describing each key component of our sys-
tem in detail, we give a block diagram overview in
Figure 1.
2 Problem Formulation
Concretely, the machine translation problem in our
method is formulated as follows. If we define a fea-
ture space Hx of our source language X , and define
the mapping ? : X ? Hx, then a sentence x ? X
can be expressed by its feature vector ?(x) ? Hx.
The definition of the feature space Hy of our target
language Y can be made in a similar way, with cor-
155
AlignmentParallel
Corpus
Retriever
Phrase Table
Phrase
Extraction
Kernel
Regression Decoder
Monolingual
Corpus
Language
Modeling
N-gram
Model
Target Text
Relevant Set
Source Text
Figure 1: System overview. The processes in gray blocks
are pre-performed for the whole system, while the white
blocks are online processes for each input sentence. The
two dash-line arrows represent two possible ways of lan-
guage model integration in our system described in Sec-
tion 6.
responding mapping ? : Y ? Hy. Now in the ma-
chine translation task, we are trying to seek a matrix
represented linear operator W, such that:
?(y) = W?(x) (1)
to predict the translation y for an arbitrary source
sentence x.
3 Kernel Ridge Regression
Based on a set of training samples, i.e. bilingual
sentence pairs S = {(xi,yi) : xi ? X ,yi ? Y, i =
1, . . . ,m.}, we use ridge regression to learn the W
in Equation (1), as:
min ?WM? ? M??2F + ??W?2F (2)
where M? = [?(x1), ...,?(xm)], M? =
[?(y1), ...,?(ym)], ? ? ?F denotes the Frobenius
norm that is a matrix norm defined as the square root
of the sum of the absolute squares of the elements in
that matrix, and ? is a regularization coefficient.
Differentiating the expression and setting it to
zero gives the explicit solution of the ridge regres-
sion problem:
W = M?(K? + ?I)?1M?? (3)
where I is the identity matrix, and K? =
M??M? = (??(xi,xj)1?i,j?m). Note here, we use
the kernel function:
??(xi,xj) = ??(xi),?(xj)? = ?(xi)??(xj) (4)
to denote the inner product between two feature vec-
tors. If the feature spaces are properly defined, the
?kernel trick? will allow us to avoid dealing with
the very high-dimensional feature vectors explicitly
(Shawe-Taylor and Cristianini, 2004).
Inserting Equation (3) into Equation (1), we ob-
tain our prediction as:
?(y) = M?(K? + ?I)?1k?(x) (5)
where k?(x) = (??(x,xi)1?i?m) is an m ? 1 col-
umn matrix. Note here, we will use the exact matrix
inversion instead of iterative approximations.
3.1 N -gram String Kernel
In the practical learning and prediction processes,
only the inner products of feature vectors are re-
quired, which can be computed with the kernel func-
tion implicitly without evaluating the explicit coor-
dinates of points in the feature spaces. Here, we de-
fine our features of a sentence as its word n-gram
counts, so that a blended n-gram string kernel can
be used. That is, if we denote by xi:j a substring
of sentence x starting with the ith word and ending
with the jth, then for two sentences x and z, the
blended n-gram string kernel is computed as:
?(x, z) =
n
?
p=1
|x|?p+1
?
i=1
|z|?p+1
?
j=1
[[xi:i+p?1 = zj:j+p?1]]
(6)
Here, | ? | denotes the length of the sentence, and
[[?]] is the indicator function for the predicate. In our
system, the blended tri-gram kernel is used, which
means we count the n-grams of length up to 3.
4 Retrieval-based Sparse Approximation
For SMT, we are not able to use the entire training
set that contains millions of sentences to train our
regression model. Fortunately, it is not necessary ei-
ther. Wang and Shawe-Taylor (2008) suggested that
a small set of sentences whose source is relevant to
the input can be retrieved, and the regression model
can be trained on this small-scale relevant set only.
156
Src n? y a-t-il pas ici deux poids , deux mesures
Rlv pourquoi y a-t-il deux poids , deux mesures
pourquoi deux poids et deux mesures
peut-e?tre n? y a-t-il pas d? e?pide?mie non
plus
pourquoi n? y a-t-il pas urgence
cette directive doit exister d? ici deux mois
Table 1: A sample input (Src) and some of the retrieved
relevant examples (Rlv).
In our system, we take each sentence as a docu-
ment and use the tf-idf metric that is frequently used
in information retrieval tasks to retrieve the relevant
set. Preliminary experiments show that the size of
the relevant set should be properly controlled, as if
many sentences that are not very close to the source
text are involved, they will correspond to adding
noise. Hence, we use a threshold of the tf-idf score
to filter the relevant set. On average, around 1500
sentence pairs are extracted for each source sen-
tence. Table 1 shows a sample input and some of
its top relevant sentences retrieved.
5 Decoding
After the regression, we have a prediction of the
target feature vector as in Equation (1). To ob-
tain the target sentence, a decoding algorithm is still
required to solve the pre-image problem. This is
achieved in our system by seeking the sentence y?
whose feature vector has the minimum Euclidean
distance to the prediction, as:
y? = arg min
y?Y(x)
?W?(x) ? ?(y)? (7)
where Y(x) ? Y denotes a finite set covering all
potential translations for the given source sentence
x. To obtain a smaller search space and more re-
liable translations, Y(x) is generated with the sup-
port of a phrase table extracted from the whole train-
ing set. Then a modified beam search algorithm
is employed, in which we restricted the distortion
of the phrases by only allowing adjacent phrases to
exchange their positions, and rank the search states
in the beams according to Equation (7) but applied
directly to the partial translations and their corre-
sponding source parts. A more detailed explanation
of the decoding algorithm can be found in (Wang
et al, 2007). In addition, Wang and Shawe-Taylor
(2008) further showed that the search error rate of
this algorithm is acceptable.
6 Language Model Integration
In previous works (Wang et al, 2007; Wang and
Shawe-Taylor, 2008), there was no language model
utilized in the regression framework for SMT, as
similar function can be achieved by the correspon-
dences among the n-gram features. It was demon-
strated to work well on small-scale toy data, how-
ever, real-world data are much more sparse and
noisy, where a language model will help signifi-
cantly.
There are two ways to integrate a language model
in our framework. First, the most straightforward so-
lution is to add a weight to adjust the strength of the
regression based translation scores and the language
model score during the decoding procedure. Alter-
natively, as language model is n-gram-based which
matches the definition of our feature space, we can
add a langauge model loss to the objective function
of our regression model as follows. We define our
language score for a target sentence y as:
LM(y) = V??(y) (8)
where V is a vector whose components Vy??y?y will
typically be log-probabilities logP (y|y??y?), and y,
y? and y?? are arbitrary words. Note here, in or-
der to match our blended tri-gram induced feature
space, we can make V of the same dimension as
?(y), while zero the components corresponding to
uni-grams and bi-grams. Then the regression prob-
lem can be defined as:
min ?WM??M??2F +?1?W?2F ??2V?WM?1
(9)
where ?2 is a coefficient balancing between the pre-
diction being close to the target feature vector and
being a fluent target sentence, and 1 denotes a vec-
tor with components 1. By differentiating the ex-
pression with respect to W and setting the result to
zero, we can obtain the explicit solution as:
W = (M? + ?2V1?)(K? + ?1I)?1M?? (10)
7 Experimental Results
Preliminary experiments are carried out on the
French-English portion of the Europarl corpus. We
157
System BLEU (%) NIST METEOR (%) TER (%) WER (%) PER (%)
Kernel Regression 26.59 7.00 52.63 55.98 60.52 43.20
Moses 31.15 7.48 56.80 55.14 59.85 42.79
Table 3: Evaluations based on different metrics with comparison to Moses.
train our regression model on the training set, and
test the effects of different language models on the
development set (test2007). The results evaluated
by BLEU score (Papineni et al, 2002) is shown in
Table 2.
It can be found that integrating the language
model into the regression framework works slightly
better than just using it as an additional score com-
ponent during decoding. But language models of
higher-order than the n-gram kernel cannot be for-
mulated to the regression problem, which would be
a drawback of our system. Furthermore, the BLEU
score performance suggests that our model is not
very powerful, but some interesting hints can be
found in Table 3 when we compare our method with
a 5-gram language model to a state-of-the-art system
Moses (Koehn and Hoang, 2007) based on various
evaluation metrics, including BLEU score, NIST
score (Doddington, 2002), METEOR (Banerjee and
Lavie, 2005), TER (Snover et al, 2006), WER and
PER. It is shown that our system?s TER, WER and
PER scores are very close to Moses, though the
gaps in BLEU, NIST and METEOR are significant,
which suggests that we would be able to produce ac-
curate translations but might not be good at making
fluent sentences.
8 Conclusion
This work is a novel attempt to apply the advanced
kernel method to SMT tasks. The contribution at this
stage is still preliminary. When applied to real-world
data, this approach is not as powerful as the state-of-
the-art phrase-based log-linear model. However, in-
teresting prospects can be expected from the shared
translation task.
Acknowledgements
This work is supported by the European Commis-
sion under the IST Project SMART (FP6-033917).
no-LM LM13gram LM
2
3gram LM
1
5gram
BLEU 23.27 25.19 25.66 26.59
Table 2: BLEU score performance of different language
models. LM1 denotes adding the language model dur-
ing decoding process, while LM2 represents integrating
the language model into the regression framework as de-
scribed in Problem (9).
References
Satanjeev Banerjee and Alon Lavie. 2005. METEOR:
An automatic metric for MT evaluation with improved
correlation with human judgments. In Proceedings of
the ACL Workshop on Intrinsic and Extrinsic Evalu-
ation Measures for Machine Translation and/or Sum-
marization, pages 65?72.
Corinna Cortes, Mehryar Mohri, and Jason Weston.
2005. A general regression technique for learning
transductions. In Proc. of ICML?05.
George Doddington. 2002. Automatic evaluation of ma-
chine translation quality using n-gram co-occurrence
statistics. In Proc. of HLT?02, pages 138?145.
Philipp Koehn and Hieu Hoang. 2007. Factored transla-
tion models. In Proc. of EMNLP-CoNLL?07.
Philipp Koehn, Franz Josef Och, and Daniel Marcu.
2003. Statistical phrase-based translation. In Proc.
of HAACL-HLT?03, pages 48?54.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: A method for automatic evalu-
ation of machine translation. In Proc. of ACL?02.
John Shawe-Taylor and Nello Cristianini. 2004. Kernel
Methods for Pattern Analysis. Cambridge University
Press.
Matthew Snover, Bonnie Dorr, Richard Schwartz, Lin-
nea Micciulla, and John Makhoul. 2006. A study of
translation edit rate with targeted human annotation.
In Proc. of AMTA?06.
Zhuoran Wang and John Shawe-Taylor. 2008. Kernel-
based machine translation. In Cyril Goutte, Nicola
Cancedda, Marc Dymetman, and George Foster, edi-
tors, Learning Machine Translation. MIT Press, to ap-
pear.
Zhuoran Wang, John Shawe-Taylor, and Sandor Szed-
mak. 2007. Kernel regression based machine transla-
tion. In Proc. of NAACL-HLT?07, Short Paper Volume,
pages 185?188.
158
