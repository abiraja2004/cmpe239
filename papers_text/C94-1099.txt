A TOOL FOR COLLECT ING DOMAIN DEPENDENT 
SORTAL  CONSTRAINTS FROM CORPORA 
Frangois Andry*, Marl( Gawron, John Dowding, and Robert Moore 
SRI International, Menlo Pmq% CA 
*CAP GEMINI Innovation, Boulogne I:lilla.ncourt, France 
Internet: andry@capsogeti.fi: 
Topical paper : Tools for NL Understanding 
(Portability). 
1 ABSTRACT 
In this paper, we describe a tool designed to gener- 
ate semi-automatically the sortal constraints spe- 
cific to a domain to be used in a natural anguage 
(NL) understanding system. This tool is evaluated 
using the Sll,I Gemini NL understanding system in 
tile ATIS domain. 
of work we put into the first domain application 1.
In this paper, we describe tile results of us- 
ing this semi-automatic tool to port the (',e, udlii 
NL system to the ATIS domahi, a (lomltin that 
(ienlini had ah'eady been ported to, arid for which 
it \]lad achiew~,d high perl'orluance ~ttld gi'al'l-illiati- 
cal coverage using hand-written sortal constraints. 
Chossing a known domain, rather than a new one, 
allowed us to compare tile performance of tile de- 
rived sorts to the hand-written ones, holding the 
domain, grammar, and lexicon constant. It also 
allowed us to evahlate the selni-~ultoma.tically ob-
tained cown'age using the ewduation tools pro- 
vided for the A'I?IS corpus. 
2 INTRODUCTION 
The construction of a knowledge base related to 
a specific domain for a NL understanding system 
is time consuming. In the Gemini system, the 
domain-specific knowledge base includes a sort hi- 
erarchy and a set ot" sort rules tha~ provide (largely 
domain-specific) selectional restrictions for ew~ry 
predicate invoked by the lexicon and the gram- 
mar. The selectional restrictions provide a source 
of constraints over and above syntactic onstraints 
for choosing the correct analysis of a sentem:e. The 
sort rules are generally entered by a linguist, by 
hand, from the study of a corpus and while tuning 
the grammar. 
IIowever, the use of an interactiw; tool that 
can help the linguist to acquire this knowledge 
from a corpus\[a\]\[5\], can drastically reduce the time 
dedicated to this task, and also improve the qual- 
ity of the knowledge base in terms of both ac- 
curacy and conipleteness. 'l'he reduction in the 
amount of etfort to develop the knowledge base 
becomes obvious when porting an existing system 
to a new domain. At SR,I, our main concern was 
to port Gemini, our NL understanding system to 
other domains without investing the same amount 
3 PARSING WITH SORTS 
Gemini\[2\] implements a clear separation Imtween 
syntactic and sem~mtic information. Each syntac- 
tic node invokes a set of semantic rules which re- 
sult in the bnihling of a set of logical forms for 
that node. Selectlomd restrictions are enforced on 
the logical fornls through the sorts nlechanism: All 
prcdlcations in :~ catldiihd.e logical form IlallSt I)e li- 
censed by some sorts rule. The sorts are located in 
~ conceptual hierarchy of approxhmd;cly 200 con- 
cepts mid are imphmleiH.ed as Pro\]og terms such 
that nlol'e gellorai sorts SllltSllllle lliore specific 
sorts\[6\]. Failure to match any available sorts rule 
can thus he implernented as unification-failure. 
Gemini parser creates logical forms expres- 
sions like the fbllowing one : 
exi.sl.s( A ; \[flighl\]), 
\[and, \[fli~lht, (A; \[fli~.lht\])\]; [prop\], 
\[to, (A; \[flight\]), 
(' I:~05'!I'ON'; \[city\])\]; \[prop\]\]; ~r, op\]); \[prop\] 
In these logical form expressions, every sub- 
expression is assigned a sort, represented as the 
IThe actual dom;dn is Air Transportation (ATIS) 
used as a benchmaxk in the ARPA community. 
598 
right-hand-side of a ';' operator\[l\]. Sorts rules for 
predicates are declared with sor/2 clauses: 
~or(' l~O,?'rO N', \[,,;ey\]). 
sot(to, (\[\[flight\], [city\]\], \[prot,\]) ). 
The above declarations lic.ense the use of 
'BOSTON' as a zero-ary predicate with "result- 
ing" sort \[city\] and 'to' as a two-place predicate 
relating flights and cities with resulting sort \[prop\] 
(or proposition). 
In the ATIS application domain, for exaulple, 
the subject (or actor) of the verb deparl, as in 
'the morning flights deparling for denver', can 1)e 
a flight. For this, we use the following set of sort 
definitions: 
.~o,'(d~v,,,'t, (\[\[d~v~,,'~,,,'~\]\], \[p,,ov\])) 
so,,(ftighl, (\[\[fligtd\]\], \[prop\])) 
so,.(acto,., (\[\[departure\], \[flivhl\]\], \[p,.np\])) 
'Phe tirst two definitions make depart and flight 
p,'edieates compatible with departure and llight 
ewmts respectively, returning a proposition; the 
third makes aelor a relation that (:an hold be- 
tween flights and tlights, also returning a llroposi- 
Lion. A simple example of a logical form lice.nsed 
by these rules follows (with the result sort \[prop\] 
suppressed): 
qterm( . . . . . . .  ( ( X ; \[flight\]), 
\[.rid, \[flight, (X; \[flight\])\], 
ezists( Y; \[flight\]), 
\[.,,,I, \[a~v.,.t, (r; \[,t~v.,.t,,~\])\], 
(v; \[,l~v,,~t,,,,d), 
\[actor, (Y; \[del>art,vre\]) , (X; \[f lighl\])\]\])\]) 
Which would be roughly the logical form for 
'a deparling flight'. 
4 SORT ACQUIS IT ION 
't'he apl)roach we have taken is to start fi'om an 
il, itial "schematic" sorts fih: we call the signature 
file (explained below), which essentially allows all 
predicate argument coml)inations. We tJlell hal'- 
vest a set of preliminary sort rules by parsing a 
large corpus. The logical forms that induce these 
preliminary rules e61rle frona parses that; essentially 
incorporate only syntactic onstraints. The resu\] l-
ing sorts rules are filtered by \]lalld alld the process 
is iterated with an increasingly accurate sorts file, 
converging rapidly on the sorts file specific to the 
application domain (fig. 1). 
4.1 S ignature  and  l Les t r i c t ions  
If we started the abow~ iteration process with no 
sortal information,.then the logical forms resulting 
\[ -co,,i,,5; . . . .  
. \] _~ 
~.- ----7~ step::l Sg\ ] t . l '~  .' e "~':--- 
Figure 1: lterative Acquisition of Sorts. 
frolll a parse would colH.aill iio sortal ill\['Ol'nlatioil, 
alld only vacnons ortal rules wotlld \])e harvested. 
"\['\]le first ste l) is tlllls to huild an initial sort 
file we call the signat'ure \[il~. The idea is to as- 
sign lexical predicates inherent sorts, but not to 
assign assign ally rllles which constrain which lex- 
ica\] itelns (:all colnhine with which. The signature 
file, then, is m~t just domain-independe.nt. It has 
no information at all ahout semantic oml>inal;o. 
rial Imssil)ilities, not even those determined by the 
lallgtla,~e (for example, that the verb break does 
not allow prolmsitional subjects). The reason for 
this is so that it can be generated largely automat- 
ically from the lexicon. 
4.2 The  S ignature  
I,ets Im,e;in with certain inherently relational pred- 
icates, for which the sigllatnre file gives only an 
arity and the result sort. I"or example the signa- 
ture fc~r the predica.tes al (corresponding to the 
preposition) and actor (corresponding to logical 
subject) wouhl be the same: 
.~#.,.~,,,.,,.(.t, (IX, r\], b,,'ov\]) 
.~i~t,.,v,,,.,~(.,,z,,,., (IX, v\], \[v,',,v\]) 
This signature is u~ed as the sort rule R~r at 
and actor in the sorts tool's first iteration. The 
efl>ct is t.o limit the choice of sorts rules for these 
ln'edicates 1.o rules which are further instantiat,ions 
their signatm'os, that is, to rules licensing them to 
599 
take two arguments of any sort to make a proposi- 
tion. The object in successive iterations will be 
to assign these relational predicates ubstantive 
sortal constraints, thus constraining head modifier 
relations and the parse possibilities. 
Verbs, nouns, some adjective and adverbs, on 
the other hand, have signatures with fully or par- 
tially instanciated arguments: For example, in the 
ATIS domain, the verbs depart, get_in, mad the 
nouns data, flight have the signatures: 
signature(depart, (\[\[departure\]\]~ \[prop\])) 
si~nat~,re(get_in, (\[\[a,'ri~at\]\], \[prop\])) 
signature(data, (\[\[information\]\], b,rop\])) 
slgnature(flight, (\[\[flight\]\], \[prop\])) 
These declarations have no effect on the combi- 
natorial possibilities of these words (they tell us 
nothing about what can be the subject of the verb 
depart or what verbs the noun flight can be sub- 
ject of), but when a logical form is built up fl'om 
a syntactically licensed parse (like the one give.n 
above for a departing flight), these sortal decla- 
rations will "fill in" the sorts for the connecting 
predicate actor, generating the sort rulc: 
slgnature(actor, (\[\[departure\], \[flight\]\], [prop\]) 
Thus in the signature file, lexical predicates have 
their own "inherent" sort rules, which then help 
build up the sort rules for the relational predi- 
cates. The inherent sort rules for adjectives like 
cheap and late will constrain only their first argu- 
ment. The reason for this is that it is this first 
argument that modifiers (such as intensifying ad- 
verbs and specifiers), will hook on to. 
*ig.ature(eheap, (\[\[eost_soa\], A, n\], \[prop\])) 
~ignat~re(tate, (\[\[temporal_stage\], A, 13\], \[p,'op\])) 
At the same time the argument position filled 
in by what the adjectives modify is left uncon- 
strained. The signature file thns makes no com- 
mitment about what sorts of things can be late or 
cheap; it just needs to say there is such a thing 
as lateness and cheapness. This is why for a new 
domain the signature file can be generated largely 
automatically, using a new inherent sort for each 
new lexical item, mssigning the type of predicate 
appropriate to its grammatical category. 
All zero-arity predicates (names) need to 
have inherent sorts. Certain general 'tool words' 
which include numbers, dates, time, and commons 
words, will receive the same signatures in any do- 
ma in  : 
signature(3, (\[number\])) 
signature(lriday, (\[\[day\]\], [prop\])) 
signature(pm, (\[nonagent\]) ) 
signature(yes, (\[p,'op\])) 
In addition to this, however, there is a whole list of 
words specific to the dornain which riced to be in- 
herently sorted. This part of creating a signature 
file will need to be done by band: 
signature(' N AS II Y I L L E', (\[city\])) 
signature(' AI l~_C AN A1k A', (\[airline\])) 
signature(' LA_GU AfUg l A', (\[airport\])) 
4.3 Ext rac t ing  the  Sor ts  
We now give a more detailed example of how sort 
rules are extracted fl'om logical forms (bFs) built 
by the parser. For '*he morning flights flying to 
denver', we obt~dn roughly the following Logical 
1,~or m : 
qterm(the; \[non_symmetric_determiner\], 
A; \[flight\], 
\[and, 
\[fllqht, (A; \[flltfl,t\])\], 
\[n_n_rel, 
(z~; \[dau-Va,'t\]) \[and, 
\[morning, 
(13; \[day-part\])\]\] 
; \[\[da:,/-v..'tl\], \[prop\], 
A; \[flight\]\], 
ea:isZs( U; \[flight\], 
\[,,.d, 
If In, (C; \[flight\])\], 
\[actor, (C; \[ftlght\]), 
(A; \[flight\])\], 
\[has_aspect, 
(C; \[flight\]), 
(in_progress; \[aspect\])\], 
\[to, (C; \[flight\]), 
(' D :;:N V :~':e' ; \[e'it,v\])\]\])\]) 
;\[yli,jl;t\] 
The eXLracLiotl process COllSiStS Of a recursive 
exploration of the logical form and retrie, val of each 
predirate gild its arglllliellts, ldor example, from 
the LFs above, our tool would extract the follow- 
ing sort definitions set  7 : 
sot(flight, \[\[flight\]I, [prop\]) 
~o~(..o.,i,,g, \[\[,t.u-v..~\]\], \[v~ov\]) 
sor(n_n_rel, \[(\[\[,lay.port\]\], bJrop\]), \[flight\]\], b,rop\]) 
sot(fly, \[\[flight\]\], [prop\]) 
sor(aelor, \[\[fti~aht\], \[ftiyht\]\], \[prop\]) 
sot(to, \[\[flight\], \[city\]\], \[prop\]) 
sor(f rag-nl,, \[\[flight\]\], b,'rop\]) 
2For reason of efficiency and simplification, we ex- 
clude some very common predicates independent of
the domain, such as 'and', 'equal', exists', 'has_aspect', 
;tnd 'qterm'. 
600 
sor(np_f rag, \[\[prop\]\], [prop\]) 
When constrained only by signatures, the 
parser typically finds a large number of logical 
forms. The sorts tool provides the option of har- 
vesting sort rules in one of two ways, either from 
all generated logical forms, or only from the Pre- 
ferred Logical I'brm (PLF). The parse preference 
component implemented in Gemini chooses the 
best intepretation from the chart, based on syn- 
tactic heuristics\[2\], and provides a set of PLFs. 
In addition to the extraction of the sort rules, 
we also calculate tire occurrence ?i of each sort 
rule for all the sentences of the corpus. We then 
normalized ?i by the number of logical forms that 
include the sort rule (Ni). F, ach value Oi is stored 
along with its sort, rule and used to calculate the 
probabilities related to the sort rule : 
- ~=o 6)i 
In fact three sets of probabilitilies are calcu- 
lated for each rule R: (1) Global probability of sort 
rule R: the number of invocations of rule 1% nor- 
malized by the number of LFs containing I~ and 
divided by the total nmnbcr of rule invocations in 
the corpus; (2) Conditional probability of rule 1~ 
given a particular predicate; (3) Conditional prob- 
ability of 1% given the predicate in l~ and an argu- 
ment of the same sort as the first argument of R.. 
Also, associated to each sort definition, we 
keep the list of the indexes of a small set of sen- 
tences which contain the corresponding sort def- 
inition in its logical form. This set is used as a 
sample for the set editor tool. 
4 .4  The  Argument  Rest r i c t ions  
The argument restrictions are instantiated ver- 
sions of the signatures for each predicate. For ex- 
ample, after parsing and extraction from tire logi- 
cal forms, the arguments X and Y of the signature 
associated to the preposition at will help to gen- 
erate a list of several sort definitions uch as : 
so,.(.t, (\[\[.i~po~t\], \[eitu\]\], \[p,.op\]) 
as in : 'the aiport at Dallas', 
so~(.t, (\[\[dom.in_e,~nt\], \[~i.r~_Vo;n*\]\], b"op\]) 
as in : 'departure at 9prn'. 
5 SORT EDIT ING 
At each step of tire process, after parsing, tile lin- 
guist, using the interactive sort editor, can exam- 
ine the new sort file which has been generated and 
choose which sortal definition need to be elimi- 
nated. Statistical information ~sociated to each 
sort definition helps him decide which ones are rev- 
elant or not. We have also included tire possiblility 
of adding a sort definition, although this kind of 
operations hould be very rare. In fact the main 
activity of the linguist using the sort editor tool, 
will be to filter the sort definitions generated by 
the parsing of the corpus. 
5.1 Descr ip t ion  o f  the  too l  
The sort editor tool is all interactive, window- 
based program. It hms a main window for dis- 
playing and editing the sorts and a set of buttons 
that help the user to either display additional in- 
formation or perform actions such as : 
? load or save a sort file, 
? select a fimctor among tile list. of Ml fimctors 
and disphty the list of its possible arguments, 
result and probabilities, 
? deletion and insertion of a sort definition, 
? display a sample of sentences associated to a 
specific sort definition, 
? mapping between the sort definitions and a ref- 
erence sort file (for evaluation), 
? changing the way the sort definitions are dis- 
played (result or not, mapping or not, global 
prolmhility, conditional to a functor, or relative 
to the first argument of a definition), 
? use of a threshold on the ln'ol>abilities to filter 
the sort definitions, 
? retrieve I.he list or I'unctors giwm a certain argu- 
\[|I(HIL) 
? display the sentences associated to a sort defi- 
nition, 
? display the list of predicates which have been 
excluded form the extraction, 
? specification of a sortal hierarchy to be used 
with the sort definitions for the next iteration, 
? use of a whiteboard to save specific sentences 
and information daring a session. 
The tool uses ProXT, the Quintus Prolog in- 
terface to MOTIF widget, set and the X-Toolkit. 
601 
6 EVALUATION AND RESULTS 
Evaluate the porting to a new domain require rnea- 
suring how the new sort file contributes to per- 
form the target task within the new domain. This 
kind of evaluation is difficult because it is hard to 
separate the contribution of the grammar and the 
contribution of the sorts constraints. One way to 
evaluate our tool would be to have a file of " cor- 
rect" sortal constraints that we use as a reference 
to check the ones we generate with our tool. "rite 
problem is that this kind of file does not exist for 
new domMns, since obtaining such file is precisely 
the purpose of our tool. 
The approach we have chosen was to use the 
sort file built by hand for the ATIS corpus and to 
check this 'reference file' against the new sort file 
we intend to build, using our tool on a corl)us of 
the same domaine. 
6.1 Bu i ld ing  the  s ignature  file 
For the this first experimental exercise with the 
sort tool, we built the signature file somewhat dif- 
ferently than we wonld build it for a new appli- 
cation. In order to facilitate evaluating tl,e tool, 
our goal this t ime was to come up with a signature 
file be compatible with the reference file built by 
hand. 
The tirst step in the experiment was to auto- 
matically extract the signatures from the lexicon 
and reference sorts file, which contains nearly 2200 
sort definitions. Signatures are largely predictable 
from the grammatical category of a word 1"o,' ex- 
ample, most of the verbs (except the auxiliaries) 
with one argmnent, receiw'.d a signature identical 
to the sort definition. On the other \[laad, nlosl. 
of the prepositions received a signature with all 
their arguments replaced by a varial)h.' (since they 
are domain-specific). In this maiden voyage of the 
sort acquisition system, the signatures chosen for 
verbs, adjectives and nouns were made coml)ati- 
ble with the sort hierarchy used by the reference 
sorts file. In porting to a new domain, the lexical 
signatures would presumahly use an automatically 
generated sort hierarchy, almost entirely fiat, with 
a unique lexical sort for each lexical item. 
In addition to this, some signatures, for logical 
predicates and predicates introduced in semantic 
rules, were added by hand. These represent a lit- 
tle bit more titan 15% of the final signature file 
which contains a total of 1357 signatures, llalf of 
these signatures are zero-arity predicates mostly 
automatically built from the lexicon. 
6.2 Pars ing  Madeow 
The next step of our experiment was to parse a 
corpus from the A'I'IS domain using the signa- 
ture file we haw; Imilt. For this, we have used the 
MADCOW corpus\[4\], that includes 7{24:t sentences 
of various length (from 1 to 36 words) with a large 
linguistic coverage from this domain. This process 
had been done in both modes LFs anti PLI,'s. q'he 
idea was to compare the result in both modes, to 
check whether the use of parsing preferences was 
relewmt for the extraction of tile sort definitions 
or if we had to use all the Logical l,'orms from tile 
parsing. 
The first iteration of parsing MAI)COW In'O- 
dated 5917 and 2275 sort rules a respectively for 
the LI,'s and PLFs modes. 
6.3 Mapp ing  corpus  and re ference  
rules 
For this first ewthmtion, we also used a feature of 
our tool which ran map each sort rule produced 
by the extraction phase against the rules of a ref- 
erence sort file. 'i'he mapping consists of assigning 
one of the following categories to each corpus ac- 
quired sort rule : 
? Exact : the corpus rule match exactly with a 
reference rule, 
? Incompatible : the corpus rule does not match 
with any reference rule, 
? Sabsnmed-by : tile corpus rule is subsumed by 
at least one reference rule, 
? ~tlhstunes : the corpas rule subsumes at least 
one re\['ereace rule, 
? lncomparal)h~ : the corpus rule is incomlmrabh: 
wil.h nt hmst one reference rule. 
q'he following table shows the repartition of 
mapping categories modes IA,'s and PLl:s : 
  xact 1--40  I a27 I 
h~compatible 
Subsumed-by 
Subsumes 
_hlcomparahh." 
"total _ D ~ ~  
aSiuce zero-arity sort l)redicalcs h~Lve a signature 
identical t,o their sort rule, only sorts rules with at 
least an argmnmlt were extra(:ted uring the parsing 
<>f MAI)COW. 
4'l'wo sort rules are incomparable, whell they unify 
each other while none of them subsumes the other one. 
602 
Tim first comments concerning these figures is 
that the percentage of incompatible rules is higher 
for the LFs than the PLFs mode (respectively 52% 
vs 30%), and the number of 'exact' sorts is more 
than half for lAPs than PLFs. This shows that the 
use of Preferred Logical l"orms for parsing is more 
efl\]cient in extracting the 'good sorts'. 
tIowever, the figures do not give an exact idea 
of the completeness and precision of our tool, since 
there is a large number of rules sul}sumed by otlmr 
ones (more than 30% for I,Fs and almost 50% for 
PLies mode). In fact, some of tile corpus rules are 
subsuined by more general rules ill the reference 
sort file while providing the same coverage as the 
reference sort rules. 
Therefore, the prec is ion of our tool fc)r the 
l'Ll"s mode just after the extraction phase can 
be estimated between 16% (exacts rules) and 55% 
(exact rules plus subsumed n\]les). This \[mml}er 
gets better and more precise very q,,ickly after the 
first iteration of editing since the work of the lin- 
gnist is precisely to remove most of the incompat- 
ible and incomparable rules and rules whi{:h are 
either to() general or too speciiic. 
The ovt,.rge.neration of the tool just after 
parsing, for the Pl,l,'s mode, can I)e estimated to 
at least 30% (the percentage of incorrect rules). 
After tile first iteration of editing, this number  
decreases very quickly since low probahilitles help 
the lingnist to eliminate rules that are incomI}ati- 
hie or ineomparable. 
The reeal l  for the Pl,Fs mode after parsing, 
which is the ratio of the 'Exact' corpus rules by the 
number of reference rules used for the mappillg in 
our evaluation (636 non zero-arity sorts rules), can 
be estimated to at least 57%. 
A more precise estimation of the exact ram> 
bet of 'Exact' rules could be COmlmted by using 
the sortal hierarchy, and generate tbr the two sets 
of rules (corpus and reference) all the rules that 
can be subsumed, and realize the mal}plng only 
with these rules. 
7 CONCLUSION 
This first evahmtion of our tool in the ATIS do- 
main shows tlmt the acquisition of sorts from a 
corpus can be partially automated, reducing dras- 
tically the time the linguistic dedicates to this task 
(the precision converges in few editing iteration). 
In addition to this, the possibility of a systematic 
examination for all predicates with crosschecldng 
tools such as sentence visualisation and funetor 
browing helps the linguist to establish strict aqui- 
sition methods for the knowledge base in new do- 
nlgins. 
In addition to this, the tool can also lie used 
to improve an existing knowledge /)ase. For ex- 
ample, the study of the ineoml)atilde rules d,,r- 
ing this \[i,'st evaluatio,l helped us {.o discover new 
rules that will increase the coverage of (iemini in 
the ATIS system. 
8 Acknowledgements  
This research was supported hy the A{lwmced I{e- 
search Projects Agency mtder contract with the Of lice 
of Nawd lh~sear(:h, and by a grant of the \],avoisier Pro- 
gram from the l"rench l;'{}reign Ollice. The views ~uul 
conclusions contained in this document are those nf 
the ~ulthors and should ,,ot be interpreted as necessa.r- 
ily represe,lti,lg tile. official i}olicie.s, either exl)ressed or 
implied, t}f the Adwmced lh:sear{:h l}rojects Agency {}1 
th{: U.S. (',overnnxe,tt, or those of the Sciel~Lific Mission 
{}f the l"rench l"oreign Ollice. 
References  
\[l\] Alshawi, I1. (ed.), The Core Lawfuage l'/n.- 
9b~e, M IT Press, 1!)92. 
\[2\] I)owding J., Gawron ,I.M., Appelt 1)., Bear 
J., Cherny L., Moore IL and Mortal 1)., 
%II",MINI : A Natural I,anguage Systenl Fro' 
Spoken-l,anguage Understanding", Proceed- 
ings of the 31st Meeting of the Association for 
Computational \[,inguistics, Ohio State I In i  
w'.rsity, Columbus, Ohio, pp. 5d-6 l, 1993 
\[3\] (',rishnmn R., llirschman L. and Ngo 'I'.N., 
"l)iseovery Procedures for Subhmguage Se- 
lectional Patterus : Initial li',xperinlents ", 
Comlmtalio',al Liwlui.~lics , Vol. 12:3 pp. 205, 
198(i. 
\[4\] Ilirschrnal, l,., "Multi-.Site l )a ta  Colhx'.ti<m 
for a Sl)oken {,ai,g,mge {2}rpus", MAI)COW, 
in l'roccedings of the I)A I~ I'A ?'peech. and Nal- 
ural l,a~tguage Workshop, pp. 7-l d, II'e}}. J992. 
\[5\] l,ang I".M., llirsehman 1,., "hnproved l}orta- 
bitity and l'arsing Through hlte,'aetive Ac- 
quisition of Semantic hfforna~tio,,", In #ec- 
ond Confi:rence on Applied Nal'ural Lang'uagc 
l'rocessiu 9', Feb. 1988. 
\[6\] Mellish, C., "Implenlenting Systemic Classi- 
fication by UldIieation". Compulational Li~> 
g'.islics, V'ol. 14, pp. 40-511, 1988. 
60.3 
