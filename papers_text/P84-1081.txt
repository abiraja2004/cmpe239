INTERRUPTABLE TRANSITION NETWORKS 
Sergei Nirenburg 
Colgate Univers i ty  
Chagit Att iya 
Hebrew Univers i ty  of Jerusalem 
ABSTRACT 
A special ized transit ion network 
mechanism, the interruptable transit ion 
network (ITN) is used to perform the last 
of three stages in a mult iprocessor  
syntactic parser. This approach can be 
seen as an exercise in implementing a 
parsing procedure of the active chart 
parser family. 
Most of the ATN parser 
implementations use the left-to-r ight 
top-down chronological  backtracking 
control structure (cf. Bates, 1978 for 
discussion). The control  strategies of 
the active chart type permit a blend of 
bottom-up and top-down parsing at the 
expense of t ime and space overhead (cf. 
Kaplan, 1973). The environment in which 
the interruptable transit ion network (ITN) 
has been implemented is not similar to 
6hat of a typical  ATN model. Nor is it a 
straightforward implementat ion of an 
active chart. ITN is responsible for one 
stage in a mult iprocessor parsing 
technique descr ibed in Lozinski i  & 
Nirenburg, (1982a and b), where parsing is 
performed in essent ia l ly  the bottom-up 
fashion in paral lel  by a set of re lat ively 
small and "dumb" processing units running 
identical software. The process involves 
three stages: (a) producing the candidate 
strings of preterminal  category symbols; 
(b) determining the posit ions in this 
string at which h igher- level  const i tuents 
start and (c) determining the closing 
boundaries of these constituents. 
Each of the processors al located to 
the f irst stage obtains the set of all 
syntact ic readings of one word in the 
input string. Using a table grammar, the 
processors then choose a subset of the 
word's readings to ensure compat ib i l i ty  
with similar subsets generated by this 
processor 's right and left neighbor. 
Stage 2 uses the results of stage 1 
and a di f ferent tabular grammar to 
establ ish the left ("opening") boundaries 
for composite sentence constituents, such 
as NP or PP. The output of this stage 
assumes the form of a str ing of tr iads 
l label  x M), where lah~l belongs to the 
vocabulary of const ituent types. In our 
implementat ion this set includes S, NP, 
VP, PP, NP& (the "virtual" NP), Del (the 
delimiter), etc. X and M are the left and 
the right indices of the boundaries of 
these const ituents in the input string. 
They mark the points at which parentheses 
are to be opened (x) and closed (y) in the 
tree representation. The values x and y 
relate to posit ions of words in the 
initial input string. For example, the 
sentence (i) wi l l  be processed at stage 2 
into the str ing (2). The '?' in (2) stand 
for unknown coordinates y. 
(i) The very big br ick bui lding that sits 
1 2 3 4 5 6 7 
on the hi l l  belongs to the university. 
8 9 i0 ii 12 13 14 
(2) (s 1 ?)(np 1 ?)(s 6 ?)(np& 6 6) 
(vp 7 ?)(pp 8 ?)(np 9 ?)(vp ii ?) 
(pp 12 ?)(np 13 ?) 
It is at this point that the 
interruptable transi t ion network starts 
its work of f inding the unknown boundary 
coordinates and thus determining the upper 
levels of the parse tree. 
An input str ing ~ tr iads long wi l l  be 
al located n identical processors. 
Init ial ly the chunk of every part ic ipat ing 
processor wi l l  be one tr iad long. After 
these processors f inish with their chunks 
(either succeeding or fai l ing to find the 
missing coordinate) a "change of levels" 
interrupt occurs: the size of the chunks 
is doubled and the number of ac t ive  
processors halved. These latter continue 
the scanning of the I TN from the point 
they were interrupted taking as input what 
was formerly the chunk of their right 
neighbor. Note that all const i tuents 
already closed in that chunk are 
transparent to the current processor and 
already closed in that chunk are 
transparent to the current processor and 
are not rescanned. The number of active 
processors s tead i ly  reduces during 
parsing. The choice of processors that 
are to remain act ive is made with the help 
of the Pyramid protocol  (cf. Uozinski i  & 
Nirenburg, 1982). The processors released 
393 
after each "layout" are returned to the 
system pool of avai lable resources. At 
the top level in the pyramLd only one 
processor wL\] l  remain. The status of such 
a processor is declared final, and this 
trlggers the wrap-up operat ions and the 
construct ion of output. The wrap-up uses 
the or iginal  string of words and the 
appropr iate string of preterminal  symbols 
obtalned at stage 1 together with the 
results of stage 3 to build the parse 
tree. 
ITN can start processing at an 
arbl trary posit ion in the input string, 
not necessar i ly  at the beginning of a 
sentence. Therefore, we introduce an 
addit ional  subnetwork, "initial", used for 
handl ing control  f low among the other 
subnetworks. 
The llst of "closed" const i tuents 
obtained through ITN-based parsing of 
string (2) can be found in (3), whi le (4) 
is the output of ITN processing of (3). 
(3) (s 1 \[4)(np 1 10)(s 6 10)(np& 6 6) 
(vp 7 10)(pp 8 10)(np 9 10)(vp ll 14) 
(pp 12 14)(np 13 14) 
(4) (s(np(s(np&)(vp(pp(np))) ) ) (vp(pp)))  
3. An ITN Interpreter. 
The interpreter was designed for a 
paral lel  processing system. This goal 
compel led us to use a program environment 
somewhat di f ferent from the usual pract ice 
of wr it ing ATN interpreters. Our 
interpreter can, however, be used to 
interpret both ITNs and ATNs. 
A new type of arc was introduced: 
the interrupt arc INTR. The interrupt arc 
is a way out of a network state addit ional  
to the regular POP. It g ives the process 
the opportuni ty  to resume from the very 
point where the interrupt had been called, 
but at a later stage (this mechanlsm is 
rather similar to the detach-type commands 
in programming languages which support 
coroutines, such as, for instance, 
SIMULA). Thus, the interpreter must be 
able to suspend processing after trying to 
proceed through any arc in a state and to 
resume processing later in that very 
state, from the arc immediately fol lowing 
the interrupt arc. For example, if \[NTR 
is the fourth of seven arcs in a state, 
the work resumes from the fifth arc in 
this state. This is implemented with a 
stack in which the transit ions in the net 
are recorded. The PUSH and POP arcs are 
also implemented through this stack and 
not through the recursion handl ing 
mechanisms built into Lisp. 
Since it is never known to any 
processor whether it wi l l  be act ive at the 
next stage, it is necessary that the 
information it obtained be saved in a 
place where another processor wi l l  be able 
to find it. Unl ike the standard ATN 
parsers (which return the parse tree as 
the value of the parsing function), the 
I%N parser records the results in a 
special  working area (see d iscuss ion 
below). 
impl~m~nLaL iun 
The ITN interpreter was implemented 
in YLISP, the dia lect  of LISP developed at 
the Hebrew Univers i ty  of Jerusalem. A 
special  scheduler routine for s imulat ing 
paral lel  processes on a VAX 11/780 was 
wr i t ten by Jacob Levy. The interpreter 
also uses the pyramid protocol  program by 
Shmuel Bahr. 
In what fol lows we wi l l  descr ibe the 
organizat ion of the stack, the work ing 
area, and the program itself. 
a) The stack. The item to be stacked 
must descr ibe a posi t ion in the network. 
An item is pushed onto the stack every 
time a PUSH or an INTR arc is traversed. 
Every time a POP arc is t raversed or a 
return from an interrupt occurs one item 
is popped. The stack item consists of: 
I) names and values of the current network 
registers; 2) the remainder of the arcs 
in the state (after the PUSH or the INTR 
traversed); 3) the actions of the PUSH 
arc traversed; 4) the name of the current 
network (i.e. that of the latter's 
initial state); 5) the value of the input 
pointer (for the case of a PUSH failure). 
The working area is used for two 
purposes: to support message passing 
between the processors and to hold the 
findings. The working area is organized 
as an array, R, that holds a doubly linked 
list used to construct  the output tree. 
The actions def ined on the working area 
are: a) in i t ia l izat ion (procedure 
init- input): every cell R\[i\] in R obtains 
a token from input, whi le the links 
Ri l l . \ [next- index\]  and 
R\[ i \ ] . \ [previous- index\]  obtain the values 
i+l and i-l, respectively; b) CLOSE, the 
tool for del imit ing subtrees in the input 
string; 
The array R is used in paral le l  by a 
number of processors. At every level of 
processing the active processors' chunks 
cover the array R. This arrangement does 
not corrupt the paral le l  character of the 
process, since no processor actual ly  seeks 
information from the chunks other than its 
own. 
394 
The main funct ion of the interpreter 
i s  cal led //,El. It obtains the stack 
contain ing the h istory of processing. If 
an interrupt is encountered, the funct ion 
returns the stack with new history, to be 
used for invoking this funct ion again, by 
the pyramid protocol. 
If a call to i tn is a return from the 
interrupt status, then a stack item is 
popped (it corresponds to the last state 
entered during the previous run). If the 
function call is the initial one, we start 
to scan the network from the first state 
of the "initial" subnetwork. 
At this stage we already know which 
state of which network fragment we are in. 
Moreover, we even know the path through 
the states and fragments we took in order 
to reach this state and the exact arc in 
this state from which we have to start 
processing. So, we execute the test on 
the current arc. If the test succeeds we 
perform branching on the arc name. 
The INTR arc has the fo l lowing 
syntax: ( INTR<dummy><test><act ion>*).  
The current state is stacked and the 
procedure is exited returning the stack as 
the value. <dummy> was inserted s imply to 
preserve the usual convent ion of s i tuat ing 
the test in the third slot in an arc. 
The ABORT arc has the syntax 
(ABORT<message><test>).  
When we encounter an error and it 
becomes clear that the input str ing is 
illegal, we want to be able to stop 
processing immediately and print a 
diagnost ic  message. 
The actions on the stack involve the 
movement of an item to and from the stack. 
The stack item is the quantum value that 
can be pushed and popped, that is no part 
of the item is accessed separate ly  from 
the rest of the values in it. The 
functions managing the stack are 
push-on-stack and pop-from-stack. 
The push-on-stack is cal led whenever 
a PUSH or an INTR arc is traversed. The 
pop-f rom-stack is called, first, when the 
POP arc is traversed and, second, when the 
process resumes after return from an 
interrupt. 
The closa action is performed when we 
find a boundary for a certain subtree for 
which the opposite boundary is a l ready 
known (in our case the boundary that is 
found is always the right boundary, y). 
QIo~@ performs two tasks: first, it 
inserts the numeric value for y and, 
second, it declares the newly built  
subtree a new token in the input string. 
For example, if the input str ing had been 
<s 1 ?><np 1 ?><vp 4 ?><np 6 8><pp 9 i0> 
1 2 3 4 5 
after the act ion (close 3 i0) is performed 
the input for further processing has the 
form: 
<s 1 ?><np i ?><vp 4 I0>. 
The parameters of ~lose are i) the 
number of the tr iad we want to close and 
2) the value for which the y in this triad 
is to be substituted. The default  value 
for the second parameter is the value of 
the y in the tr iad current at the moment a 
call to ~ios~ is made. 
When the processing is parallel, 
?1os~ is appl ied mul t ip ly  at every level, 
which would mean that a higher level 
processor wi l l  obtain prefabr icated 
subtrees as e lementary input tokens. This 
is a major source of the efficiency of 
multiprocessor parsing. 
The ITN in the current implementation 
i s  re lat ively small. A broader 
implementat ion wi l l  be needed to study the 
propert ies of this parsing scheme, 
including the est imates for its time 
complexity, and the extendabi l i ty  of the 
grammar. A compar ison should also be made 
with other mult iprocessor  parsing schemes, 
including those that are based not on 
organiz ing communicat ion among re lat ive ly  
"dumb" processors running identical 
software but rather on interaction of 
h ighly  special ized and " intel l igent" 
processors -- cf., e.g., the word expert 
parser (Small, 1981). 
Acknowledgments.  The authors thank 
E. Lozinski i  and Y. Ben Asher for the many 
discussions of the ideas descr ibed in this 
paper. 
B ib l iography  
Bates, M. (1978), The theory and pract ice 
of augmented t rans i t ion network 
grammars. In: L. Bolc (ed.), Natural  
Language Communicat ion wi th  Computers. 
Berlin: Springer. 
Kaplan, R. M. (1973), A general  syntact ic  
processor. In R. Rust in (ed.), Natural  
Language Processing. NY: Academic 
Press. 
Loz~nski i ,  E .L .  and S. N l renburg 
(1982a). Local i ty  in Natural  Language 
processing. In: R. Trappl (ed.), 
Cybernet ics and Systems Research. 
Amsterdam: North Holland. 
395 
Lozinskii,  
(1982b), 
language. 
France. 
E .L .  and S. Nirenburg 
Paral lel processing of natural 
Proceedings of ECAI, Orsay, 
Small, S. (1981), Viewing word expert 
parsing as a l inguistic theory. 
Proceedings of IJCAI, Vancouver, B.C.. 
Appendix A. ITN: the main function of 
the interruptable transit ion network 
interpreter 
(def Itn 
(lambda ( stack ) 
; stack - current processing stack 
(prog (regs curr-state-arcs net-name 
curt-arc $ test arc-name) 
; regs - current registers of the network 
; curr-state-arcs list of arcs not yet 
; processed zn current state 
; net-name - name of network being 
: processed 
; curt-arc - arc in processing 
;(all these are pushed on stack when a 
; 'push' arc occurs) 
; $ - a special register. 
; the functlon first checks if stack is 
; nil; if not then this call is a return 
; from interrupt previous values must be 
; popped from the stack 
\[cond (stack (seta ec pn nil) 
;set end-chunk flag to nil 
(pop-from-stack t)) 
(t (set-net 'al\] 
loop 
\[ cond ((null curr-state-arcs) 
(cond((null  (pop nil)) (return nil)\] 
(set 'curt-arc (setcdr 'curt-state-arcs)) 
( set 'test (*nth curr-arc 3) ) 
( cond ((eval test) 
;test succeeds - traverse the arc 
( set 'arc-name (car curr-arc)) 
\[cond 
((eq arc-name 'push ) ; PUSH 
(evlist (*nth curr-arc 4)) 
(push-on-stack) 
(set-net (cadr curr-arc)) 
(go loop)) 
((eq arc-name 'pop ) ; POP 
(evlist (*nthcdr curr-arc 3)) 
(cond 
((null (pop(eval(cadr curr-arc)))) 
(return $))) 
(go loop)) 
((eq arc-name 'jump ) ; JUMP 
(evlist (*nthcdr curr-arc 3)) 
(set-state (*nth curt-arc 2)) 
(go loop)) 
((eq arc-name 'to) ; TO 
(evlist (*nthcdr curr-arc 3)) 
(set-state (*nth curr-arc 2)) 
(get-input) 
(go loop)) 
((eq arc-name 'cat) ; CAT 
(cond L\[eq (currlI~B)) 
(*nth curt-arc 2)) 
(evlist 
(*nthcdr curr-arc 3)))) 
(go loop)) 
((eq arc-name 'abort) ; ABORT 
(tpatom (*nth curr-arc 2)) 
(return nil)) 
((eq arc-name 'intr) ; INTeRrupt 
(push-on-stack) 
(return stack)) 
(t ; error 
(tpatom '"i l legal arc") 
(return nil)) 
( go loop \] ; try next arc 
Append ix B. 
A Fragment of an ITN network 
(the "init ial" and the sentence subnetworks) 
;Note that "jump" and "to" can be either 
;terminal actions on an arc or separate 
;arcs 
(def-net '(s-place) '( 
( initial 
(pop t (end-of-sent) (close*)) 
(intr nil (end-of-chunk)((to initial))) 
(push S (lab s) 
((setr s-place (inp-pointer))) 
((jump initial/DEL))) 
(push NP (lab np) nil ((to initial))) 
(push VP (lab vp) nil ((to initial))) 
(push PP (lab pp) nil ((to initial))) 
(cat np& t (to initial)) 
(cat del t (to initial))) 
( init ia l /DEL 
(cat del t (close* (getr s-place)) 
(to initial)) 
(to initial t\] 
(def-net '( vp-place no-pp pp-place 
np-place) 
,( 
(s 
(pop t (is-def (Y))(close ( inp-pointer))) 
(to S/ t (setr no-pp 0))) 
(S/ 
(intr nil (end-of-chunk)((to S/))) 
(Bush PP (and (lab pp) 
(le (getr no-pp) 2)) 
((and (gt (getr no-pp) 0) 
(close* (getr pp-p lace) ) )  
(setr pp-place (inp-pointer)) ) 
((setr no-pp (addl 
(getr no-pp))) 
(jump S/))) 
(abort "more than 2 PPs in S" (lab pp) ) 
(cat np& t (to S/NP&)) 
;(s (pp & pp) ..) 
(cat del (gt (getr no-pp) 0) 
(close* pp-place) 
(setr no-pp l) 
(to S/)) 
(abort "DEL cannot appear at 
beginning of sent" (lab del)) 
(jump S/NP& t\] 
(S/NP& 
(intr nil (end-of-chunk)((to S/NP&))) 
(push NP 
396 
(lab np) 
((and 
(getr pp-place) 
(close* (getr pp-place))) 
(setr np-place (inp-pointer))) 
((to S/NP))) 
;here we can allow PPs after an NP! 
(push VP 
(lab vp) 
((and (getr pp-place) 
(close* (getr pp-place)))) 
((jump S/OUT))) 
(abort =no NP or VP in 
the input sentence" t) 
(jump S/NP t\] 
(S/NP 
(abort "not enough VPs in S" 
(end-of-sent)) 
(intr nil (end-of-chunk)((to S/NP))) 
(push VP (lab vp) 
((setr vp-place (inp-pointer)) 
;if there is a del 
(close* (getr np-place))) 
;close the preceding NP 
;and everything in it 
((jump S/VP))) 
;(s .. (np & np) ..) 
(cat del (lab del) 
(close" (getr np-place)) 
(to S/NP&)) 
(abort "too many NPs before a VP" 
(lab np\] 
(s/vP 
(cat del (lab del) 
(close* (getr vp-place)) 
(jump S/VP/DEL)) 
(jump S/OUT t\] 
(S/VP/DEL 
;standing at 'del' and looking ahead 
(abort "del at EOS?" 
(ge (next-one (inp-pointer)) 
sent-len)) 
; the above is a test for eos 
(intr nil (null (look-ahead i)) 
((lump S/VP/DEL))) 
(to S/NP (eq (look-ahead l) 'vp)) 
(jump S/OUT t\] 
;exit: it must be an s 
(S/OUT 
(pop t (end-of-sent) (close*)) 
(pop t t\] 
397 
