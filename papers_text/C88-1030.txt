THE PARALLEL  EXE~ERT PARSER (PEP): 
A THOROUGHLY %~IVISED DESCENDAN'~ OF 
THE WORD EXPERT PARSEI% (WEP) 
M. DEVOS 
Katho l ieke  Univers i te i t  Leuven 
Campus Gasthu isberg  
Neurophys io logy  Lab 
Herestraat  49 
B-3000 Leuven, Be lg ium 
G. ADRXAENS 
Siemens NLP Research 
& Katho l ieke Univers i te i t  Leuven 
M. Theres iast raat  21 
B-3000 Leuven, Be lg ium 
(s iegeert@kules.uucp or 
s iegeert@blekul60.b i tnet)  
Y.D. WILLEMS 
Kathol ieke Univers i te i t  Leuven 
Department  of Computer  Science 
Ce lest i jnen laan 200A 
B-3030 Heverlee, Be lg ium 
(ydw@kulcs.uucp) 
~H>st z'act 
in this paper  we present PEP (the Para l le l  
Expert  Parser~ Devos 198'7), a radical ly  
rev ised descendant  of WEP (the Word Expert  
Parser, Small  1980) . WEP's idea of 
l ingu is t ic  ent i t ies as interact ing processes  
has been retained, but its adherence to the 
word as the only ent i ty has been rejected. 
Experts  exist at d i f ferent levels, 
communicate through r ig id ly def ined protocols  
and are now ful ly des igned to run in 
paral lel .  A prototype of PEP is implemented 
in Flat Concurrent  Pro log ar{d runs in a Logix 
environment.  
of in format ion is more complex tl~an a node in 
a connect ion ls t  model (it may be a rule, for 
instance)~ but in which one attempts to keep 
the parallel, computat ion involv ing the items 
of in format ion mere under  control  than can be 
done in a connect ionist .model .  (For examples 
of coarse-gra in  para l le l  NLU, see Hirakawa 
1983 or Matsumoto  3.987). 
The research we present  here is of the 
latter  type of para l le l  NI.U. A potent ia l ly  
para l le l  NLU system (the Word Expert  Parser, 
Small  1980) has been drast ica l ly  rev ised so 
as to a l low a tru ly para l le l  implementat ion 
(viz. in F lat  ConCurrent  Prolog, us ing the 
Logix env i ronment  (Si lverman et al 1986)); 
we call the resul t ing system the Paral le l  
Expert  Parser  (PEP, Devos 1987). 
Io In t roduct ion  
Work on para l le l  natural  language 
unders tand ing  (NLU) is only start ing to 
emerge. (This even holds for work on any k ind 
of para l le l  AI (see e.g. Kowal ik  1988)). In 
general,  there seem to be two kinds of 
approaches  to para l le l  NLU. On the one hand, 
there is what we call fine-grain 
parallelism; on the other hand, there is 
coarse-grain parallelism. With 
fine-grain parallel NLU we refer bas ica l ly  
to the connect ion is t  approach and its 
decendants.  Connect ion is t  models  feature 
huge networks  of small  nodes of information; 
computat ion is represented by f luctuat ions of 
the act ivat ion  levels of nodes and by 
(parallel) t ransmiss ion  of exc i tat ion and 
inh ib i t ion a long connections.  (For 
connect ion ism in general, see Feldman & 
Ba l la rd  1982, VanLehn 1984, Hi l l is  1986, 
McC le l land  & Rumelhart  1986; for 
connect ion is t  models  of NLU, see Cottre l l  & 
Small  1983, Cottre l l  1985, Po l lack & Waltz  
1985, McC le l land  & ~melhar t  1986) o With 
coarse-grain parallel NL~ we refer to a 
more modest  kind, in which the smal lest i tem 
2. The WoEd Expmrt  Parser  (WEP) 
b~ie f ly  descr ibed  
The Word  Expert  Parser  (WEP, Small 
1980) i s  a natural  language understand ing 
program in the AI t rad i t ion  of semantic  
pars ing  (see also Hirst 1983v Hahn 1986, 
Cottre l l  1985, Adr iaens 1986a/b for 
WEP- insp i red  or - re lated work). The 
organ izat ion  of the model  di f fers strongly 
from that of a "c lassical"  NLU system. 
Rather  than hav ing a number of components of 
rules that are app l ied  (serially) to 
l inguist ic  input by a general  process, WEP 
cons iders  the words themselves as act ive 
agents (word experts) that interact  with each 
other  and with other  knowledge sources in 
o rder  to f ind the meaning of a fraQT~ent of 
text. Words are implemented as coroutines~ 
i.e. processes  that run for a whi le  
(broadcast ing in format ion or per fo rming  
s ide-ef fect  operat ions to ref ine the 
representat ion  of the mean ing  of a text 
fra~nent),  and suspend when they have to wait  
for in format ion from other experts. The 
in format ion they send or wait  for a re  e i ther  
s ignals  re lat ing to the status of the pars ing 
147 
process  (broadcast on a ded icated signal 
channel) or concepts .that represent the 
mean ing  of parts  of the l inguist ic  input 
(broadcast on a ded icated concept channel).  
The experts  coord inate the understand ing 
process  in turn, eventua l ly  converg ing 
towards a conceptual  structure that 
represents  the mean ing  of a text fragment, 
30 Fz'Om ~ to PEP 
In general,  the idea of interact ing 
processes  is a very at t ract ive one if one 
wants a f lexible parser  capable of us ing any 
type of  in format ion at any moment it needs 
it. Th is  basic  pr inc ip le  of WEP has been 
reta ined \[or PEP. Yet, a l though the des ign 
of the sy:3tem seemed to lend itself  eas i ly  to 
a para l le l  implementat ion,  l inguist ic  and 
computat iona l  f laws in the model  have made 
drast ic  revis ions necessary before this could 
actua l ly  \])e done. 
3.1 True \]~arallelism 
Al though WEP c la imed to be "potent ia l ly  
paral le l" ,  it heavi ly  (and implicit ly) re l ied 
on sequent ia l i ty  to make its pr inc ip les  work. 
Espec ia l ly  for the restart ing of suspended 
experts, a last- in f i rst -out regime (stack) 
took care of content ion for messages: the 
expert that p laced an expectat ion for a 
message 16.st~ most ly  got it first. Also, to 
avoid com~l icat ions  in expert communicat ion,  
no new e~perts  were in i t ia l i zed  before the 
queue of leady-to-run experts  was empty. The 
adherence to this sequent ia l izat ion,  not to 
ment ion  the s ide-ef fects  involved, obv ious ly  
made WEP's c la im of be ing "potent ia l ly  
paral le l"  invalid. 
Ir~ a t ru ly  para l le l  environment,  
sequent ia l i ty  can no longer be re l ied on. 
PEP uses \[parallelism whenever  possible:  for 
the execut ion of expert code AND for 
in i t ia l i z ing new experts  ( init ia l iz ing all of 
them as soon as they are read and 
morpho log ica l ly  analyzed).  In order  to 
real ize this, the most  important departure 
from the or ig inal  model  is that experts are 
no longer  on ly  assoc iated with words (the 
only l inguist ic  ent i t ies acknowledged by 
WEP) ? We wi l l  now discuss what experts  are 
assoc ia ted  with, and how the new v iew of 
experts  leads to c learer  and more expl ic i t  
concepts o~ wa i t ing  and communicat ing  in a 
para l le l  environment.  
3.2 Wo~d-o:~pQztJ vozsus concopt -e~8 
on d i f ferent  levels 
A major  i tem of cr i t ic ism ut tered against  
WEP has been that it considers  the word  as 
the only ent i ty  to be turned into an expert  
process. L ingu is t ica l ly  speaking, the 
ex is tence of larger  const i tuents  is 
unden iab le  and must  be taken into account, 
whatever  \]aodel one advocates.  From the 
computat iona l  viewpoint,  squeezing all 
interact ions into words makes it almost 
imposs ib le  to f igure out what is going on in 
the overal l  pars ing  process. Words have to 
decide on everything, f rom morpholog ica l  
issues to pra~nat ic  issues, with jammed 
communicat ion  channels as a result. 
In PEP, experts are assoc iated with 
concepts  rather than with words, it is very 
natural  to do so: words are only used to 
evoke the concepts  that conshitute the 
mean ing  of a fra~lent of text. St:i.l i ~ 
concepts have a concrete l ink to words and 
can be regarded as being assoc iated with hhe 
group of words that evokes them. E.g. in 
"the young girl" three concepts can be 
discovered, assoc iated with the b~sic 
word-groups "the", "young" and "girl ~'. At: a 
h igher  level a compound concept const i tut ing 
the meaning of the entire construc~ "the 
young glr l"  is invoked. 
Concretely,  in PEP a specif ic data 
structure (the expert ~rame) is associ~ted 
with every expert. The hierarchy that 
or ig inates  from the concepts is ref lected by 
the interconnect ion of the expert fraracs. 
These are ver t ica l ly  re lated by \].eve\]. 
interdependencies,  and hor izonta\ ] ly  by the 
re lat ive role the concepts of the frames play 
in the frame that is be ing bui lt  out of them 
one level higher. Besides its level~ a~ 
expert  frame has three attr ibute slots: a 
funct ion attr ibute (stating what the role is 
the expert concept plays at a spec.i.fJc 
level), a concept attr ibute (representing 
the contents of the expert) and a lexical 
attr ibute (simply correspondin~ to the gr<~u~> 
of words assoc iated with Lhe conc<~pt) . 
Below, we wil l  see that this def in i t ion of e:~ 
expert frame is crucial  for the rest~:/<:!t~:!<l 
cormmunication protocol  among experts. 
The "analysis  process" consists of the 
co l lect ion of current ly  act ive experts tha\[+ 
try to establ ish new concepts. ~f a ne~ 
concept can successfu l ly  be formed, the 
corresponding expert is added to the analysis  
process, whi le the combined concepl r s expe~t~ 
may die. They pass their  expert frames~ a~0 
so the conta ined information, to the new 
expert, which wil l  usual ly  incorporate them 
in its own expert frame. Not ice that hh~ 
v iew has interest ing software engineer ing 
aspects not present  in WEP: by having a 
leve led approach expert  code becomes more 
local, modular  and adaptable. The dynamic 
process h ierarchy enables the l inguist /expert  
wr i ter  to wr i te  gener ic  experts that can be 
parameter i zed  with the value of the concept 
they represent (cp. ob ject -or iented 
programming).  
A f inal note about the levels. Each level 
is in tended to deal with a more or le~;s 
independent  part in the der ivat ion and 
compos i t ion  of  meaning. However, we leave i\[: 
up to the l inguist  wr i t ing the expe~-L 
processes  to declare (i) what levels he wants 
to cons ider  and (2) what the appropr iate 
funct ions are that -he  wants to use at the 
respect ive  levels. By combining this 
f lex ib le f i l l ing in of a r igorously  def ined 
model, we force the l inguist  to c lear ly  
speci fy  the experts  and help him to keep the 
experts  re lat ive ly  small (hence, more 
readable) and to f igure out more easi ly  where 
th ings cou ld  go wrong in the pars ing process. 
A poss ib le  h ierarchy  of levels might  be: 
morpheme, word, constituent,  clause, sentence 
(each level hav ing  its own funct ion 
attr ibutes) .  In  the somewhat overs impl i f ied  
example be low we wi l l  be using three levels 
(between brackets:  the respect ive funct ion 
attr ibutes) ,  viz. word  level 
\ [ar t ic le ;ad ject ive;substant ive\ ] ,  
const i tuent_ leve l  \ [act ion;agent;object\] ,  and 
sentence level. 
3.3 Broadcasting vs. 
explicit communication 
Experts  are the act ive components of the 
analys is  system. New concepts come into 
ex is tence only through their  interact ion. 
Since para l le l i sm was a major  goal we have 
based our communicat ion  protocols  on expl ic i t  
ident i f i ca t ion  of the expert  frames invo lved 
in some interact ion, which al lows us to keep 
communicat ion  under control. Two kinds of 
communicat ion  take place: 
(I) attribute-refining: 
Experts  are a l lowed to ref ine the 
at t r ibutes  of ~xpert  frames. The attr ibutes 
are cons idered to be informat ion that is 
access ib le  by all experts. 
(2) attribute-probing: 
Basing themselves  on the attr ibutes of 
the probed expert  frames, experts  decide 
which way to go in the analysis  process. Al l  
at t r ibute prob ing  is in ~ the choose_al t  
command, that is descr ibed next. 
3.4 Suspending/resuming: 
explicit machinery vs. 
declarative reading 
Let us now turn our attent ion to the 
command that al lows?  experts to decide which 
way to go in thei r  analys is  process  on the 
basis  of in format ion they expect from other 
experts. We have in fact loca l ized al l  
poss ib le  cho ice-po ints  in one command: 
choose_a l t ( \ [  
alt(frame(frame-specification, 
attrlbuteconditlon), 
invoke(expert)), 
alt(frame(frame-specification, 
attribute condition), 
invoke(expert)), 
alse(invoke(e~q~azt)) 
\]). 
It consists  of a number of a l ternat ives and 
an opt ional  elsative. The a l ternat ives  
conta in  a test, which may fail, suspend or 
succeed. In the last case the cor responding 
expert  may be invoked. If tests from several  
14& 
al ternat ives  succeed, an arb i t rary  
cor respond ing  expert  is invoked, whereas the 
others are not further cons idered (don't-care 
commit ted  choice; see also below and Devos 
1987, however, for a suggest ion of how to 
real ize non-determin ism in v iew of poss ib le  
ambiguity) .  Only after  fai lure of all 
tests  is the e lsat ive-expert  executed. 
Tests consist  of a frame- spec i f icat ion and 
an att r ibute-condl t ion.  The latter  
const i tutes  the actual  test on the attr ibute 
of the frame se lected by 
" f rame-spec i f icat ion" .  This frame can be 
referred to with tes t f rame in the 
cor responding invoked expert. One wi l l  
a l ready have not iced tha~ the choose alt 
pred icate  does not conta in any expl~cit  
schedul ing commands. Indeed, we intend to 
ent i re ly  mask the program flow by a 
dec larat ive reading. However, f low control  
remains necessary and St is rea l ized by 
suspending a n expert  rou?ine (or a branch in 
the choose alt command, since the 
a l ternat ives  in the choese_alt  may be 
executed in paral le l ) ,  if it requires 
in format ion that is not yet avai lable. Only 
af ter  this required informat ion is f i l led in, 
does the expert - rout ine  resume. This can 
cheaply be implemented using read-only 
un i f i cat ion  (Shapiro 1986). Intuit ively,  
pred icates  that probe for in format ion 
suspend, if the var iab le  that suppl ies this 
in format ion is not yet instant iated.  This 
suspens ion takes place dur ing un i f icat ion  of 
the Flat Concurrent  Pro log (FCP) pred icate  
(see below), into which expert  rout ines are 
compiled. Resumpt ion occurs whenever  the 
requi red var iab le  gets instantiated. 
Suspens ion of a choose_alt  branch may take 
p lace in the fo l lowing cases: 
(i) If the search for the test f rame requires 
in format ion that is not yet avai lable, it 
s imply suspends. As a result the 
f rame-spec i f i cat ion  always leads to the 
se lect ion of a frame in a determin ist ic  way. 
Hence, expl ic i t  communicat ion becomes 
possible.  
(2) The at t r ibute- test  suspends unti l  the 
in format ion to be tested is avai lable. 
There is one other  command that may cause 
suspens ion of an expert, viz. begin_ leve l  
(a_level). The execut ion of an expert that 
speci f ies begin_ leve l (a_ leve l ) ,  is only 
resumed after  all at t r ibutes of incorporated 
expert frames are specif ied. This f i l l ing in 
of at t r ibutes  takes place between di f ferent  
expert frames on the same level ( intra- level 
communicat ion) .  With r ig id rules as to which 
expert  f i l ls  in which frame, it is poss ib le  
to prove that the expert  code is deadlock 
free, We wi l l  further refer to these rules 
as the d~adlook avo idance rules. It suf f ices 
e.g. to prove that every frame that is at the 
lowest level that st i l l  contains unf i l led  
frames, wi l l  eventual ly  be f i l led in .  It 
must  then not be d i f f icu l t  to construct  a 
deadlock analyser,  that checks whether  the 
deadlock  avoidance rules are violated. This 
has not yet been further elaborated. 
However,, to  ensure f lex ib i l i ty  (especial ly 
f rom l ingu is t ic  considerat ions) we are forced 
to a l low inter - level  communicat ion,  e.g. in 
sentences as "the l i t t le gir l  loved her toy", 
where "her" is level equivalent  to "l ittle", 
but anaphor ica l ly  refers to "the l i t t le 
girl", which wi l l  p robably  be at a h igher  
(hence, dif ferent) level than "her" .v In 
this  case deadlock  free code is not easy to 
guarant~e, because of the poss ib i l i ty  of 
c i rcu lar  wa i t ing  of experts  for one another. 
It is o\[~r hope that we can also incorporate 
res t r?cted  and we l l - spec i f ied  use of this 
in ter - leve l  communicat ion  in the deadlock 
avo idancy rules. 
The system as yet designed, implements a 
don ' t -care  commit ted-cho ice  between the  
a l ternat ives  of a choose alt predicate.  This 
means that an arb i t rary  a l ternat ive that 
succeeds, wi l l  be chosen to determine the 
expert 's  behaviour.  We are wel l  aware of 
the fact that don ' t -care  commit ted-cho ice  is 
not a lways what one wants in AI appl icat ions.  
We mere ly  chose this  (easy) opt ion here in 
order  not to burden the des ign and 
implementat ion  wi th  one more problem. We wil l  
Just ment ion  two a l ternat ives we intend to 
explore  in the future. 
The f irst is intermediate  between 
don ' t -care  commit ted-cho ice  and full 
non-determinism.  To each a l ternat ive in the 
choose_al t  command a Pr ior i ty  is assigned. 
The a l ternat ives  are then t r ied  Out by 
descend ing  pr ior ity,  a l lowing the more l ikely 
ones to succeed first. (These pr ior i t ies  wi l l  
of ten ref lect  f requency of occurrence of 
speci f ic  l inguist ic  structures.)  A 
pr io r i t i z ing  approach l ike this one wi l l  
however  require more synchron isat ion  among 
the alte:rnatives of the choose alt to ensure 
a unique semant ics  of the command. 
The second is full non-determinism. NO 
pr ior i t ies  are ass igned to alternat ives,  and 
the system is capable of undoing a wrong 
choice dur ing  the analys is  process. It can 
go back to a choice point  and try out another  
a l ternat ive  whose test succeeds. A 
(costly) implementat ion  of this st rategy 
should be based on Concurrent  Pro log code 
(Shapiro 1986) that contains a copy of  the 
global  env i ronment  for each a l ternat ive  in 
the choose alt  command. This Concurrent  
Pro log  code wou ld  then have to be f la t tened 
to FCP (Codish & Shapiro 1985). 
3.5 An Example  
Below we present  the code of  some sample 
experts  that a l low the analys is  of the 
sentence "the l i t t le  gir l  eats the apple". 
The example is s impl i f ied, but i l lustrates 
wel l  the crucia l  e lements  of PEp. F i rst  the 
appropr iate  levels and funct ions are 
declared. Then fo l lows  th~ code of the 
actual  experts. Remember  that expf rame 
refers to the f rame that is assoc iated with 
the expezt and tes t f rame refers to the frame 
that was referred to in the a l ternat ive  of 
the preced ing  choose_air  command. 
"begin frame" sets the appropr iate  level  and 
"ref ine funct ion" and "ref ine_concept"  do the 
f i l l ing in of the attr ibutes of the spec i f ied 
frame. The lexical  attr ibute is 
automat ica l ly  f i l led in when beg inn ing the 
frame. The example restr icts i tsel f  to 
choose_al t  commands that only require 
int ra- leve l  communicat ion.  When the sentence 
is read, the corresponding experts are 
in i t ia l i zed  and start to run in paral lel .  
The rest of the code is sel f -explanatory.  
declare(level\[ 
word level 
(functlon\[article,adJectlve, substantive\]), 
constltuentlevel 
(?unctlon\[action,agent,obJect\]), 
sentence_level 
(function\[\]) 
\]). 
the :- 
begin frame(word level), 
refine_fuzkction (expframe, 'article'), 
reflneconcept (expframe, kled("defining")), 
refine_concept (expframe, value("defined")). 
little :- 
begin frame(word_level), 
refine_funetion(expframe, 'adjective'), 
reflne_concept(expframe, kind("adjectival")), 
reflne_concept(expframe, value("young, small")). 
girl :- 
beglnframe(wordlevel), 
refine funotion(expframe, 'sestantive'), 
refine_concept(expframe, kind("person"\]), 
refine concept(expframe, valee("female, child or maiden")), 
choose alt 
((alt(frame(minus(1),function(equal(,article,))), 
invoke(articlelncorporation\]), 
alt(frame(minus(1),functlon\[equal('adjeetive,)) 
invoke(adjective_incorporation)), 
else(invoke(so_incorporatlon))\]\]. 
apple :- a0aloqoos to the code for girl. 
adJective lncorporation :- 
incorporate(testframe), 
choose_alt 
(\[alt(frame(minus(1),function(equal('article,))), 
Invoke(artlcleincorporation)), 
else(i~Ivoke(noincorporation)) \]). 
articleincorporatlon :- 
incorporate(testframe), 
begin_frame(constltuentlevel\[, 
reflneconcept(expframe, kind("unused")), 
refine coecept(expframe, value("unused")). 
no_incorporation :- 
begin frame(constituent level\[, 
refine concept(expframe, klnd("unused"\] 
refine_concept(expfra~e, value("unused" 
eats :- begin_frame(constituent level), 
refine_funetion(expframe, 'action'), 
reflneconcept(expframe, klnd("ingest")), 
refine concept(expframe, value("ingest_food"\]\[, 
choose_alt 
(\[alt(frame(plus(3),concept(view('eatable'))), 
invoke(eateomething)), 
else( ..................... )) \]). 
145 
eatsomething :~ 
refine_function(testframe, 'object'), 
incorporate(testframe), 
choose alt 
(\[alt(frame(minus(1),concept(view('person'))), 
invoke(someoneeatssomething)), 
else( . . . . . . . . . . . . . . . . . . . . .  )) \]). 
someoneeatssomething :- 
refine function(testframe, "agent'), 
incorporate(testframe), 
begin frame(sentence_level), 
show soluhion. 
4. A Para l le l  Imp lementat ion  
In the last sect ion of this paper  we 
wil l  have a c loser look at how all the 
aspects  of PEP d iscussed so far have been 
implemented in a logic programming language. 
For  our implementat ion  we have used Logix, a 
Flat Concurrent  Pro log environment (Si lverman 
et al 1986). 
4.1 Genera l  Mode l  Organ izat ion  
The prototype rea l izat ion of OUr model  
a l lowing for correct analys is  of very s imple 
sentences (such as "The man eats", "A man 
eats", "Man eats") consists  of an expert 
language (EL) to be used by the l inguist  when 
wr i t ing  his experts, a precompi ler  that 
t rans forms the experts  to FCP code and the 
.... Logix FCP compi ler /emulator ,  our programming 
environment.  The l inguist  is of fered the EL, 
which only conta ins  pred icates  at a high 
level of abstrac?ion.  He may further tune 
the expert  levels we d iscussed ear l ier  and 
the funct ion at t r ibutes  he w i l l  be using at 
each level to his own needs. He is only 
a l lowed to use the EL pred icates  accord ing to 
his own spec i f icat ion of levels and funct ion 
attr ibutes.  The EL is then precompi led  to 
FCP. The main  reason for the approach of 
p recompi l ing  is that we have to use 
f lat ten ing techn iques  on the predicates.  
These techniques are the domain of computer  
sc ient is ts  and we do not want to bother  the 
l inguist  wi th  them. (Precompil ing also 
offers important  addi t ional  advantages such 
as syntax checking, checking of potent ia l  
deadlock, etc.; these features are sti l l  
under  development) .  
4.2 Data -s t ructures :  f rame in terconnect ion  
and  b lackboard  in format ion  
The lex ica l -morpho log ica l  ana lyzer  
schedules and invokes the experts  
cor responding to the e lementary  lexical  units  
and outputs a blackboard,  i.e. a matr ix  with 
slots whose columns cor respond to those units  
and whose rows cor respond to a level. Each 
expert  has one expert  frame assoc iated with 
it; this expert  frame fi l ls one slot of the 
blackboard.  In the beg inn ing of the analys is  
process  al l  f rames and the b lackboard  conta in 
un ins tant ia ted  slots. Experts  gradual ly  
146 
instant iate  the slots. Referr ing to another  
expert 's  expert  frame requires walk ing to it 
over the blackboard,  The walk is def ined in 
a unique way. Al l  s lots on the path should 
be instant iated,  otherwise the walk  suspends 
and waits  for the instant iat ion.  This is 
e legant ly  impiemented us ing the read-only  
un i f i cat ion  of the para l le l  Pro log versions.  
Slots that wi l l  never be of any use any more, 
are ins tant ia ted  to dummy constants  in order 
not to indef in i te ly  b lock  suspended walks. 
5. Conc lus ions  and  fur thez  res~aEch 
In this  paper  we have presented  a further 
deve lopment  of the procedura l  v iew of natural  
language analys is  (NLU) as proposed by 
Smal l 's  Word Expert  Parser. The Para l le l  
Expert  Parser  tr ies to present  a t ru ly  
d is t r ibuted  and para l le l  model  of NLU wi th  
c lear ly  de f ined  experts on d i f ferent  levels, 
h ie rarch ica l ly  conce ived expert  frames and 
r ig id ly  rest r ic ted  communicat ion protocols.  
Bes ides po l i sh ing  the implementat ion and 
wr i t ing / tes t ing  more complex experts, we also 
intend to look further into the necessary  
model  of knowledge (concept) representat ion 
that has to con~lete  our f ramework and how it 
can be tuned to PEP's needs. We hope that our 
attempt at rea l iz ing para l le l i sm in the 
domain of NLU wi l l  enhance our overal l  
unders tand ing  of the fasc inat ing but  as yet 
st i l l  poor ly  unders tood domain of para l le l  
computing. 
REFERENCES 
ADRIAENS,  G. (1986a) - Word Expert 
Pars ing Rev ised  and App l ied  to Dutch. In 
Proceedings  of the 7th ECAI (Brighton, UK), 
Vo lume I, 222-235. 
ADRIAENS,  G. (1986b) - Process 
L inguist ics:  The Theory and Pract ice  of a 
Cogn i t ive -Sc ient i f i c  Approach to Natura l  
Language Understanding.  Phd. thesis, Depts of 
L inguist ics  and Computer  Science, Un ivers i ty  
of Leuven, Belgium. 
CODISH,  M. & SHAPIRO,  E. (1986) - 
ComPi l ing  OR-para l le l i sm into 
AND-para l le l i sm.  Technica l  Report  CS85-18, 
Department  of App l ied  Mathematics.  The 
Weizmann Inst i tute of Science, Israel. 
COTTRELL ,  G.W. (1985) - A 
Connect ion is t  Approach to Word  Sense 
Disambiguat ion.  Un ivers i ty  of Rochester  
Computer  Science Phd (TR-154) . Rochester,  
New York. 
COTTRELL ,  G.W. & S.L.  SMALL  (1983) - 
A Connect ion is t  Scheme for Mode l l ing  Word  
Sense Disambiguat ion.  In "Cognit ion and 
Bra in  Theory"  6 (i), 89-120. 
DL~rO8, M. (1987) - The Para l le l  Exper t  
Parser. Rea l i za t ion  of a Para l le l  and 
Dis t r ibuted  System for  Natura l  Language 
Ana lys is  In Logic Programming Languages .  
Engineer 's  Thesis, Department  of Computer  
Science, Un ivers i ty  of Leuven, Be lg ian (in 
Dutch). 
- Connect ionist  Models and Their  Properties. 
In Cogni t ive Science" 6, 205-254. 
HAHN,  U.  (1986} - A General ized Word 
Expert  Model  of Lexica l ly  Distr i -  buted Text 
Parsing. In  Proceedings of the 7th ECAI 
(Brighton, UK), Vo lume I, 203-211. 
HILL:?S, D. (1986) - The Connect ion 
Machine. MIT Press, Cambridge Mass. 
HZRR~/&WA, H.  (1983)  - Chart Pars ing' in  
Concurrent  Prolog. Technical  Report of the 
ICOT Research Center (TR-008). Inst i tute for 
New Generat ion Computer  Technology, Tokyo. 
HXRSTe G. (1983)  ~ A Foundat ion for 
Semantic Interpretation. In Proceedings of 
the 21st ACL (Cambridge, Mass), 64-73. 
KOWAL~X, J.S. (ed) (1988) - Paral le l  
Computat ion and Computers for Art i f ic ia l  
Intel l igence. Kluwer, Dordrecht The  
Nether lands.  
MATSO~K)TO,  Y .  (1987)  - A Paral le l  
Pars ing System for Natural  Language Analysis.  
In "New Generat ion  Computing" 5 (1987), 
63-78. 
McCLK LLAND,  J. & R~LHART D. E. 
(1986) - Paral le l  D ist r ibuted Processing. 
MIT Press, Cambridge, Mass. 
POLLACK,  J. & D. WALTZ (1985) - 
Mass ive ly  Paral le l  Parsing: A Strongly 
Interact ive Model of Natural  Language 
Interpretat ion.  In 
Cognit ive Science" 9, 51-74. 
SXL~ItMAN, W. et al (1986) - The 
Logix System User Manual  - Vers ion 1.21. 
Technical  Report CS-21  , Department of 
Computer  Science. The Weizmann Inst itute of 
Science, )~ehovot 76100, Israel. 
SHAPIRO, E. (1986) - Concurrent Prolog: 
A Progress Report. Fundamentals  of 
Art i f ic ia l  Intel l igence, W. Bibel & Ph. 
Jorrand. Lecture Notes in Computer  Science, 
Springer--Verlag, Berlin. 
SMALL~ S.L .  (1980)  - Word Expert 
Parsing: a Theory of Distr ibuted Word-Based 
Natural  Language Unders tand ing .  Computer  
Sc ienceTechn ica l  Report  Series. Univers i ty  
of Mary land Phd. 
VANLE~,  K. .(1984) - A Cr i t ique of the 
Connect ionlst  Hypothesis  that Recognit ion 
Uses Templates, and not Rules. In 
Proceedings of the 6th Annual  Conference of 
the Cognlt ive Science Society (Boulder, 
Colorado)~ 74-80. 
147 
