Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational
Natural Language Learning, pp. 506?513, Prague, June 2007. c?2007 Association for Computational Linguistics
Methods to integrate a language model with semantic  
information for a word prediction component 
Tonio Wandmacher 
Laboratoire d?Informatique (LI) 
Universit? Fran?ois Rabelais de Tours 
3 place Jean-Jaur?s, 41000 Blois, France 
tonio.wandmacher@ 
univ-tours.fr 
Jean-Yves Antoine 
Laboratoire d?Informatique (LI) 
Universit? Fran?ois Rabelais de Tours 
3 place Jean-Jaur?s, 41000 Blois, France 
jean-yves.antoine@ 
univ-tours.fr 
 
Abstract 
Most current word prediction systems make 
use of n-gram language models (LM) to es-
timate the probability of the following word 
in a phrase. In the past years there have 
been many attempts to enrich such lan-
guage models with further syntactic or se-
mantic information. We want to explore the 
predictive powers of Latent Semantic 
Analysis (LSA), a method that has been 
shown to provide reliable information on 
long-distance semantic dependencies be-
tween words in a context. We present and 
evaluate here several methods that integrate 
LSA-based information with a standard 
language model: a semantic cache, partial 
reranking, and different forms of interpola-
tion. We found that all methods show sig-
nificant improvements, compared to the 4-
gram baseline, and most of them to a sim-
ple cache model as well. 
1 Introduction: NLP for AAC systems 
Augmented and Alternative Communication 
(AAC) is a field of research which concerns natural 
language processing as well as human-machine 
interaction, and which aims at restoring the com-
municative abilities of disabled people with severe 
speech and motion impairments. These people can 
be for instance cerebrally and physically handi-
capped persons or they suffer from a locked-in 
syndrome due to a cerebral apoplexy. Whatever the 
disease or impairment considered, oral communica-
tion is impossible for these persons who have in 
addition serious difficulties to control physically 
their environment. In particular, they are not able to 
use standard input devices of a computer. Most of 
the time, they can only handle a single switch de-
vice. As a result, communicating with an AAC sys-
tem consists of typing messages by means of a vir-
tual table of symbols (words, letters or icons) 
where the user successively selects the desired 
items. 
Basically, an AAC system, such as FASTY 
(Trost et al 2005) or SIBYLLE (Schadle et al 2004), 
consists of four components. At first, one finds a 
physical input interface connected to the computer. 
This device is adapted to the motion capacities of 
the user. When the latter must be restricted to a 
single switch (eye glimpse or breath detector, for 
instance), the control of the environment is reduced 
to a mere Yes/No command.  
Secondly, a virtual keyboard is displayed on 
screen. It allows the user to select successively the 
symbols that compose the intended message. In 
SIBYLLE, key selection is achieved by pointing let-
ters through a linear scan procedure: a cursor suc-
cessively highlights each key of the keyboard.  
The last two components are a text editor (to 
write e-mails or other documents) and a speech 
synthesis module, which is used in case of spoken 
communication. The latest version of SIBYLLE 
works for French and German, and it is usable with 
any Windows? application (text editor, web 
browser, mailer...), which means that the use of a 
specific editor is no longer necessary.  
The main weakness of AAC systems results from 
the slowness of message composition. On average, 
disabled people cannot type more than 1 to 5 words 
per minute; moreover, this task is very tiring. The 
use of NLP techniques to improve AAC systems is 
therefore of first importance. 
 
506
  
Figure 1: User interface of the SIBYLLE AAC system  
 
 
Two complementary approaches are possible to 
speed up communication. The first one aims at 
minimizing the duration of each item selection. 
Considering a linear scan procedure, one could for 
instance dynamically reorganize the keyboard in 
order to present the most probable symbols at first. 
The second strategy tries to minimize the number 
of keystrokes to be made. Here, the system tries to 
predict the words which are likely to occur just af-
ter those already typed. The predicted word is then 
either directly displayed after the end of the in-
serted text (a method referred to as ?word comple-
tion?, cf. Boissi?re and Dours, 1996), or a list of N-
best (typically 3 to 7) predictions is provided on the 
virtual keyboard. When one of these predictions 
corresponds to the intended word, it can be selected 
by the user. As can be seen in figure 1, the interface 
of the SIBYLLE system presents such a list of most 
probable words to the user. 
Several approaches can be used to carry out 
word prediction. Most of the commercial AAC sys-
tems make only use of a simple lexicon: in this ap-
proach, the context is not considered. 
On the other hand, stochastic language models 
can provide a list of word suggestions, depending 
on the n-1 (typically n = 3 or 4) last inserted words. 
It is obvious that such a model cannot take into ac-
count long-distance dependencies. There have been 
attempts to integrate part-of-speech information 
(Fazly and Hirst, 2003) or more complex syntactic 
models (Schadle et al 2004) to achieve a better 
prediction. In this paper, we will nevertheless limit 
our study to a standard 4-gram model as a baseline 
to make our results comparable. Our main aim is 
here to investigate the use of long-distance seman-
tic dependencies to dynamically adapt the predic-
tion to the current semantic context of communica-
tion. Similar work has been done by Li and Hirst 
(2005) and Matiasek and Baroni (2003), who ex-
ploit Pointwise Mutual Information (PMI; Church 
and Hanks, 1989). Trnka et al (2005) dynamically 
interpolate a high number of topic-oriented models 
in order to adapt their predictions to the current 
topic of the text or conversation. 
Classically, word predictors are evaluated by an 
objective metric called Keystroke Saving Rate 
(ksr): 
1001 ????
?
???
?
?=
a
p
n k
k
ksr  (1) 
 
with kp, ka being the number of keystrokes 
needed on the input device when typing a message 
with (kp) and without prediction (ka = number of 
characters in the text that has been entered, n = 
length of the prediction list, usually n = 5). As 
507
Trost et al (2005) and Trnka et al (2005), we as-
sume that one additional keystroke is required for 
the selection of a word from the list and that a 
space is automatically inserted afterwards. Note 
also that words, which have already occurred in the 
list, will not reappear after the next character has 
been inserted.  
The perplexity measure, which is frequently 
used to assess statistical language models, proved 
to be less accurate in this context. We still present 
perplexities as well in order to provide comparative 
results. 
2 Language modeling and semantics 
2.1 Statistical Language Models 
For about 10 to 15 years statistical language model-
ing has had a remarkable success in various NLP 
domains, for instance in speech recognition, ma-
chine translation, Part-of-Speech tagging, but also 
in word prediction systems. N-gram based lan-
guage models (LM) estimate the probability of oc-
currence for a word, given a string of n-1 preceding 
words. However, computers have only recently 
become powerful enough to estimate probabilities 
on a reasonable  amount of training data. More-
over, the larger n gets, the more important the prob-
lem of combinatorial explosion for the probability 
estimation becomes. A reasonable trade-off be-
tween performance and number of estimated events 
seems therefore to be an n of 3 to 5, including so-
phisticated techniques in order to estimate the 
probability of unseen events (smoothing methods). 
Whereas n-gram-like language models are al-
ready performing rather well in many applications, 
their capacities are also very limited in that they 
cannot exploit any deeper linguistic structure. 
Long-distance syntactic relationships are neglected 
as well as semantic or thematic constraints. 
In the past 15 years many attempts have been 
made to enrich language models with more com-
plex syntactic and semantic models, with varying 
success (cf. (Rosenfeld, 1996), (Goodman, 2002) 
or in a word prediction task: (Fazly and Hirst, 
2003), (Schadle, 2004), (Li and Hirst, 2005)). We 
want to explore here an approach based on Latent 
Semantic Analysis (Deerwester et al 1990). 
2.2 Latent Semantic Analysis 
Several works have suggested the use of Latent 
Semantic Analysis (LSA) in order to integrate se-
mantic similarity to a language model (cf. Belle-
garda, 1997; Coccaro and Jurafsky, 1998). LSA 
models semantic similarity based on co-occurrence 
distributions of words, and it has shown to be help-
ful in a variety of NLP tasks, but also in the domain 
of cognitive modeling (Landauer et al 1997). 
LSA is able to relate coherent contexts to spe-
cific content words, and it is good at predicting the 
occurrence of a content word in the presence of 
other thematically related terms. However, since it 
does not take word order into account (?bag-of-
words? model) it is very poor at predicting their 
actual position within the sentence, and it is com-
pletely useless for the prediction of function words. 
Therefore, some attempts have been made to inte-
grate the information coming from an LSA-based 
model with standard language models of the n-
gram type.  
In the LSA model (Deerwester et al 1990) a 
word wi is represented as a high-dimensional vec-
tor, derived by Singular Value Decomposition 
(SVD) from a term ? document (or a term ? term) 
co-occurrence matrix of a training corpus. In this 
framework, a context or history h (= w1, ... , wm) 
can be represented by the sum of the (already nor-
malized) vectors corresponding to the words it con-
tains (Landauer et al 1997):  
 
?
=
=
m
i
iwh
1
rr
 (2) 
 
This vector reflects the meaning of the preceding 
(already typed) section, and it has the same dimen-
sionality as the term vectors. It can thus be com-
pared to the term vectors by well-known similarity 
measures (scalar product, cosine).  
2.3 Transforming LSA similarities into prob-
abilities 
We make the assumption that an utterance or a 
text to be entered is usually semantically cohesive. 
We then expect all word vectors to be close to the 
current context vector, whose corresponding words 
belong to the semantic field of the context. This 
forms the basis for a simple probabilistic model of 
LSA: After calculating the cosine similarity for 
each word vector iw
r
 with the vector h
r
 of the cur-
rent context, we could use the normalized similari-
ties as probability values. This probability distribu-
tion however is usually rather flat (i.e. the dynamic 
508
range is low). For this reason a contrasting (or tem-
perature) factor ? is normally applied (cf. Coccaro 
and Jurafsky, 1998), which raises the cosine to 
some power (? is normally between 3 and 8). After 
normalization we obtain a probability distribution 
which can be used for prediction purposes. It is 
calculated as follows: 
 
( )
( )? ?
?
=
k
?
k
?
i
iLSA
hhw
hhwhwP
)(cos),cos(
)(cos),cos()(
min
min rrr
rrr
  (3) 
 
wi is a word in the vocabulary, h is the current con-
text (history) 
iw
r
and h
r
are their corresponding vec-
tors in the LSA space; cosmin( h
r
) returns the lowest 
cosine value measured for h
r
). The denominator 
then normalizes each similarity value to ensure that 
? =nk kLSA hwP 1),( . 
Let us illustrate the capacities of this model by 
giving a short example from the French version of 
our own LSA predictor: 
 
Context: ?Mon p?re ?tait professeur en math?matiques 
et je pense que ? 
 (?My dad has been a professor in mathemat-
ics and I think that ?) 
 
Rank Word P 
1. professeur (?professor?) 0.0117 
2. math?matiques (?mathematics?) 0.0109 
3. enseign? (participle of ?taught?) 0.0083 
4. enseignait (?taught?) 0.0053 
5. mathematicien (?mathematician?) 0.0049 
6. p?re (?father?) 0.0046 
7. math?matique (?mathematics?) 0.0045 
8. grand-p?re (?grand-father?) 0.0043 
9. sciences (?sciences?) 0.0036 
10. enseignant (?teacher?) 0.0032 
Example 1: Most probable words returned by the 
LSA model for the given context. 
 
As can be seen in example 1, all ten predicted 
words are semantically related to the context, they 
should therefore be given a high probability of oc-
currence. However, this example also shows the 
drawbacks of the LSA model: it totally neglects the 
presence of function words as well as the syntactic 
structure of the current phrase. We therefore need 
to find an appropriate way to integrate the informa-
tion coming from a standard n-gram model and the 
LSA approach. 
2.4 Density as a confidence measure 
Measuring relation quality in an LSA space, 
Wandmacher (2005) pointed out that the reliability 
of LSA relations varies strongly between terms. He 
also showed that the entropy of a term does not 
correlate with relation quality (i.e. number of se-
mantically related terms in an LSA-generated term 
cluster), but he found a medium correlation (Pear-
son coeff. = 0.56) between the number of semanti-
cally related terms and the average cosine similar-
ity of the m nearest neighbors (density). The closer 
the nearest neighbors of a term vector are, the more 
probable it is to find semantically related terms for 
the given word. In turn, terms having a high density 
are more likely to be semantically related to a given 
context (i.e. their specificity is higher). 
We define the density of a term wi as follows: 
 
  ?
=
?=
m
j
ijiim wNNw
m
wD
1
))(,cos(1)( rr  (4) 
 
In the following we will use this measure (with 
m=100) as a confidence metric to estimate the reli-
ability of a word being predicted by the LSA com-
ponent, since it showed to give slightly better re-
sults in our experiments than the entropy measure.  
3 Integrating semantic information 
In the following we present several different meth-
ods to integrate semantic information as it is pro-
vided by an LSA model into a standard LM. 
3.1 Semantic cache model 
Cache (or recency promotion) models have shown 
to bring slight but constant gains in language mod-
eling (Kuhn and De Mori, 1990). The underlying 
idea is that words that have already occurred in a 
text are more likely to occur another time. There-
fore their probability is raised by a constant or ex-
ponentially decaying factor, depending on the posi-
tion of the element in the cache. The idea of a de-
caying cache function is that the probability of re-
occurrence depends on the cosine similarity of the 
word in the cache and the word to be predicted. 
The highest probability of reoccurrence is usually 
after 15 to 20 words. 
Similar to Clarkson and Robinson (1997), we im-
plemented an exponentially decaying cache of 
length l (usually between 100 and 1000), using the 
509
following decay function for a word wi and its posi-
tion p in the cache. 
 
2)(5,0
),( ??
???
? ??
=
?
?p
id epwf  (5) 
 
? = ?/3 if p < ? and  ? = l/3 if p ? ?. The func-
tion returns 0 if wi is not in the cache, and it is 1 if 
p = ?. A typical graph for (5) can be seen in figure 
(2). 
 
 
Figure 2: Decay function with ?=20 and l=300. 
 
We extend this model by calculating for each ele-
ment having occurred in the context its m nearest 
LSA neighbors ( ),( ?wNN
occm
r
, using cosine simi-
larity), if their cosine lies above a threshold ?, and 
add them to the cache as well, right after the word 
that has occurred in the text (?Bring your friends?-
strategy). The size of the cache is adapted accord-
ingly (for ?, ? and l), depending on the number of 
neighbors added. This results in the following 
cache function: 
 
),(),()(
1 cos
pwfwwf?wP id
l
i
i
occicache ? ??=    (6) 
 
with l = size of the cache. ? is a constant  con-
trolling the influence of the component (usually ? ? 
0.1/l); wiocc is a word that has already recently oc-
curred in the context and is therefore added as a 
standard cache element, whereas wi is a nearest 
neighbor to wiocc. fcos(wiocc, wi) returns the cosine 
similarity between i
occ
w
r
 and iw
r
, with cos( i
occ
w
r
, iw
r ) 
> ? (Rem: wi with cos( ioccw
r
, iw
r ) ? ? have not been 
added to the cache).  Since cos( iw
r
, iw
r )=1, terms 
having actually occurred before will be given full 
weight, whereas all wi being only nearest LSA 
neighbors to wiocc will receive a weight correspond-
ing to their cosine similarity with wiocc , which is 
less than 1 (but larger than ?). 
fd(wi,p) is the decay factor for the current posi-
tion p of wi in the cache, calculated as shown in 
equation (5).  
3.2 Partial reranking 
The underlying idea of partial reranking is to re-
gard only the best n candidates from the basic lan-
guage model for the semantic model in order to 
prevent the LSA model from making totally im-
plausible (i.e. improbable) predictions. Words be-
ing improbable for a given context will be disre-
garded as well as words that do not occur in the 
semantic model (e.g. function words), because LSA 
is not able to give correct estimates for this group 
of words (here the base probability remains un-
changed). 
For the best n candidates their semantic probability 
is calculated and each of these words is assigned an 
additional value, after a fraction of its base prob-
ability has been subtracted (jackpot strategy). 
For a given context h we calculate the ordered set 
BESTn(h) = <w1, ? , wn>, so that P(w1|h) ? 
P(w2|h) ???P(wn|h) 
For each wi in BESTn(h) we then calculate its 
reranking probability as follows: 
 
)),(()(),cos()( iniiiRR whBestIwDhw?wP ???=
rr
 (7) 
 
? is a weighting constant controlling the overall 
influence of the reranking process, cos( iw
r
, iw
r ) re-
turns the cosine of the word?s vector and the cur-
rent context vector, D(wi) gives the confidence 
measure of wi and I is an indicator function being 
1, iff wi ?BEST(h), and 0 otherwise.  
3.3 Standard interpolation 
Interpolation is the standard way to integrate in-
formation from heterogeneous resources. While for 
a linear combination we simply add the weighted 
probabilities of two (or more) models, geometric 
interpolation multiplies the probabilities, which are 
weighted by an exponential coefficient (0??1?1): 
 
Linear Interpolation (LI): 
 
)()1()()(' 11 isibi wP?wP?wP ??+?=    (8) 
 
510
Geometric Interpolation (GI): 
 
?
=
?
?
?
?
= n
j
?
js
?
jb
?
is
?
ib
i
wPwP
wPwP
wP
1
)11(1
)11(1
)()(
)()()('     (9) 
 
The main difference between the two methods is 
that the latter takes the agreement of two models 
into account. Only if each of the single models as-
signs a high probability to a given event will the 
combined probability be assigned a high value. If 
one of the models assigns a high probability and 
the other does not the resulting probability will be 
lower. 
3.4 Confidence-weighted interpolation 
Whereas in standard settings the coefficients are 
stable for all probabilities, some approaches use 
confidence-weighted coefficients that are adapted 
for each probability. In order to integrate n-gram 
and LSA probabilities, Coccaro and Jurafsky 
(1998) proposed an entropy-related confidence 
measure for the LSA component, based on the ob-
servation that words that occur in many different 
contexts (i.e. have a high entropy), cannot well be 
predicted by LSA. We use here a density-based 
measure (cf. section 2.2), because we found it more 
reliable than entropy in preliminary tests. For inter-
polation purposes we calculate the coefficient of 
the LSA component as follows: 
 
)( ii wD?? ?= , iff D(wi) > 0; 0 otherwise (10) 
 
with ? being a weighting constant to control the 
influence of the LSA predictor. For all experi-
ments, we set ? to 0.4 (i.e. 0 ? ?i ? 0.4), which 
proved to be optimal in pre-tests. 
4 Results 
We calculated our baseline n-gram model on a 44 
million word corpus from the French daily Le 
Monde (1998-1999). Using the SRI toolkit (Stol-
cke, 2002)1 we computed a 4-gram LM over a con-
trolled 141,000 word vocabulary, using modified 
Kneser-Ney discounting (Goodman, 2001), and we 
applied Stolcke pruning (Stolcke, 1998) to reduce 
the model to a manageable size (? = 10-7). 
                                                 
1
 SRI Toolkit: www.speech.sri.com. 
The LSA space was calculated on a 100 million 
word corpus from Le Monde (1996 ? 2002). Using 
the Infomap toolkit2, we generated a term ? term 
co-occurrence matrix for an 80,000 word vocabu-
lary (matrix size = 80,000 ? 3,000), stopwords 
were excluded. After several pre-tests, we set the 
size of the co-occurrence window to ?100. The ma-
trix was then reduced by singular value decomposi-
tion to 150 columns, so that each word in the vo-
cabulary was represented by a vector of 150 di-
mensions, which was normalized to speed up simi-
larity calculations (the scalar product of two nor-
malized vectors equals the cosine of their angle).  
Our test corpus consisted of 8 sections from the 
French newspaper Humanit?, (January 1999, from 
5,378 to 8,750 words each), summing up to 58,457 
words. We then calculated for each test set the key-
stroke saving rate based on a 5-word list (ksr5) and 
perplexity for the following settings3: 
1. 4-gram LM only (baseline) 
2. 4-gram + decaying cache (l = 400) 
3. 4-gram + LSA using linear interpolation 
with ?LSA = 0.11 (LI). 
4. 4-gram + LSA using geometric interpola-
tion, with ?LSA = 0.07 (GI). 
5. 4-gram + LSA using linear interpolation 
and (density-based) confidence weighting 
(CWLI). 
6. 4-gram + LSA using geometric interpola-
tion and (density-based) confidence 
weighting (CWGI). 
7. 4-gram + partial reranking (n = 1000, ? = 
0.001) 
8. 4-gram + decaying semantic cache  
(l = 4000; m = 10; ? = 0.4, ? = 0.0001)  
Figures 3 and 4 display the overall results in terms 
of ksr and perplexity.  
                                                 
2
 Infomap Project: http://infomap-nlp.sourceforge.net/ 
3
 All parameter settings presented here are based on results of 
extended empirical pre-tests. We used held-out development 
data sets that have randomly been chosen from the Humanit? 
corpus.(8k to 10k words each). The parameters being pre-
sented here were optimal for our test sets. For reasons of sim-
plicity we did not use automatic optimization techniques such 
as the EM algorithm (cf. Jelinek, 1990). 
 
511
 Figure 3: Results (ksr5) for all methods tested. 
 
 
 
Figure 4: Results (perplexity) for all methods 
tested. 
 
Using the results of our 8 samples, we performed 
paired t tests for every method with the baseline as 
well as with the cache model. All gains for ksr 
turned out to be highly significant (sig. level < 
0.001), and apart from the results for CWLI, all 
perplexity reductions were significant as well (sig. 
level < 0.007), with respect to the cache results. We 
can therefore conclude that, with exception of 
CWLI, all methods tested have a beneficial effect, 
even when compared to a simple cache model. The 
highest gain in ksr (with respect to the baseline) 
was obtained for the confidence-weighted geo-
metric interpolation method (CWGI; +1.05%), the 
highest perplexity reduction was measured for GI 
as well as for CWGI (-9.3% for both). All other 
methods (apart from IWLI) gave rather similar re-
sults (+0.6 to +0.8% in ksr, and -6.8% to -7.7% in 
perplexity). 
We also calculated for all samples the correla-
tion between ksr and perplexity. We measured a 
Pearson coefficient of -0.683 (Sig. level < 0.0001).  
At first glance, these results may not seem over-
whelming, but we have to take into account that 
our ksr baseline of 57.9% is already rather high, 
and at such a level, additional gains become hard to 
achieve (cf. Lesher et al 2002). 
The fact that CWLI performed worse than even 
simple LI was not expected, but it can be explained 
by an inherent property of linear interpolation: If 
one of the models to be interpolated overestimates 
the probability for a word, the other cannot com-
pensate for it (even if it gives correct estimates), 
and the resulting probability will be too high. In 
our case, this happens when a word receives a high 
confidence value; its probability will then be over-
estimated by the LSA component. 
5 Conclusion and further work 
Adapting a statistical language model with seman-
tic information, stemming from a distributional 
analysis like LSA, has shown to be a non-trivial 
problem. Considering the task of word prediction 
in an AAC system, we tested different methods to 
integrate an n-gram LM with LSA: A semantic 
cache model, a partial reranking approach, and 
some variants of interpolation. 
We evaluated the methods using two different 
measures, the keystroke saving rate (ksr) and per-
plexity, and we found significant gains for all 
methods incorporating LSA information, compared 
to the baseline. In terms of ksr the most successful 
method was confidence-weighted geometric inter-
polation (CWGI; +1.05% in ksr); for perplexity, 
the greatest reduction was obtained for standard as 
well as for confidence-weighted geometric interpo-
lation (-9.3% for both). Partial reranking and the 
semantic cache gave very similar results, despite 
their rather different underlying approach.  
We could not provide here a comparison with 
other models that make use of distributional infor-
mation, like the trigger approach by Rosenfeld 
(1996), Matiasek and Baroni (2003) or the model 
presented by Li and Hirst (2005), based on Point-
wise Mutual Information (PMI). A comparison of 
these similarities with LSA remains to be done.  
Finally, an AAC system has not only the func-
tion of simple text entering but also of providing 
cognitive support to its user, whose communicative 
abilities might be totally depending on it. There-
fore, she or he might feel a strong improvement of 
the system, if it can provide semantically plausible 
predictions, even though the actual gain in ksr 
might be modest or even slightly decreasing. For 
this reason we will perform an extended qualitative 
512
analysis of the presented methods with persons 
who use our AAC system SIBYLLE.  This is one of 
the main aims of the recently started ESAC_IMC 
project. It is conducted at the Functional Reeduca-
tion and Rehabilitation Centre of Kerpape, Brit-
tany, where SIBYLLE is already used by 20 children 
suffering from traumatisms of the motor cortex. 
They appreciate the system not only for communi-
cation but also for language learning purposes. 
Moreover, we intend to make the word predictor 
of SIBYLLE publicly available (AFM Voltaire pro-
ject) in the not-too-distant future.  
Acknowledgements 
This research is partially founded by the UFA 
(Universit? Franco-Allemande) and the French 
foundations APRETREIMC (ESAC_IMC project) 
and AFM (VOLTAIRE project). We also want to 
thank the developers of the SRI and the Infomap 
toolkits for making their programs available. 
References 
Bellegarda, J. (1997): ?A Latent Semantic Analysis 
Framework for Large-Span Language Modeling?, 
Proceedings of the Eurospeech 97, Rhodes, Greece. 
Boissi?re Ph. and Dours D. (1996).  ?VITIPI : Versatile 
interpretation of text input by persons with impair-
ments?. Proceedings ICCHP'1996. Linz, Austria. 
Church, K. and Hanks, P. (1989). ?Word association 
norms, mutual information and lexicography?. Pro-
ceedings of ACL, pp. 76-83. 
Clarkson, P. R. and Robinson, A.J. (1997). ?Language 
Model Adaptation using Mixtures and an Exponen-
tially Decaying Cache?, in Proc. of the IEEE 
ICASSP-97, Munich. 
Coccaro, N. and Jurafsky, D. (1998). ?Towards better 
integration of semantic predictors in statistical lan-
guage modeling?, Proc. of the ICSLP-98, Sydney. 
Deerwester, S. C., Dumais, S., Landauer, T., Furnas, G. 
and Harshman, R. (1990). ?Indexing by Latent Se-
mantic Analysis?, JASIS  41(6), pp. 391-407. 
Fazly, A. and Hirst, G. (2003). ?Testing the efficacy of 
part-of-speech information in word completion?, 
Proceedings of the Workshop on Language Modeling 
for Text Entry Methods on EACL, Budapest. 
Goodman, J. (2001): ?A Bit of Progress in Language 
Modeling?, Extended Version Microsoft Research 
Technical Report MSR-TR-2001-72. 
Jelinek, F. (1990): ?Self-organized Language Models for 
Speech Recognition?, In: A. Waibel and K.-F. Lee 
(eds.), Readings in Speech Recognition, Morgan 
Kaufman Publishers, pp. 450-506. 
Kuhn, R. and De Mori, R. (1990). ?A Cache-Based 
Natural Language Model for Speech Reproduction?, 
IEEE Transactions on Pattern Analysis and Machine 
Intelligence, 12 (6), pp. 570-583. 
Landauer, T. K., Laham, D., Rehder, B. and Schreiner, 
M. E. (1997). ?How well can passage meaning be de-
rived without using word order? A comparison of 
LSA and humans?, Proceedings of the 19th annual 
meeting of the Cognitive Science Society, pp. 412-
417, Erlbaum Mawhwah, NJ. 
Lesher, G. W., Moulton, B. J, Higginbotham, D.J. and 
Alsofrom, B. (2002). ?Limits of human word predic-
tion performance?, Proceedings of the CSUN 2002. 
Li, J., Hirst, G. (2005). ?Semantic knowledge in a word 
completion task?, Proc. of the 7th Int. ACM Confer-
ence on Computers and Accessibility, Baltimore. 
Matiasek, H. and Baroni, M. (2003). ?Exploiting long 
distance collocational relations in predictive typing?, 
Proceedings of the EACL-03 Workshop on Language 
Modeling for Text Entry Methods, Budapest. 
Rosenfeld, R. (1996). ?A maximum entropy approach to 
adaptive statistical language modelling?, Computer 
Speech and Language, 10 (1), pp. 187-228. 
Schadle I., Antoine J.-Y., Le P?v?dic B., Poirier F. 
(2004).  ?Sibyl - AAC system using NLP tech-
niques?. Proc. ICCHP?2004, Paris, France. LNCS 
3118, Springer Verlag. 
Stolcke, A. (1998): ?Entropy-based pruning of backoff 
language models?. Proc.s of the DARPA Broadcast 
News Transcription and Understanding Workshop. 
Stolcke, A. (2002): ?SRILM - An Extensible Language 
Modeling Toolkit?, in Proc. of the Intl. Conference 
on Spoken Language Processing, Denver, Colorado. 
Trnka, K., Yarrington, D., McCoy, K. F. and Penning-
ton, C. (2006): ?Topic Modeling in Fringe Word Pre-
diction for AAC?, In Proceedings of the 2006 Inter-
national Conference on Intelligent User Interfaces, 
pp. 276 ? 278, Sydney, Australia. 
Trost, H., Matiasek, J. and Baroni, M. (2005): ?The 
Language Component of the FASTY Text Prediction 
System?, Applied Artificial Intelligence, 19 (8), pp. 
743-781. 
Wandmacher, T. (2005): ?How semantic is Latent Se-
mantic Analysis??, in Proceedings of 
TALN/RECITAL 2005, Dourdan, France, 6-10 june. 
513
