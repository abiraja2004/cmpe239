TYPE-RAIS ING AND DIRECT IONAL ITY  IN  COMBINATORY GRAMMAR*  
Mark  S teedman 
Computer and Information Science, University of Pennsylvania 
200 South 33rd Street 
Philadelphia PA 19104-6389, USA 
(Interact: steedman@cis, upenn, edu) 
ABSTRACT 
The form of rules in ?ombinatory categorial grammars 
(CCG) is constrained by three principles, called "adja- 
cency", "consistency" and "inheritance". These principles 
have been claimed elsewhere to constrain the combinatory 
rules of composition and type raising in such a way as to 
make certain linguistic universals concerning word order 
under coordination follow immediately. The present paper 
shows that the three principles have a natural expression 
in a unification-based interpretation of CCG in which di- 
rectional information is an attribute of the arguments of 
functions grounded in string position. The universals can 
thereby be derived as consequences of elementary assump- 
tions. Some desirable results for grammars and parsers fol- 
low, concerning type-raising rules. 
PRELIMINARIES 
In Categorial Grammar (CG), elements like verbs are 
associated with a syntactic "category", which identi- 
fies their functional type. I shall use a notation in 
which the argument or domain category always ap- 
pears to the right of the slash, and the result or range 
category to the left. A forward slash / means that the 
argument in question must appear on the right, while 
a backward slash \ means it must appear on the left. 
(1) enjoys := (S \NP) /NP  
The category (S \NP) /NP  can be regarded as both 
a syntactic and a semantic object, in which symbols 
like S are abbreviations for graphs or terms including 
interpretations, as in the unification-based categorial 
grammars ofZeevat et al \[8\] and others (and cf. \[6\]). 
Such functions can combine with arguments of the 
appropriate type and position by rules of functional 
application, written as follows: 
(2) The Functional Application Rules: 
a. X /Y  Y =~ X (>) 
b. Y X \Y  :=~ X (<) 
Such rules are also both syntactic and semantic rules 
*Thanks to Michael Niv and Sm Shieber. Support from: NSF 
Grant CISE IIP CDA 88-22719, DARPA grant no. N0014-90J- 
1863, and ARO grant no. DAAL03-89-C0031. 
of combination in which X and Y are abbreviations 
for more complex objects which combine via unifi- 
cation. They allow context-free derivations like the 
following (the application of rules is indicated by in- 
dices >, < on the underlines: 
(3) Mary enjoys ~usicals 
m, (s \m' ) /~  \]w 
. . . . . . . . . . . . . . . .  > 
s \ lP  
. . . . . . . . . . . . .  < 
s 
The derivation can be assumed to build a composi- 
tional interpretation, (enjoy' musicals') mary', say. 
Coordination can be included in CG via the follow- 
ing rule, allowing constituents of like type to conjoin 
to yield a single constituent of the same type: 
(4) X conj X =~ X 
(5) I love and admire musicals 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  
. . . . . . . . . . . . . . . . . . . . . . . .  
( s \m' ) /m,  
The rest of the derivation is exactly as in (3). 
In order to allow coordination of contiguous trings 
that do not constitute constituents, CCG allows certain 
operations on functions related to Curry's combina- 
tots \[1\]. Functions may compose, as well as apply, 
under rules like the following: 
(6) Forward Composition: 
X /Y  Y /Z ~B X/Z  (>B)  
The rule corresponds to Curry's eombinator B, as 
the subscripted arrow indicates. It allows sentences 
like Mary admires, and may enjoy, musicals to be ac- 
cepted, via the functional composition of two verbs 
(indexed as >B), to yield a composite of the same 
category as a transitive verb. Crucially, composition 
also yields the appropriate interpretation for the com- 
posite verb may prefer in this sentence (the rest of the 
derivation is as in (3)): 
71 
(7) admires and may enjoy 
(S\NP)/NP conj (S\NP)/VP VP/NP 
. . . . . . . . . . . . . . .  >B 
(SkWP)Im, 
(s\~)/~P 
CCG also allows type-raising rules, related to the 
combinator T, which turn arguments into functions 
over functions-over-such-arguments. These rules al- 
low arguments to compose, and thereby lake part in 
coordinations like I dislike, and Mary enjoys, musi- 
cals. They too have an invariant compositional se- 
mantics which ensures that the result has an appro- 
priate interpretation. For example, the following rule 
allows such conjuncts to form as below (again, the 
remainder of the derivation is omitted): 
(8) Subject ~pe-raising: 
NP  : y ~T  S / (S \NP)  (> T) 
(9) I d i s l i ke  and Rax 'y  *" joys 
IP (S \ IP ) / IP  conj lP (S \ IP ) / |P  
. . . . . . . .  >T . . . . . . . .  >T 
Sl(S\lP) Sl(S\IP) 
. . . . . . . . . . . . . .  =--->s . . . . . . . . . . . . . . . . . .  >S 
SlIP SlIP 
sliP 
This apparatus has been applied to a wide variety of 
phenomena of long-range dependency and coordinate 
structure (cf. \[2\], \[5\], \[6\]). 1 For example, Dowty pro- 
posed to account for the notorious "non-constituent" 
coordination i (10) by adding two rules that are sim- 
ply the backward mitre-image versions of the com- 
position and type raising rules already given (they are 
indicated in the derivation by <B and <T). 2 This is a 
welcome result: not only do we capture aconstruction 
that has been resistant to other formalisms. We also 
satisfy a prediction of the theory, for the two back- 
ward rules arc clearly expected once we have chosen 
to introduce their mirror image originals. The ear- 
lier papers how that, provided type raising is limited 
to the two "order preserving" varieties exemplified in 
these examples, the above reduction is the only one 
permitted by the lexicon of English. A number of 
related cross-linguistic regularities in the dependency 
of gapping upon basic word order follow (\[2\], \[6\]). 
The construction also strongly suggests that all NPs  
(etc.) should be considered as type raised, preferably 
I One further class of rules, corresponding to the combinator 
S, has been proposed. This combinator is not discussed here, but 
all the present results transfer to tho6e rules as well. 
2This and other long examples have been "flmted" to later po- 
sitions in the text. 
in the lexicon, and that categories like NP should not 
reduce at all. However, this last proposal seems tc 
implies a puzzling extra ambiguity in the lexicon, and 
for the moment we will continue to view type-raising 
as a syntactic rule. 
The universal claim depends upon type-raising be- 
ing limited to the following schemata, which do not 
of themselves induce new constituent orders: 
(11) x =~T T/ i f \X) 
X :::}T T \ (T /X)  
If the following patterns (which allow constituent or- 
ders that are not otherwise permitted) were allowed, 
the regularity would be unexplained, and without fur- 
ther restrictions, grammars would collapse into free 
order: 
(12) X :::}T T/ (T /X)  
X ::~T T \ (T \X)  
But what are the principles that limit combinatory 
rules of grammar, to include (11) and exclude (12)? 
The earlier papers claim that all CCG rules must 
conform to three principles. The first is called the 
Principle of Adjacency \[5, pA05\], and says that rules 
may only apply to string-adjacent on-empty cate- 
gories. It amounts to the assumption that combina- 
tops will do the job. The second is called the Prin- 
ciple of Directional Consistency. Informally stated, it 
says that rules may not override the directionality on 
the "cancelling" Y category in the combination. For 
example, the following rule is excluded: 
(13) ? X \Y  Y => X 
The third is the Principle of Directional Inheritance, 
which says that the directionality of any argument in 
the result of a combinatory rule must be the same as 
the directionality on the corresponding argument(s) in 
the original functions. For example, the following 
composition rule is excluded: 
(14) * X /Y  Y /Z  => X\Z  
However, rules like the following are permitted: 
(15) Y/Z  X \Y  => X/Z  (<Bx)  
This rule (which is not a theorem in the Lambek cal- 
culus) is used in \[5\] to account for examples like 
I shall buy today and read tomorrow, the collected 
works of Proust, the crucial combination being the 
following: 
(16) . . .  read tomorxow . . .  
vP/m, vP\vP 
. . . . . . . . . . . .  <Bx 
VP/NP 
The principles of consistency and inheritance amount 
72 
to the simple statement that combinatory rules may 
not contradict he directionality specified in the lexi- 
con. But how is this observation to be formalised, 
and how does it bear on the type-raising rules? The 
next section answers these questions by proposing an 
interpretation, grounded in string positions, for the 
symbols / and \ in CCG. The notation will temporar- 
ily become rather heavy going, so it should be clearly 
understood that this is not a proposal for a new CCG 
notation. It is a semantics for the metagrammar of 
the old CCG notation. 
DIRECTIONALITY IN CCG 
The fact that directionality of arguments i inher- 
ited under combinatory rules, under the third of the 
principles, strongly suggests that it is a property of 
arguments hemselves, just like their eategorial type, 
NP  or whatever, as in the work of Zeevat et al 
\[8\]\[9\]. However, the feature in question will here 
be grounded in a different representation, with signif- 
icantly different consequences, as follows. The basic 
form of a combinatory ule under the principle of ad- 
jacency is a fl ~ ~,. However, this notation leaves 
the linear order of ot and fl implicit. We therefore 
temporarily expand the notation, replacing categories 
like NP by 4-tuples, of the form {e~, DPa, L~, Ra}, 
comprising: a) a type such as NP; b) a Distinguished 
Position, which we will come to in a minute; c) a Left- 
end position; and d) a Right-end position. The Prin- 
ciple of Adjacency finds expression in the fact that 
all legal combinatory ules must have the the form in 
(17), in which the right-end of ~ is the same as the 
left-end of r :  We will call the position P2, to which 
the two categories are adjacent, he juncture. 
The Distinguished Position of a category is simply 
the one of its two ends that coincides with the junc- 
ture when it is the "'cancelling" term Y. A rightward 
combining function, such as the transitive verb enjoy, 
specifies the distinguished position of its argument 
(here underlined for salience) as being that argument's 
left-end. So this category is written in full as in (18)a, 
using a non-directional s ash/. The notation in (a) is 
rather overwhelming. When positional features are of 
no immediate relevance in such categories, they will 
be suppressed. For example, when we are thinking of 
such a function as a function, rather than as an argu- 
ment, we will write it as in (18)b, where VP stands 
for {VP, DFVp, Lw,,  Rvp}, and the distinguished 
position of the verb is omitted. It is important to note 
that while the binding of the NP argument's Distin- 
guished Position to its left hand end L,p means that 
enjoy is a rightward function, the distinguished posi- 
tion is not bound to the right hand end of the verb, 
t~verb. It follows that the verb can potentially com- 
bine with an argument elsewhere, just so long as it is 
to the right. This property was crucial to the earlier 
analysis of heavy NP shift. Coupled with the parallel 
independence in the position of the result from the 
position of the verb, it is the point at which CCG 
parts company with the directional Lambek calculus, 
as we shall see below. 
In the expanded notation the rule of forward ap- 
plication is written as in (19). The fact that the dis- 
tinguisbed position must be one of the two ends of 
an argument category, coupled with the requirement 
of the principle of Adjacency, means that only the 
two order-preserving instances of functional applica- 
tion shown in (2) can exist, and only consistent cate- 
gories can unify with those rules. 
A combination under this rule proceeds as follows. 
Consider example (20), the VP enjoy musicals. The 
derivation continues as follows. First the positional 
variables of the categories are bound by the positions 
in which the words occur in the siring, as in (21), 
which in the first place we will represent explicitly, 
as numbered string positions,  Next the combinatory 
rule (19) applies, to unify the argument term of the 
function with the real argument, binding the remain- 
ing positional variables including the distinguished 
position, as in (22) and (23). At the point when the 
combinatory ule applies, the constraint implicit in the 
distinguished position must actually hold. That is, the 
distinguished position must be adjacent to the functor. 
Thus the Consistency property of combinatory ules 
follows from the principle of Adjacency, embodied in 
the fact that all such rules identify the distinguished 
position of the argument terms with the juncture P2, 
the point to which the two combinands are adjacent, 
as in the application example (19). 
The principle of Inheritance also follows directly 
from these assumptions. The fact that rules corre- 
spond to combinators like composition forces direc- 
tionality to be inherited, like any other property of an 
argument such as being an NP. It follows that only 
instances of the two very general rules of compo- 
sition shown in (24) are allowed, as a consequence 
of the three Principles. To conform to the principle 
of consistency, it is necessary that L~ and /~,  the 
ends of the cancelling category Y, be distinct posi- 
tions - that is, that Y not be coerced to the empty 
string. This condition is implicit in the Principle of 
Adjacency (see above), although in the notation of 
3 Declaritivising position like this may seem laborious, but it is 
a tactic familiar f om the DCG literature, from which we shall later 
borrow the elegant device of encoding such positions implicitly in 
difference-lists. 
73 
(1o) give a policeman a flower and 
(VP/liP)/tip lip ~ conj 
<T <T 
(~/m~)\C (vP/SP)/mD vPXC~/SP) 
- - - - - - "  . . . . . .  " - - - -  . . . . . . . . . .  " . . . . .  < e  
Vl'\(~/lw) 
a dog a bone  
~\(~lW) 
,iP 
liP liP 
. . . . . . . . . . . . . . . . . .  <T <T 
CVP/sP) \ (CVP/sP)/sP) ~\  (vv/sP) 
<B 
vp\ (VV lSi.) 
<&> 
(17) {a, DPa, Px,P~} {\]~,DP~,P2, s} ::~ {7, DP.y,P1,Pa} 
(18) a. enjoy :-- {{VP, DPvp, Lvp, Rvp}/{NP, L.p, Lnp, R.p}, DPverb, Leerb, R~erb} 
b. enjoy :-- {VP/{NP, Lnp, L.p, P~p}, Leerb, R~erb} 
(19) {{X, DP., PI, P3}/{Y, P2, P2, P3}, PI, P2} {Y, P2, P2, P3} :~ {X, DPz, PI, P31 
(20) 1 enjoy 2 musicals 3 
{VP/{NP, Larg, Larg,Rare},Llun,Rlu.} {NP, DPnp, Lnp,R.p} 
(21) 1 enjoy 2 musicals 3 
{VP/{NP, La,,, La,,, R.r,}, 1, 2} {NP, DPnp, 2, 3} 
(22) I enjoy 2 musicals 3 
{VP/{NP, L.rg,Larg,Ro~g},l,2} {NP, DP.p,2,3} 
{X/{Y, P2, P2, P3}, P1, P2} {Y, P2, P2, P3} 
(23) 1 enjoy 2 musicals 3 
{VP/{NP, 2,2,3~,l,2~ {NP,2,2, 3} 
{vP, 1, 3} 
(24) a. {{X, DP~,L.,R.}/{Y, P2,P2,P~},P1,P2} {{Y, P2,P2,P~}/{Z, DPz,Lz,R.},P2,P3) 
:~ {{X, DPx,L,,,R~,}/{Z, DP.,L.,R.},PI,P3} 
b. {{Y, P2, Ly, P2}/{Z, DPz, Lz, Rz}, PI, P2} {{X, DPx, L~, R~}/{Y, P2, Lu, P2}, P2, P3} 
:~ {{X, DPx, Lx,Rz}/{Z, DPz,L,,Rz},PI,P3} 
(25) The Possible Composition Rules: 
a. X/Y Y/Z =~B X/Z (>B) 
b. X/Y Y\Z =~B X\Z (>Bx) 
e. Y\Z X\Y =~B X\Z (<B) 
d. Y/Z X\Y ::*'B X/Z (<Bx) 
7'4 
the appendix it has to be explicitly imposed. These 
schemata permit only the four instances of the rules 
of composition proposed in \[5\] \[6\], given in (25) in 
the basic CCG notation. "Crossed" rules like (15) 
are still allowed Coecause of the non-identity noted in 
the discussion of (18) between the distinguished posi- 
tion of arguments of functions and the position of the 
function itself). They are distinguished from the cor- 
responding non-crossing rules by further specifying 
DP~, the distinguished position on Z. However, no 
rule violating the Principle of Inheritance, like (14), is 
allowed: such a rule would require a different distin- 
guished position on the two Zs, and would therefore 
not be functional composition at all. This is a desir- 
able result: the example (16) and the earlier papers 
show that the non-order-preserving stances (b, d) 
are required for the grammar of English and Dutch. 
In configurational languages like English they must 
of course be carefully restricted as to the categories 
that may unify with Y. 
The implications of the present formalism for the 
type-raising rules are less obvious. Type raising rules 
are unary, and probably lexical, so the principle of 
adjacency does not apply. However, we noted earlier 
that we only want the order-preserving instances (11), 
in which the directionality of the raised category is 
the reverse of that of its argument. But how can this 
reversal be anything but an arbitrary property? 
Because the directionality constraints are grounded 
out in string positions, the distinguished position of 
the subject argument of a predicate walks - that is, 
the right-hand edge of that subject - is equivalent to 
the distinguished position of the predicate that consti- 
tutes the argument of an order-preserving raised sub- 
ject Gilbert that is, the left-hand edge of that pred- 
icate. It follows that both of the order-preserving 
rules are instances of the single rule (26) in the ex- 
tended notation: The crucial property of this rule, 
which forces its instances to be order-preserving, is 
that the distinguished position variable D Parg on the 
argument of the predicate in the raised category is the 
same as that on the argument of the raised category 
itself. (l'he two distinguished positions are underlined 
in (26)). Of course, the position is unspecified at the 
time of applying the rule, and is simply represented 
as an unbound unification variable with an arbitrary 
mnemonic identifier. However, when the category 
combines with a predicate, this variable will be bound 
by the directionality specified in the predicate itself. 
Since this condition will be transmitted to the raised 
category, it will have to coincide with the juncture of 
the combination. Combination of the categories in 
the non-grammatical order will therefore fail, just as 
if the original categories were combining without he 
mediation of type-raising. 
Consider the following example. Under the above 
rule, the categories of the words in the sentence 
Gilbert walks are as shown in (27), before binding. 
Binding of string positional variables yields the cat- 
egories in (28). The combinatory rule of forward 
application (19) applies as in example (29), binding 
further variables by unification. In particular, DP 9, 
Prop, DPw, and P2, are all bound to the juncture po- 
sition 2, as in (30). By contrast, he same categories 
in the opposite linear order fail to unify with any 
combinatory rule. In particular, the backward appli- 
cation rule fails, as in (31). (Combination is blocked 
because 2 cannot unify with 3). 
On the assumption implicit in (26), the only permit- 
ted instances of type raising are the two rules given 
earlier as (11). The earlier esults concerning word- 
order universals under coordination are therefore cap- 
tured. Moreover, we can now think of these two rules 
as a single underspecified order-preserving rule di- 
rectly corresponding to (26), which we might write 
less long-windediy as follows, augmenting the origi- 
nal simplest notation with a non-directional slash: 
(33) The Order-preserving Type-raising Rule: 
X ~ TI(TIX) (T) 
The category that results from this rule can combine in
either direction, but will always preserve order. Such 
a property is extremely desirable in a language like 
English, whose verb requires ome arguments o the 
right, and some to the left, but whose NPs do not bear 
case. The general raised category can combine in both 
directions, but will still preserve word order. It thus 
eliminates what was earlier noted as a worrying extra 
degree of categorial mbiguity. The way is now clear 
to incorporate type raising directly into the lexicon, 
substituting categories of the form T I(TIX), where X 
is a category like NP or PP, directly into the lexicon 
in place of the basic categories, or (more readably, but 
less efficiently), to keep the basic categories and the 
rule (33), and exclude the base categories from all 
combination. 
The related proposal of Zeevat et al \[8\],\[9\] also 
has the property of allowing a single lexical raised 
category for the English NP. However, because of 
the way in which the directional constraints are here 
grounded in relative string position, rather than being 
primitive to the system, the present proposal avoids 
certain difficulties in the earlier treatment. Zeevat's 
type-raised categories are actually order-changing, 
and require the lexical category for the English pred- 
icate to be S/NP  instead of S\NP .  (Cf. \[9, pp. 
7S 
(25) {X, DParg,L..rg, R,,rg} => {T/{T/{X, DP,,,'g,L,,rg,R,,,-g},DParg,Lpred,Ra, red},L"rg, Rar9 } 
(27) 1 Gilbert 2 walks 3 
{S/{S/{NP, DPg,Lg,Rg},DPg,Lpred, Rpred},Lg,Rg } {S/{NP, R~p,L.p,R~p},DP,~,Lw,R~} 
(28) 1 Gilbert 2 walks 3 
{S/{S/{NP, DPg, I,2},DPg,Lpre,~,R~r.d}I,2} {S/{NP, R.p,L.p,R,w},DP",2,3} 
(29) 1 Gilbert 2 
{S/{S/{NP, 01)9, 1, 2}, DPg, Lure& R~red}, 1,2} 
{X/{Y, P2, P2, P3}, P1, P2} 
walks 
{S/{NP, R~p, L.p, R~p}, DP,~, 2, 3} 
{Y, P2, P2, P3} 
(3O) 1 Gilbert 2 walks 
{S/{S/{NP, 2  1,2}, 2, 2, 3}, 1, 2} {S/{NP, 2, 1,2}, 2, 2, 3} 
{S, 1,3} 
(31) 1 ,Walks 2 
{S/{NP, R~p, L.~, R~p}, 1, 2} 
{Y, P2, P1, P2} 
Gilbert 
{S/ { S/ { N P, 01)9,2, 3}, DP 9, Lpr.d, Rpred}, 2, 3} 
{X/{Y, P2, Pl, P2}, P2, P3} 
(32) .{X, DParg,Larg,Rarg} :=~ {T/{T/{X, DParg,Lar.,Rarg}'DPpred'Lpred'Rp red}'Larg'Rarg} 
207-210\]). They are thereby prevented from captur- 
ing a number of generalisations ofCCGs, and in fact 
exclude functional composition entirely. 
It is important to be clear that, while the order 
preserving constraint is very simply imposed, it is 
nevertheless an additional stipulation, imposed by the 
form of the type raising rule (26). We could have 
used a unique variable, DPpr,a say, in the crucial 
position in (26), unrelated to the positional condi- 
tion DP~r9 on the argument of the predicate itself, 
to define the distinguished position of the predicate 
argument of the raised category, as in example (32). 
However, this tactic would yield a completely uncon- 
strained type raising rule, whose result category could 
not merely be substituted throughout the lexicon for 
ground categories like NP  without grammatical col- 
lapse. (Such categories immediately induce totally 
free word-order, for example permitting (31) on the 
English lexicon). It seems likely that type raising is 
universally confined to the order-preserving kind, and 
that the sources of so-called free word order lie else- 
where. Such a constraint can therefore be understood 
in terms of the present proposal simply as a require- 
ment for the lexicon itself to be consistent. It should 
also be observed that a uniformly order-changing cat- 
egory of the kind proposed by Zeevat et al is not 
possible under this theory. 
The above argument translates directly into 
unification-based frameworks uch as PATR or Pro- 
log. A small Prolog program, shown in an appendix, 
can be used to exemplify and check the argument. 4 
The program makes no claim to practicality or ef- 
ficiency as a CCG parser, a question on which the 
reader is refered to \[7\]. Purely for explanatory sim- 
plicity, it uses type raising as a syntactic rule, rather 
than as an offline lexical rule. While a few English 
lexical categories and an English sentence are given 
by way of illustration, the very general combinatory 
rules that are included will of course require further 
constraints if they are not to overgenerate with larger 
fragments. (For example, >B and >Bx must be dis- 
anguished as outlined above, and file latter must be 
greatly constrained for English.) One very general 
constraint, excluding all combinations with or into 
NP, is included in the program, in order to force 
type-raising and exemplify the way in which further 
constrained rule-instances may be specified. 
CONCLUSION 
We can now safely revert o the original CCG nota- 
4The program is based on a simple shift-reduce 
parser/rccogniscr, using "difference list"-encoding of string posi- 
tion (el. \[41, \[31). 
tion described in the preliminaries to the paper, mod- 
ified only by the introduction of the general order- 
preserving type raising rule (26), having established 
the following results. First, the earlier claims con- 
cerning word-order universals follow fTom first prin- 
ciples in a unification-based CCG in which direction- 
ality is an attribute of arguments, grounded out in 
string position. The Principles of Consistency and In- 
heritance follow as theorems, rather than stipulations. 
A single general-purpose order-preserving type-raised 
category can be assigned to arguments, implifying 
the grammar and the parser. 
REFERENCES 
\[1\] Curry, I-Iaskell and Robert Feys: 1958, Combi- 
natory Logic, North Holland, Amsterdam. 
\[2\] Dowry, David: 1988, Type raising, functional 
composition, and non-constituent coordination, in 
Richard T. Oehrle, E. Bach and D. Wheeler, 
(eds), Categorial Grammars and Natural Lan- 
guage Structures, Reidel, Dordrecht, 153-198. 
\[3\] Gerdeman, Dale and Hinrichs, Erhard: 1990. 
Functor-driven Natural Language Generation with 
Categorial Unification Grammars. Proceedings of 
COLING 90, Helsinld, 145-150. 
\[4\] Pereira, Fernando, and Smart Shieber: 1987, Pro- 
log and Natural Language Analysis, CSLIAJniv. 
of Chicago Press. 
\[5\] Steedman, Mark: 1987. Combinatory grammars 
and parasitic gaps. Natural Language & Linguis- 
tic Theory, 5, 403-439. 
\[6\] Steedman, Mark: 1990, Gapping as Constitu- 
tent Coordination, Linguistics and Philosophy, 13, 
207-263. 
\[7\] Vijay-Shartkar, K and David Weir: 1990, 'Poly- 
nomial Time Parsing of Combinatory Categorial 
Grammars', Proceedings of the 28th Annual Con- 
ference of the ACL, Pittsburgh, June 1990. 
\[8\] Zeevat, Hunk, Ewan Klein, and Jo Calder: 1987, 
'An Introduction to Unification Categorial Gram- 
mar', in N. Haddock et al (eds.), Edinburgh 
Working Papers in Cognitive Science, 1: Catego- 
rial Grammar, Unification Grammar, and Pars- 
ing. 
\[9\] Zeevat, Henk: 1988, 'Combining Categorial 
Grammar and Unification', in U. Reyle and C. 
Rohrer (eds.), Natural Language Parsing and Lin- 
guistic Theories, Dordrecht, Reidel, 202-229. 
77' 
APPENDIX 
~ A Lexical Frasment: parse wil l  bind posit ion (via l ist -encoding):  
category(g i lbert ,  cat(np, _, P1, P2)). 
category(br ig i t te ,  cat(np, _, P1, P2)). 
category(ualks0cat(cat(s . . . . . .  ) /cat(np,P2,_,P2),_,P3,P4)).  
category(love, cat(cat(vp . . . . . .  ) /cat(np,P3,P3,_),_,P1,P2)).  
category(must,cat(cat(cat(s  . . . . . .  )/cat(np,P2,_,P2) . . . . . .  ) /cat(vp,P5,PS,_),_,P3,P4)).  
category(madly, cat(cat(vp,  . . . . .  ) /cat(vp,P2,_,P2),_,P3,P4)).  
~ Application and (overgeneral) Composition: Part ia l  evaluation of DPy with the actual Juncture P2 
~ imposes Adjacency. DPy (=P2) must not be =- Y'e other end (see <B and >B). Antecedent \+ Y=np 
~ disallows ALL combination with unraisedNPe. 
reduce(cat(cat(X,DPx,Pl,P3)/cat(Y,P2,P2,P3),_,Pl,P2), 
cat(Y, P2, P2,P3), 
cat(X,VPx,Pl,P3)) : -  \+ Y-rip. ~> 
reduce(cat(Y,P2,Pl,P2), 
cat(cat(X,DPx,P1,P3)/cat(Y,P2,P1,P2),_,P2,P3), 
cat(X,DPx,Pl,P3)) : -  \+ Y~np. 
reduce (cat (cat (X,DPx,Xl,X2)/cat (Y,P2,P2,Y2) ,_,P1,P2), 
cat (cat (Y ,P2 ,P2 ,Y2)/cat (z, DPz, ZI, Z2), _ ,P2 ,P3), 
cat(cat(X,DPx,Xl,X2)/cat(Z,VPz,Zl,Z2),_,P1,P3)) : -  \+ Y=np,\+ Y2=-P2. ~>B, cf.  ex. 24a 
reduce(cat(cat(Y,P2,YI,P2)/cat(Z,DPz,Zl,Z2),_,Pl ,P2),  
cat(cat(X,DPx,Xl,X2)/cat(Y,P2,YI,P2),_,P2,P3), 
cat(cat(X,DPx,l l ,X2)/cat(Z,DPz,ZI,Z2),_,PI,P3)) : -  \+ Y=np,\+ YI==P2. ~<B, of. ex. 24b 
~OrdarPreserv ingType  Raisins: the rule np -> TI(TInp). 
raise(cat(np,DPnp,Pl,P2),  % Binds PI, P2 
cat(cat(T,DPt,TI,T2)/cat(cat(T,VPt,TI,T2)/cat(np,DPnp,PI,P2),VPnp,_,_), ~ cf. ex. 26 
_,P l ,P2)) .  
~ Parse sJJmlates reduce- f i rs t  shi ft -reduce recosniser with backtracking ( inef f i c ient ly )  
parse( \[Result\] , O,  Result).  ~ Halt 
parse(\[Cat l \ [Stack\] ,  Buffer, Result) : -  X Raise (syntact ic)  
raise(Carl, Cat2), 
parse(\[Cat21Stack\], Buffer, Result). 
parse(\[Cat2, Catl lStack\] ,  Buffer, Result) : -  ~ Reduce 
reduce(Carl, Cat2, Cat3), 
parse(\[Cat3\[Stack\],  Buffer, Result). 
parse(Stack, \[3/oral\[Buffer\], Result) : -  ~ Shift 
category(Word, cat(W,DPs, ~/ordlBuffer\] ,Buffer)) ,  ~ Posit ion is l ist-encoded 
parse ( \[cat (W, DPs, \[Word I Buff er\] ,Buff er) J St ack\], Buff er, Result). 
~ Example cruc ia l ly  iuvolvin 8 bid i rect ional  T (ts ice) and <Bx: 
\[ ?- parse(D,  ~i lber t ,must , love,madly ,br ig i t te \ ]  ,R). 
R " cat (s ,_37, ~i lbert  ,must, love ,madly,hrigitte\], D ) ~ ; -- plus 4 more equivalent derivations 
yes 
78 
