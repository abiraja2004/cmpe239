RULE-BASED INFLEXIONAL ANALYSIS 
Zbigniew Jurkiewlcz 
University of Warsaw, Institute of Informatics 
Palac kultury i naukl, 00-901 Warszawa, P.O.Box 1210, Poland 
This paper presents a system for representation and use 
of inflexlonal knowledge for Polish language. By inflexlonal 
knowledge we mean information about rules of inflection/de- 
flection for regu l~ words together with a llst of exceptions, 
Such knowledge can be successfully manipulated by a rule-based 
sys tem.  The research  i s  a par t  o f  b ig  under tak in~,  a imed at  
const ruct ion  of  a sys tem ab le  to  converse  in  Po l i sh  w i th  
casual user. 
The problem we are concerned with may be stated as 
follows. For each word in input sentence the system should 
find its basic form and dictionary i~ ormatlon connected with 
It. 
The simplest approach to this problem is to store all 
forms of words in the forms dictionary, which associates them 
with their bsslc forms. This method is acceptable for small 
sets of words. It places too big strain on system resources 
for bigger dictionaries. T~e way to minimize resource usage 
is to exploit regularities in the inflection. 
Each isn6uage possesses some regnllarltes in its IDflex- 
ion. The extent of these regularities is different in differ- 
ent languages. Also the number of different inflectional forms 
may be different, e.g. an average polish verb can have about 
100 forms. This forced us to think seriously about using re- 
gularltles even in lexlcal components for small subsets of 
~' - 146 - 
of lan~ageo We view the inflectionsl analysis system as 
composed out of %~o parts~ 
- a n  exception dictionary wi~h all forms taken as it- 
- a mechanism e~9~oiti ~ ~e@~lax~ties for getting neoess- 
ax-y efficiency in ses~ch and ~v ing  resources. 
We based our mechanism on the analysis of endings. The 
ending is defined as a ps~t of word which is changed while 
reducing the word to its b~sic (d~Ictionax~) form. Polish 
language is characterized by many rules of deflection, which 
may be applicable to a given ending? A single word may be 
interpreted in as many w~s as many endings we can disting- 
uish in it, multiplied by a number o f  applicable rules for 
each ending. Therefore such candidate ending must be confirm- 
ed by checking result in the d ic t ion~ of basic forms after 
applying proposed deflection rule. 
The described knowledge was written down in rule-based 
system "FORS". "PORS" is rather classical forwax~-driven rule 
system with some degree of extensibility. I% is written in 
programming language LISP and is composed out of three parts: 
- facts, represented as list structures stored in a 
fully indexed data base8 
- rules of the form 
condition =~ aotlon action ... 
- control mechanism for choosing and applying rules. 
Eaoh condition is a sequence of patterns of faots, 
which must be asserted in a database for rule to be applicab- 
le. 
Patterns may contain typed variables. The type Of a 
variable is identified by one-letter long prefix. Prefix must 
be a non~alphanumex~Ical character. Variable type may be defin- 
ed by providing matching functions for this type. 
147 - 
I n f lex iona l  knowledge i s  represented  in  "YORS" as fo l lows .  
Each d ic t ionary  ent ry  is represented  as fac t  of the fo l low ing  
forms 
(ENTRY (BASIC-PORU) (CATEGORY) (OTHER PARAMETERS)) 
The word cur rent ly  processed i s  saved asz 
(~C~WD(W0~))  
The exceptions are represented as rules 'of the fore 
(~ED~D (WO~-FO~))  (E~TR? (BASlC-FO~)...) 
C~SWEa...) 
The" ru les  fo r  de f lec t ion  by endings replacement are s tored  as 
(~C~IVED *VAa-(~DINGI)) (E~TR~ ~Wa-(E~DI~) ...) 
(~S~R...) 
The prefix ~ is used for variables typed "suffixed"? All 
variables in "FORS" get valuss by matohlng to fact elements? 
For su f f i xed  var iab le  without va lue ,  the va lue  i s  ass igned  
a f te r  cut t ing  a g iven  ending from i tem element ( i f  poss ib le ,  
otherwise the matching fa i l s ) ?  While matoh?ng su f f i xed  var iab -  
le  which already7 has some va luer  F ina l  va lue  i s  obta ined  by 
concatenat ing  ~iven guf ix  to i t s  
There may ex is t  msn~ oompeti~E ru les  fo r  recogn ized 
ending.  Also,  fo r  a g iven word a coup le  of a l lowed endings 
may be lndent i f ied  (e ?g ?  one le t te r  long,  two le t te rs  long 
e tc . ) .  The cont ro l  component in  "PORe-. a l lows to spec i fy  the 
sequencing between such complet ing ru les .  In  a cur rent  vers ion ,  
the set  of ru les  fo r  regu lar  endings i s  d iv ided  in to  ~oups  
accord ing to the ending in  
(RECEIVED, ? ? ) 
pattern. We amocla~e a node with each such group. The nodes 
form a directed graph, called control graph. We associate a 
node with  except ion  ru les  group too.  One node i s  se lec ted  as 
a staz~__ing node.  The ares in this ~aph specify (partial) 
- 148  - 
order  between nodeeo ~hus de f in ing  eoquen@L~ between groups 
of ru les .  AI? nodes must be aocese4blo from s tar t inK  node (4 .  
o ther  terms,  @cat.el  graph must be a dLreoted aoyol?o oonno@t- 
The .system works in  cyc les .  At each cyc le  I t  roads the 
nex~ word from input  sentence and t r~e8 to f ind  a ru le  app l i~-  
ab le  to thee word. Rules 8~re t r~ed a@coz~LnK to the order  
de f ined  by a cont ro l  graph, 8 tar t inK  from the e tar t~ node. 
For each node, the ru les  ansoo la ted  with i t  are  @hsoked, 
unt i l  one i s  found wi th  sat i s f ied  cond i t ions  This ru le  i s  then 
run  and the next  cyc le  beg ins .  I f  no ru le  wan app\]~Loable, 
system goes to one of successor  nodes,  guided by analysed word 
~he advantages of represent inK  in f lec t ione?  knowledge in 
such a form are mango The system i s  modular,  because each ru le  
is independent  from all others .  Therefore ru les  may be added 
o~ de le ted  at  will, a l lowing add i t iona l  sources of knowledge 
to  be t r ied .  
The beha~our  of the 8yatem Is  eas i ly  observable  by non-  
proKraumer ( in  linguistic terms such as ru les ,  end?nKs e to . )o  
The set  of ru les  may be ad jus ted  to a g iven  app l i ca t ion ,  
espeo ie l l y  fo r  smal l  systems with spec ia l i sed  d io t ionar iese  
The independent  cont ro l  component a l lows to exper2ment 
wi th  d i f fe rent  ru le  groupings in  the search of min imizat ion  
of resource usage.  The grouping ac@ord~ to the oonoludad 
' syntact i c  category  may e l low to exp lo i t  syntact i c  expectat ions ,  
prowlded from parser .  As fo r  .now, we succeeded in  incorporat -  
in  K only  most popular  de f lec t ion  ru les  (about 600 of them)e We 
are go i~ to  inoorporat~e some add i t ione l  phonet ic  ru les  to 
take care ~f a l te ra t ions .  This could hopefu l ly  dimin:l.sh the 
number of de f lec t ion  r~ les .  
- 149 - 
