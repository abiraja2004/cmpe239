First Joint Conference on Lexical and Computational Semantics (*SEM), pages 441?448,
Montre?al, Canada, June 7-8, 2012. c?2012 Association for Computational Linguistics
TakeLab: Systems for Measuring Semantic Text Similarity
Frane S?aric?, Goran Glavas?, Mladen Karan,
Jan S?najder, and Bojana Dalbelo Bas?ic?
University of Zagreb
Faculty of Electrical Engineering and Computing
{frane.saric, goran.glavas, mladen.karan, jan.snajder, bojana.dalbelo}@fer.hr
Abstract
This paper describes the two systems for
determining the semantic similarity of short
texts submitted to the SemEval 2012 Task 6.
Most of the research on semantic similarity
of textual content focuses on large documents.
However, a fair amount of information is con-
densed into short text snippets such as social
media posts, image captions, and scientific ab-
stracts. We predict the human ratings of sen-
tence similarity using a support vector regres-
sion model with multiple features measuring
word-overlap similarity and syntax similarity.
Out of 89 systems submitted, our two systems
ranked in the top 5, for the three overall eval-
uation metrics used (overall Pearson ? 2nd
and 3rd, normalized Pearson ? 1st and 3rd,
weighted mean ? 2nd and 5th).
1 Introduction
Natural language processing tasks such as text clas-
sification (Sebastiani, 2002), text summarization
(Lin and Hovy, 2003; Aliguliyev, 2009), informa-
tion retrieval (Park et al, 2005), and word sense dis-
ambiguation (Schu?tze, 1998) rely on a measure of
semantic similarity of textual documents. Research
predominantly focused either on the document sim-
ilarity (Salton et al, 1975; Maguitman et al, 2005)
or the word similarity (Budanitsky and Hirst, 2006;
Agirre et al, 2009). Evaluating the similarity of
short texts such as sentences or paragraphs (Islam
and Inkpen, 2008; Mihalcea et al, 2006; Oliva et
al., 2011) received less attention from the research
community. The task of recognizing paraphrases
(Michel et al, 2011; Socher et al, 2011; Wan et
al., 2006) is sufficiently similar to reuse some of the
techniques.
This paper presents the two systems for auto-
mated measuring of semantic similarity of short
texts which we submitted to the SemEval-2012 Se-
mantic Text Similarity Task (Agirre et al, 2012). We
propose several sentence similarity measures built
upon knowledge-based and corpus-based similarity
of individual words as well as similarity of depen-
dency parses. Our two systems, simple and syn-
tax, use supervised machine learning, more specif-
ically the support vector regression (SVR), to com-
bine a large amount of features computed from pairs
of sentences. The two systems differ in the set of
features they employ.
Our systems placed in the top 5 (out of 89 sub-
mitted systems) for all three aggregate correlation
measures: 2nd (syntax) and 3rd (simple) for overall
Pearson, 1st (simple) and 3rd (syntax) for normal-
ized Pearson, and 2nd (simple) and 5th (syntax) for
weighted mean.
The rest of the paper is structured as follows. In
Section 2 we describe both knowledge-based and
corpus-based word similarity measures. In Section
3 we describe in detail the features used by our sys-
tems. In Section 4 we report the experimental results
cross-validated on the development set as well as the
official results on all test sets. Conclusions and ideas
for future work are given in Section 5.
2 Word Similarity Measures
Approaches to determining semantic similarity of
sentences commonly use measures of semantic sim-
441
ilarity between individual words. Our systems use
the knowledge-based and the corpus-based (i.e., dis-
tributional lexical semantics) approaches, both of
which are commonly used to measure the semantic
similarity of words.
2.1 Knowledge-based Word Similarity
Knowledge-based word similarity approaches rely
on a semantic network of words, such as Word-
Net. Given two words, their similarity can be esti-
mated by considering their relative positions within
the knowledge base hierarchy.
All of our knowledge-based word similarity mea-
sures are based on WordNet. Some measures use
the concept of a lowest common subsumer (LCS)
of concepts c1 and c2, which represents the lowest
node in the WordNet hierarchy that is a hypernym
of both c1 and c2. We use the NLTK library (Bird,
2006) to compute the PathLen similarity (Leacock
and Chodorow, 1998) and Lin similarity (Lin, 1998)
measures. A single word often denotes several con-
cepts, depending on its context. In order to compute
the similarity score for a pair of words, we take the
maximum similarity score over all possible pairs of
concepts (i.e., WordNet synsets).
2.2 Corpus-based Word Similarity
Distributional lexical semantics models determine
the meaning of a word through the set of all con-
texts in which the word appears. Consequently, we
can model the meaning of a word using its distribu-
tion over all contexts. In the distributional model,
deriving the semantic similarity between two words
corresponds to comparing these distributions. While
many different models of distributional semantics
exist, we employ latent semantic analysis (LSA)
(Turney and Pantel, 2010) over a large corpus to es-
timate the distributions.
For each word wi, we compute a vector xi using
the truncated singular value decomposition (SVD)
of a tf-idf weighted term-document matrix. The co-
sine similarity of vectors xi and xj estimates the
similarity of the corresponding words wi and wj .
Two different word-vector mappings were com-
puted by processing the New York Times Annotated
Corpus (NYT) (Sandhaus, 2008) and Wikipedia.
Aside from lowercasing the documents and remov-
ing punctuation, we perform no further preprocess-
Table 1: Evaluation of word similarity measures
Measure ws353 ws353-sim ws353-rel
PathLen 0.29 0.61 -0.05
Lin 0.33 0.64 -0.01
Dist (NYT) 0.50 0.50 0.51
Dist (Wikipedia) 0.62 0.66 0.55
ing (e.g., no stopwords removal or stemming). Upon
removing the words not occurring in at least two
documents, we compute the tf-idf. The word vec-
tors extracted from NYT corpus and Wikipedia have
a dimension of 200 and 500, respectively.
We compared the measures by computing the
Spearman correlation coefficient on the Word-
Sim3531 data set, as well as its similarity and re-
latedness subsets described in (Agirre et al, 2009).
Table 1 provides the results of the comparison.
3 Semantic Similarity of Sentences
Our systems use supervised regression with SVR as
a learning model, where each system exploits differ-
ent feature sets and SVR hyperparameters.
3.1 Preprocessing
We list all of the preprocessing steps our systems
perform. If a preprocessing step is executed by only
one of our systems, the system?s name is indicated
in parentheses.
1. All hyphens and slashes are removed;
2. The angular brackets (< and >) that enclose the
tokens are stripped (simple);
3. The currency values are simplified, e.g.,
$US1234 to $1234 (simple);
4. Words are tokenized using the Penn Treebank
compatible tokenizer;
5. The tokens n?t and ?m are replaced with not and
am, respectively (simple);
6. The two consecutive words in one sentence that
appear as a compound in the other sentence are
replaced by the said compound. E.g., cater pil-
lar in one sentence is replaced with caterpil-
lar only if caterpillar appears in the other sen-
tence;
1http://www.cs.technion.ac.il/?gabr/
resources/data/wordsim353/wordsim353.html
442
7. Words are POS-tagged using Penn Treebank
compatible POS-taggers: NLTK (Bird, 2006)
for simple, and OpenNLP2 for syntax;
8. Stopwords are removed using a list of 36 stop-
words (simple).
While we acknowledge that some of the prepro-
cessing steps we take may not be common, we did
not have the time to determine the influence of each
individual preprocessing step on the results to either
warrant their removal or justify their presence.
Since, for example, sub-par, sub par and subpar
are treated as equal after preprocessing, we believe it
makes our systems more robust to inputs containing
small orthographic differences.
3.2 Ngram Overlap Features
We use many features previously seen in paraphrase
classification (Michel et al, 2011). Several features
are based on the unigram, bigram, and trigram over-
lap. Before computing the overlap scores, we re-
move punctuation and lowercase the words. We con-
tinue with a detailed description of each individual
feature.
Ngram Overlap
Let S1 and S2 be the sets of consecutive ngrams
(e.g., bigrams) in the first and the second sentence,
respectively. The ngram overlap is defined as fol-
lows:
ngo(S1, S2) = 2 ?
(
|S1|
|S1 ? S2|
+
|S2|
|S1 ? S2|
)?1
(1)
The ngram overlap is the harmonic mean of the de-
gree to which the second sentence covers the first
and the degree to which the first sentence covers the
second. The overlap, defined by (1), is computed for
unigrams, bigrams, and trigrams.
Additionally we observe the content ngram over-
lap ? the overlap of unigrams, bigrams, and tri-
grams exclusively on the content words. The con-
tent words are nouns, verbs, adjectives, and adverbs,
i.e., the lemmas having one of the following part-of-
speech tags: JJ, JJR, JJS, NN, NNP, NNS, NNPS,
RB, RBR, RBS, VB, VBD, VBG, VBN, VBP, and
VBZ. Intuitively, the function words (prepositions,
2http://opennlp.apache.org/
conjunctions, articles) carry less semantics than con-
tent words and thus removing them might eliminate
the noise and provide a more accurate estimate of
semantic similarity.
In addition to the overlap of consecutive ngrams,
we also compute the skip bigram and trigram over-
lap. Skip-ngrams are ngrams that allow arbitrary
gaps, i.e., ngram words need not be consecutive in
the original sentence. By redefining S1 and S2 to
represent the sets of skip ngrams, we employ eq. (1)
to compute the skip-n gram overlap.
3.3 WordNet-Augmented Word Overlap
One can expect a high unigram overlap between very
similar sentences only if exactly the same words (or
lemmas) appear in both sentences. To allow for
some lexical variation, we use WordNet to assign
partial scores to words that are not common to both
sentences. We define the WordNet augmented cov-
erage PWN (?, ?):
PWN (S1, S2) =
1
|S2|
?
w1?S1
score(w1, S2)
score(w, S) =
?
?
?
1 if w ? S
max
w??S
sim(w,w?) otherwise
where sim(?, ?) represents the WordNet path length
similarity. The WordNet-augmented word over-
lap feature is defined as a harmonic mean of
PWN (S1, S2) and PWN (S2, S1).
Weighted Word Overlap
When measuring sentence similarities we give
more importance to words bearing more content, by
using the information content
ic(w) = ln
?
w??C freq(w
?
)
freq(w)
where C is the set of words in the corpus and
freq(w) is the frequency of the word w in the cor-
pus. We use the Google Books Ngrams (Michel et
al., 2011) to obtain word frequencies because of its
excellent word coverage for English. Let S1 and S2
be the sets of words occurring in the first and second
sentence, respectively. The weighted word cover-
age of the second sentence by the first sentence is
443
given by:
wwc(S1, S2) =
?
w?S1?S2 ic(w)?
w??S2
ic(w?)
The weighted word overlap between two sen-
tences is calculated as the harmonic mean of the
wwc(S1, S2) and wwc(S2, S1).
This measure proved to be very useful, but it
could be improved even further. Misspelled frequent
words are more frequent than some correctly spelled
but rarely used words. Hence dealing with mis-
spelled words would remove the inappropriate heavy
penalty for a mismatch between correctly and incor-
rectly spelled words.
Greedy Lemma Aligning Overlap
This measure computes the similarity between
sentences using the semantic alignment of lem-
mas. First we compute the word similarity be-
tween all pairs of lemmas from the first and the
second sentence, using either the knowledge-based
or the corpus-based semantic similarity. We then
greedily search for a pair of most similar lemmas;
once the lemmas are paired, they are not considered
for further matching. Previous research by Lavie
and Denkowski (2009) proposed a similar alignment
strategy for machine translation evaluation. After
aligning the sentences, the similarity of each lemma
pair is weighted by the larger information content of
the two lemmas:
sim(l1, l2) = max(ic(l1), ic(l2)) ? ssim(l1, l2) (2)
where ssim(l1, l2) is the semantic similarity be-
tween lemmas l1 and l2.
The overall similarity between two sentences is
defined as the sum of similarities of paired lemmas
normalized by the length of the longer sentence:
glao(S1, S2) =
?
(l1,l2)?P sim(l1, l2)
max(length(S1), length(S2))
where P is the set of lemma pairs obtained by greedy
alignment. We take advantage of greedy align over-
lap in two features: one computes glao(?, ?) by us-
ing the Lin similarity for ssim(?, ?) in (2), while the
other feature uses the distributional (LSA) similarity
to calculate ssim(?, ?).
Vector Space Sentence Similarity
This measure is motivated by the idea of composi-
tionality of distributional vectors (Mitchell and La-
pata, 2008). We represent each sentence as a sin-
gle distributional vector u(?) by summing the dis-
tributional (i.e., LSA) vector of each word w in the
sentence S: u(S) =
?
w?S xw, where xw is the
vector representation of the word w. Another sim-
ilar representation uW (?) uses the information con-
tent ic(w) to weigh the LSA vector of each word
before summation: uW (S) =
?
w?S ic(w)xw.
The simple system uses |cos(u(S1), u(S2))| and
|cos(uW (S1), uW (S2))| for the vector space sen-
tence similarity features.
3.4 Syntactic Features
We use dependency parsing to identify the lemmas
with the corresponding syntactic roles in the two
sentences. We also compute the overlap of the de-
pendency relations of the two sentences.
Syntactic Roles Similarity
The similarity of the words or phrases having the
same syntactic roles in the two sentences may be in-
dicative of their overall semantic similarity (Oliva et
al., 2011). For example, two sentences with very dif-
ferent main predicates (e.g., play and eat) probably
have a significant semantic difference.
Using Lin similarity ssim(?, ?), we obtain the sim-
ilarity between the matching lemmas in a sentence
pair for each syntactic role. Additionally, for each
role we compute the similarity of the chunks that
lemmas belong to:
chunksim(C1, C2) =
?
l1?C1
?
l2?C2
ssim(l1, l2)
where C1 and C2 are the sets of chunks of
the first and second sentence, respectively. The
final similarity score of two chunks is the
harmonic mean of chunksim(C1, C2)/|C1| and
chunksim(C1, C2)/|C2| .
Syntactic roles that we consider are predicates (p),
subjects (s), direct (d), and indirect (i) (i.e., preposi-
tional) objects, where we use (o) to mean either (d)
or (i). The Stanford dependency parser (De Marn-
effe et al, 2006) produces the dependency parse of
the sentence. We infer (p), (s), and (d) from the syn-
tactic dependencies of type nsubj (nominal subject),
444
nsubjpass (nominal subject passive), and dobj (di-
rect object). By combining the prep and pobj de-
pendencies (De Marneffe and Manning, 2008), we
identify (i). Since the (d) in one sentence often se-
mantically corresponds to (i) in the other sentence,
we pair all (o) of one sentence with all (o) of the
other sentence and define object similarity between
the two sentences as the maximum similarity among
all (o) pairs. Because the syntactic role might be
absent from both sentences (e.g., the object in sen-
tences ?John sings? and ?John is thinking?), we in-
troduce additional binary features indicating if the
comparison for the syntactic role in question exists.
Many sentences (especially longer ones) have two
or more (p). In such cases it is necessary to align
the corresponding predicate groups (i.e., the (p) with
its corresponding arguments) between the two sen-
tences, while also aggregating the (p), (s), and (o)
similarities of all aligned (p) pairs. The similarity
of two predicate groups is defined as the sum of (p),
(s), and (o) similarities. In each iteration, the greedy
algorithm pairs all predicate groups of the first sen-
tence with all predicate groups of the second sen-
tence and searches for a pair with the maximum sim-
ilarity. Once the predicate groups of two sentences
have been aligned, we compute the (p) similarity as
a weighted sum of (p) similarities for each predicate
pair group. The weight of each predicate group pair
equals the larger information content of two predi-
cates. The (s) and (o) similarities are computed in
the same manner.
Syntactic Dependencies Overlap
Similar to the ngram overlap features, we measure
the overlap between sentences based on matching
dependency relations. A similar measure has been
proposed in (Wan et al, 2006). Two syntactic depen-
dencies are considered equal if they have the same
dependency type, governing lemma, and dependent
lemma. Let S1 and S2 be the set of all dependency
relations in the first and the second sentence, respec-
tively. Dependency overlap is the harmonic mean
between |S1 ? S2|/|S1| and |S1 ? S2|/|S2| . Con-
tent dependency overlap computes the overlap in the
same way, but considers only dependency relations
between content lemmas.
Similarly to weighted word overlap, we com-
pute the weighted dependency relations overlap.
The weighted coverage of the second sentence de-
pendencies with the first sentence dependencies is
given by:
wdrc(S1, S2) =
?
r?S1?S2 max(ic(g(r)), ic(d(r)))?
r?S2 max(ic(g(r)), ic(d(r)))
where g(r) is the governing word of the dependency
relation r, d(r) is the dependent word of the depen-
dency relation r, and ic(l) is the information con-
tent of the lemma l. Finally, the weighted depen-
dency relations overlap is the harmonic mean be-
tween wdrc(S1, S2) and wdrc(S2, S1).
3.5 Other Features
Although we primarily focused on developing the
ngram overlap and syntax-based features, some
other features significantly improve the performance
of our systems.
Normalized Differences
Our systems take advantage of the following fea-
tures that measure normalized differences in a pair
of sentences: (A) sentence length, (B) the noun
chunk, verb chunk, and predicate counts, and (C)
the aggregate word information content (see Nor-
malized differences in Table 2).
Numbers Overlap
The annotators gave low similarity scores to many
sentence pairs that contained different sets of num-
bers, even though their sentence structure was very
similar. Socher et al (2011) improved the perfor-
mance of their paraphrase classifier by adding the
following features that compare the sets of num-
bers N1 and N2 in two sentences: N1 = N2,
N1?N2 6= ?, and N1 ? N2?N2 ? N1. We replace
the first two features with log (1 + |N1|+ |N2|) and
2? |N1 ?N2|/(|N1|+ |N2|) . Additionally, the num-
bers that differ only in the number of decimal places
are treated as equal (e.g., 65, 65.2, and 65.234 are
treated as equal, whereas 65.24 and 65.25 are not).
Named Entity Features
Shallow NE similarity treats capitalized words as
named entities if they are longer than one character.
If a token in all caps begins with a period, it is clas-
sified as a stock index symbol. The simple system
445
Table 2: The usage of feature sets
Feature set simple syntax
Ngram overlap + +
Content-ngram overlap - +
Skip-ngram overlap - +
WordNet-aug. overlap + -
Weighted word overlap + +
Greedy align. overlap - +
Vector space similarity + -
Syntactic roles similarity - +
Syntactic dep. overlap - +
Normalized differences* A,C A,B
Shallow NERC + -
Full NERC - +
Numbers overlap + +
* See Section 3.5
uses the following four features: the overlap of cap-
italized words, the overlap of stock index symbols,
and the two features indicating whether these named
entities were found in either of the two sentences.
In addition to the overlap of capitalized words, the
syntax system uses the OpenNLP named entity rec-
ognizer and classifier to compute the overlap of en-
tities for each entity class separately. We recognize
the following entity classes: persons, organizations,
locations, dates, and rudimentary temporal expres-
sions. The absence of an entity class from both sen-
tences is indicated by a separate binary feature (one
feature for each class).
Feature Usage in TakeLab Systems
Some of the features presented in the previous sec-
tions were used by both of our systems (simple and
syntax), while others were used by only one of the
systems. Table 2 indicates the feature sets used for
the two submitted systems.
4 Results
4.1 Model Training
For each of the provided training sets we trained a
separate Support Vector Regression (SVR) model
using LIBSVM (Chang and Lin, 2011). To ob-
tain the optimal SVR parameters C, g, and p, our
systems employ a grid search with nested cross-
Table 3: Cross-validated results on train sets
MSRvid MSRpar SMTeuroparl
simple 0.8794 0.7566 0.7802
syntax 0.8698 0.7144 0.7308
validation. Table 3 presents the cross-validated per-
formance (in terms of Pearson correlation) on the
training sets. The models tested on the SMTnews
test set were trained on the SMTeuroparl train set.
For the OnWn test set, the syntax model was trained
on the MSRpar set, while the simple system?s model
was trained on the union of all train sets. The final
predictions were trimmed to a 0?5 range.
Our development results indicate that the
weighted word overlap, WordNet-augmented word
overlap, the greedy lemma alignment overlap, and
the vector space sentence similarity individually
obtain high correlations regardless of the devel-
opment set in use. Other features proved to be
useful on individual development sets (e.g., syntax
roles similarity on MSRvid and numbers overlap
on MSRpar). More research remains to be done in
thorough feature analysis and systematic feature
selection.
4.2 Test Set Results
The organizers provided five different test sets to
evaluate the performance of the submitted systems.
Table 4 illustrates the performance of our systems
on individual test sets, accompanied by their rank.
Our systems outperformed most other systems on
MSRvid, MSRpar, and OnWN sets (Agirre et al,
2012). However, they performed poorly on the
SMTeuroparl and SMTnews sets. While the corre-
lation scores on the MSRvid and MSRpar test sets
correspond to those obtained using cross-validation
on the corresponding train sets, the performance on
the SMT test sets is drastically lower than the cross-
validated performance on the corresponding train
set. The sentences in the SMT training set are signif-
icantly longer (30.4 tokens on average) than the sen-
tences in both SMT test sets (12.3 for SMTeuroparl
and 13.5 for SMTnews). Also there are several re-
peated pairs of extremely short and identical sen-
tences (e.g., ?Tunisia? ? ?Tunisia? appears 17 times
446
Table 4: Results on individual test sets
simple syntax
MSRvid 0.8803 (1) 0.8620 (8)
MSRpar 0.7343 (1) 0.6985 (2)
SMTeuroparl 0.4771 (26) 0.3612 (63)
SMTnews 0.3989 (46) 0.4683 (18)
OnWN 0.6797 (9) 0.7049 (6)
Table 5: Aggregate performance on the test sets
All ALLnrm Mean
simple 0.8133 (3) 0.8635 (1) 0.6753 (2)
syntax 0.8138 (2) 0.8569 (3) 0.6601 (5)
in the SMTeuroparl test set). The above measure-
ments indicate that the SMTeuroparl training set was
not representative of the SMTeuroparl test set for our
choice of features.
Table 5 outlines the aggregate performance of our
systems according to the three aggregate evaluation
measures proposed for the task (Agirre et al, 2012).
Both systems performed very favourably compared
to the other systems, achieving very high rankings
regardless of the aggregate evaluation measure.
The implementation of simple system is available
at http://takelab.fer.hr/sts.
5 Conclusion and Future Work
In this paper we described our submission to the
SemEval-2012 Semantic Textual Similarity Task.
We have identified some high performing features
for measuring semantic text similarity. Although
both of the submitted systems performed very well
on all but the two SMT test sets, there is still room
for improvement. The feature selection was ad-hoc
and more systematic feature selection is required
(e.g., wrapper feature selection). Introducing ad-
ditional features for deeper understanding (e.g., se-
mantic role labelling) might also improve perfor-
mance on this task.
Acknowledgments
This work was supported by the Ministry of Science,
Education and Sports, Republic of Croatia under the
Grant 036-1300646-1986. We would like to thank
the organizers for the tremendous effort they put into
formulating this challenging task.
References
Eneko Agirre, Enrique Alfonseca, Keith Hall, Jana
Kravalova, Marius Pas?ca, and Aitor Soroa. 2009. A
study on similarity and relatedness using distributional
and wordnet-based approaches. In Proceedings of Hu-
man Language Technologies: The 2009 Annual Con-
ference of the North American Chapter of the Associa-
tion for Computational Linguistics, pages 19?27. As-
sociation for Computational Linguistics.
Eneko Agirre, Daniel Cer, Mona Diab, and Aitor
Gonzalez-Agirre. 2012. SemEval-2012 Task 6: A
pilot on semantic textual similarity. In Proceedings
of the 6th International Workshop on Semantic Eval-
uation (SemEval 2012), in conjunction with the First
Joint Conference on Lexical and Computational Se-
mantics (*SEM 2012). ACL.
Ramiz M. Aliguliyev. 2009. A new sentence similarity
measure and sentence based extractive technique for
automatic text summarization. Expert Systems with
Applications, 36(4):7764?7772.
Steven Bird. 2006. NLTK: the natural language toolkit.
In Proceedings of the COLING/ACL on Interactive
presentation sessions, COLING-ACL ?06, pages 69?
72. Association for Computational Linguistics.
Alexander Budanitsky and Graeme Hirst. 2006. Evalu-
ating wordnet-based measures of lexical semantic re-
latedness. Computational Linguistics, 32(1):13?47.
Chih-Chung Chang and Chih-Jen Lin. 2011. LIBSVM:
A library for support vector machines. ACM Transac-
tions on Intelligent Systems and Technology, 2:27:1?
27:27. Software available at http://www.csie.
ntu.edu.tw/?cjlin/libsvm.
Marie-Catherine De Marneffe and Christopher D. Man-
ning. 2008. The Stanford typed dependencies repre-
sentation. In Coling 2008: Proceedings of the work-
shop on Cross-Framework and Cross-Domain Parser
Evaluation, pages 1?8. Association for Computational
Linguistics.
Marie-Catherine De Marneffe, Bill MacCartney, and
Christopher D. Manning. 2006. Generating typed de-
pendency parses from phrase structure parses. In Pro-
ceedings of LREC, volume 6, pages 449?454.
Aminul Islam and Diana Inkpen. 2008. Semantic
text similarity using corpus-based word similarity and
string similarity. ACM Transactions on Knowledge
Discovery from Data (TKDD), 2(2):10.
447
Alon Lavie and Michael Denkowski. 2009. The ME-
TEOR metric for automatic evaluation of machine
translation. Machine translation, 23(2):105?115.
Claudia Leacock and Martin Chodorow. 1998. Com-
bining local context and WordNet similarity for word
sense identification. WordNet: An electronic lexical
database, 49(2):265?283.
Chin-Yew Lin and Eduard Hovy. 2003. Automatic
evaluation of summaries using n-gram co-occurrence
statistics. In Proceedings of the 2003 Conference
of the North American Chapter of the Association
for Computational Linguistics on Human Language
Technology-Volume 1, pages 71?78. Association for
Computational Linguistics.
Dekang Lin. 1998. An information-theoretic defini-
tion of similarity. In Proceedings of the 15th inter-
national conference on Machine Learning, volume 1,
pages 296?304. San Francisco.
Ana G. Maguitman, Filippo Menczer, Heather Roinestad,
and Alessandro Vespignani. 2005. Algorithmic detec-
tion of semantic similarity. In Proceedings of the 14th
international conference on World Wide Web, pages
107?116. ACM.
Jean-Baptiste Michel, Yuan Kui Shen, Aviva P. Aiden,
Adrian Veres, Matthew K. Gray, et al 2011. Quan-
titative analysis of culture using millions of digitized
books. Science, 331(6014):176.
Rada Mihalcea, Courtney Corley, and Carlo Strapparava.
2006. Corpus-based and knowledge-based measures
of text semantic similarity. In Proceedings of the na-
tional conference on artificial intelligence, volume 21,
page 775. Menlo Park, CA; Cambridge, MA; London;
AAAI Press; MIT Press; 1999.
Jeff Mitchell and Mirella Lapata. 2008. Vector-based
models of semantic composition. Proceedings of ACL-
08: HLT, pages 236?244.
Jesu?s Oliva, Jo?se Ignacio Serrano, Mar??a Dolores
Del Castillo, and A?ngel Iglesias. 2011. SyMSS: A
syntax-based measure for short-text semantic similar-
ity. Data & Knowledge Engineering.
Eui-Kyu Park, Dong-Yul Ra, and Myung-Gil Jang. 2005.
Techniques for improving web retrieval effectiveness.
Information processing & management, 41(5):1207?
1223.
Gerard Salton, Andrew Wong, and Chung-Shu Yang.
1975. A vector space model for automatic indexing.
Communications of the ACM, 18(11):613?620.
Evan Sandhaus. 2008. The New York Times annotated
corpus. Linguistic Data Consortium, Philadelphia,
6(12):e26752.
Hinrich Schu?tze. 1998. Automatic word sense discrimi-
nation. Computational linguistics, 24(1):97?123.
Fabrizio Sebastiani. 2002. Machine learning in auto-
mated text categorization. ACM computing surveys
(CSUR), 34(1):1?47.
Richard Socher, Eric H. Huang, Jeffrey Pennington, An-
drew Y. Ng, and Christopher D. Manning. 2011. Dy-
namic pooling and unfolding recursive autoencoders
for paraphrase detection. Advances in Neural Infor-
mation Processing Systems, 24.
Peter D. Turney and Patrick Pantel. 2010. From fre-
quency to meaning: Vector space models of semantics.
Journal of Artificial Intelligence Research, 37(1):141?
188.
Stephen Wan, Mark Dras, Robert Dale, and Ce?cile Paris.
2006. Using dependency-based features to take the
?para-farce? out of paraphrase. In Proceedings of the
Australasian Language Technology Workshop, volume
2006.
448
