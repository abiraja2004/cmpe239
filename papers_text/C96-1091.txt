A Compilat ion-Chart Method for 
Linear Categorial Deduct ion 
Mark  Hepp le  
l)epl; ,  o f  Compul ;o r  Sole.He0. 
Un ivers i t ;y  of  Shef f ie ld  
Regent ,  Court ; ,  211 l%r l ;obe l lo  St;reel; 
She l lMd $71 4DP,  UK  
hepp le@dcs ,  she f .  ac .  uk 
Abst rac t  
Recent, work in ca.t;eg(Mj gr;mmt;~r has 
seen proposals for a wide. r;Lltg(~ O\[ sys-. 
t;(;i\[IS, differing in their 'resomx:e sensi- 
tivil;y' and hence, implicitly, {;heir under.. 
lying nol;ion of qinguisl;ie SLlllet;ure'. a 
common frmnework for t)arsing such sys- 
t;elns is elll(;l'ging;, whereby some inel;hod 
of linear logi(: l;hcorent \])roving is used 
in COlnbinal;ion with ;~ sysl,em of l;t- 
1)elling l;hat; ensures l;hat; only (\[edtl(> 
Lions a,pl)rot)ri}tt;c Lo l;he r(~le.vanL (:at;ego- 
rM formalism are allowed. This l)al)(n' 
presenl, s a deduction reel;hod for impli- 
(-a.t, ional line~r logic I;ha|; brings with il, 
I;he benelil; thai; (:harl; parsing provides 
for CI,'G parsing, namely avoiding (;he 
need (;o recompu(;e intenne.dial;e resull;s 
wheal ,qcarching exhausi;ively for ;~ll possi- 
ble mmlyses. The mel;ho(\[ involves (:ore- 
piling possibly higher-or(l(;r linear formu- 
lae 1;o indexed firsl;-or(ler formulae, over 
whi(:h (tcdu(:l;ion is ina(le using jusL a, sin-. 
gle inference rule. 
1 In t roduct ion  
This t)al)er present;s a method appl ical le to pars- 
ing a. range of cal;egorial gramm~u' formalisms, in 
pa.rl;ieulm ones Lhal; l';tll wil;hin l;he %yt>e-logieal' 
t;ra.dition, of which Lhe (associa.l;ive) l ,mnbek cal- 
culus L is l;he most; familiar rcl)re.qenLal;iw; (l ,am- 
bek, 1988). l{,e(;enl; work haos se.en proposals tier a 
range of such sysl;el\[l.q, differing in their resource 
sensitivity (and hence, imt)licil;ly , (;heir underly- 
ing llo|;ion of 'linguisLi(: sl.rllei;llre'), in some eases 
combining differing resource sensiCivil;ies wi(;hin 
a, single sysl;e\]n. I Some o17 l;hese propos;ds em- 
l)\]oy a ' labelled de(luei;ion' me.l;hodology (G;d)b;~y, 
\]994), where|)y 1;he. I;yi)es in  a pr()of are asso(:ial;(!d 
wil;h labels under a Sl)e.eiti(;d diseiI)litte , l;he la.bels 
iS(x;, for cxanLlile , the \['orma.lisnls devcqoped ill 
Moortg~t & Morrill (1991), Moortgat & ()ehrle 
(1.994), Morrill 11994), Ilct,1)le (1995). 
re.cording proof' inform;~l;ion a.s a basis for ensming; 
correcl; int'crelming. 
Alongside such developmenLs, vmiotts work ha.s 
addressed I;he ;tssoeial;e(t parsing 1)rol)lem. 2 ()\[" 
l)~Lrt;iculm inl;eresl, here ~tre .qysl;ems t;ha,l; employ 
a 1;heorem proving reel;hod l;hat is (perhaps im- 
plicitly) appropriat;e for use with linear h)gi(:, and 
combine it wiLh ~ labelling system I;hat; restrict,s 
;uhnil;t;cd deducl;ions 1;o be l,hose of some weaker 
logic. Moorl;gal; (\]!)92) shows how a linear proof 
nel, mel;hod may 1)e combined wit;h a r;mge of la.- 
belling disciplines t;o provide dedu(:\[;ion for a ran,g(! 
o1 ca,l;egori~l sys|;ems. Morrill (199,5) shows how 71, 
t;ypes nmy be t;ra.nsl;tl;ed Lo labelled inq)li(:ational 
linem' l;yl>es , wil;h deduct;ion implement;ed via. a 
version of SI,D resolution. The crucial ol)serva.I;ion 
is t;hat, linem' logic sl;;m(ls ~bove all of @e l;yl)(> 
logi(;a,l syst;ems prot)osed a,s (:at;cgorial formalisms 
in Lhe hierarchy of sul)st;ruel;m'a\] logics, and he~tce 
linem' logi(: deduct, ion methods (:m\] i)rovide ;t com- 
mon basis for parsing all of these systems. 
The prescnl, work contrilml;es to this pro.\]ect by 
providing a met;hod of deduction for the impli- 
c;~l;ional fragment; of linear logic l;hal;, like charl; 
parsing for I 'SG, avoids reeonipul;agion of result,,q, 
i.e. where any combinat ion o\[' 1;ypes c(mt;ril)ut;es 
{;o more t;han one overall aImlysis, it, need only 
t>e (:omt>ut;ed once.. In whal; follows, i will first; 
ini;rodu(:e (tcdue(;ion tot iml)lical;ional inear logic, 
and discuss it;s ineompal;ibitil;y with a. eharl>like 
(\[e(tu(:l;ion apt)r();wh, before pre.senl;ing ~t (;omi)i- 
la.l,ion met;hod {;hat; converl;s form(thin Lo a form 
for which a chart>like deduction me{;hod is t)o~qsi - 
ble. Finally, 1 will inl;roduce, l;he Morrill (\]995) 
method for t;ranslat, ing l~mnl)ek t, yi)es t;o lal>elled 
lincm' types, as a b~tsis for illus\[;ra|;ing how t;he 
('harl;-compilat, ion reel;hod c&n be used as a gen- 
era.1 fl'mnework fin' (:al;egorial dedu(:Lion, via l;he 
use of such 1;ra.nslal;ions. 
2Al>l)roa(:hc.b include sequent proof n(n',mtlisacion 
methods for I, (K6nig, 1{)89; Flel)ple, \]990; llemlriks, 
1992), charl; pro'sing mc.l;hods for L (t(6nig, 1990; Hep-. 
pie, 1992), mid proof tiC;l; methods for a range of sys- 
t;ems (Roorda, 11991.; Moortgat, 1992). 
537  
2 Implicational Linear Logic 
Linear logic is an example of a "resource-sensitive" 
logic, requiring that in any deduction, every as- 
sumption ('resource') is used precisely once. We 
consider only the implicational fragment of (in- 
tuitionistic) linear logic. 3 The set of formulae 
arises by closing a (nonempty) set of atomic types 
.4 under the linear implication operator o- (i.e. 
~- ::= A I 5%--Y). Various alternative formula- 
tions are possible. We here use a natural deduc- 
tion formulation, requiring the following rules (o- 
elimination and introduction respectively): 
Ao-B :a B:b \[B :v\] 
o-E A :a  
A: (ab) o--I 
Ao--B : )~v.a 
Eliminations and introductions correspond to 
steps of functional application and abstraction, re- 
spectively, as the lambda term labelling reveals. 
The introduction rule discharges precisely one as- 
sumption (B) within the proof to which it applies 
(ensuring linear use of resources, i.e. that each 
resource is used precisely once). Consider the fol- 
lowing proof that Xo-Y, Yo-Z =~ Xo-Z 
Xo-Y : x Yo--Z : y \[Z : z\] 
Y: (yz) 
x: (x(w)) 
xo-z: 
Following Prawitz (1965), a normal form for 
proofs can be defined using just tile fbllowing 
(meaning preserving) contraction rule (analogous 
to /4-conversion). This observation is of note in 
that it restricts the form of proofs that we must 
consider in seeking to prove some possible theo- 
rem. 
\[B\] 
A 
Ao-13 
A 
: D 
B 
B A 
The normal form proofs of this system have a 
straightforward structural characterisation, that 
their main branch (the unique path fi'om an as- 
sumption to the proof's end-type that includes no 
3It follows that tile parsing method to be devel- 
oped applies only to categorial systems having only 
implicational connectives. It is standard in categorial 
calculi to include also a 'product' operator, enabliug 
matter like addition of substructures, e.g. L has a 
product (commonly notated as) . ,  with the Lambek 
implicationals / and \ being its left and right residuals. 
Although it is appealing from a logical point of view 
to include such operators, their use is not motivated 
in grammar. 
minor premise of an elimination inference) con- 
sists of a sequence of (>_ 0) eliminations followed 
by a sequence of (> 0) introductions. 
The differential status of the left and right hand 
side formulae in a sequent may be addressed in 
terms of polarity, with left formulae being deemed 
to have positive polarity, and the right formula 
to have negative polarity. Polarity applies also 
to subformulae, i.e. in a formula Xo-Y with a 
given polarity p, the subformula X has the same 
polarity p, and Y has the opposite polarity. For 
example, a positively occuring higher-oi'der type 
might have the following pattern of positive and 
negative subformulae: (X  + o- (Y-  o- Z ~ )-  )+ 
Consider the following proof involving this type: 
Xo- (yo -z )  Yo-W Wo-Z \[Z\] 
W 
Y 
Yo-Z 
X 
Observe that the involvement of 'hypothetical rea- 
soning' in this proof (i.e. the use of an additional 
assumption that is later discharged) is driven by 
the presence of the higher-order formula, and that 
the additional assumption in fact corresponds to 
the positive subformula occurrence Z within that 
higher-order formula. In tile following proof that 
Xo-(yo-(Yo--Z))  ~ Xo-Z, hypothetical reason- 
ing again arises in relation to positive subformu- 
lae, i.e. the subformula Yo-Z of the higher-order 
formula (X  + o- (y -  o- (Y+ o- Z- )4 ) - )+ ,  
as well as tile subtbrmula Z of the (overall neg- 
ative) goal formula (X- o- Z + )- .  
Xo- (Yo- (Yo-Z)) \[Yo-Z\] \[Z\] 
Y 
Yo-(Yo-Z)  
X 
Xo-Z 
More specifically, additional assumptions link 
to maximal positive subformulae, i.e. a 
subformula Y+ in a context; of the form 
(X- o- Y+) - ,  but not in (Y+ o- Z-) ~. 
For an even more complex formula, e.g. 
(v+ o-(w- o-(x+ o-(Y o- z+ )- )+ )- )+ 
we might find that a proof would involve not only 
an additional assumption corresponding to the 
positive subformula Xo-(Yo-Z)) ,  but that reason- 
ing with that assumption would in turn involve a 
further additional assumption corresponding to its 
positive subformula Z. 
538 
3 A Compi la t ion -Char t  Method  
Standard chart parsing for PSG has the adwmtage 
that a simple organising principle governs the stor- 
age of results and underpins earch, namely span 
within a linear dimension, specified by limiting left, 
and right points. A fllrther crucial feature is that 
what we derive as all item for any span is purely a 
function of the results derived for substretches of
that span, and ultimately of the lexical categories 
that it dominates (assuming a given grammar). 
l)eduction in implicational linear logic lacks both 
of these features, although, as we shall see shortly, 
some notion of 'span' can be specified. The cru- 
cial problem for developing a chart-like method 
is the fact that, in combining any two elements 
A,B ~ C, there is an infinite number of possible 
results C we could derive, and that what we in 
fact should derive depends not just on the for- 
mulae themselves, but upon other formulae that 
might combine with thai; result. More particu- 
larly, the reasoning needed to derive C is liable to 
involve hypothetical elements whose involvement 
is driven by the presence of some higher-order type 
elsewhere. 
F i rs t -Order  L inear  Deduct ion  
Let us t)egin by avoiding this latter l)roblem by 
considering the fl'agment involving only first-order 
fbrmulae, i.e. those defined by S ::= fl. t Yo--A, 
and furthermore allow only atomic goals (i.e. so 
A is atomic in any F ~ A). Consequently, tile 
\[o-I\] rule is not required, and hypothetical rea- 
soning excluded. In combining types using just 
the remaining elimination rule, we must still en- 
sure linear use of resources, i.e. that no resource 
may be used inore than once in any deduction, 
and that in any overall deduction, every resource 
has been used. These requirements carl be en- 
forced using an indexation method, whereby each 
initial forinula in our dat, at)ase is marked with a 
unique index (or strictly a single(era set contain- 
ing that index), and where a formula that results 
ti'om a combination is inarked with the union of 
the index sets of the two formulae combined. 4 We. 
can ensure that no initial assumption contributes 
more than once to any deduction by requiring that 
wherever two tbrmulae are combined, their index 
sets must be disjoint. Thus, we require the fol- 
lowing modified \[o-El rule (where ?, '~/~, vrarc'. index 
sets, and t0 denotes union of sets that are required 
to be disjoint): 
4): Ao-B : a '~/~ :B : b 
? - (bao',/~ 
7r: A: (all) 
In proving I' => A, a snccessflfl ow',rall analysis is 
recognised by the prescmee of a database formula 
4See Llord & Morrill (1995) fbr a related use of 
indexing in ensuring linear use of resources. 
A whose index set is the flfll set of indices as- 
signed to the initial formulae in P. For' example, 
to prove Xo-X, Xo-X,  Xo--Y, Y => X, we might 
start with a database containing entries as fbllows 
(the tmmbering of entries is purely for exposition): 
I. i :Xo- -X :v  
2. j : Xo -X  : w 
3. k :Xo-Y :z  
4. l :Y :y  
Use of the modified elimination rule gives addi- 
tional fornmlae as follows: 
5. {k , /} :  X: zy  \[3+4\] 
6. {i, k, 1}: X: v(a:y) \[1-t-5\] 
7. {j, k, l}: X: w(zy) \[2-1-5\] 
8. {i , j ,k ,1}:X:v(w(xy))  \[1+7\] 
9. {i, j ,k, l}:X:w(v(a:y)) \[2+6\] 
There are two successful analyses, numbered 8 and 
9, which we recognise by the fact that they have 
the intended goal type (X), and are indexed with 
the full set of the indices assigned to the initial 
left hand side fornmlae. Note that the formula 
mnnbered 5 contributes to both of tile sucessflfl 
overall mtalyses, without needing to be recom- 
tinted. Hence we can see that we have already 
gained the key benefit of a chart approach for PSG 
parsing, nanmly avoiding the need to recompute 
partial results. It can be seen that indexing in 
the above method plays a role sinfilar to that of 
'spans' within standard (:hart parsing. 
An adequate algorithm for use with the above 
approach is easily stated. Given a possible the- 
orem Br, . . .  ,Bn => A, tire left hand side formu- 
lae are each assigned unique indices and semantic 
variables, and t)ul; on ail agenda. Then, a loop 
is followed in which a formula is .taken from the 
agenda and added to the database, and then the 
next formula is taken from the agenda and so on 
until the agenda is empty. Whenever a formula 
is added to the datahase, a check is made to see 
if it can combine with formulae ah'eady there, in 
which (:as(; new formulae are generated, which are 
added to tile agenda. When the agenda is empty, 
a check is made for any successful overall analsy- 
ses, identified as described above. Note that since 
the result of a combination always bears an index 
set larger than either of its parent formulae, and 
since the maximal index set that any fornmla c~n 
carry includes all and only the indices assigned 
to the original left hand side formulae, the above 
process nmst terminate. 
Higher -Order  L inear  Deduct ion  
I,et us turn now to the general case, where higher- 
order formulae are allowed. The method to be 
described involves compiling tile initial formulae 
(which may be higher-order) to give a new, possi- 
bly larger, set; of formulae which arc; all tirst order. 
We observed above how hypothetical reasoning in 
a proof is driven by the presence within higher- 
order fornuflae of positively occurring subforinu- 
539 
lae. The compilation inethod involves identify- 
ing and excising such subformulae (thereby sim- 
plifying the containing formulae) and including 
them as additional assumptions. For example, 
this method will simplify the higher-order formula 
Xo- (Yo-Z)  to become Xo--Y, generating an addi- 
tional assumption of Z. The two key challenges for 
such an approach are firstly ensuring that the ad- 
ditional assumptions are appropriately used (oth- 
erwise invalid reasoning will follow), and secondly 
ensuring that a proof term appropriate to the orig- 
inal type combination is returned. 
Consider an attempt o prove the (invalid) type 
combination: Xo-Zo- (Yo-Z) ,  Y => X. Compila- 
tion of the tbrmula Xo-Zo- (yo -Z)  yiehls two for- 
mulae Xo--Zo-Y and Z, so tile initial query be- 
comes Xo-Zo-Y ,  Z, Y => X, which is provable. 
The problem arises due to inappropriate use of the 
additional formula Z, which should only be used 
to prove the argument Y (just as Z's role wouhl 
be to contribute to proving the argument Yo-Z 
in a standard proof involving the original formula 
Xo-Zo-(Yo--Z)).  The solution to this problem re- 
lies upon the indexing method adopted above. 
The additional assumption generated in compiling 
a higher-order formula such as Xo--(yo-Z) will it- 
self be marked with a unique index. By recording 
this index on tile argument position from which 
the additional assumption was generated, we can 
enforce the requirement that the assumption con- 
tributes to the derivation of that argument. Note 
that a single argument position inay give rise to 
inore dmn one addil;ional assumption, and so in 
fact all index set that should be recorded. For ex- 
ample, The (indexed) formula i: Xo - (yo -Zo-W)  
will compile to give three indexed formulae: 
i :Xo-(Y:{ j ,k})  j :Z  k :W 
We, require a inodified elimination rule that will 
enforce appropriate usage: 5
? : Ao - (B : r t )  : a '~/~: B : b ~r = eU~/~ 
7r:A: (ab) 
Note that the compilation process must also gen- 
crate additional assumptions corresponding to the 
positive subformulae of the right hand side of a 
query, e.g. compilal;ion of Xo-Y, Yo-Z ~, Xo-Z 
simplifies the right hand side formula to atomic 
X, giving and additional assumption Z. 
The second challenge we noted for such an ap- 
proach is ensuring that a proof term (loosely, the 
SNore the requirement that (t is a proper subset of 
,/~, which will have the consequence that other assump- 
tions must also contrihute to deriving the argunwnt 
B. This will block a derivation of the linear logically 
valid Xo- (yo -Y )  => X. However, this move accords 
with general categorial practice, where it is standm'd 
to require that each deduction rests m, at least one as- 
sumption. The alternative regime is easily achieved, 
by making the condition c~ C ~/). 
'serum:tic recipe' of the combination) ai)propriate 
to the original type, combination is returned. Let 
us illustrate how this can be achieved with a sim- 
ple example. Consider the following proof: 
Xo- (Yo-Z)  : z ro -W:y  Wc-Z  :,w \[Z:z\] 
W:wz 
Y : y(wz) 
Yo-Z  : Az.y(wz) 
Deriving the argument Yc -Z  of the higher-order 
fornmla involves a final introduction steI), whk:h, 
semanl;ically, corresponds l;o an abstraction step 
that binds the variable semantics of l;he additional 
assuinption Z. The possibility arises that, compila- 
tion inight insert tile absl;rael~ion i to the seman- 
tics of the compiled tbrmula, so that it latex' binds 
the variable of the additional formula. For exam- 
ple, coinpilation of Xo-  (Yo-Z) lnight yield Xo-Y  
with term Ay.z(Az.y) and Z with variable term z, 
so that combining the former with some formula 
derived from the latter (i.e. whose tern\] included 
z) would cause the free occurrence of z to become 
bound, giving a result such as x(iz.f(z)). In that 
case, we can see that all;hough C, olnpilation has 
eliminated the need tbr an explicit introduction 
step in the proof, the, sl;ep still occurs imtflicitly 
ill the semantics. 
Of course, anyone familiar with lambda calcu- 
lus will immediately spot the flaw in the preced- 
ing proposal, namely that the substitution process 
that is used in ~-conversion is careflllly stated to 
avoid such 'accidental binding' of w~riables (by re- 
naIning bound variables, wherever equired). We 
will instead use a special variant of substition 
which specifically does not act to avoid accidental 
binding, notated __\[_//~\] (e.g. t,\[s//'v\] to indicate 
substitution of s R)r v in t). Not(; that tim assign- 
ment of term variables in the apt)roach in general 
is such that other eases of 'accidental binding' (i.e. 
beyond those that we want) wilt not occur, in- 
corporating this idea, we arrive at the fbllowing 
(final) version of tile elimination rule 
? : Ao-- (B:(~) : kv.a '~/J :B : b c,C ~ -- ~'~/~ 
re: A: a\[b//v\] 
Note that the form of the rule requires the, im- 
plicational formula 1;hat; it, operates 111)Oll ;o t)e of a 
certain forin, i.e. involving an at)strael;ion (Av.a). 
This requirement is met by all implieationals, (as 
a side effect of the (:ompilation process. 
A precise statement of the compilation proce- 
dure (r) is given in Figure. 1. This takes a sequent 
F ~ A:x as input, where every left aml right hand 
side formula is labelled wil;h a Ulfique variable, and 
returns a strucl;ure (A, (? : G : u)), where A is a 
set, of indexed tirst order formulae, ? is the flfll 
540 
T(X l  : 'd ' l , . . . ,  Xn : ~1~,1, 0 X0 : a;0) :.: (~ ,  ((/) : (~ : ?t)) 
where, i0 , . . . ,  i~ \[resh i,t(li(:('.s 
neg(i0 :X0 :x0)  = ( i0 :G :u)WI '  
A : FUpos(il : X1 :x , )  
U .  , . 
Upos(i,~ : X,~ : 'a:,,.) 
(/, :- indices(A). 
,,o~(,: x :  t):-- ( i :  x :/,) whe~e X a,;omi(:. 
post,: : X~ o-y, :/,) (,i: x~( r , , ,  : (/,) : ~,,..~) 
LJF tJ A 
whe,'e neg('i : \]q : '.) = ( i '}~ : '.)~Ul ~ 
(v a hesh variabh 0
pos( i  : X l  : (t',))) : ( i :  X 2 : ,';)l~Jz~ 
(/~--indices(l'). 
,eg( i :X :v )  =: ( i :  X:v)  whereXa. tomic .  
neg( i :X lo -}q  :u )__ ( i :X2 :w)O l 'UA 
where v. :-: Av.:r (v, :c fresh variables) 
neg(i : X, : z) = ( i :  X2 : w)Ul ~ 
pos( j  : r, : v ) :=  A ( j  a fr(;sh in, lex). 
Figure \] : The COml)iladon pro(:edure 
set; of indices, (\] is an atx)mi(: Goal I;yp(',, and u a 
variable, l,et A* denote the result; of (:losiug A 
under (,he elimination rule. The, sequent ix proven 
iJ)" (() : G : u) (~ A* fi)r some assigmnent of a 
vahle 1;o 'a. Under t;hat assignment, the original 
right hand side va.riable x will return a (:omplete 
proof term for the imi)lMt I)roof of the original 
s(;qll(:IIIL Not, c {;hal l,he t)i'ot)f Lerllhq so t)ro(hlce(l 
have a form whi(:h (:orrest)onds, (m(h;r l;he Curry- 
l loward isomorphism, to itormal form dedu(:l;ions 
(as defin(xl earlier). 
A simt)le example. Compilat ion of the sequent: 
Xo- (Yo -Z)  :x, Yo--W:y,  Wo-Z :w ~ X :v  
yields the goal Sl)ecification ({i, j, k, 1} :X :v )  and 
fl)rmulae 11-4, with t'ormulae 5-7 m'ising under com- 
binat;ion. Formula 7 meet;s t;he, goal spe(:ith:ation, 
so th(; inil;ial sequent ix proven, with l)roof term 
m()~Z.y(Wz) ) rel;urned. 
I. i :Xo~(y:{j}):Au.z(Az., , , )  
2. j :Z :z  
3. k: Yo -W : A'u.y'u 
4. 1 : Wo-Z  : )vu.'w',, 
5. { j , l} :W:wz  \[2+4\] 
6. { j ,k ,~}:  v::q(~,,~) \[a+~\] 
7. {,:, j, k, l}: x :  :,;(A~.,(,,,,~)) \[7l+6\] 
The indexed firsl;-ord(;r formulae generate(1 by 
the comI)ilation procedure can t)e processe, d us- 
ing t)recisely the same algoril;hm as that des(:ribed 
above for handling formulae of the iirsl>order fl'ag~ 
men% with precisely the same benctit, i.e. avoid- 
ing re(:ompul:ation of I)artiM results. 
Some efti(:iency questions tMse. Imagine a Pro- 
log implementat ion of the method, with indexed 
fornmlae being stored as facts ('edges') in the Pro- 
h)g database. An imt)orl;ant, overhead will arise 
wh(;n adding an agenda item to the dal;al)ase fl'om 
lo(:~dng those, lbrmub~ Mrea(ly there that the cur- 
reid; t'orilltlla (:all combine with,  i.e. if we ltlllSI; 
separat( Jy access every formula Mready stored to 
ewduate if in(l(,xation requiremelltS are satisii(d, 
a .d  (:oml)iIladon possil)le. Note firstly dmt,, since 
(:omt)ih'd formulae are all tirst-order, if we are 
a<tding an alomi(: f(>rmula we nee,(t (>nly h)ok to 
stored iml)li(:atiomfl formula.e for possible (:oral)i-. 
nations, and vice versa. 'Fhis is easily a<:hiev(xl. 
'l'he prol>h'm (>f (',valuating in<lexation require,- 
ments can be (~ase(11)y using at bit-vector e,n(:o(ling 
of in(h',x sets. The, (:Oml)iladon t)rocess will return 
a full set 1 of l:he mfi(lUe iudices assigmxl to any 
\[brnntlae. If we impose an arbitrary ord(n ()vet 
dm elements of this sol;, we (:&n then (m(:o(h~ l;he 
exl;eltsiolt Of al ly il l(lex set; We edl(;Ollill;er ttsillg aii 
'n-1)la(:e bitove(:tor, where n is the c}udinality of l, 
i.e. if some, index set (:ontains the it;h ('\]e,m('m, of
(ordered) 1, then the ii;h eh'ment of its bil>v(w,l;()r 
is 1, otherwis(~ 0. \[t is uscl'ul to store fiflly sp(',c- 
ilie(l bit-vectors with al;omi(: formula(;, specifying 
l;heir imh'x set. For iml)li(:adonal fornmla, how-. 
ever, it is usehfl to store a. 1)it-ve,(:tor (m(:oding its 
'requireme, nt.s for an appropr iately indexed argu  
menl;, i.e. with 0s instantiate(l for tim (;\]em(!nts of 
the impli(:ational's own index sel; (to enfor(:(! dis- 
join(hess of index s(;ts), and with \] s a, pl)ea.ring; for 
those indi(:e,s that it requires hay(! l)e(m inv()lved 
in de, riving the argument.  Other 1)ositi()ns will 1)e 
tilled with anonymous variM)les. The bil:-vet:tors 
for an imt)li(:ational and an at()mi(', formula will 
m;~t(:h just in case I:hcy ~r('~ permil;tcd tx) (:oml)inc, 
a(:(:or(ting to in(lexal;ion requir(;ments. (Tim one 
shortfM1 here is thai; tim the(hod allows the impli- 
(:al,ioiml (;o spe(:ify t;ha.t (:crtain indices are a sub- 
sel; of those of l;he argumellt, but not that  tlmy are 
a proper subset l;hereof.) l ly storing su(:h vet;tots 
with formulae in the datalm.se, indexation require- 
ments cam l)e, (:he(:ked by the process of mat(:hing; 
1;o the d~tabase, so dial; only at)prot)riate, entries 
;~re brought out for further examination, 
4 Labe l l ing  and  Lambek Ca lcu lus  
As dis(:usscd in the introduction, tim above 
method is proposed as a generM method for pars- 
ing (:ategorial systems, via a trant'ormation of 
formulae \['tom the relevatfl; system to l inem tbr- 
mulae. Such translation shouhl induce lal)ellittg 
(hal imi)orts  the cons(fronts of ttlc~ originM weaker 
logic. \[n that case,, although we employ a general 
method for iml)lieationM line, ar deduction, the re- 
suits we derive will I)e all and only those that; re- 
tie(:(, validity of the weaker system. I will i l lustrate 
this idea by considering one of two such transla- 
tion methods described by Morrill (1995). This 
method is based on a. relational algebraic model 
for L (van l{enthem, 1991), which inl;erprets types 
as relent, ions on some set V (intuitively, pointal 
541 
string positions), i.e. sets of ordered pairs from 
V x V (intuitively, strings identified by delimiting 
points): 
D(A\B)  = {(vz,v3) \[ V {vl,v2) C D(A), 
(vl,v3) e D(B)} 
D(B/A)  = {(vl,v2) I V (v2,v3) C D(A), 
(Vl, V3) e D(B)} 
Morrill specifies polar translation functions, 
which convert Lambek types that are marked 
for position ('span') to labelled linear formulae. 
The translation functions are identity functions on 
atomic formulae, and for complex formulae are de- 
fined mutually as follows (where each superscript 
p stands for one of the functions, with i0 indicating 
the complementary function to p): 
i - k : B p o- i - j : A ~ where i is a new 
variable/constant 
j - k : A \B  p as p is +/ -  
i - k : B p o-- j - k : A p where k is a new 
variable/constant 
aspis +/ -  i - j  :B/AV 
A sequent B1, ?. ?,/3n =~ A is translated as: 
O- l :B l+, . . . , (n -1 ) -n :B  + ~ O-n:A-  
For example, X/(Y/Z),  Y/W, W/Z ::> X trans- 
lates to give the following linear formulae (where 
i , j ,  1 are variables, and k a constant): 
Database: (0 - i:X)o-((2 - k:Y)o-(i  - k:Z)) 
(1 - j :Y)o-(2 - j:W) 
(2 - l :W)o-(3 - I:Z) 
Goal: (0 - 3:X) 
Such linear formulae can be used with any linear 
deduction method, given the (trivial) additional 
task of unifying variables and constants in the 
string position labels. Note that for cases that are 
not L valid, but where the translation is linear log- 
ically valid, deduction will fail due to unification 
failure for string position labels. A minor com- 
plication arises for using this approach with the 
compilation-chart method described above. For 
example, the higher-order formula would compile 
to two indexed formulae: 
a:(0 - i:X)o-(2 - k:Y):Ay.x(Az.y) 
b:(i - k:Z):z 
Note that the string position variable i appears in 
both resulting formulae. For an overall deduction 
employing these two formulae to be correct, the 
binding of the two instances of i must be consis- 
tent. However, we cannot simply employ a global 
binding context since the chart method should be 
able to return alternative proofs of the same theo- 
rem, and such alternative proofs will typically in- 
duce distinct (but internally consistent) bindings 
over string position variables. Variable bindings 
must instead be handled locally, i.e. each formula 
in the database will carry with it a context indicat- 
ing bindings that have been made in its derivation. 
Where two formula are combined, their contexts 
are merged (and must be consistent). 
References 
van Benthem, J. 1991. Languagc in Action: Cat- 
egories, Lamdas and Dynamic Logic. Studies in 
Logic and the Foundations of Mathematics, vol 
130, North-Holland, Amsterdam. 
Gabbay, D.M. 1994. Labelled deductive systems. 
Part I: Foundations. Oxford University Press 
(to appear). First draft 1.989, current draft, May 
1994. 
ttendriks, It. 1992. 'Lambek Semantics: normal- 
isation, spurious ambiguity, partial deduction 
and proof nets', Proc. of Eighth Amsterdam 
Colloquium, ILLI, University of Amsterdam. 
Hepple, M. 1990. 'Normal form theorem proving 
for the Lambek calculus', Proc. of COLING-90. 
Hepple, M. 1992. ' Chart Parsing Lambek Gram- 
mars: Modal Extensions and Incrementality', 
Proc. of COL1NG 92. 
Hepple, M. 1995. 'Mixing Modes of Linguistic 
Description in Categorial Grammar', Proceed- 
ings EA CL - 7, Dublin. 
KSnig, E. 1989, 'Parsing as natural deduction', 
Pwc. of ACL-25. 
KSnig, E. 1990, 'The complexity of parsing 
with extended categorial grammars', Proc. of 
COLING 90. 
Lambek, J. 1958. The mathematics of sentence 
structure. American Mathematical Monthly 65. 
Llor6, F.X. & Morrill, G. 1995. 'Difference Lists 
and Difference Bags for Logic Programming 
of Categorial Deduction', Pwc. of SEPLN XI, 
Duesto. 
Moortgat, M. 1992. 'Labelled deductive sys- 
tems for categorial theorem proving', Proc. of 
Eighth Amsterdam Colloquium, ILLI, Univo4"- 
sity of Amsterdam. 
Moortgat, M. & Oehrle, R. 1994. 'Adjacency, 
dependency and order'. Proc. of Ninth Ams- 
terdam Colloquium. 
Moortgat, M. & Morrill, G. 1991. 'Heads and 
Phrases: Type Calculus for Dependency and 
Constituency.' To appear: Journal of Lan- 
guage, Logic and Information. 
Morrill, G. 1994. ~l}jpe Logical Grammar: Cat- 
egorial Logic of Signs. Kluwer Academic Pub- 
lishers, Dordrecht. 
Morrill, G. 1995. 'Higher-order Linear Logic Pro- 
gramming of Categorial Dedution', Proc. of 
EA CL- 7, Dublin. 
Prawitz, D. 1965. Natural Deduction: a Proof 
Theoretical Study, Almqvist and Wiksell, Upp- 
sala. 
Roorda, D. 1991. Resource Logics: Proof Theo- 
retical Investigations. Ph.D. Dissertation, Am- 
sterdam. 
542  
