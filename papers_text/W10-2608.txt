Proceedings of the 2010 Workshop on Domain Adaptation for Natural Language Processing, ACL 2010, pages 53?59,
Uppsala, Sweden, 15 July 2010. c?2010 Association for Computational Linguistics
Frustratingly Easy Semi-Supervised Domain Adaptation
Hal Daume? III
School Of Computing
University of Utah
hal@cs.utah.edu
Abhishek Kumar
School Of Computing
University of Utah
abhik@cs.utah.edu
Avishek Saha
School Of Computing
University of Utah
avishek@cs.utah.edu
Abstract
In this work, we propose a semi-
supervised extension to a well-known
supervised domain adaptation approach
(EA) (Daume? III, 2007). Our proposed
approach (EA++) builds on the notion
of augmented space (introduced in EA)
and harnesses unlabeled data in target do-
main to ameliorate the transfer of infor-
mation from source to target. This semi-
supervised approach to domain adaptation
is extremely simple to implement, and can
be applied as a pre-processing step to any
supervised learner. Experimental results
on sequential labeling tasks demonstrate
the efficacy of the proposed method.
1 Introduction
A domain adaptation approach for sequential la-
beling tasks in NLP was proposed in (Daume?
III, 2007). The proposed approach, termed
EASYADAPT (EA), augments the source domain
feature space using features from labeled data in
target domain. EA is simple, easy to extend and
implement as a preprocessing step and most im-
portantly is agnostic of the underlying classifier.
However, EA requires labeled data in the target
and hence applies to fully supervised (labeled data
in source and target) domain adaptation settings
only. In this paper, we propose a semi-supervised1
(labeled data in source, and both labeled and un-
labeled data in target) approach to leverage unla-
beled data for EASYADAPT (which we call EA++)
and empirically demonstrate its superior perfor-
mance over EA as well as few other existing ap-
proaches.
1We refer, labeled data in source and only unlabeled data
in target, as the unsupervised domain adaptation setting.
There exists prior work on supervised domain
adaptation (or multi-task learning) that can be re-
lated to EASYADAPT. An algorithm for multi-
task learning using shared parameters was pro-
posed (Evgeniou and Pontil, 2004) for multi-task
regularization where each task parameter was rep-
resented as sum of a mean parameter (that stays
same for all tasks) and its deviation from this
mean. SVM was used as the base classifier
and the algorithm was formulated in the standard
SVM dual optimization setting. Subsequently,
this framework (Evgeniou and Pontil, 2004) was
extended (Dredze et al, 2010) to online multi-
domain setting. Prior work on semi-supervised
approaches to domain adaptation also exists in lit-
erature. Extraction of specific features from the
available dataset was proposed (Arnold and Co-
hen, 2008; Blitzer et al, 2006) to facilitate the
task of domain adaptation. Co-adaptation (Tur,
2009), a combination of co-training and domain
adaptation, can also be considered as a semi-
supervised approach to domain adaptation. A
semi-supervised EM algorithm for domain adap-
tation was proposed in (Dai et al, 2007). Sim-
ilar to graph based semi-supervised approaches,
a label propagation method was proposed (Xing
et al, 2007) to facilitate domain adaptation. The
recently proposed Domain Adaptation Machine
(DAM) (Duan et al, 2009) is a semi-supervised
extension of SVMs for domain adaptation and
presents extensive empirical results. However, in
almost all of the above cases, the proposed meth-
ods either use specifics of the datasets or are cus-
tomized for some particular base classifier and
hence it is not clear how the proposed methods
can be extended to other existing classifiers.
EA, on the other hand, is remarkably general in
the sense that it can be used as a pre-processing
53
step in conjunction with any base classifier. How-
ever, one of the prime limitations of EA is its inca-
pability to leverage unlabeled data. Given its sim-
plicity and generality, it would be interesting to
extend EA to semi-supervised settings. In this pa-
per we propose EA++, a co-regularization based
semi-supervised extension to EA. We present our
approach and results for a single pair of source
and target domain. However, we note that EA++
can also be extended to multiple source settings.
If we have k sources and a single target domain
then we can introduce a co-regularizer for each
source-target pair. Due to space constraints, we
defer details to a full version.
2 Background
2.1 Problem Setup and Notations
Let X ? Rd denote the instance space and Y
= {?1,+1} denote the label space. We have a set
of source labeled examples Ls(? Ds(x, y)) and
a set of target labeled examples Lt(? Dt(x, y)),
where |Ls| = ls ? |Lt| = lt. We also have target
unlabeled data denoted by Ut(? Dt(x)), where
|Ut| = ut. Our goal is to learn a hypothesis h :
X 7? Y having low expected error with respect to
the target domain. In this paper, we consider lin-
ear hypotheses only. However, the proposed tech-
niques extend to non-linear hypotheses, as men-
tioned in (Daume? III, 2007). Source and target
empirical errors for hypothesis h are denoted by
??s(h, fs) and ??t(h, ft) respectively, where fs and
ft are source and target labeling functions. Sim-
ilarly, the corresponding expected errors are de-
noted by ?s(h, fs) and ?t(h, ft). Shorthand no-
tions of ??s, ??t, ?s and ?t have also been used.
2.2 EasyAdapt (EA)
In this section, we give a brief overview of
EASYADAPT proposed in (Daume? III, 2007). Let
us denote Rd as the original space. EA operates
in an augmented space denoted by X? ? R3d (for a
single pair of source and target domain). For k do-
mains, the augmented space blows up to R(k+1)d.
The augmented feature maps ?s,?t : X 7? X? for
source and target domains are defined as,
?s(x) = ?x, x, 0?
?t(x) = ?x, 0, x? (2.1)
where x and 0 are vectors in Rd, and 0 de-
notes a zero vector of dimension d. The first d-
dimensional segment corresponds to commonality
between source and target, second d-dimensional
segment corresponds to the source domain while
the last segment corresponds to the target domain.
Source and target domain features are transformed
using these feature maps and the augmented fea-
ture space so constructed is passed onto the un-
derlying supervised classifier. One of the most ap-
pealing properties of EASYADAPT is that it is ag-
nostic of the underlying supervised classifier be-
ing used to learn in the augmented space. Al-
most any standard supervised learning approach
for linear classifiers (for e.g., SVMs, perceptrons)
can be used to learn a linear hypothesis h? ? R3d
in the augmented space. As mentioned earlier,
this work considers linear hypotheses only and the
the proposed techniques can be extended (Daume?
III, 2007) to non-linear hypotheses. Let us denote
h? = ?hc, hs, ht?, where each of hc, hs, ht is of
dimension d and represent the common, source-
specific and target-specific components of h?, re-
spectively. During prediction on target data, the
incoming target feature x is transformed to obtain
?t(x) and h? is applied on this transformed fea-
ture. This is equivalent to applying (hc + ht) on
x.
A good intuitive insight into why this simple
algorithm works so well in practice and outper-
forms most state-of-the-art algorithms is given
in (Daume? III, 2007). Briefly, it can be thought to
be simultaneously training two hypotheses: ws =
(hc +hs) for source domain and wt = (hc +gt)
for target domain. The commonality between the
domains is represented by hc whereas the source
and target domain specific information is captured
by hs and ht, respectively. This technique can
be easily extended to a multi-domain scenario by
making more copies of the original feature space
((K +1) copies in case of K domains). A kernel-
ized version of the algorithm has also been pre-
sented in (Daume? III, 2007).
3 Using Unlabeled data
As discussed in the previous section, the
EASYADAPT algorithm is attractive because it
performs very well empirically and can be used in
conjunction with any underlying supervised clas-
54
sifier. One drawback of EASYADAPT is that it
does not make use of unlabeled target data which
is generally available in large quantity in most
practical problems. In this section, we propose a
semi-supervised extension of this algorithm while
maintaining the desirable classifier-agnostic prop-
erty.
3.1 Motivation
In multi-view approach for semi-supervised learn-
ing algorithms (Sindhwani et al, 2005), different
hypotheses are learned in different views. There-
after, unlabeled data is utilized to co-regularize
these learned hypotheses by making them agree
on unlabeled samples. In domain adaptation, the
source and target data come from two different
distributions. However, if the source and tar-
get domains are reasonably close to each other,
we can employ a similar form of regularization
using unlabeled data. A similar co-regularizer
based approach for unlabeled data was previously
shown (Duan et al, 2009) to give improved empir-
ical results for domain adaptation task. However,
their technique applies for the particular base clas-
sifier they consider and hence does not extend to
EASYADAPT.
3.2 EA++: EASYADAPT with unlabeled data
In our proposed semi-supervised extension to
EASYADAPT, the source and target hypothesis are
made to agree on unlabeled data. We refer to
this algorithm as EA++. Recall that EASYADAPT
learns a linear hypothesis h? ? R3d in the aug-
mented space. The hypothesis h? contains com-
mon, source and target sub-hypotheses and is ex-
pressed as h? = ?hc, hs, ht?. In original space
(ref. section 2.2), this is equivalent to learning a
source specific hypothesis ws = (hc + hs) and a
target specific hypothesis wt = (hc + ht).
In EA++, we want source hypothesis ws and
target hypothesis wt to agree on unlabeled data.
For some unlabeled target sample xi ? Ut ? Rd,
EA++ would implicitly want to make the predic-
tions of wt and wt on xi to agree. Formally, it
aims to achieve the following condition:
ws ? xi ? wt ? xi
?? (hc + hs) ? xi ? (hc + ht) ? xi
?? (hs ? ht) ? xi ? 0
?? ?hc, hs, ht? ? ?0, xi, ?xi? ? 0.
(3.1)
We define another feature map ?u : X 7? X? for
unlabeled data as below:
?u(x) = ?0, x, ?x?. (3.2)
Every unlabeled sample is transformed using the
map ?u(.). The augmented feature space that re-
sults from the application of three feature maps,
namely, ?s : X 7? X?,?t : X 7? X?,?u : X 7?
X? , on source labeled samples, target labeled sam-
pled and target unlabeled samples is summarized
in Figure 1.
As shown in Eq. 3.1, during the training phase,
EA++ assigns a predicted value close to 0 for each
unlabeled sample. However, it is worth noting
that, during the test phase, EA++ predicts labels
from two classes: +1 and ?1. This warrants
further exposition of the implementation specifics
which is deferred until the next subsection.
EA++
EA
0
0
d d d
                                     
                                     
                                     
                                     
                                     
                                     
                                     
                                     
                                     









0
LsLs
Lt Lt
Ut ?Ut
ls
lt
ut
Figure 1: Diagrammatic representation of feature
augmentation in EA and EA++
Algorithm 1 presents the EA++ approach in de-
tail.
3.3 Implementation
In this section, we present implementation specific
details of EA++. We consider SVM as our base
supervised learner (LEARN in Algorithm 1).
However, these details hold for other supervised
55
Algorithm 1 EA++
Input: Ls; Lt; Ut; LEARN : supervised clas-
sifier
Output: h? : classifier learned in augmented
space
/* initialize augmented training set */
1: P := {}
/* construct augmented training set */
2: ?(x, y) ? Ls, P := P ? {?s(x), y}
3: ?(x, y) ? Lt, P := P ? {?t(x), y}
4: ?x ? Ut, P := P ? {?u(x), 0}
/* output learned classifier */
5: h? = LEARN (P )
classifiers too. In the dual form of SVM optimiza-
tion function, the labels are multiplied with the in-
ner product of features. This can make the un-
labeled samples redundant since we want their la-
bels to be 0 according to Eq. 3.1. To avoid this, we
create as many copies of ?u(x) as there are labels
and assign each label to one copy. For the case of
binary classification, we create two copies of ev-
ery augmented unlabeled sample, and assign +1
label to one copy and ?1 to the other. The learner
attempts to balance the loss of the two copies, and
tries to make the prediction on unlabeled sample
equal to 0. Figure 2 shows the curves of the hinge
loss for class +1, class ?1 and their sum. The ef-
fective loss for each unlabeled sample is similar to
the sum of losses for +1 and ?1 classes (shown in
Figure 2c).
4 Experiments
In this section, we demonstrate the empirical per-
formance of EA augmented with unlabeled data.
4.1 Setup
We follow the same experimental setup used
in (Daume? III, 2007) and perform two sequence
labelling tasks (a) named-entity-recognition
(NER), and (b) part-of-speech-tagging (POS )on
the following datasets:
PubMed-POS: Introduced by (Blitzer et al,
2006), this dataset consists of two domains.
The WSJ portion of the Penn Treebank
serves as the source domain and the PubMed
abstracts serve as the target domain. The
Lo
ss
Lo
ss
Lo
ss
(a)
(b)
(c)
Figure 2: Loss functions for class +1, class ?1
and unlabeled samples.
task is to perform part-of-speech tagging on
unlabeled PubMed abstracts with a classifier
trained on labeled WSJ and PubMed data.
Treebank-Brown. Treebank-Chunk data consists
of the following domains: the standard WSJ
domain (the same data as for CoNLL 2000),
the ATIS switchboard domain and the Brown
corpus. The Brown corpus consists of data
combined from six subdomains. Treebank-
Chunk is a shallow parsing task based on
the data from the Penn Treebank. Treebank-
Brown is identical to the Treebank-Chunk
task, However, in Treebank-Brown we con-
sider all of the Brown corpus to be a single
domain.
Table 1 presents a summary of the datasets
used. All datasets use roughly the same feature
set which are lexical information (words, stems,
capitalization, prefixes and suffixes), membership
on gazetteers, etc. We use an averaged perceptron
classifier from the Megam framework (implemen-
tation due to (Daume? III, 2004)) for all the afore-
mentioned tasks. The training sample size varies
from 1k to 16k. In all cases, the amount of unla-
beled target data was equal to the total amount of
labeled source and target data.
56
Task Dom #Tr #De #Te #Ft
PubMed src 950,028 - - 571k
POS tgt 11,264 1,987 14,554 39k
wsj 191,209 29,455 38,440 94k
swbd3 45,282 5,596 41,840 55k
br-cf 58,201 8,307 7,607 144k
Tree br-cg 67,429 9,444 6,897 149k
bank- br-ck 51,379 6,061 9,451 121k
Chunk br-cl 47,382 5,101 5,880 95k
br-cm 11,696 1,324 1,594 51k
br-cn 56,057 6,751 7,847 115k
br-cp 55,318 7,477 5,977 112k
br-cr 16,742 2,522 2,712 65k
Table 1: Summary of Datasets. The columns de-
note task, domain, size of training, development
and test data sets, and the number of unique fea-
tures in the training data.
4.2 Results
We compare the empirical performance of
EA++ with a few other baselines, namely, (a)
SOURCEONLY (classifier trained on source la-
beled samples), (b) TARGETONLY-FULL (classi-
fier trained on the same number of target labeled
samples as the number of source labeled samples
in SOURCEONLY), (c) TARGETONLY (classifier
trained on small amount of target labeled sam-
ples, roughly one-tenth of the amount of source la-
beled samples in SOURCEONLY), (d) ALL (clas-
sifier trained on combined labeled samples of
SOURCEONLY and TARGETONLY), (e) EA (clas-
sifier trained in augmented feature space on the
same input training set as ALL), (f) EA++ (clas-
sifier trained in augmented feature space on the
same input training set as EA and an equal amount
of unlabeled target data). All these approaches
were tested on the entire amount of available tar-
get test data.
Figure 3 presents the learning curves for
(a) SOURCEONLY, (b) TARGETONLY-FULL, (c)
TARGETONLY, (d) ALL, (e) EA, and (f) EA++
(EA with unlabeled data). The x-axis repre-
sents the number of training samples on which
the predictor has been trained. At this point,
we note that the number of training samples
vary depending on the particular approach being
used. For SOURCEONLY, TARGETONLY-FULL
and TARGETONLY, it is just the corresponding
number of labeled source or target samples, re-
spectively. For ALL and EA, it is the summa-
tion of labeled source and target samples. For
0.1
0.2
0.3
0.4
0.5
4000 8000 12000 16000
e
rr
o
r 
ra
te
number of samples
SrcOnly
TgtOnly-Full
TgtOnly
All
EA
EA++
(a)
0.1
0.2
0.3
0.4
0.5
4000 8000 12000 16000
e
rr
o
r 
ra
te
number of samples
SrcOnly
TgtOnly-Full
TgtOnly
All
EA
EA++
(b)
Figure 3: Test accuracy of (a) PubMed-POS and
(b) Treebank-Brown for, SOURCEONLY, TARGE-
TONLY-FULL, TARGETONLY, ALL, EA and
EA++.
EA++, the x-value plotted denotes the amount of
unlabeled target data used (in addition to an equal
amount of source+target labeled data, as in ALL
or EA). We plot this number for EA++, just to
compare its improvement over EA when using an
additional (and equal) amount of unlabeled target
data. This accounts for the different x values plot-
ted for the different curves. In all cases, the y-axis
denotes the error rate.
As can be seen in Figure 3(a), EA++ performs
better than the normal EA (which uses labeled
data only). The labeled and unlabeled case start
together but with increase in number of samples
their gap increases with the unlabeled case result-
ing in much lower error as compared to the labeled
case. Similar trends were observed in other data
sets as can be seen in Figure 3(b). We also note
that EA performs poorly for some cases, as was
57
shown (Daume? III, 2007) earlier.
5 Summary
In this paper, we have proposed a semi-supervised
extension to an existing domain adaptation tech-
nique (EA). Our approach EA++, leverages the
unlabeled data to improve the performance of EA.
Empirical results demonstrate improved accuracy
for sequential labeling tasks performed on stan-
dardized datasets. The previously proposed EA
could be applied exclusively to fully supervised
domain adaptation problems only. However, with
the current extension, EA++ applies to both fully
supervised and semi-supervised domain adapta-
tion problems.
6 Future Work
In both EA and EA++, we use features from
source and target space to construct an augmented
feature space. In other words, we are sharing fea-
tures across source and target labeled data. We
term such algorithms as Feature Sharing Algo-
rithms. Feature sharing algorithms are effective
for domain adaptation because they are simple,
easy to implement as a preprocessing step and out-
perform many existing state-of-the-art techniques
(shown previously for domain adaptation (Daume?
III, 2007)). However, despite their simplicity and
empirical success, it is not theoretically apparent
why these algorithms perform so well. Prior work
provides some intuitions but is mostly empirical
and a formal theoretical analysis to justify FSAs
(for domain adaptation) is clearly missing. Prior
work (Maurer, 2006) analyzes the multi-task reg-
ularization approach (Evgeniou and Pontil, 2004)
(which is related to EA) but they consider a cumu-
lative loss in multi-task (or multi-domain) setting.
This does not apply to domain adaptation setting
where we are mainly interested in loss in the target
domain only.
Theoretically analyzing the superior perfor-
mance of EA and EA++ and providing gener-
alization guarantees is an interesting line of fu-
ture work. One approach would be to model
the feature sharing approach in terms of co-
regularization; an idea that originated in the
context of multiview learning and for which
some theoretical analysis has already been done
(Rosenberg and Bartlett, 2007; Sindhwani and
Rosenberg, 2008). Additionally, the afore-
mentioned techniques, namely, SOURCEONLY,
TARGETONLY, ALL have been empirically com-
pared to EA and EA++. It would be interest-
ing to formally frame these approaches and see
whether their empirical performance can be justi-
fied within a theoretical framework.
References
Andrew Arnold and William W. Cohen. 2008. Intra-
document structural frequency features for semi-
supervised domain adaptation. In CIKM?08, pages
1291?1300, Napa Valley, California, USA.
John Blitzer, Ryan Mcdonald, and Fernando Pereira.
2006. Domain adaptation with structural correspon-
dence learning. In EMNLP?06, pages 120?128,
Sydney, Australia.
Wenyuan Dai, Gui-Rong Xue, Qiang Yang, and Yong
Yu. 2007. Transferring Naive Bayes classifiers
for text classification. In AAAI?07, pages 540?545,
Vancouver, B.C.
Hal Daume? III. 2004. Notes on CG and LM-BFGS
optimization of logistic regression. August.
Hal Daume? III. 2007. Frustratingly easy domain adap-
tation. In ACL?07, pages 256?263, Prague, Czech
Republic.
Mark Dredze, Alex Kulesza, and Koby Crammer.
2010. Multi-domain learning by confidence-
weighted parameter combination. Machine Learn-
ing, 79.
Lixin Duan, Ivor W. Tsang, Dong Xu, and Tat-Seng
Chua. 2009. Domain adaptation from multiple
sources via auxiliary classifiers. In ICML?09, pages
289?296, Montreal, Quebec.
Theodoros Evgeniou and Massimiliano Pontil. 2004.
Regularized multitask learning. In KDD?04, pages
109?117, Seattle, WA, USA.
Andreas Maurer. 2006. The Rademacher complexity
of linear transformation classes. In COLT?06, pages
65?78, Pittsburgh, Pennsylvania.
D. S. Rosenberg and P. L. Bartlett. 2007. The
Rademacher complexity of co-regularized kernel
classes. In AISTATS?07, San Juan, Puerto Rico.
Vikas Sindhwani and David S. Rosenberg. 2008.
An RKHS for multi-view learning and manifold
co-regularization. In ICML?08, pages 976?983,
Helsinki, Finland.
58
Vikas Sindhwani, Partha Niyogi, and Mikhail Belkin.
2005. A co-regularization approach to semi-
supervised learning with multiple views. In ICML
Workshop on Learning with Multiple Views, pages
824?831, Bonn, Germany.
Gokhan Tur. 2009. Co-adaptation: Adaptive
co-training for semi-supervised learning. In
ICASSP?09, pages 3721?3724, Taipei, Taiwan.
Dikan Xing, Wenyuan Dai, Gui-Rong Xue, and Yong
Yu. 2007. Bridged refinement for transfer learning.
In PKDD?07, pages 324?335, Warsaw, Poland.
59
