Construction of a modular and portable translation system 
Fu j io  NISIIIDA, Yoneharu FUJITA and Shi.nobu 'FAKAMATS\[I 
Department of Electrical Engineering, 
Faculty of Engineering, 
University of Osaka Prefecture, 
Saka\], Osaka, Japan 59\] 
i. Introduction 
In recent years the study of nlachJ ne 
t rans \ ] .a t ion  has made great  advances  and the 
t rans la t ion  system has been la rger  and compl icated  
wJ th  augment ing  fae i \ ]  \ ] t ies .  Fur thermore ,  most 
recently, many powerfu\[ workstations have been 
developed and wtrious MT systems for special 
purposes  are  ready  to be mounted on these  
workstations. 
\]in snch a state of affairs Jt will be needed 
that many MT systems are reorganized or re- 
constructed on a program module basis for easy 
modification lllaJ ntainance and transplantation. 
'\]'h:is paper has two purposes. One of th~i~l :{s to 
show a method of constructing an MT system ~'3" on 
a library module basis by the aids ~ a progralnming 
construction system called L-MAPS. ~) The M\]' system 
can be wr i t ten  in  any progranm~Jng language 
des ignated  by a user  i f  an appropr ia te  data  base and 
the appropr ia te  process ing  funct ions  are  imp\].emented 
in  advance .  For example,  i t  call be wr i t ten  in a 
coml)i\].er language l i ke  C \ ]aeguage,  which Js  
preferable for a workstation with a relative slow 
running machine speed. 4) 
The other purpose is to give a brief 
:introduction of a program generating system called 
Library-Modul.e Aided Program SynthesizJ ng system 
(abbreviated to \[,-MAPS ) running on a library module 
basis. L-MAPS permits us to write program 
specifications in a restricted natural \]anguage 
like Japanese and converts them to formal 
specifications. It refines the formal specifications 
using the library modules and geeerates a readable 
comment of tile refiined specification written in tlre 
above natural language every refinement in option. 
Tim convers ion  between fo rmal  express ions  and 
natura l  language express ions  i s  per formed 
e f f i c ient \ ]y  on a case  grammar bas is .  
? 2 ) :~)  2. Overview of  the MT system organ izat \ ] .on  
Our machine translation system is constructed 
on the intermediate expressions based on universal 
subframes of predicates and predicative nouns. It 
aims at a multiliugual transfer system. \[\]p to now, 
however ~ no universal precise semant J c category 
system over various languages has been constructed 
yet, and our MT system is compelled to work rather 
on a b i l ingua l  basis in  the selection of 
equ iva lent . s ,  
The f i r s t  vers io~of  the  par~q~ was wr i t ten  in 
an extended vers ion  " of  LINGOL - '~ ' .  I t  has  an 
adv ice  par t  and a semant ic  par t  in  each rewr i t ing  
ru le .  Both par ts  of  them pernl i t  users  to  descr ibe  
any L isp  program for  des ignat ing  deta i l s  of  the 
reduct ion  procedures .  These techn iques  used Jn 
LINGOL and ATN seem apparent ly  conven ient .  However, 
they  o f ten  make the data  par t  inseparab le  from the 
program par t  and br ing  an MT system to much 
complex i ty ,  and accord ing ly ,  p revents  app l i cab i l i ty  
of  tire programs o f  the MT system Lo another  
t rans la t ion  between other  languages .  
Recent ly ,  a rev ised  vers ion  of  our  MT system 
has been const ructed ,  rfhe main program or 
procedural part cons:i sts of uni f:i cat\] on arKl 
substJtut:ion, while the data part consists of frame 
knowledge rewriting ruins and word dictionaries. 
Rewriting ru\]es wi th arguments describe the 
details of the syntactic and semantic structure of 
the language explicitly. For example, the predicate 
part: of the Hornby's verb llattern VP\]3A of Eagl:ish 
is written as follows: 
PREDP( PRED-co:to,MOI):m , kl-C \]:t\],k2-c2:t2) 
--> VP( PRED-co:to,MOD:m ) NP(k\] -Cl : t \ ] )  
PP( k2-c2:TO-t 2) 
where PREDP, VP, NP and PP denote a PR\]'\]DJcage 
Phrase, a Verb Phrase, a Noun Phrase and a 
Prepositional Phrase respecively, k-c:t denotes a 
triple of a case label, a semantic category and a 
term and in denotes var:ious modal values such as 
tense an(\] aspect. These rewriting rules are 
tabnlated in several tab\] es :\[or an effJ (lent 
processJ ug. 
The parsing system first applies the syntactic 
par t  of  a rewr i t ing  ru le  to  that  of  a hand le  in  a 
reduction sequence of a given source sentence, ff 
tile system finds a unJf:iable rewriting rule, :it 
checks whether the semantic part is unifiable. \]'he 
category check of a term in a handle for the 
case-frame condition is processed by a special kind 
of unification under an interpretation that the term 
category in a rule :is a restricted variable. 
The intermediate expression of tile handle part 
is constructed by substituting the unified terms 
for the arguments in the left-hand side of the 
rewriting ru le .  
3. The L-MAPS system aud language conversion 
The L-MAPS system is costructed on a 
fundamental \].ibrary module basis. When a user gives 
a specification by referrkng to the libraly module, 
L-MAPS searches applJ(.:able library modules and 
refines the spa(if J cation by linking several modules 
or replacing :it by the detailed procedure called the 
Operation Part of an applicable library module. 
The formal specifications of programs as well 
as tile library modules are generally difficult for 
users to read and write correctly though they are 
efficient and rigorous for inachine operation. Hence, 
it is desirab\].e to rewrite the formal specification 
Jn a natural l.anguage. I.-MAPS performs a conversion 
between a restricted natural language expression 
and a fornlal language expression through the 
intermediate (or the internal) expression of the 
natural language expression with the aids of case 
\].abels. 
The conversion between a restricted natural 
language expression and the intermediate expression 
can be done Jn a similar manner to the conversion 
carried out in machine translation. 
Formal specifications generaJ.ly have different 
forms from those of the intermediate expressions. 
649 
The intermediate expression of a sentence takes the 
following form : 
(PRED:tp, Kl:tl ....... Kn:tn) (I) 
where PRED K1 and Kn are case labe\].s and tp tl 
and tn are terms corresponding to their cases? On 
the other hand, a procedure expression appearing in 
formal specifications as well as in a heading of 
each library module has tile following form: 
proc - labe l (K l ' : t l ' ,  K2 ' : t2 ' ,  . . . . .  K r i ' : tn ' )  (2) 
where the procedure name plays a role of the 
key word and it is constructed from the predicate 
term the object term and others of the intermediate 
expression? It is used for retrieving library 
modules app l i cab le  to a given spec i f i ca t ion .  
\].-MAPS performs the convers ion between the 
in termediate  express ion( I )  and the procedural  
express ion(2)  by a method s imi la r  to the case 
structure conversion between different languages. 
The conversion :ks applied not onJy to the 
const ruct ion  of a formal specJ f Jeat ion  from an 
informal specificatJ on written Jn restricted 
Japanese or English but also to the generation of 
Japanese or English comments on the refJ ned 
specifications generated by L-MAPS itself. 
4. Modularization of programs 
The revised MT system is reconstructed based on 
library modules by the aids of L-MAPS. Each library 
module has a structure as shown in Table i. 
Table 1 A part of library modules 
PROC: HANDLE_REDUCE(SO:reduced_sequence, OBJ:handle, 
INSTR:reduction rule, 
GOAL:new_reduce~_sequence) 
IN: GIVEN(OBJ:reduced_sequence,handle, 
reduction_rule) 
OUT: REDUCED_FORM(OBJ:new_reduced_sequence) 
ENTITYTYPE: ................................ 
OP: RULE_APPLY(OBJ:reduction_rule, PARTIC:handle, 
GOAL:reduced_symbol) 
BRARCIII(COND:EQUAL(reducedsymboI,NULL), 
OP:RETURN(FAIL)) 
FOR(COUNT:n,FROM:l,TO:-(stack_pointer, 
symbol_number ofhandle), 
OP:COPY(OBJ:reduced_sequence(n), 
GOAL:new_reducedsequence(n))) 
COPY(OBJ:reduced_symbol, 
GOAL:newreduced_sequence(+(n,l))) 
RETURN(TRUE) 
The heading of each module has both the 
procedural expression and the input-output predicate 
expression (abbreviated to the IO expression). 
Program specifications given by a user can call a 
module by using one of these headings. 
The IO expression consists of a pair of an 
input and an output predicate and asserts that the 
output predicate holds under the given input 
predicate. 
The IO expressions are used to automatically 
link some modules for a specification and to check 
linking of modules specified by their procedural 
expressions. 
The type part describes the types of regions 
structures and roles of input output or local 
variables. 
650 
Tile OP part describes the procedures for the 
~nnction assured in the heading part. \]'he procedures 
are described in a little more detail by using tile 
headings of more fundainental modules? 
Control statements are represented by using a 
prefixed-form of Pascal called the General Control 
Expression (abbrewkated to GCE,) here? The control 
statements are expanded into a programming language 
such as L:isp and C designated by users. Some 
conversion rules are shown in Table 2. 
Table 2 Conversion rules to objective lauguages 
IF TIIEN(CONI): p. OP: s .................... (GCE) 
(CORD (p s ) )  . . . . . . . . . . . . . . . . . . . . . . . .  (L isp)  
I F (p )  s ; . . . . . . . . . . . . . . . . . . . . . . . . . . .  (C) 
IF TIIEN_I~,LSE(COND: p, OPI: s l ,  OP2:s2  . . . .  (GCE) 
(CON:\[) (ps \ ] )  ( t  s2) )  . . . . . . . . . . . . . . . .  (L isp)  
IF(p)  s\] ELSE s2 ; . . . . . . . . . . . . . . . . . .  (C) 
FOR(COUNT: i ,  FROM: m, TO: n, OP: s) . . . . . .  (GCE) 
(SETQ J m) 
(\],OOP ()(CORD ((EQUAL i n) (EXIT-LOOP)) 
(T ~ (SETQ i (ADm i ) ) )  
))  . . . . . . . . . . . . . . . . . . . . . . . . . . .  (map)  
FOR(J = m; J <= n; J++) s . . . . . . . . . .  (C) 
? , o . 0 , o o ? . 0 . o ? .  . . . .  ~ , . 0 . o . o o o . . . . . o o ~  
o o o o , o o , , . 0 . o ~ , , , . o ~ 0 . ? o . . , . o o , . 0 ? ? . G  
Corresponding to tlle genera\] control \]anguage~ 
general data structures are also introduced. If 
refined specifications are designated to be expanded 
to a programming language which do not have the 
corresponding data structures inherently, the 
equivalent data structures and the access function 
must be imp\].emented in advance by combining the 
fundamental data structures in the language. For 
example, if Lisp is designated as the programming 
language, a struct which appears in a general data 
structure of a specification is expanded to the 
correspondig associative list structure and the 
lists can be accessed by associative functions. 
5. Refinement and Expansion by the L-MAPS system 
Figure 1 shows an outline of the processing by 
L-MAPS. 
\[ specificati?ns' I 
?J~llibrary modules 
(i) Iprocedural l~{input-output\] ~ --' 
\[expressionsJ ~expressions I 
",\]specification by 
I ~input-output I 
J, .11  "~expr essions I 
(2) I detection of ~ I  I/ .... 
\[ insuf ficiency\]~$/~- -~subproblems I 
, / ,/~-q~requests of I 
"/I"" \]additional modules I / / .... 
(3) ~ ~ ...... ~ad'ditional modules I 
~ - ~intermediate I 
-jpr?gra.ms I 
j~  
~ |object language,l 
(4) ~efinement,expansion~---Jexpansion mode I 
-~  ~ -~object programs\[ 
Fig.l The processing by L-MAPS 
In re f inement ,  L-MAPS t r ies  to un:i.fy the 
heading e l  an express ion  in a given spee i f J ca t ion  
and the corresponding heading of a l : ibrary module. 
I f  L-MAPS succeeds in the un i f i ca t ion ,  i t  const ructs  
a more detaJ \ ]ed descr ip t ion  of the spec i f i cat f ion  by 
using the un i f ied  Operat ion Part  of the module . 
The refined part with a more detailed 
description can be substituted directly for the 
original part in the specification or can be called 
in a form of a subprogram as a procedure or a dosed 
subroutine from the specification part. One of them 
is selected by the user. 
The principal part of the above refinement is 
unification of a specification and the heading of a 
library module. When the arguments of a module are 
confined to the individual variables and the number 
of arguments of a function is confined to a constant 
the un i f i ca t ion  caa be car r ied  out; by an ord inary 
un i f i ca t ion  of the f i r s t  order log ic .  0therwJse,  the 
un i f i ca t ion  procedure for  the second order ilogic i s  
needed. 
L-MAPS has a un i f i ca t ion  procedure for  the 
second order log ic .  IIowever, the un~ f Jcat Jon  
procedure i s  conf ined to a un i la tera l  un i f i ca t ion  
from a module to a spec i f i ca t ion  in which each 
symbol i s  J n terpreted  as a constant  under the 
condi t ion  that  any subst i tu t ion  for  the symbol Jn 
the spec i f i ca t ions  i s  forb idden.  Accorddagly, the 
un i f i ca t ion  procedure can be much s impl i f ied  for  
p ract i ca l  purpose.  
F ig.2 shows par ts  of a given spec i f i ca t ion  
wr i t ten  in the res t r i c ted  Engl ish for  a pars ing 
program of EngI ish sentences and F ig.3 shows a part  
of the generated formal spec i f i ca t ion .  
. . . , . , , . . . . . . . . . . . , . . . . . , ? o  
for i from i to m 
js:=j 
search handles from reducedsequences(i) 
by using reduction rules, and 
store it in handle(l..k) and rule(\[..k) 
if k is greater than 0 
for n from 1 to k 
reduce handle(n) Jn reduced_sequences(i) 
by using rule(n), and 
store the result in 
new_reduced_sequences(j) 
. . . , , . . . o . , . . . . . . . . . . , . . * . . . .  
Fig.2 The informal specification for a parsing 
program 
FOR(COUNT:I,FROM:I,IO:M, 
OP: =(JS,J) 
HANDLE_SEARCH(SO:REDUCEDSEQUENCES(I), 
INSTR:REDUCTIONRULES, 
GOAL:(HARDLE(1..R),RULE(I..K))) 
BRANCNI(COND:>(K,O) 
OP:FOR(COUNT:N,FROM:I,TO:K, 
OP:HANDLE REDUCE 
(SO:REDUCEDSEQUENCES(I), 
OBJ:HANDLE(N), 
INSTR:RULE(N), 
GOAL:NEW_REDUCED 
_SEQUENCES(J)) 
) 
) 
Fig.3 A part of formal specifications 
\[,-MAPS re f ines  the formal spec i f i ca t ion  by re fer rdng  
to l ib rary  modules such as shown in Table \] and 
generates  a ref:ined spec i f i ca t ion  and the comment: 
shown in Fig.4. 
RULE APPI,Y(OBJ: REDUCTION_RULE, PARTIC : HANDLE, 
GOAL:REDUCED SYMBOL) 
BRANCH1 (COND: EQUAL(REDUCED_SYMBOL, NULL), 
OP:RETURN(FAIL) ) 
FOR (COUNT: N, FROM: 1, TO : -  (STACK_POINTER, 
SYMBOL NUMBER OF HANDI,E), 
OP: COPY(OBJ: REDUCED_SEQUENCE(N), - - 
GOAL: NEW_REDUCED _SEQUENCE ( N ) ) 
, . . . . . . . . ~ . . . . . o . . . . . . . . . . . . . .  
F ig .4(a)  A part  of tile re f ined  spec i f i ca t ion  
apply t:he rnl.e to the handle, and 
s tore  t;he result;  in a reduced symbol. 
J f  the reduced_symbol Js nu l l  re turn( fa i l ) .  
for  n from t. t:o stack_po:inter-synlbol_number 
of hand\] e 
copy reducedsequence(n)  
:into new reduced sequence(n) .  
. o . . . . . . . . . . . . . . . . , . . . , . . . .  
F ig .4(b)  The comments of the re f ined spec i f i ca t ion  
in F ig .4 (a )  
In the refinement process global optimizations 
are tried to be done at the user's option. Some of 
them are rearrangement of conditional control 
statements and fusion of several iteration loops 
:i.nto one loop. 
6. Conclusion 
The translation system :is constructed on a 
modular basis consisting of 24 application modules 
and 30 bas:\[c modules by refining and expanding 
specifications by the aids of the L-MAPS system 
consisting of about 1000 lines of Lisp statements. 
The generated translation-system programs is about 
i000 lines in both C language and Franz Lisp. 
Besides various advantages due to the modular:\[- 
zation, the translation speed is almost the same as 
that of the old version in LISP. Furthermore, the 
translation speed in C language is about three times 
faster than that of Franz Lisp at a compiler mode in 
English-Japanese translation. 
References 
l)Pratt,V.R.: LINGOL-A Progress Report, IJCAI4, 
422-428 (1975). 
2)Nishida,F., Takamatsu,S. and Kuroki,B.: 
English-Japanese Translation through 
Case-Structure Conversion, COLING-80, pp.447 
-454 (1980). 
3)Nishida,F. and Takamatsu,S.: Japanese-English 
Translation through Internal Expressions, 
COLING-82, pp.271-276 (1982). 
4)Nishida,F. and Fujita,Y.: Semi-Automatic Program 
Refinement from Specification Using Library 
Modules, Trans? of IPS of Japan, Voi.25, 
No.5, pp.785-793,(1984), (Written in 
Japanese). 
5)Tanaka,ll., Sato,T and Motoyoshi,F.: Predictive 
Control Parser: Extended LINGOL, 6th IJCAI, 
Vol.2, pp.868-870, (1979). 
651 
