Coling 2010: Demonstration Volume, pages 29?32,
Beijing, August 2010
HCAMiner: Mining Concept Associations for Knowledge Dis-
covery through Concept Chain Queries 
 
Wei Jin 
Department of Computer Science 
North Dakota State University 
wei.jin@ndsu.edu 
Xin Wu 
Department of Computer Science & Technology 
University of Science and Technology of China 
xinwu@mail.ustc.edu.cn 
 
Abstract 
This paper presents HCAMiner, a system 
focusing on detecting how concepts are 
linked across multiple documents. A tra-
ditional search involving, for example, 
two person names will attempt to find 
documents mentioning both these indi-
viduals. This research focuses on a dif-
ferent interpretation of such a query: 
what is the best concept chain across 
multiple documents that connects these 
individuals? A new robust framework is 
presented, based on (i) generating con-
cept association graphs, a hybrid content 
representation, (ii) performing concept 
chain queries (CCQ) to discover candi-
date chains, and (iii) subsequently rank-
ing chains according to the significance 
of relationships suggested. These func-
tionalities are implemented using an in-
teractive visualization paradigm which 
assists users for a better understanding 
and interpretation of discovered relation-
ships. 
1 Introduction 
There are potentially valuable nuggets of 
information hidden in large document 
collections. Discovering them is important for 
inferring new knowledge and detecting new 
trends. Data mining technology is giving us the 
ability to extract meaningful patterns from large 
quantities of structured data. Collections of text, 
however, are not as amenable to data mining. In 
this demonstration, we describe HCAMiner, a 
text mining system designed to detect hidden 
information between concepts from large text 
collections and expose previously unknown logic 
connections that connect facts, propositions or 
hypotheses.  
In our previous work, we have defined concept 
chain queries (CCQ) (Jin et al, 2007), a special 
case of text mining in document collections fo-
cusing on detecting links between two concepts 
across text documents. A traditional search in-
volving, for example, two person names will at-
tempt to find documents mentioning both of 
these names and produce a list of individual 
pages as result. In the event that there are no 
pages contain both names, it will return ?no 
pages found? or pages with one of the names 
ranked by relevancy. Even if two or more interre-
lated pages contain both names, the existing 
search engines cannot integrate information into 
one relevant and meaningful answer. This re-
search focuses on a different interpretation of 
such a query: what is the best concept chain 
across documents that potentially connects these 
two individuals? For example, both may be foot-
ball lovers, but are mentioned in different docu-
ments. This information can only be gleaned 
from multiple documents. A generalization of 
this task involves query terms representing gen-
eral concepts (e.g., airplane crash, foreign policy). 
The goal of this research is to sift through these 
extensive document collections and find such 
hidden links. 
Formally, a concept chain query involving 
concepts A and B has the following meaning: 
find the most plausible relationship between con-
cept A and concept B assuming that one or more 
instances of both concepts occur in the corpus, 
but not necessarily in the same document. We go 
one step further and require the response to in-
clude text snippets extracted from multiple 
documents in which the discovered relationship 
29
occurs. This may assist users with the second 
dimension of the analysis process, i.e., when the 
user has to peruse the documents to figure out the 
nature of the relationship underlying a suggested 
chain.  
2 The Proposed Techniques 
2.1 The new representation framework 
A key part of the solution is the representation 
framework. What is required is something that 
supports traditional IR models (such as the vector 
space model), graph mining and probabilistic 
graphical models. We have formulated a repre-
sentation referred to as concept association 
graphs (CAG). Figure 1 illustrates a small portion 
of CAG that has been constructed based on proc-
essing the 9/11 commission report1 in the coun-
terterrorism domain. The inputs for this module 
are paths for data collection and domain-specific 
dictionary containing concepts. In our experi-
ments, we extract as concepts all named entities, 
as well as any noun or noun phrases participating 
in Subject-Verb-Object relationships. Domain 
ontological links are also illustrated, e.g., white 
house is a type of organization. 
 
 
Figure 1. Portion of the CAG 
2.2 Concept profile (CP) and snippet cluster 
generation 
A concept profile (CP) is essentially a set of 
terms that together represent the corresponding 
concept. We generate concept profiles by 
adapting the Local Context Analysis technique in 
Information Retrieval and then integrate them 
into the graphical framework (Jin et al, 2007). 
                                                 
1 http://www.9-11commission.gov/ 
Particularly, the CP for concept c is built by first 
identifying a relevant set of text segments from 
the corpus in which concept c occurs, and then 
identifying characteristic concepts from this set 
and assessing their relative importance as 
descriptors of concept c. Formally, the profile 
Profile(ci) for concept ci is described by a set of 
its related concepts ck as follows: 
 
 },,,,{)(Pr ,22,11, LL kkiiii ccccofile ???=  
 
Weight ?i,k denotes the relative importance of 
ck as an indicator of concept ci and is calculated 
as follows: 
 
n
idfkif k
ki log
)),(log(
,
?+= ??  
 
Where n is the number of relevant text seg-
ments considered for concept ci (in our experi-
ments, the basic unit of segmentation is a sen-
tence). The function f (i, k) quantifies the correla-
tion between concept ci and concept ck and is 
given by 
 
?
=
?=
n
j
jkji sfsfkif
1
,,),(  
                                               
Where sfi,j is the frequency of concept ci in the 
j-th sentence and sfk,j is the frequency of concept 
ck in the j-th sentence. This can be easily com-
puted by constructing ?concept by sentence? ma-
trix Q whose entry Qi,j is the number of times 
concept ci  occurs in sentence sj. (QQT)ij then 
represents the number of times concepts ci and cj 
co-occur in sentences across the corpus. The in-
verse document frequency factor is computed as 
 
)
/log
,1max( ?
k
k
npNidf =  
Where N is the number of sentences in the 
document collection, npk is the number of sen-
tences containing concept ck. ? is a collection 
dependent parameter (in the experiments ?=3). 
The factor ? is a constant parameter which avoids 
a value equals to zero for wi,k (which is useful, 
for instance, if the approach is to be used with 
probabilistic framework). Usually, ? is a small 
factor with values close to 0.1. Table 1 illustrates 
a portion of the CP constructed for concept Bin 
30
Ladin. The best concepts are shown based on 
their relative importance.    
     
Table 1. Portion of CP for Concept ?Bin 
Ladin? 
Bin Ladin 
Dimension Value 
Al-qaeda 0.569744 
Afghanistan 0.535689 
Sandi Arabia 0.527825 
Islamist 0.478891 
Islamist Army 0.448877 
Extremist 0.413376 
Ramzi Yorsef 0.407401 
Sudanese 0.370125 
Saddam Hussein 0.369928 
Covert Action 0.349815 
Embassy Bombings 0.313913 
 
Given the information provided by concept 
profiles, the strength of a relation (edge weight in 
the CAG) between concept ci and concept cj is 
measured by the similarity between their respec-
tive profiles. If a concept X is related to another 
concept Y which has a similar context as that of 
X, then such a relation can be coherent and 
meaningful. More precisely, a scalar profile simi-
larity matrix Si,j is defined as follows:  
 
)(?)(?
)(?)(?
,
ji
ji
ji
cCcC
cCcC
S
?
?
=  
       
Where ?(ci) and ?(cj) are profile vectors for 
concepts ci and cj respectively. In terms of text 
mining and knowledge discovery, we also re-
quire the graphical representation relate concepts 
and associations to underlying text snippets in 
the corpus. Without this support, the framework 
is not complete since users need to validate con-
clusions by looking at actual documents. This is 
achieved by associating each edge with a Snip-
pet Cluster, which links the snippets (e.g., sen-
tences) in the corpus to the corresponding asso-
ciations (e.g., co-occurrence of concepts in sen-
tences) represented by edges in the CAG. The 
resulting snippet clusters offer a view of the 
document collection which is highly character-
ized by the presence of concept associations (il-
lustrated in Fig. 1). 
2.3 Concept Chain Generation and Rank-
ing 
Given two concepts of interest designated, con-
cept chain query (CCQ) tries to find if (i) there is 
a direct connection (association) between them, 
or (ii) if they can be connected by several inter-
mediate concepts (paths). Note that finding direct 
links between two concepts is trivial; in the fol-
lowing we mainly focus on discovering and rank-
ing indirect connections between concepts. 
We formulate the CCQ problem as finding op-
timized transitive associations between concepts 
in the CAG. Given the source concept c1 and des-
tination concept cn, the transitive strength of a 
path from c1 to cn made up of the links {(c1, 
c2), ? , (cn-1, cn)}, denoted by TS(c1, c2 ,? ,cn), is 
given by: 
)),((),,,( 1
1
121 +
?
=?= iinin ccwcccTS L  
Where w(ci, ci+1) represents the weight of the 
edge connecting concepts ci and ci+1. The formu-
lation of generating and ranking transitive asso-
ciations is then described as follows with input 
and output constraints specified: 
Given: an edge-weighted graph CAG, vertices 
s and t from CAG, and an integer budget l 
Find: ranked lists of concept chains CCs star-
ing from s and ending at t, one list for each pos-
sible length (i.e., between the shortest connection 
length and the specified maximum length l). 
Within each list, top-K chains that maximize the 
?goodness? function TS(?) is returned. 
Our optimization problem is now to find an 
optimal path that maximizes the ?goodness? 
measure for each possible length. This could be 
easily computed using dynamic programming 
given the inductive definition of the goodness 
function TS(?). Notice that in real applications 
there are often cases that users might be inter-
ested in exploring more potential chains instead 
of just one optimal chain, we have thus adapted 
the traditional dynamic programming algorithm 
into finding top-K chains connecting concepts for 
each possible length efficiently. The details of 
algorithm and implementation can be found in 
(Jin et al, 2007).  
3 The System Interface 
Figure 2 illustrates the main HCAMiner visuali-
zation interface. Given the user specified paths 
for data collection and domain specific thesaurus, 
31
the Concept Association Graph is first con-
structed. Analyzers are then provided another 
panel of parameters to guide the discovery proc-
ess, e.g., max_len controls the maximum length 
of desired chains; chain_num specifies the num-
ber of top ranked chains to be returned for each 
possible length. The visualized result for concept 
chain query involving person names ?Bush? and 
?Bin Ladin? with parameter values ?max_len? 3 
and ?chain-num? 5 is shown in Fig. 2. The sys-
tem offers different views of the generated output:  
a) Chain Solution View (in the left pane). This 
view gives the overview of all the generated 
concept chains. 
b) XML Data View (in the upper-right pane). 
This view links each concept chain to the 
underlying text snippets in the corpus in 
which the suggested association occurs. 
Snippets are presented in XML format and 
indexed by docId.snippetID. This makes it 
easier for analyzers to explore only the rele-
vant snippet information concerning the 
query.  
c) Concept Profile View. This view provides 
the profile information for any concept in-
volved in the generated chains. Figure 2 
shows portion of the CP generated for Con-
cept ?Bin Ladin? (illustrated on the bottom 
right).  
4 CONCLUSIONS 
This paper introduces HCAMiner, a system fo-
cusing on detecting cross-document links be-
tween concepts. Different from traditional search, 
we interpret such a query as finding the most 
meaningful concept chains across documents that 
connect these two concepts. Specifically, the sys-
tem generates ranked concept chains where the 
key terms representing significant relationships 
between concepts are ranked high. The discov-
ered novel but non-obvious cross-document links 
are the candidates for hypothesis generation, 
which is a crucial initial step for making discov-
eries.  
We are now researching extensions of concept 
chains to concept graph queries. This will enable 
users to quickly generate hypotheses graphs 
which are specific to a corpus. These matched 
instances can then be used to look for other, 
similar scenarios. Ontology guided graph search 
is another focus of future work. 
References 
Jin, Wei, Rohini K. Srihari, and Hung Hay Ho. 2007. 
A Text Mining Model for Hypothesis Generation. 
In Proceedings of the 19th IEEE International 
Conference on Tools with Artificial Intelligence 
(ICTAI?07), pp. 156-162. 
Jin, Wei, Rohini K. Srihari, Hung Hay Ho, and Xin 
Wu. 2007. Improving Knowledge Discovery in 
Document Collections through Combining Text 
Retrieval and Link Analysis Techniques. In Pro-
ceedings of the 7th IEEE International Conference 
on Data Mining (ICDM?07), pp. 193-202. 
 
Figure 2. Screenshot of the user interface 
32
