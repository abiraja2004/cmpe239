A PROCEss-AcTIVATION \]8~SF, D PARS~gl ~kL, GOR~'I-la~ 
I~OR 
TIlE DEVELOPMENT OF \]NATURAL LANGIIAGIg G k ~  
Massimo MARINO 
Department of lAnguisties -,University of \]~51sa 
Via S. Maria 36 - 56100 Plsa -- ITALY 
Electronic Mall: MASSIMOM@ICNUCEVM.BITNET 
ABST~CT 
A running system, named SAIL, for the development 
of Natural Language Grammars is described. Stress Is put 
on the particular grammar ule model adopted, named 
Complex Grammar Units, and on the parsing algorithm 
that runs rules written In according to this model. 
Moreover, the parser is like a processor and sees grammar 
rules as processes which cart be activated or Inactivated, 
and eaxi handle exchange of information, structured as 
:messages, among rules for long distance analysis. A brief 
description of the frmnework of SAIL a user can interact 
with, neaned SiS, is also given. Finally, an example shows 
that different greanmar formalisms can be implemented 
into the frame of SAIL. 
X o INTRODUCTION 
Most recent research in the field of grammar 
Ibrmalisms and parsers for natural language has seen the 
f lour ish ing of var ious  theoret ica l  as well as 
coralmtational accounts, which, however, bring into 
consideration the same lacts. The most relevant ones 
~,mem the following: 
-~ whatever representation is adopted for the structure of 
the parsed sentence (basically f-structures or trees), it is 
agreed that {complex) sets of features must describe the 
linguistic units. It is, therefore, necessary to provide 
feature handling mechanisms; 
long distance dependency, or, more generMly, 
dependency, requires a specific treatment, which Is to be 
naturally embedded in the theoretical or computational 
model of syntax, and must  be subject to language 
dependent constraints. In aaly case, the treatment of 
dependencies takes the form of a differently constrained 
search Ibr a referent; 
- a certaln amount of context-sensitiveness is to be 
allowed in natural anguage parsing. 
As an additional feature of recent research, the 
l~mlinatlon towards the one-to-one correspondence 
between semantic and syntactic rules has to be 
mentioned. 
SAIL Is the parsing algorithm of a development 
environment, called SAIL Interfacing System, where 
different grammars  corresponding to different 
grammatical theories can be hnplemented (/Marlno 
1988/ I .  Its basic features,  which allow full 
implementation f grmnmars and their debugging are as 
lbllows: 
a ,teh lmlguage for the handling of features; 
grammar ules are seen as processes which can be 
activated or Inactivated, and can exchange messages; 
this mechanism allows a natural  treatment of 
dependencies and the running of context-sensitive rules; 
the format of the rules Is such as to allow semantic 
processing in parallel with syntactic processing; 
the traditional structure of the parser, a bottomoup 
all-paths algorithm, allows relative efficiency mid the 
590 
ca W integration of a diagnostic omponent fi~w debugging; 
the development envirotJrnent is based on dllterent 
layers of rules, which are processed by the same parser 
and can handle the external interface, the particular 
application, and the debugger. This enables the user to 
modify also the front-end of SAIL, by modifying tile 
corresponding grammar. 
2. TItN G ~ A R  RI\[1LN FONISN 
The grammar rules are expres,~md ix-, a tbrmallsm 
called Complex Grammm Units g','.G.Uos) having the 
tbllowing BNF: 
CGD" ::= 
<Syntact ic-Rule> :::: 
<ProducUo~ ::= 
<LHS> ;;= 
<I~-IS> ::= 
<Synerests> ::= 
<S~\]n-ActIo~> ::= 
<Syn-Recovery-Actiorr~> ::= 
<Semantie~Rule> ::= 
<Sere:rests> ::= 
<Sem-Recov(,, y Actions> ::A 
<Syntactic-Rule> <Semantic-Rule> 
<Prrnluetlon> <8yn-.Tests> 
<Syn-Actlons> 
<8yn-Recovery-Actions> 
<LHS> <RHS> 
A non-ternmaal symbol of the 
g~mrim~' 
A pat*era st~lng of terminal 
arid/or non..termUral uymbols 
Borne teats  on  the appl icabi l i ty of 
ttte syntactic aetimm 
Arbitrary syntactic actions 
Syntactic actions for the recovery 
In case of rmatch-ihfl or test-f-.dl 
<Sere-Tests> <Sere.Actions> 
<SemoRecovery-Actions> 
Some te~t.~ on the applicability of 
the semantic rule 
/U'blhary semantic actiorLs 
"Semantic aetloIlg for the recovery 
in case of match4all or test-fall 
In. each grmimlar rule the syntactic intexpretation is
directly connected with the corresponding semantic 
interpretation: hL this way the pea'ser processes in parallel 
both interpretations. 
Inside the augmentations we can do several things: 
- the tests arc evaluated before the application of a rule 
and through *hera we can check its applicability; 
- every node of the parsing structure contains tructural 
infbrmation about the part of sentence it covers; this 
information is local to each node and is stored as a 
feature structure tree. "l~e features are classically 
stored as attribute-value pairs, with the possibili .ty that 
a value la itseff an attribute-value pair; several feature 
handling functions are defined inside the system, so we 
cea~ use them with the augmentations to create, delete. 
test, get, copy and raise features; 
the semantic rule acts on the semantic part of the 
system, which can be, for example, a t~ handled by a 
knowledge representation language; tkfls side is 
dependent on the system application; 
- the  semantic actions are a sequence of semantic 
operations, includkng the possibility of assigning :,t 
semmatic value to the new node built by the ~:ule; The 
semant ;e  value ass igned to a node represents ,  In 
general, the mean ing  of tb.c" t)mt of the sentence the 
node covers, accordh~g i(~ the chosen fonrmlism; 
? the eye, tact ic and  se_manti.e recovery aet imm allow 
tdte~ rmt ive act ions ff the rule fails dur ing  the matehi~ g 
phase  or the test  checking,  so the rules need not  be 
m-udely rejected Mten  they fail; 
-- soirie bLdlt.4n system funct ions  are available: these  
tools handle,  for example, the part icu lar  execut ion of a 
rule, o, ,.nodlly tile pars ing  processing,  etc.; these  
~ilecha:~iJ.sllks are discrtssed below. 
The product ion  in each n i le  Is classical ly represented as 
a Cmfi;c~_rt -lq:ee producttm,:  A- ~ w, w= _. w , ,  where A 1,.; a 
no~ ~ 4:~:~_utJn~d syt~llool al id  w~ wa ... w,, i s  a si~:lng of terminal  
a tu l /o r  :ta~m. te~miual symbols.  
The ~ ole,'~ of the grammm are  appl ied by the parser  hi  a 
bot to ln - l t  i) 'w~ly: it ,';tin t,'~ f iom the sentence  and  build,~ 
over  it the pars ing  sh  t lctnre as a graph. 
In our  system we Mso have a dh; t tonmy D. Each i tem 
in the dict ionary is (:::filed a .~.'ox',t.< We dlsLing~fish betweeu 
ah~gle ?ox~ta l~d ~aut?itAe i'ox~as. The first matehes  the 
ge,mral concept  of ~, word; the second defines a nmlt l -  
word expxession of the language,  typically an  idiom. 
One or more in terpretat ions  are associated with each  
tb~at and  they cons ist  of the syntact ic  categmy, the 
se.mantie value and  a \[(~ature s t ructure .  
A sentence  is a con lpoL l l ld  of fonus.  For every set~temm f, 
fa...~ SUCh ttrat every tbrm i~ D, and a grammar  G defined 
in our  model we say that  f~ f,...f, is pa laab le  If we car~ 
bui ld a sU'uc.tu,e lh rough a finite sequence of rule 
applleatirms, where at  least  one node covers the ent i re 
aentenee and its; category Is the root synibol of the  
gl~mnlna, ~ 
Rule appllcation,~3 are performed by tt}.e pro'set in a 
bottom-hi)  ,';tratep~ whez~eve~:: 
a. at  leae;i: one sequence of nodes exists in the sh-ucture 
the l)a>'scr has  been bui lding, match ing  the <RtIS> 
par t  of the rule; 
b. if' the above condit ion holds tile parser  verifies the 
tests  of the rule; if they ate veiif ied the n i le  is applied; 
c. if the match  fails, or the tests  are not  verified, then the 
parser  eKe.cures recovexy actions? 
~lt~e core appl icat ion o f t  CGU cons ists  in: 
d. bnl ld ing a new node cot.responding to the <I,I-IS> par t  
of the ~ ule; 
e. ass ign ing lcature,~.; to the new trade by execut ing the 
~'~y~ffacl:ic action'.; of the rule; 
f. exeent;h~g the semant ic  act ions of rile ni le,  and  
possibl~, ass ign ing the semant le  value to the new 
nude. 
In the ibllowing we always rep~et;ent the product ion  In tile 
s tandard  way as above; the feature s t ruc tures  assoc iated 
wl~:h a no0e of category w~ are represented  as \[\[~,1 and tile 
semmtt lc  vahm as \[Iw,\]i, 
We.' carl Sl),~cii ) tile complete process  of a rule appl icat ion 
by means  of a PASCAL-lithe s ta tement  as follows. 
Ne~4~eeover3ro.Aetlons 
t~d 
hq~J~ 
~y~x-Ite c ovety -Aet lo~;  
~ ~e ,'~-lleeovea-~-Acllom~ 
"llm ru les  are grouped in such  a way that  the parser  
accesses to a restr icted number  of them,  i.e. only the 
current ly  appl icable ones, when it t~tes to apply SOlne. 
This is accompl i shed by part i t ion ing the ru les into 
~-meket~ d iscr iminated by the last: category in fire r ight- 
band side. If a g rammar  is part i t ioned as t'~ ..... Pk then  for 
every ld:,l ..... k, i:~l, we must  have tlmi. I., r~ P~ ::: {}. So when 
the parser  acee.s.~;es a packet  th rough the category of a 
node, thc rrdes In that  packet  are the tufty ones  al~l)lleable 
at that  momeut .  
Now let us  int roduce the coneepl  of Not  Operat ive  
/~:oflttet, tiOnu. 
In gene, ral such  product ions  do not  bui ld  a new node If one 
of the three special  categories <NOP>,  <NOP-ASE>,  
<NOP-.SE> is the le f t -hand side. A Not Operat ive 
Product ion is one of the following: 
{ <NOP> I <NOP--ASE> I <NOP-SE> } - > v% % ... w 
Rules ?with such  product ions  are ealled NOt- Rules.  
l )epend ing  on the NOP-eategoly used,  tile rule 
appl iealton is performed i,~ a special was. 
A NOP rule wi th  <NOP> as lett-.hand side Is appl ied as 
follows Jf lhe syrltaette tests  succeed: 1) no new node is 
l)uJlt; 2) only ihe syntact ic  rule is iakci~ into accoml t  by 
the parser;  3) the semant ic  rule is never  considered.  
Therefore the appl icat ion of such  a rule iy.pc ia pe~ lbnned 
as in the following PASCAL-like statemc~.l : 
iJ_' i~tch  ( w~ ..... wu, graph )
Iben LfNyn-Test,a (\[it~l . . . . .  I!~,J ) 
gloat Sy~t,,Recovery-Aetton~ 
'.? !f~Jt S y~141ec ore  ~-y.,Ae, t Ions; 
This k ind of NOP rule is usefu l  when we are interested ir~ 
per forming modlf leat lons or par t i cu la r  consh-uct ions or 
ana lyses  on features Inside a eet ia in  contexi  wi thout  
bui ld ing a new node. Such  a k ind  of NOr' rule is purely 
syntact ic.  
in a producl~on with <NOP-ASE> a s le f t -hand side, ff both 
syutaet le  and  semant ic  tests  succeed:  1) no new node is 
bui lt;  2) the rule appl icat ion is preformed in the s tandm'd 
way? irmlndiug feature hmadl lng if it does not  iovolve the 
non--existent parent  node.  
In a product ion  with <NOP-.SE> as le f t -hand side, if oMy 
itic semant ic  tests succeed:  1) no new node is t)uilt', 2) only 
the semant ic  rule is taken  Into account  by the parser;  3) 
file syntac l le  rule is never  considered.  From thereon 
appl icat ion is the dua l  of that  defined for tim <NOP> 
category. 
.!( lVlal;ch ( v, l ..... w. graph )
/* ~;c:.~:~'~q~ one o~ mo~c ,~clt; ~1" ~mdcs matching the <I:tIIS> */ 
~;em.-'r~ata ( \[1%11 ..... \[\[wJl, SEM ) 
/* :~;EM ie, presetllt; {he s;elnain'lc itlode\] */ 
~'~a~td (A,,.% ..... %, J; 
/* build a **eve node A ovm the matched nodes */ 
f~ls~q .i)eghL 
& R'( JLE~ AS  PROCESSES 
The rtfles defined ill our  sys iem ~re viewed as 
proeesses  to be executed by the proset  which has  the roie 
o f i~e processor? Aa a consequence,  a state is ass igned to 
each rifle which is determined at the  moment  of g rammar  
del ln i | ion.  Rules can  assume two dif ferent ~tates: aet tve  
or i~xaefive state. A rule is aettw.~ when the parser  
normal ly  takes it into account  for appl icat ion;  ru les are 
acLivc when thei r  names  are in the i r  co l respond ing  
packets.  A rule is inae, t tve  when the parser  does not  
normal ly  take it into cons iderat ion  for appl icat ion;  rules 
are inact ive when thei r  names  are not  in any  packet.  
It is possible to modify the state of a rule by memm of two 
39\] 
tunetions within the augmentations dining a rule 
application. 
A rule R, changes its state from active to Inactive if some 
rule Rj calls within its augmentations the function i le- 
dtsable for R,, performing a disabling operation; on the 
termination of the disabling rule R j, the disabled nile 
name R, is removed from the corresponding packet, and 
the parser does not take into account R,, Conversely, a
rule l~ ehaazges its state from Inactive to active If some rule 
calls the function ru le-enable for Ph within its 
augmentations, perlbrming an enabling operation. On 
the termination of tlm enabling rule R r the enabled rule 
name R, becomes present into the corresponding packet. 
It Is possible to change the state of one or more rules at 
a time through these functions and the rules can perform 
self-enabling and self:disabling operations. Changes of 
state effected uring the parsing are not penuanent. At 
the end of each parse the rules are reconfigured as 
indicated in their original definition. 
In addition we cruz invoke an inactive rule for just one 
application from another ule. We say that an inactive 
rule R~ is act ivated to be applied Just once, when a call to 
the function r i f le-activation is in some augmentation of 
another ule R r The activation of an inactive rule R, allows 
just one application of it by the parser, immediately after 
the termination of the activating rule R r The state of the 
activated rule Is not modified. The activation of more than 
one rule at a time Is possible, and once a rule ls activated 
it can activate other rules, 
4o CONTEXTUAL RULES 
Rule activation bymeans  of the rule-act lvat ion 
function, together with NOP rules can be used to handle 
context sensitive languages, However, rials is entirely 
done by means  of CF product ions  and the 
augmentations. 
A typical CS production is: ~h A p~ --~ p, 1~ ~h where p,, 
p~, 13 are strings Of symbols, and A is a non-terminal 
symbol. A bottom-up applieation of such a production is 
possible lfit happens in two steps: 1) indlviduation of the 
context p~ I~ P~; the right-hand side must match a 
sequence of sub-trees that covers 1~13 1~; 2} Inside this 
context we can perform the api~lleaflon of the CF 
production A .-~ \[~ building the node A over the sequence 
of nodes characterized by ~l. So the complete application 
for a CS production is made in two steps: the tlrst one 
concerns context determination, the context being 
represented by the right-hand side of the CS production; 
the second step is just the application of a CF production 
if and only if the first step has determined the context 
where the CF production is applicable. These 
considerations allow us to say that: step 1 can be 
performed by the application ofa NOP rule using the NOP- 
special categories; in fact this kind of rule Is useful in 
detet~ining the context by defining a NOP rule with 
production: 
{ <NOP> I <NOP.-SE> I <NOP-ASE> } --> ~t, ~ bt2 
Step 2 can be performed by the application of an activated 
rule; in fact, wizen the rule at step 1 determines the 
context it cart activate an inactive rule with a production 
A--~13, indicating in the cMI to rule-act ivat ion the last 
node In the sequence ~. 
Now we can give the definition of contextual  nile. 
We say that a rule is contextual if it is a NOP rule with 
production: 
{<NOP> I <NOP-SE> \[ <NOP-ASE> } -~ w z ... w 
and inside the augmentations there is a rule activation of 
,gJ~g_~t one inactive rule which has a production: 
A --> w k wk.~ ... w~, 1 <_k.<_m~n 
Ae VNu{<NOI~>,<NOP-SE>,<NOP-/LSE>} 
392 
where VN is the set of the non--terminal symbols of the 
grammar. 
This definition allows a nesting of contextual xnules: In thct 
an activated rule can be a contextual rule itself, In 
addition, we can activate more than one rule at a time; in 
this way we can access several contexts Inside a main 
context. 
We suggest a method to make possible asynchronous 
operations, i.e., how two independent rules can interact 
with each other in order to perform long distance 
operations. All this is based on the fact that we must be 
sure that a certain rule will be applied after mlother and 
the earlier ule wants to communicate some information 
to the other one, To this end we have adopted a 
communication meeharflsm, that we call message 
pa~alug, which Is not based on nmtehing as all the 
previously explained opexations, but on executing two 
basic tasks: sending and receiving, The sending task is 
firstly performed by the sending rule that sends a 
message to a receiving rule; afterwards the receiving rule 
must perlbrm the receiving task to receive the message, 
These two tasks are executed by the two rules at two 
independent thnes, i.e., when the rules are applied, In the 
following we denote the sending rule as Rs and the 
receiving rule as Rr, and we assume they are standard 
rules: so we denote with SN the node built by Rs mad with 
RN the node built by Pa ?. 
We state two different approaches for what a ~ i s :  
1) the rules access a global feature structure where they 
store global features. Each role can access this structure 
and whatever feature value In It; 2) a Message-Box exists 
where a rule can send a message to another specified rule. 
"l~e Message-Box is accessible from every rule but the 
messages are accessible only by receiving rules. A 
message iscomposed as follows: a reference to the teature 
structure of SN: Rs makes avafiable its feature structure 
to Rr; a sequence of operations, possibly empty, that Rr 
~-o.ust execute. 
It Is not necessm3r that both these Items m'e present ina  
message, 
In the case of the global feature structure all the rules 
have access to It. We recall that all the feature structures 
Included Ill the nodes of the graph are local to their own 
node, Each rule earl store in or get from the global 
structure features that are global for the sentence: then 
the messages are feature structures and the same type of 
oIJerations allowed on the feature structures of the nodes 
of the graph Is possible on this sta~aetureo 
The Message-Box Is a structure referred to by all rules 
that want to send or receive messages. A rule Rs, building 
the node 8N. sends a message which is automatically 
inserted In the Message-Box specifying: Its name Rs, the 
receiving rule Rr, a reference to the feature structure of SN 
which is made available to Rr, a list of operations, possibly 
empty, to be perlbrmed by Rr. Until the messages are sent, 
they are the exclusive property of Rs. Wizen they are sent 
Rs loses Its property, rights, and only the rule Rr specified 
In the messages i authorized to get them. In addition, Rr 
finds In the message a reference to a feature structure ~md 
this structure is available only to It and always local to its 
own node. 
Message passing, In either of the two realizations, is a 
way to facilitate the tndlviduation and treatment of 
existing relations among phrases or parts of them. It is 
certainly flexible and not expensive because It avoids 
searches, i e., matches, Inside the graph, and it can be a 
valid alternative to NOP rules that require a certain 
number of matches to find particular nodes In the graph. 
In fact, if there was not  over lapping of the  sub--trees rooted 
In SN and  RN, thenwe can  solve re lat ions between SN and  
RN by apply ing a proper  NOP rule, but ,  more efficiently, 
message  pass ing  al lows us  to avoid a cer ta in  
computat iona l  overhead per ibnn ing  proper  operat ions 
directly in Iks and  Rx. 
When NOP rules are appl ied they act  upon  a s t ruc ture  
a l ready built .  It Is also possible to act ivate i~ales that  
pertbl-m fur ther  bu i ld ing (contextual  rules) and/or  
teatur ing operat ions with in  a context.  This  process  of 
act ivat ion can  be nested  many t imes ins ide a certa in 
s t ructure ,  This  analys is  per /orms a k ind  of operat ion that  
is virtual ly directed toward the bottom,  in depth.  If there 
was a part ia l  or total  over lapping between the sub- t rees  
rooted In SN and  RN, then  - In th is  case .- when iLs sends  
a message;, assuraes  that  Rr will be appl ied above its node 
SN; in thkl way it Is poss ib le  to eva luate  the consequences  
of certa in  operat ions on a s t ruc ture  wh ich  Is not  yet but  
It could be but t .  In th is  case we act  toward the top of the 
pars ing  s lxueture,  th rough as many levels as we want,  In 
contrast ,  us ing  NOP rules,  we only act  on an  exist ing 
s t ructure  represent ing  deeper  levels. 
So we can  d is t ingu ish  two ways of operat ion for long 
d is tance analys is  araong phrases  or par ts  of them: 
breadth  ;malysls, us ing  both  NOP ru les  or message 
pass ing;  depth  analys is  wh ich  can  be top-down with NOP 
ru les  or bot tom-up wi th  message pass ing.  
The mechan ism of the  messages  so descr ibed is 
performed through funct ions  that  can  be used  with in  the 
augmentat ions .  
6? T I -~ P,,~RSER 
Our  parser  is a CF-based one, derived from the ICA 
(inmledia~:e Const i tuent  Analysis) a lgor i thm descr ibed in 
/Gx ishman 1976/ ,  designed to run  CGU rules,  carry ing 
out  the syntact ic  and  semant ic  ana lys is  In parallel.  It is 
a bot tom-up algorithm, a~nd it per forms left-toorlght 
scann ing  and  reduct ion in an  Immediate  const i tuent  
analysis .  The data  s t ruc ture  It works  on is a graph  where 
all possible parse  trees are connected.  The complete parse 
h'ee(s) is (are) extracted from the graph  in a subsequent  
step, Therefore, the parser  Is also able to create s t ruc ture  
fragment,~ for i l l -formed sentences,  thus  return ing ,  even 
in ti l ls ca;~e, part ia l  analyses.  This  Is part icu lar ly  useful  
for diagnosis and  debugghlg.  
Pars ing te.rmination occurs  In a natura l  way, when no 
more rule can  be appl ied and  the input  str ing is 
completely scanned,  
Before enter ing the parser  a preprocessor  scans  the 
sentence  fi'om left to ~ght,  performs the d ict ionary look- 
up  tbr each form in the Input  str ing, and  re turns  a 
s t ructure ,  tile preprocessed sentence,  wi th  the  syntact ic  
and  semant ic  In format ion taken  from the dict ionary.  
The graph  Is composed of nodes:  the nodes  can be 
ei ther  termina ls  or non- termln~s .  Termina l  nodes  are 
bui l t  in co:a'espondence to a scanned form, whereas  non-  
termina l  ones arc bui l t  whenever  a rule is applied, 
obviously the rule must  not  be a NOP rule. 
As s tated above the parser  is seen as a processor  arid 
It sees the ru les as  processes,  It hand les  a queue of 
w~t ing  processes / ru les  to be executed.  When the parser  
takes  a packet,  for every rule it bu i lds  a process  descr iptor  
and  Insexts it in the queue.  We call such  a process 
descr iptor  an  app l i ca t ion  spec i f i ca t ion  (AS), while the 
queue is c~dlcd the app l i ca t ion  spec i f i ca t ions  Hst  (ASL), 
ASs are composed of: 
a node identif ier, th rough th is  node the parser  s tar ts  
fl'ie ntatching;  
the nmne of the rule that  the parser  will apply; 
- only in the case of an  AS of an  act ivated rule th is  I tem 
is the  context  where  the nmned act ivated rule will be 
applied, l.e. the  nodes  that  matched the r ight -hand side 
of the  act ivat ing rule, otherwise th is  i tem is left empty. 
ASs in ASL are ordered depend ing  upon the rule 
involved in an  AS. In general ,  ff stm~dard active rules have 
to be executed,  ASL is hand led  wi th  a LIFO policy. If we 
cons ider  the case of NOP rules? then  these ru les must  be 
ordered before the others,  s ince featm'e modif icat ions 
they may produce can  ser~e as input  to other  ru les of the  
same packet,  wh ich  are appl ied after  them..4.n Inactive 
rule can  be act ivated Jus t  ibr  one appl icat ion by means  of 
ru le -ac t ivat ion  t rac t ion :  the  act ivated rules must  be 
appl ied immediate ly  a l ter  the  end  of the  act ivat ing rule. So 
th is  k ind of ru les  has  the h ighest  pr ior ity of execut ion with 
respect  o NOP ru les  and  s "tandard active rules. Then  xalle- 
ac t ivat ion  inser ts  an  ac t ivat ion  ~pect / tea~lo~ on the 
top of/KSL for the  act ivated rule. Sunamarlz lng, the ro les 
have the tbllowing decreas ing  prior ity order of execution: 
1) act ivated rules;  2) active NOP rules;  3) s tandard  active 
rules, 
Once a node  is created,  be it te rmina l  (in 
cor respondence  to a scar ined tbrm) or non~terminal  (in 
eon 'espondence  to a reduct ion),  the parser  inser ts  In the 
ASL an  AS for every rule in the packet  corresponding to 
the categoxy of the new created node: i.e. the new node Is 
tile one specif ied In every inser ted  AS, The parser  
per forms all poss ib le reduct ions  bu i ld ing more than  one 
node if possible, extract ing one AS at  a t ime before 
analyz ing the next  one. After ml AS ls extracted tom the 
ASL, the parser  gets file specif ied rule: the first step is to 
match  the r ight -hand side on  the graph.  The nodes 
match ing  a r ight -hand side are searched by the matcher :  
It re turns  one or more sets  of these  nodes,  called 
reduct ion  sets .  For every reduct ion  set, the appl icat ion 
of the  cur rent  rule is h-led. In th is  way we can  connect  
together  all poss ib le parses  for a sentence  in a un ique  
s t ructure .  Terminat ion  occurs  when the ASL is e~.npty and  
the  preprocessed  s t r ing  is complete ly  scanned.  
Afterwards the parser  re turns  the graph,  kom which  ~1 
parse  trees sat is i~ing the tbllowing condi t ions  are 
extracted: a node covers the ent i re sentence  and  Its 
category Is the root symbol  of the grmnmar .  Here is the 
complete a lgor i thm of the  parser :  
* Until the end of tile sentence ts not reached: 
, Scan atorm: 
* Ill,lid a new ternmml xmde for the scanned tbxm; 
~ interpretation f the node: 
o g.~ the packet corresponding to Its categoi T and for every 
rule In the packet ~ tile AS In the ASL ; 
F_Qr~ AS in the ASL: 
* gt? the first AS from the top of the ASL; 
* ggi the specified rule kl tile AS, it Is the current rule, and 
access to the node specified in the AS, it is tim emxent node; 
* starting from the cun~nt node perform tile match on the 
graph using tile production of the current rule; 
i_f at least one reduction set is found hlh.c_r_l: 
? F r_~K._C~YC,~t reduction set: 
- Apply the current rule; 
o If a new non-terminal node is butt  ~ gtk the 
corresponding packet to its category and for every rule 
in it ~ the AS in the ASL; 
.?g.~: o Apply recovery actions of the current rule; 
In th is  a lgor i thm by match  we mean the operat ion of 
search ing  the reduct ion  sets  and  by  'apply  the cur rent  
rule'  we mean the s tandard  rule appl icat ion s tar t ing  from 
tile test  check ing as  s ta ted  for the  CGU model;  part icu lar  
ways of appl icat ion,  e,g, NOP rules,  depend on the 
par t icu lar  ule definit ion. 
7. AN EXAMPLE 
The example concerns a simple fragment of a LFG 
written in SAIL according to the CGU model, Our example 
is taken f rom/Kap lan  1982/and/Winograd  1983/.  
The lexical entries for this grammar in SAIL are the 
following: 
a {(Determiner NIL (Definiteness) (Indefinite) 
{Number) (singular))) 
baby ((Noun NIL (Number) (Singular) 
(Predicate) {Baby)}} 
girl {(Noun NIL {Number} (Singular} 
(Predicate) {Girl)l} 
handed ((Verb NIL (Tense) (Past) 
(Predicate) (Hand))) 
the ((Determiner NIL (Definiteness) {Definite))) 
toys ((Noun NIL (Number) (Plural} 
(Predicate) (Toys))) 
Rules in SAIL are written using a def~ttle format where 
all the fields appearing in the CGUs can be defined; in 
addit ion two fields are devoted to the state definition 
(STATUS field) and the rule type definition, that  is ff the 
rule is a standard rule or a contextual  or a NOP rule 
(CNTXTLORNOPR field). The rules are the following: 
(defrule NPRule ; NP --> Determiner Noun 
(STATUS active) 
(CNTXTLORNOPR NIL) 
(PRODUCTION (NP (Determiner Noun))) 
(SYN-TESTS T) 
(SEM-TESTS T) 
(SYN-ACTIONS 
(ralsef "(* DefiniteneSS Determiner) 
;raise the values of the specified features from the 
;son node into the parent node 
"(* * Noun)l}} 
; second *means all features of the son node 
;first * means the storing of the features as they are 
;in the son node into the parent node 
(defrule VPRule ; VP --> Verb NP NP 
(STATUS active) 
(CNTXTLORN OPR NIL) 
(PRODUCTION (Via (Verb NP NP))) 
(SYN-TESTS T) 
(SEM-TESTS T) 
(SYN-ACTIONS 
{raiser "(* * Verb) ;all features of the Verb node are 
;copied in the parent node 
((Object Definiteness) Definiteness NP) ;lst NP 
"((Object Number) Number NP) 
"((Object Predicate} Predicate NP) 
"((Object-2 Definiteness) Definiteness NP 2} ;2nd NP 
"((Object-2 Number} Number NP 2) 
"((Object-2 Predicate) Predicate NP 2)})) 
(defrule TOPRule ; S --->NP VP 
(STATUS active} 
(CNTXTLORNOPR NIL) 
(PRODUCTION (S (NP VP))) 
(SYN-TESTS T) 
(SEM-TESTS T) 
(SYN-ACTIONS 
{ralaef "({Subject Definiteness) Definiteness NP) 
"({Subject Number) Number NP) 
"{(Subject Predicate} Predicate NP) 
"{* * vP}}) 
\[SEM-ACTIONS 
{put-sem-val ;stores the EVALuation of the following 
;expression as the semantic value of the 
;parent node S 
39g 
(append (getf-pn "Predicate) 
{getf-pn "{Subject Predicatel} 
(getl-pn "(Object Predicate)) 
(getf-pn "(Object-2 Predicate)))))) 
; getf-pn gets feature values from the parent node 
The graph bui lt  by the parser  applying these rules to the 
sentence 'a gir l  handed the  baby  the  toys '  is equivalent 
to the e-structure bui l t  by the corresponding LFG as 
shown in /Wlnograd  1983/ .  The top node S contains the 
following feature structure:  
" -Definiteness : Indefiniteq- 
Subject : Nmnber Singular | 
Predicate Girl ._! 
Object : \[ DefiniteneSSpredicateNUmber ::: BabySlngularDeftnite\] 
Object-2 : |F NumberDefiniteness : PluralDefinite \] 
L P~edicate Toys 
Terme : Past 
Predicate : Hand 
with the semantic  value: (Hand Girl Baby Toys), 
Compar ing the  solution of the LFG version with the 
feature structure and the semant ic  value of the SAIL 
version we have that  the LFG solution is equivalent to the 
above feature structure p lus  the semant ic  value. 
8. THE SAIL INTERFACING SYSTEM 
The SAIL Interfacing System (S.I.S.) is the f ramework  
where a user  can interact with SAIL in developing NL 
applications. In fact SIS is organized in Interface Levels 
(I.L.s): in SIS we commonly  speak of Interface Level 
Applications (I.L.A.s) which are the associat ion of an IL 
with a grammar.  
If IL-Name is the name of an IL, and G-Name is the name 
of a g rammar  which defines a part icular  language 
through a dict ionary and a set of CGU rules, then the pair 
<IL-Name, G-Name> defines an 1LA inside the SIS: this 
application is a task performed by that  part icular  IL. 
In this way the development envi ronment  is based on 
different layers of rules, which are processed by the same 
parser and can handle the external Interface, the 
part icular application, and any request  issued by the 
user. In fact, the grammar  of an ILA defines a language 
which can be used by the user  for sending to the system 
his requests o that  are caught  by the pars ing system and 
immediately satisfied. 
SIS is s t ructured in 2 main ILs: the Kenael Interface 
Level (K.I.L.) and the Natural  Language IL (N.L.I.L). 
When the system runs  only two ILAs are active and 
available to the user: the KIL, associated to the Kernel 
Grammar  (K.G.) and the Current  Running Interface Level 
(C.R.I.L.). The KIL is always aetive because it is the core 
ILA of SIS and Its purpose Is to handle the overall system, 
so when the system Is started the user  is introduced to the 
Kernel Interface Level. The Kernel Grammar  is a semant ic  
g rammar  associated with the KIL and defines a kernel  
language of commands  and through them the user  can 
use all the functional ity of the system such as grammar  
building, parse checking, running other lI.As. 
When SAIL starts up, the KIL is also the CRIL, but  when 
the user  wants  to load as CRIL another  ILA defined In the 
system, for example a NLIL application, then a KIL 
command allows this and NLIL becomes the CRIL by 
loading a grammar associated to the NLIL: in this way the 
CRIL is updated to the new application and the loaded 
grammal becomes the current rumllng grammar. 
A subset of KIL commands defines a language through 
which the user can e ~ e  the parsing structures 
generated by the parser for all the sentences input until 
that moment. This tool, named ANAPAR (ANAlysis of 
PARsing), is useful for the grammar and parse checking 
in deveh)ping NL applications, 
Finally, we want to point out that the particular structure 
given to ~IS enables the user to modify the front-end to 
SAIL by n mdifying the corresponding grammar of the KIL; 
in fact, all the files involved in their definition are 
accessible to the user who can modify those files as he 
wishes, or extend the language by introducing new 
gramma~ rules. 
CONCLUSIONS 
The example has  shown the possibi l i ty of 
implementing different grammar formalisms into the 
frame of SAIL and also the searching of standard 
procedures for building grammars in the CGU model 
starting feom Categorial Grammars is planned, 
An exper imental  component  has also been 
implemented, which performs some diagnosis of ill- 
formed input, and confirmed that the chosen parsing 
algorithm easily supports uch a component. 
A fuU evaluation of some of the described mechanisms 
(such as message passing) has not been carried yet, as 
application to real linguistic ases has not been designed, 
but theoretically. 
However, a whole view of the system, and the 
described example show that SAIL is a valuable tool for 
the development of concrete grammars, even of large 
coverage. 
The whole system described in this paper is currently 
implemented in Common Lisp and runs on Sun and 
Orion wockstations. 
"ITils work has been carried out within the framework 
of the ESPRIT Project P527 CFID (Conmmnlcation 
Failure in Dialogue: Techniques for Detection and 
Repair). 
ACKNOWLEDGMENTS 
The author is thankful to Giaeomo Ferrari and Irlna 
Prodanof or their helpful support. The author is also 
grateful to Ronan Reilly who read the draft of the paper. 
~FERENCES 
/Aho 1972/Aho, A. E. and UIlman, J.  D. (1972). The 
theory of parsing, translation and 
compi l ing.  Vol I :  Parsing. Prentice-Hall 
Inc. 
/Gr ishman 1976/Grishman, R. (1976). A survey of 
syntactic analysis procedures for natural  
language. AJCL, Microfiches 47, pp. 2-96. 
/Kaplan 1982/ Kaplan, R. and Bresnan, J. (1982). 
Lexical-Functional Grannnar: A Formal 
System for Grammatical Representation. In 
The Mental  Representat ion  of  
Grammatical Relations, Bresnan, J, Ed. 
Cambridge, MA: MIT Press, pp.173-281. 
/Marino 1987a/ Marino, M., Spiezio, A., Ferrari, G. and 
Prodanof, I. SAIL: a natural  language 
interface for the building of and interacting 
with knowledge bases. In Proceedings of 
the 2nd International Conference on 
Artificial Intelligence: Methodology, 
Systems and Application9 (AIMSA '86)? 
Varna, Bulgaria, 1986, Jon'and, P. told 
Sgurev, V., Eds. North-Holland, 1987, pp. 
349-356. 
/Marlno 1987b/ Marino, M., Splezlo, A., Ferrari, G. and 
Prodanof, I. An efficient context-free parser 
for augmented phrase-structure grammars. 
In Proceedings of 1987 ACL Europe 
Conference, Copenhagen, Denmark, 1987. 
/Marino 1988/ Mar ino,  M. {1988). The SAIL 
Interfacing System: a Framework for the 
Deve lopment  of Natura l  Language 
Grannnars and Applications. Technical  
Report DL-NLP-1988-1, Department of 
Linguistics, University of Pisa, Italy. 
/Robinson 1980/Robinson,  J., J, (1980). Interpreting 
natural- language utterances in dialogues 
about tasks. Teehn. Note 210, SRI 
International, Menlo Park, CA, 
/Robinson 1982/Robinson,  J., J .  (1982). DIAGRAIVI: A 
grammar for dialogues. CACM, 25, 1, pp. 27- 
47. 
/Winograd 1983/Winograd, T. (1983). Lauguage as a 
Cognit ive Process.  Vol. l: Syx~tax. 
Addison-Wesley. 
395 
