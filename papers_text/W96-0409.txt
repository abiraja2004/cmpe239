Tact ica l  Generat ion  in a Free Const i tuent  Order  Language 
Di lek  Zeynep Hakkan i ,  Kemal  Of lazer ,  and  I l yas  C icek l i  
Department of Computer Engineering and Information Science 
Faculty of Engineering, Bilkent University, 06533 Bflkent, Ankara, Turkey 
{ hakkani,ko,ilyas } @cs.bilkent.edu.t r 
Abst rac t  
This paper describes tactical generation in 
Turkish, a free con~stituent order language, in 
which the order of the constituents may change 
according to the information structure of the 
sentences to be generated. In the absence 
of any information regarding the information 
structure of a sentence (i.e., topic, focus, back- 
ground, etc.), the constituents of the sentence 
obey a default order, but the order is almost 
freely changeable, depending on the constraints 
of the text flow or discourse. We have used 
a recursively structured finite state machine 
for handling the changes in constituent or- 
der, implemented as a right-linear grammar 
backbone. Our implementation environment 
is the GenKit system, developed at Carnegie 
Mellon University-Center for Machine Transla- 
tion. Morphological realization has been imple- 
mented using an external morpholggical naly- 
sis/generation component which performs con- 
crete morpheme selection and handles mor- 
phographemic processes. 
In t roduct ion  
Natural Language Generation is the operation 
of producing natural language sentences us- 
ing specified communicative goals. This pro- 
cess consists of three main kinds of activities 
(McDonald, 1987): 
? the goals the utterance is to obtain must be 
determined, 
? the way the goals may be obtained must be 
planned, 
? the plans should be realized as text. 
Tactical generation is the realization, as lin- 
ear text, of the contents pecified usually using 
some kind of a feature structure that is gener- 
ated by a higher level process uch as text plan- 
ning, or transfer in machine translation appli- 
cations. In this process, a generation grammar 
and a generation lexicon are used. 
As a component of a large scale project 
on natural anguage processing for Turkish, we 
have undertaken the development of a gener- 
ator for Turkish sentences. In order to im- 
plement the variations in the constituent or- 
der dictated by various information structure 
constraints, we have used a recursively struc- 
tured finite state machine instead of enumerat- 
ing grammar ules for all possible word orders. 
A second reason for this approach is that many 
constituents, especially the arguments of verbs 
are typically optional and dealing with such 
optionality within rules proved to be rather 
problematic. Our implementation is based on 
the GenKit environment developed at Carnegie 
Mellon University-Center for Machine Trans- 
lation. GenKit provides writing a context-free 
backbone grammar along with feature struc- 
ture constraints on the non-terminals. 
The paper is organized as follows: The 
next section presents relevant aspects of con- 
stituent order in Turkish sentences and fac- 
tors that determine it. We then present an 
overview of the feature structures for represent- 
ing the contents and the information structure 
of these sentences, along with the recursive fi- 
nite state machine that generates the proper 
order required by the grammatical and infor- 
mation structure constraints. Later, we give 
the highlights of the generation grammar ar- 
chitecture along with some example rules and 
sample outputs. We then present a discussion 
comparing our approach with similar work, on 
Turkish generation and conclude with some fi- 
nal comments. 
81 
Turk ish 
In terms of word order, Turkish can be char- 
acterized as a subject-object-verb (SOV) lan- 
guage in which constituents at certain phrase 
levels can change order rather freely, depend- 
ing on the constraints of text flow or discourse. 
The morphology of Turkish enables morpho- 
logical markings on the constituents to sig- 
nal their grammatical roles without relying on 
their order. This, however, does not mean that 
word order is immaterial. Sentences with dif- 
ferent word orders reflect different pragmatic 
conditions, in that, topic, focus and back- 
ground information conveyed by such sentences 
differ, t Information conveyed through intona- 
tion, stress and/or clefting in fixed word order 
languages such as English, is expressed in Turk- 
ish by changing the order of the constituents. 
Obviously, there are certain constraints on con- 
stituent order, especially, inside noun and post- 
positional phrases. There are also certain con- 
straints at sentence level when explicit case 
marking is not used (e.g., with indefinite direct 
objects). 
In Turkish, the information which links the 
sentence to the previous context, the topic, is 
in the first position. The information which is 
new or emphasized, the focus, is in the imme- 
diately preverbal position, and the extra infor- 
mation which may be given to help the hearer 
understand the sentence, the background, is 
in the post verbal position (Erguvanh, 1979). 
The topic, focus and background information, 
when available, alter the order of constituents 
of Turkish sentences. In the absence of any 
such control information, the constituents of 
Turkish sentences have the default order: 
subject, ezpression of time, ezpression of 
place, direct object, beneficiary, source, 
goal, location, instrument, value designa- 
tor, path, duration, expression of manner, 
verb. 
All of these constituents except the verb are 
optional unless the verb obligatorily subcate- 
gorizes for a specific lexical item as an object 
in order to convey a certain (usually idiomatic) 
sense. The definiteness of the direct object 
adds a minor twist to the default order. If the 
direct object is an indefinite noun phrase, it has 
to be immediately preverbal. This is due to the 
fact that, both the subject and the indefinite 
1See Erguvanh (1979) for a discussion of the 
function of word order in Turkish grammar. 
direct object have no surface case-marking that 
distinguishes them, so word order constraints 
come into play to force this distinction. 
In order to present he flavor of word order 
variations in Turkish, we provide the following 
examples. These two sentences are used to de- 
scribe the same event (i.e., have the same log- 
ical form), but they are used in different dis- 
course situations. The first sentence presents 
constituents in a neutral default order, while 
in the second sentence 'bugiin' (today) is the 
topic and 'Ahmet'  is the focus: 2 
(1) 
a. 
Ahmet bug{in evden okula 
Ahmet today home+ABL school+DAT 
"Ahmet went from home to school 
otob{isle 3 dakikada git~i. 
bus+WITH 3 minute+LOC go+PAST+aSG 
by bus in 3 minutes today.' 
b. 
Bug{in evden okula otobiisle 
today home+ABL school+DAT bus+WITH 
'It was Ahmet who went from home to 
3 dakikada Ahmet gitti. 
3 minute+LOC Ahmet go+PAST+3SG 
school in 3 minutes by bus today.' 
Although, sentences (b) and (c), in the follow- 
ing example, are both grammatical, (c) is not 
acceptable as a response to the question (a): 
(2) 
a.  
b. 
C. 
All nereye gitti? 
All where+DAT go+PAST+3SG 
'Where did All go?' 
All okula gitti. 
All school+DAT go+PAST+3SG 
'All went to school.' 
* Okula All gitti. 
school+DAT All go+PAST+3SG 
'It was All who went to school.' 
2In the glosses, 3SG denotes third person singu- 
lar verbal agreement, P1PL and P3SG denote first 
person plural and third person singular posses- 
sive agreement, WITH denotes aderivational marker 
making adjectives from nouns, L0C, ABL, DAT, 
GEtl denote locative, ablative, dative, and genitive 
case markers, PAST denotes past tense, and INF de- 
notes a marker that derives an infinitive form from 
a verb .  
82 
The word order variations exemplified by (2) 
are very common in Turkish, especially in dis- 
course. 
Generat ion  o f  F ree  Word  Order  
Sentences  
The generation process gets as input a feature 
structure representing the content of the sen- 
tence where all the lexical choices have been 
made, then produces as output he surface form 
of the sentence. The feature structures for sen- 
tences are represented using a case-frame rep- 
resentation. Sentential arguments of verbs ad- 
here to the same morphosyntactic constraints 
as the nominal arguments (e.g., the participle 
of, say, a clause that acts as a direct object 
is case-marked accusative, just as the nomi- 
nal one would be). This enables a nice recur- 
sire embedding of case-frames of similar gen- 
eral structure to be used to represent sentential 
arguments. 
In the next sections, we will highlight rel- 
evant aspects of our feature structures for sen- 
tences and their constituents. 
S imple  Sentences  
We use the case-frame f ature structure in Fig- 
ure 1 to encode the contents of a sentence. 3 
We use the information given in the CONTROL 
feature to guide our grammar in generating 
the appropriate sentential constituent order. 
This information is exploited by a right linear 
grammar (recursively structured nevertheless) 
to generate the proper order of constituents 
at every sentential level (including embedded 
sentential clauses with their own information 
structure). The simplified outline of this right 
linear grammar is given as a finite state ma- 
chine in Figure 2. Here, transitions are labeled 
by constraints and constituents ( hown in bold 
face along a transition arc) which are gener- 
ated when those constraints are satisfied. If 
any transition has a NIL label, then no surface 
form is generated for that transition. 
The recursive behavior of this finite state 
machine comes from the fact that the individ- 
ual argument or adjunct constituents can also 
embed sentential clauses. Sentential clauses 
3Here, c-name denotes a feature structure for 
representing noun phrases or case-frames repre- 
senting embedded sentential forms which can be 
used as nominal or adverbial constituents. 
"S-FORM 
CLAUSE-TYPE 
VOICE 
SPEECH-ACT 
QUES 
VERB 
ARGS 
ADJN 
CONTROL 
infinitive/adverbial/participle/finite 
existential/attributive/predicative 
active/reflexive/reciprocal/passive/causative 
imperative/opt ative/necessit ative/wish/ 
interrogative/declarative 
TYPE yes-no/wh \] 
CONST l i s t -o f ( sub jec t /d i r -ob j /e t? , ) J  
ROOT verb 
POLARITY negative/positive 
TENSE present/past/future 
ASPECT progressive/habitual/etc. 
MODALITY potentiality 
DIR-OBJ c -name 
SOURCE c .name 
GOAL c -name 
LOCATION c .name 
BENEFICIARY c -narne  
INSTRUMENT c -narne  
VALUE c -name 
TIME c -name-  
PLACE e-name 
MANNER c -name 
PATH c -narne  
DURATION c -name 
"TOPIC constituent" 
FOCUS constituent 
BACKGR constituent 
Figure 1: The case-frame for Turkish sentences. 
correspond to either full sentences with non- 
finite or participle verb forms which act as noun 
phrases in either argument or adjunct roles, 
or gapped sentences with participle verb forms 
which function as modifiers of noun phrases 
(the filler of the gap). The former non-gapped 
forms can in Turkish be further classified into 
those representing acts, facts and adverbials. 
The latter (gapped form) is linked to the filler 
noun phrase by the ROLES feature in the struc- 
ture for noun phrase (which will be presented in 
the following sections): this feature ncodes the 
(semantic) role filled by the filler noun phrase 
and the case-frame of the sentential clause. The 
details of the feature structures for sentential 
clauses are very similar to the structure for the 
case-frame. Thus, when an argument or ad- 
junct, which is a sentential clause, is to be re- 
alized, the clause is recursively generated by 
using the same set of transitions. For example, 
the verb 'g6r' (see) takes a direct object which 
can be a sentential clause: 
83 
(3) 
Ay?e'nin geli?ini 
Ay~e+GEN come+INF+P3SG 
'I did not see Ay~e's coming.' 
g6rmedim. 
see+NEG+PAST+ISG 
Similarly, the subject or any other constituent 
of a sentence can also be a sentential clause: 
(4) 
Ali'nin buraya gelmesi 
AIi+GEN here come+INF+P3SG 
'Ali 's coming here made us 
bizim i~i bitirmemizi 
we+GEN the_job finish+INF+P1PL+ACC 
finish the job easier.' 
kolayl~tlr&. 
make_easy+PAST+3SG 
In all these cases, the main sentence gener- 
ator also generates the sentential subjects and 
objects, in addition to generating the main sen- 
tence. 
Complex  Sentences 
Complex sentences are combinations of simple 
sentences (or complex sentences themselves) 
which are linked by either conjoining or vari- 
ous relationships like conditional dependence, 
cause-result, etc. The generator works on a 
feature structure representing a complex sen- 
tence which may be in one of the following 
forms: 
? a s imple  sentence.  In this case the sentence 
has the case-frame as its argument feature 
structure. 
TYPE simple \] 
ARG case- frame\] 
? a ser ies  o f  s imple  or complex sentences con- 
nected by coordinating or bracketing con- 
junctions. Such sentences have feature struc- 
tures which have the individual case-frames 
as the values of their ELEMENTS features: 
eonj \[TYPE and/or/etc. \] \[CONJ 
\]..ELEMENTS list-of(compl .. . .  entence)J 
? sentences  l inked with a certa in relat ionship.  
Such sentences have the feature structure: 
TYPE linked 
LINK-RELATION \[el 
ARG 1 complex-sentence 
ARG2 complex-sentence 
Issues in Representing Noun Phrases 
In this section we will briefly touch on relevant 
aspects of the representation of noun phrases. 
We use the following feature structure (sim- 
plified by leaving out irrelevant details) to de- 
scribe the structure of a noun phrase: 
\[ARO ba ......... 1\] REF CONTROL \[DROP +/- (default -) 
CLASS classifier 
ROLES role-type 
list-off mod. relatzon) 1 MOD-REL 
\[POSITION pos.\] 
ORDINAL \[INTENSIFIER +/-J 
MODF \[QUANT-MOD quant2fier 
QUALY-MOD list-of\[strnple-property) I 
LCONTROL t/EMPHASIS n TMquant/\]/\]j 
DEFINITE +/- 
DET REFERENTIAL +/- 
SPEC \[.SPECIFIC +/- 
|SET-SPEC list-of(c-name) 
|SPEC-REL list-of(spec, relation') 
LDEMONS demonst ra t ive  
L/ARGUMENT c-name \]\] 
POSS ICONTROL \[DROP +/- 
/MOVE +/- 
The order of constituents in noun phrases 
is rather strict at a gross level, i.e., speficiers 
almost always precede modifiers and modifiers 
almost always precede classifiers, 4 which pre- 
cede the head noun, although there are numer- 
ous exceptions. Also, within each group, word 
order variation is possible due to a number of 
reasons: 
? The order of quantitative and qualitative 
modifiers may change: the aspect that is em- 
phasized is closer to the head noun. The in- 
definite singular determiner may also follow 
4A classifier in Turkish is a nominal modifier 
which forms a noun-noun noun phrase, essentially 
the equivalent of book in forms fike book cover in 
Engfish. 
84 
z ~ 
z ~ 
) 
~ ,  
e ~ 
.' ~ ~ ~- :~ ~. ,~ ~ 
2.~ 
? N ,, ~ i \ ]  
( 
)?ii~, 
Figure 2: The finite state machine for generating the proper order of constituents in Turkish sentences. 
85 
any qualitative modifier and immediately 
precede any classifier and/or head noun. 
? Depending on the determiner used, the po- 
sition of the demonstrative specifier may be 
different. This is a strictly lexical issue and 
not explicitly controlled by the feature struc- 
ture, but by the information (stored in the 
lexicon) about the determiner used. 
? The order of lexieal and phrasal modi- 
fiers (e.g., corresponding to a postpositional 
phrase on the surface) may change, if po- 
sitioning the lexical modifier before the 
phrasal one causes unnecessary ambiguity 
(i.e.. the lexical modifier in that case can 
also be interpreted as a modifier of some in- 
ternal constituent of the phrasal modifier). 
So, phrasal modifiers always precede lexical 
modifiers and phrasal specifiers precede lex- 
ical specifiers, unless otherwise specified, in 
which case punctuation eeds to be used. 
? Tile possessor may scramble to a position 
past the head or even outside the phrase (to 
a background position), or allow some adver- 
bial adjunct intervene between it and the rest 
of the noun phrase, causing a discontinuous 
constituent. Although we have included con- 
trol information for scrambling the possessor 
to post head position, we have opted not to 
deal with either discontinuous constituents 
or long(er) distance scrambling as these are 
mainly used in spoken discourse. 
Furthermore, since the possessor informa- 
tion is explicitly marked on the head noun, 
if the discourse does not require an overt 
possessor 5 it may be dropped by suitable set- 
ting of the DROP feature. 
In ter fac ing  w i th  Morpho logy  
As Turkish has complex agglutinative word 
forms with productive inflectional and deriva- 
tional morphological processes, we handle mor- 
phology outside our system using the gener- 
ation component of a full-scale morphological 
SFor example, (c) cannot be used as an answer 
to (a) in the following discourse, where the owner 
of the book should be emphasized: 
a. Kimin kitabl kahn? 
whose book+P3SG thick 
"Whose book is thick?' 
b. Benim kitablm kahn. 
I+GEN book+P1SG thick 
'My book is thick.' 
c. * Kitablm kahn. 
book+P1SG thick 
analyzer of Turkish (Oflazer, 1993). Within 
GenKit, we generate relevant abstract mor- 
phological features uch as agreement and pos- 
sessive markers and case marker for nominals 
and voice, polarity, tense, aspect, mood and 
agreement markers for verbal forms. This in- 
formation is properly ordered at the interface 
and sent to the morphological generator, which 
then: 
1. performs concrete morpheme selection, dic- 
tated by the morphotactic onstraints and 
morphophonological ontext, 
2. handles morphographemic phenomena such 
as vowel harmony, and vowel and consonant 
ellipsis, and 
3. produces an agglutinative surface form. 
Grammar  Arch i tec ture  and  
Output  
Our generation grammar is written in a formal- 
ism called Pseudo Unification Grammar im- 
plemented by the GenKit generation system 
(Tomita and Nyberg, 1988). Each rule consists 
of a context-free phrase structure description 
and a set of feature constraint equations, which 
are used to express constraints on feature val- 
ues. Non-terminals in the phrase structure part 
of a rule are referenced as x0 . . . . .  xn in the 
equations, where x0 corresponds to the non- 
terminal in the left hand side, and xn is the 
n th non-terminal in the right hand side. Since 
the context-free rules are directly compiled into 
tables, the performance of the system is es- 
sentially independent of the number of rules, 
but depends on the complexity of the feature 
constraint equations (which are compiled into 
LISP code). Currently, our grammar has 273 
rules each with very simple constraint checks. 
Of these 273 rules, 133 are for sentences and 
107 are for noun phrases. 
To implement he sentence level genera- 
tor (described by the finite state machine pre- 
sented earlier), we use rules of the form: 
Si ----~ XP Sj 
where the Si and Sj denote some state in the 
finite state machine and the XP denotes the con- 
stituent to be realized while taking this tran- 
sition. If this XP corresponds to a sentential 
clause, the same set of rules are reeursively ap- 
plied. This is a variation of the method sug- 
gested by Takeda et al (1991). 
86 
Tile following are rule examples that im- 
plement some of the transitions from state 0 to 
state 1: 
(<S> <==> (<Sl>)  
( 
( (x0  cont ro l  top ic )  =c *undef ined*)  
(x l  = x0) 
)) 
(<S> <==> (<Sub ject> <Sl>)  
( 
( (x0  cont ro l  top ic )  =c sub jec t )  
(x2 = x0) 
( (x2  arguments sub jec t )  = *remove*) 
(x l  = (x0 arguments sub jec t ) )  
)) 
(<S> <==> (<Time> <Sl>) 
( 
((xO control topic) =c time) 
(x2 = x0) 
( (x2  ad juncts  t ime)  = * remove*)  
(x l  = (x0 ad juncts  t ime) )  
)) 
The grammar also has rules for realizing a 
const i tuent  l ike <Sub ject> or <Time> (which 
may eventually call the same rules if the ar- 
gument is sentential) and rules like above for 
t ravers ing the finite state machine from state 1 
on.  
Examples  
In this section, we provide feature structures 
tbr three example sentences which only differ 
in their information structures. Although the 
following feature structures seem very similar, 
they correspond to different surface formsJ 
(5) 
Ahmet diin kitabl  masada 
Ahmet yesterday book+ACC table+LOC 
'Ahmet  left the book on the table 
btraktl .  
l eave+PAST+3SG 
yesterday. '  
"S- FO RM 
CLAUSE-TYPE 
VOICE 
SPEECH-ACT 
VERB 
ARGUMENTS 
ADJUNCTS 
finite 
predicative 
active 
declarative 
"ROOT #birak \] 
SENSE positive\[ 
TENSE past \[ 
ASPECT perfect J
SUBJECT { Ahmet}\] 
Dm-OBJ {ki~ap} | 
LOCATION {masa} J 
\[TIME { di.in }\] 
(6) 
Dfin kitabl masada Ahmet 
yesterday book+ACC table+LOC Ahmet 
' It was Ahmet  who left the book on 
blrakU. 
leave+PAST+3SG 
the table yesterday. '  
"S-FORM finite 
CLAUSE-TYPE predicative 
VOICE 
SPEECH-ACT 
VERB 
ARGUMENTS 
ADJUNCTS 
CONTROL 
active 
declarative 
"ROOT 
SENSE 
TENSE 
ASPECT 
"SUBJECT 
DIR-OBJ 
~blrak - 
positive 
past 
perfect 
{Ahmet}" 
{kitap} 
LOCATION {m~a} 
TIME {dUn}\[ 
'TOPIC time \] 
FOCUS subject 
(7) 
Diin kitabl Ahmet 
yesterday book+ACC Ahmet 
' It was Ahmet  who left the book 
6The feature values in curly brackets indicate 
that, that feature has as value a c -name structure 
for the noun phrase inside the curly brackets. 
blraktl  masada.  
Ieave+PAST+3SG table+LOC 
yesterday on the table. '  
87 
"S-FORM 
CLAUSE-TYPE 
VOICE 
SPELCH-ACT" 
VERB 
ARGUMENTS 
ADJUNCTS 
CONTROL 
finite 
predicative 
active 
declarative 
"ROOT #blrak 
SENSE positive 
TENSE past 
ASPECT perfect 
I SUBJECT {Ahmet}" Om-OBJ {k,tap} LOCATION {m~a} 
\ [~,~ {~0n}\] 
TOPIC time \] 
FOCUS subject |
BACKGROUND IocationJ 
Figure 3 shows the path the generator fol- 
lows while generating sentence 7. The solid 
lines show the transitions that the generator 
makes in its right linear backbone. 
Compar i son  w i th  Re la ted  Work  
Dick (1993) has worked on a classification 
based language generator for Turkish. His goal 
was to generate Turkish sentences of varying 
complexity, from input semantic representa- 
tions in Penman's Sentence Planning Language 
(SPL). However, his generator is not complete, 
in that, noun phrase structures in their en- 
tirety, postpositional phrases, word order vari- 
ations, and many morphological phenomena 
are not implemented. Our generator differs 
from his in various aspects: We use a case- 
frame based input representation which we feel 
is more suitable for languages with free con- 
stituent order. Our coverage of the grammar 
is substantially higher than the coverage pre- 
sented in his thesis and we also use a full-scale 
external morphological generator to deal with 
complex morphological phenomena of aggluti- 
native lexical forms of Turkish, which he has 
attempted embedding into the sentence gener- 
ator itself. 
Hoffman, in her thesis (Hoffman, 1995a, 
Hoffman, 1995b), has used the Multiset- 
Combinatory Categorial Grammar formalism 
(Hoffman, 1992), an extension of Combinatory 
Categorial Grammar to handle free word or- 
der languages, to develop a generator for Turk- 
ish. Her generator also uses relevant features of 
the information structure of the input and can 
handle word order variations within embedded 
clauses. She can also deal with scrambling out 
of a clause dictated by information structure 
constraints, as her formalism allows this in a 
very convenient manner. The word order in- 
formation is lexically kept as multisets associ- 
ated with each verb. She has demonstrated the 
capabilities of her system as a component of 
a prototype database query system. We have 
been influenced by her approach to incorporate 
information structure in generation, but, since 
our aim is to build a wide-coverage generator 
for Turkish for use in a machine translation ap- 
plication, we have opted to use a simpler for- 
malism and a very robust implementation en- 
vironment. 
Conc lus ions  
We have presented the highlights of our work 
on tactical generation in Turkish - a free 
constituent order language with agglutinative 
word structures. In addition to the content in- 
formation, our generator takes as input the in- 
formation structure of the sentence (topic, fo- 
cus and background) and uses these to select 
the appropriate word order. Our grammar uses 
a right-linear ule backbone which implements 
a (recursive) finite state machine for dealing 
with alternative word orders. We have also pro- 
vided for constituent order and stylistic varia- 
tions within noun phrases based on certain em- 
phasis and formality features. We plan to use 
this generator in a prototype transfer-based hu- 
man assisted machine translation system from 
English to Turkish. 
Acknowledgments  
We would like to thank Carnegie Mellon 
University-Center for Machine Translation for 
providing us the GenKit environment. This 
work was supported by a NATO Science for 
Stability Project Grant TU-LANGUAGE. 
References  
\[Dick, 1993\] Colin Dick. 1993. Classification 
based language generation in Turkish. Mas- 
ter's thesis, University of Edinburgh. 
\[Erguvanh, 1979\] Eser Emine Erguvanh. 1979. 
The Function of Word Order in Turkish 
Grammar. Ph.D. thesis, University of Cali- 
fornia, Los Angeles. 
\[Hoffman, 1995a\] Beryl Hoffman. 1995a. The 
Computational Analysis of the Syntax and 
Interpretation of "Free" Word Order in 
88 
,' ~.~.~ ~ 
- -  _ _  
~,, ~:~ 
~.~ ~ ~ 
~,' ~:~ ,' 
, ,  ~ ~ ~,  
2,~a 
~,, ~-  
, /  
.= . -=~ . ,, ,, ,.~, .. . .  - .  - .~ ' - . . .  
_,,'~. .~,,~ ~ ~ " ~, ~, .j ~ .= .~,~ ,~ ~=,~ ~,,~. ,~ 
~,,~, = ~ ~ ? ,~ "u ~ ~ .~ =,,, .~  u '~ .~, ~',  
"~. ',~ ~, ~,,~ ~, ~ ~ ~ ~,'~ ,~ ,~ =,'.~ ~,~. >,~ 
' ~=~ ~ a = 'm ~ , '~  ' , .~  'i... , '~  
',, ,, ' ,,a,~ o ~ ' '~ ' ,  , '  , "~ . ' "  . "  
u 
~_~.- ,'~ ,~, -~ ,,'-~ ~',, 3",, ~,, ~, ! .  ' -~ 
~, ,~ ~.; _,= >,~ ~ =,= ~.= z,-= 
~, =','2 ~'~ , ~,.~ '~  ,Z  =,'~ ,,~ '-: ,, ~ =~ "~ ? ~ , '2 '~  ,zZ 'Z  , '~  
' i  .' ~ ,~, '~ .  " ~," .~ 
~',, ~, ~ ~ 
~'- .  \ ,. ,, .,, , ,~ ,  ,, , , .. . 
X ~.  
Figure 3: The transitions followed for generating sentence 7. 
89 
Turkish. Ph.D. thesis, Computer and Infor- 
mation Science, University of Pennsylvania. 
\[Hoffman, 1995b\] Beryl Hoffman. 1995b..Inte- 
grating "free" word order syntax and infor- 
mation structure. In Proceedings of the Sev- 
enth Conference of the European Chapter of 
the Association for Computational Linguis- 
tics, Dublin, Ireland. 
\[Hoffman, 1992\] Beryl Hoffman. 1992. A CCG 
approach to free word order languages. In 
Proceedings of the 30 th Annual Meeting of 
the Association for Computational Linguis- 
tics. 
\[McDonald, 1987\] David D. McDonald. 1987. 
Natural language generation. In S C (ed) 
Shapiro, editor, Encyclopedia of Artificial 
Intelligence, pages 642-655. Chicester: John 
Wiley and Sons. 
\[Oflazer, 1993\] Kemal Oflazer. 1993. Two-level 
description of Turkish morphology. In Pro- 
ceedings of the Sixth Conference of the Eu- 
ropean Chapter of the Association for Com- 
putational Linguistics, April. A full version 
appears in Literary and Linguistic Comput- 
ing, Vol.9 No.2, 1994. 
\[Takeda et al, 1991\] Koichi Takeda, Naohiko 
Uramoto, Tetsuya Nasukawa, and Taijiro 
Tsutsumi, 1991. Shalt2- A Symmetric 
Machine Translation System with Concep- 
tual Transfer. IBM Research, Tokyo Re- 
search Laboratory, 5-19 Sanbacho, Chiyoda- 
ku, Tokyo 102, Japan, November. 
\[Tomita nd Nyberg, I988\] Masaru Tomita 
and Eric H. Nyberg. \[988. Generation kit 
and transformation kit, version 3.2, user's 
manual. Carnegie Mellon University-Center 
for Machine Translation, October. 
90 
