JU-PTBSGRE:  GRE Using Prefix Tree Based Structure  
                            Abstract 
This paper presents a Prefix Tree based model 
of Generation of Referring Expression (RE). 
Our algorithm PTBSGRE works in two phas-
es. First, an encoded prefix tree is constructed 
describing the domain structure. Subsequent-
ly, RE is generated using that structure. We 
evaluated our system using Dice, MASI, Ac-
curacy, Minimality and Uniqueness scoring 
method using standard TEVAl tool and the re-
sult is encouraging. 
1 Introduction 
Generation of referring expression (GRE) is an 
important task in the field of Natural Language 
Generation (NLG) systems. The existing algo-
rithms in GRE lie in two extremities. Incremental 
Algorithm is simple and speedy but less expressive 
in nature whereas others are complex and exhaus-
tive but more expressive in nature. We propose a 
new Prefix Tree (Trie) based framework for mod-
eling GRE problems. It incorporates intricate fea-
tures of GRE (like set and boolean descriptions, 
context sensitivity, relational description etc.) 
while achieving attractive properties of Incremen-
tal algorithm (simplicity, speed etc.). The prefix 
tree based algorithm works in two phases. First, it 
encodes the description, stored in the knowledge 
base, in the form of prefix tree structure. Secondly, 
it generates the referring expression identifying the 
target object, which is basically a node search 
problem in the tree. The edges in our encoded trie 
structure are labeled and the path from root to that 
node forms the distinguishing description for the 
target object.  
Let D be the Domain, r be the target object and 
P be the ?PreferredAttributes? List.The Trie con-
structionn algorithm  ConstructTrie(D,P,T) is 
shown in figure 1, Referring expression generation 
algorithm MakeRefExpr(r,p,T,L) is shown in 
figure 2, where T is a node pointer and p is pointer 
to parent of that node. Our algorithm MakeRe-
fExpr returns set of attribute-values L to identify r  
in the domain. [[Ni]]= {d |d?D and d is stored at 
node Ni where Ni is an i-th level node}. Card(N) is 
cardinality of set of objects in node N. 
 
Figure 1. Prefix Tree Generation Algorithm 
 
Figure 2. Expression Generation Algorithm 
The significant achievement is that incompleteness 
of previous algorithms can be tackled in this model 
in a straightforward way. For example, in case of 
vague descriptions (overlapping properties), In-
cremental and other algorithms are unable to find 
unambiguous description even if it exists but our 
prefix tree model takes into account hearer model      
                         
                     Sibabrata Paladhi 
 
Sivaji Bandyopadhyay 
            Department of Computer Sc. & Engg. Department of Computer Sc. & Engg. 
Jadavpur University, India Jadavpur University, India 
            sibabrata_paladhi@yahoo.com            sivaji_cse_ju@yahoo.com 
 
 
 
230
and generate description for identifying the target 
object. Besides, in case of Boolean, plural, context 
sensitive and relational description generation our 
model provides a simple and linguistically rich 
approach to GRE. 
2 Evaluation Results  
In Table 1 and 2 the evaluation results for Furni-
ture and People data has been shown. 
 
 
Table1: Evaluation Result of Furniture data 
 
Table2: Evaluation Result of People data 
References  
R. Dale and E. Reiter. 1995. Computational Interpretations of 
the Gricean Maxims in the generation of Referring Expres-
sions. Cognitive Science (18): 233 ?263 
S. Paladhi and S. Bandyopadhyay. 2008. Generation of Refer-
ring Expression Using Prefix Tree Structure. Proceedings 
of  IJCNLP: 697-702 
van Deemter. 2002. Boolean Extensions of Incremental Algo-
rithm. Computational Linguistics 28(1): 37-52 
231
