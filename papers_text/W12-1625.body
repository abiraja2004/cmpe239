Proceedings of the 13th Annual Meeting of the Special Interest Group on Discourse and Dialogue (SIGDIAL), pages 179?188,
Seoul, South Korea, 5-6 July 2012. c?2012 Association for Computational Linguistics
Probabilistic Dialogue Models with Prior Domain Knowledge
Pierre Lison
Department of Informatics
University of Oslo, Norway
plison@ifi.uio.no
Abstract
Probabilistic models such as Bayesian Net-
works are now in widespread use in spoken
dialogue systems, but their scalability to com-
plex interaction domains remains a challenge.
One central limitation is that the state space
of such models grows exponentially with the
problem size, which makes parameter esti-
mation increasingly difficult, especially for
domains where only limited training data is
available. In this paper, we show how to cap-
ture the underlying structure of a dialogue do-
main in terms of probabilistic rules operating
on the dialogue state. The probabilistic rules
are associated with a small, compact set of pa-
rameters that can be directly estimated from
data. We argue that the introduction of this ab-
straction mechanism yields probabilistic mod-
els that are easier to learn and generalise bet-
ter than their unstructured counterparts. We
empirically demonstrate the benefits of such
an approach learning a dialogue policy for a
human-robot interaction domain based on a
Wizard-of-Oz data set.
1 Introduction
Spoken dialogue systems increasingly rely on prob-
abilistic models at various stages of their pipeline.
Statistical methods have notably been applied to
tasks such as disfluency detection (Lease et al.,
2006), semantic parsing (Erdogan et al., 2002; He
and Young, 2005), dialogue act recognition (Stol-
cke et al., 2000; Lan et al., 2008), dialogue man-
agement (Frampton and Lemon, 2009; Young et al.,
2010), natural language generation (Oh and Rud-
nicky, 2002; Lemon, 2011) and speech synthesis
(Zen et al., 2009).
There are two compelling reasons for this grow-
ing interest in statistical approaches: first, spoken
dialogue is pervaded with noise and uncertainty
(due to e.g. speech recognition errors, linguistic
and pragmatic ambiguities, and unknown user in-
tentions), which must be dealt with at all processing
stages. Second, a decisive advantage of probabilis-
tic models lies in their ability to be automatically
optimised from data, enabling statistically-based di-
alogue systems to exhibit conversational behaviours
that are often more robust, flexible and adaptive than
hand-crafted systems (Lemon and Pietquin, 2007).
Despite their success, the use of probabilistic
models also presents a number of challenges. The
most pressing issue is the paucity of appropriate data
sets. Stochastic models often require large amounts
of training data to estimate their parameters ? ei-
ther directly (Henderson et al., 2008) or indirectly
by way of a user simulator (Schatzmann et al., 2007;
Cuaya?huitl et al., 2010). Unfortunately, real interac-
tion data is scarce, expensive to acquire, and difficult
to transfer from one domain to another. Moreover,
many dialogue domains are inherently open-ended,
which means they are not limited to the completion
of a single task with predefined features but have to
represent a varying number of tasks, complex user
models and a rich, dynamic environment. Exam-
ples of such domains include human-robot interac-
tion (Kruijff et al., 2010), cognitive assistants and
companions (Nguyen, 2005; Cavazza et al., 2010),
and tutoring systems (Litman and Silliman, 2004;
Eskenazi, 2009). In such settings, the dialogue sys-
tem might need to track a large number of variables
in the course of the interaction, which quickly leads
to a combinatorial explosion of the state space.
There is an extensive body of work in the machine
179
learning and planning literature that shows how to
address this issue by relying on more expressive rep-
resentations, able to capture relevant aspects of the
problem structure in a compact manner. By taking
advantage of hierarchical or relational abstractions,
system developers can leverage their domain knowl-
edge to yield probabilistic models that are easier to
learn (due to a reduced number of parameters) and
more efficient to use (since the structure can be ex-
ploited by the inference algorithm).
The contributions of this paper are twofold. We
first present a new framework for encoding prior
knowledge in probabilistic dialogue models, based
on the concept of probabilistic rules. The frame-
work is very general and can accommodate a wide
spectrum of domains and learning tasks, from fully
statistical models with virtually no prior knowledge
to manually designed models with only a hand-
ful of parameters. Second, we demonstrate how
this framework can be exploited to learn stochas-
tic dialogue policies with limited data sets using a
Bayesian learning approach.
The following pages spell out the approach in
more detail. In Section 2, we provide the general
background on probabilistic models and their use in
spoken dialogue systems. We describe in Section 3
how to encode such models via probabilistic rules
and estimate their parameters from data. In Sec-
tion 4, we detail the empirical evaluation of our ap-
proach in a human-robot interaction domain, given
small amounts of data collected in Wizard-of-Oz ex-
periments. Finally, we discuss and compare our ap-
proach to related work in Section 5.
2 Background
2.1 Bayesian Networks
The probabilistic models used in this paper are ex-
pressed as directed graphical models, also known as
Bayesian Networks. Let X1...Xn denote a set of
random variables. Each variable Xi is associated
with a range of mutually exclusive values. In dia-
logue models, this range is often discrete and can be
explicitly enumerated: V al(Xi) = {x1i , ..., xmi }.
A Bayesian Network defines the joint probabil-
ity distribution P (X1...Xn) via conditional depen-
dencies between variables, using a directed graph
where each node corresponds to a variable Xi. Each
A
C
B
D
E
Value for B: P(B)
T 0.6
F 0.4
Value for A: P(A)
T 0.3
F 0.7
Value for C P(C)
T
 1.0 if (A=T ? B=T)
 0.0 otherwise
F
 0.0 if (A=T ? B=T)
 1.0 otherwise
Value 
for D:
P(D|C)
C=T C=F
T 0.2 0.99
F 0.8 0.01
Value 
for E:
P(E|C)
C=T C=F
T 0.5 0.4
F 0.5 0.6
Figure 1: Example of Bayesian network with 5 nodes.
The double circles denote a deterministic node. As
an example, the query P (A|D=T) gives the result
P (A=T|D=T) ? 0.18 and P (A=F|D=T) ? 0.82.
edge Xi ? Xj denotes a conditional dependence
between the two nodes, in which case Xi is said to
be a parent of Xj . A conditional probability distri-
bution P (Xi|Par(Xi)) is associated with each node
Xi, where Par(Xi) denotes the parents of Xi.
Conditional probability distributions (CPDs) can
be defined in various ways, from look-up tables
to deterministic distributions (Koller and Friedman,
2009). Together with the directed graph, the CPDs
fully determine the joint probability distribution of
the Bayesian Network. The network can be used for
inference by querying the distribution of a subset of
variables, often given some additional evidence, as
illustrated by the example in Figure 1.
2.2 Dialogue Models
A dialogue state s is usually decomposed into a set
of state variables s = {s1, ...sn} representing rel-
evant features of the interaction. For instance, the
state variables for a human-robot interaction sce-
nario might be composed of tasks to accomplish, the
interaction history, past events, as well as objects,
spatial locations and agents in the environment.
Given the uncertainty present in spoken dialogue,
many variables are only partially observable. We
thus encode our knowledge of the current state in
a distribution b(s) = P (s1, ..., sn) called the be-
lief state, which can be conveniently expressed as
a Bayesian Network (Thomson and Young, 2010).
This belief state b is regularly updated as new infor-
180
Speech 
recognition
Speech 
understanding
Generation
Speech 
synthesis
Extra-linguistic environment
User
input speech signal
(user utterance)
Recognition
hypotheses u
u
  
Utterance to 
synthesise u
m
output speech signal
(machine utterance)
Interpreted
utterance ?
u
Intended
response a
m
~
Belief state b
Belief 
update
Action 
selection
Dialogue management
Figure 2: Dialogue system architecture schema.
mation becomes available. As illustrated in Figure
2, the whole system pipeline can be formalised in
terms of inference steps over this belief state:
1. Upon detection of a new utterance, the speech
recogniser generates the N-best list of recogni-
tion hypotheses u?u = P (uu|o);
2. Speech understanding then searches for the
most likely dialogue act(s) realised in the ut-
terance: a?u = P (au|u?u,b);
3. The belief state is updated with the new inter-
preted dialogue act: b? = P (s?|a?u,b);
4. Based on the updated belief state, the action se-
lection searches for the optimal system action
to perform: a?m = arg maxam Q(am|b);
5. The system action is then realised in an utter-
ance um, which is again framed as a search for
u?m = arg maxum Q(um|b, am);
6. Finally, the dialogue state is re-updated given
the system action: b? = P (s?|am,b).
The models defined above use P (x|b) as a nota-
tional convenience for?si?V al(s) P (x|s=si)b(si).
The same holds for the estimated values u?u and a?u:
P (x|y?) =?yi?V al(y?) P (x|y=yi)P (y=yi).
3 Approach
The starting point of our approach is the observation
that dialogue often exhibits a fair amount of internal
structure. This structure can take several forms.
We can first note that the probability or utility
of a given output variable often depends on only a
small subset of input variables, although the num-
ber and identity of these variables might naturally
differ from action to action. The state variable en-
coding the physical location of a mobile robot is for
instance relevant for answering a user requesting its
location, but not for responding to a greeting act.
Moreover, the values of the dependent variables
can often be grouped into partitions yielding
similar outcomes, thereby reducing the problem
dimensionality. The partitions can generally be
expressed via logical conditions on the variable
values. As illustration, consider a dialogue where
the user can ask yes/no questions pertaining to the
colour of specific objects (e.g. ?Is the ball red??).
The utility of the system action Confirm depends
on two variables: the user dialogue act, for instance
au= VerifyColour(ball, red), and the object colour,
such as ball.colour = blue. The combination of
these two variables can take a wide range of values,
but the utility of Confirm only depends on two par-
titions: (VerifyColour(x, y) ? x.colour=y),
in which case the utility is positive, and
(VerifyColour(x, y) ? x.colour 6=y), in which
case it is negative.
We outline below a generic description frame-
work for expressing this internal structure, based on
the concept of probabilistic rules. The rules ex-
press the distribution of a dialogue model in terms of
structured mappings between input and output vari-
ables. At runtime, the rules are then combined to
perform inference on the dialogue state, i.e. to com-
pute the distribution of the output variables given the
input variables. As we shall see, this is done by in-
stantiating the rules and their associated variables
to construct an equivalent Bayesian Network used
for inference. The probabilistic rules thus function
as high-level templates for a classical probabilistic
model. The major benefit of this approach is that the
rule structure is described in exponentially fewer pa-
rameters than its plain counterpart, and is thus much
easier to learn and to generalise to unseen data.
3.1 Definitions
A probabilistic rule is defined as a condition-effect
mapping, where each condition is mapped to a set
of alternative effects, each being assigned a distinct
181
probability. The list of conditions is ordered and
takes the form of a ?if ... then ... else? case express-
ing the distribution of the output variables depending
on the inputs.
Formally, a rule r is defined as an ordered list
of cases ?c1, ...cn?, where each case ci is associated
with a condition ?i and a distribution over stochas-
tic effects {(?1i , p1i ), ..., (?ki , pki )}, where ?ji is a
stochastic effect and probability pji = P (?ji |?i),
where p1...ki satisfy the usual probability axioms.
The rule reads as such:
if (?1) then
{P (?11) = p11, ... P (?k1 ) = pk1}
...
else if (?n) then
{P (?1n) = p1n, ... P (?mn ) = pmn }
A final else case is implicitly added to the bottom of
the list, and holds if no other condition applies. If
not overridden, the default effect associated to this
last case is void ? i.e. it causes no changes to the
distribution over the output variables.
Conditions
The rule conditions are expressed as logical for-
mulae grounded in the input variables. They can be
arbitrarily complex formulae connected by conjunc-
tion, disjunction and negation. The conditions on
the input variables can be seen as providing a com-
pact partitioning of the state space to mitigate the
dimensionality curse. Without this partitioning in
alternative conditions, a rule ranging over m vari-
ables each of size n would need to enumerate nm
possible assignments. The partitioning with condi-
tions reduces this number to p mutually exclusive
partitions, where p is usually small.
Effects
The rule effects are defined similarly: given a con-
dition holding on a set of input variables, the asso-
ciated effects define specific value assignments for
the output variables. The effects can be limited to
a single variable or range over several output vari-
ables. For action selection, effects can also take the
form of assignments of utility values for a particular
action, i.e. Q(am = x) = y, where y is the scalar
value for the utility of action x.
Each effect is assigned a probability, and several
alternative stochastic effects can be defined for the
same case. If a unique effect is specified, it is then
implicitly assumed to hold with probability 1.0. The
probabilities of stochastic effects and the action util-
ities are treated as parameters, which can be either
hand-coded or estimated from data.
Example
The rules r1 and r2 below express the utilities of
two actions: the physical action ExecuteMov(X)
(with X representing the movement type), and the
clarification request AskRepeat.
r1 : if (au= RequestMov(X)) then
{Q(am= ExecuteMov(X)) = ?(1)r1 }
r2 : if (au 6= ? ? am 6= AskRepeat) then
{Q(am= AskRepeat) = ?(1)r2 }
else if (au 6= ?) then
{Q(am= AskRepeat) = ?(2)r2 }
Rule r1 specifies that, if the last user action au is
equal to RequestMov(X) (i.e. requesting the robot
to execute a particular movement X), the utility as-
sociated with ExecuteMov(X) is equal to the pa-
rameter ?1r1 . Similarly, the rule r2 specifies the util-ity of the clarification request AskRepeat, provided
that the last user action au is assigned to a value (i.e.
is different than ?). Two cases are distinguished in
r2, depending on whether the previous system ac-
tion was already AskRepeat. This partitioning en-
ables us to assign a distinct utility to the clarification
request if one follows the other, in order to e.g. pe-
nalise for the repeated clarification.
As illustration, assume that ?(1)r1 = 2.0, ?(1)r2 =
1.3, ?(2)r2 = 1.1, and that the belief state contains astate variable au with the following distribution:
P (au = RequestMov(LiftBothArms)) = 0.7
P (au = RequestMov(LiftLeftArm)) = 0.2
P (au = ?) = 0.1
The optimal system action in this case is there-
fore ExecuteMov(LiftBothArms) with utility 1.4,
followed by AskRepeat with utility 1.17, and
ExecuteMov(LiftLeftArm) with utility 0.4.
182
3.2 Inference
Given a belief state b, we perform inference by con-
structing a Bayesian Network corresponding to the
application of the rules. Algorithm 1 describes the
construction procedure, which operates as follows:
1. We initialise the Bayesian Network with the
variables in the belief state;
2. For every rule r in the rule set, we create a con-
dition node ?r and include the conditional de-
pendencies with its input variables;
3. We create an effect node ?r conditioned on ?r,
expressing the possible effects of the rule;
4. Finally, we create the (chance or value) nodes
corresponding to the output variables of the
rule, as specified in the effects.
Rule r2 described in the previous section would
for instance be translated into a condition node ?r2
with 3 values (corresponding to the specified con-
ditions and a default else condition if none applies)
and an effect node ?r2 also containing 3 values (the
two specified effects and a void effect associated
with the default condition). Figure 3 illustrates the
application of rules r1 and r2.
Once the Bayesian network is constructed,
queries can be evaluated using any standard algo-
rithm for exact or approximate inference. The proce-
dure is an instance of ground inference (Getoor and
Taskar, 2007), since the rule structure is grounded in
a standard Bayesian Network.
3.3 Parameter Learning
The estimation of the rule parameters can be per-
formed using a Bayesian approach by adding param-
eter nodes ? = ?1...?k to the Bayesian Network,
a
u
a
m
?
r1
?
r1
?
r2
?
r2
?
r2
?
r1
rule r
1
rule r
2
Q(a
m
)
a
m
Figure 3: Bayesian Network with the rules r1 and r2.
and updating their distribution given a collection of
training data. Each data sample d is a pair (bd, td),
where bd is the belief state for the specific sample,
and td the target value. The target value depends on
the model to learn ? for learning dialogue policies,
it corresponds to the selected action am.
Algorithm 1 : NETWORKCONSTRUCTION (b,R)
Require: b: Current belief state
Require: R: Set of probabilistic rules
1: B ? b
2: for all rule r ? R do
3: Ir ? INPUTNODES(r)
4: ?r ? CONDITIONNODE(r)
5: Add ?r and dependencies Ir ? ?r to B
6: ?r ? EFFECTNODE(r)
7: Add ?r and dependency ?r ? ?r to B
8: Or ? OUTPUTNODES(r)
9: for all output variable o ? Or do
10: Add/modify node o and dep. ?r ? o to B
11: end for
12: end for
13: return B
Algorithm 2 : PARAMETERLEARNING (R,?,D)
Require: R: Set of probabilistic rules
Require: ?: Parameters with prior distribution
Require: D: Training sample
1: for all data d ? D do
2: B ? NETWORKCONSTRUCTION(bd,R)
3: Add parameters nodes ? to B
4: for all ?i ? ? do
5: P (??i|d) = ? P (td|bd, ?i) P (?i)
6: end for
7: end for
8: return ?
To estimate the parameters ?, we start from an
initial prior distribution. Then, for each sample d
in the training data, we construct the correspond-
ing Bayesian Network from its belief state bd and
the rules, including nodes corresponding to the un-
known rule parameters. Then, for each parameter ?i,
we compute its posterior distribution given the data
(Koller and Friedman, 2009):
P (??i|d) = ? P (td|bd, ?i) P (?i) (1)
183
Given the number of parameters in our example do-
main and their continuous range, we used approxi-
mate inference to calculate the posterior efficiently,
via direct sampling from a set of parameter values.
The constant ? serves as a normalisation factor over
the sampled parameter values for ?i. The procedure
is repeated for every sample, as shown in Algorithm
2. The parameter distribution will thus progressively
narrow down its spread to the values providing the
best fit for the training data.
4 Evaluation
We evaluated our approach in the context of a dia-
logue policy learning task for a human-robot inter-
action scenario. The main question we decided to
address is the following: how much does the rule
structure contribute to the parameter estimation of
a given probabilistic model, especially for domains
with limited amounts of available data? The objec-
tive of the experiment was to learn the rule param-
eters corresponding to the policy model Q(am|s)
from a Wizard-of-Oz data collection. In this partic-
ular case, the parameters correspond to the utilities
of the various actions. The policy model used in the
experiment included a total of 14 rules.
We compared our approach with two baselines
which are essentially ?flattened? or rolled-out ver-
sions of the rule-based model. The input and output
variables remain identical, but they are directly con-
nected, without the ? and ? nodes serving as inter-
mediate structures. The two baselines are (1) a plain
multinomial model and (2) a linear model of the in-
put variables. We are thus comparing three versions
of the Q(am|s) model: two baselines where am is
directly dependent on the state variables, and our ap-
proach where the dependency is realised indirectly
through condition and effect nodes.
4.1 Experimental Setup
The scenario for the Wizard-of-Oz experiment in-
volved a human user and a Nao robot1 (see Figure
4). The user was instructed to teach the robot a se-
quence of basic movements (lift the left arm, step
forward, kneel down, etc.) using spoken commands.
The interaction included various dialogue acts such
1A programmable humanoid robot developed by Aldebaran
Robotics, http://www.aldebaran-robotics.com.
Figure 4: Human user interacting with the Nao robot.
as clarification requests, feedbacks, acknowledge-
ments, corrections, etc. Short examples of recorded
dialogues are provided in the appendix.
In addition to the policy model, the dialogue sys-
tem include a speech recognizer (Vocon 3200 from
Nuance) connected to the robot microphones, shal-
low components for dialogue act recognition and
generation, a text-to-speech module, and compo-
nents for planning the robot movements and control-
ling its motors in real-time. All components are con-
nected to the shared belief state, and read/write to it
as they process their data flow.
We collected a total of 20 interactions with 7
users and one wizard playing the role of the pol-
icy model, for a total of 1020 system turns, sum-
ming to around 1h of interaction. All the inter-
actions were performed in English. The wizard
only had access to the N-best list output from the
speech recogniser, and could then select which ac-
tion to perform from a list of 14 alternatives (such
as AskRepeat, DemonstrateMove, UndoMove,
AskForConfirmation, etc). Each selected action
was recorded along with the belief state (including
the full probability distribution for every state vari-
able) in effect at the time of the selection.
4.2 Analysis
The data set was split into training (75% of the sys-
tem turns) and test data (remaining 25%) used to
measure the accuracy of our policies. The accuracy
is defined as the percentage of actions corresponding
to the gold standard action selected by the wizard.
The parameter distributions are initialised with uni-
form priors, and are progressively refined as more
data points are processed. We calculated the accu-
racy by sampling over the parameters, performing
inference over the resulting models, and finally av-
eraging over the inference results.
184
025
50
75
100
0 152 304 456 608 760
A
c
c
u
r
a
c
y
 
o
n
 
t
e
s
t
i
n
g
 
s
e
t
 
(
i
n
 
%
)
Number of training samples
Rule-structured model
Linear model
Plain model
(a) Linear scale
0
25
50
75
100
0 2 11 47 190 760
A
c
c
u
r
a
c
y
 
o
n
 
t
e
s
t
i
n
g
 
s
e
t
 
(
i
n
 
%
)
Number of training samples
Rule-structured model
Linear model
Plain model
(b) Log-2 scale
Figure 5: Learning curves for the overall accuracy of the learned dialogue policy, on a held-out test set of 255 actions,
depending on the size of the training sample. The accuracy results are given for the plain, linear and rule-structured
policy models, using linear (left) and logarithmic scales (right).
Table 1 provides the accuracy results. The dif-
ferences between our model and the baselines are
statistically significant using Bonferroni-corrected
paired t-tests, with p-value < 0.0001. The 17% of
actions labelled as incorrect are mainly due to the
high degree of noise in the data set, and the some-
times inconsistent or unpredictable behaviour of the
wizard (regarding e.g. clarification requests).
It is instructive to analyse the learning curve of
the three models, shown in Figure 5. Given its
smaller number of parameters, the rule-structured
model is able to converge to near-optimal values af-
ter observing only a small fraction of the training
set. As the figure shows, the baseline models do also
improve their accuracies over time, but at a much
slower rate. The linear model is comparatively faster
than the plain model, but levels off towards the end,
possibly due to the non-linearity of some dialogue
strategies. The plain model continues its conver-
gence and would probably reach an accuracy simi-
lar to the rule-structured model if given much larger
amounts of training data. Note that since the pa-
rameters are initially uniformly distributed, the ac-
curacy is already non-zero before learning, since a
random assignment of parameters has a low but non-
zero chance of leading to the right action.
5 Discussion and Related Work
The idea of using structural knowledge in proba-
bilistic models has been explored in many direc-
Type of model Accuracy (in %)
Plain model 67.35
Linear model 61.85
Rule-structured model 82.82
Table 1: Accuracy results for the three action selection
models on a test set, using the full training set.
tions, both in the fields of decision-theoretic plan-
ning and of reinforcement learning (Hauskrecht et
al., 1998; Pineau, 2004; Lang and Toussaint, 2010;
Otterlo, 2012) and in statistical relational learning
(Jaeger, 2001; Richardson and Domingos, 2006;
Getoor and Taskar, 2007). The introduced struc-
ture may be hierarchical, relational, or both. As in
our approach, most of these frameworks rely on the
use of expressive representations as templates for
grounded probabilistic models.
In the dialogue management literature, most
structural approaches rely on a clear-cut task decom-
position into goals and sub-goals (Allen et al., 2000;
Steedman and Petrick, 2007; Bohus and Rudnicky,
2009), where the completion of each goal is assumed
to be fully observable, discarding any remaining un-
certainty. Information-state approaches to dialogue
management (Larsson and Traum, 2000; Bos et al.,
2003) also rely on a shared state updated according
to a rich repository of rules, but contrary to the ap-
proach presented here, these rules are generally de-
terministic and do not include learnable parameters.
185
The literature on dialogue policy optimisation
with reinforcement learning also contains several
approaches dedicated to dimensionality reduction
for large state-action spaces, such as function ap-
proximation (Henderson et al., 2008), hierarchical
reinforcement learning (Cuaya?huitl et al., 2010) and
summary POMDPs (Young et al., 2010). Most of
these approaches rely on large but weakly struc-
tured state spaces (generally encoded as large lists
of features), which are suited for slot-filling dia-
logue applications but are difficult to transfer to
more open-ended or relational domains. The idea of
state space partitioning, implemented here via high-
level conditions, has also been explored in recent pa-
pers (Williams, 2010; Crook and Lemon, 2010). Fi-
nally, Cuaya?huitl (2011) describes a closely-related
approach using logic-based representations of the
state-action space for relational MDPs. His ap-
proach is however based on reinforcement learning
with a user simulator, while the learning procedure
presented here relies on supervised learning from a
limited data set. He also reduced his belief state
to fully observable variables, whereas we retain the
partial observability associated with each variable.
An important side benefit of structured repre-
sentations in probabilistic models is their improved
readability for human designers, who are able to
use these powerful abstractions to encode their prior
knowledge of the dialogue domain in the form of
pragmatic rules, generic background knowledge, or
task-specific constraints. There has been previ-
ous work on integrating expert knowledge into di-
alogue policy learning, using finite-state policies or
ad-hoc constraints to filter a plain statistical model
(Williams, 2008; Henderson et al., 2008). The ap-
proach presented in this paper is however more gen-
eral since it does not rely on an external filtering
mechanism but directly incorporates prior domain
knowledge into the statistical model.
6 Conclusions
We showed in this paper how to represent the under-
lying structure of probabilistic models for dialogue
using probabilistic rules. These rules are defined as
structured mappings over variables of the dialogue
state, specified using high-level conditions and ef-
fects. These rules can include parameters such as
effect probabilities or action utilities. Probabilistic
rules allow the system designer to exploit power-
ful generalisations in the dialogue domain specifi-
cation without sacrificing the probabilistic nature of
the model. The framework is very general and can
express a wide spectrum of models, from classical
models fully estimated from data to ones incorpo-
rating rich prior knowledge. The choice of model
within this spectrum is therefore essentially a design
decision dependent on the relative availabilities of
training data and domain knowledge.
We have also presented algorithms for construct-
ing Bayesian Networks corresponding to the appli-
cation of the rules and for estimating their parame-
ters from data using Bayesian inference. The pre-
sented approach has been implemented in a spo-
ken dialogue system for human-robot interaction,
and validated on a policy learning task based on a
Wizard-of-Oz data set. The empirical results have
shown that the rule structure enables the learning al-
gorithm to converge faster and with better generali-
sation performance.
We are currently working on extending this ap-
proach in two directions. First, we would like to ex-
tend our parameter estimation method to Bayesian
model-based reinforcement learning. The current
implementation operates in a supervised learning
mode, which requires expert data. Alternatively,
one could estimate the model parameters in a fully
online fashion, without any supervisory input, by
incorporating model uncertainty into the inference
and continuously adapting the parameter distribu-
tion from (real or simulated) interaction experience,
using the same Bayesian approach we have outlined
in this paper (Ross et al., 2011).
The second direction is the extension of our work
to tasks other than action selection. The framework
we have presented is not confined to dialogue pol-
icy learning but can be used to structure any proba-
bilistic model2. It is therefore possible to use proba-
bilistic rules as a unifying framework for all models
defined in a given architecture, and exploit it to per-
form joint optimisation of dialogue understanding,
action selection and generation.
2In fact, the dialogue understanding and generation models
used for the evaluation were already structured with probabilis-
tic rules, but with fixed, hand-crafted parameters.
186
Acknowledgements
The author would like to thank Stephan Oepen, Erik
Velldal and Amanda Stent for useful comments on
an earlier version of this paper.
References
