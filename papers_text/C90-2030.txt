Normal  Form Theorem Prov ing  fo r  the  Lambek Ca lcu lus  ~ 
Mark Hepple 
Cent re  for Cogni t ive  Science, Un ivers i ty  of Ed inburgh ,  
2 Bucc leuch Place, Ed inburgh ,  Scot land.  
e-maih markQuk.ac.ed.epistemi 
Abst rac t  
The possibility of multiple equivalent proofs presents a problem 
for efficient parsing of a number of flexible categorial grammar 
(CG) frameworks. In this paper I outline a normal form sys- 
tem for a sequent formulation of the product-free associative 
Lambek Calculus. This le,'~ls to a simple parsing approach that 
yields only normal form proofs. This approach is both ~afe in 
that all distinct readings for a sentence will be returned, and 
optimal in ~;hat here is only one normal form proof yielding 
each distinct meaning. 
1 The  Lambek  Ca lcu lus  
The  (product - f ree)  Lambek  Calcu lus  (Lambek,  1958) 
is a h ighly  f lexible CG f ramework  that  can be given a 
Gentzen. .style sequent  fo rmula t ion  wi th  the fol lowing 
rules :23 
(1) Axiom: x: f  =~- x: /  
Righ~ rules: F, y:i ~ x:f  y:i, F ~ x:f 
F ----> x/y:Ai.f \[/R\] F -~ x\y:Ai.f 
\[\rt\] 
Left :rules: &, =.~ y:g F, x:fg, A ~ z:h 
I/L\] 
F, x/y:f ,  A, A => z:h 
~-~ y:g F, x:fg, A => ~:h 
. . . . . . . . . . . . . .  \[\L\] 
F, A, x\y: f ,  A =?- z:h 
Cut rule: A ==> x:\]  F, x:f, A --> y:g 
\[cut\] 
F, A, A --'~- y:g 
In this fo rmulat ion ,  which we wil l  call L, each type is 
assoc iated with a lambda expression,  corresponding 
to its mean ing ,  and the rules specify tlow these are 
cont ructed .  The  left rules con 'espond semant ica l ly  to 
funct iona l  appl icat ion,  the r ight  rules to funct iona l  
abst ract ion .  The  lambda express ion for the suecedent  
of the root  sequent  corresponds to its meaning as a 
combinaff ion of the meanings  of the antecedent  types. 
Th is  wil l  be loosely refered to as the 'mean ing  (or 
1I am grateful to Guy Barry and Olyn Morrill for discussion 
of the ideas in this paper. Thanks also to Inge Bethke and 
Neil Leslie for comments on a draft. All errors are my own. 
This work was carried out under ESRC Postgraduate Award 
C00428722003. 
21n the notation used here, types x/y and x\y both denote 
functions from y (the argument ype) into x (the value type). 
3A sequent is an object of the form F => x, where =0 , the 
derivability relation, indicates that x can be derived from F. 
Specific to '~he Lambek Calculus, we require that each sequent 
has a non-empty antecedent sequence and precisely one sucre- 
dent type. We call the bottom-most sequent of any proof the 
root, and the inference that has the root as its conclusion the 
root inference. We call to the right hand premise of a left rule 
its major premise, its other the minor premise. In addition, we 
call the nudn branch of any proof that (unique) path Sl, s 2..,sn 
through the proof such that s I is the root sequent, sn corre- 
sponds to an axiom instance, and non of s2,..,sn is the minor 
premise of a left inference. 
reading)  assigned by the proof ' .  We assume that  each 
antecedent  ype of the in i t ia l  sequent  is assigned a 
d ist inct  var iab le  for its semant ics .  4 The  semant ics  of 
types wil l  somet imes  be omi t ted  to save space. 
Lambek  (1958) demonst ra tes  that  the cut  rule is 
e l iminable  in the sense that  all theorems of the cal- 
culus Call be proven using just  the remain ing  rules. 
These remain ing  rules prov ide  a decis ion procedure  
for theoremhood (since each inference removes  a con- 
nect ive,  so that  search for proofs  is f inite), and we 
cons ider  only these in the  rest of the paper f i  
2 The  Prob lem o f  Mu l t ip le  Equ iva lent  P roo fs  
The calculus L typica l ly  al lows more than  one proof  
assigning each possible read ing  for a sequent.  We 
shal l  cons ider  some i l lustrat ive examples .  The fol- 
lowing two proofs assign the  same reading:  
z:h =:> z:h y:gh ~ y:gh 
i/L\] 
y/'~:g, z:h y:gh x:fgh ? :> ~ x.:gh I/L\] 
x/y: f ,  y/'~:g, z:h o x:fgh 
y:gh ~ y:gh x:fgh ~ x:fgh 
\[/L\] 
~:h ~ ~:h x/y: f ,  y:gh ::~ x:f#h 
\[/L\] 
x/y: / ,  y/~:g, z:h :? x:fgh 
Here we see that  the operat ions  involved in 'bu i ld ing '  
some argument  type  (here y) may be per fo rmed ei- 
ther  before or after the left inference on the functor  
requi r ing that  a rgument  (here x /y ) .  Another  exam-  
ple of d is t inct  proofs assigning the same meaning is 
the fol lowing (in both  of which the subproof  for the 
premise x /y ,  y => w/ (w\x )  is omi t ted) :  
z:g :~ z.:o x/y::g, y:i :> w/(w\x):~j.(j(ygi)) 
I/L) 
x /y / , :y ,  ~:0, y:~ :~ w/(w\x):~j.(j(:gi)) 
\[/R\] 
xly/z: f ,  z:g ::~ w/(w\x)/y:Ai.Aj.( j(fgi)) 
x/y:/g, y:i : .  w/(w\x):~j.(j(ygi)) 
\[/n\] 
z:g -~ ~:g x/y:fg, y:i ~ w/(w\x):Ai.Aj.(j(fgi)) \[/LJ 
x/y/z: f ,  ~,:g ::z, w/(w\x)/y:M.Aj.( j(fgi)) 
These show a case where a r ight inference can equal ly 
well  be made ei ther  before or after some unre lated left 
4This is because we are interested in the equivalence or not 
of proofs aside from contingent equivalences that may stein 
from particular semantic assignments o antecedents. 
6Moor~gat (1990) demonstrates that cut elimination pre- 
serves the strong recogrdsing capacity of the calculus in the sense 
that the systems with and without cut will yield precisely the 
same readings for any theorem modulo logical equivalence. 
173 
inference. A final example: 
x/y:f :=~ x/y:f y:g ::~ y:g x:,fg :=~ x:fg 
\[/L\] 
x/y:f, y:g =-~ x:fg 
x/y:\] :=> x/y:Ag.fg I/R\] 
Here we see that where the type instantiating an ax- 
iom is functional, it is also possible to 'unpack'  the 
type and 'equate'  subformulas of this in further ax- 
iom instances. The lambda expressions assigned by 
these two proofs are equivalent under r/-reduction. 
The existence of multiple equivalent proofs presents 
a problem for efficient theorem proving based on the 
calculus L. Search for proofs must be exhaustive to 
ensure that all different 'readings' for a given sequent 
are found, and a naive theorem prover will expend 
considerable ffort constructing proofs that assign the 
same meaning. This radically reduces the efficiency 
of Lambek Calculus theorem proving. Hepple and 
Morrill (1989), working with a somewhat different 
CG framework that also admits multiple equivalent 
proofs, suggest hat this problem be dealt with by de- 
riving a notion of normal form (NF) for proofs, and 
then adapting the parsing method such that this only 
returns NF proofs. Khnig (1989) takes this kind ap- 
proach to handling the problem of multiple equivalent 
proofs for Lambek sequent heorem proving, generat- 
ing a notion of NF for such proofs, and deriving from 
this a parsing strategy intended to compute only NF 
proofs. :However, Khnig's parsing algorithm fails to 
exclude all non-NF proofs when used with a standard 
propositional Lambek Calculus. 
In this paper I define a NF system for the sequent 
formulation of the (product-free) Lambek Calculus, 
which gives rise to a parsing approach that yields only 
normal proofs. 
3 A New Approach  
3.1 Headed Proo fs  
We begin by introducing the notion of head type, as 
this is crucial to the approach. We use symbols P ,  Q, 
R,  etc to designate proofs, and the notation P(S) to 
represent a proof P of the sequent S. Intuitively, the 
head type of a sequent S under some proof P (S) is the 
antecedent type of S that has widest scope semanti- 
cally. The meaning assigned by a proof is always a 
lambda expression of the form: 6 
(3) y:j" ~ y:)" x:gi f ::~ x:gi f 
z:i =~ z:i y:f, x\y:gi :=:, x.gtf \[/L\] 
y:f, x\y/z:g, z:i ~ x:gi$ 
y:y, x\y/z:g ~ x/~:Ai.(gif) I/R\] 
\[\L\] 
The head type here is the antecedent x \y /z  since it is 
the semantic variable g of this that has widest ,~cope in 
the meaning assigned by the proof. Note the charac- 
teristic of this proof that a value subpart of the head 
type is 'equated'  with a value subpart of the succe- 
dent type in the sense that these together iustanti- 
ate opposite sides of an axiom instance, in particular 
that axiom instance at the top of the main br,~nch (cf. 
footnote 3). This fact is the syntactic counterpart of 
the head type having the widest scope semantically. 7 
More generally, for the head H of a sequent under 
some proof and the sole antecedent A of the proof's 
main branch axiom, it is always the case that A is a 
value subformula of H (or is H itself). Not all proofs 
have a head, as in (4), where the variable that has 
widest scope in the meaning assigned by the proof 
does not originate with an antecedent of the initial 
sequent, but rather with a type that is ' introduced' 
in a right inference: 
(4) y:g =~ y:g x:fg :..v. x:fg 
I/L\] 
x/y:f, y:g =~ x:fg z:i(fg) ~ z:i(fg).\[\L\] 
x/y:f, y:g, ~\x:i ::V. z:i(fg) 
\[/n\] 
x/y:I ,  y:g ~ ~/(~\x):~.C~Cfg)) 
We use numerically subscripted proof symbols (e.g. 
P3~ Pn ,  Qm~ etc) to refer to the headedness of 
proofs, in particular a proof Pn,  n > 1, is a headed 
proof, with the head being the nth member of the 
antecedent sequence of the root sequent. If n = 0, 
then the proof is unheaded. Given the relation men- 
tioned above between the head of a proof and the 
main branch axiom of this, we can give a recursive 
characterization of the form of subscripted proofs as 
in (5) (where superscripted Greek letters are used 
to indicate sequences of given numbers of types, i.e. 
71" n corresponds to a sequence of n types): 
(5) Each proof Pn is of one of the forms: 
a. axiom where n = 1 
x==~x 
(2) Avl..v,~.(hU1..Um) (n, m >_ O) 
where h is some semantic variable. The head type of 
the sequent under the given proof is that antecedent 
whose meaning is the variable h. Consider (3): 
b. qraCy, iv ::~ x) where ((m > 0) & (n =: m-  1)) 
\[\RI or (Cm = 03 & (~ --: 0)) 71- =:~ x\y 
e. Qm(r k, y =v. x) where ((m : k + 1) & (n --- 0)) 
~k ~ x/y \[/rt\] or CC'~ < k) ~ C" ::: "q) 
eNote that the meaning assigned by any (cut-free) proof is 
always be a lambda expression in/~-normal form (i.e. contain- 
ing no subterms of the form (Av.P)Q) - -  provided that the 
meanings assigned to the root sequent antecedents are in f~- 
normal (which is the case here, since we assign these distinct 
variables) as may be shown by an inductive proof. 
7Note the semantic significance of the main branch axiom in 
this. The semantics assigned by a proof P always corresponds 
to that of the succedent of the main branch axiom of P having 
undergone zero or more lambda bstractions. This follows from 
the semantics of the rules of L. 
174 
d. R(s  k .~y)  q ; (?%x,?~z)  
\[\L\] 
?~ ~k x\y, ? . z 
who,'e ((~" < .*) a (~ = ~')) 
or ((j > m) & C n=j+k) )  
e. ~(~k,:~y) QsC? 'Lx ,?~)  \[/L\] ?,,, ~/y, ~k, ? =~, 
where ((j _< m + 1) & (n = j)) 
or ((j > m + 1) ~ (,, = i + k)) 
The base case for the definition is where a subproof 
consists only of an axiom inference, in which case the 
head of the proof is the single antecedent member 
(and hence, n = 1). From there, the position of the 
hexad can be kept track of by counting the number 
o:l' antecedents added in beside the head as subproofs 
are combined. Note that every cut-free proof in L is 
a proof P~ '.for some value of n. 
82  A Const ruct ive  Not ion  o f  Normal  Form 
In (6), a recursive definition is given for a construc-  
t ive notion of NF (CNF). For this definition, it is 
u,.;eful to distinguish two subtypes of proof: T 1 and 
"r:!. The set of ~'1 proofs is precisely the set of CNF 
proofs. The 'r2 proofs are a subset of the 71 proofs- -  
those whose main branch includes no right inferences. 
(6) The set of CNF (T1) proofs is the smallest set such that: 
a. i\] x is an atomic type, then axiom E T 2 
x =:2> x 
b, if P,,+t(Tr n, x, ? =~ z) @ T 2 arm Q(? ==:, q) 6 7" 1 
the. q (?  ~ q) p,,+~(~r '~, x, ? ~ ~) e r2 
I/L} 
~r", :,/q, ?, ? ~ 
\[\L\] 
~"~, ?, ~\q, ? ~ 
c. if P E T2 then P C T 1 
d. if P(Tr, x => y) ~ T 1 then 
P (~, x -~ y) e r l ,  . .d p (x, r : .  y) 
I/R\] 
r -~ y/x or ~ y\x 
(~ Tl 
Given (6a), CNF proofs only contain axiom leaves 
that are instantiated with atomic types. (6b) allows 
fo:c the occurrence of left inferences in CNF proofs, 
aI~d requires that these must be with respect to the 
head of the major prenfise's subproof (~major sub- 
proof').  Given (6c), every ~r 2 proof is a 71 proof also. 
Given (6d), only T1 proofs may have a right rule 
the root inference--no ~r2 proof will be of this form. 
Since the major subproof of a left inference must  be 
a 7 2 proof, a right inference may never occur above 
sL left inference on the main branch of a CNF proof. 
Thus, the main branch of a CNF proof is always of 
the following form (starting at the root): zero or more 
rigilt inferences, followed by zero or more left infer- 
ences, terminating with an axiom inference. The mi- 
nor subproofs of left inferences are T 1, and so are also 
of this general form. 
We will see later how we can ensure that the the- 
orem prover generates all and only the CNF proofs 
of a sequent. However, for such a move to be useful, 
the notion of CNF must satisfy certain requirements. 
Most importantly, generating only CNF proofs should 
be safe in the sense that the theorem prover returns 
every distinct reading of a sequent that can be as- 
signed. This will be the case if for every proof of a 
sequent, there exists a semantically equivalent CNF 
proof. To demonstrate this, a second notion of nor- 
mal form will be defined, using the method of proof 
reduction, which is equivalent o the constructive no- 
tion of NF, and provably complete. 
3.3 A Reduct ive  Not ion  of  Normal  Form 
8.3.1 Reduct ion  and  Normal  Forms 
A standard approach to defining NFs involves defin- 
ing a cont ract ion  relation (1>1) between terms. The 
contraction relation is stated as a number of contrac- 
tion rules, each of the form X ~>1 Y (in which the 
form on the left is termed a redex and the form on the 
right its cont ractum) .  Each contraction rule allows 
that any term containing an occurrence of a redex 
may be transformed into a term in which that occur- 
rence is replaced by its contractum. A term is said 
to be in NF if and only if it contains no occurrences 
of any redex. The contraction relation generates a
reduct ion relation (I>) which is such that X reduces 
to Y (X i> Y) if and only if Y is obtained from X by 
a finite series (possibly zero) of contractions. A term 
Y is a NF of X if and only if Y is ~NFandX ~- Y. 
3.3.2 P roo f  Reduct ion  and  the  Lambek Calcu-  
lus  
We shall next consider a set of contraction rules 
stated on proofs in L. 8 These together define a re- 
ductive notion of NF. A total of eighteen contraction 
rules are required, which fall into four groups. 
An instance of the first group of contraction rules 
is shown in (7). 
(7) x/y ::> x/y y ::> y x ::> x 
t,, I/L\] 
x/y, y ==:, x
x/y :* x/y l/R\] 
This contraction rule expands an axiom leaf insta:n- 
tinted with a functional type to give a subproof con- 
taining two axiom leaves, each of which is instantiated 
with a 'simpler' type than the original axiom (under 
some metric of simplicity). There is a second rule in 
this group for which the functional type in the redex 
is leftward directional. 
An instance of the second group of contraction rules 
is shown in (8). In the redex, a right inference is 
applied to the major premise of left inference. In the 
contractum, the subproof has been restructured so 
SProof reduction originates with Prawitz (1965). 
175 
that the right inference is applied to the root sequent, 
and the left inference to its sole premise. 
(8) Q(?, x, ?, w ~ z)\[/RI 
P(~ ~ y) ?, ~, ? ~ ~/W\[/Lj 
?, x/y, ~, ? =~ ~/w 
PCr =, y) qC?, ~, ?,  w :~ ~) \[/L\] 
>, ?,x /y ,  ~, ? ,w  ~ ~ 
l/R\] ?, x/y, ~, ? ~ ~/w 
There are four contraction rules of this group which 
arise with the directionality of the connectives for the 
two inferences. 
An instance of the third group of contraction rules 
is shown in (9). Note that this makes use 
of the subscripted proof notation, allowing us to 
reeognise where a left inference is with respect to 
the head of the stated subproof. In the subproof 
P, ,+1(? '~, x, ?, v, c~ =:> z), the head is the type x. It 
follows that the type x /y  is the head of the entire 
redex proof, and that v /w is not. Thus we can see 
that in the redex, a head left inference (i.e a left infer- 
ence with respect to the head of the given subproof) 
is applied to the major premise of non-head left in- 
ference. In the contractum, the subproof has been 
restructured so that the head inference is applied to 
the root sequent, and the non-head inference to its 
major premise. 
a(-~ :~ w) ?", x/y, ~, ?, v, ~ ::> ,~ 
I/L\] 
?",  x/y, r, ?, v/w, ~,, ~ :~ 
>, R("/ :=~ w) P, ,+t(? n, x, ~', v, ?r :-~ z)\[/L \] 
Q(.,r ~ y) en, x, ?, vlw, ~, a ~ 
I/L} 
? ' ,  ?ly, ~r> ?, vlw, ~, a ~ 
There are eight contractio-1 rules in this group, which 
arise with the directionality of the connectives in- 
volved, and whether the head functor occurs to the 
right or left of the non-head functor. 
An instance of the fourth group of contraction rules 
is shown in (10). In the redex, a head-left inference 
is applied to the major premise of a non-head left in- 
ference, where the latter can be seen to in-part serve 
the purpose of 'building' the argument required by 
the head functor. In the coutractum, the inferences 
have been reordered so that the head inference ap- 
plies to the root sequent, and the non-head inference 
applies to the minor premise of this. 
(~_01 qC~r, ~, ~ ~, y) p,,+~(?~, ?, ~ ~ ~) 
I/L} 
I/L\] ?",  ?/y, 7r, ~/w, ?, -y, ~ ~ 
R(? =~ w) q(x,  v,-y ~ y) /L 
_ _ \[ le, ,+,(?,~ 
I/L\] 
We :require four contraction rules of this pattern, 
176 
which arise with the directionality of two functors 
(the left-right order of the two functors being deter- 
mined by the head functor). 
We call any proof that contains no redexes (which 
is consequently a NF under the reduction system) 
an irreducible normal  fo rm (INF). It is easily veri- 
fied that for each contraction rule, the contractum 
subproof assigns a lambda expression for the root se- 
quent combination equivalent o that assigned by the 
redex. Thus, meaning is preserved under contraction, 
and also in turn under reduction. Hence, an INF of 
any proof P always assigns the same reading as P .  
We will next demonstrate that normal isat ion holds 
for the reductive NF system; that is, that every proof 
has an INF. This property follows provided that the 
following (stronger) property holds: 
(11) Strong Normalisation: Every reduction is finite. 
Thus, for every proof, a finite series of contractions 
always leads to an irreducible proof. 
To prove that every reduction is finite, it is suf- 
ficient to give a metric that assigns to each proof a 
finite non-negative integer score, and under which it 
can be shown that every application of a contraction 
rule reduces the score of a proof by a positive integer 
amount. The scoring system given in (12) satisfies 
these requirements? 
(12)The 
a.  
score for any proof P (written sc(P )) is as follows: 
if P is an axiom leaf instantiated with type x 
then so(P) = factorial(3 ate(x)) 
b. ff P has a right inference at its root, wi~h premise 
subproof Q then sc(P) = sc(Q) + 1 
c. if the root inference of P is a head left inference, 
with major subproof Q and minor subproof R then 
sc(P) = (sc(R) + 1)sc(q) + 1 
d. if the root inference of P is a non-head left infer- 
ence, with major subproof Q and minor subproof 
R tt~ert so(P) = (sc(R) + 1)so(q) 
3.4 Equ iva lence  o f  the  Two Systems 
We write CNF(P)  and INF(P )  to indicate that a 
proof is in NF under the respective systems. The two 
NF systems can be shown to be equivalent in that 
they designate precisely the same sets of proofs to be 
in NF, i.e: 
(13) Lemma h for all P, CNF(P) ~-~ INF(P) 
This follows given Lemmas 2 and 3. 
(14) Lemma2: for all P, ~INF(P) --~ ~CNF(P) 
It is easily checked that no redex subproof is in CNF. 
Hence, any reducible proof is not a CNF. 
(15) Lemma 3: for all P, -~CNF(P) --* -,INF(P) 
9The atmnic type count (ate) of a type is defined as follows: 
(i) ate(x) = 1 if x is an atomic type; (ii) ~,tc(x/y) = atc(x\y) 
= ate(?) + ,~tc(y) 
This may be proven by induction on P 
Given the equivalence of the two NF systems, and 
the normalisation result for the reductive NF system, 
it follows that for every proof in L, there exists a CNF 
proof that assigns the same reading. Hence, generat- 
ing all and only the CNF proofs of a given sequent 
is safe in. the sense that we can be sure all possible 
readings for the combination will be returned. 
3.5 The  Un iqueness  of  Normal  Forms 
The approach wi!l be optimal if there is only a sin- 
gle CNF asslgnhlg each distinct reading. As we have 
already noted (footnote 6), the meaning assigned by 
any (cut-free) proof will be a lambda expression that 
is in/%normal form. Extensional equivalence for the 
Lambda Calculus is given by the /~\]-reduction sys- 
tem. Since this system exhibits the Church-Rosser 
property~ any two terms in fl-normal form will be 
equivalent just in case applying some sequence of ~/o 
contractions (i.e. Av. fv  ~>1 f)  to each yields the same 
term (nmdulo c~-conversion). 
Let us consider two distinct CNF proofs P and Q 
of some sequent S. Assume that these differ ill some 
regard along their main branches. The bottom part of 
each main branch will consist of a sequence of zero or 
more right inferences. The length and nature of this 
sequence of inferences is fully determined by the type 
of the succedent in the root sequent S, and so P and 
Q may not differ in this regard. Thus, the meanings 
assigned by P and Q will be lambda expressions of 
the following forms (in which the lambda abstractions 
Av:..v,~. correspond to the initial sequence of right 
inferences): 
P : .\v:..v~.(fYi..U,,~) 
Q : ,~vl..v,.(oUd..uU) 
The remainder of each main branch will consist of 
some sequence of head left inferences, terminating 
in an axiom instance. Consequently, the two CNF 
proofs may differ along their main branch only in 
two regards: (i) a different antecedent type is the 
functor for the first left inference (this determining 
the functor for the remaining left inferences on the 
main branch), (ii) even if the same type is chosen for 
the functor of the first left inference, at some point a 
different ,;ubsequence of antecedents is chosen to 'con- 
struct' the argument of the functor. In either case, 
the semantics assigned to the two proofs will be non- 
equivalent. Thus, for case (i) f and g will be distinct 
variables. In both cases~ it may be that m : \]c, and 
even if ra --= \]c, at least some of the Ui and Ui I will 
differ in the lambda variables that m'e put together to 
form these (i.e. the lambda expressions corresponding 
to antecedent semantics). It is evident that in any of 
these eventualities, no sequence of ~?-contractions can 
yield a common term from two such terms and so 
the two proofs must assign distinct readings. If the 
two NF proofs are similar along theh" main branches, 
they must differ in the minor subproof or some left 
inference. The same arguments apply in turn that if 
these subproofs differ in form, then they must be non- 
equivalent. Hence, distinct CNF proofs always differ 
semantically, and so the uniqueness property holds. 
Since reduction preserves meaning, and distinct NFs 
are non-equivalent, it follows that every proof has a 
unique NF. 1? 
3.6 Normal  Form Theorem Prov ing  
For the purpose of theorem proving, we specify an 
amended version of the calculus, which we term the 
'p~sing calculus' (PC), which is such as to only allow 
the construction of proofs that con'espond to CNF 
proofs. To this end, we move from a system which 
uses a single notion of sequent, to one which distin- 
guishes two different types of sequent Type 1 and 
Type 2--this type being marked as a subscript on the 
derivability arrow =>. The point of this distinction is 
to allow us to limit the form of the proof that may be 
given for some sequent merely by its type. The Type 
1/Type 2 distinction essentially corresponds to the 
~1/72 distinction in the definition of CNF. For Type 
2 sequents we distinguish the antecedent element that 
must be the head of any proof of the sequent by di- 
viding the antecedent sequence into three subparts, 
separated by -+-'s, as for example in ?+x+Tr => z, of 
which the first and last parts are (possibly empty) 
sequences of types, and the middle paa't a single type 
that is required to be the head of any proof of this 
sequent. 
The following set of inference rules allow only 
proofs of the required form to be constructed: 
(16)Axiom: e~-x:f-~e =~,,~x:f where x is an atomic 
type (an(l e denotes the 
en~pty sequence) 
Right rules: F, y:i ~x : f  I/R\] y:i, 1" ~:x : f  
r ~,?/y:~i./ r ~,x\y:~;./\[\R\] 
Left rules: A =>lY:g F+x: fg+A =:>~z:h I/Li 
F+x/y:f+(A, A) :>:z:h 
A =>ly:g F?x:fg+A =>2z:h \[\L\] 
(F, ~,)+?\y:f" i -A -->~ z:h 
\[2~-*1\] rule: A+x: f+F  =>~y:g where y is an ~tomi(: 
\[2~-*1\] type, and x := y or x 
A, x:f, r -~ly:g a function onto y 
Observe that the axiom inference specifies a Type 2 
sequent, with the single antecedent type being the 
designated head of that sequent. This corresponds 
to clause (a) of the definition of CNF in (6). The 
left inference rules have Type 2 sequents for their 
conclusion and major premise and a Type 1 sequent 
for the minor premise. Note that the active type for 
the inference is the designated head of the conclusion 
and its value subformula is the designated head of 
the major premise. This corresponds to clause (b) of 
the CNF definition. The right rules have a Type 1 
l eFrom this it follows that the reductive NF system exhibits 
the Church-Rosser property, 
177 
premise and conclusion, in line with clause (d) of the 
CNF definition. In addition, there is a rule \[2~-41\], 
corresponding to the clause (c) of the CNF defini- 
tion. Note there is a condition on the rule which 
does not correspond to anything hi clause (c). It is 
easily shown that this condition is always fulfilled by 
T2 proof~s, so its addition does not alter the set of 
proofs admitted by the PC. However, the condition 
will considerably limit the application of the \[2~-.1\] 
rule in top-down search for proofs and so increase the 
efficiency of theorem proving. It is easily shown that 
PC and CNF proofs exist in 1-to-1 correspondence. 
4 D iscuss ion 
It can be seen that the form of any CNF proof is 
strongly tied to the form of the lambda expression it
assigns a.s its meaning. As we have seen, the lambda 
term corresponding to the meaning of any (cut free) 
proof in I, is always a fl-NF term of the form: 
~vl..v~.(hUi..U~) (n, m > 0) 
where h is a variable, and the main branch of a CNF 
proof is always of the following form (starting at the 
root): zero or more right inferences, followed by zero 
or more left inferences, terminating with an axiom 
inference. The correspondence b tween the two is as 
follows: the initial sequence of right inferences cor- 
responds to the lambda abstractions of ~he variables 
vi..v~, and the ensuing left inferences are just those 
required to apply the variable h (the semantics of the 
head) to each of its arguments Ui..Um in turn, with 
e~ch of the subterms Ui being 'constructed' in the 
subproof or a minor premise. 
These observations provide the basis for relating 
this approach to that of Khnig (1989), mentioned ear- 
lier. Khnig uses a non-standard method for arriving 
at a notion of NF proof which involves firstly map- 
ping proofs into objects called 'syntax trees', where 
proofs that yield the same syntax tree form an equiv- 
alence class, and then mapping from each syntax tree 
to a single NF proof. From the form of such NF 
proofs, Khnig derives a set of Cnesting constraints' 
which are used to limit the operation of a top-down 
theorem prover, and which are such that they will 
never prevent he construction of any NF proof. As 
Khnig points out, however, the ~nesting constraints' 
do not exclude the construction all non-NF proofs 
when used with a standard propositional formulation 
of the Lambek Calculus (though better results are 
obtained with a unification-based version of the Lam- 
bek Calculus that Khnig describes). Khnig's syntax 
trees can be seen to bear a strong correspondence, 
in terms of their structure, to the lambda term for 
the meaning assigned by a proof (although the for- 
mer include sufficient information, of types etc, to 
allow (re)construction of a complete proof for the ini- 
tial sequent), and the relation of Khnig's NFs to the 
syntax trees used to define them closely parallels the 
relation between CNF proofs in the present approach 
and their corresponding lambda terms. 
178  
A further topic worthy of comment is the rela- 
tion between the current approach and natural de- 
duction approaches uch as that of Prawitz (1965). 
As Prawitz observes, sequent calculi can be under- 
stood as meta-calculi for corresponding natural de- 
duction systems. Introduction rules correspond to 
right rules and elimination rules to left rules. In 
Prawitz's NFs, an introduction rule may never ap- 
ply to the major premise of an elimination rule (such 
a subproof being a redex) so that eliminations always 
appear above introductions on the main branch of 
a NF proof, li which seems to parallel the form of 
CNF sequent proofs. However, the relation is not 
so straightforward. For a natural deduction formu- 
lation of the (product-free) Lambek Calculus, i2 the 
occurrence of a relevant redex in a natural deduction 
proof (i.e. where an introduction rule applies to the 
major premise of an elimination) corresponds to the 
occurrence of a fl-redex in the corresponding proof 
term. For sequent proofs, however, the occurrence 
of a fl-redex corresponds to a use of the cut rule in 
the proof--the lambda terms for cut-free proofs are 
always in fl-NF. Unfortunately, limitations of space 
prevent due discussion of this topic here. 
Re ferences  
Hepple, M. 1990. Grammatical  Relations and tile 
Lambek Calculus. In Proceedings of the Sym- 
posium on Discontinuous Constituency. Institute 
for Language Technology and Artificial Intelligence, 
Tilburg University, The Netherlands. 
Hepple, M.R. and Morrill, G.V. (1989). Parsing and 
Derivational Equivalence. In: Proceedings of the 
4th Conference of the European Chapter of the As- 
sociation for Computational Linguistics. Manch- 
ester, UK. 1989. 
Khnig, E. (1989). Parsing as Natural Deduction. In: 
Proceedings of the 27th Annual Meeting of the Asso- 
ciation for Computational Linguistics. USA. 1989. 
Lambek, J. 1958. The mathematics of sentence struc- 
ture. American Mathematical Monthly, 65,154-170. 
Morrill, G. 1990. Grammar as Logic. To appear in: 
Prodeedir~gs of the Seventh Amsterdam Colloquium. 
University of Amsterdam. 
Moortgat, M. 1990. Cut Elimhlation and the Elim- 
ination of Spurious Ambiguity. To appear in: 
Prodeedings of the Seventh Amsterdam Colloquium. 
University of Amsterdam. 
Prawitz, D. 1965. Natural Deduction: A Proof- 
Theoretical Study. Ahnqvist and Wiksell, Uppsala. 
liThe terms main branch, major premise, tc have been bor- 
rowed from Prawitz, and are defined analogously for his system. 
12Note that a natural deduction formulation of the Lam- 
bek Calculus differs from standard natural deduction systems 
in that the linear order of assumptions within a proof is im- 
portant, (roughly) corresponding to the linear order of words 
combined. See, for example, the 'ordered' natural deduction 
formulations outlined in Hepple (1990) and Morrill (1990). 
