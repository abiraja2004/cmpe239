An Algorithm to Align Words for 
Historical Comparison 
Michae l  A. Covington* 
The University of Georgia 
The first step in applying the comparative method to a pair of words suspected of being cognate is 
to align the segments of each word that appear to correspond. Finding the right alignment may 
require searching. For example, Latin dO 'I give' lines up with the middle do in Greek didOmi, 
not the initial di. 
This paper presents an algorithm for finding probably correct alignments on the basis of 
phonetic similarity. The algorithm consists of an evaluation metric and a guided search procedure. 
The search algorithm can be extended to implement special handling of metathesis, assimilation, 
or other phenomena that require looking ahead in the string, and can return any number of 
alignments that meet some criterion of goodness, not just the one best. It can serve as a front end 
to computer implementations of the comparative method. 
1. The Problem 
The first step in applying the comparative method to a pair of words suspected of 
being cognate is to align the segments of each word that appear to correspond. This 
alignment step is not necessarily trivial. For example, the correct alignment of Latin 
dcr with Greek did~Ymi is
- -do - -  
d idOmi  
and not 
do  . . . .  d - -O  . . . . . .  do  
d idomi  d idOmi  d idOmi  
or numerous other possibilities. The segments of two words may be misaligned be- 
cause of affixes (living or fossilized), reduplication, and sound changes that alter the 
number of segments, uch as elision or monophthongization. 
Alignment is a neglected part of the computerization f the comparative method. 
The computer programs developed by Frantz (1970), Hewson (1974), and Wimbish 
(1989) require the alignments to be specified in their input. The Reconstruction E gine 
of Lowe and Mazaudon (1994) requires the linguist to specify hypothetical sound 
changes and canonical syllable structure. The cognateness tester of Guy (1994) ignores 
the order of segments, matching any segment in one word with any segment in the 
other. 
This paper presents a guided search algorithm for finding the best alignment of 
one word with another, where both words are given in a broad phonetic transcription. 
* Artificial Intelligence Center, The University of Georgia, Athens, Georgia 30602-7415. E-mail: 
mcovingt@ai.uga.edu 
(~) 1996 Association for Computational Linguistics 
Computational Linguistics Volume 22, Number 4 
The algorithm compares urface forms and does not look for sound laws or phono- 
logical rules; it is meant to correspond to the linguist's first look at unfamiliar data. 
A prototype implementation has been built in Prolog and tested on a corpus of 82 
known cognate pairs from various languages. Somewhat surprisingly, it needs little or 
no knowledge of phonology beyond the distinction between vowels, consonants, and 
glides. 
2. Alignments 
If the two words to be aligned are identical, the task of aligning them is trivial. In all 
other cases, the problem is one of inexact string matching, i.e., finding the alignment 
that minimizes the difference between the two words. A dynamic programming algo- 
rithm for inexact string matching is well known (Sankoff & Kruskal 1983, Ukkonen 
1985, Waterman 1995), but I do not use it, for several reasons. First, the strings being 
aligned are relatively short, so the efficiency of dynamic programming on long strings 
is not needed. Second, dynamic programming normally gives only one alignment for 
each pair of strings, but comparative reconstruction may need the n best alternatives, 
or all that meet some criterion. Third, the tree search algorithm lends itself to modifi- 
cation for special handling of metathesis or assimilation. More about this later; first I 
need to sketch what the aligner is supposed to accomplish. 
An alignment can be viewed as a way of stepping through two words concurrently, 
consuming all the segments of each. At each step, the aligner can perform either a 
match or skip. A match is what happens when the aligner consumes a segment from 
each of the two words in a single step, thereby aligning the two segments with each 
other (whether or not they are phonologically similar). A skip is what happens when 
it consumes a segment from one word while leaving the other word alone. Thus, the 
alignment 
abc  - 
-bde  
is produced by skipping a, then matching b with b, then matching c with d, then 
skipping e. Here as elsewhere, hyphens in either string correspond to skipped segments 
in the other. 1 
The aligner is not allowed to perform, in succession, a skip on one string and then 
a skip on the other, because the result would be equivalent to a match (of possibly 
dissimilar segments). That is, of the three alignments 
ab-c  a -bc  abc  
a -dc  ad-c  adc  
only the third one is permitted; pursuing all three would waste time because they 
are equivalent as far as linguistic claims are concerned. (Determining whether b and d 
actually correspond is a question of historical reconstruction, ot of alignment.) I call 
this restriction the no-alternating-skips rule. 
To identify the best alignment, the algorithm must assign a penalty (cost) to every 
skip or match. The best alignment is the one with the lowest total penalty. As a first 
1 Traditionally, the problem is formulated in terms of operations to turn one string into the other. Skips 
in string 1 and string 2 are called deletions and insertions respectively, and matches of dissimilar 
segments are called substitutions. This terminology is inappropriate for historical inguistics, since the 
ultimate goal is to derive the two strings from a common ancestor. 
482 
Covington An Algorithm to Align Words 
approximation, we can use the following penalties: 
0.0 for an exact match; 
0.5 for aligning a vowel with a different vowel, or a consonant with a 
different consonant; 
1.0 for a complete mismatch; 
0.5 for a skip (so that two alternating skips--the disallowed case----would 
have the same penalty as the mismatch to which they are equivalent). 
Then the possible alignments of Spanish el and French le (phonetically \[lo\]) are: 
e l  
1 o 2 complete mismatches = 2.0 
-e l  
10 -  2 skips + 1 vowel pair -- 1.5 
e l -  
- 1 o 2 skips + 1 exact match = 1.0 
The third of these has the lowest penalty (and is the etymologically correct alignment). 
3. The Search Space 
Figure 1 shows, in the form of a tree, all of the moves that the aligner might try while 
attempting to align two three-letter words (English \[h~ez\] and German \[hat\]). We know 
that these words correspond segment-by-segment, 2 but the aligner does not. It has to 
work through numerous alternatives in order to conclude that 
h~ez 
hat  
is indeed the best alignment. 
The alignment algorithm is simply a depth-first search of this tree, beginning at 
the top of Figure 1. That is, at each position in the pair of input strings, the aligner tries 
first a match, then a skip on the first word, then a skip on the second, and computes 
all the consequences of each. After completing each alignment it backs up to the most 
recent mtried alternative and tries a different one. "Dead ends" in the tree are places 
where further computation is blocked by the no-alternating-skip rule. 
As should be evident, the search tree can be quite large even if the words being 
aligned are fairly short. Table 1 gives the number of possible alignments for words of 
various lengths; when both words are of length n, there are about 3 "-1 alignments, 
not counting dead ends. Without the no-alternating-skip rule, the number would be 
about 5"/2. Exact formulas are given in the appendix. 
Fortunately, the aligner can greatly narrow the search by putting the evaluation 
metric to use as it works. The key idea is to abandon any branch of the search tree 
2 Actually, as an anonymous reviewer points out, the exact correspondence is between German hat and 
earlier English hath. The current English -s ending may be analogical. This does not affect he validity 
of the example because/t/and /s/are certainly in corresponding positions, regardless oftheir 
phonological history. 
483 
Computational Linguistics Volume 22, Number 4 
Start 
0.5 
;2 0.5 
0.5 
IL~----al 1. 0 
1.0 
2.0 
~/  1.5 ~s2  2.0 
o5 
M 
1.o 
Figure 1 
Search space for al igning English /h~ez /w i th  German/hat / .  
end 
end 
I t -~- J I  2.0 
- -  Dead end 
.:___..dl.) ~ 2 . 0  
~ D e a d  end 
U::-Z-=~a.) ~ 3 . 0  
~ Dead end 
7 ~ 2 . 5  
s ~  2.5 Dead end 
~ Dead end 
3.0 
~"  ~ 2 . 5  
Dead end 
2.5 
~ D, ead end 
Dead end 
L----------~ \]2. 5 
~ 2 . 5  
484 
Covington An Algorithm to Align Words 
Table 1 
Number of alignments as a function of lengths of 
words. 
Lengths of words Alignments 
2 2 3 
2 3 5 
2 4 8 
2 5 12 
3 3 9 
3 4 15 
3 5 24 
4 4 27 
4 5 46 
5 5 83 
10 10 26,797 
as soon as the accumulated penalty exceeds the total penalty of the best alignment 
found so far. Figure 2 shows the search tree after pruning according to this principle. 
The total amount of work is roughly cut in half. With larger trees, the saving can be 
even greater. 
To ensure that a relatively good alignment is found early, it is important, at each 
stage, to try matches before trying skips. Otherwise the aligner would start by gener- 
ating a large number of useless displacements of each string relative to the other, all 
of which have high penalties and do not narrow the search space much. Even so, the 
algorithm is quite able to skip affixes when appropriate. For example, when asked to 
align Greek didomi with Latin dO, it tries only three alignments, of which the best two 
are: 
d idomi  d idOmi  
d - -o  . . . .  dO- -  
Choosing the right one of these is then a task for the linguist rather than the alignment 
algorithm. However, it would be easy to modify the algorithm to use a lower penalty 
for skips at the beginning or end of a word than skips elsewhere; the algorithm would 
then be more willing to postulate prefixes and suffixes than infixes. 
4. The Full Evaluation Metric 
Table 2 shows an evaluation metric developed by trial and error using the 82 cognate 
pairs shown in the subsequent tables. To avoid floating-point rounding errors, all 
penalties are integers, and the penalty for a complete mismatch is now 100 rather 
than 1.0. The principles that emerge are that syllabicity is paramount, consonants 
matter more than vowels, and affixes tend to be contiguous. 
Somewhat surprisingly, it was not necessary to use information about place of 
articulation i  this evaluation metric (although there are a few places where it might 
have helped). This accords with Anttila's (1989, 230) observation that great phonetic 
subtlety is not needed to align words; what one wants to do is find the exact matches 
and align the syllabic peaks, matching segments of comparable syllabicity (vowels 
with vowels and consonants with consonants). 
485 
Computational Linguistics Volume 22, Number 4 
$2 
0.5 
0.5 
~ Dead end 
~ Dead end 
,,~c i1. 5 
hh ~---~---- Dead end 
0.5 
~ 1 . 5  
$2 
~ D e a d  end 
1.5 
Start4 
S1 
0.5 
~ 1.5 $1 
1.5 
M/  \].5 
0.5 
Figure 2 
Same tree as in Figure 1, after pruning. 
$2 
1.0 
- - "11 .5  
- - -11 .5  
486 
Covington An Algorithm to Align Words 
Table 2 
Evaluation metric developed from actual data. 
Penalty Conditions 
0 Exact match of consonants or glides (w, y) 
Exact match of vowels (reflecting the fact that 
the aligner should prefer to match consonants 
rather than vowels if it must choose between the two) 
10 Match of two vowels that differ only in length, 
or i and y, or u and w 
30 Match of two dissimilar vowels 
60 Match of two dissimilar consonants 
100 Match of two segments with no discernible similarity 
40 Skip preceded by another skip in the same word 
(reflecting the fact that affixes tend to be 
contiguous) 
50 Skip not preceded by another skip in the same word 
It follows that the input to the aligner should be in broad phonetic transcrip- 
tion, using symbols with closely similar values in both langauges. Excessively narrow 
phonetic transcriptions do not help; they introduce too many subtle mismatches that 
should have been ignored. 
Phonemic transcriptions are acceptable insofar as they are also broad phonetic, but, 
unlike comparative reconstruction, alignment does not benefit by taking phonemes as 
the starting point. One reason is that alignment deals with syntagmatic rather than 
paradigmatic relations between sounds; what counts is the place of the sound in the 
word, not the place of the sound in the sound system. Another reason is that earlier 
and later languages are tied together more by the physical nature of the sounds than 
by the structure of the system. The physical sounds are handed down from earlier 
generations but the system of contrasts is constructed anew by every child learning 
to talk. 
The aligner's only job is to line up words to maximize phonetic similarity. In the 
absence of known sound correspondences, it can do no more. Its purpose is to simulate 
a linguist's first look at unfamiliar data. Linguistic research is a bootstrapping process 
in which data leads to analysis and analysis leads to more and better-interpreted data. 
In its present form, the aligner does not participate in this process. 
5. Resul ts  on  Actual  Data 
Tables 3 to 10 show how the aligner performed on 82 cognate pairs in various lan- 
guages. (Tables 5-8 are loosely based on the Swadesh word lists of Ringe 1992.) 3
3 To briefly address Ringe's main point: if the "best" alignment of a pair of words is used, the likelihood 
of finding a chance similarity is much higher than when using a fixed, canonical lignment. 
487 
Computational Linguistics Volume 22, Number 4 
Table 3 
Alignments obtained with test set of Spanish-French ognate pairs. 
yo : je T y o 
2o 
tu : tu 'you' t u 
t f i  
nosotros : nous 'you' n o s o t r o s 
nu . . . . . .  
quign : qui 'who?' k y e n 
k i - -  
qug: quoi 'what?' k - e 
kwa 
todos : tous 'all' t o d o s 
tu - - -  
una 
una : une 'one' (f.sg.) ti n - 
dos : deux 'two' d o s 
d6-  
tres: troix 'three' t r - e s 
t rwa - 
hombre : homme 'man' omb r e 
o i - n  o ? _ 
These are "difficult" language pairs. On closely similar languages, such as Span- 
ish/Ital ian or German/Danish,  the aligner would have performed much better. Even 
so, on Spanish and French---chosen because they are historically close but phonologi- 
cally very different--the aligner performed almost flawlessly (Tables 3 and 4). Its only 
clear mistake is that it missed the hr correspondence in arbre : drbol, but so would the 
linguist without other data. 
With English and German it did almost as well (Tables 5 and 6). The s in this 
is aligned with the wrong s in dieses because that alignment gave greater phonetic 
similarity; taking off the inflectional ending would have prevented this mistake. The 
alignments of mouth with Mund and eye with Auge gave the aligner some trouble; in 
each case it produced two alternatives, each getting part of the alignment right. 
English and Latin (Tables 7 and 8) are much harder to pair up, since they are 
separated by millennia of phonological and morphological change, including Grimm's 
Law. Nonetheless, the aligner did reasonably well with them, correctly aligning, for 
example, star with stglla and round with rotundus. In some cases it was just plain 
wrong, e.g., aligning tooth with the -tis ending of dentis. In others it was indecisive; 
although it found the correct alignment of f ish with piscis, it could not distinguish it 
from three alternatives. In all of these cases, eliminating the inflectional endings would 
have resulted in correct or nearly correct alignments. 
488 
Covington An Algorithm to Align Words 
Table 4 
Alignments obtained with test set of Spanish-French cognate pairs 
(continued). 
drbol : arbre 'tree' a r b - o 1 
arbro -  
pluma : plume 'feather' 
cabeza 'head' : cap 'promontory' 
p luma 
p lum-  
kabe0a 
kap- - -  
boca : bouche 'mouth' b o k a 
bu~ - 
pie : pied 'foot' P y e pye  
corazdn : coeur 'heart' koraOon 
k6r  . . . .  
,~p,~, b - e r voir vel" vwa r 
venir : venir 'come' b e n i r 
von i  r 
de0 i r  decir : dire 'say' d - - i r 
pobre : pauvre 'poor' p o b r e 
povro  
Table 9 shows that the algorithm works well with non-Indo-European languages, 
in this case Fox and Menomini cognates chosen more or less randomly from Bloomfield 
(1941). Apart  from some minor trouble with the suffix of the first item, the aligner had 
smooth sailing. 
Finally, Table 10 shows how the aligner fared with some word pairs involving 
Latin, Greek, Sanskrit, and Avestan, again without knowledge of morphology. Because 
it knows nothing about place of articulation or Gr imm's  Law, it cannot tell whether 
the d in  daughter  corresponds with the th or the g in Greek thugat~r. But on centum : 
hekaton and centum : satom the aligner performed perfectly. 
6. Improving the Alignment Algorithm 
This al ignment algorithm and its evaluation metric are, in effect, a formal reconstruc- 
tion of something that historical linguists do intuitively. As such, they provide an 
empirical test of theories about how historical reconstruction is practiced. 
There are limits to how well an aligner can perform, given that it knows nothing 
about comparat ive reconstruction or regularity of correspondences. Nonetheless, the 
present algorithm could be improved in several ways. 
489 
Computational Linguistics Volume 22, Number 4 
Table 5 
Alignments obtained with test set of English-German cognate pairs. 
this : dieses 6 i - - s 
d izos  
that : das 6 ~e t 
das  
what  : was  wa t 
vas  
not : n icht  n a - t n ix t  
long : lang 1 o I 3 
l ao  
m~e n
man : Mann man 
f le -~ 
f lesh : Fleisch f l ay~ 
blood : B lu t  b 1 o d 
b lQt  
~oa~er : Feder f e 6 ~ r 
f@dor  
hair : Haar  h a~ r 
har  
One obvious improvement would be to implement feature-based phonology. Im- 
plicitly, the aligner already uses two features, vocalicity and vowel length. A fuller 
set of features would have given a better alignment of p isc i s  with f i sh ,  preferring f :p  
to f : k .  Features are not all of equal importance for the evaluation metric; syllabicity, 
for instance, will surely be more important han nasality. Using multivariate statistical 
techniques and a set of known "good" alignments, the relative importance of each 
feature could be calculated. 
Another improvement would be to enable the aligner to recognize assimilation, 
metathesis, and even reduplication, and assign lower penalties to them than to arbi- 
trary mismatches. The need to do this is one reason for using tree search rather than 
the standard dynamic programming algorithm for inexact string matching. Dynamic 
programming is, in effect, a breadth-first search of the tree in Figure 1; Ukkonen's 
(1985) improvement of it is a narrowed breadth-first earch with iterative broadening. 
Both of these rely on computing parts of the tree first, then stringing partial solutions 
together to get a complete solution (that is what "dynamic programming" means). 
They do their partial computations in an order that precludes "looking ahead" along 
the string to undo an assimilation, metathesis, or reduplication. By contrast, my depth- 
first search algorithm can look ahead without difficulty. 
490 
Covington An Algorithm to Align Words 
Table 6 
Alignments obtained with test set of English-German cognate pairs 
(continued). 
ear  : Ohr  i r 
or 
eye  : Auge  a - - y awg0 
nose  : Nase  n o w z - 
na-zo  
mouth  : Mund maw - 0 
m-unt  
tongue : Zunge t - o ~ - t su~o 
foot  :Fur l  f u t fOs 
knee  : Kn ie  - n i y kn i  - 
hand:Hand hahn d 
hant  
hear t  " Herz  h a r t - 
her ts  
l i ver  : Leber  1 i v o r 
l~bor  
ay  ~-  
awgo 
mawO- 
m-unt  
Another crucial difference between my algorithm and dynamic programming is 
that, by altering the tree pruning criterion, my algorithm can easily generate, not just 
the best alignment or those that are tied for the best position, but the n best alignments, 
or all alignments that are sufficiently close to the best (by any computable criterion). 
Multilateral alignments are needed when more than two languages are being com- 
pared at once. For example, 
e l -  
- l o  
i l -  
is the etymologically correct hree-way alignment of the masculine singular definite 
article in Spanish, French, and Italian. Multilateral alignments can be generated by 
aligning the second word with the first, then the third word with the second (and 
implicitly also the first), and so on, but it would be advantageous to apply the eval- 
uation metric to the whole set rather than just the pairs that are chained together. 
Multilateral alignment is also an important problem in DNA sequence analysis, and 
no general algorithm for it is known, but research is proceeding apace (Kececioglu 
1993, Waterman 1995). 
491 
Computational Linguistics Volume 22, Number 4 
~b le7  
Mi~mentsobta inedwi th tes tseto fEng l i sh -Latmco~atepa i rs .  
and : ante  2end- 
ante  
at : ad  a~ t 
ad 
b low : f la re  b 1 - - ow- 
f la re -  
ear : aur i s  i -  r - - 
awr is  
eat  : edere i y t - - - 
e-dere  
- - - f i~  
f i sh  : p i sc i s  p i s k i s 
f l ow : f luere  f l ow - - - 
f l  -uere  
star  : ste-lla s t a r - - 
s t~ l la  
- - - fu l  
fu l l  : p l~nus  p 1 ~ n u s 
gr  - -~es 
grass  : g r~men g r amen 
hear t  : cord is  (gen.) h a r - - t 
kord is  
horn -  horn  : corn?  
kornO 
- -ay  
I : ego  ego - 
f - - - i~  f i - - -~  f i~- - -  
p i sk i s  p i sk i s  p i sk i s  
f - - - u l  
p lenus  
gr~- -s  g r~s- -  
g ramen gramen 
har t - -  
kord is  
7. From Here to the Comparat ive  Method  
Comparat ive  reconstruct ion consists of three essent ia l  steps: 
. 
2. 
3. 
A l ign  the segments  in the (putat ive)  cognates;  
F ind cor respondence  sets (cor respond ing  to proto-a l lophones) ;  
Ident i fy  some cor respondence  sets as phonet ica l ly  cond i t ioned  var iants  
of others  ( thereby reconstruct ing proto -phonemes) .  
492 
Covington An Algorithm to Align Words 
Table 8 
Alignments obtained with test set of English-Latin cognate pairs 
(continued). 
- -n iy  
knee  : gen~ g e n o - 
mother  : mater  mo 6 o r 
mater  
mawn t o n 
mounta in  : mGns  mO-n-  - s 
name : n f fmen n e ym - - 
nO -men 
nyuw-  - 
new : novus  n - owu s 
w o n  - - 
one : anus  - f inus  
round : ro tundus  r a - wn d - - 
ro tundus  
S O W -  - - 
sew : suere  S - u e r e 
s i t  : s~dere s i t - - - 
s~dere  
th ree  : tr~s 0 r i y 
t r~s  
- - - tuw0 tooth  dent i s  ~'~ ben'/ dent  i - s 
th in  : tenu is  0 i n - - - 
tenu i  s 
mawnton  
mO-ns - -  
nyuw-  
nowus  
Kay (1964) noted that the "right" set of alignments (of each of the cognate pairs) is 
the set that produces the smallest otal number of sound correspondences. Steps 1 
and 2 could therefore be automated by generating all possible alignments of all of the 
cognate pairs, then choosing the set of alignments that gives the fewest correspondence 
sets. 
As Kay notes, this is not practical. Suppose the putative cognates are each 3 seg- 
ments long. There are then 9 different alignments of each cognate pair, and if 100 
cognate pairs are to be considered, there are 9 l?? ~ 2.65 x 1095 sets of alignments to 
choose from, far too many to try on even the fastest computer. 
However, a guided search along the same lines might well be worthwhile. First 
choose one alignment for each cognate pair--the best according to the evaluation met- 
ric, or if several are equally good, choose one arbitrarily. Construct he entire set of 
correspondence s ts. Then go back and try one or two alternative alignments for each 
493 
Computational Linguistics Volume 22, Number 4 
Table 9 
Alignments obtained with test set of Fox-Menomini cognate pairs. 
ki inwaawa : kenuaq 'you (pl.)' k inwawa-  k inwawa-  ken- -uaq  kenu- -aq  
niina : nenah T n i n a - 
nenah 
naapeewa : naap~,cw 'man' 
waapimini  : waapemen 'maize' 
nameesa : narnccqs 'fish in.)' 
okimaawa : okeemaaw 'chief' 
giigiipa : seeqsep 'duck (n.)' 
ahkohkwa : ahlcceh 'kettle' 
pemaatesiweni : pemaatesewen 'life' 
asenya : aqs~n 'stone (n.)' 
nap~wa 
napgw-  
wap imin i  
wapemen-  
nam~-sa  
nam~qs-  
ok imawa 
ok~maw-  
g i -g ipa  g ig - ipa  
s~qsep-  s~qsep-  
ahkohkwa 
ahk~h- - -  
pemates iwen i  
pematesewen-  
a -senya  
aqscn- -  
cognate pair, noting whether the size of the set of correspondence s ts decreases. If so, 
adopt the new al ignment instead of the previous one. For a set of 100 cognate pairs, 
this requires a total of only a few hundred steps, and the result should be close to the 
optimal solution. Reduction of correspondence s ts to proto-phonemes is, of course, 
a separate task requiring a knowledge base of phonological features and information 
about phonetic plausibility. 
Appendix: Size of the Search Space 
The total number  of al ignments of a pair of words of lengths m and n can be calculated 
as follows. 4 Recall that a match consumes a segment of both words; a skip consumes a
4 For assistance with mathematics here I am greatly indebted to E. Rodney Canfield. I also want to thank 
other mathematicians who offered helpful advice, among them John Kececioglu, Jeff Clark, Jan Willem 
Nienhuys, Oscar Lanzi III, Les Reid, and other participants in sci.math on the Internet. 
494 
Covington An Algorithm to Align Words 
Table 10 
Alignments obtained with cognate pairs from other languages. 
Greek did(Ymi : Latin d6 'I give' d idomi  
- -dO- -  
Greek thugat?r : German Tochter 'daughter' thu 
to  
English daughter : Greek thugat?r 'daughter' thu 
a -  
Latin ager : Sanskrit ajras 'field' a j 
gat~r  
x - to r  
dotor  
gat~r  
ger  
ras  
Sanskrit bhar~mi : Greek pher6 'I carry' 
Latin centum : Greek hekaton '100' 
Latin centum : Avestan satom '100' 
d idomi  
d - -O- -  
d - -o tor  
thugat@r  
ag-er  ager - -  
a j ras  a j - ras  
do - - to r  
thugat@r  
bharami  bharami  
pher - -6  phero - -  
- -kentum 
heka- ton  
kentum 
sa-  tom 
segment from one word but not the other. The complete al ignment has to consume all 
the segments of both words. Accordingly, any al ignment containing k matches must 
also contain m - k skips on the first word and n - k skips on the second word. The 
number  of matches k in turn ranges from 0 to min(m, n). Thus, in general, the number  
of possible al ignments is 
min(m,n) 
Alignments(m, n) = Z number  of al ignments containing k matches 
k=0 
Without the no-alternate-skip rule, the number  of al ignments containing k matches is 
simply the number  of ways of partitioning a set of k + (m - k) + (n - k) = m + n - k 
moves into k matches, m - k skips on word 1, and n - k skips on word 2: 
min(m,n) (m + n - k)! 
Al ignments(m,n) -- Z k!(m - k)!(n - k)! 
k=0 
(To give you an idea of the magnitude, this is close to 5n/2 for cases where m -- n and 
n < 20 or so.) 
With the no-alternate-skip rule, the number  of al ignments is exponentially smaller 
(about 3 n-1 when m = n) and can be calculated from the recurrence relation 
n-2 m--2 
a(m,n) = a (m-  1,n -  1) + Za(m-  1,i) + Za( i ,n -  1) 
i=0 i=0 
with the initial conditions a(0,n) = a(m,0) = 1; for a derivation of this formula see 
Covington and Canfield (in preparation). 
495 
Computational Linguistics Volume 22, Number 4 
References 
Anttila, Raimo. 1989. Historical and 
Comparative Linguistics. Second revised 
edition. Amsterdam Studies in the Theory 
and History of Linguistic Science, W: 
Current Issues in Linguistic Theory, 6. 
Benjamins, Amsterdam. 
Bloomfield, Leonard. 1941. Algonquian. In 
C. Osgood, editor, Linguistic Structures of 
Native America. Viking Fund Publications 
in Anthropology, 6.Reprint, Johnson 
Reprint Corporation, New York, 1963, 
pages 85-129. 
Covington, Michael A. and Canfield, E. 
Rodney. In preparation. The number of 
distinct alignments of two strings. 
Research report, Artificial Intelligence 
Center, The University of Georgia. 
Frantz, Donald G. 1970. A PL/1 program to 
assist he comparative linguist. 
Communications of the ACM, 13:353-356. 
Guy, Jacques B. M. 1994. An algorithm for 
identifying cognates in bilingual wordlists 
and its applicability to machine 
translation. Journal of Quan titative 
Linguistics, 1:35-42. 
Hewson, John. 1974. Comparative 
reconstruction the computer. In John 
M. Anderson and Charles Jones, editors, 
Historical Linguistics h Syntax, Morphology, 
Internal and Comparative Reconstruction. 
North Holland, Amsterdam, pages 
191-197. 
Kay, Martin. 1964. The logic of cognate 
recognition i  historical linguistics. 
Memorandum RM-4224-PR. The RAND 
Corporation, Santa Monica. 
Kececioglu, John. 1993. The maximum 
weight trace problem in multiple 
sequence alignment. In A. Apostolico et 
al., editors, Combinatorial Pattern Matching: 
4th Annual Symposium, Springer, Berlin, 
pages 106-119. 
Lowe, John B. and Martine Mazaudon. 
1994. The reconstruction e gine: A 
computer implementation f the 
comparative method. Computational 
Linguistics, 20:381-417. 
Ringe, Donald A., Jr. 1992. On Calculating the 
Factor of Chance in Language Comparison. 
American Philosophical Society, 
Philadelphia. 
Sankoff, David and Joseph B. Kruskal, 
editors. 1983. Time Warps, String Edits, and 
Macromolecules: The Theory and Practice of 
Sequence Comparison. Addison-Wesley, 
Reading, MA. 
Ukkonen, Esko. 1985. Algorithms for 
approximate string matching. Information 
and Control, 64:100-118. 
Waterman, Michael S. 1995. Introduction to 
Computational Biology: Maps, Sequences and 
Genomes. Chapman & Hall, London. 
Wimbish, John S. 1989. WORDSURV: A 
program for analyzing language survey 
word lists. Summer Institute of 
Linguistics, Dallas. Cited by Lowe and 
Mazaudon. 1994. 
496 
