SAGE : 
a Sentence Parsing and Generation System 
Jean-Marie Lancel, Miyo Otani, Nathalie Shnonin 
Usp Sogeti Innoestion 
118 rue de Tocque~ille, 75017 Pads, France 
E-mail: lancelOcsinn.uucp, otaniOc~inn.uucp, ~imon~tOcsin~t.eu~p 
Laurence Danlos 
LADL - UNRS 
Tour Ueatrale, Uni~er~itg Pads VII, ,\[ piac~ Ju~i~u, 75005 Pariz, France 
Abstracts: 
SAG~ (Sentence Analysis and GEneration system) 
is an operational parsing and generating system. It 
is used as a Natural Language Frontend for Esprit 
project Eeteam-316, whose purpose is to advise a 
novice user through a cooperative dialogue. 
The aim of our system is to validate the use of a 
Lexice)n-Grammar (drawn from the LADL studies) 
ior sentence-parsing and generation, and to imple~ 
~aent )~nguistic knowledge in a declarative way u~- 
ing a formMism based upon Functional Descrip- 
tions (FD). We have ales devvloped the parser and 
the g~ueratio~ module so that they share informa~ 
tion~ and knowledge bases as much as possible: 
they work on the same semazLtic dictionary and 
the same linguistic knowledge bases, except th~ 
they kave their own graznmar. We have also ires 
p|emented a tracking of semantic objects that have 
been f~istantiated during a dialogue session: the so- 
called Token History is provided for semantic ref- 
vrence and anaphor resolution during parsing and 
for pronoun production during generation. 
After introducing to Esteam-316, this paper de- 
,cribelJ the ~nguistic knowledge bases required by 
SAGE, and then foctmes on the Generation Mod- 
nleo Sv.ctlon 4 explains how pronouns are handled. 
The last section is a brief evaluation of our present 
WO1"k  o 
:t ~introduction to the appli- 
cat io l i  of SAGE 
_ ne pro'sing and generating system described here 
~ used as a Natural Language Frontend for F~., 
prlt project Esteam-316, which is an Advice-Gi~ 
ring system \[Decitre 871 \[Bruffaerts 86\]0 A coopera- 
tive interactive Man-Machine Interface carries out 
dialogue functionalities such as recognition of user 
queries, explanation of domaln~concepts, explana- 
tion of solutions proposed by the Problem Solver, 
etc. To describe it briefly, this Dialogue Manager 
handles the pragmatic level of a dialogue, wherea~ 
the Natural Language Frontend SAGE deals with 
linguistic inferences? The chosen l~guage is }~n- 
glish. 
The Dialogue Manager and SAGS ~h~re the same 
lemantic objects, using a formalism b~ed upon 
Functional Descriptions (FD~) \[Kay 81\]. The Parser 
of SAGE extracts the met~uing of the user's query 
mad represents it with nested FDs. Ox~ the other 
hand, the Dialogue Manager sends the Generator 
FDs which describe the semantic onte, nts of the 
answer. 
Our previous work \[Lancel 86\] was based on a uni- 
que dictionary and a granunar shared by both a 
parser and a generation module. The grammar 
formalism required the mixing of syntactic and se- 
mantic informations in the same structure, which 
implied the complete rewriting of grautmar when 
changing from one application domain to another. 
It could not handle transformational processes such 
as interrogative and imperative transformations? 
The system presented here fulfills the four follow- 
ing requirements: 
1. definition of linguistic knowledge bases quit? 
able for both parsing and generation; 
2. integration of lexicon-grammar theory into 
the previous fortnalism, in order to provide 
precise syntactic information; 
8. modulari~ation: a change of application 
359 
should not lead to a complete rewriting, but 
only to an extension of the semantic levels; 
4. proper pronoun h~dl ing, both when parsing 
I reference resolution) and when generating pronoun synthesis). 
The section 2 describes the linguistic dictionaries 
of SAGE. The section 3 explains how those dictio- 
naries are exploited by the generation module. In 
the section 4, we will detail what kind of processes 
are required by pronoun handling. 
2 L ingu is t i c  knowledge  base  
for  pars ing  and  generat ion  
There are three linguistic levels handled by our sys~ 
tern: morphological, syntactic, and lastly semantic. 
The first one will not be explained here, since the 
ost innovative aspects of our linguistic knowledge 
es are provided by the two other levels: we are 
able to take into account a wide range of cons- 
tructions of a given language using the lexicon~ 
grammar and we use a totally declarative formal- 
ism. 
2 .1  Pars ing  versus  generat ion  
The main feature of SAGE is that the Parsing 
and Generation processed are carr iedout using the 
same dictionaries. 
These dictionaries are interpreted by two separate 
grammars, one for parsing and one for generation, 
both of them being language-dependent bu  not 
lencies, with differeht levels of correctne~ for pa~ 
sing and generation. This allows a very wide ra~tge 
of sentence structures in generation, and semantic 
inferences to avoid ambiguities. The LADL Le~io 
con-Grammar covers nearly all French constr~c~ 
tione. As far as we know, an equlvaIent amount 
of work is still not available for English. There~ 
fore, we developed a Lexicon~Grammar cont~mg 
a few English verbs and nouns. The corresponding 
constructions are drawn from \[LONGMAN 81\]. 
To give an idea of this lexicon-grammar, wepresen~ 
below the information stored for the verb tuanto 
* The standaxd construction is \[ Subject ~-' 
Verb ~ Direct Object \]; 
o The subject must be a bureau being; there? 
fore, it is a~lowed to be a noun group, but not 
clause or a verb phrase; 
, The direct object may be a human being 
~a *The mother wants her ch~d ~, a non-human eno 
tity as in "He wants t im~, or a thai-clause ~ in 
"Mary wants that John settles down in PariS; 
? The ~hat-clau~e can be reduced in the follow~ 
ing forms: 
- \]Noun group -~ Adjective\] or NAd~ if the 
verb hf be (e.g "The teacher wants the ~ze~is~ ready 
/or tomorroef );
- \[Verb at the complete infinitive form -~ 
complements\] or To Vin/O if the concept of the sub? 
ject of this clause is the same as that of the subo 
ject of want (e.g. ~Mary wants to settle down in 
- \[Noun group ~ Verb at the complete infinio 
tive form -\[- complements\] or NTo Vinf when the 
two subjects are different (e.g. "Mary wants h~r 
friend~ to settle down in Pari~.~); 
? The whole cl~nse may be transformed into 
the passive form. 
domain-dependent. This is a major conclusion drawn ~ . .  - . . for  she sake of read~bifity and maintenaace, vexbs 
from our studies: a parser and a generatton moo- are so,ted into different tables. One table epecio 
ule can hardly share the same grammar ules, for 
the heuristics required by these two processes are 
fundamentally different. Unlike parsing, a gener- 
ation process has nothing to do with a sequence 
of "left-to-right ~ procedures \[Danlos 87a, Danloe 
87b\]. Moreover, a given heuristic of clause tran~ 
formation is strongly dedicated to a parsing or  to 
a generation process (see section 3). 
2.2 Syntactic Knowledge Base 
ties several standard features, syntactic onstruco 
tions as well as valencies that are common to evo 
ery verb of the same table. For inJtaace, in ot~' 
lexicon-grammar, want belongs to the table t~o 
ble_NV8 whose standard construction is ~ hur~t~ 
subject in a noun group, with a non-humu direct 
object in a noun group, construction of which may 
be transformed into the paasive form. 
Here is how one construction of the verb stunt i~ 
coded, using Fenctional Descriptions (FD): 
This syntactic level is domain-independent: cons- 
tructions of verbs, predicative nouns and adjectives 
along with their corresponding valency are listed in 
a lexicon-grammar. 
This lexicon-grammar is based on the theory deveL 
oped by \[Gross 75, Gross 86\] and the studies carried 
out by the LADL on French constructions. It pro~ 
rides accurate specifications of the acceptable va~ 
syntax.want +~ 
\[ table = tab.NVS 
linguiettc.defln|tioa ~- clause_ws~t 
verb = \[ word -- want \] 
obJe~tl 
\[ duct!oa = ((Tov fo xoo) (NAdJ 100)) 
= ((NToWf I00)) \] \] 
tab.NVS ~-~? 
360 
\[ .ub jec t  = 
\[ distribution = ((*human 100)} 
noun.phzmm = {(noun.phrase I00)} \] 
objectl = 
\[ distribution = ( (*non.human I00) 
(*human 100) } 
noun.phrmm = {(noun.phrase I00)} \] 
traneformation = ((passive 100)} \] 
The texical codes (NTo Vin/, To VinfO and NAd3) 
are specified in a FD, stating the conditions of va- 
lidity of the code and the consequences on the com~ 
ponez~Lts: To VinfO should be chosen if the subject 
of the current sentence and that of the main clause 
represent the same concept; in this case the subject 
shouM be omitted and the verb should be in the 
infinitive form. 
The ~umeric values ranging from 0 up to 100, is a 
coefficient on the correctness of the corresponding 
constl~ctions. When generating a syntactic om- 
ponent, lexical codes that axe allowed are the ones 
.4 with a coefficient greater than a certain value, 70 
in our implementation. When parsing sentences, 
accepted constructions would be of a coefficient 
greater than another milestone, 30 for instance. 
The values 0, 30, 70, 100 are of course quite arbi- 
trary. But they allow the parsing of constructions 
that ~xe often understood by most of the people 
but m'e syntactically incorrect: the corresponding 
lexica~ codes will have a coefllcient between 30 and 
70. 
2.3  Semant ic  knowledge  base  
The semantic level is highly domain-dependent since 
it dents with concepts. The application domain 
chose~ by the Esteam-316 project is financial advice- 
giving for non-expert users. Therefore, the Man-  
Machiue interface handles intention concepts such 
as *serface_requeet and *surface.inform which are 
the intention o/asklng/or something and the inten- 
tion o/stating something, financial concepts uch 
as *emergency_fend which is a certain amount of 
money available at ans/ time and provided for emer- 
gency c~ee, and lastly domain-independent con- 
cepts such as *t0ant ~. 
Those concepts are organised in a semantic net-  
work, using the links/s_a and ezample. Moreover, 
the semantic sub-items are specified in a aehemo. 
For instance, the concept *want is specified by: 
\[ isj~ = *po6ltion 
echema = 
\[ actor = \[ iLa = *human \] 
ZThe c~osen convention is to put a star a{ the begin- 
ning of a concept identifier, but this ls purely for the 
sake of readability. 
object \] 
synthesis  = 
( \[ Ung~istic~eflnition = clause_want \] ) \] 
As seen in section 2.1, the semantic objects ac~ 
tually handled by the user and system during a 
dialogue are called token& Inside the system, too 
kene are instances of concepts - -  or more precisely 
d schemata ~.  
2.4 L ink between concepts  and  syn- 
tact ic  s t ructures  
Mapping between semantic schemata nd syntactic 
structures i ,pecified in FDs named llnguiatlc def. 
initions, This is am important feature of our KB: it 
is the linguistic definitions that make explicit the 
correspondance b tween token slots and syntactic 
components of sentences, clauses and noun groups? 
Using them, the same token may be synthesised 
as a noun phrase or a clause, according to syntac- 
tic constraints. A noun phrase or a clause require 
different grammar ules in the generation process. 
For instance, let us consider the following token : 
\[ insta~tce-of = *transaction 
buyer = *Mary 
object = *car \] 
It may be expressed with a clause Mary buy8 ? car: 
meaning = 
\[ instance-of : *transaction 
buyer = *Mary 
object = *car \] 
subject = \[ meaning = *Mary \] 
verb = \[ word = buy \] 
object = \[ meaning = *car \]\] 
or with a noun phrase Mary% purchase of a car:. 
\[ meaning = 
\[ instance_of ---- *transaction 
buyer = *Mary 
object -- *Car \] 
subjectlve.genltive -- \[ meaning = *Mary \] 
predicative-noun = \[ word = purchase \]
objective-complement = \[ meaning --- car \] \] 
The last two FDs shown above are the syntactic 
structuru produced by two different linguistic defo 
initions linked to the same concept *tra~sasKono 
The choice between the two is made by the genera- 
tion module either under semantic onstraLnts de. 
clared in the semantic dictionary, .or under linguis- 
tic restrictions pecified by the generation gram- 
mar, or by the lexicon-grammar. 
361 
Linguistic definitions do not only allow the synthe~ 
sis of totally different schemata using the same gen- 
eration grammar rules, but also provide the parser 
with extended capacities for handling complex noun 
phrases or sentences and for extracting a specific 
meaning with the specific slot identifiers (b~yer~ 
object, year) out of a standard syntactical cons- 
truction of the noun~ or verb--predicate. 
3 Generat ion  
3.1 Genera l  heur ist ic  of the Gener-  
at ion Modu le  
The generation process is top-down, with back- 
tracking. The generation algorithm consists of build- 
ing a complex object of several nested FDs recur- 
sively. 
The highest level deals with the surface syntac- 
tic form: assertion, question, order. This level 
corresponds to the intention concepts like *sur- 
face_request Then comes the inner structure of 
the sentence: generally speaking, a subject, a verb 
and objects with several optional adverbials. This 
corresponds to doma~n-~oncepts (e.g, *smerfen. 
cy_/~nd} or general concepts (e.g. *~ant). LMtly 
there is the noun group structure with preposition, 
determiner, noun. There is ~ specific grammar rule 
for each level. 
Briefly, a gr~nmax rule specifies under what con~ 
ditions a given rule may be applied, what kinds 
of rules are to be chosen for the synthesis of each 
Syntactic Component, and what actions are to be 
carried out on the structure (such as choosing the 
number and person of a verb according to the sub- 
ject within a sentence}. 
# ? 
The current level is built in a loop starting from its 
semantic ontents (a token}: through the concept 
corresponding to the token, the interpreter chooses 
a linguistic definition, then a syntactic structure in 
the lexicon-grammar. 
These FDs plus the corresponding grammar ule 
are functionally unified ~ with the current object. 
Then, one syntactic ode such as To Vin\]O or ~ou~- 
phrase is chosen according to the grmmmar rule and 
the validity condition of the code. The FD of th~ 
code is unified with the current object. 
This is where our declarative KBs baaed on Func- 
tional Descriptions prove to be ei~cient. The smn~ 
heuristic based on functional unification is used for 
totally different structures uch as noun phrase or 
clause. Therefore, this loop is allowed to be totally 
recursive. 
~n the meaning of yunctional ~nificai~on \[Kay 81\]. 
At this stage of the process, the generation modulo 
may add several modifiers to the current level~ that 
are adverbi~d~ in sentences, or adjectives in ~oun 
groups: this adjunction is a\]~o carried through f~u~co 
tional unification since the modifiers ~e also d~ 
scribed in a FD just like any grammsx rule or le)~ 
ical code. 
For instance after functional unifications, the cur~ 
rent syntactic component corresponding to ~\[ ~a~ 
ear" is: 
memdng = 
\[ inatance~of = ~w~t 
actor ~ ~u~ 
subject 
\[ memah~g = *u~r 
distribution = {(*human 100)) 
noun~ph~a~ = {(noun-ph~ 100)} \] 
vorb = \[ wo~ = w~nt \] 
object1 = 
\[ meaning = \[ i~ta~c~.~ ~ *c~ \] 
distributlon = { (*noLkuman I00) 
(?~u~n ~oo)} 
reduction = ( (ToVinf0 100) 
(NAdj 100)) 
clause = ((lgToVlnf X00)) 
noun.phr~m -~ {(noun-phr~m 
transformation -- ((pmmlvel 100)) \]00)) 
x \] 
Then trmmfomations are processed whenewr they 
are needed, such as for questions (which puts the 
verb in the interrogative form and inserts an ~ux- 
iliary verb before the subject), or negations or pa~ 
sive transformations, ~ranaformations are speci~ 
fled in FDs similar to grammar rules, with validity 
conditious and actions,,but also with a specific slot 
stating whether they must be applied befm'e or ~- 
ter the standard grammar rules. 
Thk  synthesk loop k carried out on every nynt~co 
tic suN-component, that is for instance on subject~ 
verb ud  objects of a clause. 
If every sub-component is cmTectly synthesised in
turn, the actions of the global rule are applied o~ 
the current component. 
Other tran~ormations may be cL~ri~cl out, lead~ 
ing only to the re, ordering of objects in a clauM, 
which may depend on whether the objects ere ex~ 
pre~ed through pronouu. A ditransitive/dat~ve 
transformation is a perfect example: st~rtlng from 
a sentence whose meaning is "The poslman f~ea 
\]t~c~'y l~.e letts~,, the final sentence may becmn~ 
~The postman gi~es her the l~teP or ~The po~o. 
ma~ fg~ea it ~o Mar l  or " The postmaa gi~es i~ ~ 
heP . 
There ends the body of the loop. If a failure o~ 
curs during this loop, backtracking choose~ another 
linguistic definition ~d/or  .another grammar ruleo 
362 
texte~ generat iox~ 
~?h? f?,llowing token, ~tade of several n~ted toke~, 
sya~heahed ~ a~nder athat delay d~ you wat~ 
~oar ~t~erCen~ fund a~ailablef~ i~: 
\[ ha~t~ur~f =~ %~x~3quost 
~oa~r = %yetem 
~or?~ = weak 
proposition = 
propoa|tlo~ =
\[ h~tan~of= *w~ut 
propo~itlon = 
\[ h~stance~of = *e~erg~ncyAund 
agent = *ueer 
delay =- *unknown \ ] I l l  
The ,~ombintgio~ of the tokems %ur/aee.~cqge~ a~d 
'~in/o~c~.r~/produc?~ a Wh-questiono The question 
focut~ on the delay of the token *emercency~und 
~di,~r,d by ~he special object %akno~: ~his 
tr~ffm~m the ~IverbiM of delay of the ~trncture 
~th~ ~n~rgeney fund is available ~t dd d~y~ into 
gh~ ~po~nd ~nt~rrogative pronoun ~der  t~lmft 
d~l~, ~h~ ~t~_~c~ga~ive pronoun b~ moved to th~ 
b~g~,~ing ~' th~ ~ntence, coming from the n~ted 
ae~c~ fu~ a~a~bl~ f. As the verb of the e la~ 
?gpr~:a~ing the token %mtrf/sgty..fu~gd is ~o ge, the 
co.traction adopted for the direct object of the 
verb ~#s~t is NAd~: th~ verb ?0 h~ is removed. The 
p~s~,ive your is synthesised from the slot a~en~ 
of th~ token %m~rqenc~/.~endo 
   ronoun handling par o 
and generatio  
~th~ ? ~guh~ic ~brmation ~ needed for reference 
x~so\]utlOno The ehsracteristic~ stored for each to- 
ken are the tm~t ~mnber within the dialogue (~ 
turn ie over whenever one of the two locutors ha~ 
fiuished speaking), the sentence number within the 
tm~n~ the locutor (during pa~sing, the locutor is 
the ~mer, where~ during gen~ation, ~t is the sys- 
tem), the type of the token (entity or relation)~ and 
the linguistic ?xpregsion (noun phrase, pronoun, 
demormtrative pronoun, clause). 
The Token History i~ updated by three proce~se~: 
the parsing module, the application (here the gs- 
team-316 Dislogue Manager) ~nd the generation 
~odnle? Of comae, it i~ vexy hnporg~nt for the 
Di~log~e Mauager that if one token h produced by 
the parsing of one sentence, then the geueratlon 
module would synthesi~ the s~ne sentence from 
the same token. 
After analysis of the user~ sentence, the History is 
updated with the tokens of the sentence, which are 
all fn~t com~idered as new. The Dialogue Manager 
receives the new tokens~ sometimea with ~ list of 
former tokens to which a given new one mW refer: 
a typical ease i~ when a pronoun/~ found in the 
u~r~ sentence; th~n the parser h~ to rc~olv~ ref 
erences on morpholo~c~ syntactic ~md semantic 
gronnds~ in order to prepare the dialcger~s prag- 
matic inference. It i~ the Di~ogue Man~.ger whir.h 
is in charge of defining the final sta~as of e~.ch new 
token through pragmatic inferences: 
when it corresponds to a pronoun, the toke~ 
to which it refer8 
otherwise, whether it ~ a redefinition of 
token previously used, or a totally new one. 
If a sentence generation ~ueceeds, the generation 
module updates the History with the linguistic ~n~ 
formation of the synthesised tokens. 
4o~ ~ro~oun ~ynthes is  
~ro~ou~ handling requires the r~cord~ag of ~l gh~ 
~;~n~:~eI~g ~?~c~ (tokens)? A token may be an 
en~y (e.g. aa instance of the concept %at) or 
g x'~s~io~ b~tw~en e~t ies  (e.g. an instance d 
yo~ made ~ ~on~ i~es~meW~o~ thetokens are the 
wrong inv~tm~nt~), ~ud also the relation intro- 
du?,~d by Otag (?Tou made zt wrong investments), 
~nd the r?lation cmg'esponding to the whole ~n- 
Du~i~g  d~bgu% the system record8 the~e token~ 
~ g ~b~e~ llistory. Besides the token~ themselves, 
The generation grammar checks wheth~.r each item 
to be generated may be ~ynthesised by ~ pronoun? 
The first step is to choose the appropriate prono~tno 
*J~he second step consists of verifying that the cho~ 
son pronoun will not be ambiguous for the u~er 
according to the History of Token~0 
The computing of the morphological for~ of th~ 
pronoun and the checking of ambiguity ~re very 
complex and require the handling of ~emantic, nyw 
tactic and morphological constraints? For precise 
explanations and comparison with other ~tudies, 
see \[Danlos 88\]. 
363 
5 Evaluat ion of SAGE and its 
generat ion Module 
The parsing and generation grammar formalism 
are intended to support a changing from English 
to French. For instance, both the order of syn- 
thesis of the syntactic omponents of a clause or a 
noun phrase and the pronoun synthesis control are 
specified eclaxatively. This allows the reusability 
and adaptability of this Natural Language Fron. 
tend through the creation of an adapted seman- 
tic dictionary and the extension of grammars, pro- 
vided that the application is able to make infer- 
ences on semantic, or even pragmatical levels (which 
is the case of Eeteam-316 Dialogue Manager). 
SAGE runs on Sun workstations. It is able to parse 
complex assertions (I want to buy a car in rise 
years.), Yes/No questions (Could I put 500 dol- 
lars into my emergency-fund~), and ar.knowlege- 
men~ expressions ( Yes. No. OK.~. 
rt c~m synthesise complex assertions with infini- 
tive clauses and adverbials, imperative sentences, 
Yes/No-questions, and Wh-questlons. The inter- 
rogative pronouns of Wh-questions may stem ei- 
ther from the main clause (as in What do you buyf) 
or from nested clauses (as in How much do you 
want to investf). As far as we know in the genera- 
tion realm, it seems that the most similar work is 
the synthesis system PHRED citejacobs. Sentence 
production in PHRED is a. recursive process di- 
vided into three phases: 1) pattern-concept fe ch- 
Lug, 2) pattern restriction, and 3) pattern interpre- 
tation. Their objectives axe similar to 1) the choice 
of a linguistic definition, 2) the verification of se- 
mantic distribution and the application of a lexical 
code on the Syntactic Component, 3) the genera- 
tion of the syntact sub-components. Other studies 
(Danlos, McKeown, Appelt) are more related to 
the strategies for text production than to sentence 
generation heuristics. 
It can also synthesise complex assertions with in- 
finitive clauses and adverbials, imperative sentences, 
Yes/No-questions, and Wh-questions. The inter- 
rogative pronouns of Wh-questions may stem ei- 
ther from the main clause (as in What do you buyf} 
or from nested clauses (as in How much do you 
t~ant o investf). 
Pronoun handling is currently developed. 
\[Danlos 88\] Laurence Danlos, Fiammetta Namer, 
Morphological and cross dependencies in the 
synthesis of personal pronouns in Romance lan- 
guages, Coling'88. 
\[Danlos 87a\] Laurence Danlos, A French and En- 
glish Syntactic Gomponent for Generation, Nat- 
ural Language Generation: New R.ssults in Ar- 
tificial Intelligence, Psychology and Linguis- 
tics, Kempen G. ed, Dortrecht/Boston, Mart- 
inus Nijhoff Publishers, 1987. 
\[Danlos 87b\] Laurence Danlos, The linguistic ba- 
sis of text generation, Cambridge University 
Press. 
\[Decitre 87\] Paul Decitre, Thomas Grossi, C16o Jul- 
lien, Jean-Philippe Solwy, Planning for Pro- 
blem-Solving in Advice-Gluing Dialogue, ACL 
European Chapter, Copenhague, 1987. 
\[Gross 86\] Maurice Grogs, Lexicon-Grammar, The 
Representation of Compound Words, l l th In- 
ternational Conference on Computational Lin- 
guistics, Proceedings, Coling'86, 1986. 
\[Gross 75\] Maurice Gross, M~thodea en syntaze, 
R~gime des constructions compl~tlees, Hermann, 
1975. 
\[Jacobs 85\] Paul S. Jacobs, PHRED: A Genera- 
tor for Natural Language Interfaces, Compu- 
tational Linguistics, Vol. 11, No 4, 1985. 
\[Kay 81\] Martin KAY, Unification Grammars, Xe- 
rox Publication, 1981. 
(Lancel 86\] Jean-Maxis Lancel, FranCois Rousselot, 
Nathalie Simonin, A Grammar used for Par- 
sing and Generation, l l th International Con- 
ference on Computational Linguistics, Proceed- 
ings, Coling'86, 1986. 
\[Longman 81\] Longman Dictionary of Contempo- 
rary English, Longman Group Limited, 1978, 
Corrections 1981. 
\[Simonin 87\] Nathalie Simonin, An Approach of Creo 
sting Structured Text, First European Work- 
shop on Natural Laaguage Generation, Roy- 
anmont Abbey, 1987. 
References 
\[Bruffaerts 86\] Bruffaerts A., Henin E. and Mar- 
lair V., An Expert System Prototype for Finan- 
cial Counseling, Research Report 507, Philips 
Reseaxch Laboratory Brussels, 1986. 
364 
