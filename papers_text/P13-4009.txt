Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 49?54,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
FudanNLP: A Toolkit for Chinese Natural Language Processing
Xipeng Qiu, Qi Zhang, Xuanjing Huang
Fudan University, 825 Zhangheng Road, Shanghai, China
xpqiu@fudan.edu.cn, qz@fudan.edu.cn, xjhuang@fudan.edu.cn
Abstract
The growing need for Chinese natural
language processing (NLP) is largely
in a range of research and commer-
cial applications. However, most of
the currently Chinese NLP tools or
components still have a wide range
of issues need to be further improved
and developed. FudanNLP is an open
source toolkit for Chinese natural lan-
guage processing (NLP), which uses
statistics-based and rule-based meth-
ods to deal with Chinese NLP tasks,
such as word segmentation, part-of-
speech tagging, named entity recogni-
tion, dependency parsing, time phrase
recognition, anaphora resolution and so
on.
1 Introduction
Chinese is one of the most widely used lan-
guages in this world, and the proportion that
Chinese language holds on the Internet is also
quite high. Under the current circumstances,
there are greater and greater demands for in-
telligent processing and analyzing of the Chi-
nese texts.
Similar to English, the main tasks in Chi-
nese NLP include word segmentation (CWS),
part-of-speech (POS) tagging, named en-
tity recognition (NER), syntactic parsing,
anaphora resolution (AR), and so on. Al-
though the general ways are essentially the
same for English and Chinese, the implemen-
tation details are different. It is also non-
trivial to optimize these methods for Chinese
NLP tasks.
There are also some toolkits to be used
for NLP, such as Stanford CoreNLP1, Apache
OpenNLP2, Curator3 and NLTK4. But these
toolkits are developed mainly for English and
not optimized for Chinese.
In order to customize an optimized system
for Chinese language process, we implement
an open source toolkit, FudanNLP5, which is
written in Java. Since most of the state-of-the-
art methods for NLP are based on statistical
learning, the whole framework of our toolkit
is established around statistics-based meth-
ods, supplemented by some rule-based meth-
ods. Therefore, the quality of training data
is crucial for our toolkit. However, we find
that there are some drawbacks in currently
most commonly used corpora, such as CTB
(Xia, 2000) and CoNLL (Haji? et al, 2009)
corpora. For example, in CTB corpus, the set
of POS tags is relative small and some cate-
gories are derived from the perspective of En-
glish grammar. And in CoNLL corpus, the
head words are often interrogative particles
and punctuations, which are unidiomatic in
Chinese. These drawbacks bring more chal-
lenges to further analyses, such as informa-
tion extraction and semantic understanding.
Therefore, we first construct a corpus with
a modified guideline, which is more in ac-
cordance with the common understanding for
Chinese grammar.
In addition to the basic Chinese NLP tasks
1http://nlp.stanford.edu/software/corenlp.
shtml
2http://incubator.apache.org/opennlp/
3http://cogcomp.cs.illinois.edu/page/
software_view/Curator
4http://www.nltk.org/
5http://fudannlp.googlecode.com
49
Figure 1: System Structure of FudanNLP
mentioned above, the toolkit also provides
many minor functions, such as text classifi-
cation, dependency tree kernel, tree pattern-
based information extraction, keywords ex-
traction, translation between simplified and
traditional Chinese, and so on.
Currently, our toolkit has been used by
many universities and companies for various
applications, such as the dialogue system, so-
cial computing, recommendation system and
vertical search.
The rest of the demonstration is organized
as follows. We first briefly describe our system
and its main components in section 2. Then we
show system performances in section 3. Sec-
tion 4 introduces three ways to use our toolkit.
In section 5, we summarize the paper and give
some directions for our future efforts.
2 System Overview
The components of our system have three
layers of structure: data preprocessing, ma-
chine learning and natural language process-
ing, which is shown in Figure 1. We will in-
troduce these components in detail in the fol-
lowing subsections.
2.1 Data Preprocessing Component
In the natural language processing system,
the original input is always text. However,
the statistical machine learning methods often
deal with data with vector-based representa-
tion. So we firstly need to preprocess the input
texts and transform them to the required for-
mat. Due to the fact that text data is usually
discrete and sparse, the sparse vector struc-
ture is largely used. Similar to Mallet (Mc-
Callum, 2002), we use the pipeline structure
for a flexible transformation of various data.
The pipeline consists of several serial or par-
allel modules. Each module, called ?pipe?, is
aimed at a single and simple function.
For example, when we transform a sentence
into a vector with ?bag-of-words?, the trans-
formation process would involve the following
serial pipes:
1. String2Token Pipe: to transform a string
into word tokens.
2. Token2Index Pipe: to look up the word
alphabet to get the indices of the words.
3. WeightByFrequency Pipe: to calculate
the vector weight for each word accord-
ing to its frequency of occurrence.
With the pipeline structure, the data pre-
processing component has good flexibility, ex-
tensibility and reusability.
2.2 Machine Learning Component
The outputs of NLP are often structured,
so the structured learning is our core module.
Structured learning is the task of assigning a
structured label y to an input x. The label y
can be a discrete variable, a sequence, a tree
or a more complex structure.
To illustrate by a sample x, we define the
feature as ?(x,y). Thus, we can label x with
a score function,
y? = arg max
y
F (w,?(x,y)), (1)
where w is the parameter of function F (?).
The feature vector ?(x,y) consists of lots of
overlapping features, which is the chief benefit
of a discriminative model.
For example, in sequence labeling, both x =
x1, . . . , xL and y = y1, . . . , yL are sequences.
For first-order Markov sequence labeling, the
feature can be denoted as ?k(yi?1, yi,x, i),
where i is the position in the sequence. Then
the score function can be rewritten as
y? = arg max
y
F (
L?
i=1
?
k
wk?k(yi?1, yi,x, i)), (2)
where L is the length of x.
Different algorithms vary in the definition of
F (?) and the corresponding objective function.
50
F (?) is usually defined as a linear or exponen-
tial family function. For example, in condi-
tional random fields (CRFs) (Lafferty et al,
2001), F (?) is defined as:
Pw(y|x) =
1
Zw
exp(wT?(x,y)), (3)
where Zw is the normalization constant such
that it makes the sum of all the terms one.
In FudanNLP, the linear function is univer-
sally used as the objective function. Eq. (1) is
written as:
y? = arg max
y
< w,?(x,y) > . (4)
2.2.1 Training
In the training stage, we use the passive-
aggressive algorithm to learn the model pa-
rameters. Passive-aggressive (PA) algorithm
(Crammer et al, 2006) was proposed for nor-
mal multi-class classification and can be easily
extended to structure learning (Crammer et
al., 2005). Like Perceptron, PA is an online
learning algorithm.
2.2.2 Inference
For consistency with statistical machine
learning, we call the process to calculate the
Eq.(1) as ?inference?. In structured learning,
the number of possible solutions is very huge,
so dynamic programming or approximate ap-
proaches are often used for efficiency. For NLP
tasks, the most popular structure is sequence.
To label the sequence, we use Viterbi dynamic
programming to solve the inference problem in
Eq. (4).
Our system can support any order of Viterbi
decoding. In addition, we also implement a
constrained Viterbi algorithm to reduce the
number of possible solutions by pre-defined
rules. For example, when we know the prob-
able labels, we delete the unreachable states
from state transition matrix. It is very useful
for CWS and POS tagging with sequence la-
beling. When we have a word dictionary or
know the POS for some words, we can get
more accurate results.
2.2.3 Other Algorithms
Apart from the core modules of structured
learning, our system also includes several tra-
ditional machine learning algorithms, such as
Perceptron, Adaboost, kNN, k-means, and so
on.
2.3 Natural Language Processing
Components
Our toolkit provides the basic NLP func-
tions, such as word segmentation, part-of-
speech tagging, named entity recognition, syn-
tactic parsing, temporal phrase recognition,
anaphora resolution, and so on. These func-
tions are trained on our developed corpus. We
also develop a visualization module to display-
ing the output. Table 1 shows the output rep-
resentation of our toolkit.
2.3.1 Chinese Word Segmentation
Different from English, Chinese sentences
are written in a continuous sequence of char-
acters without explicit delimiters such as the
blank space. Since the meanings of most Chi-
nese characters are not complete, words are
the basic syntactic and semantic units. There-
fore, it is indispensable step to segment the
sentence into words in Chinese language pro-
cessing.
We use character-based sequence labeling
(Peng et al, 2004) to find the boundaries of
words. Besides the carefully chosen features,
we also use the meaning of character drawn
from HowNet(Dong and Dong, 2006), which
improves the performance greatly. Since un-
known words detection is still one of main chal-
lenges of Chinese word segmentation. We im-
plement a constrained Viterbi algorithm to al-
low users to add their own word dictionary.
2.3.2 POS tagging
Chinese POS tagging is very different from
that in English. There are no morphological
changes for a word among its different POS
tags. Therefore, most of Chinese words may
have multiple POS tags. For example, there
are different morphologies in English for the
word ??? (destroy)?, such as ?destroyed?,
?destroying? and ?destruction?. But in Chi-
nese, there is just one same form(Xia, 2000).
There are two popular guidelines to tag the
word?s POS: CTB (Xia, 2000) and PKU (Yu
et al, 2001). We take into account both
the weaknesses and the strengths of these two
guidelines, and propose our guideline for bet-
ter subsequent analyses, such as parser and
named entity recognition. For example, the
proper name is labeled as ?NR? in CTB, while
we label it with one of four categories: person,
51
Input:
??????????? 1980 ??
John is from Washington, and he was born in 1980.
Output:
.
.?? .?? .??? .? .? .?? .1980 ? .?
.John .is from .Washington ., .he .was born in .1980 ..
.PER .VV .LOC .PU .PRN .NN .PU
.1 .2 .3 .4 .5 .6 .7 .8
Root
SUB
CS:COO1
OBJ
PUN
SUB OBJ
PUN
NER:
1 ? PER
3 ? LOC
AR:
5 ? 1
TIME:
7 ? 1980
1 CS:COO means the coordinate complex sentence.
Table 1: Example of the output representation of our toolkit
location, organization and other proper name.
Conversely, we merge the ?VC? and ?VE? into
?VV? since there is no link verb in Chinese.
Finally, we use a tag set with 39 categories in
total.
Since a POS tag is assigned to each word,
not to each character, Chinese POS tag-
ging has two ways: pipeline method or joint
method. Currently, the joint method is more
popular and effective because it uses more flex-
ible features and can reduce the error propa-
gation (Ng and Low, 2004). In our system,
we implement both methods for POS tagging.
Besides, we also use some knowledge to im-
prove the performance, such as Chinese sur-
name and the common suffixes of the names
of locations and organizations.
2.3.3 Named Entity Recognition
In Chinese named entity recognition (NER),
there are usually three kinds of named enti-
ties (NEs) to be dealt with: names of per-
sons (PER) , locations (LOC) and organiza-
tions (ORG). Unlike English, there is no obvi-
ous identification for NEs, such as initial capi-
tals. The internal structures are also different
for different kinds of NEs, so it is difficult to
build a unified model for named entity recog-
nition.
Our NER is based on the results of POS
tagging and uses some customize features to
detect NEs. First, the number of NEs is very
large and the new NEs are endlessly emerg-
ing, so it is impossible to store them in dic-
tionary. Since the internal structures are rela-
tively more important, we use language mod-
els to capture the internal structures. Second,
we merge the continuous NEs with some rule-
based strategies. For example, we combine the
continuous words ???/NN???/NN? into
? ?????/LOC?.
2.3.4 Dependency parsing
Our syntactic parser is currently a depen-
dency parser, which is implemented with the
shift-reduce deterministic algorithm based on
the work in (Yamada and Matsumoto, 2003).
The syntactic structure of Chinese is more
complex than that of English, and semantic
meaning is more dominant than syntax in Chi-
nese sentences. So we select the dependency
parser to avoid the minutiae in syntactic con-
stituents and wish to pay more attention to
the subsequent semantic analysis. Since the
structure of the Chinese language is quite dif-
ferent from that of English, we use more effec-
tive features according to the characteristics of
Chinese sentences.
The common used corpus for Chinese de-
pendency parsing is CoNLL corpus (Haji? et
al., 2009). However, there are some illogical
cases in CoNLL corpus. For example, the
head words are often interrogative particles
and punctuations. Our guideline is based on
common understanding for Chinese grammar.
The Chinese syntactic components usually in-
clude subject, predicate, object, attribute, ad-
verbial modifier and complement. Figure 2
and 3 show the differences between the trees of
CoNLL and our Corpus. Table 2 shows some
52
primary dependency relations in our guideline.
..? .? .??? .? .? .? .?.want to .go to .Hehuanshan .to see .the snow . .?
.VV .VV .NR .VV .NN .SP .PU
Root
COMP
ADV
COMP
COMP
COMP UNK
Figure 2: Dependency Tree in CoNLL Corpus
..? .? .??? .? .? .? .?.want to .go to .Hehuanshan .to see .the snow . .?
.MD .VV .LOC .VV .NN .SP .PU
Root
ADV
OBJ
OBJ
OBJ
VOC
PUN
Figure 3: Dependency Tree in Our Corpus
Relations Chinese Definitions
SUB ?? Subject
PRED ?? Predicate
OBJ ?? Object
ATT ?? Attribute
ADV ?? Adverbial Modifier
COMP ?? Complement
SVP ?? Serial Verb Phrases
SUB-OBJ ?? Pivotal Construction
VOC ?? Voice
TEN ?? Tense
PUN ?? Punctuation
Table 2: Some primary dependency relations
2.3.5 Temporal Phrase Recognition
and Normalization
Chinese temporal phrases is more flexible
than English. Firstly, there are two calendars:
Gregorian and lunar calendars. Both of them
are frequently used. Secondly, the forms of
same temporal phrase are various, which often
consists of Chinese characters, Arabic numer-
als and English letters, such as ??? 10 ??
and ?10:00 PM?.
Different from the general process based
on machine learning, we implement the time
phrase recognizer with a rule-based method.
These rules include 376 regular expressions
and nearly a hundred logical judgments.
After recognizing the temporal phrases, we
normalize them with a standard time format.
For a phrase indicating a relative time , such
as ????? and ? ?????, we first find the
base time in the context. If no base time is
found, or there is also no temporal phrase to
indicate the base time (such as ????), we
set the base time to the current system time.
Table 3 gives examples for our temporal phrase
recognition module.
Input:
08 ?????????8 ? 8 ??????????
????????????
The Beijing Olympic Games took place from Au-
gust 8, 2008. Four years later, the London Olympic
Games took place from July 21.
???????? 9 ?????????????
I?m busy today, and have to come off duty after 9:00
PM. And I also have to work this Sunday.
Output:
08 ? (2008) 2008
8 ? 8 ? (August 8) 2008-8-8
?????? (July 21) 2012-7-27
?? (today) 2012-2-221
?? 9 ? (9:00 PM) 2012-2-22 21:00
?? (this Sunday) 2012-2-26
1 The base time is 2012-02-22 10:00AM.
Table 3: Examples for Temporal Phrase
Recognition
2.3.6 Anaphora Resolution
Anaphora resolution is to detect the pro-
nouns and find what they are referring to.
We first find all pronouns and entity names,
then use a classifier to predict whether there
is a relation between each pair of pronoun and
entity name. Table 4 gives examples for our
anaphora resolution module.
Input:
??????? 1167 ?????????????
?????????????
Oxford University is founded in 1167. It is located
in Oxford, UK. The university has nurtured a lot
of good students.
Output:
? (It) ????
???? (The
university)
???? (Oxford University)
Table 4: Examples for Anaphora Resolution
3 System Performances
In this section, we investigate the per-
formances for the six tasks: Chinese word
segmentation (CWS), POS tagging (POS),
53
named entity recognition (NER) and de-
pendency parser(DePar), Temporal Phrase
Recognition (TPR) and Anaphora Resolution
(AR). We use 5-fold cross validation on our
developed corpus. The corpus includes 65, 745
sentences and 959, 846 words. The perfor-
mances are shown in Table 5.
Task Accuracy Speed1 Memory
CWS 97.5% 98.9K 66M
POS 93.4% 44.5K 110M
NER 98.40% 38K 30M
DePar 85.3% 21.1 80M
TPR 95.16% 22.9k 237K
AR 70.3% 35.7K 52K
1 characters per second. Test environment:
CPU 2.67GHz, JRE 7.
Table 5: System Performances
4 Usages
We provide three ways to use our toolkit.
Firstly, our toolkit can be used as library.
Users can call application programming inter-
faces (API) in their own applications.
Secondly, users can also invoke the main
NLP modules to process the inputs (strings
or files) from the command line directly.
Thirdly, the web services are provided
for platform-independent and language-
independent use. We use a REST (Represen-
tational State Transfer) architecture, in which
the web services are viewed as resources and
can be identified by their URLs.
5 Conclusions
In this demonstration, we have described
the system, FudanNLP, which is a Java-based
open source toolkit for Chinese natural lan-
guage processing. In the future, we will add
more functions, such as semantic parsing. Be-
sides, we will also optimize the algorithms and
codes to improve the system performances.
Acknowledgments
We would like to thank all the people6
involved with our FudanNLP project. This
work was funded by NSFC (No.61003091
6https://code.google.com/p/fudannlp/wiki/
People
and No.61073069) and 973 Program
(No.2010CB327900).
References
K. Crammer, R. McDonald, and F. Pereira. 2005.
Scalable large-margin online learning for struc-
tured classification. In NIPS Workshop on
Learning With Structured Outputs. Citeseer.
Koby Crammer, Ofer Dekel, Joseph Keshet, Shai
Shalev-Shwartz, and Yoram Singer. 2006. On-
line passive-aggressive algorithms. Journal of
Machine Learning Research, 7:551?585.
Z. Dong and Q. Dong. 2006. Hownet And the
Computation of Meaning. World Scientific Pub-
lishing Co., Inc. River Edge, NJ, USA.
J. Haji?, M. Ciaramita, R. Johansson, D. Kawa-
hara, M.A. Mart?, L. M?rquez, A. Meyers,
J. Nivre, S. Pad?, J. ?t?p?nek, et al 2009. The
CoNLL-2009 shared task: Syntactic and seman-
tic dependencies in multiple languages. In Pro-
ceedings of the Thirteenth Conference on Com-
putational Natural Language Learning: Shared
Task, pages 1?18. Association for Computa-
tional Linguistics.
John D. Lafferty, Andrew McCallum, and Fer-
nando C. N. Pereira. 2001. Conditional ran-
dom fields: Probabilistic models for segmenting
and labeling sequence data. In Proceedings of
the Eighteenth International Conference on Ma-
chine Learning.
Andrew Kachites McCallum. 2002. Mal-
let: A machine learning for language toolkit.
http://mallet.cs.umass.edu.
H.T. Ng and J.K. Low. 2004. Chinese part-
of-speech tagging: one-at-a-time or all-at-once?
word-based or character-based. In Proceedings
of EMNLP, volume 4.
F. Peng, F. Feng, and A. McCallum. 2004. Chi-
nese segmentation and new word detection us-
ing conditional random fields. Proceedings of the
20th international conference on Computational
Linguistics.
F. Xia, 2000. The part-of-speech tagging guidelines
for the penn chinese treebank (3.0).
H. Yamada and Y. Matsumoto. 2003. Statis-
tical dependency analysis with support vector
machines. In Proceedings of the International
Workshop on Parsing Technologies (IWPT),
volume 3.
S. Yu, J. Lu, X. Zhu, H. Duan, S. Kang, H. Sun,
H. Wang, Q. Zhao, and W. Zhan. 2001. Process-
ing norms of modern chinese corpus. Technical
report, Technical report.
54
