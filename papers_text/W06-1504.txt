Proceedings of the 8th International Workshop on Tree Adjoining Grammar and Related Formalisms, pages 25?32,
Sydney, July 2006. c?2006 Association for Computational Linguistics
The weak generative capacity of linear tree-adjoining grammars
David Chiang?
Information Sciences Institute
University of Southern California
4676 Admiralty Way, Suite 1001
Marina del Rey, CA 90292, USA
chiang@isi.edu
1 Introduction
Linear tree-adjoining grammars (TAGs), by anal-
ogy with linear context-free grammars, are tree-
adjoining grammars in which at most one sym-
bol in each elementary tree can be rewritten (ad-
joined or substituted at). Uemura et al (1999),
calling these grammars simple linear TAGs (SL-
TAGs), show that they generate a class of lan-
guages incommensurate with the context-free lan-
guages, and can be recognized in O(n4) time.
Working within the application domain of mod-
eling of RNA secondary structures, they find
that SL-TAGs are too restrictive?they can model
RNA pseudoknots but because they cannot gen-
erate all the context-free languages, they cannot
model even some very simple RNA secondary
structures. Therefore they propose a more power-
ful version of linear TAGs, extended simple linear
TAGs (ESL-TAGs), which generate a class of lan-
guages that include the context-free languages and
can be recognized in O(n5) time.
Satta and Schuler (1998), working within the
application domain of natural language syntax, de-
fine another restriction on TAG which is also rec-
ognizable in O(n5) time. Despite being less pow-
erful than full TAG, it is still able to generate lan-
guages like the copy language {ww} and Dutch
cross-serial dependencies (Joshi, 1985). Kato et
al. (2004) conjecture that this restricted TAG is in
fact equivalent to ESL-TAG.
In this paper we prove their conjecture, and also
prove that adding substitution to ESL-TAG does
not increase its weak generative capacity, whereas
adding substitution to SL-TAG makes it weakly
equivalent to ESL-TAG. Thus these four for-
?This research was primarily carried out while the author
was at the University of Pennsylvania.
malisms converge to the same weak-equivalence
class, the intuition being that the ?hardest? oper-
ation in TAG, namely, adjunction of a wrapping
auxiliary tree in the middle of the spine of an-
other wrapping auxiliary tree, is subjected to the
linearity constraint, but most other operations are
unrestricted.1 Kato et al (2004) show that these
formalisms are more powerful than SL-TAG or
general CFG or their union and conjecture, on the
other hand, that they are less powerful than TAG.
We prove this conjecture as well.
2 Definitions
We assume a standard definition of TAG, with or
without substitution, in which adjunction is not al-
lowed at foot nodes, and other nodes can have no-
adjunction (NA) constraints, obligatory-adjunction
(OA), or selective-adjunction constraints. We use
the symbols ?, ?1, ?2, etc. to range over nodes ofelementary trees or derived trees, although some-
times we use the label of a node to refer to the
node itself. The spine of an auxiliary tree is the
path from its root node to its foot node, inclusive.
The subtree of a node ? is the set of all nodes
dominated by ?, including ? itself. The segment
of a tree from ?1 to ?2 (where ?1 dominates ?2)is the set of all nodes in the subtree of ?1 but notin the subtree of ?2. A segment can be excised,which means removing the nodes of the segment
and making ?2 replace ?1 as the child of its parent.
We also assume a standard definition of TAG
derivation trees. We use the symbols h, h1, h2, etc.to range over nodes of derivation trees. The sub-
1Adjunction at root and foot nodes is another operation
that by itself will not take a formalism beyond context-free
power, a fact which is exploited in Rogers? regular-form TAG
(Rogers, 1994). But allowing this in a linear TAG would cir-
cumvent the linearity constraint.
25
derivation of h is the subtree of h in the deriva-
tion tree. When we cut up derivations into sub-
derivations or segments and recombine them, the
edge labels (indicating addresses of adjunctions
and substitutions) stay with the node above, not
the node below.
Now we define various versions of linear TAG.
Definition 1. A right (left) auxiliary tree is one in
which the leftmost (rightmost) frontier node is the
foot node, and the spine contains only the root and
foot nodes. A wrapping auxiliary tree is one which
is neither a left or a right auxiliary tree.
Definition 2. We say that a node of an elementary
tree is active if adjunction is allowed to occur at
it, and that a node is w-active if adjunction of a
wrapping auxiliary tree is allowed to occur at it.
Definition 3. A Satta-Schuler linear tree-
adjoining grammar (SSL-TAG) is a TAG with
substitution in which:
1. In the spine of each wrapping auxiliary tree,
there is at most one w-active node.
2. In the spine of each left or right auxiliary tree,
there are no w-active nodes, nor are there any
other adjoining constraints.
Definition 4. A simple linear tree-adjoining
grammar (SL-TAG), with or without substitution,
is a TAG, with or without substitution, respec-
tively, in which every initial tree has exactly one
active node, and every auxiliary tree has exactly
one active node on its spine and no active nodes
elsewhere.
Definition 5. An extended simple linear tree-
adjoining grammar (ESL-TAG), with or without
substitution, is a TAG, with or without substitu-
tion, respectively, in which every initial tree has
exactly one active node, and every auxiliary tree
has exactly one active node on its spine and at
most one active node elsewhere.
3 Properties
We now review several old results and prove a few
new results relating the weak generative capacity
of these formalisms to one another and to (linear)
CFG and TAG. These results are summarized in
Figure 1.
3.1 Previous results
Proposition 1 (Uemura et al 1999).
Linear CFL ( SL-TAL
Linear CFL
SL-TAL CFL
SL-TAL ? CFL
SSL-TAL = ESL-TAL = (E)SL-TAL + subst
TAL
Figure 1: Summary of results: an edge indicates
that the higher formalism has strictly greater weak
generative capacity than the lower.
Proposition 2 (Uemura et al 1999).
CFL ( ESL-TAL
Proposition 3 (Kato et al 2004).
CFL ? SL-TAL ( ESL-TAL
Proposition 4 (Satta and Schuler 1998; Ue-
mura et al 1999). SSL-TAG and ESL-TAG can
be parsed in O(n5) time.
3.2 Weak equivalence
Proposition 5. The following formalisms are
weakly equivalent:
(i) ESL-TAG
(ii) SL-TAG with substitution
(iii) ESL-TAG with substitution
(iv) SSL-TAG
Proof. We prove this by proving four inclusions.
L(ESL-TAG) ? L(ESL-TAG + substitution):
Trivial.
L(ESL-TAG + substitution) ? L(SSL-TAG):
Trivial.
L(SSL-TAG) ? L(SL-TAG + substitution): We
deal first with the left and right auxiliary trees, and
then with off-spine adjunction.
First, we eliminate the left and right auxiliary
trees. Since these only insert material to the left or
right of a node, just as in tree-insertion grammars
(TIGs), we may apply the conversion from TIGs to
tree-substitution grammars (Schabes and Waters,
1995), used in the proof of the context-freeness of
26
(Step 1a)
...
X...
?
...
X...
...
XNA
LX? XNA...
...
XNA
XNA...
RX?
...
XNA
LX? XNA...
RX?
(Step 1b)
X
X? Y ?
RX
Y
RX
Y RX?
X
Y X? ?
LX
Y
LX
LX? Y
Figure 2: Elimination of left/right auxiliary trees.
TIG.2 (Step 1a) For each active node X that is not
the root of a left or right auxiliary tree, we create
four copies of the containing elementary tree with
X altered in the following ways: first, leave X un-
changed; then, add a copy of X above it, making
both nodes no-adjunction nodes, and add a new
left sister substitution node labeled LX or a newright sister substitution node labeled RX , or both.See Figure 2. (Step 1b) For each ? that was origi-
nally a left (right) auxiliary tree with root/foot la-
bel X , relabel the root node as LX (RX ) and deletethe foot node, and create two copies of the contain-
ing elementary tree, one unchanged, and one with
a new left (right) sister substitution node. See Fig-
ure 2. When the modified ? substitutes at one of
the new children of an ?, the substitution clearly
results in the same string that would have resulted
from adjoining the original ? to ?.
This construction might appear incorrect in two
ways. First, the new grammar has trees with both
an LX and an RX node corresponding to the sameoriginal node, which would correspond to adjunc-
tion of two auxiliary trees ?L and ?R at the samenode X in the original grammar. But this new
derivation generates a string that was generable in
the original grammar, namely by adjoining ?L at
2This corresponds to Steps 1?4 of that proof (Schabes and
Waters, 1995, p. 486). Since that proof uses a more relaxed
definition of left and right auxiliary trees, it is probable that
SSL-TAG could also be relaxed in the same way.
X , then adjoining ?R at the root of ?L, which isallowed because the definition of SSL-TAG pro-
hibits adjunction constraints at the root of ?L.
Thus the first apparent problem is really the so-
lution to the second problem: in the original gram-
mar, a left auxiliary tree ?L could adjoin at the rootof a right auxiliary tree ?R, which in turn adjoinedat a node ?, whereas in the new grammar, ?R doesnot have an LX substitution node to allow this pos-sibility. But the same string can be generated by
substituting both trees under ? in the new gram-
mar. In the case of a whole chain of adjunctions
of left/right auxiliary trees at the root of left/right
auxiliary trees, we can generate the same string by
rearranging the chain into a chain of left auxiliary
trees and a chain of right auxiliary trees (which is
allowed because adjunction constraints are prohib-
ited at all the roots), and substituting both at ?.
(Step 2) Next, we eliminate the case of a wrap-
ping auxiliary tree ? that can adjoin at an off-spine
node ?. (Step 2a) For each active off-spine node ?,
we relabel ? with a unique identifier ?? and split the
containing elementary tree at ?:
...
??...
?
...
T???
B??...
27
(Step 2b) After step 2a has been completed for all
nodes ?, we revisit each ?, and for every wrapping
? that could adjoin at ?, create a copy of ? with
root relabeled to T?? and foot relabeled to B?? .
X
X?
?
T??
B???
Then the original ? is discarded. Substituting one
of these copies of ? at a T?? node and then sub-stituting a B?? tree at the former foot node has thesame effect as adjoining ? at ?. Finally, unless ?
had an obligatory-adjunction constraint, simulate
the lack of adjunction at ? by adding the initial
tree
T??
B???
L(SL-TAG + substitution) ? L(ESL-TAG): This
construction is related to Lang?s normal form
which ensures binary-branching derivation trees
(Lang, 1994), but guarantees that one adjunction
site is on the spine and one is off the spine.
(Step 0a) Ensure that the elementary trees are
binary-branching. (Step 0b) Add a new root and
foot node to every elementary tree:
X
?
XNA
X
X
X?
?
XNA
X
XNA
X?
(Step 1) We transform the grammar so that no
auxiliary tree has more than one substitution node.
For any auxiliary tree with spine longer than four
nodes, we apply the following transformation: tar-
get either the active node or its parent, and call
it Y . Let Z1 be the child that dominates the footnode; let V1 be a fresh nonterminal symbol andinsert V1 nodes above Y and below Z1, and ex-cise the segment between the two V nodes, leav-
ing behind an active obligatory-adjunction node.
If Y has another child, call it Z2; let V2 be a freshnonterminal symbol and insert a V2 node above
Z2, and break off the subtree rooted in V2, leav-ing behind a substitution node. See Figure 3. This
transformation reduces the spine of the auxiliary
tree by one node, and creates two new trees that
satisfy the desired form. We repeat this until the
entire grammar is in the desired form.
(Step 2) Next, we transform the grammar so
that no initial tree has more than one substitution
node, while maintaining the form acquired in step
1. For any initial tree with height greater than three
nodes, we apply the same transformation as in step
1, except that Y is the child of the root node, Z1is its left child, and Z2 is its other child if it ex-ists and is not already a substitution node. See Fig-
ure 3. This transformation replaces an initial tree
with at most two shorter initial trees, and one aux-
iliary tree in the desired form. Again we repeat this
until the entire grammar is in the desired form.
(Step 3) Finally, we convert each substitution
node into an adjunction node (Schabes, 1990). For
each substitution node ?, let X be the label of ?.
Relabel ? to SX with obligatory adjunction andplace an empty terminal beneath ?.
...
X?
?
...
SX OA
?
For each initial tree with root label X , convert it
into an auxiliary tree by adding a new root node
labeled SX whose children are the old root nodeand a new foot node.
X
?
SX NA
X SX?
3.3 Relation to tree-adjoining languages
Our second result, also conjectured by Kato et
al., is that the weak equivalence class established
above is a proper subset of TAL.
Proposition 6. The language
L = {ar1bp1b
p
2c
q
1c
q
2ar2ar3c
q
3c
q
4b
p
3b
p
4ar4}
is in TAL but not ESL-TAL.
28
(Step 1)
X...
Y
Z1...
X?
Z2NA...
?
X...
V1
Y
Z1
V1...
X?
V2
Z2NA...
?
X...
V1OA...
X?
V1NA
Y
Z1
V1?
V2?
V2
Z2NA...
(Step 2)
X
Y
Z1...
Z2...
?
X
V1
Y
Z1
V1...
V2
Z2...
?
X
V1OA...
V1NA
Y
Z1
V1?
V2?
V2
Z2...
Figure 3: Separation of substitution nodes. Some adjunction constraints are omitted to avoid clutter.
Proof (L ? TAL). The language is generated by
the following TAG:
X
?
XNA
a1 X
a2 X? a3
a4
XNA
Y
Z
X?
YNA
b1 Y
b2 Y? b3
b4
ZNA
c1 Z
c2 Z? c3
c4
Before proceeding to the other half of the proof,
we define a few useful notions. A marked string
(as in Ogden?s Lemma) over an alphabet ? is a
string over ? ? {0, 1}, where a symbol ??, 1? is
marked and a symbol ??, 0? is not. Marked strings
over ? can be projected into ?? in the obvious way
and we will talk about marked strings and their
projections interchangeably.
A decomposed string over ? is a sequence
of strings over ?, which can be projected into
?? by concatenating their members in order, and
again we will talk about decomposed strings and
their projections interchangeably. In particular,
we will often simply write a decomposed string
?w1, . . . , wn? as w1 ? ? ?wn. Moreover, we may usethe symbol wi to refer to the occurrence of the ithmember of the decomposition in w; for example, if
w is a marked string, we may say that a symbol in
wi is marked, or if w is generated by a TAG deriva-tion, we may say that wi is generated by some setof nodes in the derivation tree.
The second half of the proof requires a double-
decker pumping lemma.
Condition 1 (cf. Vijay-Shanker (1987), Theo-
rem 4.7). Given a language L and a decom-
posed string x1zx2 ? L with some symbols in
z marked, there exists a decomposition of z into
u1v1w1v2u2v3w2v4u3 such that one of the vi con-tains a mark, and L contains, for all k ? 1,
x1(u1vk1w1vk2u2vk3w2vk4u3)x2
Condition 2 (cf. Uemura et al (1999), Lemma
29
1). Given a language L and a decomposed string
x1z1z2x2z3z4x3 ? L with some symbols in one ofthe zi marked, there exist decompositions of the ziinto uiviwi such that one of the vi contains a mark,and L contains, for all k ? 1,
x1(u1vk1w1)(u2vk2w2)x2(u3vk3w3)(u4vk4w4)x3
Lemma 7. If L is an ESL-TAL, then there exists
a constant n such that for any z ? L with n sym-
bols marked, Condition 1 holds of ? ? z ? ?. More-
over, it holds such that the w1 and w2 it provides
can be further decomposed into z1z2 and z3z4, re-
spectively, such that for any marking of n sym-
bols of any of the zj , either Condition 1 holds
of z = x1zjx2 (where x1 and x2 are the sur-
rounding context of zj) or Condition 2 holds of
z = x1z1z2x2z3z4x3 (where x1, x2, and x3 are
the surrounding context of z1z2 and z3z4).
Proof. Since L is an ESL-TAL, it is generated by
some ESL-TAG G. Let k be the number of ele-
mentary trees in G and t be the maximum number
of terminal symbols in any elementary tree of G.
Then set n = 2k+1t.
The first invocation of Condition 1 is the TAG
version of Ogden?s lemma (Hopcroft and Ullman,
1979). To show that it holds, we need to find a
path P in the derivation tree of z that has a cy-
cle that generates at least one marked symbol. De-
fine a branch point to be a node h in the derivation
tree such that the marked nodes generated by the
subderivation of h are not all generated by the sub-
derivation of a single child of h. We seek a P that
has at least k + 1 branch points. Start by adding
the root of the derivation tree to P . Thereafter let
h be the last node in P . If h is a leaf, stop; other-
wise, add to P the child of h whose subderivation
generates the most marked symbols. Note that if
a branch point in P generates m marked symbols,
the next branch point generates at least m?t2 . Ourchoice of n then guarantees that P has at least k+1
branch points, at least two of which must corre-
spond to the same auxiliary tree. Call these nodes
h1 and h2.These two nodes divide the derivation up into
three phases: first, the derivation segment from the
root to h1, which we call ? (because it can bethought of as the derived initial tree it generates);
then the segment from h1 to h2, which we call ?1(because it can be thought of as the derived aux-
iliary tree it generates); then subderivation of h2,
which we call ?2. Note that we can form new validderivations of G by repeating ?2: that is, in termsof derivation trees, stacking ? on top of one or
more copies of ?1, on top of ?2?or in terms ofderived trees, repeatedly adjoining ?1 into ? andthen adjoining ?2.
If ?2 adjoins into the spine of ?1, then let
?u1, u2, u3? be the parts of z generated by ?,
?v1, v2, v3, v4? the parts generated by ?1, and
?w1, w2? the parts generated by ?2 (see Figure 4a).Then these new derivations generate the strings
u1vk1w1vk2u2vk3w2vk4u3.
But if ?2 adjoins at a node to the left of the spineof ?1, then let ?u1, v42, u3? be the parts of the zgenerated by ?, ?v1, u2, v41, v43? the parts gener-ated by ?1, and ?w1, w2? the parts generated by
?2 (see Figure 4b). Then let v2 = v3 = ? and
v4 = v41v42v43; the new derivations will gener-ate the strings u1vk1w1vk2u2vk3w2vk4u3. The casewhere ?2 adjoins to the right of the spine.
Now we focus attention on ?2. Let S be thelongest path of the derivation of ?2 containingthe root of the derivation and auxiliary trees ad-
joined at spine nodes. This S is unique because
each spine can only have one active node. Let h3be the last node in S, which divides the deriva-
tion of ?2 into two phases: the segment from theroot to h3, which we call ?21, and the subderiva-tion of h3, which we call ?22. This gives a decom-position ?w1, w2? = ?z1z21z22, z31z32z4?, where
?22 generates z21 and z32 (see Figure 5). Notethat the derivation nodes in S are the only ones
that can generate symbols in z1, z22, z31, and z4at once; the other derivation nodes only gener-
ate symbols in a single zi. We let z2 = z21z22and z3 = z31z32 and hand off the decomposition
?w1, w2? = ?z1z2, z3z4? to our adversary, whomay choose a zj and mark n symbols in it.
Then we recapitulate the reasoning above to get
a path P ? starting from the root of the deriva-
tion of ?2 and containing at least k + 1 branchpoints, two of which correspond to the same aux-
iliary tree. Call these nodes h4 and h5 and the seg-ment between them ?3, and let ?v1, v2, v3, v4? nowstand for the parts of ?w1, w2? generated by ?3.Once again, we are going to repeat ?3 to gener-ate new derivations, pumping copies of the vi into
?w1, w2?. But the location of the vi depends on h5:if h5 is in S, then the vi will appear inside each ofthe zi, satisfying Condition 2. Otherwise, they willall appear inside zj .
30
(a)
?
?1
?2
?1
?
u1 v1 w1 v2 u2 v3 w2 v4 u3
(b)
?
?1
?2
??1
u1 v1 w1 v2 w2 v41 v42 v43 u3
Figure 4: Anatomy of derived tree in proof of Lemma 7.
?21
?22
?21
?
z1 z21 z22 z31 z32 z4
Figure 5: Anatomy of ?2 in proof of Lemma 7.
31
Finally we complete the proof of Proposition 6.
Proof of Proposition 6 (L /? ESL-TAL). Suppose
L is an ESL-TAL. Let z be the string obtained by
setting p = q = r = n, and mark the a1s. ThenLemma 7 must hold. The first invocation of Con-
dition 1 must give a w1 of the form a?1bn1 bn2 cn1 cn2a?2and a w2 of the form a?3cn3 cn4 bn3 bn4a?4. Lemma 7must further decompose w1 into z1z2. Obviously,either z1 contains all the bjs or z2 contains allthe cjs. Supposing the former, we can obtain acontradiction by marking the b1s: Condition 2is impossible because it would give unequal
numbers of b1s and b2s; Condition 1 is impossiblebecause it would give unequal numbers of b1s and
b3s. On the other hand, if z2 contains all the cjs,we mark the c1s, and both Conditions are againrendered impossible.
4 Conclusion
The weak equivalence of the previously proposed
ESL-TAG and SSL-TAG, along with the fact that
SL-TAG with substitution and ESL-TAG with
substitution belong to the same class, suggests
that they represent a useful compromise between
CFGs and TAGs. In the two-dimensional language
hierarchy of Rambow and Satta (1999), where the
two dimensions are rank (how many substructures
does a rule combine) and fanout (how many dis-
continuous spans of the input does a substructure
cover), CFGs comprise the fanout-1 grammars and
TAGs are a subset of the the fanout-2 grammars;
both have arbitrary rank, whereas linear CFGs
and linear TAGs are rank-1. The grammars dis-
cussed here are mixed: a rule can combine one
fanout-2 substructure and an arbitrary number of
fanout-1 substructures. A related example would
be a version of synchronous CFG that allows only
one pair of linked nonterminals and any number
of unlinked nonterminals, which could be bitext-
parsed in O(n5) time, whereas inversion transduc-
tion grammar (Wu, 1997) takes O(n6). It may be
of interest to make a more general exploration of
other formalisms that are mixed in this sense.
Acknowledgements
Thanks to Hiroyuki Seki for discussions that led to
this paper, and to Anoop Sarkar, Giorgio Satta, and
William Schuler. This research was partially sup-
ported by NSF grant ITR EIA-02-05456. S. D. G.
References
John E. Hopcroft and Jeffrey D. Ullman. 1979. Intro-
duction to Automata Theory, Languages, and Com-
putation. Addison-Wesley, Reading, MA.
Aravind K. Joshi. 1985. Tree adjoining grammars:How much context-sensitivity is necessary for as-signing structural descriptions? In David Dowty,
Lauri Karttunen, and Arnold Zwicky, editors, Nat-
ural Language Parsing, pages 206?250. CambridgeUniversity Press, Cambridge.
Yuki Kato, Hiroyuki Seki, and Tadao Kasami. 2004.
Subclasses of tree adjoining grammar for RNA sec-ondary structure. In Proc. Seventh International
Workshop on TAG and Related Formalisms (TAG+),
pages 48?55.
Bernard Lang. 1994. Recognition can be harder thanparsing. Computational Intelligence, 10(4):484?494. Special Issue on Tree Adjoining Grammars.
Owen Rambow and Giorgio Satta. 1999. Independent
parallelism in finite copying parallel rewriting sys-tems. Theoretical Computer Science, 223:87?120.
James Rogers. 1994. Capturing CFLs with tree adjoin-ing grammars. In Proc. 32nd Annual Meeting of the
ACL, pages 155?162.
Giorgio Satta and William Schuler. 1998. Restrictionson tree adjoining languages. In Proc. COLING-
ACL, pages 1176?1182.
Yves Schabes and Richard C. Waters. 1995. Treeinsertion grammar: a cubic-time parsable formal-ism that lexicalizes context-free grammar without
changing the trees produced. Computational Lin-
guistics, 21:479?513.
Yves Schabes. 1990. Mathematical and Computa-
tional Aspects of Lexicalized Grammars. Ph.D. the-
sis, University of Pennsylvania. Available as techni-cal report MS-CIS-90-48.
Yasuo Uemura, Aki Hasegawa, Satoshi Kobayashi, andTakashi Yokomori. 1999. Tree adjoining grammars
for RNA structure prediction. Theoretical Computer
Science, 210:277?303.
K Vijayashanker. 1987. A study of tree adjoining
grammars. Ph.D. thesis, University of Pennsylva-
nia. Available as technical report MS-CIS-88-03.
Dekai Wu. 1997. Stochastic inversion transductiongrammars and bilingual parsing of parallel corpora.
Computational Linguistics, 23:377?404.
32
