Proceedings of the TextInfer 2011 Workshop on Textual Entailment, EMNLP 2011, pages 50?58,
Edinburgh, Scotland, UK, July 30, 2011. c?2011 Association for Computational Linguistics
Strings over intervals
Tim Fernando
Computer Science Department
Trinity College, Dublin 2
Ireland
Tim.Fernando@tcd.ie
Abstract
Intervals and the events that occur in them
are encoded as strings, elaborating on a con-
ception of events as ?intervals cum descrip-
tion.? Notions of satisfaction in interval
temporal logics are formulated in terms of
strings, and the possibility of computing these
via finite-state machines/transducers is inves-
tigated. This opens up temporal semantics to
finite-state methods, with entailments that are
decidable insofar as these can be reduced to
inclusions between regular languages.
1 Introduction
It is well-known that Kripke models for Linear
Termporal Logic (LTL) can be formulated as strings
(e.g. Emerson, 1990). For the purposes of natu-
ral language semantics, however, it has been argued
since at least (Bennett and Partee, 1972) that inter-
vals should replace points. It is less clear (than in
the case of LTL) how to view models as strings for
intervals drawn (say) from the real line R, as in one
of the more recent interval temporal logics proposed
for English, the system T PL of (Pratt-Hartmann,
2005). But if we follow T PL in restricting our mod-
els to finite sets, we can encode satisfaction of a for-
mula ? in a set L(?) of strings str(A, I) represent-
ing models A and intervals I
(?) A |=I ? ?? str(A, I) ? L(?) .
The present paper shows how to devise encodings
str(A, I) and L(?) that establish (?) in a way that
opens temporal semantics up to finite-state methods
(e.g. Beesley and Karttunen, 2003). Notice that the
entailment from ? to ?? given by
(?A, I) if A |=I ? then A |=I ?
?
is equivalent, under (?), to the inclusion L(?) ?
L(??). This inclusion is decidable provided L(?)
and L(??) are regular languages. (The same cannot
be said for context-free languages.)
1.1 T PL-models and strings
We start with T PL, a model in which is defined,
relative to an infinite set E of event-atoms, to be a
finite set A of pairs ?I, e? of closed, bounded inter-
vals I ? R and event-atoms e ? E. (A closed,
bounded interval in R has the form
[r1, r2]
def
= {r ? R | r1 ? r ? r2}
for some r1, r2 ? R.) The idea is that ?I, e? repre-
sents ?an occurrence of an event of type e over the
interval? I (Pratt-Hartmann, 2005; page 17). That
is, we can think of A as a finite set of events, con-
ceived as ?intervals cum description? (van Benthem,
1983; page 113). Our goal below is to string out this
conception beyond event-atoms, and consider rela-
tions between intervals other than sub-intervalhood
(the focus of T PL). To get some sense for what is
involved, it is useful to pause for examples of the
strings we have in mind.1
1Concrete English examples connected with text infer-
ence can be found in (Pratt-Hartmann, 2005; Pratt-Hartmann,
2005a), the latter of which isolates a fragment T PL? of T PL
related specifically to TimeML (Pustejovsky et al, 2003). The
finite-state encoding below pays off in expanding the coverage
50
?X(?1 ? ? ??n)
def
= (?1 ?X) ? ? ? (?n ?X)
bc(s) def=
?
?
?
bc(?s?) if s = ??s?
?bc(??s?) if s = ???s? and ? 6= ??
s otherwise
Table 1: Two useful functions
Example A Given event-atoms e and e?, let A be
the T PL-model {x1, x2, x3}, where
x1
def
= ?[1, 4], e?
x2
def
= ?[3, 9], e?
x3
def
= ?[9, 100], e?? .
Over the alphabet Pow(A) of subsets of A, let us
represent A by the string
s(A)
def
= x1 x1, x2 x2 x2, x3 x3
of length 5, each box representing a symbol (i.e. a
subset of A) and arranged in chronological order
with time increasing from left to right much like a
film/cartoon strip (Fernando, 2004). Precisely how
s(A) is constructed from A is explained in section
2. Lest we think that a box represents an indivisible
instant of time, we turn quickly to
Example B The 12 months, January to December,
in a year are represented by the string
sy/m
def
= Jan Feb ? ? ? Dec
of length 12, and the 365 days of a (common) year
by the string
sy/m,d
def
= Jan,d1 Jan,d2 ? ? ? Dec,d31
of length 365. These two strings are linked by two
functions on strings: a function ?months that keeps
only the months in a box so that
?months(sy/m,d) = Jan
31
Feb
28
? ? ? Dec
31
and block compression bc, which compresses con-
secutive occurrences of a box into one, mapping
?months(sy/m,d) to
bc( Jan
31
Feb
28
? ? ? Dec
31
) = sy/m .
to examples discussed in (Fernando, 2011a) and papers cited
therein. These matters are given short shrift below (due to space
and time constraints); I hope to make amends at my talk in the
workshop.
(A1) x? x (i.e. ? is reflexive)
(A2) x? x? =? x?? x
(A3) x ? x? =? not x? x?
(A4) x ? x?? x?? ? x??? =? x ? x???
(A5) x ? x? or x? x? or x? ? x
Table 2: Axioms for event structures
That is,
bc(?months(sy/m,d)) = sy/m
where, as made precise in Table 1, ?X ?sees only
X? (equating months with {Jan, Feb, . . . Dec} to
make ?months an instance of ?X ), while bc discards
duplications, in accordance with the view that time
passes only if there is change. Or rather: we observe
time passing only if we observe a change in the con-
tents of a box. The point of this example is that tem-
poral granularity depends on the set X of what are
observable ? i.e., the boxables (we can put inside a
box). That set X might be a T PL-modelA or more
generally the set E of events in an event structure
?E,?,??, as defined in (Kamp and Reyle, 1993).
Example C Given a T PL-model A, let? and ?
be binary relations on A given by
?I, e? ? ?I ?, e??
def
?? I ? I ? 6= ?
?I, e? ? ?I ?, e??
def
?? (?r ? I)(?r? ? I ?) r < r?
for all ?I, e? and ?I ?, e?? ? A. Clearly, the triple
?A,?,?? is an event structure ? i.e., it satisfies
axioms (A1) to (A5) in Table 2. But for finite A, the
temporal structure the real line R confers on A is
reduced considerably by the Russell-Wiener-Kamp
derivation of time from event structures (RWK). In-
deed, for the particular T PL-model A in Exam-
ple A above, RWK yields exactly two temporal
points, constituting the substring x1, x2 x2, x3 of
the string s(A) of length 5. As an RWK-moment
from an event structure ?E,?,?? is required to be
a ?-maximal set of pairwise?-overlapping events,
RWK discards the three boxes x1 , x2 and x3 in
s(A). There is, however, a simple fix from (Fer-
nando, 2011) that reconciles RWK not only with
s(A) but also with block compression bc: enlarge the
set A of events/boxables to include pre- and post-
51
events, turning s(A) into
x1, pre(x2), pre(x3) x1, x2, pre(x3)
x2, post(x1), pre(x3) x2, x3, post(x1)
x3, post(x1), post(x2) .
Note that pre(xi) and post(xi) mark the past and fu-
ture relative to xi, injecting, in the terminology of
(McTaggart, 1908), A-series ingredients for tense
into the B-series relations ? and ? (which is just
?-incomparability). For our present purposes, these
additional ingredients allow us to represent all 13 re-
lations between intervals x and x? in (Allen, 1983)
by event structures over {x, x?, pre(x), post(x?)}, in-
cluding the sub-interval relation x during x? at the
center of (Pratt-Hartmann, 2005),2 which strings out
to
pre(x), x? x, x? post(x), x? .
It will prove useful in our account of T PL-formulas
below to internalize the demarcation of x by pre(x)
and post(x) when forming str(A, I).
1.2 Outline
The remainder of the paper is organized as follows.
Section 2 fills in details left out in our presentation of
examples above, supplying the ingredient str(A, I)
in the equivalence
(?) A |=I ? ?? str(A, I) ? L(?) .
The equivalence itself is not established before sec-
tion 3, where every T PL-formula ? is mapped to a
language L(?) via a translation ?+ of ? to a mi-
nor variant T PL+ of T PL. That variant is de-
signed to smoothen the step in section 4 from T PL
to other interval temporal logics which can be strung
out similarly, and can, under natural assumptions, be
made amenable to finite-state methods.
2Or to be more correct, the version of T PL in (Pratt-
Hartmann, 2005a), as the strict subset relation ? between in-
tervals assumed in the Artificial Intelligence article amounts to
the disjunction of the Allen relations during, starts and finishes.
For concreteness, we work with ? below; only minor changes
are required to switch to during.
2 Strings encoding finite interval models
This section forms the string str(A, I) in three
stages described by the equation
str(A, I)
def
= s(AI)
? .
First, we combine A and I into the restriction AI of
A to pairs ?J, e? such that J is a strict subset of I
AI
def
= {?J, e? ? A | J ? I}
Second, we systematize the construction of the
string s(A) in Example A. And third, we map a
string s to a string s? that internalizes the borders
externally marked by the pre- and post-events de-
scribed in Example C. The map A 7? s(A) is the
business of ?2.1, and s 7? s? of ?2.2. With an eye
to interval temporal logics other than T PL, we will
consider the full set Ivl(R) of (non-empty) intervals
in R
Ivl(R) def= {a ? R | a 6= ? and (?x, y ? a)
[x, y] ? a} ,
and write ]r1, r2[ for the open interval
]r1, r2[
def
= {r ? R | r1 < r < r2}
where we allow r1 = ?? for intervals unbounded
to the left and r2 = +? for intervals unbounded
to the right. The constructs ?? are convenient for
associating endpoints with every interval I , whether
or not I is bounded. For I bounded to the left and
to the right, we refer to real numbers r and r? as I?s
endpoints provided I ? [r, r?] and
[r, r?] ? [r??, r???] for all r?? and r??? such
that I ? [r??, r???] .
We write Endpoints(I) for the (non-empty) set con-
sisting of I?s endpoints (including possibly ??).
2.1 Order, box and compress
Given a finite subsetA ? Ivl(R)?E, we collect all
endpoints of intervals in A in the finite set
Endpoints(A)
def
=
?
?I,e??A
Endpoints(I)
and construct s(A) in three steps.
52
Step 1 Order Endpoints(A) into an increas-
ing sequence
r1 < r2 < ? ? ? < rn.
Step 2 Box the A-events into the sequence
of 2n? 1 intervals
{r1}, ]r1, r2[, {r2}, ]r2, r3[, . . . {rn}
(partitioning the closed interval
[r1, rn]), forming the string
?1?1?2?2 ? ? ??n
(of length 2n? 1) where
?j
def
= {?i, e? ? A | rj ? i}
?j
def
= {?i, e? ? A | ]rj , rj+1[? i} .
Step 3 Block-compress ?1?1?2?2 ? ? ??n
s(A)
def
= bc(?1?1?2?2 ? ? ??n) .
For example, revisiting Example A, where A is
{x1, x2, x3} and
x1
def
= ?[1, 4], e?
x2
def
= ?[3, 9], e?
x3
def
= ?[9, 100], e??
we have from Step 1, the 5 endpoints
~r = 1, 3, 4, 9, 100
and from Step 2, the 9 boxes
x1 x1 x1, x2 x1, x2 x1, x2 x2 x2, x3 x3 x3
that block-compresses in Step 3 to the 5 boxes s(A)
x1 x1, x2 x2 x2, x3 x3 .
Notice that if we turned the closed intervals in x1
and x3 to open intervals ]1, 4[ and ]9, 100[ respec-
tively, then Step 2 gives
x1 x1, x2 x1, x2 x2 x2 x2 x3
which block-compresses to the 6 boxes
x1 x1, x2 x2 x3 .
2.2 Demarcated events
Block compression accounts for part of the Russell-
Wiener-Kamp constuction of moments from an
event structure (RWK). We can neutralize the re-
quirement of ?-maximality on RWK moments by
adding pre(xi), post(xi), turning, for instance, s(A)
for A given by Example A into
x1, pre(x2), pre(x3) x1, x2, pre(x3)
post(x1), x2, pre(x3) post(x1), x2, x3
post(x1), post(x2), x3
(which ?A maps back to s(A)). In general, we say
a string ?1?2 ? ? ??n is A-delimited if for all x ? A
and integers i from 1 to n,
pre(x) ? ?i ?? x ? (
n?
j=i+1
?j)?
i?
j=1
?j
and
post(x) ? ?i ?? x ? (
i?1?
j=1
?j)?
n?
j=i
?j .
Clearly, for every string s ? Pow(A)?, there is a
unique A-delimited string s? such that ?A(s?) = s.
Let s? be that unique string.
Notice that pre(x) and post(x) explicitly mark the
borders of x in s?. For the application at hand to
T PL, it is useful to internalize the borders within x
so that, for instance in Example A, s(A)? becomes
x1, begin-x1 x1, x2, x1-end, begin-x2
x2 x2, x3, x2-end, begin-x3 x3, x3-end
(with pre(xi) shifted to the right as begin-xi and
post(xi) to the left as xi-end). The general idea is
that given a string ?1?2 ? ? ??n ? Pow(A)n and x ?
A that occurs at some ?i, we add begin-x to the first
box in which x appears, and x-end to the last box
in which x appears. Or economizing a bit by pick-
ing out the first component I in a pair ?I, e? ? A, we
form the demarcation (?1?2 ? ? ??n)? of?1?2 ? ? ??n
by adding bgn-I to ?i precisely if
there is some e such that ?I, e? ? ?i and either
i = 1 or ?I, e? 6? ?i?1
53
? ::= mult(e) | ?? | ? ? ?? | ????
? ::= e | ef | el
? ::= ? | ?< | ?>
Table 3: T PL+-formulas ? from extended labels ?
and adding I-end to ?i precisely if
there is some e such that ?I, e? ? ?i and either
i = n or ?I, e? 6? ?i+1 .
Returning to Example A, we have
s(A)? = x1, bgn-I1 x1, x2, I1-end, bgn-I2
x2 x2, x3, I2-end, bgn-I3 x3, I3-end
which is str(A, I) for any interval I such that
[1, 100] ? I .
3 T PL-satisfaction in terms of strings
This section defines the set L(?) of strings for the
equivalence (?)
(?) A |=I ? ?? str(A, I) ? L(?)
by a translation to a language T PL+ that differs
ever so slightly from T PL and its extension T PL+
in (Pratt-Hartmann, 2005). As in T PL and T PL+,
formulas in T PL+ are closed under the modal op-
erator ?e?, for every event-atom e ? E. Essen-
tially, ?e?> says at least one e-transition is possible.
In addition, T PL+ has a formula mult(e) stating
that multiple (at least two) e-transitions are possible.
That is, mult(e) amounts to the T PL+-formula
?e?> ? ?{e}>
where the T PL+-formula {e}? can be rephrased as
?e?? ? ?mult(e)
(and > as the tautology ?(mult(e) ? ?mult(e))).
More formally, T PL+-formulas ? are generated
according to Table 3 without any explicit mention
of the T PL-constructs {?}, {?}< and {?}>. In-
stead, a T PL+-formula ? is translated to a T PL+-
formula ?+ so that (?) holds with L(?) equal to
T (?+), where T (?) is a set of strings (defined
below) characterizing satisfaction in T PL+. The
translation ?+ commutes with the connectives com-
mon to T PL+ and T PL+
e.g., (??)+
def
= ?(?+)
and elsewhere,
>+
def
= ?(mult(e) ? ?mult(e))
({e}?)+
def
= ?e??+ ? ?mult(e)
([e]?)+
def
= ??e???+
({e}<?)+
def
= ?e<??+ ? ?mult(e)
({e}>?)+
def
= ?e>??+ ? ?mult(e)
and as minimal-first and minimal-last subintervals
are unique (Pratt-Hartmann, 2005, page 18),
({eg}<?)+
def
= ?eg<??+ for g ? {f, l}
({eg}>?)+
def
= ?eg>??+ for g ? {f, l} .
3.1 The alphabet ? = ?I,E and its subscripts
The alphabet from which we form strings will de-
pend on a choice I, E of a set I ? Ivl(R) of
real intervals, and a set E of event-atoms. Recall-
ing that the demarcation s(A)? of a string s(A)
contains occurrences of bgn-I and I-end, for each
I ? domain(A), let us associate with I the set
I?
def
= {bgn-I | I ? I} ? {I-end | I ? I}
from which we build the alphabet
?I,E
def
= Pow((I? E) ? I?)
so that a symbol (i.e., element of ?I,E) is a set with
elements of the form ?I, e?, bgn-I and I-end. Notice
that
(?A ? I? E) str(A, I) ? ??I,E
for any real interval I . To simplify notation, we will
often drop the subscripts I and E, restoring them
when we have occasion to vary them. This applies
not only to the alphabet ? = ?I,E but also to the
truth sets T (?) = TI,E(?) below, with I fixed in
the case of (?) to the full set of closed, bounded real
intervals.
54
3.2 The truth sets T (?)
We start with mult(e), the truth set T (mult(e)) for
which consists of strings properly containing at least
two e-events. We first clarify what ?properly con-
tain? means, before turning to ?e-events.? The no-
tion of containment needed combines two ways a
string can be part of another. The first involves delet-
ing some (possibly null) prefix and suffix of a string.
A factor of a string s is a string s? such that s = us?v
for some strings u and v, in which case we write
s fac s?
s fac s?
def
?? (?u, v) s = us?v .
A factor of s is proper if it is distinct from s. That
is, writing s pfac s? to mean s? is a proper factor of
s,
s pfac s? ?? (?u, v) s = us?v
and uv 6= 
where  is the null string. The relation pfac between
strings corresponds roughly to that of proper inclu-
sion ? between intervals.
The second notion of part between strings applies
specifically to strings s and s? of sets: we say s sub-
sumes s?, and write s  s?, if they are of the same
length, and ? holds componentwise between them
?1 ? ? ??n  ?
?
1 ? ? ??
?
m
def
?? n = m and
??i ? ?i for
1 ? i ? n
(Fernando, 2004). Now, writing R;R? for the com-
position of binary relations R and R? in which the
output of R is fed as input to R?
s R;R? s?
def
?? (?s??) sRs?? and s??R?s? ,
we compose fac with  for containment w
w
def
= fac ;  (=  ; fac)
and pfac with  for proper containment A
A
def
= pfac ;  (=  ; pfac) .
Next, for e-events, given I ? I, let
D(e, I)
def
= {s? | s ? ?I, e?
+
}
and summing over intervals I ? I,
DI(e)
def
=
?
I?I
D(e, I) .
Dropping the subscripts on ? and D(e), we put
into T (mult(e)) all strings in ?? properly contain-
ing more than one string in D(e)
s ? T (mult(e))
def
?? (?s1, s2 ? D(e)) s1 6= s2
and s A s1 and s A s2.
Moving on, we interpret negation ? and conjunc-
tion ? classically
T (??)
def
= ?? ? T (?)
T (? ? ??)
def
= T (?) ? T (??)
and writing R?1L for {s ? ?? | (?s? ? L) sRs?},
we set
T (????)
def
= R(?)?1T (?)
which brings us to the question ofR(?).
3.3 The accessibility relationsR(?)
Having defined T (mult(e)), we let R(e) be the re-
striction of proper containment A to D(e)
sR(e) s?
def
?? s A s? and s? ? D(e) .
As for ef and el, some preliminary notation is use-
ful. Given a language L, let us collect strings that
have at most one factor in L in nmf (L) (for non-
multiple f actor)
nmf (L)
def
= {s ? ?? | at most one factor of s
belongs to L}
and let us shorten ?1L to L
s ? L
def
?? (?s? ? L) s s? .
Now,
sR(ef ) s?
def
?? (?u, v) s = us?v
and uv 6= 
and s? ? D(e)
and us? ? nmf (D(e))
55
and similarly,
sR(el) s?
def
?? (?u, v) s = us?v
and uv 6= 
and s? ? D(e)
and s?v ? nmf (D(e)) .
Finally,
sR(?<) s?
def
?? (?s??, s???) s = s?s??s???
and sR(?) s??
sR(?>) s?
def
?? (?s??, s???) s = s???s??s?
and sR(?) s?? .
A routine induction on T PL+-formulas ? estab-
lishes that for I equal to the set I of all closed,
bounded real intervals,
Proposition 1. For all finite A ? I ? E and I ? I,
A |=I ? ?? str(A, I) ? TI,E(?+)
for every T PL+-formula ?.
3.4 T PL-equivalence and I revisited
When do two pairs A, I and A?, I ? of finite subsets
A,A? of I ? E and intervals I, I ? ? I satisfy the
same T PL-formulas? A sufficient condition sug-
gested by Proposition 1 is that str(A, I) is the same
as str(A?, I ?) up to renaming of intervals. More pre-
cisely, recalling that str(A, I) = s(AI)?, let us de-
fine A to be congruent with A?, A ?= A?, if there
is a bijection between the intervals of A and A? that
turns s(A) into s(A?)
A ?= A?
def
?? (?f : domain(A)? domain(A?))
f is a bijection, and
A? = {?f(I), e? | ?I, e? ? A}
and f [s(A)] = s(A?)
where for any string s ? Pow(domain(f)? E)?,
f [s]
def
= s after renaming each
I ? domain(f) to f(I) .
As a corollary to Proposition 1, we have
Proposition 2. For all finite subsets A and A? of
I ? E and all I, I ? ? I, if AI ?= A?I? then for every
T PL+-formula ?,
A |=I ? ?? A
? |=I? ? .
The significance of Proposition 2 is that it spells out
the role the real line R plays in T PL ? nothing
apart from its contribution to the strings s(A). In-
stead of picking out particular intervals over R, it
suffices to work with interval symbols, and to equate
the subscript I on our alphabet ? and truth rela-
tions T (?) to say, the set Z+ of positive integers
1, 2, . . .. But lest we confuse T PLwith Linear Tem-
poral Logic, note that the usual order on Z+ does not
shape the accessibility relations in T PL. We useZ+
here only because it is big enough to include any fi-
nite subset A of I ? E.
Turning to entailments, we can reduce entail-
ments
? |?I,E ?
? def?? (? finite A ? I ? E)(?I ? I)
A |=I ? implies A |=I ?
?
to satisfiability as usual
? |?I,E ?
? ?? TI,E(? ? ??
?) = ? .
The basis of the decidability/complexity results in
(Pratt-Hartmann, 2005) is a lemma (number 3 in
page 20) that, for any T PL+-formula ?, bounds
the size of a minimal model of ?. That is, as far
as the satisfiability of a T PL+-formula ? is con-
cerned, we can reduce the subscript I on T (?) to a
finite set ? or in the aforementioned reformulation,
to a finite segment {1, 2, . . . , n} of Z+. We shall
consider an even more drastic approach in the next
section. For now, notice that the shift from the real
line R towards strings conforms with
The Proposal of (Steedman, 2005)
the so-called temporal semantics of nat-
ural language is not primarily to do with
time at all. Instead, the formal devices we
need are those related to representation of
causality and goal-directed action. [p ix]
The idea is to move away from some absolute (in-
dependently given) notion of time (be they points or
intervals) to the changes and forces that make natu-
ral language temporal.
56
4 The regularity of T PL and beyond
Having reformulated T PL in terms of strings, we
proceed now to investigate the prospects for a finite-
state approach to temporal semantics building on
that reformulation. We start by bringing out the
finite-state character of the connectives in T PL be-
fore considering some extensions.
4.1 T PL+-connectives are regular
It is well-known that the family of regular languages
is closed under complementation and intersection ?
operations interpreting negation and conjunction, re-
spectively. The point of this subsection is to show
that all the T PL+-connectives map regular lan-
guages and regular relations to regular languages
and regular relations. A relation is regular if it is
computed by a finite-state transducer. If I and E are
both finite, then DI,E(e) is a regular language and
A is a regular relation. Writing RL for the relation
{(s, s?) ? R | s? ? L}, note that
R(e) = AD(e)
and that in general, if R and L are regular, then so is
RL.
Moving on, the set of strings with at least two fac-
tors belonging to L is
twice(L)
def
= ??(L?? ? (?+L??)) +
??(L?+ ? L)??
and the set of strings that have a proper factor be-
longing to L is
[L]
def
= ?+L?? + ??L?+ .
It follows that we can capture the set of strings that
properly contain at least two strings in L as
Mult(L)
def
= [twice(L)] .
Note that
T (mult(e)) = Mult(D(e))
and recallingR(ef ) andR(el) use nmf ,
nmf (L) = ?? ? twice(L) .
R(ef ) is minFirst(D(e)) where
s minFirst(L) s?
def
?? (?u, v) s = us?v
and uv 6= 
and s? ? L
and us? ? nmf (L)
andR(el) is minLast(D(e)) where
s minLast(L) s?
def
?? (?u, v) s = us?v
and uv 6= 
and s? ? L
and s?v ? nmf (L).
Finally,R(?<) is init(R(?)) where
s init(R) s?
def
?? (?s??, s???) s = s?s??s???
and s R s??
whileR(?>) is fin(R(?)) where
s fin(R) s?
def
?? (?s??, s???) s = s???s??s?
and s R s?? .
Proposition 3. If L is a regular language and R is a
regular relation, then
(i) Mult(L), R?1L, and nmf (L) are regular lan-
guages
(ii) RL, minFirst(L), minLast(L), init(R) and
fin(R) are regular relations.
4.2 Beyond sub-intervals
As is clear from the relations R(e), T PL makes
do with the sub-interval relation ? and a ?quasi-
guarded? fragment at that (Pratt-Hartmann, 2005,
page 5). To string out the interval temporal logic
HS (Halpern and Shoham, 1991), the key is to com-
bine A and I using some r 6? E to mark I (rather
than forming AI )
Ar[I]
def
= A ? {?I, r?}
and modify str(A, I) to define
strr(A, I)
def
= s(Ar[I])
? .
57
Let us agree that (i) a string ?1 ? ? ??n r-marks I if
?I, r? ?
?n
i=1 ?i, and that (ii) a string is r-marked
if there is a unique I that it r-marks. For every r-
marked string s, we define two strings: let s  r be
the factor of swith bgn-I in its first box and I-end in
its last, where s r-marks I; and let s?r be ??(sr).3
We can devise a finite-state transducer converting r-
marked strings s into s?r, which we can then apply
to evaluate an event-atom e as anHS-formula
s ? Tr(e)
def
?? (?s? ? D(e)) s?r  s
? .
It is also not difficult to build finite-state transducers
for the accessibility relations Rr(B),Rr(E), Rr(B),
and Rr(E), showing that, as in T PL, the connec-
tives inHS map regular languages and regular rela-
tions to regular languages and regular relations. The
question for both T PL andHS is can we start with
regular languages D(e)? As noted towards the end
of section 3, one way is to reduce the set I of inter-
vals to a finite set. We close with an alternative.
4.3 A modest proposal: splitting event-atoms
An alternative to D(e) =
?
I?ID(e, I) is to ask
what it is that makes an e-event an e-event, and en-
code that answer inD(e). In and of itself, an interval
[3,9] cannot make ?[3, 9], e? an e-event, because in
and of itself, ?[3, 9], e? is not an e-event. ?[3, 9], e? is
an e-event only in a model A such that A([3, 9], e).
Putting I aside, let us suppose, for instance, that
e were the event Pat swim a mile. We can repre-
sent the ?internal temporal contour? of e through a
parametrized temporal proposition f(r) with param-
eter r ranging over the reals in the unit interval [0, 1],
and f(r) saying Pat has swum r?(a mile). Let D(e)
be
f(0) f?
+
f(1)
where f? abbreviates the temporal proposition
(?r < 1) f(r) ? Previously ?f(r) .
3? is defined as in ?3.1, and ?X as in ?1.1 above. Were
we to weaken ? to ? in the definition of AI and the semantics
of T PL, then we would have (strr(A, I))?r = str(A, I), and
truth sets Tr(?) and accessibility relationsRr(?) such that
T (?) = {s?r | s ? Tr(?)}
R(?) = {?s?r, s
?
?r? | sRr(?) s
?}
for T PL+-formulas ? and extended labels ?.
Notice that the temporal propositions f(r) and f?
are to be interpreted over points (as in LTL); as il-
lustrated in Example B above, however, these points
can be split by adding boxables. Be that as it may, it
is straightforward to adjust our definition of a model
A and strr(A, I) to accommodate such changes to
D(e). Basing the truth sets T (?) on sets D(e) of e-
denotations independent of a model A (Fernando,
2011a) is in line with the proposal of (Steedman,
2005) mentioned at the end of ?3.4 above.
References
James F. Allen. 1983. Maintaining knowledge about
temporal intervals. Communications of the Associa-
tion for Computing Machinery 26(11): 832?843.
Kenneth R. Beesley and Lauri Karttunen. 2003. Finite
State Morphology. CSLI, Stanford, CA.
Michael Bennett and Barbara Partee. 1972. Toward the
logic of tense and aspect in English. Indiana Univer-
sity Linguistics Club, Bloomington, IN.
J.F.A.K. van Benthem. 1983. The Logic of Time. Reidel.
E. Allen Emerson. 1990. Temporal and modal logic. In
(J. van Leeuwen, ed.) Handbook of Theoretical Com-
puter Science, volume B. MIT Press, 995?1072.
Tim Fernando. 2004. A finite-state approach to events in
natural langue semantics. J. Logic & Comp 14:79?92.
Tim Fernando. 2011. Constructing situations and time.
J. Philosophical Logic 40(3):371?396.
Tim Fernando. 2011a. Regular relations for temporal
propositions. Natural Language Engineering 17(2):
163?184.
Joseph Y. Halpern and Yoav Shoham. 1991. A Proposi-
tional Modal Logic of Time Intervals. J. Association
for Computing Machinery 38(4): 935?962.
Hans Kamp and Uwe Reyle. 1993. From Discourse to
Logic. Kluwer, Dordrecht.
John E. McTaggart. 1908. The Unreality of Time. Mind
17:456?473.
Ian Pratt-Hartmann. 2005. Temporal prepositions and
their logic. Artificial Intelligence 166: 1?36.
Ian Pratt-Hartmann. 2005a. From TimeML to TPL?. In
(G. Katz et al, eds.) Annotating, Extracting and Rea-
soning about Time and Events, Schloss Dagstuhl.
James Pustejovsky, Jose? Castan?o, Robert Ingria, Roser
Saur??, Robert Gaizauskas, Andrea Setzer and Graham
Katz. 2003. TimeML: Robust Specification of Event
and Temporal Expressions in Text. In 5th International
Workshop on Computational Semantics. Tilburg.
Mark Steedman. 2005. The Productions of Time: Tem-
porality and Causality in Linguistic Semantics. Draft,
homepages.inf.ed.ac.uk/steedman/papers.html.
58
