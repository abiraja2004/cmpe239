Morphology with Two-Level Rules 
and 
Negative Rule Features 
J ohn  Bear  
Art i f ic ia l  Inte l l igence Center  and 
Center  for the S tudy  of Language and In fo rmat ion  
SRI  In ternat iona l  
Abstract 
Two-level phonology, as currently practiced, has two severe lim- 
itations. One is that phonological generalizations are generally 
expressed in terms of transition tables of finite-state automata, 
and these tables are cumbersome todevelop and refine. The other 
is that lexical idiosyncrasy is encoded by introducing arbitrary 
diacritics into the spelling of a morpheme. This paper explains 
how phonological rules may be employed instead of transition 
tables and describes a more elegant way of expressing phono- 
logical irregularity than with arbitrary diacritics, making use of 
the fact that generalizations are expressed with rules instead of 
automata. 
1 Introduct ion 
The theme of this paper is how to deal with the phonological 
or orthographic half of the problem of computational morphol- 
ogy, i.e., how to handle the various problems associated with the 
spellings of morphemes. The examples in this paper have been 
drawn from English orthography but it is easy to find examples 
from other languages where these techniques would be applicable 
as well. 
In an earlier paper \[2\], I presented a formalism for two-level 
phonological (or orthographic) rules very similar to Kosken- 
neimi's \[8\] and described how rules in that formalism could be 
interpreted in a computational system. There were problems 
with both my formalism and Koskenniemi's that could have been 
solved with the device of negative rule features. In this paper I
discuss these problems and their solutions. 
2 Historical Note 
The formalism described here was developed with the goal of al- 
lowing the linguist to write rules with similar or even identical 
contexts and still have a way of processing them. This stands in 
contrast o Koskenniemi's formMism, which, in its initial formu- 
lation, seemed to rule out pairs of such rules. 
For instance, in Koskenniemi's formalism, as originally stated, 
the two rules below, 
a:b?==a__~ 
a : c ?:==== o~__~, 
Would clash. Together they assert that a lexical character/a/,  
preceded by a sequence of character pairs c~ and followed by a 
sequence of character pairs fl, must correspond to both/b/and 
/ c /on  the surface. 
The orthographic rules described here are used in a morpholog- 
ical analysis system that is based on the work of Koskenniemi, 
Karttunen, and Wittenburg \[8,5\]. Its morphosyntactic compo- 
nent uses, instead of continuation classes, an extension of PATR 
28 
type rules including a device described by Karttunen \[4\] for han- 
dling disjunction. One version of this system also uses a definite- 
clause grammar in addition to the PATP~-type unification, and 
disjunction. It has been implemented in Prolog and runs on a 
Sun. 
3 Summary of Alternat ive Rule For- 
malism 
The basic idea behind the notion of two-level rule (due to Kosken- 
niemi \[8\]) is that there are two levels of linguistic information to 
which a rule may refer. One has to do with how a morpheme 
is spelled in the lexicon. That is called the lexical level. The 
other has to do with how a morpheme appears in text, i.e., the 
surface representation. There is no way for rules to apply one 
after the other, creating and referring to intermediate l vels of 
representation. Instead, rules are viewed as constraints On map- 
pings between surface and underlying forms of morphemes. They 
stipulate how to get from underlying to surface form, and vice 
versa. 
Two-level rules in the alternative to Koskenniemi's formalism 
that I proposed in an earlier paper \[2\], take one of three forms: 
1) a - - ,  b/,~__ 
2) a/b allowed/a__ 
3) a/b disallowed/a__ fl 
The a and ~ in the contexts of these rules represent strings of 
character pairs where one character of the pair refers to the lexical 
level of representation a d the other refers to the surface. 
P~ule (1) is very similar to a standard phonological rule. It 
means roughly that lexical/a/ must correspond to surface/b/ 
in the context given. A more accurate and detailed escription is
as follows: if lexieal/a/occurs in tile given context, then it may 
not correspond to what it normally would correspond to, but it 
may correspond to surface/b/. 
tLule (2) means that lexical /a/  is allowed to correspond to 
surface/b/ in the context given, but not elsewhere. More pre- 
cisely, the rule allows the pair /a:b/ (lexical /a/  corresponding 
to surface /b/)  to occur in the context given and, unless there 
are other rules licensing the pair in other contexts, the context 
given is the only place where that correspondence is allowed. 
Rule (3) says that lexical/a/ may not correspond to surface 
/b / in  the context given. Both rules (1)and (2) mention a char- 
acter's default. A normal alphabetic haracter in this system 
defaults to itself. This means that a pair of alphabetic harac- 
ters /a:a/ does not need to be licensed by a rule. In contrast 
to alphabetic haracters (a through z)~ there are diacritic char- 
acters such as the plus sign (+) for morpheme boundaries. In 
Karttunen and Wittenburg's ystem, \[5\] there is also a back- 
quote (') for representing stress; Koskenniemi uses several others 
as well, \[8\]. The default for lexical-level diacritics, at least in the 
system described here, is that they correspond to the null surface 
character, which is frequently written with a zero. 
.N? , ,a t lve  :~ ,u ie  Features 
There is a 9roblem with previous accounts of English that have 
been done in terms of two-level rules. There is no easy way to let 
the phonoh@cal rules know about individual idiosyncrasy in the 
lexical items. In the. work of Koskcnnicmi \[8\] and Karttunen and 
Wittenburg \[5\], diacritics are put into the lexical representation 
of a word in order to allow the linguist to write a phonological 
rule that applies in some words and not others according to the 
presence or absence of the diacritic. The diacritic is mentioned 
in the rule. The words that do not contain the diacritic do not 
undergo the rule. 
In oldofa~;hioned generative phonology, there was the notion 
of a negative rule feature to handle such cases. One could say 
of certMn :,norphemes ~hat appeared to be exceptions to cer- 
tain phonological rules that such morphemes possessed a feature 
specifying that some partictflar phonological rule did not apply 
to themL 
The ide;~ of negative rule featmes has an adwmtage over the 
use of diacritics mentioned above in that it allows simplification 
of the photmlogicM rules and the lexicon. It seems to me more 
straightforward to have a lexical item that says miuus such and 
such a rule than to have the lexical item contain a colon or quo- 
tation marl< whose function is to assert hat some rule does not 
apply. The complexity of the lexical items is the same, but in 
the first case, at least, t'he phonological rule can be made simpler 
by omission of the arbitrary diacritic. 
There ar~, three examples from English orthography that will 
be used to help demonstrate how negative rule features may be 
employed. 
The anMysis of consonant gemination in Karttunen and Wit- 
tenburg's paper, \[5\], relies on the use of diacritics of just the sort 
mentioned above. A simplified versieiJ of the rule is given below. 
Gemin~ction: 
+:c l ,Z~>~ C*  V - :e l  __V; 
where cl is in 
{ b,d,f,g,l,m,n,p,r,s,t }. 
This rule uses a plus sign (+) for morpheme boundaries, and a 
backquote (') for accent where accent is important. It correctly 
describes the following data: 
questiouing versus *questionning, 
debiting versus *debitting, 
eating versus *catting. 
The rule also correctly describes the following data, provided the 
lexicM entr> contains a backquote in the right place. 
referred versus. *refered (spellings in lexicon are 
"re'let" + "ed'). 
In order to get the facts right for monosyllabic words, Karttunen 
and Wittenburg's rule also mentions that, instead of a backquote, 
a word boundary (#) will do. 
The only point of contention here is that their system requires 
the the lexicM entry to contain a diacritic (and furthermore the 
diacritic must be correctly located within the word). That the 
diacritic is reminiscent of an accent mark is no accident. Stress is 
clearly a fac,~or in English consonant gemination, q'helr solution 
is to find a way to represent stress in the orthography. The 
Mternative l:,roposed here is to express it in the form of a negative 
rule feature on the following sample iexical items. The rule is 
again simplified. 
1For instance, see Schane \[11\], pp. 108-109 
Gemination rule: 
+ - -~ c l /C  V cl  _V ;  
where cl is in {b,d,f,g,l,m,n,p,r,s,t} 
Words: 
refer (default is that it is consistent with all rules) 
bother 
-gemination (means that the gemination rule does not 
apply to this word) 
There are other sets of data for which this technique is usefnl. 
The case that. comes to mind most readily deals with combining 
a noun o," verb stem ending in /o /w i th  an /s /morpheme r pre- 
senting, respectively, plural for nouns and third person singular 
for verbs. The following rules do well at describing these facts 
about English orthography. 
EPENTHESIS RULES: 
epenthesisl: 
-I . . . . . .  c / o .._ s. 
epenthesis2: 
-I-/c a l lowed in context  o __ s. 
DATA: 
potato+s ==ee potatoes, *potatos (need an /e / )  
do+s --m~ does, *dos (need an /e / )  
piano+s "--::4, pianos, *l)ianocs (can't have an /e / )  
piccolo+s ==> piccolos, *piccoloes (can't haw'. an /e / )  
banjo+s ==> banjos or banjoes (both are acceptable) 
cargo+s =-~e- cargos or cargoes (both arc acceptable) 
The first of the epenthesis rules describes/potato+s/ ==> \[pota- 
toes\] and/do+s/==> \[does\] correctly, but incorrectly states that 
the plural o f /p iano/  is */pianoes/. The second rule is weaker, 
generating all of the correct forms - but all of the wrong ones too, 
so that it achieves the right results for /banjo+s/  ==# \[banjoes\[ 
or \[banjos\] and likewise for/cargo+s/,  but yields both the right 
and the wrong results for the others. 
The way to get the facts right is to put negative rule features 
on the lexicM items in question, as shown here: 
LEXICON 
piano 
- \[epenthesisl epenthesis2\] 
piccolo 
- \[epenthesisl epenthesis2\] 
banjo 
- epenthesisl 
cargo 
- epenthesisl 
potato 
do 
The alternatives are either to list some forms as being irregular 
or to insert diacritics into some of the words so that the rule(s) 
will apply only to the correct lexical items. To list some of the 
forms as irregular is to miss the generalization that they are all 
irregular in exactly the same way. To use a diacritic (or possibly 
two) to describe the facts correctly may lead to making other, 
unrelated rules more complicated. Furthermore, it seems to be 
an attempt at expressing historical information, such as a word's 
provenance, in terms of abstract phonological segments. 
In general, the device of negative rule features eems to be well 
suited to tile task of passing information between a lexical entry 
and the phonology component. This is a useful capability. It 
is perhaps analogou,s to employing augmented phrase-structure 
rules in syntax when, at least in theory, pure context-free rules 
would do. 
The mMn idea here is that there is a way to let phonological 
(or orthographic) rules refer to features of a nmrpheme that may 
29 
not be easily represented asphonemic segements. As regards the 
gemination rule mentioned earlier, the right procedure might be 
to let the rule mention stress and store values for that feature in 
the lexical entries. 
5 Computer Interpretation of the 
Rules 
What makes these rules interesting is that there is a way to apply 
them in a morphological parser or generator. What follows is a 
description of the algorithm used by the code that I have imple- 
mented in Quintus Prolog on a Sun. When the rule epenthesisl 
is read in, it is decomposed into two rules. This rule, 
epenthesisl: 
+--->e/O__s, 
yields these rules: 
epenthesis\]: 
+/e allowed in context o __ s 
epenthesis\]: 
+/0 disallowed in context o _ s. 
These rules are then stored as lists of character pairs: 
epenthesisl: 
allowed : o/o . + /e  .s/.s 
epenthesisl: 
disallowed: o/o +/O s/s.  
7 Algorithm With Negative Rule 
Features 
Thus far, nothing has been said about how negative rule features 
enter into the picture. When a morpheme boundary is encoun- 
tered, a morpheme has just been looked up in the lexicon. At 
that point, if it has some negative rule features on it, it is a sim- 
ple matter to sort through the list of rules that have partially 
matched the input and discard those that the morpheme says do 
not apply. If that entails eliminating the last rule in some set of 
allowed-type rules that have all already matched past the main 
pair of the rule, then the input being scanned is not allowable 
as a possible mapping between lexical and surface forms. Oth- 
erwise one should just go on as before, comparing the rules with 
the input being scanned. 
8 Conclusion 
A general procedure for using phonological or orthographic two- 
level rules has been presented. These rules are much easier to 
refine and develop than automata transition tables. In addition, 
a method has been presented for listing which morphemes are 
exceptions to which \[orthographic\] rules, and an algorithm has 
been described that makes it possible to use this information in 
a straightforward way. 
Furthermore, these are two-level rules. As Koskenniemi has 
noted, \[8\], since these rules simply state correspondences between 
surface strings and underlying strings, they may be used either 
for doing generation or recognitio n. The device of negative rule 
features proposed here has the same power as Koskeniemi's de- 
vice of putting arbitrary diacritics into selected classes of mor- 
pheines and rules, but is argued to be simpler. 
6 Basic A lgor i thm 
The rules are sequences of character pairs. A mapping between a
string of lexical characters and a string of surface characters may 
also be considered to be a list of character pairs. No disallowed- 
type rule may be a substring of a mapping between a lexical 
string and a surface string. 
The rule checker proceeds down the list of character pairs, look- 
ing for any substring that is the same as one of the disallowed- 
type rules. If it finds one, the string of character pairs it was 
considering is not a valid mapping from a lexical form (word) to 
a surface form. 
The other type of rule, the allowed-type rule, is somewhat 
different. A dot is put into the rule right after the end of the left 
context o mark the next character pair as being the main pair of 
the rule. Any character pair that is the main pair for one of these 
allowed-type rules needs to be surrounded by the right and left 
contexts of one of these rules. The way that is checked for in this 
system is as follows. The string of charcter pairs is scanned from 
left to right. Each time a pair is encountered that is the same as 
the first pair of some allowed-type rules, the rules are put into 
a set. As more character pairs are scanned, they are compared 
with the sets of rules already encountered. Rules that do not 
continue to match the scanned input are ejected from the set. 
When the main pair of a rule in one of these sets is scanned, it is 
removed from the set it was in and put into a new one. The rules 
in this set are compared with scanned input in the same manner 
as before except hat, if the last pair of some rule matches a pair 
that is being scanned, the whole set is discarded as no longer of 
interest. Conversely, if there is not at least one rule in the set 
that matches the scanned input all the way to the end, then the 
input being scanned is not an allowable mapping between lexical 
and surface forms. 
Acknowledgments 
I would like to thank Meg Withgott for helpful comments on 
this topic. I have also benefited greatly from conversations with 
Lauri Karttunen and Kimmo Koskenniemi regarding the general 
problem of two-level phonology. This research was funded by 
the Defense Advanced Research Projects Agency under Office of 
Naval Research Contract N00014-85-C-0013. 
References 
\[1\] Bear, John (1985) "Interpreting Two-level Rules Directly," 
presented at a Stanford workshop on finite-state morphology. 
\[2\] Bear, John (1986) "A Morphological Recognizer with Syn- 
tactic and Phonological Rules," COLING 86. 
r3\] Karttunen, Lauri (1983) "Kimmo: A General Morphologi- 
cM Processor," in Texas Linguistic Forum #2P, Dalrymple t 
al., eds., Linguistics Department, University of Texas, Austin, 
'~Xa8. 
\[4\] Karttunen, Lauri (1984) "Features and Values," in COLING 
84. 
\[5\] Karttunen, Lauri and Kent Wittenburg (1983) "A Two-level 
Morphological Analysis Of English," in Texas Linguistic Fo- 
rum #22, Dalrymple t al., eds., Linguistics Department, Uni- 
versity of Texas, Austin, TexaS. 
\[6\] Kay, Martin (1983) "When Meta-rules are not Meta-rules," 
in K. Sparck-Jones, and Y. Wilks, eds. Automatic Natural Lano 
guage Processing, John Wiley and Sons, New York, New York. 
30 
\[7\] Kay, Martin (1987) "Nonconcatenative Finite-State Morphol- 
ogy," paper presented at a workshop on Arabic Morphology, 
Stanford University, Stanford, California. 
\[8\] Koskenniemi, Kimlr)o (1983) Two-level Morphology: A Gen- 
eral Computational Model for Word-form Recognition and Pro- 
duction. Publication No. 11 of the University of ttelsinki De- 
partment of GenerM Linguistics, Helsinki, Finland. 
\[9\] Koskcnniemi, Kimmo (1983) "Two-level Model for Morpho- 
logical Analysis," IJCAI 83, pp. 683-685. 
\[1Of Koskenniemi, Kimmo (1984) "A General Computational 
Model for Word-form Recognition and Production," COLING 
84, pp. 171~-181. 
\[11\] Schane, Sanford (1973) Generative Phonology, Prentice 
Hall, Englewood Cliffs, New Jersey. 
\[12\] Selkirk, Elizabeth (1982) The Syntax of Words, MIT Press, 
Cambridge, Massachussetts. 
\[13\] Shieber, Stuart (1986) An Introduction to Unification-Based 
Approache:~ to Grammar, CSLI Lecture Notes Series, Stanford 
University, Stanford, California. 
31 
