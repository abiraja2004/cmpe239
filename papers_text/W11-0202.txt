Proceedings of the 2011 Workshop on Biomedical Natural Language Processing, ACL-HLT 2011, pages 10?18,
Portland, Oregon, USA, June 23-24, 2011. c?2011 Association for Computational Linguistics
Unsupervised Entailment Detection between Dependency Graph Fragments
Marek Rei
Computer Laboratory
University of Cambridge
United Kingdom
Marek.Rei@cl.cam.ac.uk
Ted Briscoe
Computer Laboratory
University of Cambridge
United Kingdom
Ted.Briscoe@cl.cam.ac.uk
Abstract
Entailment detection systems are generally
designed to work either on single words, re-
lations or full sentences. We propose a new
task ? detecting entailment between depen-
dency graph fragments of any type ? which
relaxes these restrictions and leads to much
wider entailment discovery. An unsupervised
framework is described that uses intrinsic sim-
ilarity, multi-level extrinsic similarity and the
detection of negation and hedged language to
assign a confidence score to entailment rela-
tions between two fragments. The final system
achieves 84.1% average precision on a data set
of entailment examples from the biomedical
domain.
1 Introduction
Understanding that two different texts are semanti-
cally similar has benefits for nearly all NLP tasks,
including IR, IE, QA and Summarisation. Similar-
ity detection is usually performed either on single
words (synonymy) or full sentences and paragraphs
(paraphrasing). A symmetric similarity relation im-
plies that both elements can be interchanged (syn-
onymy and paraphrasing), while directional similar-
ity suggests that one fragment can be substituted for
the other but not the opposite (hyponymy and entail-
ment).
All of these language phenomena can be ex-
pressed using a single entailment relation. For para-
phrases and synonyms the relation holds in both di-
rections (observe? notice), whereas entailment and
hyponymy are modelled as a unidirectional relation
(overexpress ? express). Such relations, however,
can be defined between text fragments of any size
and shape, ranging from a single word to a complete
text segment. For example (argues against? does
not support; the protein has been implicated? the
protein has been shown to be involved).
We propose a new task ? detecting entailment
relations between any kinds of text fragments. A
unified approach is not expected to perform better
when compared to systems optimised only for a spe-
cific task (e.g. recognising entailment between sen-
tences), but constructing a common theory to cover
all text fragments has important benefits. A broader
approach will allow for entailment discovery among
a much wider range of fragment types for which no
specialised systems exist. In addition, entailment re-
lations can be found between different types of frag-
ments (e.g. a predicate entailing an adjunct). Finally,
a common system is much easier to develop and in-
tegrate with potential applications compared to hav-
ing a separate system for each type of fragment.
In this paper we present a unified framework that
can be used to detect entailment relations between
fragments of various types and sizes. The system
is designed to work with anything that can be rep-
resented as a dependency graph, including single
words, constituents of various sizes, text adjuncts,
predicates, relations and full sentences. The ap-
proach is completely unsupervised and requires only
a large plain text corpus to gather information for
calculating distributional similarity. This makes it
ideal for the biomedical domain where the availabil-
ity of annotated training data is limited. We ap-
ply these methods by using a background corpus
10
of biomedical papers and evaluate on a manually
constructed dataset of entailing fragment pairs, ex-
tracted from biomedical texts.
2 Applications
Entailment detection between fragments is a vital
step towards entailment generation ? given text T ,
the system will have to generate all texts that ei-
ther entail T or are entailed by T . This is motivated
by applications in Relation Extraction, Information
Retrieval and Information Extraction. For example,
if we wish to find all genes that are synthesised in
the larval tissue, the following IE query can be con-
structed (with x and y marking unknown variables):
(1) x is synthesised in the larval tissue
Known entailment relations can be used to mod-
ify the query: (overexpression? synthesis), (larval
fat body ? larval tissue) and (the synthesis of x in
y ? x is synthesised in y). Pattern (2) entails pat-
tern (1) and would also return results matching the
information need.
(2) the overexpression of x in the larval fat body
A system for entailment detection can automati-
cally extract a database of entailing fragments from
a large corpus and use them to modify any query
given by the user. Recent studies have also inves-
tigated how complex sentence-level entailment re-
lations can be broken down into smaller consecu-
tive steps involving fragment-level entailment (Sam-
mons et al, 2010; Bentivogli et al, 2010). For ex-
ample:
(3) Text: The mitogenic effects of the B beta chain of
fibrinogen are mediated through cell surface
calreticulin.
Hypothesis: Fibrinogen beta chain interacts with
CRP55.
To recognise that the hypothesis is entailed by the
text, it can be decomposed into five separate steps
involving text fragments:
1. B beta chain of fibrinogen? Fibrinogen beta chain
2. calreticulin? CRP55
3. the mitogenic effects of x are mediated through y?
y mediates the mitogenic effects of x
4. y mediates the mitogenic effects of x ? y interacts
with x
5. y interacts with x? x interacts with y
This illustrates how entailment detection between
various smaller fragments can be used to construct
an entailment decision between more complicated
sentences. However, only the presence of these con-
structions has been investigated and, to the best of
our knowledge, no models currently exist for auto-
mated detection and composition of such entailment
relations.
3 Modelling entailment between graph
fragments
In order to cover a wide variety of language phe-
nomena, a fragment is defined in the following way:
Definition 1. A fragment is any connected subgraph
of a directed dependency graph containing one or
more words and the grammatical relations between
them.
This definition is intended to allow extraction of
a wide variety of fragments from a dependency tree
or graph representation of sentences found using any
appropriate parser capable of returning such output
(e.g. Ku?bler et al, 2009). The definition covers
single- or multi-word constituents functioning as de-
pendents (e.g. sites, putative binding sites), text ad-
juncts (in the cell wall), single- or multi-word pred-
icates (* binds to receptors in the airways) and rela-
tions (* binds and activates *) including ones with
?internal? dependent slots (* inhibits * at *), some of
which may be fixed in the fragment (* induces au-
tophosphorylation of * in * cells), and also full sen-
tences1. An example dependency graph and some
selected fragments can be seen in Figure 1.
Our aim is to detect semantically similar frag-
ments which can be substituted for each other in text,
resulting in more general or more specific versions
of the same proposition. This kind of similarity can
be thought of as an entailment relation and we define
entailment between two fragments as follows:
1The asterisks (*) are used to indicate missing dependents
in order to increase the readability of the fragment when repre-
sented textually. The actual fragments are kept in graph form
and have no need for them.
11
induce inB61recombinant
autophosphorylation of ECK
cell intactmod mod
subj iobj
iobjdobj dobjdobj
Figure 1: Dependency graph for the sentence: Recombinant B61 induces autophosphorylation of ECK in intact cells.
Some interesting fragments are marked by dotted lines.
Definition 2. Fragment A entails fragment B (A?
B) if A can be replaced by B in sentence S and the re-
sulting sentence S? can be entailed from the original
one (S? S?).
This also requires estimating entailment relations
between sentences, for which we use the definition
established by Bar-Haim et al (2006):
Definition 3. Text T entails hypothesis H (T ? H)
if, typically, a human reading T would infer that H
is most likely true.
We model the semantic similarity of fragments as
a combination of two separate directional similarity
scores:
1. Intrinsic similarity: how similar are the com-
ponents of the fragments.
2. Extrinsic similarity: how similar are the con-
texts of the fragments.
To find the overall score, these two similarity
measures are combined linearly using a weighting
parameter ?:
Score(A? B) = ?? IntSim(A? B)
+(1? ?)? ExtSim(A? B)
In this paper f(A ? B) designates an asym-
metric function between A and B. When referring
only to single words, lowercase letters (a,b) are used;
when referring to fragments of any size, including
single words, then uppercase letters are used (A,B).
Score(A? B) is the confidence score that frag-
ment A entails fragment B ? higher score indi-
cates higher confidence and 0 means no entailment.
IntSim(A? B) is the intrinsic similarity between
two fragments. It can be any function that compares
them, for example by matching the structure of one
fragment to another, and outputs a similarity score in
the range of [0, 1]. ExtSim(A ? B) is a measure
of extrinsic similarity that compares the contexts of
the two fragments. ? is set to 0.5 for an unsuper-
vised approach but the effects of tuning this param-
eter are further analysed in Section 5.
The directional similarity score is first found be-
tween words in each fragment, which are then used
to calculate the score between the two fragments.
3.1 Intrinsic similarity
IntSim(A? B) is the intrinsic similarity between
the two words or fragments. In order to best capture
entailment, the measure should be non-symmetrical.
We use the following simple formula for word-level
score calculation:
IntSim(a? b) =
length(c)
length(b)
where c is the longest common substring for a and
b. This measure will show the ratio of b that is also
contained in a. For example:
IntSim(overexpress? expression) = 0.70
IntSim(expression? overexpress) = 0.64
The intrinsic similarity function for fragments is
defined using an injective function between compo-
nents of A and components of B:
IntSim(A? B) =
Mapping(A? B)
|B|
where Mapping(A ? B) is a function that goes
through all the possible word pairs {(a, b)|a ?
A, b ? B} and at each iteration connects the one
12
with the highest entailment score, returning the sum
of those scores. Figure 2 contains pseudocode
for the mapping process. Dividing the value of
Mapping(A ? B) by the number of components
in B gives an asymmetric score that indicates how
well B is covered by A. It returns a lower score
if B contains more elements than A as some words
cannot be matched to anything. While there are ex-
ceptions, it is common that if B is larger than A,
then it cannot be entailed by A as it contains more
information.
while unused elements in A and B do
bestScore = 0
for a ? A, b ? B, a and b are unused do
if Score(a? b) > bestScore then
bestScore = Score(a? b)
end if
end for
total+ = bestScore
end while
return total
Figure 2: Pseudocode for mapping between two frag-
ments
The word-level entailment score Score(a ? b)
is directly used to estimate the entailment score be-
tween fragments, Score(A ? B). In this case we
are working with two levels ? fragments which in
turn consist of words. However, this can be extended
to a truly recursive method where fragments consist
of smaller fragments.
3.2 Extrinsic similarity
The extrinsic similarity between two fragments or
words is modelled using measures of directional dis-
tributional similarity. We define a context relation as
a tuple (a, d, r, a?) where a is the main word, a? is a
word connected to it through a dependency relation,
r is the label of that relation and d shows the direc-
tion of the relation. The tuple f : (d, r, a?) is referred
to as a feature of a.
To calculate the distributional similarity between
two fragments, we adopt an approach similar to
Weeds et al (2005). Using the previous notation,
(d, r, a?) is a feature of fragment A if (d, r, a?) is a
feature for a word which is contained inA. The gen-
eral algorithm for feature collection is as follows:
1. Find the next instance of a fragment in the
background corpus.
2. For each word in the fragment, find dependency
relations which connect to words not contained
in the fragment.
3. Count these dependency relations as distribu-
tional features for the fragment.
For example, in Figure 1 the fragment (* induces
* in *) has three features: (1, subj, B61), (1, dobj,
autophosphorylation) and (1, dobj, cell).
The BioMed Central2 corpus of full papers was
used to collect distributional similarity features for
each fragment. 1000 papers were randomly selected
and separated for constructing the test set, leaving
70821 biomedical full papers. These were tokenised
and parsed using the RASP system (Briscoe et al,
2006) in order to extract dependency relations.
We experimented with various schemes for fea-
ture weighting and found the best one to be a varia-
tion of Dice?s coefficient (Dice, 1945), described by
Curran (2003):
wA(f) =
2P (A, f)
P (A, ?) + P (?, f)
where wA(f) is the weight of feature f for fragment
A, P (?, f) is the probability of the feature appear-
ing in the corpus with any fragment, P (A, ?) is the
probability of the fragment appearing with any fea-
ture, and P (A, f) is the probability of the fragment
and the feature appearing together.
Different measures of distributional similarity,
both symmetrical and directonal, were also tested
and ClarkeDE (Clarke, 2009) was used for the fi-
nal system as it achieved the highest performance on
graph fragments:
ClarkeDE(A? B) =
?
f?FA?FB
min(wA(f), wB(f))
?
f?FA
wA(f)
where FA is the set of features for fragmentA and
wA(f) is the weight of feature f for fragment A. It
quantifies the weighted coverage of the features ofA
by the features of B by finding the sum of minimum
weights.
2http://www.biomedcentral.com/info/about/datamining/
13
The ClarkeDE similarity measure is designed to
detect whether the features of A are a proper subset
of the features of B. This works well for finding
more general versions of fragments, but not when
comparing fragments which are roughly equal para-
phrases. As a solution we constructed a new mea-
sure based on the symmetrical Lin measure (Lin,
1998).
LinD(A? B) =
?
f?FA?FB
[wA(f) + wB(f)]
?
f?FA
wA(f) +
?
f?FA?FB
wB(f)
Compared to the original, the features ofB which
are not found in A are excluded from the score
calculation, making the score non-symmetrical but
more balanced compared to ClarkeDE. We ap-
plied this for word-level distributional similarity and
achieved better results than with other common sim-
ilarity measures.
The LinD similarity is also calculated between
fragment levels to help detect possible paraphrases.
If the similarity is very high (greater than 85%), then
a symmetric relationship between the fragments is
assumed and the value of LinD is used as ExtSim.
Otherwise, the system reverts to the ClarkeDE
measure for handling unidirectional relations.
3.3 Hedging and negation
Language constructions such as hedging and nega-
tion typically invert the normal direction of an en-
tailment relation. For example, (biological discov-
ery? discovery) becomes (no biological discovery
? no discovery) and (is repressed by? is affected
by) becomes (may be repressed by? is affected by).
Such cases are handled by inverting the direction
of the score calculation if a fragment is found to
contain a special cue word that commonly indicates
hedged language or negation. In order to find the
list of indicative hedge cues, we analysed the train-
ing corpus of CoNLL 2010 Shared Task (Farkas et
al., 2010) which is annotated for speculation cues
and scopes. Any cues that occurred less than 5 times
or occurred more often as normal text than as cue
words were filtered out, resulting in the following
list:
(4) suggest, may, might, indicate that, appear,
likely, could, possible, whether, would, think,
seem, probably, assume, putative, unclear,
propose, imply, possibly
For negation cues we used the list collected by
Morante (2009):
(5) absence, absent, cannot, could not, either,
except, exclude, fail, failure, favor over,
impossible, instead of, lack, loss, miss,
negative, neither, nor, never, no, no longer,
none, not, rather than, rule out, unable, with
the exception of, without
This is a fast and basic method for estimating
the presence of hedging and negation in a fragment.
When dealing with longer texts, the exact scope of
the cue word should be detected, but for relatively
short fragments the presence of a keyword acts as a
good indication of hedging and negation.
4 Evaluation
A ?pilot? dataset was created to evaluate different
entailment detection methods between fragments3.
In order to look for valid entailment examples, 1000
biomedical papers from the BioMed Central full-text
corpus were randomly chosen and analysed. We
hypothesised that two very similar sentences orig-
inating from the same paper are likely to be more
and less general versions of the same proposition.
First, the similarities between all sentences in a sin-
gle paper were calculated using a bag-of-words ap-
proach. Then, ten of the most similar but non-
identical sentence pairs from each paper were pre-
sented for manual review and 150 fragment pairs
were created based on these sentences, 100 of which
were selected for the final set.
When applied to sentence-level entailment extrac-
tion, similar methods can suffer from high lexical
overlap as sentences need to contain many match-
ing words to pass the initial filter. However, for the
extraction of entailing fragments most of the match-
ing words are discarded and only the non-identical
fragments are stored, greatly reducing the overlap
problem. Experiments in Section 5 demonstrate
that a simple bag-of-words approach performs rather
poorly on the task, confirming that the extraction
method produces a diverse selection of fragments.
3http://www.cl.cam.ac.uk/~mr472/entailment/
14
Two annotators assigned a relation type to can-
didate pairs based on how well one fragment can
be substituted for the other in text while preserving
meaning (A ? B, A ? B, A ? B or A 6= B).
Cohen?s Kappa between the annotators was 0.88, in-
dicating very high agreement. Instances with dis-
agreement were then reviewed and replaced for the
final dataset.
Each fragment pair has two binary entailment de-
cisions (one in either direction) and the set is evenly
balanced, containing 100 entailment and 100 non-
entailment relations. An example sentence with the
first fragment is also included. Fragment sizes range
from 1 to 20 words, with the average of 2.86 words.
The system assigns a score to each entailment re-
lation, with higher values indicating higher confi-
dence in entailment. All the relations are ranked
based on their score, and average precision (AP) is
used to evaluate the performance:
AP =
1
R
N?
i=1
E(i)? CorrectUpTo(i)
i
where R is the number of correct entailment re-
lations, N is the number of possible relations in
the test set, E(i) is 1 if the i-th relation is en-
tailment in the gold standard and 0 otherwise, and
CorrectUpTo(i) is the number of correctly re-
turned entailment relations up to rank i. Average
precision assigns a higher score to systems which
rank correct entailment examples higher in the list.
As a secondary measure we also report the Break-
Even Point (BEP) which is defined as precision at
the rank where precision is equal to recall. Using
the previous annotation, this can also be calculated
as precision at rank R:
BEP =
CorrectUpTo(R)
R
BEP is a much more strict measure, treating the task
as binary classification and ignoring changes to the
ranks within the classes.
5 Results
The test set is balanced, therefore random guessing
would be expected to achieve an AP and BEP of
0.5 which can be regarded as the simplest (random)
baseline. Table 1 contains results for two more basic
approaches to the task. For the bag-of-words (BOW)
system, the score of A entailing B is the proportion
of words in B that are also contained in A.
Scorebow(A? B) =
|{b|b ? A,B}|
|{b|b ? B}|
We also tested entailment detection when using
only the directional distributional similarity between
fragments as it is commonly done for words. While
both of the systems perform better than random, the
results are much lower than those for more informed
methods. This indicates that even though there is
some lexical overlap between the fragments, it is not
enough to make good decisions about the entailment
relations.
System type AP BEP
Random baseline 0.500 0.500
BOW 0.657 0.610
Distributional similarity 0.645 0.480
Table 1: Results for basic approaches.
Table 2 contains the results for the system de-
scribed in Section 3. We start with the most basic
version and gradually add components. Using only
the intrinsic similarity, the system performs better
than any of the basic approaches, delivering 0.71 AP.
System type AP BEP
Intrinsic similarity only 0.710 0.680
+ Word ExtSim 0.754 0.710
+ Fragment ExtSim 0.801 0.710
+ Negation & hedging 0.831 0.720
+ Paraphrase check 0.841 0.720
Table 2: Results for the system described in Section 3.
Components are added incrementally.
Next, the extrinsic similarity between words is in-
cluded, raising the AP to 0.754. When the string-
level similarity fails, the added directional distri-
butional similarity helps in mapping semantically
equivalent words to each other.
The inclusion of extrinsic similarity between frag-
ments gives a further increase, with AP of 0.801.
The 4.5% increase shows that while fragments are
15
larger and occur less often in a corpus, their distribu-
tional similarity can still be used as a valuable com-
ponent to detect semantic similarity and entailment.
Checking for negation and hedge cues raises the
AP to 0.831. The performance is already high and
a 3% improvement shows that hedging and negation
affect fragment-level entailment and other compo-
nents do not manage to successfully capture this in-
formation.
Finally, applying the fragment-level check for
paraphrases with a more appropriate distributional
similarity measure, as described in Section 3.2, re-
turns an AP of 0.841. The results of this final con-
figuration are significantly different compared to the
initial system using only intrinsic similarity, accord-
ing to the Wilcoxon signed rank test at the level of
0.05.
The formula in Section 3 contains parameter ?
which can be tuned to adjust the balance of intrinsic
and extrinsic similarity. This can be done heuristi-
cally or through machine learning methods and dif-
ferent values can be used for fragments and words.
In order to investigate the effects of tuning on the
system, we tried all possible combinations of ?word
and ?fragment with values between 0 and 1 at incre-
ments of 0.05. Table 3 contains results for some of
these experiments.
?word ?fragment AP BEP
0.5 0.5 0.841 0.720
* 0.0 0.656 0.480
0.0 1.0 0.813 0.720
1.0 1.0 0.765 0.690
0.45 0.65 0.847 0.740
Table 3: Results of tuning the weights for intrinsic and
distributional similarity.
The best results were obtained with ?word = 0.45
and ?fragment = 0.65, resulting in 0.847 AP and
0.74 BEP. This shows that parameter tuning can im-
prove the results, but the 0.6% increase is modest
and a completely unsupervised approach can give
competitive results. In addition, the optimal values
of ? are close to 0.5, indicating that all four com-
ponents (intrinsic and distributional similarities be-
tween words and fragments) are all contributing to
the performance of the final system.
6 Previous work
Most work on entailment has focused on compar-
ing sentences or paragraphs. For example, Haghighi
et al (2005) represent sentences as directed depen-
dency graphs and use graph matching to measure se-
mantic overlap. This method also compares the de-
pendencies when calculating similarity, which sup-
ports incorporation of extra syntactic information.
Hickl et al (2006) combine lexico-syntactic features
and automatically acquired paraphrases to classify
entailing sentences. Lintean and Rus (2009) make
use of weighted dependencies and word semantics
to detect paraphrases. In addition to similarity they
look at dissimilarity between two sentences and use
their ratio as the confidence score for paraphrasing.
Lin and Pantel (2001) were one of the first to
extend the distributional hypothesis to dependency
paths to detect entailment between relations. Szpek-
tor et al (2004) describe the TEASE method for ex-
tracting entailing relation templates from the Web.
Szpektor and Dagan (2008) use the distributional
similarity of arguments to detect unary template en-
tailment, whilst Berant et al (2010) apply it to bi-
nary relations in focused entailment graphs.
Snow et al (2005) described a basic method of
syntactic pattern matching to automatically discover
word-level hypernym relations from text. The use of
directional distributional similarity measures to find
inference relations between single words is explored
by Kotlerman et al (2010). They propose new mea-
sures based on feature ranks and compare them with
existing ones for the tasks of lexical expansion and
text categorisation.
In contrast to current work, each of the ap-
proaches described above only focuses on detecting
entailment between specific subtypes of fragments
(either sentences, relations or words) and optimis-
ing the system for a single scenario. This means
only limited types of entailment relations are found
and they cannot be used for entailment generation
or compositional entailment detection as described
in Section 2.
MacCartney and Manning (2008) approach
sentence-level entailment detection by breaking the
problem into a sequence of atomic edits linking the
premise to the hypothesis. Entailment relations are
then predicted for each edit, propagated up through
16
a syntax tree and then used to compose the result-
ing entailment decision. However, their system fo-
cuses more on natural logic and uses a predefined set
of compositional rules to capture a subset of valid
inferences with high precision but low recall. It
also relies on a supervised classifier and information
from WordNet to reach the final entailment decision.
Androutsopoulos and Malakasiotis (2010) have
assembled a survey of different tasks and approaches
related to paraphrasing and entailment. They de-
scribe three different goals (paraphrase recogni-
tion, generation and extraction) and analyse various
methods for solving them.
7 Conclusion
Entailment detection systems are generally devel-
oped to work on specific text units ? either single
words, relations, or full sentences. While this re-
duces the complexity of the problem, it can also
lead to important information being disregarded. In
this paper we proposed a new task ? detecting en-
tailment relations between any kind of dependency
graph fragments. The definition of a fragment cov-
ers the language structures mentioned above and
also extends to others that have not been fully in-
vestigated in the context of entailment recognition
(such as multi-word constituents, predicates and ad-
juncts).
To perform entailment detection between various
types of dependency graph fragments, a new sys-
tem was built that combines the directional intrin-
sic and extrinsic similarities of two fragments to
reach a final score. Fragments which contain hedg-
ing or negation are identified and their score cal-
culation is inverted to better model the effect on
entailment. The extrinsic similarity is found with
two different distributional similarity measures, first
checking for symmetric similarity and then for di-
rectional containment of distributional features. The
system was evaluated on a manually constructed
dataset of fragment-level entailment relations from
the biomedical domain and each of the added meth-
ods improved the results.
Traditionally, the method for entailment recogni-
tion is chosen based on what appears optimal for
the task ? either structure matching or distributional
similarity. Our experiments show that the combina-
tion of both gives the best performance for all frag-
ment types. It is to be expected that single words will
benefit more from distributional measures while full
sentences get matched by their components. How-
ever, this separation is not strict and evidence from
both methods can be used to strengthen the decision.
The experiments confirmed that entailment be-
tween dependency graph fragments of various types
can be detected in a completely unsupervised set-
ting, without the need for specific resources or an-
notated training data. As our method can be applied
equally to any domain and requires only a large plain
text corpus, we believe it is a promising direction
for research in entailment detection. This can lead
to useful applications in biomedical information ex-
traction where manually annotated datasets are in
short supply.
We have shown that a unified approach can be
used to detect entailment relations between depen-
dency graph fragments. This allows for entail-
ment discovery among a wide range of fragment
types, including ones for which no specialised sys-
tems currently exist. The framework for fragment-
level entailment detection can be integrated into var-
ious applications that require identifying and rewrit-
ing semantically equivalent phrases - for example,
query expansion in IE and IR, text mining, sentence-
level entailment composition, relation extraction and
protein-protein interaction extraction.
References
Ion Androutsopoulos and Prodromos Malakasiotis.
2010. A survey of paraphrasing and textual entailment
methods. Journal of Artificial Intelligence Research,
38(7):135?187.
Roy Bar-Haim, Ido Dagan, Bill Dolan, Lisa Ferro, Danilo
Giampiccolo, Bernardo Magnini, and Idan Szpektor.
2006. The second pascal recognising textual entail-
ment challenge. In Proceedings of the Second PAS-
CAL Challenges Workshop on Recognising Textual
Entailment, pages 1?9. Citeseer.
Luisa Bentivogli, Elena Cabrio, Ido Dagan, Danilo Gi-
ampiccolo, Medea Lo Leggio, and Bernardo Magnini.
2010. Building Textual Entailment Specialized Data
Sets: a Methodology for Isolating Linguistic Phenom-
ena Relevant to Inference. In Proceedings of the Sev-
enth conference on International Language Resources
and Evaluation (LREC?10).
17
Jonathan Berant, Ido Dagan, and Jacob Goldberger.
2010. Global learning of focused entailment graphs.
In Proceedings of the 48th Annual Meeting of the Asso-
ciation for Computational Linguistics, number Section
6, pages 1220?1229. Association for Computational
Linguistics.
Ted Briscoe, John Carroll, and Rebecca Watson. 2006.
The second release of the RASP system. In Proceed-
ings of the COLING/ACL 2006 Interactive Presenta-
tion Sessions, number July, pages 77?80, Sydney, Aus-
tralia. Association for Computational Linguistics.
Daoud Clarke. 2009. Context-theoretic semantics for
natural language: an overview. In Proceedings of
the Workshop on Geometrical Models of Natural Lan-
guage Semantics, number March, pages 112?119. As-
sociation for Computational Linguistics.
James Richard Curran. 2003. From distributional to se-
mantic similarity. Ph.D. thesis, University of Edin-
burgh.
Lee R. Dice. 1945. Measures of the amount of ecologic
association between species. Ecology, 26(3):297?302.
Richa?rd Farkas, Veronika Vincze, Gyo?rgy Mo?ra, Ja`nos
Csirik, and Gyo?rgy Szarvas. 2010. The CoNLL-2010
Shared Task: Learning to Detect Hedges and their
Scope in Natural Language Text. In Proceedings of
the Fourteenth Conference on Computational Natural
Language Learning ? Shared Task, pages 1?12. As-
sociation for Computational Linguistics.
Aria D. Haghighi, Andrew Y. Ng, and Christopher D.
Manning. 2005. Robust textual inference via graph
matching. In Proceedings of the conference on Hu-
man Language Technology and Empirical Methods in
Natural Language Processing, Morristown, NJ, USA.
Association for Computational Linguistics.
Andrew Hickl, Jeremy Bensley, John Williams, Kirk
Roberts, Bryan Rink, and Ying Shi. 2006. Recog-
nizing textual entailment with LCC?s GROUNDHOG
system. In Proceedings of the Second PASCAL Chal-
lenges Workshop.
Lili Kotlerman, Ido Dagan, Idan Szpektor, and Maayan
Zhitomirsky-Geffet. 2010. Directional distributional
similarity for lexical inference. Natural Language En-
gineering, 16(04):359?389.
Sandra Ku?bler, Ryan McDonald, and Joakim Nivre.
2009. Dependency Parsing. Synthesis Lectures on Hu-
man Language Technologies, 2:1?127.
Dekang Lin and Patrick Pantel. 2001. Discovery of infer-
ence rules for question-answering. Natural Language
Engineering, 7(04):343?360.
Dekang Lin. 1998. Automatic retrieval and cluster-
ing of similar words. In Proceedings of the 17th in-
ternational conference on Computational linguistics-
Volume 2, pages 768?774. Association for Computa-
tional Linguistics.
Mihain C. Lintean and Vasile Rus. 2009. Para-
phrase Identification Using Weighted Dependencies
and Word Semantics. In Proceedings of the FLAIRS-
22, volume 22, pages 19?28.
Bill MacCartney and Christopher D. Manning. 2008.
Modeling semantic containment and exclusion in natu-
ral language inference. In Proceedings of the 22nd In-
ternational Conference on Computational Linguistics-
Volume 1, pages 521?528. Association for Computa-
tional Linguistics.
Roser Morante. 2009. Descriptive analysis of negation
cues in biomedical texts. In Proceedings of the Sev-
enth International Language Resources and Evalua-
tion (LREC10), pages 1429?1436.
Mark Sammons, V.G. Vinod Vydiswaran, and Dan Roth.
2010. Ask not what textual entailment can do for
you... In Proceedings of the Annual Meeting of the As-
sociation of Computational Linguistics (ACL), pages
1199?1208. Association for Computational Linguis-
tics.
Rion Snow, Daniel Jurafsky, and Andrew Y. Ng. 2005.
Learning syntactic patterns for automatic hypernym
discovery. In Advances in Neural Information Pro-
cessing Systems.
Idan Szpektor and Ido Dagan. 2008. Learning entail-
ment rules for unary templates. In Proceedings of the
22nd International Conference on Computational Lin-
guistics - COLING ?08, pages 849?856, Morristown,
NJ, USA. Association for Computational Linguistics.
Idan Szpektor, Hristo Tanev, Ido Dagan, and Bonaven-
tura Coppola. 2004. Scaling web-based acquisition of
entailment relations. In Proceedings of EMNLP, vol-
ume 4, pages 41?48.
Julie Weeds, David Weir, and Bill Keller. 2005. The dis-
tributional similarity of sub-parses. In Proceedings of
the ACL Workshop on Empirical Modeling of Semantic
Equivalence and Entailment, pages 7?12, Morristown,
NJ, USA. Association for Computational Linguistics.
18
