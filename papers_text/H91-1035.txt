F ixed and F lexib le Phrase Structure:  
Coord inat ion  in Tree Ad jo in ing Grammars  1 
Aravind K. Joshi and Yves Schabes 
Department of Computer and Information Science 
University of Pennsylvania 
Philadelphia, PA 19104 
Phrase-structure grammars assign a unique phrase struc- 
ture (constituency) to an unambiguous sentence. Thus, for 
example, John likes apples will be bracketed as follows (ig- 
noring the phrase labels and ignoring some brackets not 
essential for our present purpose): 
(1) (John (likes apples)) 
There are systems, however, for example, Combinatory 
Categorial Grammars (CCGs)(Steedman, 1990) which as- 
sign multiple structures to unambiguous strings. Thus CCG 
assigns the following two groupings to John likes apples: 
(2) (John (likes apples)) 
(3) ((John likes) apples) 
The work on CCG was presented by Mark Steedman in 
an earlier DARPA SLS Workshop (Steedman, 1989). 
In this paper, we show how a CCG-like account for coor- 
dination can be constructed in the framework of lexicalized 
tree-adjoining grammars (TAGs) (Joshi, 1987; Schabes et 
al., 1988; Schabes, 1990). 2. In particular, we show how a 
fixed constituency can be maintained at the level of the ele- 
mentary trees of lexicalized TAGs  and yet be able to achieve 
the kind of flexibility needed for dealing with the so-called 
non-constituents. This is the key significance of this contri- 
bution. In a CCG,  being a constituent is the same as being a 
function. We show that this need not be the case and stan- 
dard notions of constituency can be maintained. The key 
idea is that we use the lexicalized trees of TAG as structured 
categories with the associated functional types. Because of 
lack of space, we will illustrate our ideas by examples only. 
The justification in CCG for such multiple structures 
is their use in coordination and in defining intonational 
phrases. Thus the bracketing (2) is necessary for (4) and 
the bracketing (3) for (5). 
(4) (John ((likes apples) and (hates pears))) 
(5) (((John likes) and (Bill hates)) beans) 
Lexicalized TAGs  (with substitution and adjunction) are 
similar to CCGs  in the sense that for each lexical item the 
elementary tree(s) which is (are) anchored on that lexical 
item can be regarded as the (structured) category (cate- 
gories) associated with that item. Figure 1 and Figure 2 
give examples of elementary trees that can be found in lexi- 
con for a Lexicalized TAG.  The associated functional types 
are shown below each elementary tree. 
Also, (2) corresponds to the intonational phrasing if the 
previous context is (6) and (3) if the previous context is (7). 
(6) Who likes apples? 
(John (likes apples)) 
(7) What  does John like? 
((John likes) apples) 
IThis research is partially supported by Darpa grant N0014.85- 
K0018, ARO grant DAAL03-89-C-0031PRI and NSF grant-IRIS4- 
10413 A02. 
We are grateful to Jamie Henderson, Anthony Kroch, Mitch Marcus, 
Stuart Shieber, Mark Steedman and K. Vijay-Shanker for providing 
valuable comments. 
Furthermore, each tree can be interpreted as a func- 
tion on the types of arguments it requires. For example, 
we say that the category of the verb gave (see Figure 1) 
is the elementary tree associated with it and not the primi- 
tive category V; the functional interpretation of its category, 
NP ? NP  ? NP  ~ S, is a function expecting three trees 
rooted in NP and which returns an S-rooted tree. By com- 
bining elementary trees with substitution or adjunction, we 
can assign a structured category (the derived tree) and a 
functional interpretation to sequences of lexical items even 
in the cases when the sequence is discontinuous or when it 
does not define a constituent in the conventional sense. See 
2It is known that TAGs are weakly equivalent to CCGs, i.e., they 
both generate the same sets of strings but not strongly because they 
do not assign the same structural descriptions 
195  
Figure 3 for some examples. 
The coordination schema (&) combines two lexical strings 
with their structured categories and their functional types: 
(Ix, 0"z, n )  & (12, 0"2, r2) = (1, 0", r),  where: Ix, 12, 1 are lexi- 
cal strings; 0"z, 0"2, 0" are structured categories (trees); and 
rz, r2, r are functional types. 
The lexical strings in Figure 3 are John eats, eats cook- 
ies, thinks John eats, and gave NP D book. The first three 
strings are contiguous but the fourth string is not contigu- 
ous, in the sense that it is interrupted by one or more non- 
terminals, which are the argument positions for the asso- 
ciated functional type. We will say that the first three 
strings satisfy the Lexical String Contiguity (LSC) condi- 
tion and the fourth string does not satisfy LSC 3. Our struc- 
tured categories are like un-Curried functions. LSC allows 
us to achieve Currying in a certain sense. Henceforth we will 
require that the structured categories that enter into coor- 
dination as well as the structured category resulting from 
coordination always satisfy LSC. 
The coordination (Ix, 0"z, n )  & (12, 0"2, r2) succeeds if: 
? the lexical strings lz and 12 both sgtisfy LSC; 
? the functional types are identical (rl = r2 = r); 
? the least nodes dominating lx in 0"z and 12 in 0"2 have 
the same label. 
The resulting structured category, cr = az & 0"2, is ob- 
talned by: 
1. equating the corresponding shared arguments in 0"1 
and 0"2 (preserving linear precedence of arguments in 
al and 0"2;) 
2. coordinating at the least nodes dominating/1 and 12; 
3. collapsing the supertrees above the nodes at which 
coordination was made; 
4. selecting the argument positions uch that LSC holds 
for 0.; 
5. if the anchor of 0"2 is the same as the anchor if az, 
then the anchor of 0"2 is erased and equated with the 
anchor of 0.1 (the decision to erase the anchor of 0"2 is 
based on the fact that the complements of the anchor 
must always be in the appropriate direction, on the 
right for English). 
Now we will give a series of examples to il lustrate the 
coordination schema. Figure 4 shows how Mary a book and 
Susan a flower can be coordinated to derive sentences like: 
3LSC is not a syntact ic  onstraint .  It can be regarded as a phono- 
logical constraint  in a certain sense. More details will be provided in 
an expanded version of this paper  at a late date.  
(8) John gave Mary a book and Susan a flower 
In Figure 4, the tree corresponding to gave Mary a book 
and Susan a flower has been obtained by: 
1. equating the NP nodes in o"1 and 0.2; 
2. coordinating the VP nodes; 
3. collapsing the supertrees above the VP nodes; 
4. selecting the left most NP as argument. 
5. erasing the anchor (gave) in 0"2 and equating the an- 
chor node in 0"2 with the V node in 0.1. 
Similarly, the sentence, 
(9) John likes and Bill hates bananas 
is obtained by coordinating John likes and Bill hates (see 
Figure 5). 
Note that John likes and Bill hates have been 'coordi- 
nated' but John likes and Bill hates have not been grouped 
together (i.e., bracketed as constituents). The phrase struc- 
ture of the elementary trees has been preserved. This is 
in contrast o the analysis provided by CCG. CCG groups 
John likes and Bill hates as constituents and then invokes 
the coordination schema X = XandX where X is a con- 
stituent. John likes is turned into a constituent in a CCG 
by 'type-raising' John to a category which essentially en- 
codes the information that John is in the subject position. 
In the elementary tree o'1 the structure already encodes the 
information that whatever is substituted for the leftmost 
NP in 0"1 is in the subject position. 
Some additional examples follow. 
(10) John eats cookies and drinks beer (see Figure 6) 
(11) John cooked and ate the beans (see Figure 7) 
Examples in which o'1 and 0"2 invoke more than one ele- 
mentary tree can also be handled in a similarly fashion. We 
will only give the examples and not show the trees due to 
the lack of space. 
(12) John thinks Mary and Bill believes Susan will 
win .  
(13) John gave Mart/three and Susan \]our recently 
published novels. 
So far, we have not said anything about the so-called 
gapped sentences, for example 
196 
(14) John likes apples and Bill pears. 
It can be shown that the gapped sentences and other 
sentences related to gapped sentences have to be obtained 
by assuming that the left conjunct (al) is built up to S, i.e., 
its functional type is a constant, S. A structured category, 
a, (where the functional type is a constant S) can be viewed 
retroactively as corresponding to various functional types, 
for example, NP x l ikes x NP  ~ S. 
Note that this functional type cannot be obtained by 
staring with er in Figure 2, where the functional type is 
NP x NP  --~ S. 
We now take a2 to be of the same functional type as ax 
, i.e., NP x l ikes x NP  --~ S and instantiate the coordina- 
tion schema s before. Note that the lexical anchor of a2 is 
guaranteed to be the same as the lexical anchor of al be- 
cause both have the functional type NP x l ikes x NP  --~ S. 
Hence, the anchor in a2 will be erased following the speci- 
fication in the coordination schema described earlier 4. We 
will not discuss all the details of this retroactive approach 
due to lack of space. This approach also handles entences 
which are closely related to gapping, for example, 
(15) John likes apples and pears (too) 
The too is introduced to show that the interpretation is 
different from the case where apples and pears is obtained 
by NP and NP  coordination. In (15) we have S and S 
coordination. 
In summary, we have shown how constituency and func- 
tional types can be kept apart and still the kind of flexibility 
in the constituent structures that CCG allow can be real- 
ized by using lexicalized TAG with an associated coordina- 
tion schema. In an expanded version of this paper, we will 
describe several details concerning (1) how this approach 
extends to coordination with cross-serial dependencies (as 
in Dutch) as well as as to languages with constituent orders 
different from English, (2) some processing implications and 
(3) the computation of the semantic interpretation using 
the machinery of synchronous TAG (Shieber and Schabes, 
1990). 
REFERENCES 
Aravlnd K. Joshi. 1987. An Introduction toTree Adjoining 
Grammars. In A. Manaster-Ramer, ditor, Mathematics of 
Language. John Benjarnins, Amsterdam. 
4This approach is inspired by Steedman's approach to gapping, 
which depends on type-raising. Steedman requires an additional stip- 
ulation to rule out certain unwanted consequences of type-raising. It 
appears that in our approach this problem can be avoided. Space 
does not permit us to give all the details. 
Yves Schabes, Anne Abeill~, and Aravind K. Joshi. 1988. 
Parsing strategies with 'lexlcalized' grammars: Applica- 
tion to tree adjoining rammars. In Proceedings of the 
12 th International Conference on Computational Linguis- 
tics (COLING'88), Budapest, Hungary, August. 
Yves Schabes. 1990. Mathematical and Computational As- 
pects of Lexicalized Grammars. Ph.D. thesis, University of 
Pennsylvania, Philadelphia, PA, August. Available as tech- 
nicM report (MS-CIS-90-48, LINC LAB179) from the De- 
partment of Computer Science. 
Shieber, Stuart and Schabes, Yves, 1990. Synchronous Tree 
Adjoining Grammars. In Proceedings of the 13 th Inter- 
national Conference on Computational Linguistics (COL- 
ING'90). Helsinki. 
Mark Steedrnan. 1989. Intonation and syntax in spoken 
Language systems. In DARPA Speech and Natural Language 
Workshop, Cape Cod, MA, October. 
Mark Steed_man. 1990. Gapping as constituent coordina- 
tion. Linguistics and Philosophy, 13:207-263, April. 
NP NP 
I I 
D N N 
I I I 
a cookies John 
D NP NP  
S 
NP,L 
V NP$ NP. l, 
I 
gave 
NP ? NP ? NP --~ S 
NP N VP 
A A A 
D$ N ADJ N* VP* ADV 
I I I 
book tall quickly 
D --~ NP N --g N VP ~ VP 
S S k 
A 
V NP$ V S* 
I I 
eats thinks 
NP x NP  --~ S NP  x S -~ S 
Figure 1: Examples of elementary trees with their functional 
type. 
a: 
S 
A 
NP$ VP 
v NP$ 
I 
likes 
NP x NP  --~ S 
Figure 2: Structured category for likes 
197 
S 
A 
s NP$ VP 
A 
NP VP V NP 
N V NP$ eats N 
I I I 
John eats cookies 
NP --~ S NP .-9S 
S 
N'$ vP s 
V S 
thinks NP VP V NP$ NP 
I A I A N V NP$ D,L N gave 
I I I 
John eats book 
NP xNP --~ S NP xNP xD--~S 
F igure  3: Examples of derived trees with their functional types. 
Or1: S VP ?r2: S ~Y: ~~'?A '~~d V P 
vo NP NP V0 NP NP V0 . .~  NP_y NP NP 
I I A I I A I , / \  I A 
gave N D N gave N D N gave N D N N D N 
I I I I I I I I l I I I 
Mary a book Susan a flower Mary a book Susan a flower 
11: gave Mary a book 12: gave Susan a flower h gave Mary a book and Susan a flower 
xI: NP ---~ S x2: NP --~ S ~:: NP --~ S 
F igure  4: Coordination of Mary a book and Susan a flower. 
S S 
S S and S 
NP VP NP VP NP VP NP VP 
N N 
I I 
John likes Bill hates John likes Bill hates 
11: John likes 12: Bill hates 
xI: NP -9S  ~2: NP  --~ S 
l: John likes and Bill hates 
x: NP --g S 
F igure  5: Coordination of John likes and Bill hates. 
198 
at: 02: 
S VP S 
V NP V NP 
I I I I 
cats N drinks N 
I I 
cookies beer 
11: eats cookies 12: drinks beer 
x l :  NP --e S x2: NP -+ S 
S 
NP, I. vp  
VP and VP  
V NP  V NP  
I I I I 
cats N drinks N 
I I 
cookies beer 
h eats cookies and drinks beer 
x: NP ---~ S 
Figure 6: Coordination of e=ts cookies and drinks beer in (10). 
~ I : ~2: ~: 
S S $ 
VP NP$ VP 
V NP$ 
cooked ate V and V 
l I 
cooked ate 
11: cooked 12: ate h cooked and ate 
xl  : NP  x NP --~ S x2: NP  ? NP -o S x: NP ? NP -o S 
Figure 7: Coordination of cooked and ate in (11). 
199 
