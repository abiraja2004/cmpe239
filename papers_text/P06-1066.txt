Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL, pages 521?528,
Sydney, July 2006. c?2006 Association for Computational Linguistics
Maximum Entropy Based Phrase Reordering
Model for Statistical Machine Translation
Deyi Xiong
Institute of Computing Technology
Chinese Academy of Sciences
Beijing, China, 100080
Graduate School of Chinese Academy of Sciences
dyxiong@ict.ac.cn
Qun Liu and Shouxun Lin
Institute of Computing Technology
Chinese Academy of Sciences
Beijing, China, 100080
{liuqun, sxlin}@ict.ac.cn
Abstract
We propose a novel reordering model for
phrase-based statistical machine transla-
tion (SMT) that uses a maximum entropy
(MaxEnt) model to predicate reorderings
of neighbor blocks (phrase pairs). The
model provides content-dependent, hier-
archical phrasal reordering with general-
ization based on features automatically
learned from a real-world bitext. We
present an algorithm to extract all reorder-
ing events of neighbor blocks from bilin-
gual data. In our experiments on Chinese-
to-English translation, this MaxEnt-based
reordering model obtains significant im-
provements in BLEU score on the NIST
MT-05 and IWSLT-04 tasks.
1 Introduction
Phrase reordering is of great importance for
phrase-based SMT systems and becoming an ac-
tive area of research recently. Compared with
word-based SMT systems, phrase-based systems
can easily address reorderings of words within
phrases. However, at the phrase level, reordering
is still a computationally expensive problem just
like reordering at the word level (Knight, 1999).
Many systems use very simple models to re-
order phrases 1. One is distortion model (Och
and Ney, 2004; Koehn et al, 2003) which penal-
izes translations according to their jump distance
instead of their content. For example, if N words
are skipped, a penalty of N will be paid regard-
less of which words are reordered. This model
takes the risk of penalizing long distance jumps
1In this paper, we focus our discussions on phrases that
are not necessarily aligned to syntactic constituent boundary.
which are common between two languages with
very different orders. Another simple model is flat
reordering model (Wu, 1996; Zens et al, 2004;
Kumar et al, 2005) which is not content depen-
dent either. Flat model assigns constant probabili-
ties for monotone order and non-monotone order.
The two probabilities can be set to prefer mono-
tone or non-monotone orientations depending on
the language pairs.
In view of content-independency of the dis-
tortion and flat reordering models, several re-
searchers (Och et al, 2004; Tillmann, 2004; Ku-
mar et al, 2005; Koehn et al, 2005) proposed a
more powerful model called lexicalized reorder-
ing model that is phrase dependent. Lexicalized
reordering model learns local orientations (mono-
tone or non-monotone) with probabilities for each
bilingual phrase from training data. During de-
coding, the model attempts to finding a Viterbi lo-
cal orientation sequence. Performance gains have
been reported for systems with lexicalized reorder-
ing model. However, since reorderings are re-
lated to concrete phrases, researchers have to de-
sign their systems carefully in order not to cause
other problems, e.g. the data sparseness problem.
Another smart reordering model was proposed
by Chiang (2005). In his approach, phrases are re-
organized into hierarchical ones by reducing sub-
phrases to variables. This template-based scheme
not only captures the reorderings of phrases, but
also integrates some phrasal generalizations into
the global model.
In this paper, we propose a novel solution for
phrasal reordering. Here, under the ITG constraint
(Wu, 1997; Zens et al, 2004), we need to con-
sider just two kinds of reorderings, straight and
inverted between two consecutive blocks. There-
fore reordering can be modelled as a problem of
521
classification with only two labels, straight and
inverted. In this paper, we build a maximum en-
tropy based classification model as the reordering
model. Different from lexicalized reordering, we
do not use the whole block as reordering evidence,
but only features extracted from blocks. This is
more flexible. It makes our model reorder any
blocks, observed in training or not. The whole
maximum entropy based reordering model is em-
bedded inside a log-linear phrase-based model of
translation. Following the Bracketing Transduc-
tion Grammar (BTG) (Wu, 1996), we built a
CKY-style decoder for our system, which makes
it possible to reorder phrases hierarchically.
To create a maximum entropy based reordering
model, the first step is learning reordering exam-
ples from training data, similar to the lexicalized
reordering model. But in our way, any evidences
of reorderings will be extracted, not limited to re-
orderings of bilingual phrases of length less than a
predefined number of words. Secondly, features
will be extracted from reordering examples ac-
cording to feature templates. Finally, a maximum
entropy classifier will be trained on the features.
In this paper we describe our system and the
MaxEnt-based reordering model with the associ-
ated algorithm. We also present experiments that
indicate that the MaxEnt-based reordering model
improves translation significantly compared with
other reordering approaches and a state-of-the-art
distortion-based system (Koehn, 2004).
2 System Overview
2.1 Model
Under the BTG scheme, translation is more
like monolingual parsing through derivations.
Throughout the translation procedure, three rules
are used to derive the translation
A [ ]? (A1, A2) (1)
A ? ?? (A1, A2) (2)
A ? (x, y) (3)
During decoding, the source sentence is seg-
mented into a sequence of phrases as in a standard
phrase-based model. Then the lexical rule (3) 2 is
2Currently, we restrict phrases x and y not to be null.
Therefore neither deletion nor insertion is carried out during
decoding. However, these operations are to be considered in
our future version of model.
used to translate source phrase y into target phrase
x and generate a block A. Later, the straight rule
(1) merges two consecutive blocks into a single
larger block in the straight order; while the in-
verted rule (2) merges them in the inverted order.
These two merging rules will be used continuously
until the whole source sentence is covered. When
the translation is finished, a tree indicating the hi-
erarchical segmentation of the source sentence is
also produced.
In the following, we will define the model in
a straight way, not in the dynamic programming
recursion way used by (Wu, 1996; Zens et al,
2004). We focus on defining the probabilities of
different rules by separating different features (in-
cluding the language model) out from the rule
probabilities and organizing them in a log-linear
form. This straight way makes it clear how rules
are used and what they depend on.
For the two merging rules straight and inverted,
applying them on two consecutive blocks A1 and
A2 is assigned a probability Prm(A)
Prm(A) = ??? ? 4?LMpLM (A1,A2) (4)
where the ? is the reordering score of block A1
and A2, ?? is its weight, and 4pLM (A1,A2) is the
increment of the language model score of the two
blocks according to their final order, ?LM is its
weight.
For the lexical rule, applying it is assigned a
probability Prl(A)
Prl(A) = p(x|y)?1 ? p(y|x)?2 ? plex(x|y)?3
?plex(y|x)?4 ? exp(1)?5 ? exp(|x|)?6
?p?LMLM (x) (5)
where p(?) are the phrase translation probabilities
in both directions, plex(?) are the lexical transla-
tion probabilities in both directions, and exp(1)
and exp(|x|) are the phrase penalty and word
penalty, respectively. These features are very com-
mon in state-of-the-art systems (Koehn et al,
2005; Chiang, 2005) and ?s are weights of fea-
tures.
For the reordering model ?, we define it on the
two consecutive blocks A1 and A2 and their order
o ? {straight, inverted}
? = f(o,A1, A2) (6)
Under this framework, different reordering mod-
els can be designed. In fact, we defined four re-
ordering models in our experiments. The first one
522
is NONE, meaning no explicit reordering features
at all. We set ? to 1 for all different pairs of
blocks and their orders. So the phrasal reorder-
ing is totally dependent on the language model.
This model is obviously different from the mono-
tone search, which does not use the inverted rule at
all. The second one is a distortion style reordering
model, which is formulated as
? =
{
exp(0), o = straight
exp(|A1|) + (|A2|), o = inverted
where |Ai| denotes the number of words on the
source side of blocks. When ?? < 0, this de-
sign will penalize those non-monotone transla-
tions. The third one is a flat reordering model,
which assigns probabilities for the straight and in-
verted order. It is formulated as
? =
{
pm, o = straight
1? pm, o = inverted
In our experiments on Chinese-English tasks, the
probability for the straight order is set at pm =
0.95. This is because word order in Chinese and
English is usually similar. The last one is the maxi-
mum entropy based reordering model proposed by
us, which will be described in the next section.
We define a derivation D as a sequence of appli-
cations of rules (1) ? (3), and let c(D) and e(D)
be the Chinese and English yields of D. The prob-
ability of a derivation D is
Pr(D) =
?
i
Pr(i) (7)
where Pr(i) is the probability of the ith applica-
tion of rules. Given an input sentence c, the final
translation e? is derived from the best derivation
D?
D? = argmax
c(D)=c
Pr(D)
e? = e(D?) (8)
2.2 Decoder
We developed a CKY style decoder that employs a
beam search algorithm, similar to the one by Chi-
ang (2005). The decoder finds the best derivation
that generates the input sentence and its transla-
tion. From the best derivation, the best English e?
is produced.
Given a source sentence c, firstly we initiate the
chart with phrases from phrase translation table
by applying the lexical rule. Then for each cell
that spans from i to j on the source side, all pos-
sible derivations spanning from i to j are gener-
ated. Our algorithm guarantees that any sub-cells
within (i, j) have been expanded before cell (i, j)
is expanded. Therefore the way to generate deriva-
tions in cell (i, j) is to merge derivations from
any two neighbor sub-cells. This combination is
done by applying the straight and inverted rules.
Each application of these two rules will generate
a new derivation covering cell (i, j). The score of
the new generated derivation is derived from the
scores of its two sub-derivations, reordering model
score and the increment of the language model
score according to the Equation (4). When the
whole input sentence is covered, the decoding is
over.
Pruning of the search space is very important for
the decoder. We use three pruning ways. The first
one is recombination. When two derivations in
the same cell have the same w leftmost/rightmost
words on the English yields, where w depends on
the order of the language model, they will be re-
combined by discarding the derivation with lower
score. The second one is the threshold pruning
which discards derivations that have a score worse
than ? times the best score in the same cell. The
last one is the histogram pruning which only keeps
the top n best derivations for each cell. In all our
experiments, we set n = 40, ? = 0.5 to get a
tradeoff between speed and performance in the de-
velopment set.
Another feature of our decoder is the k-best list
generation. The k-best list is very important for
the minimum error rate training (Och, 2003a)
which is used for tuning the weights ? for our
model. We use a very lazy algorithm for the k-best
list generation, which runs two phases similarly to
the one by Huang et al (2005). In the first phase,
the decoder runs as usual except that it keeps some
information of weaker derivations which are to be
discarded during recombination. This will gener-
ate not only the first-best of final derivation but
also a shared forest. In the second phase, the
lazy algorithm runs recursively on the shared for-
est. It finds the second-best of the final deriva-
tion, which makes its children to find their second-
best, and children?s children?s second-best, until
the leaf node?s second-best. Then it finds the third-
best, forth-best, and so on. In all our experiments,
we set k = 200.
523
The decoder is implemented in C++. Using the
pruning settings described above, without the k-
best list generation, it takes about 6 seconds to
translate a sentence of average length 28.3 words
on a 2GHz Linux system with 4G RAM memory.
3 Maximum Entropy Based Reordering
Model
In this section, we discuss how to create a max-
imum entropy based reordering model. As de-
scribed above, we defined the reordering model ?
on the three factors: order o, block A1 and block
A2. The central problem is, given two neighbor
blocks A1 and A2, how to predicate their order
o ? {straight, inverted}. This is a typical prob-
lem of two-class classification. To be consistent
with the whole model, the conditional probabil-
ity p(o|A1, A2) is calculated. A simple way to
compute this probability is to take counts from the
training data and then to use the maximum likeli-
hood estimate (MLE)
p(o|A1, A2) = Count(o,A
1, A2)
Count(A1, A2) (9)
The similar way is used by lexicalized reordering
model. However, in our model this way can?t work
because blocks become larger and larger due to us-
ing the merging rules, and finally unseen in the
training data. This means we can not use blocks
as direct reordering evidences.
A good way to this problem is to use features of
blocks as reordering evidences. Good features can
not only capture reorderings, avoid sparseness, but
also integrate generalizations. It is very straight
to use maximum entropy model to integrate fea-
tures to predicate reorderings of blocks. Under the
MaxEnt model, we have
? = p?(o|A1, A2) = exp(
?
i ?ihi(o,A1, A2))?
o exp(
?
i ?ihi(o,A1, A2))(10)
where the functions hi ? {0, 1} are model features
and the ?i are weights of the model features which
can be trained by different algorithms (Malouf,
2002).
3.1 Reordering Example Extraction
Algorithm
The input for the algorithm is a bilingual corpus
with high-precision word alignments. We obtain
the word alignments using the way of Koehn et al
(2005). After running GIZA++ (Och and Ney,
target
source
b1
b2
b3
b4
c1
c2
Figure 1: The bold dots are corners. The ar-
rows from the corners are their links. Corner c1 is
shared by block b1 and b2, which in turn are linked
by the STRAIGHT links, bottomleft and topright
of c1. Similarly, block b3 and b4 are linked by the
INVERTED links, topleft and bottomright of c2.
2000) in both directions, we apply the ?grow-
diag-final? refinement rule on the intersection
alignments for each sentence pair.
Before we introduce this algorithm, we intro-
duce some formal definitions. The first one is
block which is a pair of source and target contigu-
ous sequences of words
b = (si2i1 , t
j2
j1)
b must be consistent with the word alignment M
?(i, j) ? M, i1 ? i ? i2 ? j1 ? j ? j2
This definition is similar to that of bilingual phrase
except that there is no length limitation over block.
A reordering example is a triple of (o, b1, b2)
where b1 and b2 are two neighbor blocks and o
is the order between them. We define each vertex
of block as corner. Each corner has four links in
four directions: topright, topleft, bottomright, bot-
tomleft, and each link links a set of blocks which
have the corner as their vertex. The topright and
bottomleft link blocks with the straight order, so
we call them STRAIGHT links. Similarly, we call
the topleft and bottomright INVERTED links since
they link blocks with the inverted order. For con-
venience, we use b ?? L to denote that block b
is linked by the link L. Note that the STRAIGHT
links can not coexist with the INVERTED links.
These definitions are illustrated in Figure 1.
The reordering example extraction algorithm is
shown in Figure 2. The basic idea behind this al-
gorithm is to register all neighbor blocks to the
associated links of corners which are shared by
them. To do this, we keep an array to record link
524
1: Input: sentence pair (s, t) and their alignment M
2: < := ?
3: for each span (i1, i2) ? s do
4: find block b = (si2i1 , t
j2
j1) that is consistent with M
5: Extend block b on the target boundary with one possi-
ble non-aligned word to get blocks E(b)
6: for each block b? ? b?E(b) do
7: Register b? to the links of four corners of it
8: end for
9: end for
10: for each corner C in the matrix M do
11: if STRAIGHT links exist then
12: < := <?{(straight, b1, b2)},
b1 ?? C.bottomleft, b2 ?? C.topright
13: else if INVERTED links exist then
14: < := <?{(inverted, b1, b2)},
b1 ?? C.topleft, b2 ?? C.bottomright
15: end if
16: end for
17: Output: reordering examples <
Figure 2: Reordering Example Extraction Algo-
rithm.
information of corners when extracting blocks.
Line 4 and 5 are similar to the phrase extraction
algorithm by Och (2003b). Different from Och,
we just extend one word which is aligned to null
on the boundary of target side. If we put some
length limitation over the extracted blocks and out-
put them, we get bilingual phrases used in standard
phrase-based SMT systems and also in our sys-
tem. Line 7 updates all links associated with the
current block. You can attach the current block
to each of these links. However this will increase
reordering examples greatly, especially those with
the straight order. In our Experiments, we just at-
tach the smallest blocks to the STRAIGHT links,
and the largest blocks to the INVERTED links.
This will keep the number of reordering examples
acceptable but without performance degradation.
Line 12 and 14 extract reordering examples.
3.2 Features
With the extracted reordering examples, we can
obtain features for our MaxEnt-based reordering
model. We design two kinds of features, lexi-
cal features and collocation features. For a block
b = (s, t), we use s1 to denote the first word of the
source s, t1 to denote the first word of the target t.
Lexical features are defined on the single word
s1 or t1. Collocation features are defined on the
combination s1 or t1 between two blocks b1 and
b2. Three kinds of combinations are used. The first
one is source collocation, b1.s1&b2.s1. The sec-
ond is target collocation, b1.t1&b2.t1. The last one
hi(o, b1, b2) =
{ 1, b1.t1 = E1, o = O
0, otherwise
hj(o, b1, b2) =
{ 1, b1.t1 = E1, b2.t1 = E2, o = O
0, otherwise
Figure 3: MaxEnt-based reordering feature tem-
plates. The first one is a lexical feature, and the
second one is a target collocation feature, where
Ei are English words, O ? {straight, inverted}.
is block collocation, b1.s1&b1.t1 and b2.s1&b2.t1.
The templates for the lexical feature and the collo-
cation feature are shown in Figure 3.
Why do we use the first words as features?
These words are nicely at the boundary of blocks.
One of assumptions of phrase-based SMT is that
phrase cohere across two languages (Fox, 2002),
which means phrases in one language tend to be
moved together during translation. This indicates
that boundary words of blocks may keep informa-
tion for their movements/reorderings. To test this
hypothesis, we calculate the information gain ra-
tio (IGR) for boundary words as well as the whole
blocks against the order on the reordering exam-
ples extracted by the algorithm described above.
The IGR is the measure used in the decision tree
learning to select features (Quinlan, 1993). It
represents how precisely the feature predicate the
class. For feature f and class c, the IGR(f, c)
IGR(f, c) = En(c)? En(c|f)En(f) (11)
where En(?) is the entropy and En(?|?)
is the conditional entropy. To our sur-
prise, the IGR for the four boundary words
(IGR(?b1.s1, b2.s1, b1.t1, b2.t1?, order) =
0.2637) is very close to that for the two blocks
together (IGR(?b1, b2?, order) = 0.2655).
Although our reordering examples do not cover
all reordering events in the training data, this
result shows that boundary words do provide
some clues for predicating reorderings.
4 Experiments
We carried out experiments to compare against
various reordering models and systems to demon-
strate the competitiveness of MaxEnt-based re-
ordering:
1. Monotone search: the inverted rule is not
used.
525
2. Reordering variants: the NONE, distortion
and flat reordering models described in Sec-
tion 2.1.
3. Pharaoh: A state-of-the-art distortion-based
decoder (Koehn, 2004).
4.1 Corpus
Our experiments were made on two Chinese-to-
English translation tasks: NIST MT-05 (news do-
main) and IWSLT-04 (travel dialogue domain).
NIST MT-05. In this task, the bilingual train-
ing data comes from the FBIS corpus with 7.06M
Chinese words and 9.15M English words. The tri-
gram language model training data consists of En-
glish texts mostly derived from the English side
of the UN corpus (catalog number LDC2004E12),
which totally contains 81M English words. For the
efficiency of minimum error rate training, we built
our development set using sentences of length at
most 50 characters from the NIST MT-02 evalua-
tion test data.
IWSLT-04. For this task, our experiments were
carried out on the small data track. Both the
bilingual training data and the trigram language
model training data are restricted to the supplied
corpus, which contains 20k sentences, 179k Chi-
nese words and 157k English words. We used the
CSTAR 2003 test set consisting of 506 sentence
pairs as development set.
4.2 Training
We obtained high-precision word alignments us-
ing the way described in Section 3.1. Then we
ran our reordering example extraction algorithm to
output blocks of length at most 7 words on the Chi-
nese side together with their internal alignments.
We also limited the length ratio between the target
and source language (max(|s|, |t|)/min(|s|, |t|))
to 3. After extracting phrases, we calculated the
phrase translation probabilities and lexical transla-
tion probabilities in both directions for each bilin-
gual phrase.
For the minimum-error-rate training, we re-
implemented Venugopal?s trainer 3 (Venugopal
et al, 2005) in C++. For all experiments, we ran
this trainer with the decoder iteratively to tune the
weights ?s to maximize the BLEU score on the
development set.
3See http://www.cs.cmu.edu/ ashishv/mer.html. This is a
Matlab implementation.
Pharaoh
We shared the same phrase translation tables
between Pharaoh and our system since the two
systems use the same features of phrases. In fact,
we extracted more phrases than Pharaoh?s trainer
with its default settings. And we also used our re-
implemented trainer to tune lambdas of Pharaoh
to maximize its BLEU score. During decoding,
we pruned the phrase table with b = 100 (default
20), pruned the chart with n = 100, ? = 10?5
(default setting), and limited distortions to 4
(default 0).
MaxEnt-based Reordering Model
We firstly ran our reordering example extraction
algorithm on the bilingual training data without
any length limitations to obtain reordering ex-
amples and then extracted features from these
examples. In the task of NIST MT-05, we
obtained about 2.7M reordering examples with
the straight order, and 367K with the inverted
order, from which 112K lexical features and
1.7M collocation features after deleting those
with one occurrence were extracted. In the task
of IWSLT-04, we obtained 79.5k reordering
examples with the straight order, 9.3k with the
inverted order, from which 16.9K lexical features
and 89.6K collocation features after deleting those
with one occurrence were extracted. Finally, we
ran the MaxEnt toolkit by Zhang 4 to tune the
feature weights. We set iteration number to 100
and Gaussian prior to 1 for avoiding overfitting.
4.3 Results
We dropped unknown words (Koehn et al, 2005)
of translations for both tasks before evaluating
their BLEU scores. To be consistent with the
official evaluation criterions of both tasks, case-
sensitive BLEU-4 scores were computed For the
NIST MT-05 task and case-insensitive BLEU-4
scores were computed for the IWSLT-04 task 5.
Experimental results on both tasks are shown in
Table 1. Italic numbers refer to results for which
the difference to the best result (indicated in bold)
is not statistically significant. For all scores, we
also show the 95% confidence intervals computed
using Zhang?s significant tester (Zhang et al,
2004) which was modified to conform to NIST?s
4See http://homepages.inf.ed.ac.uk/s0450736
/maxent toolkit.html.
5Note that the evaluation criterion of IWSLT-04 is not to-
tally matched since we didn?t remove punctuation marks.
526
definition of the BLEU brevity penalty.
We observe that if phrasal reordering is totally
dependent on the language model (NONE) we
get the worst performance, even worse than the
monotone search. This indicates that our language
models were not strong to discriminate between
straight orders and inverted orders. The flat and
distortion reordering models (Row 3 and 4) show
similar performance with Pharaoh. Although they
are not dependent on phrases, they really reorder
phrases with penalties to wrong orders supported
by the language model and therefore outperform
the monotone search. In row 6, only lexical fea-
tures are used for the MaxEnt-based reordering
model; while row 7 uses lexical features and col-
location features. On both tasks, we observe that
various reordering approaches show similar and
stable performance ranks in different domains and
the MaxEnt-based reordering models achieve the
best performance among them. Using all features
for the MaxEnt model (lex + col) is marginally
better than using only lex features (lex).
4.4 Scaling to Large Bitexts
In the experiments described above, collocation
features do not make great contributions to the per-
formance improvement but make the total num-
ber of features increase greatly. This is a prob-
lem for MaxEnt parameter estimation if it is scaled
to large bitexts. Therefore, for the integration of
MaxEnt-based phrase reordering model in the sys-
tem trained on large bitexts, we remove colloca-
tion features and only use lexical features from
the last words of blocks (similar to those from the
first words of blocks with similar performance).
This time the bilingual training data contain 2.4M
sentence pairs (68.1M Chinese words and 73.8M
English words) and two trigram language models
are used. One is trained on the English side of
the bilingual training data. The other is trained on
the Xinhua portion of the Gigaword corpus with
181.1M words. We also use some rules to trans-
late numbers, time expressions and Chinese per-
son names. The new Bleu score on NIST MT-05
is 0.291 which is very promising.
5 Discussion and Future Work
In this paper we presented a MaxEnt-based phrase
reordering model for SMT. We used lexical fea-
tures and collocation features from boundary
words of blocks to predicate reorderings of neigh-
Systems NIST MT-05 IWSLT-04
monotone 20.1 ? 0.8 37.8 ? 3.2
NONE 19.6 ? 0.8 36.3 ? 2.9
Distortion 20.9 ? 0.8 38.8 ? 3.0
Flat 20.5 ? 0.8 38.7 ? 2.8
Pharaoh 20.8 ? 0.8 38.9 ? 3.3
MaxEnt (lex) 22.0 ? 0.8 42.4 ? 3.3
MaxEnt (lex + col) 22.2 ? 0.8 42.8 ? 3.3
Table 1: BLEU-4 scores (%) with the 95% confi-
dence intervals. Italic numbers refer to results for
which the difference to the best result (indicated in
bold) is not statistically significant.
bor blocks. Experiments on standard Chinese-
English translation tasks from two different do-
mains showed that our method achieves a signif-
icant improvement over the distortion/flat reorder-
ing models.
Traditional distortion/flat-based SMT transla-
tion systems are good for learning phrase transla-
tion pairs, but learn nothing for phrasal reorder-
ings from real-world data. This is our original
motivation for designing a new reordering model,
which can learn reorderings from training data just
like learning phrasal translations. Lexicalized re-
ordering model learns reorderings from training
data, but it binds reorderings to individual concrete
phrases, which restricts the model to reorderings
of phrases seen in training data. On the contrary,
the MaxEnt-based reordering model is not limited
by this constraint since it is based on features of
phrase, not phrase itself. It can be easily general-
ized to reorder unseen phrases provided that some
features are fired on these phrases.
Another advantage of the MaxEnt-based re-
ordering model is that it can take more fea-
tures into reordering, even though they are non-
independent. Tillmann et. al (2005) also use a
MaxEnt model to integrate various features. The
difference is that they use the MaxEnt model to
predict not only orders but also blocks. To do that,
it is necessary for the MaxEnt model to incorpo-
rate real-valued features such as the block trans-
lation probability and the language model proba-
bility. Due to the expensive computation, a local
model is built. However, our MaxEnt model is just
a module of the whole log-linear model of transla-
tion which uses its score as a real-valued feature.
The modularity afforded by this design does not
incur any computation problems, and make it eas-
527
ier to update one sub-model with other modules
unchanged.
Beyond the MaxEnt-based reordering model,
another feature deserving attention in our system
is the CKY style decoder which observes the ITG.
This is different from the work of Zens et. al.
(2004). In their approach, translation is generated
linearly, word by word and phrase by phrase in a
traditional way with respect to the incorporation
of the language model. It can be said that their de-
coder did not violate the ITG constraints but not
that it observed the ITG. The ITG not only de-
creases reorderings greatly but also makes reorder-
ing hierarchical. Hierarchical reordering is more
meaningful for languages which are organized hi-
erarchically. From this point, our decoder is simi-
lar to the work by Chiang (2005).
The future work is to investigate other valuable
features, e.g. binary features that explain blocks
from the syntactical view. We think that there is
still room for improvement if more contributing
features are used.
Acknowledgements
This work was supported in part by National High
Technology Research and Development Program
under grant #2005AA114140 and National Nat-
ural Science Foundation of China under grant
#60573188. Special thanks to Yajuan Lu? for
discussions of the manuscript of this paper and
three anonymous reviewers who provided valuable
comments.
References
Ashish Venugopal, Stephan Vogel. 2005. Considerations in
Maximum Mutual Information and Minimum Classifica-
tion Error training for Statistical Machine Translation. In
the Proceedings of EAMT-05, Budapest, Hungary May 30-
31.
Christoph Tillmann. 2004. A block orientation model for
statistical machine translation. In HLT-NAACL, Boston,
MA, USA.
Christoph Tillmann and Tong Zhang. 2005. A Localized
Prediction Model for statistical machine translation. In
Proceedings of ACL 2005, pages 557?564.
David Chiang. 2005. A hierarchical phrase-based model
for statistical machine translation. In Proceedings of ACL
2005, pages 263?270.
Dekai Wu. 1996. A Polynomial-Time Algorithm for Statis-
tical Machine Translation. In Proceedings of ACL 1996.
Dekai Wu. 1997. Stochastic inversion transduction gram-
mars and bilingual parsing of parallel corpora. Computa-
tional Linguistics, 23:377?404.
Franz Josef Och and Hermann Ney. 2000. Improved statisti-
cal alignment models. In Proceedings of ACL 2000, pages
440?447.
Franz Josef Och. 2003a. Minimum error rate training in sta-
tistical machine translation. In Proceedings of ACL 2003,
pages 160?167.
Franz Josef Och. 2003b. Statistical Machine Translation:
From Single-Word Models to Alignment Templates The-
sis.
Franz Josef Och and Hermann Ney. 2004. The alignment
template approach to statistical machine translation. Com-
putational Linguistics, 30:417?449.
Franz Josef Och, Ignacio Thayer, Daniel Marcu, Kevin
Knight, Dragos Stefan Munteanu, Quamrul Tipu, Michel
Galley, and Mark Hopkins. 2004. Arabic and Chinese MT
at USC/ISI. Presentation given at NIST Machine Transla-
tion Evaluation Workshop.
Heidi J. Fox. 2002. Phrasal cohesion and statistical machine
translation. In Proceedings of EMNLP 2002.
J. R. Quinlan. 1993. C4.5: progarms for machine learning.
Morgan Kaufmann Publishers.
Kevin Knight. 1999. Decoding complexity in wordreplace-
ment translation models. Computational Linguistics,
Squibs & Discussion, 25(4).
Liang Huang and David Chiang. 2005. Better k-best parsing.
In Proceedings of the Ninth International Workshop on
Parsing Technology, Vancouver, October, pages 53?64.
Philipp Koehn, Franz Joseph Och, and Daniel Marcu. 2003.
Statistical Phrase-Based Translation. In Proceedings of
HLT/NAACL.
Philipp Koehn. 2004. Pharaoh: a beam search decoder for
phrase-based statistical machine translation models. In
Proceedings of the Sixth Conference of the Association for
Machine Translation in the Americas, pages 115?124.
Philipp Koehn, Amittai Axelrod, Alexandra Birch Mayne,
Chris Callison-Burch, Miles Osborne and David Talbot.
2005. Edinburgh System Description for the 2005 IWSLT
Speech Translation Evaluation. In International Work-
shop on Spoken Language Translation.
R. Zens, H. Ney, T. Watanabe, and E. Sumita. 2004. Re-
ordering Constraints for Phrase-Based Statistical Machine
Translation. In Proceedings of CoLing 2004, Geneva,
Switzerland, pp. 205-211.
Robert Malouf. 2002. A comparison of algorithms for maxi-
mum entropy parameter estimation. In Proceedings of the
Sixth Conference on Natural Language Learning (CoNLL-
2002).
Shankar Kumar and William Byrne. 2005. Local phrase
reordering models for statistical machine translation. In
Proceedings of HLT-EMNLP.
Ying Zhang, Stephan Vogel, and Alex Waibel. 2004. Inter-
preting BLEU/NIST scores: How much improvement do
we need to have a better system? In Proceedings of LREC
2004, pages 2051? 2054.
528
