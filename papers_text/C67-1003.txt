Programming of  Revers ib le  Sys tems in Computat iona l  L ingu is t i cs  
Gerhard  Enge l ien ,  Forschungsgruppe L IMAS,  Bonn ~ ~ I  ~ ~ ~ ~ ~"  
? 
In my paper  I sha l l  repor t  on some aspects  o f  p rogramming rever -  
s ib le  systems,  in par t i cu la r  the spec ia l  p rob lems invo lved  w i th  
programming non-numer ica l  systems.  / (~ . j~  
Dr. A l f red  Hoppe of  Forschuugsgruppe L IMAS has  deve loped a pro  - /  
cedure  for  a revers ib le  data  f low (F igure  I). 'In the matr ix /%hree  ~ -  
d i f fe rent  quant i t ies  are connected  together .  For  ana lys i s~he 
grammat ica l  descr ip t ion  of  an in f lec ted  fo rm is determined  by  
combin ing  the in f lec t ion  c lass  w i th  the ending.  For  example  the 
German verb  ~ehen is composed of the s tem ~eh and the end ing  e_~u. 
The lex icon  te l ls  us that  ~eh be longs  to in f lec t ion  c lass  B. By 
combin ing  the channe ls  of  in f lec t ion  c lass  B and  the end ing  e__u.u / - .  
we are ab le  to determine  the grammat ica l  descr ip t ion  of  the v ~  L? ) 
(wh ich  is in this case ambiguous  ) . Each  of  these groups  conta ins ,  ~ 
a ser ies  of  b inary  var iab les  whose  va lue  is e i ther  zero or  one. 
The synthes is  p rocess  un i tes  the channe ls  w i th  the grammat ica l  
var iab les ,  the resu l t  be ing  the appropr ia te  ending.  
The matr i ces  conta in  on ly  "and" and  "or" gates  and  an e lement  
wh ich  can b lock  the f low in one d i rec t ion ,  as cer ta in  l ingu is t i c  
forms w i l l  be ana lyzed  but  not  syuthes ized .  Techu ica  l~ l i zed ,  ~ 
the matr ix  d~sp lays  an example  of  para l le l  p rocess ing  wh ich  is 
both  complex  as we l l  as rapid.  
For  the present  t ime the L IMAS sys tem wi l l  be programmed for  con-  
vent iona l  computers ,  wh ich  operate  more  or less  sequent ia l l y .  
Thus programming such  a matr ix  invo lves  s imu la t ing  this  para l le l  
data  f low on a sequent ia l l y  operat iug  mach ine .  One must ,  however ,  
take into  cons iderat ion  that  this  w i l l  resu l t  in an increase  of  
runn ing  t ime. But  for  purposes  of  tes t ing  whether  or not  the end 
data  have  been cor rec t ly  combined  to de l iver  the f ina l  resu l t  
this t ime increase  is i r re levant .  
Bes ides  the para l le l  p rocess ing  one must  a lso cons ider  revers i -  
b i l i ty .  We have  d i scovered  that  revers ib i l i ty  has not  made pro -  
g ramming more  d i f f i cu l t ;  on the cont rary ,  it  has  fac i l i ta ted  the 
program debugg ing  process .  
At  f i r s t  the matr i ces  w i l l  be programmed to f low on ly  in the d i -  
rec t ion  of  synthes is .  For  aha lys i s  one wou ld  have  to wr i te  every  
poss ib le  form of  a la rge  number  of  words  on punch  cards  in o rder  
to test  a l l  the var ia t ions .  This ,  o f  course,  wou ld  requ i re  an 
immense  amount  of  work.  It is a g reat  dea l  s imp ler  to let  the 
computer  p r in t  out the in f lec ted  forms,  and then check  the output  
to see i f  they are correct .  The feature  of  revers ib i l i ty  thus 
makes  it  poss ib le  to test  both  d i rec t ions ,  i.e. ana lys i s  and  syn-  
thes is ,  at the same time. 
- I - 
.8 
- 2 - 
I wou ld  l i ke  to d i scuss  br ie f ly  var ious  procednres  wh ich  fac i l i -  
tate the s imu la t ion  process .  A l l  descr ip t ive  categor ies  such  as 
case, numbe~,  person ,  etc. are coord inated  w i th  the var ious  en-  
d ings .  The prob lem is there fore  to compute  the combined  va lues  o f  
cer ta in  b inary  var iab les  f rom the combined  va lues  o f  cer ta in  
o ther  b inary  var iab les .  L i s t  p rocess ing  is p robab ly  the best  su i -  
ted method  for  th is  type of  p rob lem.  
F igure  2 
End ing  
? X ? .  
geh/  en 
In f lec t ion  C lass  
? X ? ? 
B 
Grammat ica l  In fo rmat ion  
. X . . . X . . . 
I -p l  3 -p l  etc. 
The var iab les  assume the i r  mean ing  accord ing  to the ar rangement  
in  the rows and co lumns .  I t  is obv ious  that  each  l ine  o f  such  a 
l i s t  canbe  s tored  in one or  more  mach ine  words .  
It  is necessary  to have  a program wh ich  w i l l  encode  end ings ,  in -  
f l ec t ion  c lasses ,  and grammat ica l  in fo rmat ion  in b i~-combina-  
, i ons ,  and  a search  program wh ich  can locate  the respect ive  b i t -  
combinat ions  in the l ist ?  For  ana lys i s  the su f f i x  b i tpat te rn  
and in f lec t ion  c lass  b i t  pat te rn  are g iven,  and  the l i s t  is 
searched  for  the l ine  in wh ich  they  are s tored ?  Th is  l ine  a l so  
conta ins  the grammat ica l  b i t  pat te rn ,  the ob jec t  o f  the search .  
The resu l t s  can be pr in ted  out  w i th  the he lp  of  a decod ing  pro -  
gram, or e lse they  can remain  encoded and be processed  at  a 
h igher  leve l  in the~ystem.  The synthes is  p rocess  is s imi la r  
except  that  the grammat ica l  b i t  pat te rn  is g iven  in p lace  o f  the 
su f f i x  b i t  pat te rn .  The su f f i x  b i t  pat te rn  is then the ob jec t  o f  
the search.  
The l i s t  method  has the advantage  that  necessary  expans ions  or  
changes  can eas i ly  be car r ied  out  dur ing  the deve lop ing  s tages  
w i thout  a f fec t ing  the ac tua l  p rogram.  
Another  p rogramming poss ib i l i ty  resu l t s  f rom a fo rmula - l i ke  
representat ion ?  A l l  var iab les  of  a l ine  in the l i s t  are  to be 
consecut ive ly  indexed ?  
(a 1, a 2, ..., a n ) 
Wi th  the a id  o f  log ica l  funct ions  (e.g. the Boo lean  fu l l  form) 
i t  is poss ib le  to represent  the process  in the fo l low ing  way:  
a i ~ F i (a I, a 2, ..., a n ) i = 1,n 
f 
A search  procedure  is no longer  necessary .  Ins tead ,  as many  
log ica l  equat ions  w i l l  be computed  as there  are var iab les ?  Of  
course  the var iab les  w i l l  have  to remain  stored? unt i l  the f ina l  
resu l t  is ava i lab le .  It  is poss ib le  to obta in  these  fo rmula -  
l i ke  representat ions  automat ica l ly  f rom the l i s ts ,  and to auto -  
-3 -  
~mat ica l ly  min imize  the obta ined  fo rmulas ,  i .e. to es tab l i sh  the  
smal les t  number  of  b inary  operat ions .  
The l i s ts  can a lso  be s tored  in a th ree-d imens iona l  b inary  matr ix .  
E \ 
> Ki  ~ ,g ,  e~ 
Such  matr i ces  can be processed  by  fo rmulas  of  the fo l low ing  type:  
V 
Gg?::::: E e ^ e 
E e ~ Gg ^ (~ (K kg  I~.,g,e)) 
g - 
( .here ~, ~ are b inary  operators} .  
The procedure  becomes  c lear  i f  one imag ines  that  the l i s t  is 
d iv ided  into  sub l i s ts ,  and  that  for  any  g iven  channe l  on ly  one 
o f  the sub l i s ts  is to be searched.  The sav ing  of  t ime wh ich  re-  
su i ts  f rom such  a procedure  is ev ident .  
One can a lso  inc rease  the throughput  by  tak ing  into  account  the 
f requency  of  the forms,  in that  the l i s t  is a r ranged in decrea-  
s ing  order  o f  f requency .  
I f  the matr i ces  are in terna l ly  w i red  these cons iderat ions  are no 
longer  va l id ,  as the acce le ra t ion  fac tor  wou ld  be about  1000. 
There  are severa l  bas ic  features  wh ich  d i s t ingu ish  numer ica l  
f rom non-numer ica l  data  process ing .  Numer ica l  data  process ing  ~s  
genera l ly  character i zed  by: 
A re la t ive ly  smal l  amount  of  input  
n , " " " output  
Extens ive  in terna l  computat ion  
Most  convent iona l  computers  are des igned for  such  tasks.  On the 
o ther  hand non-numer ica l  work  invo lves :  
A la rge  amount  of  input  
" " " " output  
A re la t ive ly  smal l  amount  of  ac tua l  computat ion  
The use  of  a la rge  s torage  capac i ty  
No f loat ing  po in t  computat ion  
Forschungsgruppe L IMAS uses  the comput ing  center  at the Ins t i tu t  
~f~r  . Instrumentelle Mathemat ik  at Bonn Univers i ty .  T~ main  pro-  
gramming language is FORTRAN II? A l though FORTRAN was deve loped 
for numer ica l  purposes it represents a re la t ive ly  usefu l  compro-  
mise between the various programming languages? The f lex ib le  sub- 
program system and, the poss ib i l i ty  of cal l ing mach ine  language 
programs from FORTRAN programs serve to fac i !~tate the programmiDg 
of  non-numer ica l  problems. ~ 
In order to s impl i fy  and expedite the programs s a computer  wi th  
the fo l lowing features would  be des i rab le~ 
Byte-s t ructure  storage 
Magnet ic  tape readers which  operate in both d i rect ions 
A large d isk  storage area 
A-,high-speed pr inter  wi th  upper  ~and lower case and 
'special characters  
A sophisticated, wired address ing procednre  
The last des ideratum is just i f ied in that non-numer ica l  data pro- 
...... ue~s ing  i s -h igh ly  dependent  on ~ddress  man ipu la%ion . -~s  
same reason, re lat ive . . . . . . . .  address ing  addresslng~ in~-i-~ect-r~uursxve 
and mult ip le  address ing should be avai lable.  It should also be 
poss ib le  to annex extra hardware such as Dr. Hcppe's  matr ix.  
Wired search and sort ing programs would also Me pract ical .  
With this sketch of some technical  aspects of data process ing  I 
shall c lose my remarks. Thank you. 
-5 -  
