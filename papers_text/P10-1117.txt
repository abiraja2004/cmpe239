Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1148?1157,
Uppsala, Sweden, 11-16 July 2010. c?2010 Association for Computational Linguistics
PCFGs, Topic Models, Adaptor Grammars and Learning Topical
Collocations and the Structure of Proper Names
Mark Johnson
Department of Computing
Macquarie University
mjohnson@science.mq.edu.au
Abstract
This paper establishes a connection be-
tween two apparently very different kinds
of probabilistic models. Latent Dirich-
let Allocation (LDA) models are used
as ?topic models? to produce a low-
dimensional representation of documents,
while Probabilistic Context-Free Gram-
mars (PCFGs) define distributions over
trees. The paper begins by showing that
LDA topic models can be viewed as a
special kind of PCFG, so Bayesian in-
ference for PCFGs can be used to infer
Topic Models as well. Adaptor Grammars
(AGs) are a hierarchical, non-parameteric
Bayesian extension of PCFGs. Exploit-
ing the close relationship between LDA
and PCFGs just described, we propose
two novel probabilistic models that com-
bine insights from LDA and AG models.
The first replaces the unigram component
of LDA topic models with multi-word se-
quences or collocations generated by an
AG. The second extension builds on the
first one to learn aspects of the internal
structure of proper names.
1 Introduction
Over the last few years there has been consider-
able interest in Bayesian inference for complex hi-
erarchical models both in machine learning and in
computational linguistics. This paper establishes
a theoretical connection between two very differ-
ent kinds of probabilistic models: Probabilistic
Context-Free Grammars (PCFGs) and a class of
models known as Latent Dirichlet Allocation (Blei
et al, 2003; Griffiths and Steyvers, 2004) models
that have been used for a variety of tasks in ma-
chine learning. Specifically, we show that an LDA
model can be expressed as a certain kind of PCFG,
so Bayesian inference for PCFGs can be used to
learn LDA topic models as well. The importance
of this observation is primarily theoretical, as cur-
rent Bayesian inference algorithms for PCFGs are
less efficient than those for LDA inference. How-
ever, once this link is established it suggests a vari-
ety of extensions to the LDA topic models, two of
which we explore in this paper. The first involves
extending the LDA topic model so that it generates
collocations (sequences of words) rather than indi-
vidual words. The second applies this idea to the
problem of automatically learning internal struc-
ture of proper names (NPs), which is useful for
definite NP coreference models and other applica-
tions.
The rest of this paper is structured as follows.
The next section reviews Latent Dirichlet Alloca-
tion (LDA) topic models, and the following sec-
tion reviews Probabilistic Context-Free Grammars
(PCFGs). Section 4 shows how an LDA topic
model can be expressed as a PCFG, which pro-
vides the fundamental connection between LDA
and PCFGs that we exploit in the rest of the
paper, and shows how it can be used to define
a ?sticky topic? version of LDA. The follow-
ing section reviews Adaptor Grammars (AGs), a
non-parametric extension of PCFGs introduced by
Johnson et al (2007b). Section 6 exploits the con-
nection between LDA and PCFGs to propose an
AG-based topic model that extends LDA by defin-
ing distributions over collocations rather than indi-
vidual words, and section 7 applies this extension
to the problem of finding the structure of proper
names.
2 Latent Dirichlet Allocation Models
Latent Dirichlet Allocation (LDA) was introduced
as an explicit probabilistic counterpart to La-
tent Semantic Indexing (LSI) (Blei et al, 2003).
Like LSI, LDA is intended to produce a low-
dimensional characterisation or summary of a doc-
1148
WZ??
??
n m
`
Figure 1: A graphical model ?plate? representa-
tion of an LDA topic model. Here ` is the number
of topics, m is the number of documents and n is
the number of words per document.
ument in a collection of documents for informa-
tion retrieval purposes. Both LSI and LDA do
this by mapping documents to points in a rela-
tively low-dimensional real-valued vector space;
distance in this space is intended to correspond to
document similarity.
An LDA model is an explicit generative proba-
bilistic model of a collection of documents. We
describe the ?smoothed? LDA model here (see
page 1006 of Blei et al (2003)) as it corresponds
precisely to the Bayesian PCFGs described in sec-
tion 4. It generates a collection of documents by
first generating multinomials ?i over the vocab-
ulary V for each topic i ? 1, . . . , `, where ` is
the number of topics and ?i,w is the probability
of generating word w in topic i. Then it gen-
erates each document Dj , j = 1, . . . ,m in turn
by first generating a multinomial ?j over topics,
where ?j,i is the probability of topic i appearing
in document j. (?j serves as the low-dimensional
representation of document Dj). Finally it gener-
ates each of the n words of document Dj by first
selecting a topic z for the word according to ?j ,
and then drawing a word from ?z . Dirichlet priors
with parameters ? and ? respectively are placed
on the ?i and the ?j in order to avoid the zeros
that can arise from maximum likelihood estima-
tion (i.e., sparse data problems).
The LDA generative model can be compactly
expressed as follows, where ??? should be read
as ?is distributed according to?.
?i ? Dir(?) i = 1, . . . , `
?j ? Dir(?) j = 1, . . . ,m
zj,k ? ?j j = 1, . . . ,m; k = 1, . . . , n
wj,k ? ?zj,k j = 1, . . . ,m; k = 1, . . . , n
In inference, the parameters ? and ? of the
Dirichlet priors are either fixed (i.e., chosen by
the model designer), or else themselves inferred,
e.g., by Bayesian inference. (The adaptor gram-
mar software we used in the experiments de-
scribed below automatically does this kind of
hyper-parameter inference).
The inference task is to find the topic probabil-
ity vector ?j of each documentDj given the words
wj,k of the documents; in general this also requires
inferring the topic to word distributions ? and the
topic assigned to each word zj,k. Blei et al (2003)
describe a Variational Bayes inference algorithm
for LDA models based on a mean-field approx-
imation, while Griffiths and Steyvers (2004) de-
scribe an Markov Chain Monte Carlo inference al-
gorithm based on Gibbs sampling; both are quite
effective in practice.
3 Probabilistic Context-Free Grammars
Context-Free Grammars are a simple model of hi-
erarchical structure often used to describe natu-
ral language syntax. A Context-Free Grammar
(CFG) is a quadruple (N,W,R, S) where N and
W are disjoint finite sets of nonterminal and ter-
minal symbols respectively,R is a finite set of pro-
ductions or rules of the formA? ? whereA ? N
and ? ? (N?W )?, and S ? N is the start symbol.
In what follows, it will be useful to interpret a
CFG as generating sets of finite, labelled, ordered
trees TA for each X ? N ? W . Informally, TX
consists of all trees t rooted in X where for each
local tree (B, ?) in t (i.e., where B is a parent?s
label and ? is the sequence of labels of its imme-
diate children) there is a rule B ? ? ? R.
Formally, the sets TX are the smallest sets of
trees that satisfy the following equations.
If X ? W (i.e., if X is a terminal) then TX =
{X}, i.e., TX consists of a single tree, which in
turn only consists of a single node labelled X .
If X ? N (i.e., if X is a nonterminal) then
TX =
?
X?B1...Bn?RX
TREEX(TB1 , . . . , TBn)
where RA = {A ? ? : A ? ? ? R} for each
A ? N , and
TREEX(TB1 , . . . , TBn)
=
{
 PP
X
t1 tn. . .
:
ti ? TBi ,
i = 1, . . . , n
}
That is, TREEX(TB1 , . . . , TBn) consists of the set
of trees with whose root node is labelled X and
whose ith child is a member of TBi .
1149
The set of trees generated by the CFG is TS ,
where S is the start symbol, and the set of strings
generated by the CFG is the set of yields (i.e., ter-
minal strings) of the trees in TS .
A Probabilistic Context-Free Grammar (PCFG)
is a pair consisting of a CFG and set of multino-
mial probability vectors ?X indexed by nontermi-
nals X ? N , where ?X is a distribution over the
rulesRX (i.e., the rules expandingX). Informally,
?X?? is the probability ofX expanding to ? using
the rule X ? ? ? RX . More formally, a PCFG
associates each X ? N ? W with a distribution
GX over the trees TX as follows.
If X ? W (i.e., if X is a terminal) then GX
is the distribution that puts probability 1 on the
single-node tree labelled X .
If X ? N (i.e., if X is a nonterminal) then:
GX =
?
X?B1...Bn?RX
?X?B1...BnTDX(GB1 , . . . , GBn) (1)
where:
TDA(G1, . . . , Gn)
(
 PP
X
t1 tn. . .
)
=
n?
i=1
Gi(ti).
That is, TDA(G1, . . . , Gn) is a distribution over
TA where each subtree ti is generated indepen-
dently from Gi. These equations have solutions
(i.e., the PCFG is said to be ?consistent?) when
the rule probabilities ?A obey certain conditions;
see e.g., Wetherell (1980) for details.
The PCFG generates the distribution over trees
GS , where S is the start symbol. The distribu-
tion over the strings it generates is obtained by
marginalising over the trees.
In a Bayesian PCFG one puts Dirichlet priors
Dir(?X) on each of the multinomial rule proba-
bility vectors ?X for each nonterminal X ? N .
This means that there is one Dirichlet parameter
?X?? for each rule X ? ? ? R in the CFG.
In the ?unsupervised? inference problem for a
PCFG one is given a CFG, parameters ?X for the
Dirichlet priors over the rule probabilities, and a
corpus of strings. The task is to infer the cor-
responding posterior distribution over rule prob-
abilities ?X . Recently Bayesian inference algo-
rithms for PCFGs have been described. Kurihara
and Sato (2006) describe a Variational Bayes algo-
rithm for inferring PCFGs using a mean-field ap-
proximation, while Johnson et al (2007a) describe
a Markov Chain Monte Carlo algorithm based on
Gibbs sampling.
4 LDA topic models as PCFGs
This section explains how to construct a PCFG
that generates the same distribution over a collec-
tion of documents as an LDA model, and where
Bayesian inference for the PCFG?s rule proba-
bilities yields the corresponding distributions as
Bayesian inference of the corresponding LDA
models. (There are several different ways of en-
coding LDA models as PCFGs; the one presented
here is not the most succinct ? it is possible to
collapse the Doc and Doc? nonterminals ? but it
has the advantage that the LDA distributions map
straight-forwardly onto PCFG nonterminals).
The terminals W of the CFG consist of the vo-
cabulary V of the LDA model plus a set of special
?document identifier? terminals ? j? for each doc-
ument j ? 1, . . . ,m, where m is the number of
documents. In the PCFG encoding strings from
document j are prefixed with ? j?; this indicates
to the grammar which document the string comes
from. The nonterminals consist of the start symbol
Sentence, Docj and Doc?j for each j ? 1, . . . ,m,
and Topici for each i ? 1, . . . , `, where ` is the
number of topics in the LDA model.
The rules of the CFG are all instances of the
following schemata:
Sentence? Doc?j j ? 1, . . . ,m
Doc?j ? j j ? 1, . . . ,m
Doc?j ? Doc
?
j Docj j ? 1, . . . ,m
Docj ? Topici i ? 1, . . . , `; j ? 1, . . . ,m
Topici ? w i ? 1, . . . , `;w ? V
Figure 2 depicts a tree generated by such a
CFG. The relationship between the LDA model
and the PCFG can be understood by studying the
trees generated by the CFG. In these trees the left-
branching spine of nodes labelled Doc?j propagate
the document identifier throughout the whole tree.
The nodes labelled Topici indicate the topics as-
signed to particular words, and the local trees ex-
panding Docj to Topici (one per word in the docu-
ment) indicate the distribution of topics in the doc-
ument.
The corresponding Bayesian PCFG associates
probabilities with each of the rules in the CFG.
The probabilities ?Topici associated with the rules
expanding the Topici nonterminals indicate how
words are distributed across topics; the ?Topici
probabilities correspond exactly to to the ?i prob-
abilities in the LDA model. The probabilities
1150
Sentence
Doc3'
Doc3'
Doc3'
Doc3'
Doc3'
_3
Doc3
Topic4
shallow
Doc3
Topic4
circuits
Doc3
Topic4
compute
Doc3
Topic7
faster
Figure 2: A tree generated by the CFG encoding
an LDA topic model. The prefix ? 3? indicates
that this string belongs to document 3. The tree
also indicates the assignment of words to topics.
?Docj associated with rules expanding Docj spec-
ify the distribution of topics in document j; they
correspond exactly to the probabilities ?j of the
LDA model. (The PCFG also specifies several
other distributions that are suppressed in the LDA
model. For example ?Sentence specifies the distri-
bution of documents in the corpus. However, it is
easy to see that these distributions do not influence
the topic distributions; indeed, the expansions of
the Sentence nonterminal are completely deter-
mined by the document distribution in the corpus,
and are not affected by ?Sentence).
A Bayesian PCFG places Dirichlet priors
Dir(?A) on the corresponding rule probabilities
?A for each A ? N . In the PCFG encoding an
LDA model, the ?Topici parameters correspond
exactly to the ? parameters of the LDA model, and
the ?Docj parameters correspond to the ? param-
eters of the LDA model.
As suggested above, each document Dj in the
LDA model is mapped to a string in the corpus
used to train the corresponding PCFG by prefix-
ing it with a document identifier ? j?. Given this
training data, the posterior distribution over rule
probabilities ?Docj? Topici is the same as the pos-
terior distribution over topics given documents ?j,i
in the original LDA model.
As we will see below, this connection between
PCFGs and LDA topic models suggests a num-
ber of interesting variants of both PCFGs and
topic models. Note that we are not suggesting
that Bayesian inference for PCFGs is necessar-
ily a good way of estimating LDA topic models.
Current Bayesian PCFG inference algorithms re-
quire time proportional to the cube of the length of
the longest string in the training corpus, and since
these strings correspond to entire documents in our
embedding, blindly applying a Bayesian PCFG in-
ference algorithm is likely to be impractical.
A little reflection shows that the embedding still
holds if the strings in the PCFG corpus correspond
to sentences or even smaller units of the original
document collection, so a single document would
be mapped to multiple strings in the PCFG infer-
ence task. In this way the cubic time complex-
ity of PCFG inference can be mitigated. Also, the
trees generated by these CFGs have a very spe-
cialized left-branching structure, and it is straight-
forward to modify the general-purpose CFG infer-
ence procedures to avoid the cubic time complex-
ity for such grammars: thus it may be practical to
estimate topic models via grammatical inference.
However, we believe that the primary value of
the embedding of LDA topic models into Bayesian
PCFGs is theoretical: it suggests a number of
novel extensions of both topic models and gram-
mars that may be worth exploring. Our claim here
is not that these models are the best algorithms for
performing these tasks, but that the relationship
we described between LDA models and PCFGs
suggests a variety of interesting novel models.
We end this section with a simple example of
such a modification to LDA. Inspired by the stan-
dard embedding of HMMs into PCFGs, we pro-
pose a ?sticky topic? variant of LDA in which ad-
jacent words are more likely to be assigned the
same topic. Such an LDA extension is easy to
describe as a PCFG (see Fox et al (2008) for a
similar model presented as an extended HMM).
The nonterminals Sentence and Topici for i =
1, . . . , ` have the same interpretation as before, but
we introduce new nonterminals Docj,i that indi-
cate we have just generated a nonterminal in doc-
ument j belonging to topic i. Given a collection of
m documents and ` topics, the rule schemata are
as follows:
Sentence? Docj,i i ? 1, . . . , `;
j ? 1, . . . ,m
Docj,1 ? j j ? 1, . . . ,m
Docj,i ? Docj,i? Topici i, i
? ? 1, . . . , `;
j ? 1, . . . ,m
Topici ? w i ? 1, . . . , `;w ? V
A sample parse generated by a ?sticky topic?
1151
Sentence
Doc3'_
Doc3'T
Doc3'T
Doc3'T
Doc3'p
i3
4oshcT
alwrrou
4oshcT
chmc7hta
4oshcT
cofs7te
4oshc_
watem
Figure 3: A tree generated by the ?sticky topic?
CFG. Here a nonterminal Doc3, 7 indicates we
have just generated a word in document 3 belong-
ing to topic 7.
CFG is shown in Figure 3. The probabilities of
the rules Docj,i ? Docj,i? Topici in this PCFG
encode the probability of shifting from topic i to
topic i? (this PCFG can be viewed as generating
the string from right to left).
We can use non-uniform sparse Dirichlet pri-
ors on the probabilities of these rules to encour-
age ?topic stickiness?. Specifically, by setting
the Dirichlet parameters for the ?topic shift? rules
Docj,i? ? Docj,i Topici where i
? 6= i much lower
than the parameters for the ?topic preservation?
rules Docj,i ? Docj,i Topici, Bayesian inference
will be biased to find distributions in which adja-
cent words will tend to have the same topic.
5 Adaptor Grammars
Non-parametric Bayesian inference, where the in-
ference task involves learning not just the values
of a finite vector of parameters but which parame-
ters are relevant, has been the focus of intense re-
search in machine learning recently. In the topic-
modelling community this has lead to work on
Dirichlet Processes and Chinese Restaurant Pro-
cesses, which can be used to estimate the number
of topics as well as their distribution across docu-
ments (Teh et al, 2006).
There are two obvious non-parametric exten-
sions to PCFGs. In the first we regard the set
of nonterminals N as potentially unbounded, and
try to learn the set of nonterminals required to de-
scribe the training corpus. This approach goes un-
der the name of the ?infinite HMM? or ?infinite
PCFG? (Beal et al, 2002; Liang et al, 2007; Liang
et al, 2009). Informally, we are given a set of ?ba-
sic categories?, say NP,VP, etc., and a set of rules
that use these basic categories, say S ? NP VP.
The inference task is to learn a set of refined cate-
gories and rules (e.g., S7 ? NP2 VP5) as well as
their probabilities; this approach can therefore be
viewed as a Bayesian version of the ?split-merge?
approach to grammar induction (Petrov and Klein,
2007).
In the second approach, which we adopt here,
we regard the set of rules R as potentially un-
bounded, and try to learn the rules required to
describe a training corpus as well as their prob-
abilities. Adaptor grammars are an example of
this approach (Johnson et al, 2007b), where en-
tire subtrees generated by a ?base grammar? can
be viewed as distinct rules (in that we learn a sep-
arate probability for each subtree). The inference
task is non-parametric if there are an unbounded
number of such subtrees.
We review the adaptor grammar generative pro-
cess below; for an informal introduction see John-
son (2008) and for details of the adaptor grammar
inference procedure see Johnson and Goldwater
(2009).
An adaptor grammar (N,W,R, S, ?, A,C) con-
sists of a PCFG (N,W,R, S, ?) in which a sub-
set A ? N of the nonterminals are adapted, and
where each adapted nonterminal X ? A has an
associated adaptor CX . An adaptor CX for X is a
function that maps a distribution over trees TX to
a distribution over distributions over TX (we give
examples of adaptors below).
Just as for a PCFG, an adaptor grammar de-
fines distributions GX over trees TX for each X ?
N ?W . If X ? W or X 6? A then GX is defined
just as for a PCFG above, i.e., using (1). How-
ever, if X ? A then GX is defined in terms of an
additional distribution HX as follows:
GX ? CX(HX)
HX =
?
X?Y1...Ym?RX
?X?Y1...YmTDX(GY1 , . . . , GYm)
That is, the distribution GX associated with an
adapted nonterminal X ? A is a sample from
adapting (i.e., applying CX to) its ?ordinary?
PCFG distribution HX . In general adaptors are
chosen for the specific properties they have. For
example, with the adaptors used hereGX typically
concentrates mass on a smaller subset of the trees
TX than HX does.
Just as with the PCFG, an adaptor grammar gen-
erates the distribution over treesGS , where S ? N
1152
is the start symbol. However, whileGS in a PCFG
is a fixed distribution (given the rule probabili-
ties ?), in an adaptor grammar the distribution GS
is itself a random variable (because each GX for
X ? A is random), i.e., an adaptor grammar gen-
erates a distribution over distributions over trees
TS . However, the posterior joint distribution Pr(t)
of a sequence t = (t1, . . . , tn) of trees in TS is
well-defined:
Pr(t) =
?
GS(t1) . . . GS(tn) dG
where the integral is over all of the random distri-
butions GX , X ? A. The adaptors we use in this
paper are Dirichlet Processes or two-parameter
Poisson-Dirichlet Processes, for which it is pos-
sible to compute this integral. One way to do this
uses the predictive distributions:
Pr(tn+1 | t, HX)
?
?
GX(t1) . . . GX(tn+1)CX(GX | HX) dGX
where t = (t1, . . . , tn) and each ti ? TX . The pre-
dictive distribution for the Dirichlet Process is the
(labeled) Chinese Restaurant Process (CRP), and
the predictive distribution for the two-parameter
Poisson-Dirichlet process is the (labeled) Pitman-
Yor Process (PYP).
In the context of adaptor grammars, the CRP is:
CRP(t | t, ?X , HX) ? nt(t) + ?XHX(t)
where nt(t) is the number of times t appears in t
and ?X > 0 is a user-settable ?concentration pa-
rameter?. In order to generate the next tree tn+1
a CRP either reuses a tree t with probability pro-
portional to number of times t has been previously
generated, or else it ?backs off? to the ?base distri-
bution?HX and generates a fresh tree t with prob-
ability proportional to ?XHX(t).
The PYP is a generalization of the CRP:
PYP(t | t, aX , bX , HX)
? max(0, nt(t)?mt aX) + (maX + bX)HX(t)
Here aX ? [0, 1] and bX > 0 are user-settable
parameters, andmt is the number of times the PYP
has generated t in t from the base distributionHX ,
and m =
?
t?TX
mt is the number of times any
tree has been generated from HX . (In the Chinese
Restaurant metaphor, mt is the number of tables
labeled with t, and m is the number of occupied
tables). If aX = 0 then the PYP is equivalent to
a CRP with ?X = bX , while if aX = 1 then the
PYP generates samples from HX .
Informally, the CRP has a strong preference
to regenerate trees that have been generated fre-
quently before, leading to a ?rich-get-richer? dy-
namics. The PYP can mitigate this somewhat by
reducing the effective count of previously gener-
ated trees and redistributing that probability mass
to new trees generated from HX . As Goldwa-
ter et al (2006) explain, Bayesian inference for
HX given samples from GX is effectively per-
formed from types if aX = 0 and from tokens
if aX = 1, so varying aX smoothly interpolates
between type-based and token-based inference.
Adaptor grammars have previously been used
primarily to study grammatical inference in the
context of language acquisition. The word seg-
mentation task involves segmenting a corpus
of unsegmented phonemic utterance representa-
tions into words (Elman, 1990; Bernstein-Ratner,
1987). For example, the phoneme string corre-
sponding to ?you want to see the book? (with its
correct segmentation indicated) is as follows:
y Mu Nw Ma Mn Mt Nt Mu Ns Mi ND M6 Nb MU Mk
We can represent any possible segmentation of any
possible sentence as a tree generated by the fol-
lowing unigram adaptor grammar.
Sentence?Word
Sentence?Word Sentence
Word? Phonemes
Phonemes? Phoneme
Phonemes? Phoneme Phonemes
The trees generated by this adaptor grammar are
the same as the trees generated by the CFG rules.
For example, the following skeletal parse in which
all but the Word nonterminals are suppressed (the
others are deterministically inferrable) shows the
parse that corresponds to the correct segmentation
of the string above.
(Word y u) (Word w a n t) (Word t u)
(Word s i) (Word d 6) (Word b u k)
Because the Word nonterminal is adapted (indi-
cated here by underlining) the adaptor grammar
learns the probability of the entire Word subtrees
(e.g., the probability that b u k is a Word); see
Johnson (2008) for further details.
1153
6 Topic models with collocations
Here we combine ideas from the unigram word
segmentation adaptor grammar above and the
PCFG encoding of LDA topic models to present
a novel topic model that learns topical colloca-
tions. (For a non-grammar-based approach to this
problem see Wang et al (2007)). Specifically, we
take the PCFG encoding of the LDA topic model
described above, but modify it so that the Topici
nodes generate sequences of words rather than sin-
gle words. Then we adapt each of the Topici non-
terminals, which means that we learn the probabil-
ity of each of the sequences of words it can expand
to.
Sentence? Docj j ? 1, . . . ,m
Docj ? j j ? 1, . . . ,m
Docj ? Docj Topici i ? 1, . . . , `;
j ? 1, . . . ,m
Topic
i
?Words i ? 1, . . . , `
Words?Word
Words?Words Word
Word? w w ? V
In order to demonstrate that this model
works, we implemented this using the publically-
available adaptor grammar inference software,1
and ran it on the NIPS corpus (composed of pub-
lished NIPS abstracts), which has previously been
used for studying collocation-based topic models
(Griffiths et al, 2007). Because there is no gen-
erally accepted evaluation for collocation-finding,
we merely present some of the sample analyses
found by our adaptor grammar. We ran our adap-
tor grammar with ` = 20 topics (i.e., 20 distinct
Topici nonterminals). Adaptor grammar inference
on this corpus is actually relatively efficient be-
cause the corpus provided by Griffiths et al (2007)
is already segmented by punctuation, so the termi-
nal strings are generally rather short. Rather than
set the Dirichlet parameters by hand, we placed
vague priors on them and estimated them as de-
scribed in Johnson and Goldwater (2009).
The following are some examples of colloca-
tions found by our adaptor grammar:
Topic0? cost function
Topic0? fixed point
Topic0? gradient descent
Topic0? learning rates
1http://web.science.mq.edu.au/ ?mjohnson/Software.htm
Topic1? associative memory
Topic1? hamming distance
Topic1? randomly chosen
Topic1? standard deviation
Topic3? action potentials
Topic3? membrane potential
Topic3? primary visual cortex
Topic3? visual system
Topic10? nervous system
Topic10? action potential
Topic10? ocular dominance
Topic10? visual field
The following are skeletal sample parses, where
we have elided all but the adapted nonterminals
(i.e., all we show are the Topic nonterminals, since
the other structure can be inferred deterministi-
cally). Note that because Griffiths et al (2007)
segmented the NIPS abstracts at punctuation sym-
bols, the training corpus contains more than one
string from each abstract.
3 (Topic5 polynomial size)
(Topic15 threshold circuits)
4 (Topic11 studied)
(Topic19 pattern recognition algorithms)
4 (Topic2 feedforward neural network)
(Topic1 implementation)
5 (Topic11 single)
(Topic10 ocular dominance stripe)
(Topic12 low) (Topic3 ocularity)
(Topic12 drift rate)
7 Finding the structure of proper names
Grammars offer structural and positional sensitiv-
ity that is not exploited in the basic LDA topic
models. Here we explore the potential for us-
ing Bayesian inference for learning linear order-
ing constraints that hold between elements within
proper names.
The Penn WSJ treebank is a widely used re-
source within computational linguistics (Marcus
et al, 1993), but one of its weaknesses is that
it does not indicate any structure internal to base
noun phrases (i.e., it presents ?flat? analyses of the
pre-head NP elements). For many applications it
would be extremely useful to have a more elab-
orated analysis of this kind of NP structure. For
example, in an NP coreference application, if we
could determine that Bill and Hillary are both first
1154
names then we could infer that Bill Clinton and
Hillary Clinton are likely to refer to distinct in-
dividuals. On the other hand, because Mr in Mr
Clinton is not a first name, it is possible that Mr
Clinton and Bill Clinton refer to the same individ-
ual (Elsner et al, 2009).
Here we present an adaptor grammar based on
the insights of the PCFG encoding of LDA topic
models that learns some of the structure of proper
names. The key idea is that elements in proper
names typically appear in a fixed order; we expect
honorifics to appear before first names, which ap-
pear before middle names, which in turn appear
before surnames, etc. Similarly, many company
names end in fixed phrases such as Inc. Here
we think of first names as a kind of topic, albeit
one with a restricted positional location. One of
the challenges is that some of these structural ele-
ments can be filled by multiword expressions; e.g.,
de Groot can be a surname. We deal with this by
permitting multi-word collocations to fill the cor-
responding positions, and use the adaptor gram-
mar machinery to learn these collocations.
Inspired by the grammar presented in Elsner
et al (2009), our adaptor grammar is as follows,
where adapted nonterminals are indicated by un-
derlining as before.
NP? (A0) (A1) . . . (A6)
NP? (B0) (B1) . . . (B6)
NP? Unordered+
A0?Word+
. . .
A6?Word+
B0?Word+
. . .
B6?Word+
Unordered?Word+
In this grammar parentheses indicate optional-
ity, and the Kleene plus indicates iteration (these
were manually expanded into ordinary CFG rules
in our experiments). The grammar provides three
different expansions for proper names. The first
expansion says that a proper name can consist of
some subset of the six different collocation classes
A0 through A6 in that order, while the second ex-
pansion says that a proper name can consist of
some subset of the collocation classes B0 through
B6, again in that order. Finally, the third expan-
sion says that a proper name can consist of an ar-
bitrary sequence of ?unordered? collocations (this
is intended as a ?catch-all? expansion to provide
analyses for proper names that don?t fit either of
the first two expansions).
We extracted all of the proper names (i.e.,
phrases of category NNP and NNPS) in the Penn
WSJ treebank and used them as the training cor-
pora for the adaptor grammar just described. The
adaptor grammar inference procedure found skele-
tal sample parses such as the following:
(A0 barrett) (A3 smith)
(A0 albert) (A2 j.) (A3 smith) (A4 jr.)
(A0 robert) (A2 b.) (A3 van dover)
(B0 aim) (B1 prime rate) (B2 plus) (B5
fund) (B6 inc.)
(B0 balfour) (B1 maclaine) (B5 interna-
tional) (B6 ltd.)
(B0 american express) (B1 information
services) (B6 co)
(U abc) (U sports)
(U sports illustrated)
(U sports unlimited)
While a full evaluation will have to await further
study, in general it seems to distinguish person
names from company names reasonably reliably,
and it seems to have discovered that person names
consist of a first name (A0), a middle name or ini-
tial (A2), a surname (A3) and an optional suffix
(A4). Similarly, it seems to have uncovered that
company names typically end in a phrase such as
inc, ltd or co.
8 Conclusion
This paper establishes a connection between two
very different kinds of probabilistic models; LDA
models of the kind used for topic modelling, and
PCFGs, which are a standard model of hierarchi-
cal structure in language. The embedding we pre-
sented shows how to express an LDA model as a
PCFG, and has the property that Bayesian infer-
ence of the parameters of that PCFG produces an
equivalent model to that produced by Bayesian in-
ference of the LDA model?s parameters.
The primary value of this embedding is theoret-
ical rather than practical; we are not advocating
the use of PCFG estimation procedures to infer
LDA models. Instead, we claim that the embed-
ding suggests novel extensions to both the LDA
topic models and PCFG-style grammars. We jus-
tified this claim by presenting several hybrid mod-
els that combine aspects of both topic models and
1155
grammars. We don?t claim that these are neces-
sarily the best models for performing any particu-
lar tasks; rather, we present them as examples of
models inspired by a combination of PCFGs and
LDA topic models. We showed how the LDA
to PCFG embedding suggested a ?sticky topic?
model extension to LDA. We then discussed adap-
tor grammars, and inspired by the LDA topic mod-
els, presented a novel topic model whose prim-
itive elements are multi-word collocations rather
than words. We concluded with an adaptor gram-
mar that learns aspects of the internal structure of
proper names.
Acknowledgments
This research was funded by US NSF awards
0544127 and 0631667, as well as by a start-up
award from Macquarie University. I?d like to
thank the organisers and audience at the Topic
Modeling workshop at NIPS 2009, my former col-
leagues at Brown University (especially Eugene
Charniak, Micha Elsner, Sharon Goldwater, Tom
Griffiths and Erik Sudderth), my new colleagues
at Macquarie University and the ACL reviewers
for their excellent suggestions and comments on
this work. Naturally all errors remain my own.
References
M.J. Beal, Z. Ghahramani, and C.E. Rasmussen. 2002.
The infinite Hidden Markov Model. In T. Dietterich,
S. Becker, and Z. Ghahramani, editors, Advances in
Neural Information Processing Systems, volume 14,
pages 577?584. The MIT Press.
N. Bernstein-Ratner. 1987. The phonology of parent-
child speech. In K. Nelson and A. van Kleeck,
editors, Children?s Language, volume 6. Erlbaum,
Hillsdale, NJ.
David M. Blei, Andrew Y. Ng, and Michael I. Jordan.
2003. Latent Dirichlet alocation. Journal of Ma-
chine Learning Research, 3:993?1022.
Jeffrey Elman. 1990. Finding structure in time. Cog-
nitive Science, 14:197?211.
Micha Elsner, Eugene Charniak, and Mark Johnson.
2009. Structured generative models for unsuper-
vised named-entity clustering. In Proceedings of
Human Language Technologies: The 2009 Annual
Conference of the North American Chapter of the
Association for Computational Linguistics, pages
164?172, Boulder, Colorado, June. Association for
Computational Linguistics.
E. Fox, E. Sudderth, M. Jordan, and A. Willsky. 2008.
An HDP-HMM for systems with state persistence.
In Andrew McCallum and Sam Roweis, editors,
Proceedings of the 25th Annual International Con-
ference on Machine Learning (ICML 2008), pages
312?319. Omnipress.
Sharon Goldwater, Tom Griffiths, and Mark John-
son. 2006. Interpolating between types and tokens
by estimating power-law generators. In Y. Weiss,
B. Scho?lkopf, and J. Platt, editors, Advances in Neu-
ral Information Processing Systems 18, pages 459?
466, Cambridge, MA. MIT Press.
Thomas L. Griffiths and Mark Steyvers. 2004. Find-
ing scientific topics. Proceedings of the National
Academy of Sciences, 101:52285235.
Thomas L. Griffiths, Mark Steyvers, and Joshua B.
Tenenbaum. 2007. Topics in semantic representa-
tion. Psychological Review, 114(2):211244.
Mark Johnson and Sharon Goldwater. 2009. Im-
proving nonparameteric Bayesian inference: exper-
iments on unsupervised word segmentation with
adaptor grammars. In Proceedings of Human Lan-
guage Technologies: The 2009 Annual Conference
of the North American Chapter of the Associa-
tion for Computational Linguistics, pages 317?325,
Boulder, Colorado, June. Association for Computa-
tional Linguistics.
Mark Johnson, Thomas Griffiths, and Sharon Gold-
water. 2007a. Bayesian inference for PCFGs via
Markov chain Monte Carlo. In Human Language
Technologies 2007: The Conference of the North
American Chapter of the Association for Computa-
tional Linguistics; Proceedings of the Main Confer-
ence, pages 139?146, Rochester, New York, April.
Association for Computational Linguistics.
Mark Johnson, Thomas L. Griffiths, and Sharon Gold-
water. 2007b. Adaptor Grammars: A framework for
specifying compositional nonparametric Bayesian
models. In B. Scho?lkopf, J. Platt, and T. Hoffman,
editors, Advances in Neural Information Processing
Systems 19, pages 641?648. MIT Press, Cambridge,
MA.
Mark Johnson. 2008. Using adaptor grammars to iden-
tifying synergies in the unsupervised acquisition of
linguistic structure. In Proceedings of the 46th An-
nual Meeting of the Association of Computational
Linguistics, Columbus, Ohio. Association for Com-
putational Linguistics.
Kenichi Kurihara and Taisuke Sato. 2006. Variational
Bayesian grammar induction for natural language.
In 8th International Colloquium on Grammatical In-
ference.
Percy Liang, Slav Petrov, Michael Jordan, and Dan
Klein. 2007. The infinite PCFG using hierarchi-
cal Dirichlet processes. In Proceedings of the 2007
Joint Conference on Empirical Methods in Natural
Language Processing and Computational Natural
Language Learning (EMNLP-CoNLL), pages 688?
697.
1156
Percy Liang, Michael Jordan, and Dan Klein. 2009.
Probabilistic grammars and hierarchical Dirichlet
processes. In The Oxford Handbook of Applied
Bayesian Analysis. Oxford University Press.
Michell P. Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1993. Building a large annotated
corpus of English: The Penn Treebank. Computa-
tional Linguistics, 19(2):313?330.
Slav Petrov and Dan Klein. 2007. Improved infer-
ence for unlexicalized parsing. In Human Language
Technologies 2007: The Conference of the North
American Chapter of the Association for Computa-
tional Linguistics; Proceedings of the Main Confer-
ence, pages 404?411, Rochester, New York. Associ-
ation for Computational Linguistics.
Y. W. Teh, M. Jordan, M. Beal, and D. Blei. 2006. Hi-
erarchical Dirichlet processes. Journal of the Amer-
ican Statistical Association, 101:1566?1581.
Xuerui Wang, Andrew McCallum, and Xing Wei.
2007. Topical n-grams: Phrase and topic discovery,
with an application to information retrieval. In Pro-
ceedings of the 7th IEEE International Conference
on Data Mining (ICDM), pages 697?702.
C.S. Wetherell. 1980. Probabilistic languages: A re-
view and some open questions. Computing Surveys,
12:361?379.
1157
