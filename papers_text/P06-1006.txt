Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL, pages 41?48,
Sydney, July 2006. c?2006 Association for Computational Linguistics
Kernel-Based Pronoun Resolution with Structured Syntactic Knowledge
Xiaofeng Yang? Jian Su? Chew Lim Tan?
?Institute for Infocomm Research
21 Heng Mui Keng Terrace,
Singapore, 119613
{xiaofengy,sujian}@i2r.a-star.edu.sg
? Department of Computer Science
National University of Singapore,
Singapore, 117543
tancl@comp.nus.edu.sg
Abstract
Syntactic knowledge is important for pro-
noun resolution. Traditionally, the syntac-
tic information for pronoun resolution is
represented in terms of features that have
to be selected and defined heuristically.
In the paper, we propose a kernel-based
method that can automatically mine the
syntactic information from the parse trees
for pronoun resolution. Specifically, we
utilize the parse trees directly as a struc-
tured feature and apply kernel functions to
this feature, as well as other normal fea-
tures, to learn the resolution classifier. In
this way, our approach avoids the efforts
of decoding the parse trees into the set of
flat syntactic features. The experimental
results show that our approach can bring
significant performance improvement and
is reliably effective for the pronoun reso-
lution task.
1 Introduction
Pronoun resolution is the task of finding the cor-
rect antecedent for a given pronominal anaphor
in a document. Prior studies have suggested that
syntactic knowledge plays an important role in
pronoun resolution. For a practical pronoun res-
olution system, the syntactic knowledge usually
comes from the parse trees of the text. The is-
sue that arises is how to effectively incorporate the
syntactic information embedded in the parse trees
to help resolution. One common solution seen in
previous work is to define a set of features that rep-
resent particular syntactic knowledge, such as the
grammatical role of the antecedent candidates, the
governing relations between the candidate and the
pronoun, and so on. These features are calculated
by mining the parse trees, and then could be used
for resolution by using manually designed rules
(Lappin and Leass, 1994; Kennedy and Boguraev,
1996; Mitkov, 1998), or using machine-learning
methods (Aone and Bennett, 1995; Yang et al,
2004; Luo and Zitouni, 2005).
However, such a solution has its limitation. The
syntactic features have to be selected and defined
manually, usually by linguistic intuition. Unfor-
tunately, what kinds of syntactic information are
effective for pronoun resolution still remains an
open question in this research community. The
heuristically selected feature set may be insuffi-
cient to represent all the information necessary for
pronoun resolution contained in the parse trees.
In this paper we will explore how to utilize the
syntactic parse trees to help learning-based pro-
noun resolution. Specifically, we directly utilize
the parse trees as a structured feature, and then use
a kernel-based method to automatically mine the
knowledge embedded in the parse trees. The struc-
tured syntactic feature, together with other nor-
mal features, is incorporated in a trainable model
based on Support Vector Machine (SVM) (Vapnik,
1995) to learn the decision classifier for resolution.
Indeed, using kernel methods to mine structural
knowledge has shown success in some NLP ap-
plications like parsing (Collins and Duffy, 2002;
Moschitti, 2004) and relation extraction (Zelenko
et al, 2003; Zhao and Grishman, 2005). However,
to our knowledge, the application of such a tech-
nique to the pronoun resolution task still remains
unexplored.
Compared with previous work, our approach
has several advantages: (1) The approach uti-
lizes the parse trees as a structured feature, which
avoids the efforts of decoding the parse trees into
a set of syntactic features in a heuristic manner.
(2) The approach is able to put together the struc-
tured feature and the normal flat features in a
trainable model, which allows different types of
41
information to be considered in combination for
both learning and resolution. (3) The approach
is applicable for practical pronoun resolution as
the syntactic information can be automatically ob-
tained from machine-generated parse trees. And
our study shows that the approach works well un-
der the commonly available parsers.
We evaluate our approach on the ACE data set.
The experimental results over the different do-
mains indicate that the structured syntactic fea-
ture incorporated with kernels can significantly
improve the resolution performance (by 5%?8%
in the success rates), and is reliably effective for
the pronoun resolution task.
The remainder of the paper is organized as fol-
lows. Section 2 gives some related work that uti-
lizes the structured syntactic knowledge to do pro-
noun resolution. Section 3 introduces the frame-
work for the pronoun resolution, as well as the
baseline feature space and the SVM classifier.
Section 4 presents in detail the structured feature
and the kernel functions to incorporate such a fea-
ture in the resolution. Section 5 shows the exper-
imental results and has some discussion. Finally,
Section 6 concludes the paper.
2 Related Work
One of the early work on pronoun resolution rely-
ing on parse trees was proposed by Hobbs (1978).
For a pronoun to be resolved, Hobbs? algorithm
works by searching the parse trees of the current
text. Specifically, the algorithm processes one sen-
tence at a time, using a left-to-right breadth-first
searching strategy. It first checks the current sen-
tence where the pronoun occurs. The first NP
that satisfies constraints, like number and gender
agreements, would be selected as the antecedent.
If the antecedent is not found in the current sen-
tence, the algorithm would traverse the trees of
previous sentences in the text. As the searching
processing is completely done on the parse trees,
the performance of the algorithm would rely heav-
ily on the accuracy of the parsing results.
Lappin and Leass (1994) reported a pronoun
resolution algorithm which uses the syntactic rep-
resentation output by McCord?s Slot Grammar
parser. A set of salience measures (e.g. Sub-
ject, Object or Accusative emphasis) is derived
from the syntactic structure. The candidate with
the highest salience score would be selected as
the antecedent. In their algorithm, the weights of
Category: whether the candidate is a definite noun phrase,
indefinite noun phrase, pronoun, named-entity or others.
Reflexiveness: whether the pronominal anaphor is a reflex-
ive pronoun.
Type: whether the pronominal anaphor is a male-person
pronoun (like he), female-person pronoun (like she), sin-
gle gender-neuter pronoun (like it), or plural gender-neuter
pronoun (like they)
Subject: whether the candidate is a subject of a sentence, a
subject of a clause, or not.
Object: whether the candidate is an object of a verb, an
object of a preposition, or not.
Distance: the sentence distance between the candidate and
the pronominal anaphor.
Closeness: whether the candidate is the candidate closest
to the pronominal anaphor.
FirstNP: whether the candidate is the first noun phrase in
the current sentence.
Parallelism: whether the candidate has an identical collo-
cation pattern with the pronominal anaphor.
Table 1: Feature set for the baseline pronoun res-
olution system
salience measures have to be assigned manually.
Luo and Zitouni (2005) proposed a coreference
resolution approach which also explores the infor-
mation from the syntactic parse trees. Different
from Lappin and Leass (1994)?s algorithm, they
employed a maximum entropy based model to au-
tomatically compute the importance (in terms of
weights) of the features extracted from the trees.
In their work, the selection of their features is
mainly inspired by the government and binding
theory, aiming to capture the c-command relation-
ships between the pronoun and its antecedent can-
didate. By contrast, our approach simply utilizes
the parse trees as a structured feature, and lets the
learning algorithm discover all possible embedded
information that is necessary for pronoun resolu-
tion.
3 The Resolution Framework
Our pronoun resolution system adopts the com-
mon learning-based framework similar to those
by Soon et al (2001) and Ng and Cardie (2002).
In the learning framework, a training or testing
instance is formed by a pronoun and one of its
antecedent candidate. During training, for each
pronominal anaphor encountered, a positive in-
stance is created by paring the anaphor and its
closest antecedent. Also a set of negative instances
is formed by paring the anaphor with each of the
42
non-coreferential candidates. Based on the train-
ing instances, a binary classifier is generated using
a particular learning algorithm. During resolution,
a pronominal anaphor to be resolved is paired in
turn with each preceding antecedent candidate to
form a testing instance. This instance is presented
to the classifier which then returns a class label
with a confidence value indicating the likelihood
that the candidate is the antecedent. The candidate
with the highest confidence value will be selected
as the antecedent of the pronominal anaphor.
3.1 Feature Space
As with many other learning-based approaches,
the knowledge for the reference determination is
represented as a set of features associated with
the training or test instances. In our baseline sys-
tem, the features adopted include lexical property,
morphologic type, distance, salience, parallelism,
grammatical role and so on. Listed in Table 1, all
these features have been proved effective for pro-
noun resolution in previous work.
3.2 Support Vector Machine
In theory, any discriminative learning algorithm is
applicable to learn the classifier for pronoun res-
olution. In our study, we use Support Vector Ma-
chine (Vapnik, 1995) to allow the use of kernels to
incorporate the structured feature.
Suppose the training set S consists of labelled
vectors {(xi, yi)}, where xi is the feature vector
of a training instance and yi is its class label. The
classifier learned by SVM is
f(x) = sgn(
?
i=1
yiaix ? xi + b) (1)
where ai is the learned parameter for a support
vector xi. An instance x is classified as positive
(negative) if f(x) > 0 (f(x) < 0)1.
One advantage of SVM is that we can use ker-
nel methods to map a feature space to a particu-
lar high-dimension space, in case that the current
problem could not be separated in a linear way.
Thus the dot-product x1 ? x2 is replaced by a ker-
nel function (or kernel) between two vectors, that
is K(x1, x2). For the learning with the normal
features listed in Table 1, we can just employ the
well-known polynomial or radial basis kernels that
can be computed efficiently. In the next section we
1For our task, the result of f(x) is used as the confidence
value of the candidate to be the antecedent of the pronoun
described by x.
will discuss how to use kernels to incorporate the
more complex structured feature.
4 Incorporating Structured Syntactic
Information
4.1 Main Idea
A parse tree that covers a pronoun and its an-
tecedent candidate could provide us much syntac-
tic information related to the pair. The commonly
used syntactic knowledge for pronoun resolution,
such as grammatical roles or the governing rela-
tions, can be directly described by the tree struc-
ture. Other syntactic knowledge that may be help-
ful for resolution could also be implicitly repre-
sented in the tree. Therefore, by comparing the
common substructures between two trees we can
find out to what degree two trees contain similar
syntactic information, which can be done using a
convolution tree kernel.
The value returned from the tree kernel reflects
the similarity between two instances in syntax.
Such syntactic similarity can be further combined
with other knowledge to compute the overall simi-
larity between two instances, through a composite
kernel. And thus a SVM classifier can be learned
and then used for resolution. This is just the main
idea of our approach.
4.2 Structured Syntactic Feature
Normally, parsing is done on the sentence level.
However, in many cases a pronoun and an an-
tecedent candidate do not occur in the same sen-
tence. To present their syntactic properties and
relations in a single tree structure, we construct a
syntax tree for an entire text, by attaching the parse
trees of all its sentences to an upper node.
Having obtained the parse tree of a text, we shall
consider how to select the appropriate portion of
the tree as the structured feature for a given in-
stance. As each instance is related to a pronoun
and a candidate, the structured feature at least
should be able to cover both of these two expres-
sions. Generally, the more substructure of the tree
is included, the more syntactic information would
be provided, but at the same time the more noisy
information that comes from parsing errors would
likely be introduced. In our study, we examine
three possible structured features that contain dif-
ferent substructures of the parse tree:
Min-Expansion This feature records the mini-
mal structure covering both the pronoun and
43
Min-Expansion Simple-Expansion Full-Expansion
Figure 1: structured-features for the instance i{?him?, ?the man?}
the candidate in the parse tree. It only in-
cludes the nodes occurring in the shortest
path connecting the pronoun and the candi-
date, via the nearest commonly commanding
node. For example, considering the sentence
?The man in the room saw him.?, the struc-
tured feature for the instance i{?him?,?the
man?} is circled with dash lines as shown in
the leftmost picture of Figure 1.
Simple-Expansion Min-Expansion could, to
some degree, describe the syntactic relation-
ships between the candidate and pronoun.
However, it is incapable of capturing the
syntactic properties of the candidate or
the pronoun, because the tree structure
surrounding the expression is not taken into
consideration. To incorporate such infor-
mation, feature Simple-Expansion not only
contains all the nodes in Min-Expansion, but
also includes the first-level children of these
nodes2. The middle of Figure 1 shows such a
feature for i{?him?, ?the man?}. We can see
that the nodes ?PP? (for ?in the room?) and
?VB? (for ?saw?) are included in the feature,
which provides clues that the candidate is
modified by a prepositional phrase and the
pronoun is the object of a verb.
Full-Expansion This feature focusses on the
whole tree structure between the candidate
and pronoun. It not only includes all the
nodes in Simple-Expansion, but also the
nodes (beneath the nearest commanding par-
ent) that cover the words between the candi-
date and the pronoun3. Such a feature keeps
the most information related to the pronoun
2If the pronoun and the candidate are not in the same sen-
tence, we will not include the nodes denoting the sentences
before the candidate or after the pronoun.
3We will not expand the nodes denoting the sentences
other than where the pronoun and the candidate occur.
and candidate pair. The rightmost picture of
Figure 1 shows the structure for feature Full-
Expansion of i{?him?, ?the man?}. As illus-
trated, different from in Simple-Expansion,
the subtree of ?PP? (for ?in the room?) is
fully expanded and all its children nodes are
included in Full-Expansion.
Note that to distinguish from other words, we
explicitly mark up in the structured feature the
pronoun and the antecedent candidate under con-
sideration, by appending a string tag ?ANA? and
?CANDI? in their respective nodes (e.g.,?NN-
CANDI? for ?man? and ?PRP-ANA? for ?him? as
shown in Figure 1).
4.3 Structural Kernel and Composite Kernel
To calculate the similarity between two structured
features, we use the convolution tree kernel that is
defined by Collins and Duffy (2002) and Moschitti
(2004). Given two trees, the kernel will enumerate
all their subtrees and use the number of common
subtrees as the measure of the similarity between
the trees. As has been proved, the convolution
kernel can be efficiently computed in polynomial
time.
The above tree kernel only aims for the struc-
tured feature. We also need a composite kernel
to combine together the structured feature and the
normal features described in Section 3.1. In our
study we define the composite kernel as follows:
Kc(x1, x2) = Kn(x1, x2)|Kn(x1, x2)| ?
Kt(x1, x2)
|Kt(x1, x2)|(2)
where Kt is the convolution tree kernel defined
for the structured feature, and Kn is the kernel
applied on the normal features. Both kernels are
divided by their respective length4 for normaliza-
tion. The new composite kernel Kc, defined as the
4The length of a kernel K is defined as |K(x1, x2)| =?
K(x1, x1) ?K(x2, x2)
44
multiplier of normalized Kt and Kn, will return a
value close to 1 only if both the structured features
and the normal features from the two vectors have
high similarity under their respective kernels.
5 Experiments and Discussions
5.1 Experimental Setup
In our study we focussed on the third-person
pronominal anaphora resolution. All the exper-
iments were done on the ACE-2 V1.0 corpus
(NIST, 2003), which contain two data sets, train-
ing and devtest, used for training and testing re-
spectively. Each of these sets is further divided
into three domains: newswire (NWire), newspa-
per (NPaper), and broadcast news (BNews).
An input raw text was preprocessed automati-
cally by a pipeline of NLP components, including
sentence boundary detection, POS-tagging, Text
Chunking and Named-Entity Recognition. The
texts were parsed using the maximum-entropy-
based Charniak parser (Charniak, 2000), based on
which the structured features were computed au-
tomatically. For learning, the SVM-Light soft-
ware (Joachims, 1999) was employed with the
convolution tree kernel implemented by Moschitti
(2004). All classifiers were trained with default
learning parameters.
The performance was evaluated based on the
metric success, the ratio of the number of cor-
rectly resolved5 anaphor over the number of all
anaphors. For each anaphor, the NPs occurring
within the current and previous two sentences
were taken as the initial antecedent candidates.
Those with mismatched number and gender agree-
ments were filtered from the candidate set. Also,
pronouns or NEs that disagreed in person with the
anaphor were removed in advance. For training,
there were 1207, 1440, and 1260 pronouns with
non-empty candidate set found pronouns in the
three domains respectively, while for testing, the
number was 313, 399 and 271. On average, a
pronoun anaphor had 6?9 antecedent candidates
ahead. Totally, we got around 10k, 13k and 8k
training instances for the three domains.
5.2 Baseline Systems
Table 2 lists the performance of different systems.
We first tested Hobbs? algorithm (Hobbs, 1978).
5An anaphor was deemed correctly resolved if the found
antecedent is in the same coreference chain of the anaphor.
NWire NPaper BNews
Hobbs (1978) 66.1 66.4 72.7
NORM 74.4 77.4 74.2
NORM MaxEnt 72.8 77.9 75.3
NORM C5 71.9 75.9 71.6
S Min 76.4 81.0 76.8
S Simple 73.2 82.7 82.3
S Full 73.2 80.5 79.0
NORM+S Min 77.6 82.5 82.3
NORM+S Simple 79.2 82.7 82.3
NORM+S Full 81.5 83.2 81.5
Table 2: Results of the syntactic structured fea-
tures
Described in Section 2, the algorithm uses heuris-
tic rules to search the parse tree for the antecedent,
and will act as a good baseline to compare with the
learned-based approach with the structured fea-
ture. As shown in the first line of Table 2, Hobbs?
algorithm obtains 66%?72% success rates on the
three domains.
The second block of Table 2 shows the baseline
system (NORM) that uses only the normal features
listed in Table 1. Throughout our experiments, we
applied the polynomial kernel on the normal fea-
tures to learn the SVM classifiers. In the table we
also compared the SVM-based results with those
using other learning algorithms, i.e., Maximum
Entropy (Maxent) and C5 decision tree, which are
more commonly used in the anaphora resolution
task.
As shown in the table, the system with normal
features (NORM) obtains 74%?77% success rates
for the three domains. The performance is simi-
lar to other published results like those by Keller
and Lapata (2003), who adopted a similar fea-
ture set and reported around 75% success rates
on the ACE data set. The comparison between
different learning algorithms indicates that SVM
can work as well as or even better than Maxent
(NORM MaxEnt) or C5 (NORM C5).
5.3 Systems with Structured Features
The last two blocks of Table 2 summarize the re-
sults using the three syntactic structured features,
i.e, Min Expansion (S MIN), Simple Expansion
(S SIMPLE) and Full Expansion (S FULL). Be-
tween them, the third block is for the systems us-
ing the individual structured feature alone. We
can see that all the three structured features per-
45
NWire NPaper BNews
Sentence Distance 0 1 2 0 1 2 0 1 2
(Number of Prons) (192) (102) (19) (237) (147) (15) (175) (82) (14)
NORM 80.2 72.5 26.3 81.4 75.5 33.3 80.0 65.9 50.0
S Simple 79.7 70.6 21.1 87.3 81.0 26.7 89.7 70.7 57.1
NORM+S Simple 85.4 76.5 31.6 87.3 79.6 40.0 88.6 74.4 50.0
Table 3: The resolution results for pronouns with antecedent in different sentences apart
NWire NPaper BNews
Type person neuter person neuter person neuter
(Number of Prons) (171) (142) (250) (149) (153) (118)
NORM 81.9 65.5 80.0 73.2 74.5 73.7
S Simple 81.9 62.7 83.2 81.9 82.4 82.2
NORM+S Simple 87.1 69.7 83.6 81.2 86.9 76.3
Table 4: The resolution results for different types of pronouns
form better than the normal features for NPaper
(up to 5.3% success) and BNews (up to 8.1% suc-
cess), or equally well (?1 ? 2% in success) for
NWire. When used together with the normal fea-
tures, as shown in the last block, the three struc-
tured features all outperform the baselines. Es-
pecially, the combinations of NORM+S SIMPLE
and NORM+S FULL can achieve significantly6
better results than NORM, with the success rate
increasing by (4.8%, 5.3% and 8.1%) and (7.1%,
5.8%, 7.2%) respectively. All these results prove
that the structured syntactic feature is effective for
pronoun resolution.
We further compare the performance of the
three different structured features. As shown in
Table 2, when used together with the normal
features, Full Expansion gives the highest suc-
cess rates in NWire and NPaper, but neverthe-
less the lowest in BNews. This should be be-
cause feature Full-Expansion captures a larger
portion of the parse trees, and thus can provide
more syntactic information than Min Expansion
or Simple Expansion. However, if the texts are
less-formally structured as those in BNews, Full-
Expansion would inevitably involve more noises
and thus adversely affect the resolution perfor-
mance. By contrast, feature Simple Expansion
would achieve balance between the information
and the noises to be introduced: from Table 2 we
can find that compared with the other two features,
Simple Expansion is capable of producing aver-
age results for all the three domains. And for this
6p < 0.05 by a 2-tailed t test.
reason, our subsequent reports will focus on Sim-
ple Expansion, unless otherwise specified.
As described, to compute the structured fea-
ture, parse trees for different sentences are con-
nected to form a large tree for the text. It would
be interesting to find how the structured feature
works for pronouns whose antecedents reside in
different sentences. For this purpose we tested
the success rates for the pronouns with the clos-
est antecedent occurring in the same sentence,
one-sentence apart, and two-sentence apart. Ta-
ble 3 compares the learning systems with/without
the structured feature present. From the table,
for all the systems, the success rates drop with
the increase of the distances between the pro-
noun and the antecedent. However, in most cases,
adding the structured feature would bring consis-
tent improvement against the baselines regardless
of the number of sentence distance. This observa-
tion suggests that the structured syntactic informa-
tion is helpful for both intra-sentential and inter-
sentential pronoun resolution.
We were also concerned about how the struc-
tured feature works for different types of pro-
nouns. Table 4 lists the resolution results for two
types of pronouns: person pronouns (i.e., ?he?,
?she?) and neuter-gender pronouns (i.e., ?it? and
?they?). As shown, with the structured feature in-
corporated, the system NORM+S Simple can sig-
nificantly boost the performance of the baseline
(NORM), for both personal pronoun and neuter-
gender pronoun resolution.
46
1 2 3 4 5 6 7 8 9 100.65
0.7
0.75
0.8
Number of Training Documents
Succe
ss
NORMS_SimpleNORM+S_Simple 2 4 6 8 10 120.65
0.7
0.75
0.8
Number of Training Documents
Succe
ss
NORMS_SimpleNORM+S_Simple 1 2 3 4 5 6 7 80.65
0.7
0.75
0.8
Number of Training Documents
Succe
ss
NORMS_SimpleNORM+S_Simple
NWire NPaper BNews
Figure 2: Learning curves of systems with different features
5.4 Learning Curves
Figure 2 plots the learning curves for the sys-
tems with three feature sets, i.e, normal features
(NORM), structured feature alone (S Simple),
and combined features (NORM+S Simple). We
trained each system with different number of in-
stances from 1k, 2k, 3k, . . . , till the full size. Each
point in the figures was the average over two trails
with instances selected forwards and backwards
respectively. From the figures we can find that
(1) Used in combination (NORM+S Simple), the
structured feature shows superiority over NORM,
achieving results consistently better than the nor-
mal features (NORM) do in all the three domains.
(2) With training instances above 3k, the struc-
tured feature, used either in isolation (S Simple)
or in combination (NORM+S Simple), leads to
steady increase in the success rates and exhibit
smoother learning curves than the normal features
(NORM). These observations further prove the re-
liability of the structured feature in pronoun reso-
lution.
5.5 Feature Analysis
In our experiment we were also interested to com-
pare the structured feature with the normal flat
features extracted from the parse tree, like fea-
ture Subject and Object. For this purpose we
took out these two grammatical features from the
normal feature set, and then trained the systems
again. As shown in Table 5, the two grammatical-
role features are important for the pronoun resolu-
tion: removing these features results in up to 5.7%
(NWire) decrease in success. However, when the
structured feature is included, the loss in success
reduces to 1.9% and 1.1% for NWire and BNews,
and a slight improvement can even be achieved for
NPaper. This indicates that the structured feature
can effectively provide the syntactic information
NWire NPaper BNews
NORM 74.4 77.4 74.2
NORM - subj/obj 68.7 76.2 72.7
NORM + S Simple 79.2 82.7 82.3
NORM + S Simple - subj/obj 77.3 83.0 81.2
NORM + Luo05 75.7 77.9 74.9
Table 5: Comparison of the structured feature and
the flat features extracted from parse trees
Feature Parser NWire NPaper BNews
Charniak00 73.2 82.7 82.3
S Simple Collins99 75.1 83.2 80.4
NORM+ Charniak00 79.2 82.7 82.3
S Simple Collins99 80.8 81.5 82.3
Table 6: Results using different parsers
important for pronoun resolution.
We also tested the flat syntactic feature set pro-
posed in Luo and Zitouni (2005)?s work. As de-
scribed in Section 2, the feature set is inspired
the binding theory, including those features like
whether the candidate is c commanding the pro-
noun, and the counts of ?NP?, ?VP?, ?S? nodes
in the commanding path. The last line of Table 5
shows the results by adding these features into the
normal feature set. In line with the reports in (Luo
and Zitouni, 2005) we do observe the performance
improvement against the baseline (NORM) for all
the domains. However, the increase in the success
rates (up to 1.3%) is not so large as by adding the
structured feature (NORM+S Simple) instead.
5.6 Comparison with Different Parsers
As mentioned, the above reported results were
based on Charniak (2000)?s parser. It would be
interesting to examine the influence of different
parsers on the resolution performance. For this
purpose, we also tried the parser by Collins (1999)
47
(Mode II)7, and the results are shown in Table 6.
We can see that Charniak (2000)?s parser leads to
higher success rates for NPaper and BNews, while
Collins (1999)?s achieves better results for NWire.
However, the difference between the results of the
two parsers is not significant (less than 2% suc-
cess) for the three domains, no matter whether the
structured feature is used alone or in combination.
6 Conclusion
The purpose of this paper is to explore how to
make use of the structured syntactic knowledge to
do pronoun resolution. Traditionally, syntactic in-
formation from parse trees is represented as a set
of flat features. However, the features are usu-
ally selected and defined by heuristics and may
not necessarily capture all the syntactic informa-
tion provided by the parse trees. In the paper, we
propose a kernel-based method to incorporate the
information from parse trees. Specifically, we di-
rectly utilize the syntactic parse tree as a struc-
tured feature, and then apply kernels to such a fea-
ture, together with other normal features, to learn
the decision classifier and do the resolution. Our
experimental results on ACE data set show that
the system with the structured feature included
can achieve significant increase in the success rate
by around 5%?8%, for all the different domains.
The deeper analysis on various factors like training
size, feature set or parsers further proves that the
structured feature incorporated with our kernel-
based method is reliably effective for the pronoun
resolution task.
References
C. Aone and S. W. Bennett. 1995. Evaluating auto-
mated and manual acquisition of anaphora resolu-
tion strategies. In Proceedings of the 33rd Annual
Meeting of the Association for Compuational Lin-
guistics, pages 122?129.
E. Charniak. 2000. A maximum-entropy-inspired
parser. In Proceedings of North American chapter
of the Association for Computational Linguistics an-
nual meeting, pages 132?139.
M. Collins and N. Duffy. 2002. New ranking algo-
rithms for parsing and tagging: kernels over discrete
structures and the voted perceptron. In Proceed-
ings of the 40th Annual Meeting of the Association
7As in their pulic reports on Section 23 of WSJ TreeBank,
Charniak (2000)?s parser achieves 89.6% recall and 89.5%
precision with 0.88 crossing brackets (words ? 100), against
Collins (1999)?s 88.1% recall and 88.3% precision with 1.06
crossing brackets.
for Computational Linguistics (ACL?02), pages 263?
270.
M. Collins. 1999. Head-Driven Statistical Models for
Natural Language Parsing. Ph.D. thesis, University
of Pennsylvania.
J. Hobbs. 1978. Resolving pronoun references. Lin-
gua, 44:339?352.
T. Joachims. 1999. Making large-scale svm learning
practical. In Advances in Kernel Methods - Support
Vector Learning. MIT Press.
F. Keller and M. Lapata. 2003. Using the web to ob-
tain freqencies for unseen bigrams. Computational
Linguistics, 29(3):459?484.
C. Kennedy and B. Boguraev. 1996. Anaphora
for everyone: pronominal anaphra resolution with-
out a parser. In Proceedings of the 16th Inter-
national Conference on Computational Linguistics,
pages 113?118, Copenhagen, Denmark.
S. Lappin and H. Leass. 1994. An algorithm for
pronominal anaphora resolution. Computational
Linguistics, 20(4):525?561.
X. Luo and I. Zitouni. 2005. Milti-lingual coreference
resolution with syntactic features. In Proceedings of
Human Language Techonology conference and Con-
ference on Empirical Methods in Natural Language
Processing (HLT/EMNLP), pages 660?667.
R. Mitkov. 1998. Robust pronoun resolution with lim-
ited knowledge. In Proceedings of the 17th Int. Con-
ference on Computational Linguistics, pages 869?
875.
A. Moschitti. 2004. A study on convolution kernels
for shallow semantic parsing. In Proceedings of the
42nd Annual Meeting of the Association for Compu-
tational Linguistics (ACL?04), pages 335?342.
V. Ng and C. Cardie. 2002. Improving machine learn-
ing approaches to coreference resolution. In Pro-
ceedings of the 40th Annual Meeting of the Associa-
tion for Computational Linguistics, pages 104?111,
Philadelphia.
W. Soon, H. Ng, and D. Lim. 2001. A machine
learning approach to coreference resolution of noun
phrases. Computational Linguistics, 27(4):521?
544.
V. Vapnik. 1995. The Nature of Statistical Learning
Theory. Springer.
X. Yang, J. Su, G. Zhou, and C. Tan. 2004. Improv-
ing pronoun resolution by incorporating coreferen-
tial information of candidates. In Proceedings of
42th Annual Meeting of the Association for Compu-
tational Linguistics, pages 127?134, Barcelona.
D. Zelenko, C. Aone, and A. Richardella. 2003. Ker-
nel methods for relation extraction. Journal of Ma-
chine Learning Research, 3(6):1083 ? 1106.
S. Zhao and R. Grishman. 2005. Extracting rela-
tions with integrated information using kernel meth-
ods. In Proceedings of 43rd Annual Meeting of the
Association for Computational Linguistics (ACL05),
pages 419?426.
48
