Lex iea l -Funct iona l  T rans fer :  A T rans fer  F ramework  
in  a Mach ine  Trans la t ion  System Based  on  LFG 
Ikuo KUDO 
CSK Research Institute 
3-22-17 Higashi-Ikebukuro, Toshima-ku, 
Tokyo, 170, Japan 
Abstract 
This paper presents a transfer framework called LFT 
(Lexical-functional Transfer) for a machine translation 
system based on LFG (Lexical-functional Grammar). The 
translation process consists of subprocesses of analysis, 
transfer and generation. We adopt the so called f- 
structures of LFG as the intermediate r presentations or 
interfaces between those subprocesses, thus the transfer 
process converts a source f-structure into a target f- 
structure. Since LFG is a grammatical framework for 
sentence structure analysis of one language, for the 
purpose, we propose a new framework for specifying 
transfer rules with LFG schemata, which incorporates 
corresponding lexical functions of two different languages 
into an equational representation. The transfer process, 
therefore, is to solve equations called target f-descriptions 
derived from the transfer rules applied to the source f- 
structure and then to produce a target f-structure. 
1. Int roduct ion 
A grammatical theory called LFG (Lexical-functional 
Grammar)I l l  is a framework for sentence structure 
analysis and has a simple framework for representing 
lexical and grammatical information. It analyzes a 
sentence in two steps, a phrase structure analysis and a 
functional structure analysis. The former is a syntactic 
analysis and produces constituent structures (c- 
structures). The latter consists of several procedures, 
attaching lexical functions to components in the c- 
structure, deriving flmctional equations called functional 
descriptions (f-descriptions) from them with preserving 
configurational relationships, and solving these equations 
to produce a functional structure (f-structure). Those 
lexical functions are represented by a representative 
framework called LFG schema. 
We adopt such LFG schema to a representative 
framework for a dictionary and rules which define 
functional correspondences between components of two 
languages. With them the transfer process can be 
designed as a simple procedure such that its task is only to 
solve functional equations of the target language and then 
produce an f-structure of the target language. We propose 
such a framework called LFT (Lexical-functional 
Transfer). It consists of both a representative framework 
for a two-way dictionary and transfer rules and a 
processing mechanism of transferring an f-structure of 
source language into an f-structure of target language. 
The representative framework is declarative and then 
easy to manipulate. The procedure is a mathematical 
processing and thus enough simple and clear in its nature 
and executable easily. 
112 
Hirosato NOMURA 
NTT Basic Research Laboratories 
Musashino-shi, Tokyo, 180, Japan 
2. Overal l  construct ion of t rans lat ion  system 
Figure I shows the global construction of the 
translation system. The whole process is divided into 
three subprocesses, analysis, transfer and generation as 
usual translation systems. The analysis process is nothing 
but LFG analysis. 
LFG ana|ysis~" ~" two- way dictiona r y--~ /Generation 
F . . . . . . . . . . .  7 7- --F . . . . . . . . . . . .  7 Source , ~ ~ , Target 
( Lexical-functional Transfer ) 1) Dictionary looking-up, 
2) Conditioning, 3) lnstantiation, 4) Solving target equations 
Fig. 1 Translation model based on Lexical-functional Transfer 
The transfer process, LFT converts an f-structure of a 
source language into a corresponding f-structure of a 
target language. At first, a transfer dictionary is looked- 
up and transfer ules are selected. Next, the conditions in 
the rule are checked. If they are satisfied, the schemata of 
target language in the transfer ule are instantiated. And 
then the functional descriptions of target language are 
obtained. They are called the target functional descrip- 
tions (target f-descriptions). After setting up the target f- 
descriptions, the task of the transfer process is reduced to 
solve them and then produce an f-structure of the target 
language. The processes of instantiation and solving 
target f-descriptions are the same mechanism within LFG. 
Implementation a d execution of these processes are very 
clear and thus there is no need for further explanation. 
The generation process is tentatively defined as a 
linearization process of the structured relationships in the 
target f-structure and a insertion process of inflected 
words. However its explanation isbeyond the scope of this 
paper. 
3. LFTrepresentat ive  f ramework  
3.1 Transfer  rules 
A transfer ule makes two schemata of two languages 
correspond each other and its general representative 
framework is as follows: 
J\[ (LFG) schemata \] < = = = > E\[ (LFG) schemata\]. 
In the expression, to show what language the schemata 
belong to, a initial letter of each language is put in front of 
each square bracket. In this paper, Japanese is signified 
with 'J', English with 'E'. Examples of the transfer ules 
are as follows: 
J\[(1' SUBJ)=I \]<===>E\[( I"SUBJ)= I \], 
L . . . . . . . . . . . . . . . .  J 
J\[( L~'PRED)::'t'z"I<===>E\[(~ PRED)='Tom'\]. 
A metavariablc ~'in the right hand side nmst correspond 
to that in the left hand side, and also a metavariable ~ in 
the right hand side must correspond to that in the left 
hand side. A symbol < = = = > designates that both sides 
are strictly corresponding. When a rule is referred in the 
transfier process, if it is, for example, transferring from 
Japanese into English, the side having 'J' plays like a 
condition part in a 'IF...THEN...' rule, and vice versa. 
Therefore the description of the transfer rules are 
bidirectional since both sides can be a condition part 
depending on the direction of transferring. 
The number of schemata in both sides are not always 
equal and such an example appears in the rules 3 in the 
table 3. It can be divided into next three rules. The 
isolated type is used in a dictionary since it is compact. 
- ( tSV  CASE-NAME)=SUBJJ 
l'~ \ [ ( tOBJ)= ~ \ ]<===>J  F i t  on,l)= J. q 
L(~ OBJ CASE-NAME)=OBJ -~ 
\[:( ~' PRED)='PI,AY -\[ < = = = >J  r-( T PREl))='suru "7 
E <( t SUBJX ~ OBJ)>' I l <( ~" SUBJ)( 1' OBJ)>' l 
L i (  ~ SUBJ CASE-MARKEItl='ba'J J m ( I' OBJ CASE-MARKER)='we' J 
In a f-structure, its structure is represented with 
hierarchy and function names. Even if the structures 
between two corresponding f-structures are different, a 
transfer process must prove well-formed syntactic 
relationships in the target f-structure. Even these 
relationships can be represented with the LFG schema. 
For example, the rule (2.c) makes different structures 
correspond; hierarchy and function ames in the rule are 
different. English side is 'ACOMP SCOMP' but Japanese 
side is <XCOMP'. Therefore LFT rule can make two 
different structures correspond. 
Furthermore, there is often nothing corresponding 
between two languages. For example, a infinitive 'to' 
exists in English, but there is nothing in Japanese. Two 
schemata in the rule (2.b), 
E\[( 1" ACOMP SCOMP to) = + \], 
El( 1' ACOMP SCOMP INF)= + \], 
represent infinitive 'to'. As another example, there is no 
gender in Japanese and English noun, but there are 
genders in French and German. But it is easy to treat he 
problem because you have only to add the gender's schema 
to the rule. For example, 'a book' in English corresponds to
'ein Buch' in German. 
E \]' NUM)=SG < = = = >G NUMI =SG 
SPEC) = A SPEC) = E1N 
GENDER)= NEUTER 
3.2 Two-way dict ionary 
The LFT utilizes a two-way dictionary which has 
entries for both languages. Each entry consists of pairs of 
(1) a des ignator  and (2) some pointers. The designator is 
a medium to instantiate the schemata in the condition 
side. The pointer refers a transfer ule. The rule is 
referred by both languages through each pointer. 
A rule is registered to the ~value' entry of the head 
schemata, '( ~ PRED)=value'. When a rule has many head 
schemata, it is assigned to all the 'value' entries 
redundantly. For example, the idiom 'be eager to' has two 
head schemata; ( t PRED) - < BE <... >', ( ~" ACOMP PRED ) = 
<F, AGER <... >' in the rule (2b). So it is assigned to the 'be' 
English-Japanese dictionary Japanese-English dictionary 
E:entryl / ~ J:entryl -7  
designator . . . . . . .  ,7- L__  ...... , . . . . . . . .  designator\] 
poin~ers lransmr rums pointers \[ 
E:entry2 E\[Schemata\]< . . . .  >J\[Schemata\] J'entry2 
des ignator  ElSehemata\]< = . . . .  >J\[Sehemata\] " des ignator \ [  
po in ters  E\[Schemata\]< = . . . .  >J\[Scbmnata\] po in ters  J 
Fig.2 example of a two-way dictionary 
Table I The English-Japanese dictionary (Ex. from sentence(1) to sentence {2)) 
" Eilglieh entry 
be 
eager 
Tom 
play 
baseball 
desinator 
(~ ACOMP)= J, 
t=$ 
t= l  
pointers 
rule2 a,b,c,d 
rule2 a,b,c,d 
rule1 
rule3 
rule4 
Table 2 The Japanese-El~glish dictionary (Ex. from sentence(2) tosentence (1 }) 
Japanese ntry pointers 
tngaru 
tolnil 
8uru 
yakyuu 
desinator 
t--~ 
t=J, 
rule2 a,b,c,d 
rulel 
rule3 
rule4 
. . . . . . . .  T. _~ l_~ a_ _ '_P,:.,~,._ ,.21t~ ( ~ .  j>2 tw_t~, 2 t h 3 ~e.,tea_?~ (J) a._a J 22 ) . . . . . . .  
(Rulel) 
~( ~ PRED)="ram' 7 F( ~" PltED)='Tomu' 
E \ [ (TNUM)=SG J < . . . .  >J  \ [ (  \]' NUM)=SG 
L( 1' PERSON ) = 3 L ( 1' PERSON ) = 3 (R~.a)L 1 V( l SUBa>= * - 
E \ [ (  i' 8UBJ) = I < . . . .  >J  l (  ~ SUBJ CASE-MARKER)='ba' 
L( 1' SUBJ CASE-NAME)=8UBJ 
(Ruh~2.b) 
( ~ ACOMP SUBJ)=( t SUBJ) \[- 
( t ACOMP 8COMP 8UUJ) V t XCOMP SUB J) =( t  ACOMPSUSJ) \[ =(~SUBJ)  
E ( ~ ACOMPSCOMP to)= + < . . . . .  > J  J ( t PRED)='tagaru 
( T ACOMP SCOMP INF)= + J<(  t SUBJ}( ~ XCOMP)>' 
{ T ACOMP PRED)='EAGER 
<( t sunJ)( tSCOMP)>' 
( ~" PRED)='BE 
L <( ? SUnJ)( tACOMP)> _ 
(Rt e2.e) 
iR "(tACOMPSC()MP)= t \] < . . . .  >Z \[ (~XCOMP)= ~ \] 
t ~2.d) 
" -( i TENSE--)- PRESENT ~< . . . . .  > J \ [ l  ' TENSE) = PRE NT '  ASPEC'r)='iru' 
(Rt f3 D 
(tSUBd)= ~ - sun,))= ~ 7 
SUB,\] CASE-MARKER)='he'I 
SUBJ CASE-NAME)= SUBJI 
E (t  OBJ)= ~, \[ 'OSJ)= ~, \[ 
I < ..... >J < OS,l CASE-MARKER)='wo'I ( I" PRED) = 'I'LAY J OBJ CASE-NAME) = OBJ J 
. <( t SUBJ)( i' OBJ)>~\] ' PRED)= 'etli'tl J 
<( ~' SUBJ)( ~" OBJ)>' A (Rule4) \] < = = = >J  ' PRED)='yakyuu' E r ( t  PRED)='bsseball' 
L( t CAT) = SPORT \[ I  \] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  : CA_'?)--:~y()Ry . . . . . . . . . . . . .  
entry and the 'eager' entry in the table 1. But the desig- 
nators are different. The 'be' designator is '  ~ = 1 ' and the 
'eager' designator is '( ? ACOMP )= I ', as shown in table 1. 
4. LFT processing mechanism 
LFT processing is divided into four phases as shown in 
Figure 3. Each phase is described briefly as follows: 
(phase1) Loohing:uup the dictionary_ Collect all the head f
descriptions whose type is '(fn PRED)-value',  from a 
source f-structure. Look-up 'value' in the dictionary one 
by one and go to the phase (2). 
(phase2) Cond i t i~  Check whether the conditions in 
the rule are satisfied with the source f-structure. If so, go 
to the phase (3). If not, check the other ules. When a rule 
is applied ( from English to Japanese ),English side in the 
rule works the conditions, Japanese side works the result. 
E \ [condi t ions\ ]  < = = = > J \ [ resu l t s  \] 
(phase3) Instantia.fion: Instantiate the schemata in the 
result side with the table of correspondence,  which 
yields target f-descriptions. When actual variables (fl, 
f2 ..... etc.) are assigned to the metavariables ~,~ in the 
results, the table is looked up. The table shows that actual 
113 
var iab les  in  the  cond i t ion  s ide  cor respond to that  in  the  
resu l t  s ide .  For  example ,  tab le  5 in  the  F igure  3. 
(fl_ILase4) So lv ingLLar~t ions :_  Af ter  the  phase  (1), 
(2) and  (3), co l lec t  a l l  the  ta rget  f -descr ip t ions  and  so lve  
them by  the  LFG a lgor i thm,  ' f rom f -descr ip t ions  to an  f-- 
s t ruc ture ' .  So a ta rget  f - s t ruc ture  i s  obta ined .  
F-structure 
of the source text 
dictionary 
entry disignator 
pointer 
transfer ules \[ Rules E\[conditions\] <===}> J\[resultsl  
\[ Rules E\[schemata\] , (===> J\[schematal  
F-descriptions l
of~m target ext I 
(phase1) r~_-~i;,,c-t5,:;-I 
I~ooking-up ' ? ,' ' , m 1' tg.4 
a dictionary . . . . .  -f ~ .~ . . . .  
Table 4 I 
, ent ry / I  entr ' designator ~, 
eager \[( t ACOMP)= ,~ \] (fl ACOMP)=f3 \] 
Ton; / I = $ I f2=f2 ; 
, p lay  / \] = $ f4=f4  ) 
(obaso > 
Conditioning ' ) ~  ', 
lf~ I g2 l 
',f4 I g3 ', 
If5 I g4 1 
1 nstantiation 
l . . . . . . . . . . . . . . . . . . .  l 
\] Target f-descriptions 1 
, (1)__(18) in the table6 
t . . . . . . . . . . . . . . . . . .  J 
(phase4) ~ 
Solving targe~ r- . . . . . . . . . .  -1 *F-structure ' f-descriptions , . ~. , 
, m l' tg .5  k . . . . . . . . . . .  u 
Fig.3 Mechanism of I,FT (l,exical-functional Transfer) 
1luring phases of 1, 2 and 3, metavariables are assigned to actual 
variables as follows: 
(phasel) The metavariables t or ~, in the designator: 
The ' ~ -variable in the designator in the dictionary' is unified with 
the actual variable ! fn ' in the schema ' (fn PItEI))= value' which is 
h)oked up. If designator i s '  ~' -- ,\[ ', assign the same variable ' fn ' to 
'1"-variable in the designater'. If not,, assign the actual variable 
unified with the source f-structure. If it is noL found, the conditions 
are not satisfied. 
iphase2) The metavariables ~ or ~ in the condition side: 
Assign 'actual variable whicb is assigned ~-variable in the 
designator during (phase 1)' to ' 1' -variable in the conditions'. Find 
the actual variables unified with the source f-structure. Assign it 
unified with the source f-structure to the ~ -variable. If it  is not fotmd, 
the conditions are not satisfied. 
(phase3) The metavariables ~ or ~ in the result side: 
Find the actual variables in the condition side by corresponding 
relations ( i' to T, ~ to ~ ) which the rule define. Look up the variable 
in the table of correspondence. Assign the variable to the 
metavariable. If there is no variable, assign a new actual variable to 
the metavariable. 
5. Example  
An  Eng l i sh  example  sentence  and  i t s  Japanese  
equ iva lent  sentence  are  as  fo l lows :  
(1). Tom is eager to play baseball. 
(2). t ,A  t~ ~ ~- I. f : . \ ] /oT~,~o 
tomu ha yakyuu we si(suru) tagatteiru(tagaru.). 
The f - s t ruc ture  of  the  Eng l i sh  sentence  i s  shown in  F igure  
4, and  the  f - s t ruc ture  of  the  Japanese  sentence  i s  shown in  
F igure  5. 
(1) Collect al l  the f-descriptions 'fin PREI))= value's fi'om a source i: 
structure (Figure 4). 
"11 4 
-SUBJ -PRED "rein' -\] -~' 
NUM SG \] 
PEP,~SON 3 .l 
f2 ~_ 
ACOMP SUBJ  P2 
|SUBJ 12 
/OBJ \[- PRED 'baseball' iI
\[_CAT SPORT 
P5 
|PRED 'PLAY < ( ~ SUB J)( ~ OBJ) > 
' EAGER<(  1' SUBJ)( ~ SCOMP) >' 
PRED 
TENSE 
PRED 
f3 
'BE<( ~ SUBJ)( ~" ACOMP)>' 
PRESENT 
fA 
Fig. 4 F-structure of the English sentence (1) 
-suBJ 
XCOMP 
PRED 
TENSE 
ASPECT 
)RED 'Tomu' l UM SG 
~RSON 
ASE-MARKER 'ha' 
ASE-NAME SUBJ 
g2 
SoUBJ 2 BJ -~)RE D 'yakyuu' 
CAT SPORT 
I CASE-MARKER 'we' 
g4 ~CASE-NAME OBJ 
\]_PREI) 'sara<( t SUBJ)( ~ OBJ)>' 
g3 
'tagaru <( ~ SUBJ)( ~ XCOMP)>' 
PRESENT 
'iru' 
Fig. 5 F-structure of the Japanese sentence (2) 
(a)(fl PREI)) = 'BE <... > ' (d)(f4 PRED) = 'PLAY < ... >'  
(b)(f2 PREI)) = 'Tom' (el(f5 PRED) = 'baseball' 
(el(f3 PRED) = 'EAGEI{ <... > '  
'be': Look up 'be' ; (f| PRED )--'BE <... >'. The designator in the 
dictionary (table 1) is '  ~ = $ '. So 1' = $ = ' fl '. Select the rule (2 a, b, 
c, d) in table 1. 
(2) Check the conditions . Assigo actual variable fl to the 
metavariable ~'. Unify the schemata of conditions with the f- 
structure (Figure 4). Then actual variables ~ f2 ' and ~ f4'  are assigned 
to the motavariables ~ and the following f-descriptions are obtained. 
E \ [ ( f lSUBJ )=f2 \ ]  E \ [ (h  ACOMP SCOMP)= f4\] 
All the conditions of the ( rule 2) are satisfied. Write ' f2 ' and ' f4 ' in 
the table 5 in Figure 4. 
(3) Instant iate the schemata in the result  side. For rule (2.a), look up 
in the table 5. There is no actual variable corresponding to ' fl ' . So 
assign a new actual vm'iable ' gl ' to the metavariable ~. Write actual 
var iable '  gl ' corresponding to'  f l '  in the table 5. 
E \ [ ( f  ISUBJ )= f2\] < . . . .  > J \ [ (g lPRE I ) )  =g2 \] ...(1) 
lAkewise,we get the other f-descriptions (2) (3) from rule (2.a), the f- 
descriptions (4), (5) from rule (2.b), the f-descriptions (6) from rule 
(2.el and the f-descriptions (7), (8) from rule (2.d). 
'Tom': the f-descriptions (9), (10), (11) are obtained. 
'eager' : the same f-descriptions (1)...(8) are obtained. 
'play': the f-descriptions (12)..(18) are obtained. 
'baseball '  : the \['-descriptions (19),(20) are obtained. 
(4) Solve the f-descriptions (1)...(20) below. So the target f-structure 
(Figure 5) is obtained. 
Table 6 
(1 J (gl SUB,\]) = g21 (11)J \[ (g2 PERSON) = 31 
(2) I \[ (g\] SUBJ CASE-MARKER) = 'ha' (12)J (g3 SUBJ) = g2\] 
3)J (gl SUBJ CASE-NAME ) = SUBJ \] (13)J \[ (g3 SUBJ CASE-MARKI~R)='ha'\] 
(4)J \[ (gl PRED) = 'tagaru<...>q (14)J \[ (g3 SUBJ CASE-NAME) = SUBJ\] 
(5)J \[ (gl XCOMP SUBJ) = (gl SUBJ) (15)1 (g30BJ ) =g4\] 
(6)1 (gl XCOMP) = g3\] (16hi \[ (g30SJ CASE-MARKER) =: 'we'\] 
(7)J (gl TENSE) = PRESENT (17)J \[ (g30BJ CASE-NAME) ~ ()BJJ 
(8)1 \[ (gi ASPECT) := 'ira' (18)J \[ (g3 PRED) = 'sara <... >' \] 
\] (9)J \[ (g2 PRED) =: 'tomu'\] (19)1 \[ (g4 PREI)) = 'yakyuu' \]
(1~ l (_3~.t!M! = S(~ ... . . . . . . . . . . . . .  {2o!J t(g4 c a'j'j.2:s3,,,~'~L . . . . . . . . . . . . .  
Acknowledgmel~t  
The author would l ike to thank Prof. Nar i ta of Waseda 
University, Mr. Ookawa, chairman of CRI (CSK Research Institute) 
and Mr.Yada, president of CRI for their constant encouragement. 
Reference~ 
\[1\].R.M.Kaplan and J.Bresnan, 'The Mental of Grammatical  
Relations', MIT Press, 1982. 
