Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 175?183,
Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational Linguistics
Fast Syntactic Analysis for Statistical Language Modeling
via Substructure Sharing and Uptraining
Ariya Rastrow, Mark Dredze, Sanjeev Khudanpur
Human Language Technology Center of Excellence
Center for Language and Speech Processing, Johns Hopkins University
Baltimore, MD USA
{ariya,mdredze,khudanpur}@jhu.edu
Abstract
Long-span features, such as syntax, can im-
prove language models for tasks such as
speech recognition and machine translation.
However, these language models can be dif-
ficult to use in practice because of the time
required to generate features for rescoring a
large hypothesis set. In this work, we pro-
pose substructure sharing, which saves dupli-
cate work in processing hypothesis sets with
redundant hypothesis structures. We apply
substructure sharing to a dependency parser
and part of speech tagger to obtain significant
speedups, and further improve the accuracy
of these tools through up-training. When us-
ing these improved tools in a language model
for speech recognition, we obtain significant
speed improvements with bothN -best and hill
climbing rescoring, and show that up-training
leads to WER reduction.
1 Introduction
Language models (LM) are crucial components in
tasks that require the generation of coherent natu-
ral language text, such as automatic speech recog-
nition (ASR) and machine translation (MT). While
traditional LMs use word n-grams, where the n ? 1
previous words predict the next word, newer mod-
els integrate long-span information in making deci-
sions. For example, incorporating long-distance de-
pendencies and syntactic structure can help the LM
better predict words by complementing the predic-
tive power of n-grams (Chelba and Jelinek, 2000;
Collins et al., 2005; Filimonov and Harper, 2009;
Kuo et al., 2009).
The long-distance dependencies can be modeled
in either a generative or a discriminative framework.
Discriminative models, which directly distinguish
correct from incorrect hypothesis, are particularly
attractive because they allow the inclusion of arbi-
trary features (Kuo et al., 2002; Roark et al., 2007;
Collins et al., 2005); these models with syntactic in-
formation have obtained state of the art results.
However, both generative and discriminative LMs
with long-span dependencies can be slow, for they
often cannot work directly with lattices and require
rescoring large N -best lists (Khudanpur and Wu,
2000; Collins et al., 2005; Kuo et al., 2009). For dis-
criminative models, this limitation applies to train-
ing as well. Moreover, the non-local features used in
rescoring are usually extracted via auxiliary tools ?
which in the case of syntactic features include part of
speech taggers and parsers ? from a set of ASR sys-
tem hypotheses. Separately applying auxiliary tools
to each N -best list hypothesis leads to major ineffi-
ciencies as many hypotheses differ only slightly.
Recent work on hill climbing algorithms for ASR
lattice rescoring iteratively searches for a higher-
scoring hypothesis in a local neighborhood of the
current-best hypothesis, leading to a much more ef-
ficient algorithm in terms of the number, N , of hy-
potheses evaluated (Rastrow et al., 2011b); the idea
also leads to a discriminative hill climbing train-
ing algorithm (Rastrow et al., 2011a). Even so, the
reliance on auxiliary tools slow LM application to
the point of being impractical for real time systems.
While faster auxiliary tools are an option, they are
usually less accurate.
In this paper, we propose a general modifica-
175
tion to the decoders used in auxiliary tools to uti-
lize the commonalities among the set of generated
hypotheses. The key idea is to share substructure
states in transition based structured prediction al-
gorithms, i.e. algorithms where final structures are
composed of a sequence of multiple individual deci-
sions. We demonstrate our approach on a local Per-
ceptron based part of speech tagger (Tsuruoka et al.,
2011) and a shift reduce dependency parser (Sagae
and Tsujii, 2007), yielding significantly faster tag-
ging and parsing of ASR hypotheses. While these
simpler structured prediction models are faster, we
compensate for the model?s simplicity through up-
training (Petrov et al., 2010), yielding auxiliary tools
that are both fast and accurate. The result is signif-
icant speed improvements and a reduction in word
error rate (WER) for both N -best list and the al-
ready fast hill climbing rescoring. The net result
is arguably the first syntactic LM fast enough to be
used in a real time ASR system.
2 Syntactic Language Models
There have been several approaches to include syn-
tactic information in both generative and discrimi-
native language models.
For generative LMs, the syntactic information
must be part of the generative process. Structured
language modeling incorporates syntactic parse
trees to identify the head words in a hypothesis for
modeling dependencies beyond n-grams. Chelba
and Jelinek (2000) extract the two previous exposed
head words at each position in a hypothesis, along
with their non-terminal tags, and use them as con-
text for computing the probability of the current po-
sition. Khudanpur and Wu (2000) exploit such syn-
tactic head word dependencies as features in a maxi-
mum entropy framework. Kuo et al. (2009) integrate
syntactic features into a neural network LM for Ara-
bic speech recognition.
Discriminative models are more flexible since
they can include arbitrary features, allowing for
a wider range of long-span syntactic dependen-
cies. Additionally, discriminative models are di-
rectly trained to resolve the acoustic confusion in the
decoded hypotheses of an ASR system. This flexi-
bility and training regime translate into better perfor-
mance. Collins et al. (2005) uses the Perceptron al-
gorithm to train a global linear discriminative model
which incorporates long-span features, such as head-
to-head dependencies and part of speech tags.
Our Language Model. We work with a discrimi-
native LM with long-span dependencies. We use a
global linear model with Perceptron training. We
rescore the hypotheses (lattices) generated by the
ASR decoder?in a framework most similar to that
of Rastrow et al. (2011a).
The LM score S(w,a) for each hypothesis w of
a speech utterance with acoustic sequence a is based
on the baseline ASR system score b(w,a) (initial n-
gram LM score and the acoustic score) and ?0, the
weight assigned to the baseline score.1 The score is
defined as:
S(w,a) = ?0 ? b(w,a) + F (w, s1, . . . , sm)
= ?0 ? b(w,a) +
d?
i=1
?i ? ?i(w, s1, . . . , sm)
where F is the discriminative LM?s score for the
hypothesis w, and s1, . . . , sm are candidate syntac-
tic structures associated with w, as discussed be-
low. Since we use a linear model, the score is a
weighted linear combination of the count of acti-
vated features of the word sequence w and its as-
sociated structures: ?i(w, s1, . . . , sm). Perceptron
training learns the parameters ?. The baseline score
b(w,a) can be a feature, yielding the dot product
notation: S(w,a) = ??,?(a,w, s1, . . . , sm)? Our
LM uses features from the dependency tree and part
of speech (POS) tag sequence. We use the method
described in Kuo et al. (2009) to identify the two
previous exposed head words, h?2, h?1, at each po-
sition i in the input hypothesis and include the fol-
lowing syntactic based features into our LM:
1. (h?2.w ? h?1.w ? wi) , (h?1.w ? wi) , (wi)
2. (h?2.t ? h?1.t ? ti) , (h?1.t ? ti) , (ti) , (tiwi)
where h.w and h.t denote the word identity and the
POS tag of the corresponding exposed head word.
2.1 Hill Climbing Rescoring
We adopt the so called hill climbing framework of
Rastrow et al. (2011b) to improve both training and
rescoring time as much as possible by reducing the
1We tune ?0 on development data (Collins et al., 2005).
176
number N of explored hypotheses. We summarize
it below for completeness.
Given a speech utterance?s lattice L from a first
pass ASR decoder, the neighborhood N (w, i) of a
hypothesis w = w1w2 . . . wn at position i is de-
fined as the set of all paths in the lattice that may
be obtained by editing wi: deleting it, substituting
it, or inserting a word to its left. In other words,
it is the ?distance-1-at-position i? neighborhood of
w. Given a position i in a word sequence w, all
hypotheses in N (w, i) are rescored using the long-
span model and the hypothesis w??(i) with the high-
est score becomes the new w. The process is re-
peated with a new position ? scanned left to right
? until w = w??(1) = . . . = w??(n), i.e. when w
itself is the highest scoring hypothesis in all its 1-
neighborhoods, and can not be furthered improved
using the model. Incorporating this into training
yields a discriminative hill climbing algorithm (Ras-
trow et al., 2011a).
3 Incorporating Syntactic Structures
Long-span models ? generative or discriminative,
N -best or hill climbing ? rely on auxiliary tools,
such as a POS tagger or a parser, for extracting
features for each hypothesis during rescoring, and
during training for discriminative models. The top-
m candidate structures associated with the ith hy-
pothesis, which we denote as s1i , . . . , smi , are gener-
ated by these tools and used to score the hypothesis:
F (wi, s1i , . . . , smi ). For example, s
j
i can be a part of
speech tag or a syntactic dependency. We formally
define this sequential processing as:
w1
tool(s)????? s11, . . . , sm1
LM??? F (w1, s11, . . . , sm1 )
w2
tool(s)????? s12, . . . , sm2
LM??? F (w2, s12, . . . , sm2 )
...
wk
tool(s)????? s1k, . . . , smk
LM??? F (wk, s1k, . . . , smk )
Here, {w1, . . . ,wk} represents a set of ASR output
hypotheses that need to be rescored. For each hy-
pothesis, we apply an external tool (e.g. parser) to
generate associated structures s1i , . . . , smi (e.g. de-
pendencies.) These are then passed to the language
model along with the word sequence for scoring.
3.1 Substructure Sharing
While long-span LMs have been empirically shown
to improve WER over n-gram LMs, the computa-
tional burden prohibits long-span LMs in practice,
particularly in real-time systems. A major complex-
ity factor is due to processing 100s or 1000s of hy-
potheses for each speech utterance, even during hill
climbing, each of which must be POS tagged and
parsed. However, the candidate hypotheses of an
utterance share equivalent substructures, especially
in hill climbing methods due to the locality present
in the neighborhood generation. Figure 1 demon-
strates such repetition in an N -best list (N=10) and
a hill climbing neighborhood hypothesis set for a
speech utterance from broadcast news. For exam-
ple, the word ?ENDORSE? occurs within the same
local context in all hypotheses and should receive
the same part of speech tag in each case. Processing
each hypothesis separately wastes time.
We propose a general algorithmic approach to re-
duce the complexity of processing a hypothesis set
by sharing common substructures among the hy-
potheses. Critically, unlike many lattice parsing al-
gorithms, our approach is general and produces ex-
act output. We first present our approach and then
demonstrate its generality by applying it to a depen-
dency parser and part of speech tagger.
We work with structured prediction models that
produce output from a series of local decisions: a
transition model. We begin in initial state pi0 and
terminate in a possible final state pif . All states
along the way are chosen from the possible states
?. A transition (or action) ? ? ? advances the
decoder from state to state, where the transition ?i
changes the state from pii to pii+1. The sequence
of states {pi0 . . . pii, pii+1 . . . pif} can be mapped to
an output (the model?s prediction.) The choice of
action ? is given by a learning algorithm, such as
a maximum-entropy classifier, support vector ma-
chine or Perceptron, trained on labeled data. Given
the previous k actions up to pii, the classifier g :
? ? ?k ? R|?| assigns a score to each possi-
ble action, which we can interpret as a probability:
pg(?i|pii, ?i?1?i?2 . . . ?i?k). These actions are ap-
plied to transition to new states pii+1. We note that
state definitions can encode the k previous actions,
which simplifies the probability to pg(?i|pii). The
177
N -best list Hill climbing neighborhood
(1) AL GORE HAS PROMISED THAT HE WOULD ENDORSE A CANDIDATE
(2) TO AL GORE HAS PROMISED THAT HE WOULD ENDORSE A CANDIDATE
(3) AL GORE HAS PROMISE THAT HE WOULD ENDORSE A CANDIDATE
(4) SO AL GORE HAS PROMISED THAT HE WOULD ENDORSE A CANDIDATE (1) YEAH FIFTY CENT GALLON NOMINATION WHICH WAS GREAT
(5) IT?S AL GORE HAS PROMISED THAT HE WOULD ENDORSE A CANDIDATE (2) YEAH FIFTY CENT A GALLON NOMINATION WHICH WAS GREAT
(6) AL GORE HAS PROMISED HE WOULD ENDORSE A CANDIDATE (3) YEAH FIFTY CENT GOT A NOMINATION WHICH WAS GREAT
(7) AL GORE HAS PROMISED THAT HE WOULD ENDORSE THE CANDIDATE
(8) SAID AL GORE HAS PROMISED THAT HE WOULD ENDORSE A CANDIDATE
(9) AL GORE HAS PROMISED THAT HE WOULD ENDORSE A CANDIDATE FOR
(10) AL GORE HIS PROMISE THAT HE WOULD ENDORSE A CANDIDATE
Figure 1: Example of repeated substructures in candidate hypotheses.
score of the new state is then
p(pii+1) = pg(?i|pii) ? p(pii) (1)
Classification decisions require a feature represen-
tation of pii, which is provided by feature functions
f : ?? Y , that map states to features. Features are
conjoined with actions for multi-class classification,
so pg(?i|pii) = pg(f(pi) ? ?i), where ? is a conjunc-
tion operation. In this way, states can be summarized
by features.
Equivalent states are defined as two states pi and
pi? with an identical feature representation:
pi ? pi? iff f(pi) = f(pi?)
If two states are equivalent, then g imposes the same
distribution over actions. We can benefit from this
substructure redundancy, both within and between
hypotheses, by saving these distributions in mem-
ory, sharing a distribution computed just once across
equivalent states. A similar idea of equivalent states
is used by Huang and Sagae (2010), except they use
equivalence to facilitate dynamic programming for
shift-reduce parsing, whereas we generalize it for
improving the processing time of similar hypotheses
in general models. Following Huang and Sagae, we
define kernel features as the smallest set of atomic
features f?(pi) such that,
f?(pi) = f?(pi?) ? pi ? pi?. (2)
Equivalent distributions are stored in a hash table
H : ?? ??R; the hash keys are the states and the
values are distributions2 over actions: {?, pg(?|pi)}.
2For pure greedy search (deterministic search) we need only
retain the best action, since the distribution is only used in prob-
abilistic search, such as beam search or best-first algorithms.
H caches equivalent states in a hypothesis set and re-
sets for each new utterance. For each state, we first
check H for equivalent states before computing the
action distribution; each cache hit reduces decod-
ing time. Distributing hypotheses wi across differ-
ent CPU threads is another way to obtain speedups,
and we can still benefit from substructure sharing by
storing H in shared memory.
We use h(pi) = ?|f?(pi)|i=1 int(f?i(pi)) as the hash
function, where int(f?i(pi)) is an integer mapping of
the ith kernel feature. For integer typed features
the mapping is trivial, for string typed features (e.g.
a POS tag identity) we use a mapping of the cor-
responding vocabulary to integers. We empirically
found that this hash function is very effective and
yielded very few collisions.
To apply substructure sharing to a transition based
model, we need only define the set of states ? (in-
cluding pi0 and pif ), actions ? and kernel feature
functions f? . The resulting speedup depends on the
amount of substructure duplication among the hy-
potheses, which we will show is significant for ASR
lattice rescoring. Note that our algorithm is not an
approximation; we obtain the same output {sji} as
we would without any sharing. We now apply this
algorithm to dependency parsing and POS tagging.
3.2 Dependency Parsing
We use the best-first probabilistic shift-reduce de-
pendency parser of Sagae and Tsujii (2007), a
transition-based parser (Ku?bler et al., 2009) with a
MaxEnt classifier. Dependency trees are built by
processing the words left-to-right and the classifier
assigns a distribution over the actions at each step.
States are defined as pi = {S,Q}: S is a stack of
178
Kernel features f?(pi) for state pi = {S,Q}
S = s0, s1, . . . & Q = q0, q1, . . .
(1) s0.w s0.t s0.r (5) ts0?1
s0.lch.t s0.lch.r ts1+1
s0.rch.t s0.rch.r
(2) s1.w s1.t s1.r (6) dist(s0, s1)
s1.lch.t s1.lch.r dist(q0, s0)
s1.rch.t s1.rch.r
(3) s2.w s2.t s2.r
(4) q0.w q0.t (7) s0.nch
q1.w q1.t s1.nch
q2.w
Table 1: Kernel features for defining parser states. si.w
denotes the head-word in a subtree and t its POS tag.
si.lch and si.rch are the leftmost and rightmost children
of a subtree. si.r is the dependency label that relates a
subtree head-word to its dependent. si.nch is the number
of children of a subtree. qi.w and qi.t are the word and
its POS tag in the queue. dist(s0,s1) is the linear distance
between the head-words of s0 and s1.
subtrees s0, s1, . . . (s0 is the top tree) and Q are
words in the input word sequence. The initial state is
pi0 = {?, {w0, w1, . . .}}, and final states occur when
Q is empty and S contains a single tree (the output).
? is determined by the set of dependency labels
r ? R and one of three transition types:
? Shift: remove the head of Q (wj) and place it on
the top of S as a singleton tree (only wj .)
? Reduce-Leftr: replace the top two trees in S (s0
and s1) with a tree formed by making the root of
s1 a dependent of the root of s0 with label r.
? Reduce-Rightr: same as Reduce-Leftr except re-
verses s0 and s1.
Table 1 shows the kernel features used in our de-
pendency parser. See Sagae and Tsujii (2007) for a
complete list of features.
Goldberg and Elhadad (2010) observed that pars-
ing time is dominated by feature extraction and
score calculation. Substructure sharing reduces
these steps for equivalent states, which are persis-
tent throughout a candidate set. Note that there are
far fewer kernel features than total features, hence
the hash function calculation is very fast.
We summarize substructure sharing for depen-
dency parsing in Algorithm 1. We extend the def-
inition of states to be {S,Q, p} where p denotes the
score of the state: the probability of the action se-
quence that resulted in the current state. Also, fol-
Algorithm 1 Best-first shift-reduce dependency parsing
w ? input hypothesis
S0 = ?, Q0 = w, p0 = 1
pi0 ? {S0, Q0, p0} [initial state]
H ?Hash table (?? ?? R)
Heap? Heap for prioritizing states and performing best-first search
Heap.push(pi0) [initialize the heap]
while Heap 6= ? do
picurrent ?Heap.pop() [the best state so far]
if picurrent = pif [if final state]
return picurrent [terminate if final state]
else ifH.find(picurrent)
ActList? H[picurrent] [retrieve action list from the hash table]
else [need to construct action list]
for all ? ? ? [for all actions]
p? ? pg(?|picurrent) [action score]
ActList.insert({?, p?})
H.insert(picurrent,ActList) [Store the action list into hash table]
end if
for all {?, p?} ? ActList [compute new states]
pinew ? picurrent ? ?
Heap.push(pinew) [push to the heap]
end while
lowing Sagae and Tsujii (2007) a heap is used to
maintain states prioritized by their scores, for apply-
ing the best-first strategy. For each step, a state from
the top of the heap is considered and all actions (and
scores) are either retrieved from H or computed us-
ing g.3 We use pinew ? picurrent ? ? to denote the
operation of extending a state by an action ? ? ?4.
3.3 Part of Speech Tagging
We use the part of speech (POS) tagger of Tsuruoka
et al. (2011), a transition based model with a Per-
ceptron and a lookahead heuristic process. The tag-
ger processes w left to right. States are defined as
pii = {ci,w}: a sequence of assigned tags up to wi
(ci = t1t2 . . . ti?1) and the word sequence w. ? is
defined simply as the set of possible POS tags (T )
that can be applied. The final state is reached once
all the positions are tagged. For f we use the features
of Tsuruoka et al. (2011). The kernel features are
f?(pii) = {ti?2, ti?1, wi?2, wi?1, wi, wi+1, wi+2}.
While the tagger extracts prefix and suffix features,
it suffices to look at wi for determining state equiv-
alence. The tagger is deterministic (greedy) in that
it only considers the best tag at each step, so we do
not store scores. However, this tagger uses a depth-
3 Sagae and Tsujii (2007) use a beam strategy to increase
speed. Search space pruning is achieved by filtering heap states
for probability greater than 1b the probability of the most likely
state in the heap with the same number of actions. We use b =
100 for our experiments.
4We note that while we have demonstrated substructure
sharing for dependency parsing, the same improvements can
be made to a shift-reduce constituent parser (Sagae and Lavie,
2006).
179
t2t1 ti 2 ti 1
t1i
t2i
t|T |i t|T |i+1
t1i+1
t2i+1
w1 w2 wi 1wi 2 wi wi+1 wi+2 wi+3? ? ?
? ? ?
lookahead search
Figure 2: POS tagger with lookahead search of d=1. At
wi the search considers the current state and next state.
first search lookahead procedure to select the best
action at each step, which considers future decisions
up to depth d5. An example for d = 1 is shown
in Figure 2. Using d = 1 for the lookahead search
strategy, we modify the kernel features since the de-
cision forwi is affected by the state pii+1. The kernel
features in position i should be f?(pii) ? f?(pii+1):
f?(pii) =
{ti?2, ti?1, wi?2, wi?1, wi, wi+1, wi+2, wi+3}
4 Up-Training
While we have fast decoding algorithms for the pars-
ing and tagging, the simpler underlying models can
lead to worse performance. Using more complex
models with higher accuracy is impractical because
they are slow. Instead, we seek to improve the accu-
racy of our fast tools.
To achieve this goal we use up-training, in which
a more complex model is used to improve the accu-
racy of a simpler model. We are given two mod-
els, M1 and M2, as well as a large collection of
unlabeled text. Model M1 is slow but very accu-
rate while M2 is fast but obtains lower accuracy.
Up-training applies M1 to tag the unlabeled data,
which is then used as training data for M2. Like
self-training, a model is retrained on automatic out-
put, but here the output comes form a more accurate
model. Petrov et al. (2010) used up-training as a
domain adaptation technique: a constituent parser ?
which is more robust to domain changes ? was used
to label a new domain, and a fast dependency parser
5 Tsuruoka et al. (2011) shows that the lookahead search
improves the performance of the local ?history-based? models
for different NLP tasks
was trained on the automatically labeled data. We
use a similar idea where our goal is to recover the
accuracy lost from using simpler models. Note that
while up-training uses two models, it differs from
co-training since we care about improving only one
model (M2). Additionally, the models can vary in
different ways. For example, they could be the same
algorithm with different pruning methods, which
can lead to faster but less accurate models.
We apply up-training to improve the accuracy of
both our fast POS tagger and dependency parser. We
parse a large corpus of text with a very accurate but
very slow constituent parser and use the resulting
data to up-train our tools. We will demonstrate em-
pirically that up-training improves these fast models
to yield better WER results.
5 Related Work
The idea of efficiently processing a hypothesis set is
similar to ?lattice-parsing?, in which a parser con-
sider an entire lattice at once (Hall, 2005; Chep-
palier et al., 1999). These methods typically con-
strain the parsing space using heuristics, which are
often model specific. In other words, they search in
the joint space of word sequences present in the lat-
tice and their syntactic analyses; they are not guaran-
teed to produce a syntactic analysis for all hypothe-
ses. In contrast, substructure sharing is a general
purpose method that we have applied to two differ-
ent algorithms. The output is identical to processing
each hypothesis separately and output is generated
for each hypothesis. Hall (Hall, 2005) uses a lattice
parsing strategy which aims to compute the marginal
probabilities of all word sequences in the lattice by
summing over syntactic analyses of each word se-
quence. The parser sums over multiple parses of a
word sequence implicitly. The lattice parser there-
fore, is itself a language model. In contrast, our
tools are completely separated from the ASR sys-
tem, which allows the system to create whatever fea-
tures are needed. This independence means our tools
are useful for other tasks, such as machine transla-
tion. These differences make substructure sharing a
more attractive option for efficient algorithms.
While Huang and Sagae (2010) use the notion of
?equivalent states?, they do so for dynamic program-
ming in a shift-reduce parser to broaden the search
space. In contrast, we use the idea to identify sub-
180
structures across inputs, where our goal is efficient
parsing in general. Additionally, we extend the defi-
nition of equivalent states to general transition based
structured prediction models, and demonstrate ap-
plications beyond parsing as well as the novel setting
of hypothesis set parsing.
6 Experiments
Our ASR system is based on the 2007 IBM
Speech transcription system for the GALE Distilla-
tion Go/No-go Evaluation (Chen et al., 2006) with
state of the art discriminative acoustic models. See
Table 2 for a data summary. We use a modi-
fied Kneser-Ney (KN) backoff 4-gram baseline LM.
Word-lattices for discriminative training and rescor-
ing come from this baseline ASR system.6 The long-
span discriminative LM?s baseline feature weight
(?0) is tuned on dev data and hill climbing (Rastrow
et al., 2011a) is used for training and rescoring. The
dependency parser and POS tagger are trained on su-
pervised data and up-trained on data labeled by the
CKY-style bottom-up constituent parser of Huang et
al. (2010), a state of the art broadcast news (BN)
parser, with phrase structures converted to labeled
dependencies by the Stanford converter.
While accurate, the parser has a huge grammar
(32GB) from using products of latent variable gram-
mars and requires O(l3) time to parse a sentence of
length l. Therefore, we could not use the constituent
parser for ASR rescoring since utterances can be
very long, although the shorter up-training text data
was not a problem.7 We evaluate both unlabeled
(UAS) and labeled dependency accuracy (LAS).
6.1 Results
Before we demonstrate the speed of our models, we
show that up-training can produce accurate and fast
models. Figure 3 shows improvements to parser ac-
curacy through up-training for different amount of
(randomly selected) data, where the last column in-
dicates constituent parser score (91.4% UAS). We
use the POS tagger to generate tags for depen-
dency training to match the test setting. While
there is a large difference between the constituent
and dependency parser without up-training (91.4%
6For training a 3-gram LM is used to increase confusions.
7Speech utterances are longer as they are not as effectively
sentence segmented as text.
84.0	 ?
85.0	 ?
86.0	 ?
87.0	 ?
88.0	 ?
89.0	 ?
90.0	 ?
91.0	 ?
92.0	 ?
0M	 ? 2.5M	 ? 5M	 ? 10M	 ? 20M	 ? 40M	 ? Cons?tuent	 ?Parser	 ?
Accu
racy
	 ?(%)
	 ?
Amount	 ?of	 ?Added	 ?Uptraining	 ?Data	 ?
Unlabeled	 ?A?achment	 ?Score	 ?
Labeled	 ?A?achment	 ?Score	 ?
Figure 3: Up-training results for dependency parsing for
varying amounts of data (number of words.) The first
column is the dependency parser with supervised training
only and the last column is the constituent parser (after
converting to dependency trees.)
vs. 86.2% UAS), up-training can cut the differ-
ence by 44% to 88.5%, and improvements saturate
around 40m words (about 2m sentences.)8 The de-
pendency parser remains much smaller and faster;
the up-trained dependency model is 700MB with
6m features compared with 32GB for constituency
model. Up-training improves the POS tagger?s accu-
racy from 95.9% to 97%, when trained on the POS
tags produced by the constituent parser, which has a
tagging accuracy of 97.2% on BN.
We train the syntactic discriminative LM, with
head-word and POS tag features, using the faster
parser and tagger and then rescore the ASR hypothe-
ses. Table 3 shows the decoding speedups as well as
the WER reductions compared to the baseline LM.
Note that up-training improvements lead to WER re-
ductions. Detailed speedups on substructure sharing
are shown in Table 4; the POS tagger achieves a 5.3
times speedup, and the parser a 5.7 speedup with-
out changing the output. We also observed speedups
during training (not shown due to space.)
The above results are for the already fast hill
climbing decoding, but substructure sharing can also
be used for N -best list rescoring. Figure 4 (logarith-
mic scale) illustrates the time for the parser and tag-
ger to processN -best lists of varying size, with more
substantial speedups for larger lists. For example,
for N=100 (a typical setting) the parsing time re-
8Better performance is due to the exact CKY-style ? com-
pared with best-first and beam? search and that the constituent
parser uses the product of huge self-trained grammars.
181
Usage Data Size
Acoustic model training Hub4 acoustic train 153k uttr, 400 hrs
Baseline LM training: modified KN 4-gram TDT4 closed captions+EARS BN03 closed caption 193m words
Disc. LM training: long-span w/hill climbing Hub4 (length <50) 115k uttr, 2.6m words
Baseline feature (?0) tuning dev04f BN data 2.5 hrs
Supervised training: dep. parser, POS tagger Ontonotes BN treebank+ WSJ Penn treebank 1.3m words, 59k sent.
Supervised training: constituent parser Ontonotes BN treebank + WSJ Penn treebank 1.3m words, 59k sent.
Up-training: dependency parser, POS tagger TDT4 closed captions+EARS BN03 closed caption 193m words available
Evaluation: up-training BN treebank test (following Huang et al. (2010)) 20k words, 1.1k sent.
Evaluation: ASR transcription rt04 BN evaluation 4 hrs, 45k words
Table 2: A summary of the data for training and evaluation. The Ontonotes corpus is from Weischedel et al. (2008).
10	 ?
100	 ?
1000	 ?
10000	 ?
100000	 ?
1000000	 ?
1	 ? 10	 ? 100	 ? 1000	 ?
Elap
sed
	 ?Tim
e	 ?(s
ec)	 ?
N-??best	 ?Size	 ?(N)	 ?
No	 ?Sharing	 ?
Substructure	 ?Sharing	 ?
(a)
1	 ?
10	 ?
100	 ?
1000	 ?
10000	 ?
1	 ? 10	 ? 100	 ? 1000	 ?
Elap
sed
	 ?Tim
e	 ?(s
ec)	 ?
N-??best	 ?Size	 ?(N)	 ?
No	 ?Sharing	 ?
Substructure	 ?Sharing	 ?
(b)
Figure 4: Elapsed time for (a) parsing and (b) POS tagging the N -best lists with and without substructure sharing.
Substr. Share (sec)
LM WER No Yes
Baseline 4-gram 15.1 - -
Syntactic LM 14.8
8,658 1,648
+ up-train 14.6
Table 3: Speedups and WER for hill climbing rescor-
ing. Substructure sharing yields a 5.3 times speedup. The
times for with and without up-training are nearly identi-
cal, so we include only one set for clarity. Time spent
is dominated by the parser, so the faster parser accounts
for much of the overall speedup. Timing information in-
cludes neighborhood generation and LM rescoring, so it
is more than the sum of the times in Table 4.
duces from about 20,000 seconds to 2,700 seconds,
about 7.4 times as fast.
7 Conclusion
The computational complexity of accurate syntac-
tic processing can make structured language models
impractical for applications such as ASR that require
scoring hundreds of hypotheses per input. We have
Substr. Share Speedup
No Yes
Parser 8,237.2 1,439.5 5.7
POS tagger 213.3 40.1 5.3
Table 4: Time in seconds for the parser and POS tagger
to process hypotheses during hill climbing rescoring.
presented substructure sharing, a general framework
that greatly improves the speed of syntactic tools
that process candidate hypotheses. Furthermore, we
achieve improved performance through up-training.
The result is a large speedup in rescoring time, even
on top of the already fast hill climbing framework,
and reductions in WER from up-training. Our re-
sults make long-span syntactic LMs practical for
real-time ASR, and can potentially impact machine
translation decoding as well.
Acknowledgments
Thanks to Kenji Sagae for sharing his shift-reduce
dependency parser and the anonymous reviewers for
helpful comments.
182
References
