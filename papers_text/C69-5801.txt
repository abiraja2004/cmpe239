COMPUTER-AIDED RESEARCH ON SYNONYMY AND ANTONYMY * 
H. P. Edmundson 
University of Maryland, College Park, Md., U.S.A. 
and 
Martin N. Epstein 
National Institutes of Health, Bethesda, Md., U.S.A. 
Abstract 
This research is a continuation of that reported in Axiomatic 
Characterization of Synonymy and Antonymy, which was presented at 
the 1967 International Conference on Computational Linguistics \[3\]. 
In that paper on mathematical linguistics the relations of synonymy 
and antonymy were regarded as ternary relations and their domains 
and ranges were discussed. Synonymy and antonymy were defined jointly 
and implicity by a system of eight axioms, which permitted the proofs 
of several intuitively satisfying theorems. The present paper on 
computational linguistics is a preliminary report which describes 
some computer programs that have been used to investigate the extent 
to which those axioms model an existing dictionary of synonyms and 
antonyms \[9\]. A set of computer programs is discussed that (i) input 
the dictionary data concerning synonyms and antonyms, (2) create a 
data structure in core memory to permit the manipulation of data, 
(3) query this data structure about words and relations, and (4) out- 
put the answers to queries or the entire data structure, if desired. 
Some examples of computer output are also given to indicate present 
directions of the computer-aided research. 
*This research was supported in part by the Office of Naval 
Research under Contract N00014-67-A-0239-0004. 
i. Introduction 
i.i Previous Research 
This work is a continuation of research initially reported in 
the paper Mathematical Models of Synonymy, which was presented at the 
1965 International Conference on Computational Linguistics \[2\]. That 
paper included a historical summary of the concepts of synonymy and 
antonymy. It was noted that since the first book on English synonyms, 
which appeared in the second half of the 18th century, dictionaries 
of synonyms and antonyms have varied according to the particular 
explicit or implicit definitions of "synonym" and "antonym" that were 
used. The roles of grammatical class, word context, and substitu- 
tability in the same context were discussed. 
As was noted, synonymy traditionally has been regarded as a bin- 
ary relation between two words, Graphs of these binary relations 
were drawn for several sets of words based on Webster's Dictionary of 
Synonyms \[8\] and matrices for these graphs were exhibited as an equi- 
valent representation. These empirical results showed that the con- 
cepts of synonymy and antonymy required the use of ternary relations 
between two words in a specified sense rather than simply a binary 
relation between two words. The synonymy relation was then defined 
implicitly, rather than explicitly, by three axioms stating the pro- 
perties of being reflexive, symmetric, and transitive. The antonymy 
relation was also defined by three axioms stating the properties of 
being irreflexive, symmetric, and antitransitive (the last term was 
coined for that study). It was noted that these six axioms could be 
expressed in the calculus of relations and that this relation algebra 
could be used to produce shorter proofs of theorems, even though no 
proofs were given. In addition, several geometrical and topological 
models of synonymy and antonymy were posed and examined. 
The characterizations of synonymy and antonymy initiated in 
Edmundson \[2\] were investigated more thoroughly in Edmundson \[3\]. 
Synonymy and antonymy were defined jointly and implicitly by a set of 
eight axioms rather than separately as before. First, it was noted 
that the original six axioms were insufficient to permit the proofs 
of certain theorems whose truth was strongly suggested by intuitive 
notions about synonymy and antonymy. In addition, it was discovered 
that certain fundamental assumptions about synonymy and antonymy 
must be made explicit as axioms. Some of these have to do with 
specifying the domain and range of the synonymy and antonymy relations. 
This is related to questions about whether function words, which lin- 
guistically belong to closed classes, should have synonyms and ant- 
onyms and whether content words, which linguistically belong to open 
classes, must have synonyms and antonyms. Several fundamental theorems 
of this axiom system were stated and proved. The informal interpre- 
tations of many of these theorems were intuitively satisfying. For 
example, it was proved that any even power of the antonymy relation 
is the synonymy relation, while any odd power is the antonymy relation. 
These results supported the belief that an algebraic character- 
ization is .insightful and appropriate. For example, the assumption 
that synonymy is an equivalence relation also has been made, either 
directly or indirectly, by F. Kiefer and S. Abraham \[4\], U. Welnreich 
\[i0\], and others. Since the axiom system defined the notions of syn- 
onymy and antonymy jointly and implicitly, it avoidedlcertain diffi- 
culties that are encountered when attempts are made to define these 
notions separately and explicitly. 
1.2 Axioms 
Before investigating axioms for synonymy and antonymy, we will  
recapitulate some notions and notations for the calculus of binary 
relations. Consider a set V of arbitrary elements, which wil l  be 
called the universal set. A binary relation on V is defined as a set 
R of ordered pairs <x,y>, where x,y ? V. The proposition that x stands 
in relation R to y wil l  be denoted by xRy. The domain ~(R) of rela- 
tion R is defined as the set ~(R)~{x:(~y)(xRy)}. The complement, 
union, intersection, and converse relations are defined by 
xRy - ~ xRy 
x(R n S)y - xRy A xSy 
x(R US)y  -z xRy V xSy 
xR-ly - yRx 
The identity relation I is defined by 
xly _= x = y 
The product and power relations are defined by 
xRiSy - (,~z)\[xRz A zSy\] 
R n : RIR ~-~ n~l  
The inclusion and equality of relations are defined by 
R = S - xRy -----> xSy 
I 
R = S - R = S A S = R 
Under the assumption that synonymy and antonymy are ternary rela- 
tions on the set of all words, the following definitions will  be used: 
xSiY E word x is a synonym of word y with respect to the 
intension i (or word x is synonymous in sense i to word y) 
xAiY E word x is an antonym of word y with respect to the inten- 
sion i (or word x is antonymous in sense i to word y) 
In addition to the synonymy and antonymy relations, it will be use- 
ful to introduce the following classes that are the images by these 
relations. The synonym class of a word y is defined by 
si(Y) ~ {x : xSiY} 
which may be extended to an arbitrary set E of words by 
si(E) ~ {x : (~y) \[y c E A xSiY\] } 
Similarly, the antonym class of a word y is defined by 
ai(Y) ~ {x : xAiY} 
which may be extended to a set E of words by 
ai(E ) E {x : (~y)\[y c E A xAiY\]} 
Following Edmundson \[3\], it will be assumed that the synonymy 
and antonymy relations are defined by the following set of axioms-- 
rather than as in Edmundson \[2\]. 
Axiom i (Reflexive): 
Axiom 2 (Symmetric): 
Axiom 3 (Transitive): 
Axiom 4 (Irreflexive): 
Axiom 5 (Symmetric): 
Axiom 6 (Ant~transitive): 
Axiom 7 (Right-identity): 
Axiom 8 (Nonempty): 
(Vx) \[xSix\] 
(Vx) (Vy) \[xSiY => xS i ly\] 
(Vx) (Vy) (Vz) \[xSiY A YSiz --> xSiz\] 
(VX) \[xAix \] 
(Vx) (Vy) \[xAiY --------> xA? l ly\] 
(Vx) (Vy) (Vz) \[xAiY A YAiz ~--> xSiz\] 
(Vx) (Vy) (Vz) \[xAiY A YSiz ------> xAiz\] 
(Vy) (~x) \[xAiY\] 
The above eight axioms may be expressed more succinctly in the calcu- 
lus of relations as follows: 
Axiom i (Reflexive): i = S i 
-i 
Axiom 2 (Symmetric): S i = S i 
Axiom 3 (Transitive): S 2 ~ S i i 
Axiom 4 (Irreflexive)': I = Ai 
Axiom 5 (Symmetric): A i ~ A i 
Axiom 6 (Antitransitive): A~ l ~ Si 
Axiom 7 (Right-identity): AII S i ~ A i 
Axiom 8 (Nonempty): (Vy)(~x)\[xAiY \] 
As mentioned in \[3\], even though si(Y ) ~ @ since YSiY by Axiom i, 
it may be necessary to add the following axiom: 
Axiom 9: (Vy)(~x)\[x # y A xSiY\] 
to guarantee that the domain of the relation S i is not trivia\], i.e., 
si(Y) - (y} # ? 
Axiom 9 is not necessary if si(Y ) is permitted to be a unit set for 
certain words. Thus, we might define si(Y) = {y} for any function 
word y, e.g., si(and) = {and}. But this will not work for antonymy 
since ai(Y ) might be considered empty for certain words such as func- 
tion words, e.g., ai(and) = ~. The alternative of defining ai(Y ) = {y} 
is not reasonable since it produces more problems than it solves. 
Axiom 8: (Vy)~x)\[xAiY\], which is equivalent to 
(~y)\[ai(Y) # ~\] , 
is reasonable if the contrary y of word y (e.g., "irrelevant", "imposs- 
ible", "nonuse", etc.) is permitted, i.e., ~ ? ai(Y). 
2. Research Methodology 
2.1 Research Goals 
The synonymy and antonymy relations possess interesting proper ~ 
ties, which can be treated mathematically to provide insight about 
semantic relations and connectivity among words in a natural language. 
One such model is the axiom system just stated. The immediate goal of 
the current research is to compile, in computer-accessible form, a dic- 
tionary containing all synonymy and antonymy relations holding between 
selected words. Such a dictionary is useful in gaining a better un- 
derstanding of how the English lexicon is semantically structured 
since it can eventually enable the determination of the completeness 
of the descriptions in any synonym-antonym dictionary. Another objec- 
tive is to assist the lexicographer in compiling such a dictionary so 
that all words are defined and related in a consistent manner. 
2.2 Data Base and Data Structure 
For the present research a test dictionary was compiled by select- 
ing English words from Webster's New Dictionary of Synonyms \[9\]. Ac- 
cordingly, a set of computer programs was written to do the following: 
i. Input, in a prescribed format, words selected from the above 
dictionary together with relevant data concerning their synonyms and 
antonyms. 
2. Create in core memory a suitable data structure (see \[5\]) for 
the input, which permits the manipulation of the dictionary data. Fu- 
ture extensions to the system would make use of direct-access storage 
to enable the processing of more data. 
2.3 Data Ana lvs~ 
The test dictionary is analyzed with the aid of computer programs 
that were written to do the following: 
I. Query the data structure about words and relations. Two 
query modes are built into the system. The first mode allows the se- 
lection of words fulfi l l ing an input request and the second mode per- 
mits the verif ication that certain relations hold between selected 
words. 
2. Output the answers to queries or output the entire data struc- 
ture, if desired. 
3. Verify the consistency of word groupings, the degree of com- 
pleteness of related subgroups, and the presence or absence of anom- 
al ies-in the data base. 
3. Input 
3.1 Input Specif ication 
First, it is necessary to specify and format the input data so 
that a set of programs may process and query a test dictionary, which 
resides in core in the present version of the system. This is accom- 
pl ished using the following input prototype: 
<word>,<grammar code><sense #><relatlon~,~word>,... ,<word>,; 
where 
i. 
2. 
<word> is an entry in Webster's New Dictionary of Synonyms. 
<grammar code>makes use of the following coding mnemonics: 
N - Noun 
V - Verb 
J - Adjective 
B - Adverb 
0 - Pronoun 
D - Determiner 
L - Auxil iary 
P - Preposition 
C - Con junct ion  
3. <=ense #> is a one-digit number representing a sense associ- 
ated  with a word in the dictionary. 
4. <relation> is denoted by 
S - Synonymy 
A - Antonymy 
M - word used in the description of another word 
but not itself a main entry. 
5. <word>,...,<word> is the set of words standing in the given 
relation to the main entry in the given sense. 
Thus, each input item consists of a main-entry word followed by 
a comma, a one-character grammar code, a one-digit sense number, a 
one-character relation, a comma, a list of words (separated by commas) 
that in the given sense stand in the given relation to the main entry, 
a comma, and a semicolon that denotes the end of an input item. A 
sample computer input is: 
51nPLE,J2S,E&SY,FACILE,LIGHT,EFFORTLESS,SMOOTH,; 
Continuation cards may be appended to any i tem by placing a "+" in 
column 80 of subsequent cards. 
3.2 Comments 
Several problems remain in fully attaining the above stated goals. 
On the one hand, it is difficult to select from a manual dictionary 
sufficiently small sets of words that are closed under the relations 
S and A, while on the other hand large segments of such a dictionary 
cannot be input at present. Programs have been written to stgucture 
and process small test dictionaries, to select words from the data 
i0 
structure using a query language, and to verify that certain rela- 
tions hold between words. 
4. Processing 
4.1 Input Analysis 
In the first phase of pro?essing the program checks the well- 
formedness of the input entries, isolates words, records grammatical 
classes, and establishes relations between words. 
4.2 Creation of the Data Structure 
The data structure created in core provides for the construction 
of two tables. 
The first is a directory table whose items consist of a location 
identifier, an entry, the grammar code, the sense number, and the rela- 
t ion.  This directorysequentially stores the input information, ellm- 
inates duplicates, and provides a reference pointer to a second table, 
the matrix table. 
The matrix table consists of an ineidence or connectivity matrix, 
which is used to store the synonymy and antonymy relations between 
words. It should be noted that xSy is stored differently from ySx. 
In addition xSx is recorded in the data structure only if it so ap- 
peared in Webster's New Dictionary of Synonyms. 
It is also possible to develop a teachability or accessibility 
matrix from the stored input. In graph-theoretic terms the matrix may 
be regarded as follows: words correspond to vertices and relations 
correspond to directed edges. Note that for all x and y in the data 
structure, it can be determined whether xSy and xAy are true or false. 
ii 
4.3 Query Language 
The two basic modes of operating upon the data structure are the 
selection mode and the verification mode. Both modes permit queries 
to be composed and matched against the data structure. The response 
to a query statement in the selection mode is a listing of all those 
entries in the data structure satisfying the request, lh the verifi- 
cation mode the response indicates whether a statement is true or false 
and, if false, points out which segment of the query statement does 
not hold. 
Simple query statements are of the form: 
? if QUERY 
where "?" is used to initiate the request; "if" is used as a prefix 
for particular query types; and "QUERY" consists, in the simplest 
case, of one of the following five statement types: 
i. xRy 
2. x*y 
3. xR* 
4. *Ry 
5. *R* 
where "*" denotes that any value in the specified field is allowed 
and the sense i is not explicitiy denoted. Item 1 above operates in 
the verif ication mode, while items 2-5 operate in the selection mode. 
Simple query statements can be extended to allow compound expre- 
sions by means of the operators "not", "and", and "then". For example, 
the query 
? if xSy and ySx 
12 
tests whether synonymy (in sense i) is a symmetric relation for the 
words x and y, while the query 
? if xSy and ySz then xSz 
checks to see if transitivity of synonymy (in sense i) holds for the 
words x,y, and z. 
It is also possible to determine if the composition SIS of the 
relation S holds, i.e., for given words x and y, does the given 
word z in the data structure satisfy t%e request: 
? if xSz and zSy 
To select all such z from the data structure, the request is formu- 
lated as follows: 
? if xS* and *Sy 
The synonymy relation S is assumed to be reflexive, symmetric, 
and transitive, whi le the antonymy relation A is assumed to be irre- 
flexive, symmetric, and antitransitive. The input forms of queries 
representing these properties are as follows: 
i. Reflexive: 
2. Symmetric: 
3. Transitive: 
4. Irreflexive: 
5. Symmetric: 
6. Antitransitive: 
? x,S,x,; 
? if x,S,y,.then.y,S,x,; 
? if x,S,y,.and.y,S,z,.then.x,S,z,; 
? not x,A,x,; 
? if x,A,y,.then.y,A,x,; 
? if x,A,y,.and.y,A,z,.then.x,$,z,;  
In addition, the input format for the properties of right-identity 
and nonempty are as follows: 
? x,A,y,.and.y,S,z,.then.x,A,z,;  7. Right-identity: ? if r 
8. Nonempty: ? if *,A,y,; 
This last property is interpreted as follows: for all y in the data 
i 13 
structure, does there exist a word x such that x stands in the rela ~ 
tion A to y? 
An example of the input to test if transitivity holds for the 
words "big", "great", and "large", in that order is as follows: 
? if big,S,great,.and.great,S,large,.then.big,S,large,; 
4.4 Verif ication Algorithms 
Two basic verif ication algorithms have been programmed. The 
first seeks to detect the presence of either a chain or a loop among 
the given words. The input consists of pairs of words standing in 
the relation S. A chain exists if it is possible to linearly order 
the set of input words so that the relation S holds between adjacent 
words. A loop is detected if every word is preceded by another word 
and the algorithm cannot locate a word that has no predecessor. This 
algorithm may be useful in developing techniques for structuring the 
vocabulary of a synonym-antonym dictionary so that no word is used 
before it has been defined. 
The second algorithm determines whether selected groups of words 
form an equivalence class with respect to synonymy in a given sense. 
A binary relation R is said to be an equivalence relation if it is 
reflexive, symmetric, and transitive. An equivalence relation R parti- 
tions a set of elements into disjoint classes such that two elements 
are equivalent if and only if they belong to the same class. The 
routine determines whether two given words are in an existing synonym 
class and, if not, establishes a new c lass .  The test fo~ equivalence 
classes in a set of words is initiated by the input statement. 
EQUV(<word>,...,<word>) 
14 
which incorporates tests for reflexivity, symmetry, and transitivity. 
The output is a table indicating class membership of wozds o\[, if no 
equivalence relations exist, indicates those properties not satisfied 
by particular words. For example, the routine found that, aside from 
reflexivity, the words "pure", "simple", and "absolute" formed an 
equivalence class in a particular sense i. On the other hand, the 
words "aft", "astern", "abaft", "after", and "behind" formed two 
equivalence classes {aft, astern, abaft} and {after, behind}. At pre- 
sent, the graphs of equivalence classes are drawn manually, rather 
than by computer. 
Appendix 2 outlines the structure of an input deck and lists a 
sample input including both input data and query statements. 
5. Output 
5.1 Relational Form 
The relational form of output verifies whether the simple s tate -  
ment xRy is true or false and also whether compounds of simple state- 
ments are true or false. For example, the query 
? if stern A soft 
produced 
THE FOLLOUING RELATIOH HOLDS: STERN A SOFT 
while for the query 
? if far A high and high A low then high A far 
the following set of responses was obtained: r 
THE FOLLOWING RELATION HOLDS: FAR & HIGH 
THE FOLLOHIHG RELATIOH HOLDS: HIGH A LOU 
THE GIVEN REL?TION DOES HOT HOLD: HIGH A F&H 
QUERY REQUEST NOT SAT ISF IED - -  STATEHENT FALSE 
15 
5.2 List Form 
In the list form of response to a query the main entry and all 
words (if any) that are pointed to by the main entry are listed. For 
example, the query 
? if * S stern 
produced 
TEE FOLLOWING ~ORDS AEE IN THE RELAT ION S TO STERN 
S EVEEE 
AUSTERE 
ASCET IC  
In general, this form of output consists of lists of the fo l low- 
ing two types: a list of all words synonymous or antonymous to a 
given Word, and a list of all synonymy or antonymy relations holding 
among a given set of words. 
5.3 Matrix Form 
The matrix form of output represents the relations by a matrix 
consisting of S's and A's according to whether the relation S or A 
holds between given pairs of words. A blank in such a matrix indicates 
that neither S nor A relates two words in the data structure. For 
example, the following matrix revealed four senses of the word 
"simple". 
16 
.simplea 
pure 
absolute 
sheer 
*compound 
complex 
simplez 
easy  
faci le 
l ight 
e f for t less  
smooth 
compl icated 
di f f icul t  
s imple $ 
natural  
ingenuous 
naive 
unsophist icated 
art less 
simple" 
fool ish 
si l ly 
fatuous 
asin ine 
wise 
sensib le  
Judic ious 
c 
e o 
f ~d  i 
a c f p i  n 
b oc  o i f  nq 
S S mos  f r s i f s a e  
i ospa i  a l t m c i i t n n  
m p l h o p m e c i l o a c m u u a  
p u u e u l p a i g e o t u p r o i  
l r t e n e l s l h s t e l l a u v  
e e e r d z e y e t s h d t e l ' s e  
I a $ 
SSS&A 
SSSS 
SS  S 
SSS  
& S 
$ S S S S & A  
SSSSSS 
SS  SSS  
SSS  SS  
SSS5 S 
SSSSS 
S& 
A 
SSSSS 
SSSSSS 
SS SSS 
SSS SS  
SSSS S 
S S S S S  
u 
n 
s 
o 
P 
h 
i 1 
s su  
ta  f fa  ed  
i r so  aS  n i  
c t ios t i  sc  
a l m l i u . w i i  
t e p i l o f i b o  
e s l s l u n s l u  
d s e h y s e e e s  
S S S S S A  
S SSS  
SS  SS  
SSS  S 
SSSS &~ 
A SR 
& A&S S 
ASS 
The superscr ip t  denotes  the  sense  number to  be assoc ia ted  w i th  "s imp le" .  A "*" i s  p laced  to  
the  le f t  o f  those  words that  do not  appear  as main  eut r ies  in  Webster ' s  New D ic t ionary  o f  
17 
6. Concluding Remarks 
The programs were written almost completely in FORTRAN IV and 
have been run on the IBM 360 and the PDP i0. A flowchart, which 
stm~narizes these programs, appears as Appendix i. In addition, a 
SNOBOL 4 program has been written for the detection of chains and 
loops. 
Several problems in fully achieving the stated research goals 
have appeared. It was difficult to select small closed sets of words 
from Webster's New Dictionary of Synonyms and it was not feasible to 
keypunch the entire dictionary. Since the size of a truly suitable 
data base was too large to retain in core memory, several sample 
dictionaries have been selected to study the feasibility of the 
principles and techniques involved. Most of the current effort has 
been devoted to providing programming capability for the processing 
of small test dictionaries. Different words may be input with each 
run, thereby increasing the size of the sample data base to gain 
deeper insight into the properties of the entries listed in a manual 
dictionary. Further computer-aided research on synonyms and antonyms 
wil l  help to validate or extend the axiomatic model proposed earlier. 
Also, future research could consider the additional relations "con- 
trasting" and "analogous" cited in some manual dictionaries and the 
i 
automatic determination of the senses of words. 
18 
Bibliography 
\[i\]. 
\[2\]. 
\[3\]. 
\[4\] . 
\[5\]. 
\[6\]. 
\[7\] . 
\[8\]. 
\[9\]. 
\[lO\]. 
\[ii\]. 
R. Carnap, Introduction to Symbolic Logic and Its Applications, 
W. Meyer and J. Wilkinson (trs.). Dover, N.Y., 1958. 
H. P. Edmundson, "Mathematical Models of Synonymy", Internation- 
al Conference on Computational Linguistics, New York, 1965. 
H. P. Edmundson, "Axiomatic Characterization of Synonymy and 
Antonymy", International Conference on Computational 
Linguistics, Grenoble, 1967. 
F. Kiefer and S. Abraham, "Some Problems of Formalization in ,w Linguistics , Linguistics, v. 17, Oct. 1965, pp. 11-20. 
D. Knuth, The Art of Computer Programming : Vol.____~l, Fundamental 
Algorithms, Addison-Wesley, New York, 1968. 
V. V. Martynov, Pytannja prikladnoji lingvistykv; tezisy 
dopovidej mi~vuzovs'koji naukovoji konferenciji, Sept. 22- 
28, 1960, Cernivcy. 
A. Naess, "Synonymity as Revealed by Intuition", Philosophical 
Review, v. 66, 1957, pp. 87-93. 
Webster's Dictionary of Synonyms, Merriam Co., Springfield, 
Mass., 1951. 
Webster's New Dictionary of Synonyms, Merriam Co., Springfield, 
Mass., 1968. 
U. Weinreich, "Explorations in Semantic Theory", in Current 
Trends in Linguistics, III, T. Sebeok (ed.), Mouton and 
Co., The Hague, 1966. 
P. Ziff, Se__ mantic Analysis, Cornell University Press, Ithaca, 
N.Y., 1960. 
- -  19  
APPENDIX I-FLOW CHART 
INPUT ANALYSIS 
1. Check well-formedness 
of input entries 
2. Edit input entries 
-isolate words 
-record grammar codes 
-establish relations 
i 
DATA-STRUCTURE CREATION 
i. Create directory 
-eliminate duplicate 
entries 
2. Create connectivity 
matrix 
I , 
QUERY-SELECTION MODE 
i. Analyze query 
-scan query 
-flag errors 
2. Execute query 
-look up words 
-match data-structure 
3. Output answer 
QUERY-VERIFICATION MODE 
i. Locate words 
2. Determine equivalences 
3. Output answer 
20 
APPENDIX 2-  RUN INSTRUCTICNS 
First the basic st ructure el an input deck is outl ineS. 
Comments  and explanat ion are enclosed in parentheses. A 
sample run which may be input to the system follows. 
. . . . . . . . . .  FORMAT OF THE INPUT DECK . . . . . . . . . .  
PARAMETER CARD (constant for each run ) . 
(input to the creat ion program in the input 
descr ibed above) 
proto%ype 
rOD ( input del imeter  ) . 
-SELECT MODE 
(guery requests  in both the verify and select  mode follow ) 
(all quer ies  which are to be matched against the data til~. 
using the query input format descr ibed above.) 
-EQUIVALENCE MODE 
(using the set of terms inputted, determine if the set teems 
an equ iva lence  class) 
? * (run terminator  ) . 
A SAMPLE RUN 
,; +ZSAEONIF~. 
FOR,C S ,BECAUSE,S INCE,AS , INASMUCH AS,; 
BECAUSE, S,FOR,SINCE,  AS, INASMUCH AS,; 
SINCE, S ,BECAUSE,FOR,AS , INASMUCH AS,; 
AS, S~SINCE,BECAUSE,FOR, INASMUCH AS,; 
INASMUCII AS, S ,S INCE,BECAUSE,FOR,AS, ;  
FULL, S,CO~PLETE,  PLENARY,R'EPLETE,; 
FULL, A,EMPTY,;  
COMPLETE,  S ,FULL,PLENAR?,REPLETE, :  
COMPLETE,  A, INCOMPLETE, ;  
REPLETE, S ,FULL,COMPLETE,  PLENAR?,; 
PLENARY, S ,FULL ,COMPLETE,REPLETE, ;  
PLENARY, A,LIMITED,;  
EMPTY, S ,VACANT,BLANK,VOID,VACUOUS, ;  
EMPTY, S,EMPTY,;  
INCOMPLETE,  M,; 
L IMITED, ~,; 
SEVERE, S ,STERN,AUSTERE,ASCETIC , ;  
SEVERE, A,TOLERANT,; 
STERN, S ,SEVERE,AUSTERE,ASCETIC , ;  
STERN, A,SOFT,; 
AUSTERE, S ,SEVERE,STERN,ASCETIC , ;  
AUSTERE, A,LUSCIOUS,;  
ASCETIC, S ,AUSTERE,SEVERE,STENN, ;  
21 
ASCETIC, A,LUXURIOUS,; 
REMOTE, StDISTANTwFARwREMOVE~,; 
~EMOVED, 5,REMOTEtFARrDISTANT,; 
DISTANT, S,FARsREMOVED,RENOTE,; 
FAR, S#RE~OTE,RENOVEDwDISTANT,; 
FAR, A,REAR,HIGHwNEA~BY,; 
NEAR, S,CLOSEeHIGHrNEARBYr; 
REAR, AwFAR,; 
HIGHf SwTALL,LOFTY,: 
TALL, StHIGHwLOFTY,; 
NEARBY, SwCLOSEtNEA~,H~GN,; 
HIGH. A,LOM,; 
CLOSE o S,NEAR,IiIGH, NEARBy,: 
CLOSE, S,CLOSE,; 
CLOSE, A,REMOTE,; 
SIMPLE,JIS,PU~E,ABSOLUTE, SHEER,; 
SIMPLE#JIA,COMPOUND,CONPLEX,; 
PURE,J S,SIMPLE,PURE#ABSOLUTE,SHEER,: 
ABSOLUTE,J S,SIMPLE, PURE,SUEER~; 
ShEER,J S,SIMPLE,PURE, ANSOLHTE,; 
COMPLEX,J S,COMPLEX,COMPLICATED, INTRICATE, TNVOLVED,KNOTTY,; 
COMPLEX,J A,SIMPLE,; 
CO~PCUND, M,; 
Z 
SI~PLE#J2S,EASY, FACILE,LIGHT,EFFORTLESS, S~OOTH,; 
SI~PLE,J A,COMPLICATED,DIFF\[CULT,; 
COMPLICATED, S,~NTRICAT~,INVOLVED,COMPLEX,KNOTT?,; 
COMPLICATED, A,SIMPLE,; 
COMPLEX, S,CUMPLEX,COMPL\[CATED, INTRICATE, INVOLVED,KNI}TTY,; 
FACILE, S, EASY,SMOOTR,LIGHT,SIMPLE,EFFORTLESS,; 
LIGHT, ,,EASY,SIMPLE, FACILE,EFFORTLESS, SMOOTH,; 
~FFORTLESS, S,EASY,SMOCTH,FACILE,SIMPLE,LIGHT,; 
SMOOTH, S,EFFORTLESS,EASY,LIGHT,SIMPLE,FACILE,; 
SIMPLE, 3S,NATURAL,INGENUOUS,NAIVE, UNSOPHISTICATED,ARTLESS,; 
NATURAL, S,NATURAL, SI~PLE,INGENUOUS,NAIVE,;JNSOPHISTICATED,ARTLESS,0NAFFECTED,; 
INGENUOUS, S,NATURAL,SIMPLE, NAIVE, UNSOPHISTICATED,ARTLESS,; 
NAIVE, S,UNSOPHISTICATED,ARTLESS,INGERUOUS,NATURALrS\[RPLE,; 
I\]NSOPHISTICATED, S, NATU~AL, SIMPLEoINGENOOUS,NAIVE,A~TLESS~; 
ARTLESS, S,NATURAL,SIMPLE,INGENUOHS,NAIVF,UNSOPRISTICATED,URAFFECTED,; 
UNAFFECTED, S,ARTLESS,NATURAL,SIMPLE, INGENUOUS,NAIVE,UNSOPNISTICATEU,; 
Z 
SIMPLE,,\]~S,FOOLISH,SI~LE, SILLY,FATUOUS,ASfNINE,; 
FOOLISH, 5,SIMPLE,SILLY,FATUOUS,ASLNINE,; 
SILLY, S,SIMPLE, POOLISH, FATHOUS,ASINIRE,; 
FATUOUS, S,ASININE,SILLY,FOOLISH,SIMPLE,; 
FATUOUS, A,SENSIBLE,; 
ASININE, S,SIMPLE,FATUOUS,SILLY,FOOLISH,; 
ASININE, A,SENSIBLE,JUDICIOUS,: 
SIMPLE, ~A,WISE,; 
WISE, S,SENSIBLE,JUDICIOUS,; 
WISE, A,SIMPLE,; 
SENSISLE, A,FOOLISN,FATUOUS,AS~RINE,: 
5ENSIBL~, S, NISE,JUDICIOUS,; 
JUDICIOUS, S,N\[SE,SENSIULE,; 
22 
J~JD\[CIO(\]~;, A,ASININE,: 
INFE~TOH, S,UNDERLING,SUBORDI~&TE,: 
I~F~HIOH, 5,1NFERIOR,: 
I~FERIOR, A,SUPERIOR,; 
UNDERLING, ~,INFERIOR,SUBORDINATE,: 
UNDERLING, A,LEADER,~ASTER,; 
5UBO~DI~ATE,NIS,INFERIOR,UNDENLING,; 
SUBORDINATE,JIS,SECONDARY,DEPENDENT,SUBJECT,TRIBUTAR?,COLLATERAL,: 
SUBORDINATE,JIS,SUBORDINATE,; 
SUBORDINATE,JIA,CHIEF, LEADENG,: 
SUBORDINATE,J2A,DOMINANT,; 
SUPEPrOR, S,BETTER, PREFERABLE,; 
SUPERIOR, A,INFERIOR,; 
PREFERABLE, S,BETTER,SUPERIOR,; 
BETTER, S,SUPERIOR,PREFE~ABLE,BETTEB,; 
LEADER, S,HEAD,CBIEE, CHIEFTAIN,MASTES,; 
lEADER, A,FOLLOWER,; 
MAST?R, S,CHIEF,C~IEFTAIN,HEAD,LEADER,: 
FOLLOWER, S,ADHEBENT,DXSCIPLB,SECTAR?,PABTIS&B,HENCHMAN,SATELLITE,; 
FOLLOWER, A,LEADER,; 
hOD 
-SELECT NODE FOR QUERY 
FAR,S,BEMOTE,; 
STERN,~,SEVERE,: 
~TERN,A,SOFT,; 
~,S,STERN,; 
STBBN,S,#,; 
STERN,S,AUSTERE,; 
FULL,A,EMPTY,; 
IF FAR,A,NEAR,.AND. CLOSE,&,REMOTE,.THEN. FAR,S,BEMOTE,: 
IF FAR, A, REAR,.THEN. NEAE,&,FAR#; 
F?R,A,HIGH,: 
FAR,&,*,.AND.*,S, HIGB,; 
IF FAR,A,HIGH,.AND. HIGH,A,IOW,.THEN. HIGB,A,FAB,; 
IF UNDEBLING,A,LEADER,.AND.LEADEB#&,FOLLOWEB,.THEN-UWDERLING,S,FOLLOWEB,; 
SIMPLE J1,S,SIMPLE al,; 
SIMPLE J~,S,SIMPLE a~,; 
IF SIMPLE J1,A,COMPLEX,.AND.COMPLEX,A,SIMPLE J~,.THER. 
SIMPLE JI,S,SI~PLE J1,; 
? IF ASININE,A,SENSIBLE,.&MD.SENSXBLE, S,JUDIC\[O~S,-THEN-ASININE, A,JUDICIOUS,; 
-EQUIVALENCE MODE 
ECUV(FULL,COMPLETE,FULL, PLENARY,FULL,BEPLETE,COMPLETE,PLENARY,RBPLETE,FULL,) 
E~UV(HIGH,TALL,HIGH,LOFTY,LEADER,HEAD, LEADE~,MASTBB,) 
y 
