Proceedings of the 8th Workshop on Asian Language Resources, pages 161?168,
Beijing, China, 21-22 August 2010. c?2010 Asian Federation for Natural Language Processing
A Current Status of Thai Categorial Grammars and 
Their Applications
Taneth Ruangrajitpakorn and Thepchai Supnithi
Human Language Technology Laboratory
National Electronics and Computer Technology Center 
{taneth.ruangrajitpakorn,thepchai.supnithi}@nec-
tec.or.th
Abstract
This  paper presents a current  status of 
Thai resources and tools for CG  devel-
opment.  We also  proposed  a  Thai  cat-
egorial dependency grammar (CDG), an 
extended version of CG which includes 
dependency  analysis  into  CG notation. 
Beside, an idea of how to group a word 
that has the same functions are presen-
ted to gain a certain type of category per 
word. We also discuss about a difficulty 
of  building  treebank  and  mention  a 
toolkit for assisting on a Thai CGs tree 
building  and  a  tree  format  representa-
tions. In this paper, we also give a sum-
mary  of  applications  related  to  Thai 
CGs.
1 Introduction
Recently, CG formalism was applied to several 
Thai NLP applications such as syntactic inform-
ation  for  Thai  to  English  RBMT (Ruangrajit-
pakorn et al, 2007), a CG treebank (Ruangrajit-
pakorn et al, 2009), and an automatic CG tag-
ger (Supnithi et al, 2010). CG shows promises 
to handle Thai syntax expeditiously since it can 
widely  control  utilisations  of  function  words 
which are the main grammatical expression of 
Thai. 
In the previous research, CG was employed 
as a feature for an English to Thai SMT and it 
resulted better accuracy in term of BLEU score 
for  1.05% (Porkaew and  Supnithi,  2009).  CG 
was  also  used  in  a  research  of  translation  of 
noun phrase from English to Thai using phrase-
based SMT with CG reordering rules, and it re-
turned 75% of better and smoother translation 
from human evaluation (Porkaew et al, 2009).
Though CG has a high potential in immediate 
constituency analysis for Thai, it sill lacks of a 
dependency analysis which is also important in 
syntactical parsing. In this paper, we propose a 
category dependency grammar which is an up-
graded version of CG to express a dependency 
relation  alongside  an  immediate  constituency 
bracketing.  Moreover,  some  Thai  dependency 
banks  such  as  NAIST  dependency  bank 
(Satayamas and Kawtrakul, 2004) have been de-
veloped.  It  is  better  to  be  able  to interchange 
data between a Thai CG treebank and a Thai de-
pendency bank in order to increase an amount 
of data since building treebank from scratch has 
high cost.
In  the  point  of  resources  and  applications, 
Thai CG and CDG still have a few number of 
supported tools. Our CG treebank still contains 
insufficient  data  and  they  are  syntactically 
simple and do not reflect a natural Thai usage. 
To add complex Thai tree, we found that Thai 
practical usage such as news domain contains a 
number of word and very complex.
An example of  natural  Thai text from news, 
which contains 25 words including nine under-
lined function words, is instanced with transla-
tion in Figure 1. 
?? ????|???|???|?? ???|???|??|?????|???| |???|??|???|???|????????|???|???????|??????| |???|??? ???|???| |???????|???|??????|??|???????|????|????
lit: The red-shirts have put bunkers around the as-
sembly area and poured oil and worn-out tires.
Figure 1. An example of Thai usage in natural 
language
161
We parsed the example in  Figure 1 with CG 
and our parser returned 1,469 trees. The result is 
in a large number because many Thai structural 
issues in a syntactic level cause ambiguity. 
The first issue is many Thai words can have 
multiple  functions  including  employing  gram-
matical usage and representing a meaning. For 
instance, a word ????? /tee/ can be a noun, a relat-
ive clause marker, a classifier, a preposition, and 
an  adjective  marker.  A word  ????  /kon/  can 
refer  to a person,  a  classifier  of  human being 
and  it  can  denote  an  action.  A word  ??? ???? 
/kumlung/ can serve as an auxiliary verb to ex-
press progressive aspect and also refers a mean-
ing as a noun. A function word is a main gram-
matical representation and it hints an analyser to 
clarify an overall context structure. Regretfully, 
it is difficult for system to instantly indicate the 
Thai function words by focusing on the lexical 
surface and their surrounding lexicons. This cir-
cumstance is  stimulates  an over  generation  of 
many improper trees.
The second issue is a problem of Thai verb 
utilisations. Thai ordinarily allows to omit either 
a  subject  or  an  object  of  a  verb.  Moreover,  a 
Thai  intransitive  verb  is  occasionally  attached 
its  indirect  object  without  a  preposition.  Fur-
thermore, Thai adjective allows to perform as a 
predicate without a marker. With an allowance 
of verb serialisation, these complexify linguists 
to design a category into well-crafted category 
set for verb. Therefore, many Thai verbs contain 
several syntactic categories to serve their many 
functions.
The last issues is a lack of an explicit bound-
ary for a word, a phrase and a sentence in Thai. 
A Thai  word  and  phrase  boundary  is  implicit 
and  a  space  is  not  significantly  signified  a 
boundary  in  the  context.  In  addition,  most  of 
modifiers are attached after a core element. This 
leads  to  ambiguity  of  finding  an  ending  of  a 
subject with an attached adjective and relative 
clause since the verbs in attachment can be seri-
alised and consequently placed with following 
main verb phrase (which is likely to be serial-
ised either) without a signified indicator.
With these issues, a parser with only syntactic 
information merely returns a large number of all 
possible  trees.  It  becomes  difficulty  and  time 
consuming for linguists to select the correct one 
among them. Moreover, with many lexical ele-
ments, using a statistical parser has a very low 
chance to generate a correct tree and a  manual 
tree  construction  is  also  required as  a  gold 
standard. Thus, we recently implemented an as-
sistant toolkit for tree construction and tree rep-
resentation  to  reduce  linguists'  work  load  and 
time consumption.
This paper aims to explain the current status 
of resource and tool for CG and CDG develop-
ment  for  Thai  language.  We  also  listed  open 
tools and applications that relate to CGs in this 
paper.
The rest of the paper is organised as follows. 
Section  2  presents  a  Thai  categorial  grammar 
and  its  related  formalism.  Section  3  explains 
status of CGs resources including syntactic dic-
tionary and treebank. Section 4 shows details of 
a toolkit  which assists  linguist  to manage and 
construct CGs derivation tree and tree represent-
ations. Section 5 provides information of applic-
ations that involve Thai CGs. Lastly, Section 6 
concludes this paper and lists future works.
2 Thai Categorial Grammars
2.1 Categorial Grammar
Categorial  grammar  (Aka.  CG  or  classical 
categorial  grammar)  (Ajdukiewicz,  1935; 
Carpenter,  1992;  Buszkowski,  1998)  is  a 
formalism in natural language syntax motivated 
by  the  principle  of  constitutionality  and 
organised according  to the  syntactic  elements. 
The syntactic elements are categorised in terms 
of their ability to combine with one another to 
form  larger  constituents  as  functions  or 
according to a function-argument relationship. 
CG captures the same information by associ-
ating  a  functional  type  or  category  with  all 
grammatical  entities.  Each  word  is  assigned 
with at least one syntactic category, denoted by 
an argument symbol (such as np and num) or a 
functional  symbol  X/Y and  X\Y that  require  Y 
from the right and the left respectively to form 
X.
The basic concept is to find the core of the 
combination and replace the grammatical modi-
fier  and  complement  with  set  of  categories 
based on the same concept of the rule of frac-
tion cancellation as follow:
162
Upon applying to Thai, we have modified ar-
gument set and designed eight arguments shown 
in Table 1.
From the last  version,  two arguments  were 
additionally designed. ?ut? argument was added 
to denote utterance that is followed after a word 
?????. The word ????? has a special function to let 
the word after it perform as an exemplified ut-
terance and ignore its appropriate category as it 
is signified an example in context. Comparing 
to ?ws? argument, the word ?? ???  is functioned 
in a different sense which is used to denote a be-
ginner of subordinate clause.
For ?X? category, it is used for punctuation or 
symbol  which  takes  the same categories  from 
the left  or  right  sides  and produces  the  taken 
category. For instance, ??? is a marker to denote 
after many types of content word. In details, this 
symbol signifies plurality while it is after noun 
but it intensifies a degree of meaning while it is 
placed after adjective.
Upon  CG  design,  we  allowed  only  binary 
bracketing  of  two  immediate  constituents.  To 
handle serial construction in Thai including seri-
al  verb construction,  we permitted the exactly 
same  categories  which  are  consequent  to  be 
combined.  For  example,  Thai  noun  phrase 
'???(np)|???????????(np)' (lit: a consensus of the 
government)  contains  two  consequent  nouns 
without a joint word to form a noun phrase. Un-
fortunately, there still remain limits of syntactic 
parsing in CG that can not handle long depend-
ency and word omission in this state.
2.2 Categorial Dependency Grammar
Categorial  dependency  grammar  (CDG)  is  an 
extension of CG. CDG differs from CG in that a 
dependency  direction  motivated  by  Collins 
(1999)  is  additionally  annotated  to  each  slash 
notation  in  syntactic  category.  The  derivation 
rules of CDG are listed as follow:
X/<Y : d1 Y : d2 => X : h(d1) ? h(d2)
X/>Y : d1 Y : d2 => X : h(d1) ? h(d2)
Y : d1 X\<Y : d2 => X : h(d1) ? h(d2)
Y : d1 X\>Y : d2 => X : h(d1) ? h(d2)
where the notations h(d1)  ? h(d2) and h(d1)  ? 
h(d2) mean a dependency linking from the head 
of the dependency structure d1 to the head of d2, 
and that linking from the head of d2 to the head 
of d1, respectively. Throughout this paper, a con-
stituent type of the syntactic category c and the 
dependency structure d is represented by c:d.
Let us exemplify a dependency driven deriva-
tion  of  CDG  of  sentence  'Mary  drinks  fresh 
milk'  in  Figure 2. In  Figure 2(a),  each pair of 
constituents is combined to form a larger con-
stituent with its head word. Figure 2(b) shows a 
dependency structure equivalent  to the deriva-
tion in Figure 2(a).
Comparing  to  PF-CCG  (Koller  and  Kuhl-
mann, 2009), there is different in that their PF-
CCG dependency markers are fixed to the direc-
tion of slashes while CDG dependency markers 
are  customised  based  on  behaviour  of  a  con-
stituent.
CDG offers an efficient way to represent de-
pendency structures alongside syntactic deriva-
tions. Apart from immediate constituency ana-
lysis,  we  can  also  investigate  the  correspond-
ence between the syntactic derivations and the 
dependency  structures.  It  benefits  linguists  in 
details  a  grammar for  a specific  language be-
argu-
ment 
category
definition example
np a noun phrase ???? (elephant), ?? (I, me) 
num a digit and a spelled-out number
????? (one), 
2 (two)
spnum a number which is suc-ceeding to classifier 
??? (one), ????? (one)
pp a prepositional phrase ???? (in car),?????? (on table)
s a sentence
???????????? 
(an elephant eats 
a banana) 
ws
a specific category for 
Thai which is assigned to 
a sentence or a phrase that 
begins with Thai word ??? 
(that : sub-ordinate clause 
marker).
* ?????????????
'that he will 
come late'
* ??????????
'that (he) will 
come late'
ut
an utterance using to ex-
emplify a specific word 
after a word ???
??  ???   ? ?
'the word ?good?'
X
an undefined category that 
takes the same categories 
from the left or right sides 
and produces the taken 
category.
???? ?
(plural marker)????? ?
(intensifier)
Table 1. A list of Thai CDG arguments
163
cause  we  can  restrain  the  grammar  in  lexical 
level.
In  this  paper,  our  Thai  CG was  applied  to 
CDG. For the case of serial construction, we set 
the  left  word  as  a  head  of  dependency  since 
Thai modifiers and dependents are ordinarily at-
tached on right side.
2.3 Categorial Set
A categorial set is a group of lexicons that ex-
actly contains the same function(s) in terms of 
their  category amount and all  their  same syn-
tactic categories. With a specific surface, each 
word certainly is in one categorial set. For ex-
ample,  suppose that  we have following words 
and categories:
word category POS
?????????,????,???,???? ? np noun
???,????,????,???,???? ? s\np/np verb
???,????,??? ? np\np/num classifier
We can group the given words into five groups 
based on the concept of categorial set shown in 
Table 2.
Set-
index Category member Word member
1 np ?????????
2 s\np/np ???,????
3 nps\np/np ????
4
np
s\np/np
np\np/num
???,????
5 np\np/num ???
Table 2. An example of categorial set
For  current  status,  we  attain  183 categorial 
sets  in total and the maximum amount of cat-
egory member in a categorial set is 22 categor-
ies.
3 Categorial Grammars Resources
To apply categorial grammars to Thai NLP, syn-
tactic dictionary and treebank are a mandatory.
3.1 Categorial Grammars Dictionary
For using in other work and researches, we col-
lected  all  CGs  information  into  one  syntactic 
dictionary.  An  example  of  CGs  dictionary  is 
shown in Table 3. In a summary, our Thai CGs 
dictionary  currently  contain  70,193  lexical 
entries with 82 categories for both CG and CDG 
and 183 categorial sets.
Lexicon CG CDG Cset no.
???? np np 0
???? np,s\np/np,np\n
p/num
np,s\<np/>np,np\>
np/<num
15
??? s\np/np,s\np s\<np/>np,s\<np 13
??? s\s/s,s/s/s s\<s/>s,s/>s/>s 43
??? s\np/pp,s\np,s\
np/ws
s\<np/>pp,s\<np,s\
<np/>ws
19
????? np\np,s\np np\>np,s\<np 3
???? s\np s\<np 1
??????? np\np,s\np np\>np,s\<np 3
??? s\np s\<np 1
??? s\np/np,s\np s\<np/>np,s\<np 13
????? np np 0
??? s\np/np,s\np/ws
,np\np/ut
s\<np/>np,s\<np/>
ws,np\>np/>ut
136
????? s\s/s,s/s/s s\<s/>s,s/>s/>s 43
Table 3. An example of Thai CGs dictionary
3.2 Thai CDGTreebank
Our CG treebank was recently transformed into 
dependency-driven  derivation  tree  with  CDG. 
An example of derivation tree of sentence |???|
Figure 2. Syntactic derivation of ?Mary drinks fresh milk? based on CDG
164
???|????|????|???|??????| 'lit: Tiger hunting is an 
adventure' comparing between CG and CDG is 
illustrated in Figure 3.
s
  (np
    (np/(s\np)[???]
    s\np(
      (s\np)/np[???]
      np[????]
    )
  )
  s\np(
    (s\np)/np[????]
    np(
      np/(s\np)[???]
      s\np[??????]
    )
  )
)
(a) CG derivation tree
s
  (np
    (np/>(s\<np)[???]
    s\<np(
      (s\<np)/>np[???]
      np[????]
    )
  )
  s\<np(
    (s\<np)/>np[????]
    np(
      np/>(s\<np)[???]
      s\<np[??????]
    )
  )
)
(b) CDG derivation tree
Figure 3. An example of a derivation tree in 
treebank comparing between CG and CDG
A status  of  transformed  CDG  treebank  is 
30,340  text  lines  which  include  14,744  sen-
tences,  9,651  verb  phrases  or  subject-omitted 
sentences and 5,945 noun phrases. However, the 
average word amount of  this  treebank is  3.41 
words per tree which is obviously short.
Upon  an  attempt  to  increase  a  number  of 
trees, we considered that the existing trees are 
simple and not signify all utilisations of natural 
Thai  text.  Therefore,  news  domain  of  BEST 
(Kosawat et al, 2009) corpus was chosen to ful-
fil  such  issues  because  of  its  practical  usage. 
From our  observation,  we  found that  most  of 
data are  ranged from 25 to 68 words  and the 
longest  line  contains  415  words  which  is  ex-
tremely long for parser to handle it efficiently.
After a prior experiment, we found that  our 
GLR  parser  with  CDG  information  resulted 
514.62  tree  alternatives  in  average  from  the 
range  of  three  to  fifteen  words  per  sentence 
from  news  domain  in  BEST.  With  problems 
from ambiguous syntax of Thai, to automatic-
ally select  a correct  tree is extremely difficult 
since  several  resulted  trees  are  grammatically 
correct and semantically sound but they are not 
proper  for  their  context.  It  becomes  difficulty 
for linguists to select an appropriate one among 
them. In order to solve that problem, we imple-
mented a toolkit to assist linguists on construct-
ing treebank with such a long and complicated 
sentence.  The  manual  annotated  tree  will  be 
used as a gold standard and confidentially apply 
for statistical parser development.
4 CGs Tree Supported Tool
Building  a  resource  is  a  laboured  work  espe-
cially  a  treebank  construction.  For  Thai  lan-
guage which uses several function words to ex-
press grammatical function in context, an imme-
diate  constituency  analysis  and  a  dependency 
analysis become difficult since many word pair 
can  cause  ambiguity  and  complexity  among 
them. Additionally, a representation of a deriva-
tion tree in textual format is excessively com-
plex to be  analysed or approved.  To reduce a 
burden of linguists,  we developed a toolkit  to 
help a linguists with graphical user-interface in 
manual tree construction.
4.1 CGs Toolkit
The proposed toolkit supports multi-tasks which 
are annotating CG tag to a word, bracketing in-
termediate constituents, generating dependency-
driven derivation tree in multiple formats, and 
visualising graphical tree.
4.1.1 Category Annotator
Category annotator supports users to select  an 
appropriate CDG category for each word. The 
system  takes  word-segmented  input  text.  It 
starts with checking possible categories with the 
given CDG dictionary and lists  all  of them to 
each word. Users only select a correct category 
for each. Unless the word is known or the re-
quired category for the word is present, user has 
to add a new category for the word and the sys-
tem  contiguously  updates  the  dictionary  with 
the given data for further usage.
4.1.2 Dependency-driven  Derivation  Tree 
Generator
This system is implemented for manual annotat-
ing tree information and dependency relation to 
a text that is difficult for parser to generate tree 
such as a text with multiple serial verb construc-
tions, a complex head-dependent relation word 
pairs,  etc.  A captured picture  of  user-interface 
165
working  on  immediate  constituency  and  de-
pendency annotation is illustrated in Figure 4. 
We provide a user-interface for linguists and 
experts  to  easily  annotate  brackets  covering. 
Users  begin  a  process  by  selecting  a  pair  of 
words that are a terminal of leaf node. The sys-
tem  apparently  shows  only  categories  of  the 
word that can be possibly combined within the 
bracket for selecting. After choosing categories 
of those two constituents, the system automatic-
ally generates a result category. Next, users will 
continue the process for other constituents until 
one top result category is left.
After users finish the bracketing process, de-
pendency relation will be generated from annot-
ated  dependency  marker  within  categories 
without manual assignment.
4.1.3 Tree Visualiser
The  system  includes  a  function  to  create  a 
graphical tree from a file in textual formats. It 
provides a function to modify a tree by editing a 
word  spelling  and  its  syntactic  category  and 
shifting a branch of syntactic tree to another.
4.2 Tree Representation
The CGs  toolkit  allows users  to export  a  tree 
output in two representations; traditional textual 
tree format and XML format.
Throughout all tree format examples, we ex-
emplify a Thai sentence '? ??? ??????  ????  ?? 
????? ???????' (lit: an expert discovers corona vir-
us.) with the following categories:
Word CDG category
?????????? (expert)????? (virus)??????? (corona) ? np
???? (diagnose) ? s\<np
?? (discover) ? s\<np/>np
4.2.1 Traditional Textual Tree Format
A traditional textual tree format represents a ter-
minal (w) with its category (c) in form of c[w]. 
The brackets are enclosed two constituents split 
by  space  with  parentheses  and  the  result  cat-
egory (cr) is placed before the open parenthesis 
in format  cr(c[w] c[w]).  Figure 5 shows an ex-
ample of a traditional textual tree format.
s(np[??????????] s\<np(s\<np[????] 
s\<np(s\<np(s\<np/>np[??] np(np[?????] np[???????])))
Figure 5. An example of a traditional textual 
tree format of '?????????? ???? ?? ????? ???????'
4.2.2 XML Tree Format
For XML tree format, we design three tag sets, 
i.e., word tag,  tree tag and input tag. The word 
Figure 4. A snapshot of dependency-driven derivation tree generator
166
tag bounds a terminal to mark a word. In a start-
tag of  word tag, there are two attributes which 
are  cat to assign a category in a value and text 
to assign a given text in a value. For tree tag, it 
marks a combination of either word tags or tree 
tags to form another result category. It contains 
two previous attributes with an additional attrib-
ute, i.e., a head attribute to fill in a notation that 
which word has a head-outward relation value 
where '0' value indicates head from left constitu-
ent and '1' value indicates head from right con-
stituent. The input tag shows a boundary of all 
input and it has attributes to show line number, 
raw input text and status of tree building pro-
cess. Figure 6 illustrates an XML tree represent-
ation.
5 Thai CGs Related Applications
Several applications related to Thai CGs or used 
Thai  CGs  as  their  syntactic  information  have 
been  implemented  recently.  Below  is  a  sum-
mary of their methodology and result.
5.1 CG AutoTagger for Thai
To reduce an amount of trees generated from a 
parser with all possible categories, an automatic 
syntactic category tagger (Supnithi et al, 2010) 
was developed to disambiguate  unappropriated 
combinations of impossible categories. The sys-
tem was developed based on CRF and Statistic-
al Alignment Model based on information the-
ory (SAM) algorithm. The accuracy 89.25% in 
word level was acquired. This system also has a 
function to predict  a  syntactic category for an 
unknown word and 79.67% of unknown word 
are predicted correctly.
5.2 Chunker
With  a  problem  of  a  long  sentence  in  Thai, 
chunker  was  implemented  to  group  a  con-
sequent of words to larger unit in order to re-
duce  a  difficulty  on  parsing  too  many  lexical 
elements. CRD method with syntactic informa-
tion from CG and categorial set was applied in 
the  system to  chunk a  text  into  noun phrase, 
verb phrase, prepositional phrase, and adverbial 
phrase.  Moreover,  the system also  attempts to 
handle a compound word that has a form like 
sentence.  The  result  was  impressive  as  it  im-
proved  74.17% of  accuracy  on  sentence  level 
chunking  and  58.65%  on  sentence-form  like 
compound noun.
5.3 GLR parser for Thai CG and CDG
Our implemented LALR parser (Aho and John-
son,  1974)  was  improved  to  GLR  parser  for 
syntactically  parse  Thai  text.  This  parser  was 
developed to return all possible trees form input 
to show a baseline that covers all syntactic pos-
sibilities. For our GLR parser, a grammar rule is 
not manually determined, but it is automatically 
produced  by  any  given  syntactic  notations 
aligned  with  lexicons  in  a  dictionary.  Hence, 
this  GLR parser has a  coverage including CG 
and CDG formalism parsing. Furthermore, our 
GLR parser accepts a sentence, a noun phrase, a 
verb phrase and prepositional phrase. However, 
the parser does not only return the best first tree, 
but also all  parsable trees to gather all ambigu-
ous trees since Thai language tends to be  am-
biguous because  of  lacking  explicit  sentence, 
phrase and word boundary. This parser includes 
a  pre-process to handle named-entities,  numer-
ical expression and time expression.
Figure 6. An example of XML tree format of '?????????? ???? ?? ????? ???????'
167
6 Conclusion and Future Work
In this paper, we update our Thai CG informa-
tion and a status of its resources. We also pro-
pose CDG for Thai, an extended version of CG. 
CDG offers  an  efficient  way  to  represent  de-
pendency structures with syntactic derivations. 
It benefits linguists in terms of they can restrain 
Thai  grammar in lexical  level.  With CDG de-
pendency-driven  derivation  tree,  both bracket-
ing information and dependency relation are an-
notated  to  every  lexical  units.  In  the  current 
state, we transformed our CG dictionary and CG 
treebank into CDG formalism. 
With an attempt to increase an amount of our 
treebank with a complex text, CDG tree toolkit 
was developed for linguists to manual managing 
a derivation tree. This toolkit  includes a CDG 
category tagger tool, dependency-driven deriva-
tion  tree  generator,  and  tree  visualiser.  This 
toolkit  can generate  an  output  in  two formats 
which are traditional textual tree and XML tree. 
The XML tree format is an option for standard-
ised format  or  further  usage such as  applying 
tree for ontology.
We also summarised CGs related works and 
their accuracy. They included an automatic CG 
tagger and a Thai phrase chunker.
In the future, we plan to increase an amount 
of  CGs  derivation  trees  of  complex  sentence 
and practical language. Moreover, we will im-
plement a system to transform an existing Thai 
dependency bank to CDG format to gain more 
number  of  trees.  We  also  plan  to  include  se-
mantic meaning into derivation tree and repres-
ent  such trees  in an RDF format.  In addition, 
statistical parser will be implemented based on 
the CDG derivation trees.
References
Ajdukiewicz  Kazimierz.  1935.  Die  Syntaktische 
Konnexitat, Polish Logic.
Aho Alfred, and Johnson Stephen. 1974. LR Parsing, 
Proceedings of Computing Surveys, Vol. 6, No. 2.
Bar-Hillel  Yehoshua.  1953.  A  quasi-arithmetical 
notation for syntactic description. 29(1): 47-58.
Carpenter Bob. 1992. Categorial Grammars, Lexical 
Rules,and the English Predicative, In R. Levine, 
ed.,  Formal  Grammar:  Theory  and  Implementa-
tion. OUP.
Collins Micheal. 1999. Head-Driven Statistical Mod-
els for  Natural  Language Parsing. Ph.D. Thesis, 
University of Pennsylvania.
Koller Alexander, and Kuhlmann Marco. 2009. De-
pendency trees and the strong generative capacity 
of ccg, Proceedings of the 12th Conference of the 
European Chapter of the Association for Compu-
tational Linguistics: 460-468.
Kosawat  Krit,  Boriboon  Monthika,  Chootrakool 
Patcharika,  Chotimongkol  Ananlada,  Klaithin 
Supon, Kongyoung Sarawoot,  Kriengket  Kanya-
nut,  Phaholphinyo  Sitthaa,  Purodakananda 
Sumonmas,  Thanakulwarapas  Tipraporn,  and 
Wutiwiwatchai  Chai.  2009.  BEST  2009:  Thai 
Word Segmentation Software Contest. The 8th In-
ternational Symposium on Natural Language Pro-
cessing: 83-88.
Porkaew Peerachet, Ruangrajitpakorn Taneth, Trak-
ultaweekoon Kanokorn,  and  Supnithi  Thepchai.. 
2009. Translation of Noun Phrase from English to 
Thai using Phrase-based SMT with CCG Reorder-
ing Rules, Proceedings of the 11th conference of 
the  Pacific  Association  for  Computational  Lin-
guistics (PACLING).
Porkaew  Peerachet,  and  Supnithi  Thepchai.  2009. 
Factored  Translation  Model  in  English-to-Thai 
Translation, Proceedings of  the 8th International 
Symposium on Natural Language Processing. 
Ruangrajitpakorn Taneth, Na Chai Wasan , Boonk-
wan Prachya, Boriboon Monthika, Supnithi Thep-
chai. 2007. The Design of Lexical Information for 
Thai to English MT, Proceedings of the 7th Inter-
national  Symposium  on  Natural  Language  Pro-
cessing.
Ruangrajitpakorn  Taneth,  Trakultaweekoon  Kan-
okorn, and Supnithi Thepchai. 2009. A Syntactic 
Resource for Thai: CG Treebank, Proceedings of 
the 7th Workshop on Asian Language Resources, 
(ACL-IJCNLP): 96?102.
Satayamas Vee, and Kawtrakul Asanee . 2004. Wide-
Coverage  Grammar  Extraction  from Thai  Tree-
bank. Proceedings of Papillon 2004 Workshops on 
Multilingual Lexical Databases, Grenoble, France.
Supnithi  Thepchai,  Ruangrajitpakorn  Taneth,  Trak-
ultaweekoon Kanokorn,  and Porkaew Peerachet. 
2010. AutoTagTCG : A Framework for Automatic 
Thai CG Tagging, Proceedings of the 7th interna-
tional  conference  on  Language  Resources  and 
Evaluation (LREC).
168
