Proceedings of the ACL Student Research Workshop, pages 96?102,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
Question Analysis for Polish Question Answering
Piotr Przyby?a
Institute of Computer Science, Polish Academy of Sciences,
ul. Jana Kazimierza 5, 01-248 Warszawa, Poland,
P.Przybyla@phd.ipipan.waw.pl
Abstract
This study is devoted to the problem of
question analysis for a Polish question an-
swering system. The goal of the question
analysis is to determine its general struc-
ture, type of an expected answer and cre-
ate a search query for finding relevant doc-
uments in a textual knowledge base. The
paper contains an overview of available
solutions of these problems, description of
their implementation and presents an eval-
uation based on a set of 1137 questions
from a Polish quiz TV show. The results
help to understand how an environment
of a Slavonic language affects the perfor-
mance of methods created for English.
1 Introduction
The main motivation for building Question An-
swering (QA) systems is that they relieve a user
of a need to translate his problem to a machine-
readable form. To make it possible, we need to
equip a computer system with an ability to under-
stand requests in a natural language, find answers
in a knowledge base and formulate them in the nat-
ural language. The aim of this paper is to deal with
the first of these steps, i.e. question analysis mod-
ule. It accepts the question as an input and returns
a data structure containing relevant information,
herein called question model. It consists of two
elements: a question type and a search query.
The question type classifies a question to one
of the categories based on its structure. A gen-
eral question type takes one of the following val-
ues: verification (Czy Lee Oswald zabi? Johna
Kennedy?ego?, Eng. Did Lee Oswald kill John
Kennedy?), option choosing (Kt?ry z nich zabi?
Johna Kennedy?ego: Lance Oswald czy Lee Os-
wald?, Eng. Which one killed John Kennedy:
Lance Oswald or Lee Oswald?), named entity
(Kto zabi? Johna Kennedy?ego?, Eng. Who killed
John Kennedy?), unnamed entity (Czego uz?y?
Lee Oswald, z?eby zabic? Johna Kennedy?ego?,
Eng. What did Lee Oswald use to kill John
Kennedy?), other name for a given named en-
tity (Jakiego pseudonimu uz?ywa? John Kennedy w
trakcie s?uz?by wojskowej?, Eng. What nickname
did John Kennedy use during his military service?)
and multiple entities (Kt?rzy prezydenci Stan?w
Zjednoczonych zostali zabici w trakcie kadencji?,
Eng. Which U.S. presidents were assassinated in
office?). There are many others possible, such as
definition or explanation questions, but they re-
quire specific techniques for answer finding and
remain beyond the scope of this work. For exam-
ple, the Question Answering for Machine Read-
ing Evaluation (QA4MRE) competition (Pe?as et
al., 2012) included these complex questions (e.g.
What caused X?, How did X happen?, Why did X
happen?). In case of named entity questions, it
is also useful to find its named entity type, cor-
responding to a type of an entity which could be
provided as an answer. A list of possible options,
suited to questions about general knowledge, is
given in Table 1. As some of the categories in-
clude others (e.g. CITY is a PLACE), the goal of
a classifier is to find the narrowest available.
The need for a search query is motivated by
performance reasons. A linguistic analysis ap-
plied to a source text to find the expected answer
is usually resource-consuming, so it cannot be per-
formed on the whole corpus (in case of this exper-
iment 839,269 articles). To avoid it, we transform
the question into the search query, which is sub-
sequently used in a search engine, incorporating a
full-text index of the corpus. As a result we get a
list of documents, possibly related to the question.
Although the query generation plays an auxiliary
role, failure at this stage may lead both to too long
processing times (in case of excessive number of
returned documents) and lack of a final answer (in
96
Question type Occurrences
NAMED_ENTITY 657
OPTION 28
VERIFICATION 25
MULTIPLE 28
UNNAMED_ENTITY 377
OTHER_NAME 22
PLACE 33
CONTINENT 4
RIVER 11
LAKE 9
MOUNTAIN 4
RANGE 2
ISLAND 5
ARCHIPELAGO 2
SEA 2
CELESTIAL_BODY 8
COUNTRY 52
STATE 7
CITY 52
NATIONALITY 12
PERSON 260
NAME 11
SURNAME 10
BAND 6
DYNASTY 6
ORGANISATION 20
COMPANY 2
EVENT 7
TIME 2
CENTURY 9
YEAR 34
PERIOD 1
COUNT 31
QUANTITY 6
VEHICLE 10
ANIMAL 1
TITLE 38
Table 1: The 6 general question types and the 31
named entity types and numbers of their occur-
rences in the test set.
case of not returning a relevant document).
2 Related work
The problem of determination of the general ques-
tion type is not frequent in existing QA solutions,
as most of the public evaluation tasks, such as
the TREC question answering track (Dang et al,
2007) either provide it explicitly or focus on one
selected type. However, when it comes to named
entity type determination, a proper classification
is indispensable for finding an answer of a desired
type. Some of the interrogative pronouns, such as
gdzie (Eng. where) or kiedy (Eng. when) uniquely
define this type, so the most obvious approach uses
a list of manually defined patterns. For example,
Lee et al (2005) base solely on such rules, but
need to have 1273 of them. Unfortunately, some
pronouns (i.e. jaki, Eng. what, and kt?ry, Eng.
which) may refer to different types of entities. In
questions created with them, such as Kt?ry znany
malarz twierdzi?, z?e obcia?? sobie ucho? (Eng.
Which famous painter claimed to have cut his
ear?) the question focus (znany malarz, Eng. fa-
mous painter), following the pronoun, should be
analysed, as its type corresponds to a named en-
tity type (a PERSON in this case). Such approach
is applied in a paper by Harabagiu et al (2001),
where the Princeton WordNet (Fellbaum, 1998)
serves as an ontology to determine foci types. Fi-
nally, one could use a machine learning (ML) ap-
proach, treating the task as a classification prob-
lem. To do that, a set of features (such as occur-
rences of words, beginning pronouns, etc.) should
be defined and extracted from every question. Li
and Roth (2002) implemented this solution, using
as much as 200,000 features, and also evaluated
an influence of taking into account hierarchy of
class labels. C?eh and Ojster?ek (2009) used this
approach in a Slovene QA system for closed do-
main (students? faculty-related questions) with a
SVM (support vector machines) classifier.
The presented problem of question classifica-
tion for Polish question answering is studied in a
paper by Przyby?a (2013). The type determination
part presented here bases on that solution, but in-
cludes several improvements.
To find relevant documents, existing QA solu-
tions usually employ one of the widely available
general-purpose search engines, such as Lucene.
Words of the question are interpreted as keywords
and form a boolean query, where all the con-
stituents are considered required. This procedure
suffices only in case of a web-based QA, where
we can rely on a high redundancy of the WWW,
which makes finding a similar expression proba-
ble enough. Such an approach, using the Google
search engine is presented by Brill et al (2002).
When working with smaller corpora, one needs
to take into account different formulations of the
desired information. Therefore, an initial query
is subject to some modifications. First, some of
the keywords may be dropped from the query;
Moldovan et al (2000) present 8 different heuris-
tics of selecting them, based on quotation marks,
parts of speech, detected named entities and other
features, whereas Katz et al (2003) drop terms in
order of increasing IDF. C?eh and Ojster?ek (2009)
start term removal from the end of the sentence.
Apart from simplifying the query, its expansion is
97
also possible. For example, Hovy et al (2000) add
synonyms for each keyword, extracted from Word-
Net while Katz et al (2003) introduce their inflec-
tional and derivational morphological forms.
3 Question analysis
For the purpose of building an open-domain
corpus-based Polish question answering system, a
question analysis module, based on some of the
solutions presented above, has been implemented.
The module accepts a single question in Polish
and outputs a data structure, called a question
model. It includes a general question type, a set
of named entity types (if the general type equals
NAMED_ENTITY) and a Lucene search query. A
set of named entity types, instead of a single one,
is possible as some of the question constructions
are ambiguous, e.g. a Kto? (Eng. Who?) ques-
tion may be answered by a PERSON, COUNTRY,
BAND, etc.
3.1 Question type classification
For the question type classification all the tech-
niques presented above are implemented. Pat-
tern matching stage bases on a list of 176 regu-
lar expressions and sets of corresponding question
types. If any of the expressions matches the ques-
tion, its corresponding set of types may be imme-
diately returned at this stage. These expressions
cover only the most obvious cases and have been
created using general linguistic knowledge. The
length of the list arises from some of the features
of Polish, typical for Slavonic languages, i.e. rel-
atively free word order and rich nominal inflec-
tion (Przepi?rkowski, 2007). For example one En-
glish pattern Whose . . . ? corresponds to 11 Polish
patterns (Czyj . . . ?, Czyjego . . . ?, Czyjemu . . . ?,
Czyim . . . ?, Czyja . . . ?,Czyjej . . . ?, Czyja? . . . ?,
Czyje . . . ?, Czyi . . . ?, Czyich . . . ?, Czyimi . . . ?).
However, in case of ambiguous interrogative
pronouns, such as jaki (Eng. what) or kt?ry
(Eng. which), a further analysis gets necessary
to determine a question focus type. The ques-
tion is annotated using the morphological anal-
yser Morfeusz (Wolin?ski, 2006), the tagger PAN-
TERA (Acedan?ski, 2010) and the shallow parser
Spejd (Przepi?rkowski, 2008). The first nomi-
nal group after the pronoun is assumed to be a
question focus. The Polish WordNet database
plWordNet (Maziarz et al, 2012) is used to find
its corresponding lexeme. If nothing is found,
the procedure repeats with the current group?s
semantic head until a single segment remains.
Failure at that stage results in returning an UN-
NAMED_ENTITY label, whereas success leads
us to a synset in WordNet. Then, we check
whether its direct and indirect parents (i.e. synsets
connected via hypernymy relations) include one
of the predefined synsets, corresponding to the
available named entity types. The whole proce-
dure is outlined in Figure 1. The error analysis
of this procedure performed in (Przyby?a, 2013)
shows a high number of errors caused by a lack
of a word sense disambiguation. A lexeme may
be connected to many synsets, each correspond-
ing to a specific word sense and having a differ-
ent parent list. Among the possible ways to com-
bine them are: intersection (corresponding to us-
ing only the parents common for all word senses),
union (the parents of any word sense), voting (the
parents common for the majority of word senses)
and selecting only the first word sense (which usu-
ally is the most common in the language). The
experiments have shown a better precision of clas-
sification using the first word sense (84.35%) than
other techniques (intersection - 72.00%, union -
80.95%, voting - 79.07%). Experimental details
are provided in the next section.
As an alternative, a machine learning approach
has been implemented. After annotation using the
same tools, we extract the features as a set of root
forms appearing in the question. Only the lem-
mas appearing in at least 3 sentences are used for
further processing. In this way, each sentence is
described with a set of boolean features (420 for
the evaluation set described in next section), de-
noting the appearance of a particular root form.
Additionally, morphological interpretations of the
first five words in the question are also extracted
as features. Two classifiers, implemented in the R
statistical environment, were used: a decision tree
(for human-readable results) and a random forest
(for high accuracy).
3.2 Query formation
The basic procedure for creating a query treats
each segment from the question (apart from the
words included in a matched regular expression)
as a keyword of an OR boolean query. No term
weighting or stop-words removal is implemented
as Lucene uses TF/IDF statistic, which penalizes
omnipresent tokens. However, several other im-
98
Which russian  submarine         sank       in 2000        with its whole crew?Kt?ra  rosyjska ??d? podwodna zaton??? w 2000 roku wraz z  ca??    za?og??
first nominal group
(rosyjska (??d? podwodna))
semantic head
(??d? podwodna)
No synsetWordNet search
{??d? podwodna 1}WordNet search
hypernym
Interrogativepronoun Questionfocus
{statek podwodny 1}
hypernym
submersible ship
{statek 1}
hypernym
ship
{?rodek lokomocji 1, ?rodek transportu 1}vehicleNAMED_ENTITYVEHICLE
Figure 1: Outline of the disambiguation procedure, used to determine named entity type in case of
ambiguous interrogative pronouns (see explanation in text).
provements are used. First, we start with a restric-
tive AND query and fall back into OR only in case
it provides no results. A question focus removal
(applied by Moldovan et al (2000)) requires spe-
cial attention. For example, let us consider again
the question Kt?ry znany malarz twierdzi?, z?e ob-
cia?? sobie ucho?. The words of the question fo-
cus znany malarz are not absolutely necessary in
a source document, but their appearance may be
a helpful clue. The query could also be expanded
by replacing each keyword by a nested OR query,
containing synonyms of the keyword, extracted
from plWordNet. Both the focus removal and syn-
onym expansion have been implemented as op-
tions of the presented query formation mechanism.
Finally, one needs to remember about an
important feature of Polish, typical for a
Slavonic language, namely rich nominal inflection
(Przepi?rkowski, 2007). It means that the ortho-
graphic forms of nouns change as they appear in
different roles in a sentence. We could either ig-
nore this fact and look for exact matches between
words in the question and a document or allow
some modifications. These could be done by stem-
ming (available for Polish in Lucene, see the de-
scription in (Galambos, 2001)), fuzzy queries (al-
lowing a difference between the keyword and a
document word restricted by a specified Leven-
shtein distance) or a full morphological analysis
and tagging of the source corpus and the query. All
the enumerated possibilities are evaluated in this
study, apart from the last one, requiring a sizeable
amount of computing resources. This problem is
less acute in case of English; most authors (e.g.
Hovy et al (2000)) use simple (such as Porter?s)
stemmers or do not address the problem at all.
4 Evaluation
For the purpose of evaluation, a set of 1137 ques-
tions from a Polish quiz TV show "Jeden z dziesie?-
ciu", published in (Karzewski, 1997), has been
manually reviewed and updated. A general ques-
tion type and a named entity type has been as-
signed to each of the questions. Table 1 presents
the number of question types occurrences in the
test set. As a source corpus, a textual version of the
Polish Wikipedia has been used. To evaluate query
generation an article name has been assigned to
those questions (1057), for which a single article
in Wikipedia containing an answer exists.
Outputs of type classifiers have been gathered
99
Classifier Classified Precision Overall
pattern matching 36.15% 95.37% 34.48%
WordNet-aided 98.33% 84.35% 82.94%
decision tree 100% 67.02% 67.02%
random forest 100% 72.91% 72.91%
Table 2: Accuracy of the four question type classi-
fiers: numbers of questions classified, percentages
of correct answers and products of these two.
and compared to the expected ones. The machine
learning classifiers have been evaluated using 100-
fold cross-validation1.
Four of the presented improvements of query
generation tested here include: basic OR query,
AND query with fallback to OR, focus segments
removal and expansion with synonyms. For each
of those, three types of segment matching strate-
gies have been applied: exact, stemming-based
and fuzzy. The recorded results include recall
(percentage of result lists including the desired ar-
ticle among the first 100) and average position of
the article in the list.
5 Results
The result of evaluation of classifiers is presented
in Table 2. The pattern matching stage behaves
as expected: accepts only a small part of ques-
tions, but yields a high precision. The WordNet-
aided focus analysis is able to handle almost all
questions with an acceptable precision. Unfortu-
nately, the accuracy of ML classifiers is not sat-
isfactory, which could be easily explained using
Table 1: there are many categories represented by
very few cases. An expansion of training set or
dropping the least frequent categories (depending
on a particular application) is necessary for better
classification.
Results of considered query generation tech-
niques are shown in Table 3. It turns out that the
basic technique generally yields the best result.
Starting with an AND query and using OR only
in case of a failure leads to an improvement of the
expected article ranking position but the recall ra-
tio drops significantly, which means that quite of-
ten the results of a restrictive query do not include
the relevant article. The removal of the question
focus from the list of keywords also has a nega-
tive impact on performance. The most surprising
1I.e. the whole test set has been divided into 100 nearly
equal subsets and each of them has been classified using the
classifier trained on the remaining 99 subsets.
XXXXXXXXQuery
Match Exact Stemming Fuzzy
basic 69.97% 80.08% 82.19%
OR query 14.32 12.90 12.36
priority for 57.94% 57.07% 34.84%
AND query 11.36 8.80 7.07
with focus 62.75% 71.99% 73.34%
segments removed 14.65 14.00 12.84
with synonyms 47.06% 65.64% 58.71%
21.42 15.47 16.00
Table 3: Results of the four considered query gen-
eration techniques, each with the three types of
matching strategy. For each combination a recall
(measured by the presence of a given source docu-
ment in the first 100 returned) and an average po-
sition on the ranked list is given.
results are those of expanding a query with syn-
onyms - the number of matching articles grows
abruptly and Lucene ranking mechanism does not
lead to satisfying selection of the best 100. One
needs to remember that only one article has been
selected for each test question, whereas probably
there are many relevant Wikipedia entries in most
cases. Unfortunately, finding all of them manually
would require a massive amount of time.
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.865
67
69
71
73
75
77
79
81
83
85
Relative Absolute Fixed prefix
Query fuzziness
Rec
all(
%)
Figure 2: Impact of the fuzziness of queries on
the recall using three types of fuzzy queries. To
show the relative and absolute fuzziness on one
plot, a word-length of 10 letters is assumed. See a
description in text.
We can also notice a questionable impact of the
stemming. As expected, taking into account in-
flection is necessary (cf. results of exact match-
ing), but fuzzy queries provide more accurate re-
100
sults, although they use no linguistic knowledge.
As the fuzzy queries yield the best results, an
additional experiment becomes necessary to find
an optimal fuzziness, i.e. a maximal Levenshtein
distance between the matched words. This param-
eter needs tuning for particular language of im-
plementation (in this case Polish) as it reflects a
mutability of its words, caused by inflection and
derivation. Three strategies for specifying the dis-
tance have been used: relative (with distance be-
ing a fraction of a keyword?s length), absolute (the
same distance for all keywords) and with prefix
(same as absolute, but with changes limited to the
end of a keyword; with fixed prefix). In Figure
2 the results are shown - it seems that allowing 3
changes at the end of the keyword is enough. This
option reflects the Polish inflection schemes and is
also very fast thanks to the fixedness of the prefix.
6 Conclusion
In this paper a set of techniques used to build a
question model has been presented. They have
been implemented as a question analysis module
for the Polish question answering task. Several ex-
periments using Polish questions and knowledge
base have been performed to evaluate their per-
formance in the environment of the Slavonic lan-
guage. They have led to the following conclu-
sions: firstly, the best technique to find a correct
question type is to combine pattern matching with
the WordNet-aided focus analysis. Secondly, it
does not suffice to process the first 100 article, re-
turned by the search engine using the default rank-
ing procedure, as they may not contain desired
information. Thirdly, the stemmer of Polish pro-
vided by the Lucene is not reliable enough - prob-
ably it would be best to include a full morpholog-
ical analysis and tagging process in the document
indexing process.
This study is part of an effort to build an open-
domain corpus-based question answering system
for Polish. The obvious next step is to create a sen-
tence similarity measure to select the best answer
in the source document. There exist a variety of
techniques for that purpose, but their performance
in case of Polish needs to be carefully examined.
Acknowledgements
Critical reading of the manuscript by Agnieszka
Mykowiecka is gratefully acknowledged. Study
was supported by research fellowship within "In-
formation technologies: research and their in-
terdisciplinary applications" agreement number
POKL.04.01.01-00-051/10-00.
References
Szymon Acedan?ski. 2010. A morphosyntactic Brill
Tagger for inflectional languages. In Proceedings
of the 7th international conference on Advances in
Natural Language Processing (IceTAL?10 ), pages
3?14.
Eric Brill, Susan Dumais, and Michele Banko. 2002.
An analysis of the AskMSR question-answering sys-
tem. In Proceedings of the ACL-02 conference on
Empirical methods in natural language processing
- EMNLP ?02, volume 10, pages 257?264, Morris-
town, NJ, USA, July. Association for Computational
Linguistics.
Hoa Trang Dang, Diane Kelly, and Jimmy Lin. 2007.
Overview of the TREC 2007 Question Answering
track. In Proceedings of The Sixteenth Text RE-
trieval Conference, TREC 2007.
Christiane Fellbaum. 1998. WordNet: An Electronic
Lexical Database. The MIT Press.
Leo Galambos. 2001. Lemmatizer for Document
Information Retrieval Systems in JAVA. In Pro-
ceedings of the 28th Conference on Current Trends
in Theory and Practice of Informatics (SOFSEM
2001), pages 243?252.
Sanda Harabagiu, Dan Moldovan, Marius Pasca, Rada
Mihalcea, Mihai Surdeanu, Razvan Bunescu, Rox-
ana G?rju, Vasile Rus, and Paul Morarescu. 2001.
The role of lexico-semantic feedback in open-
domain textual question-answering. In Proceedings
of the 39th Annual Meeting on Association for Com-
putational Linguistics - ACL ?01, pages 282?289.
Eduard Hovy, Laurie Gerber, Ulf Hermjakob, Michael
Junk, and Chin-Yew Lin. 2000. Question Answer-
ing in Webclopedia. In Proceedings of The Ninth
Text REtrieval Conference (TREC 2000).
Marek Karzewski. 1997. Jeden z dziesie?ciu - pytania i
odpowiedzi. Muza SA.
Boris Katz, Jimmy Lin, Daniel Loreto, Wesley Hilde-
brandt, Matthew Bilotti, Sue Felshin, Aaron Fernan-
des, Gregory Marton, and Federico Mora. 2003.
Integrating Web-based and corpus-based techniques
for question answering. In Proceedings of the
Twelfth Text REtrieval Conference (TREC 2003).
Changki Lee, Ji-Hyun Wang, Hyeon-Jin Kim, and
Myung-Gil Jang. 2005. Extracting Template for
Knowledge-based Question-Answering Using Con-
ditional Random Fields. In Proceedings of the
28th Annual International ACM SIGIR Workshop on
MFIR, pages 428?434.
101
Xin Li and Dan Roth. 2002. Learning Question Classi-
fiers. In Proceedings of the 19th International Con-
ference on Computational Linguistics (COLING-
2002), volume 1 of COLING ?02.
Marek Maziarz, Maciej Piasecki, and Stanis?aw Sz-
pakowicz. 2012. Approaching plWordNet 2.0. In
Proceedings of the 6th Global Wordnet Conference.
Dan Moldovan, Sanda Harabagiu, Marius Pas?ca, Rada
Mihalcea, Roxana G?rju, Richard Goodrum, and
Vasile Rus. 2000. The structure and performance
of an open-domain question answering system. In
Proceedings of the 38th Annual Meeting on Associa-
tion for Computational Linguistics - ACL ?00, pages
563?570, Morristown, NJ, USA, October. Associa-
tion for Computational Linguistics.
Anselmo Pe?as, Eduard H. Hovy, Pamela Forner, ?l-
varo Rodrigo, Richard F. E. Sutcliffe, Caroline
Sporleder, Corina Forascu, Yassine Benajiba, and
Petya Osenova. 2012. QA4MRE: Question An-
swering for Machine Reading Evaluation at CLEF
2012. In CLEF 2012 Evaluation Labs and Work-
shop Online Working Notes.
Adam Przepi?rkowski. 2007. Slavonic information
extraction and partial parsing. In Proceedings of the
Workshop on Balto-Slavonic Natural Language Pro-
cessing Information Extraction and Enabling Tech-
nologies - ACL ?07.
Adam Przepi?rkowski. 2008. Powierzchniowe
przetwarzanie je?zyka polskiego. Akademicka Ofi-
cyna Wydawnicza EXIT, Warszawa.
Piotr Przyby?a. 2013. Question classification for Pol-
ish question answering. In Proceedings of the 20th
International Conference of Language Processing
and Intelligent Information Systems (LP&IIS 2013).
Ines C?eh and Milan Ojster?ek. 2009. Developing a
question answering system for the slovene language.
WSEAS Transactions on Information Science and
Applications, 6(9):1533?1543.
Marcin Wolin?ski. 2006. Morfeusz ? a Practical
Tool for the Morphological Analysis of Polish. In
Mieczys?aw K?opotek, S?awomir Wierzchon?, and
Krzysztof Trojanowski, editors, Intelligent Informa-
tion Processing and Web Mining, pages 511?520.
102
