Generat ing a Controlled Language 
Laurence Danlos Guy Lapalme 
Universitd Paris 7 Ddpartement  d' informatique t RO 
TALANA UFR Linguist ique Universitd de Montrdal 
Case 7003-2, Place Jussieu C.P. 6128, Succ Centre-Vil le 
75251 Paris;' France- " Montreal ;  QuEbec, CCana~dai::~3C 337 
danlos?linguist, jussieu, fr lapalme@iro, umontreal, ca 
Veron ika  Lux  * 
Xerox Research Centre Europe 
6, chemin de Maupertu is  
38240 Meylan, France 
Veron ika .  Lux@xrce. xerox ,  com 
Abst rac t  
This paper argues for looking at Controlled Lan- 
guages (CL) from a Natural Language Genera- 
tion (NLG) perspective. We show that CLs are 
used in a normative nvironment in which dif- 
ferent textual modules can be identified, each 
having its own set of rules constraining the text. 
These rules can be used as a basis for natural 
language generation. These ideas were tested in 
a proof of concept generator for the domain of 
aircraft maintenance manuals. 
1 What  is a Cont ro l led  Language? 
Controlled Languages (CLs) result from a grow- 
ing concern about technical documentation 
quality and translation, be it human or auto- 
matic. A CL consists of a glossary and of writ- 
ing rules for the linguistic aspect of the doc- 
umentation. These rules are given as recom- 
mendations or prohibitions for both the lexicon 
and the grammar. Currently, most CLs are 
varieties of "controlled English" which derive 
froth the Caterpillar Tractor Company Funda- 
veloped for CL users, the best known being con- 
formity checkers/controllers such as AlethCL or 
SECC (CLA, 1996). 
A writer expects that the checking tool should 
not only detect errors but also propose a CL 
conformable xpression. A. Nasr (Nasr, 1996), 
who worked on the problem of CL refornmla- 
tion, underlines the difficulties of this task. Re- 
formulation cannot make any hypotheses about 
the conformity of the input sentences, and 
therefore must deal with a wider variety of 
lexico-syntactical constructions than those al- 
lowed in a CL. Some instances of noncompliance 
are relatively easy to detect but much more dif- 
ficult to correct: for example, sentences that are 
longer than the prescribed number of words. 
So there is little hope that human writers will 
ever produce documentation complying strictly 
with a CL even with the help of a conformity 
checker. We argue that it may be more promis- 
ing to use NLG technology for generating doc- 
.umentation in. CL instead of analyzing it af- 
terwards, as it is the case with a conformity 
checker. Few researchers have looked at CLs 
mental English tha t vi~..elab0rated.in the S~: ...... from-:a~-~generation p int  of view.. (Nasr, 1996; 
ties (Scheursand Adriaens, 1992). However CLs Hartley and Paris, 1996); but we think that 
are presently being defined for German, Swedish 
and French. 
Technical writers find it difficult to comply 
with the writing rules of a CL which are often 
hard to justify (CLA. 1996). For them, a CL is 
seen as an additional constraint on an already 
complex task. This is why tools have been de- 
" Work done while at the Adrospatiale Research Center 
there are very compelling reasons for taking a 
generation perspective, in addition to the ad- 
vantages of NLG for CLs that will be presented 
in section 3: 
* As CLs can be viewed as linguistic specifi- 
cations for human beings, it seems natural 
"to, .consider them 'a:s specifica'tkms for the 
linguistic component of an NLG system. 
141 
e CL writing specifications come on top of 
other writing norms which deal with docu- 
ment structuring. For example, in the aero- 
nautical industry, CLs such Simplified En- 
glish (SE) (AEC, 1995) and Fran~ais Ra- 
tionalisd (FR) (GIFAS, 1996) extend the 
ATA 100 norms (Bur, 1995) which describe 
the divisionof the document into chapl:ers, 
sections, subsections, etc. reflecting a tree- 
structured functional organization of the 
airplane: a chapter corresponds to a sys- 
tem (e.g. main rotor), a section to a sub- 
system (e.g. gear box), a subsection to a 
sub-sub-system (e.g. set of gears), and so 
on. Over this thematic structure is added a 
communicative structure to fulfill two main 
goals: describe all systems of the airplane 
and prescribe all maintenance instructions 
for the airplane. The norms of the ATA 
can be viewed as specifications for the text 
structuring component of an NLG system. 
? The thematic and communicative structur- 
ing of the document must also conform 
to a systematic non-linear page number- 
ing system and strict formatting rules us- 
ing SGML tags. These constraints can be 
viewed as specifications for the layout com- 
ponent of an NLG system. 
So we claim that CLs should not be con- 
sidered outside the context of the production 
of complex structured ocuments, which natu- 
rally raises the question of the automatic gen- 
eration of this documentation given some for- 
real representation. This claim led V. Lux (Lux, 
1998) to redefine the notion of a CL. Her study 
has shown that only a few syntactic constraints 
(e.g. coordination constraints) are applicable to 
the whole document. Most constraints are only 
valid for sub-parts of the document, identified 
as "textual modules". Each textual module has 
a particular communicative goal  and a precise 
theme according to the ATA 100 norms. It can 
be divided into smaller modules: for example, 
the Task module is divided into simpler Sub- 
Task modules which are themselves composed 
of simpler Instructions modules. From a lin- 
guistic point of view, a textual module uses only 
a controlled sublanguage. V. Lux thus extended 
FR to a new CL .called.:RREM (.Fr.aa~gais Ra- 
tionalise'. Etendu Modulaire) comprising many 
CLs, each having its own syntactic rules for 
a specific textual module. She also performed 
a corpus study showing that the same textual 
modules could be identified for both French and 
English. It should thus be possible to remodu- 
larize SE similarly to what has been done to 
FR with FREM. In this paper, we therefore 
in t roduce  the: not ion of aii Extei ided Modular 
Controlled Language (EMCL) which first de- 
fines some general rules and then some more 
specific ones for each textual module. We now 
look at the problem of automatical ly generat- 
ing technical documentation complying both to 
structuration orms such as ATA 100 and to the 
rules of an EMCL. 
2 How to  generate  techn ica l  
documentat ion?  
We assume that a generation system can be di- 
vided into a What to say and How to say it 
components, even though this may be consid- 
ered as a gross simplification. 
2.1 What  to say component  
The main difficulty for NLG in a real environ- 
ment lies in knowledge modeling. For aircraft 
maintenance manuals, existing ontologies could 
probably be reused, but even then the model- 
ing efforts required are huge. Nevertheless, we 
assume that it is possible to design forms which 
are sequentially presented to the user to be 
filled, as in Drafter (Paris et al, 1995), through 
which the technical writer provides the infor- 
mation to convey in an appropriate fornlalism. 
These forms can be derived directly fi'om the 
tree-like structure of the document given in the 
ATA norms. The goal is that, once the writer 
has finished filling in these forms, the technical 
docunmntation is already properly structured in 
an abstract language instead of a natural one. 
In a general text generation setting, using forms 
to describe What is to be said might seem like 
a difficult task; but in the context of techni- 
cal writing, the informational content is almost 
already prescribed and forms are thus a sin> 
ple way of complying with the rules of a CL. 
Indeed in the now comlnon web enviromnents, 
forms are frequently used for eliciting informa- 
tion from users. This input can then be pro- 
cessed by the "tIow to say it and layout compo- 
nents. 
142 
The writers who find it very difficult to com- 
ply with the rules of a CL have no problem 
complying with the ATA 100 norms, thereby 
producing documents with the right thematic 
and communicative structuration. This can be 
seen as an illustration of observations made in - 
However, many writing rules in a CL place 
particular syntactic constraints on the use of, 
a given lexical item, e.g. in FR a rule forbids 
the use of emp~cher (prevent) when followed by 
an infinitive clause. To handle such numerous 
lexically dependent syntactic rules, a formal- 
psycholinguistics. 
describes a model of the speaker's activity in 
which choices in the What to say component 
are conscious, while choices in the How to say it 
component are automatic. This model helps un- 
derstand some of the difficulties that CL users 
face. A CL forces the writer to become con- 
scious of behavioral mechanisms that are usu- 
ally automatic; The writer is thus distracted 
from choices made earlier in her/his writing 
task. So s/he often ends up writing it in the  
way  it has  to be written but does not write ex- 
actly what  had to be written, thus defeating 
the whole purpose of a CL which was meant to 
produce a better expression of the information. 
This model also explains why a human writer 
has less difficulties following the ATA norms: 
this part of the job corresponds to conscious 
choices. In the NLG scenario, this is replaced 
by filling in some information in the forms that 
are presented. 
To sum up, the What to say component re- 
quires a modelization of the domain model and 
the design of a series of forms to be filled. A 
human writer using the NLG system has to fill 
forms but on the other hand, s/he does not have 
to learn a CL, since compliance with the CL 
norms is taken care by the How to say it com- 
ponent which we now describe. 
2.2 How to say it component  
In this section, it is assumed that if a CL is 
in fact an EMCL such as FREM, a specific How 
to say it component is designed for each textual 
module, but always retaining the same formal- 
ism. 
The lexicon used in the How to s~zyit corn- . . . .  
ponent should be exactly the one enforced by 
the CL. Similarly, the syntactic constructions 
and the discourse structures of this component 
should correspond to the set of allowed con- 
structions / structures in the CL. This can sim- 
plify some lexical, syntactic and even discourse 
choices to be made within the generation sys- 
tern and thus ensure that .the gener~ed text 
complies with the rules of the CL. 
Levelt (Levelt , 1989, p. 9): ism based on a lexicalized grammax:is needed. 
We chose Lexicalized Tree Adjoining Grammar 
(LTAG) for the following reasons: 
* A text generation formalism inspired from 
LTAG, called G-TAG, has been designed, 
implemented and used in several applica- 
tions (Danlos and Meunier, 1996; Meunier, 
1997; Danlos, 1998; Meunier and Danlos, 
1998; Danlos, 2000). G-TAG takes as in- 
put an event graph which can be provided 
by the user  by filling in some forms which 
ensure that all the necessary information 
for generation is provided. 
o G-TAG deals with textual phenomena such 
as sentence connectors by extending LTAG 
to handle discourse comprised of more than 
one sentence. One of the major innovations 
of FREM compared to FR (and of EMCL 
compared to CL) is to implement rules for 
connecting sentences (clauses). The way to 
connect sentences has largely been ignored 
in CLs, although this linguistic issue raises 
ambiguities which can lead to maintenance 
errors. For example, simple juxtaposition 
of sentences i allowed in FR but disallowed 
in FREM because it is highly dangerous. A 
technician reading Nettoyer X.  Verser Y 
sur X.  (Clean X. Pour Y on X.) could in- 
terpret this to mean either "Clean X with 
Y" or "Clean X with Z, and next pour 
Y on X". Only one of these operations is 
right, the other one may lead to a mainte- 
nance error. On the other hand, traditional 
syntactical ambiguities uch as a preposi- 
.... tional attaehment...will-.not, usually lead to 
maintenance rrors because the technician 
can usually solve them on the basis of some 
domain knowledge. 
o The lexicalized grammar in G-TAG is com- 
piled from the recta-grammar designed and 
implemented by M.H. Candito (Candito. 
1996). This makes it easy to follow the 
evolution ofru les  of an (EM)CL. For ex- 
ample, if the rule to write an Instruction 
143 
changes from "Put a verb in the infini- 
tive" to "Insert an imperative", then this 
must be changed everywhere in the lexi- 
calized grammar. Using the metagrammar 
we can achieve this quite easily because of 
the hierarchical organization of a LTAG: 
with only one rule, an imperative can be 
allowed and an-infinitive ~disallowed ( in a 
main clause) for every verb, whatever its 
argument structure and syntactic onstruc- 
tion. 
G-TAG thus seems a good candidate for pro- 
ducing technical documentation complying with 
the constraints of an (EM)CL. A technical doc- 
umentation generator prototype in the aeronau- 
tical domain is described in Section 4. It is writ- 
ten in Flaubert, an implementation f G-TAG 
(Danlos and Meunier, 1996). The How to say 
it component would have to be completed by 
adding a layout component complying with the 
norms of ATA 100. We should also provide re- 
vision tools to allow the writer to fine tune the 
final text. 
So, automatically generating technical docu- 
mentation seems technically possible provided 
the technical writer is willing to fill forms which 
in principle should be less demanding than 
learning the rules of an (EM)CL. This approach 
also has other advantages, described in the next 
section. 
3 Advantages  o f  automat ic  
generat ion  o f  techn ica l  
documentat ion  
3.1 Mult i l ingual i ty  
One of tile major assets of NLG is its capacity 
to simultaneously generate texts in several lan- 
guages, and to regenerate updates as often as 
necessary, using a single input representation, 
thus ensuring coherence among the generated 
texts. 
Until now, CLs-have .dealt-withr muttitingual- 
ity by means of the translation hypothesis. It 
is for this reason that FR was developed by 
adapting SE, in order to ease the translation 
from French to English. FR authors try to en- 
sure that everything that can also be written 
in FR can be translated into SE. From this 
point of view, the definition of a source CLt, 
depends on the. defini.tion:.of, a tin:get CL2. De- 
velopers of CL1 are more likely to select struc- 
tures which can be easily or even literally trans- 
lated into CL2. What then happens if CLt and 
CL2 are structurally different? This can lead 
to a situation where CL1 imposes a cumber- 
some writing style that contravene conventions 
shared by native speakers of Li, thereby con- 
tradicting CLs' aim of enhancing understand- 
ability. Rules 0f-aii (EM)CL should be elabo- 
rated without such multilingual considerations. 
Their definition should principally pay atten- 
tion to the characteristics of one language, try- 
ing to avoid typical ambiguities. Such criteria 
are difficult enough to deal within a single lan- 
guage without taking translation problems into 
account. 
Now if we consider multilingual generation i
(EM)CLs, we find that there are major benefits 
from the multilingualism odeling proposed by 
NLG. In particular, defining a common repre- 
sentation is possible since the structure of the 
documentation is language independent. Recall 
from section 1 that the thematic structure of the 
documentation in the aeronautical domain must 
reflect the functional decomposition of the air- 
plane and that the same textual modules can be 
identified in many languages. Thus nothing has 
to be changed in the What to say component 
(Section 2.1) going from one language to the 
other. Only the How to say it component (Sec- 
tion 2.2) need be adapted to the target (EM)CL 
which should be monolingually defined. 
3.2 NLCI as an aid for test ing and 
developing a CL 
An NLG system can provide concrete assistance 
for the testing and for tile development of a CL. 
An NLG system that integrates the CL con- 
straints can help discover contradictions in the 
CL definition. As an illustration, a major dif- 
ficulty in CL definition concerns the coherence 
between the lexicon and the writing rules, as il- 
lustrated by (Emorine, 1994) with the following 
example: 
o Emp~cher l'oxyg~ne de s'accumuler (Pre- 
vent the oxygen from accumulating) does 
not conform to a FR lexically depen- 
dent syntactic rule, according to which 
empdcher (prevent) should not be followed 
by an infinitive clause. 
....... ~ .~ Emp~cher I ~uccumulation ' d.'~ozyg~ne ? (Pre- 
vent oxygen accumulat ion) does not con- 
144 
agent object 
U0 O5 
Titled sub-task 
title :Sub-Task  
DISPOSER 
lst-inst 
I 
Precond-Inst 
lst-order pre-cond 
I I 
DISPOSER ENLEVER 
agent object agent object 
I I I I 
Uo 04 Uo Ingo 
2nd-inst 
I 
Simul-Inst 
lst-order 2nd-order 
I I 
EXTRAIRE DEPOSER 
agent object agent object 
I I I I 
U0 O2 u0 Oa 
3rd-inst 
I 
Inst 
I 
lst-order 
I 
DEPOSER 
agent object tool 
I I I 
u0 o5 To 
Figure 1: Event graph given as input to Flaubert. In the prototype, this information is entered in 
textual form. 
form to FR lexicon, according to which the 
verb s'accumuler (accumulate) should be 
used instead of the noun accumulation (ac- 
cumulation) 
Emp~cher que l'oxyg~ne ne s'accumule 
(Prevent that the oxygen accumulates) 
does not conform to the writing rule that 
forbids the use of the subjunctive mode. 
So we come to a dead end if we want to use the " 
verb empdcher (prevent). This problem can be 
detected automatically by the NLG system.and 
an appropriate fix be made in the grammar. 
NLG can be used for checking a CL, which 
is helpful even if the CL is intended for a hu- 
man writer because it may avoid the discovery 
of various cases of incoherence by the writer. If 
tile writers can justify their writing difficulties 
by pointing out inconsistencies in the CL defini- 
tion, they won't be motivated to use what they 
will tend to consider'as an~-abmird invention, by .... 
people who understand nothing about the .job. 
NLG can also help strengthen CLs' claim to 
lead to more homogeneous texts, which is equiv- 
alent to forbidding certain paraphrases. NLG 
precisely deals with paraphrase as, for some in- 
puts, a NLG system will produce several texts. 
In this way, NLG helps identify which para- 
phrases till remain possible in the CL. In prac- 
tice, when an NLG system proposes several 
texts for one input, it raises the question for 
the CL developer: Should a constraint be added 
to the CL definition in order to forbid some of 
these texts ? 
4 P roo f  o f  concept  generator  
The previous ections have argued for the inter- 
est of dealing with CL from all NLG perspec- 
tive which to our knowledge had never been ex- 
amined ill such details. To further pursue, V. 
Lux (Lux, 1998) has developed a proof of con- 
cept generator using Flaubert (Meunier, 1997; 
Meunier-and "Danlos., :1998)" ~o"gee ? ?howthese "
theoretical concerns could be applied in prac- 
145 
Sous-t~che 60-007 
3.1 DEpose du segment d'arr~t (5) 
- Apr~s avoir enlev~ le mastic PR, d~poser le segment d'arr~t (4). 
- Extraire le porte joint (2) et d~poser le joint (3). 
- D@oser le segment d'arr~t (5) g l'aide de l'outillage (Z). 
: ..-~ I~igure~2:~::-Text~gffaera~ed~:by.~-Elu~aber~t.,-from.the~:input of~Figure-1 . . . . . . . . . .  
tice. The generator can produce text for about 
ten subtasks in FREM. These tasks comprise 
from two to eleven instructions, illustrating ten 
different instruction types such as: simple in- 
struction with a goal, simple instruction with a 
condition, complex instruction with simultane- 
ous actions, etc. They involve the use of various 
syntactical constructions uch as infinitive or 
sentential subordinates, nominalisation, nega- 
tion, etc. 
Input to the prototype are event graphs such 
as the one given in Figure 1. The output is a 
well formed French text such as the one in Fig- 
ure 2 which was generated from Figure 1. In 
Lux's prototype, the event graphs were hand 
coded, but now Flaubert has been rewritten 
in CLEF (Meunier, 1999; Meunier and Reyes, 
1999), which has a better graphical input mech- 
anism that would have eased the input process. 
The output text is a sub-task including a ti- 
tle and instructions of different ypes (only the 
first three instructions are given in the Figures) 
to be performed by the same person (e.g. U0). 
FREM defines which connector to use for each 
instruction type (e.g. conjunction et for an in- 
struction with simultaneous actions). 
The generation of noun groups for the ob- 
jects (Oi), ingredients ( Ingi)  and tools (Ti) re- 
lies on a mapping table between these labels 
and their denominations; this was a temporary 
solution for problems outside the scope of the 
prototype. We should have relied on existing 
nomenclatures for tools'andi'ngredients; and on  
the fact that objects are systematically repre- 
sented in drawings associated with various sub- 
tasks e.g. O5, called segment d'arr~t, is labeled 
(5) on the drawing associated with the exam- 
ple above. In a graphical interface nvironment, 
authors would select these objects linked to a 
controlled terminology data base. 
This proof of,concept ,ge~erator .ser-~ed :, well ..... 
our purpose of testing our theoretical ideas but 
unfortunately it could not be evaluated in a re- 
alistic CL text production environment. Our 
sponsors were very interested in the results we 
have produced but changes in their organisation 
made it impossible to carry further investiga- 
tions. We intend to further pursue our research 
and use the new implementation of Flaubert to 
generate controlled language in an other area 
of application while keeping the concept of an 
extended modular CL. 
5 Conc lus ion  
This paper has argued that linguistic norms im- 
posed by CLs should not be considered in iso- 
lation. They are only a part of a set of more 
comprehensive norms on the document struc- 
ture and layout. This insight led us to define a 
notion of textual modules, each with its own 
linguistic norms, and to envisage the genera- 
tion of technical documentation using an ex- 
tended modular controlled language (EMCL). 
Norms for document structure such as ATA100, 
its linguistic characteristics and its layout re- 
quirements may be seen to respectively define 
the text structuring, the linguistic and the lay- 
out components of an NLG system. 
We have also shown that a generation point of 
view can help refine tile definition of an EMCL. 
The EMCL can be defined monolingually, mul- 
tilinguality being obtained through NLG. These 
ideas were tested within a proof of concept ext 
generator, in thedomain  of' aircraftmaintenance 
manuals. 
Acknowledgment  
We thank our former colleagues at Aerospa- 
tiale Research Center and Frdd~ric Meunier 
who implemented Flaubert. We also thank EI- 
-liottqkffacMowitch,-who suggestedmany improve- " " 
ments to the paper. 
146 
References 
AECMA Document PSC-85-16598, 1995. Sim- 
plified English Standard, a guide for the 
preparation of Aircraft Maintenance Doc- 
umentation in the International Aerospace 
Maintenance Language. 
? Bureau de Normatisation :de l~,A~ronaufique 
et de l'Espace (BNAE), Issy-les-Moulineaux, 
1995. Spdcification ATA no 100, traduc- 
tion frangaise. Specification for Manufactur- 
er's Technical Data - ATA Specification 10, 
October. 
M.-H. Candito. 1996. A principle-based hierar- 
chical representation f LTAGs. In Proceed- 
ings of the 16th International Conference on 
Computational Linguistics, pages 194-199, 
Copenhagen. 
CLAW. 1996. Proceedings of the First Interna- 
tional Workshop on Controlled Language Ap- 
plications (CLAW), Leuven. 
L. Danlos and F. Meunier. 1996. G-TAG, 
un formalisme pour la gEnEration de texte : 
presentation et applications industrielles. In 
Actes du colloque Informatique t Langue Na- 
turelle, Nantes. 
L. Danlos. 1998. G-TAG: un formalisme lex- 
icalis~ de gdn~ration de textes inspire de 
TAG. Traitement Automatique des Langues 
- T.A.L., 39(2):4-32. 
L. Danlos, 2000. Tag Grammars, chapter G- 
TAG: A Lexicalized Formalism for Text Gen- 
eration inspired by Tree Adjoining Grammar. 
CSLI. 
M. Emorine. 1994. Projet de recherche sur la 
mod61isation des entr6es verbales du fran~ais 
rationalis6. Technical report, Universit6 de 
Clermont II. 
GIFAS. 1996. Guide du r6dacteur - partie 2: 
Fran~ais rationalis6. Technical report, GI- 
FAS, Paris. 
A. Hartley and C. Paris, 1996. Le tezte 
procddural : langage, action et cognition, 
chapter Une analyse fonctionnelle de textes 
proc6duraux : apport de la g6n6ration au- 
tomatique ~ la d6finition des langues ratio- 
nalis6es, pages 211-222. Toulouse. 
W. Levelt. 1989. Speaking -.h'om intention 
to articulation. MIT Press. Cambridge Mas- 
sachuset ts. 
V. Lux. 1998. Elaboration d'unffangais ratio- 
nalisd dtendu pour un manuel de maintenance 
adronautique, test en gdndration automatique. 
Th~se de doctorat en linguistique, Universitd 
Paris 7. 
F. Meunier and L. Danlos. 1998. FLAUBERT: 
an user-friendly system for multilingual text 
generation. In Proceedings of the 9th Interna- 
tianal. Workshop. on Natural Language Gener- 
ation (INLG'98), pages 284-287, Niagara-on- 
the-Lake. 
F. Meunier and R. Reyes. 1999. Plate-forme de 
ddveloppement de gdn~rateurs multilingues. 
In Actes de la confdrence de Gdndration Au- 
tomatique de Texte CAT'99, pages 145-155, 
Grenoble, France. 
F. Meunier. 1997. Impldmentation de G-TAG, 
formalisme pour la gdndration inspirde des 
grammaires d'arbres adjoints. Th~se de doc- 
torat en informatique, Universitd Paris 7. 
F. Meunier. 1999. Mod~lisation des ressources 
linguistiques d'une application industrielle. 
In TALN'99, pages 243-252, Carg~se, Corse, 
12-17 juillet. 
A. Nasr. 1996. Un module de reformulation au- 
tomatique fondd sur la thdorie Sens-Texte - 
application aux Langues Controldes. Ph.D. 
thesis, Universit~ Paris 7. 
C. Paris, K. Vander Linden, M. Fischer, 
A. Hartley, L. Pemberton, R. Power, and 
D. Scott. 1995. A support tool for writ- 
ing multilingaul instructions. In Proceedings 
of the 14th International Joint Conference 
on Artificial Intelligence (IJCAI'95), pages 
1398-1404, MontrEal. 
J. Scheurs and G. Adriaens, 1992. Comput- 
ers and writing - state of the art, chapter 
From cogram to alcogram : toward a con- 
trolled english grammar checker, pages 206- 
221. Kluwer Academic Publishers, London. 
147 
