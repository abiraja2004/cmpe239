Proceedings of the 6th Workshop on Statistical Machine Translation, pages 523?532,
Edinburgh, Scotland, UK, July 30?31, 2011. c?2011 Association for Computational Linguistics
Extraction Programs: A Unified Approach to Translation Rule Extraction
Mark Hopkins and Greg Langmead and Tai Vo
SDL Language Technologies Division
6060 Center Drive, Suite 150
Los Angeles, CA 90045
{mhopkins,glangmead,tvo}@sdl.com
Abstract
We provide a general algorithmic schema
for translation rule extraction and show that
several popular extraction methods (includ-
ing phrase pair extraction, hierarchical phrase
pair extraction, and GHKM extraction) can be
viewed as specific instances of this schema.
This work is primarily intended as a survey of
the dominant extraction paradigms, in which
we make explicit the close relationship be-
tween these approaches, and establish a lan-
guage for future hybridizations. This facili-
tates a generic and extensible implementation
of alignment-based extraction methods.
1 Introduction
The tradition of extracting translation rules from
aligned sentence pairs dates back more than a
decade. A prominent early example is phrase-based
extraction (Och et al, 1999).
Around the middle of the last decade, two ex-
traction paradigms were proposed for syntax-based
machine translation: the Hiero paradigm of (Chi-
ang, 2005) and the GHKM paradigm of (Galley et
al., 2004). From these papers followed two largely
independent lines of research, respectively dubbed
formally syntax-based machine translation (Chiang,
2007; Zollmann and Venugopal, 2006; Venugopal et
al., 2007; Lopez, 2007; Marton and Resnik, 2008;
Li et al, 2009; de Gispert et al, 2010) and linguis-
tically syntax-based machine translation (Galley et
al., 2006; Marcu et al, 2006; Liu et al, 2006; Huang
et al, 2006; Liu et al, 2007; Mi and Huang, 2008;
Zhang et al, 2008; Liu et al, 2009).
In this paper, we unify these strands of research
by showing how to express Hiero extraction, GHKM
extraction, and phrase-based extraction as instances
of a single master extraction method. Specifically,
we express each technique as a simple ?program?
given to a generic ?evaluator?. Table 1 summarizes
how to express several popular extraction methods
as ?extraction programs.?
Besides providing a unifying survey of popular
alignment-based extraction methods, this work has
the practical benefit of facilitating the implementa-
tion of these methods. By specifying the appropri-
ate input program, the generic evaluator (coded, say,
as a Python module) can be used to execute any of
the extraction techniques in Table 1. New extraction
techniques and hybridizations of existing techniques
can be supported with minimal additional program-
ming.
2 Building Blocks
The family of extraction algorithms under consider-
ation share a common setup: they extract translation
rules from a sentence pair and an alignment. In this
section, we define these concepts.
2.1 Patterns and Sentences
Assume we have a global vocabulary of atomic sym-
bols, containing the reserved substitution symbol?.
Define a pattern as a sequence of symbols. Define
the rank of a pattern as the count of its ? symbols.
Let ?k , ?
k
? ?? ?
?,?, ...,??.
We will typically use space-delimited quotations
to represent example patterns, e.g. ?ne? pas? rather
than ?ne,?, pas?. We will use the dot operator to
represent the concatenation of patterns, e.g. ?il ne? ?
?va pas? = ?il ne va pas?.
523
Extraction Program
Method Primary Secondary Labeling
Protocol Protocol Protocol
PBMT (Och et al, 1999) RANKPP0 TRIVSPA TRIVLP
Hiero (Chiang, 2005) RANKPP? TRIVSPA TRIVLP
GHKM (Galley et al, 2004) MAPPPt TRIVSPA PMAPLPt
SAMT (Zollmann and Venugopal, 2006) RANKPP? TRIVSPA PMAPLPt?
Forest GHKM (Mi and Huang, 2008) MAPPPT TRIVSPA PMAPLPT
Tree-to-Tree GHKM (Liu et al, 2009) MAPPPt MAPSP?,A IMAPLP{t},{?}
Forest-to-Forest GHKM (Liu et al, 2009) MAPPPT MAPSPT ,A IMAPLPT,T
Fuzzy Dual Syntax (Chiang, 2010) MAPPPt? MAPSP?? ,A IMAPLP{t?},{??}
Table 1: Various rule extraction methods, expressed as extraction programs. Boldfaced methods are proven in this
paper; the rest are left as conjecture. Parameters: t, ? are spanmaps (see Section 3); t?, ?? are fuzzy spanmaps (see
Section 7); T, T are sets of spanmaps (typically encoded as forests); A is an alignment (see Section 2).
We refer to a contiguous portion of a pattern with
a span, defined as either the null span ? , or a pair
[b, c] of positive integers such that b ? c. We will
treat span [b, c] as the implicit encoding of the set
{b, b+ 1, ..., c}, and employ set-theoretic operations
on spans, e.g. [3, 8] ? [6, 11] = [6, 8]. Note that the
null span encodes the empty set.
If a set I of positive integers is non-empty, then it
has a unique minimal enclosing span, defined by the
operator span(I) = [min(I),max(I)]. For instance,
span({1, 3, 4}) = [1, 4]. Define span({}) = ?.
Finally, define a sentence as a pattern of rank 0.
2.2 Alignments
An alignment is a triple ?m,n,A?, where m and n
are positive integers, andA is a set of ordered integer
pairs (i, j) such that 1 ? i ? m and 1 ? j ? n.
In Figure 1(a), we show a graphical depiction of
alignment ?4, 6, {(1, 1), (2, 3), (4, 3), (3, 5)}?. Ob-
serve that alignments have a primary side (top) and
a secondary side (bottom)1. For alignment A =
?m,n,A?, define |A|p = m and |A|s = n. A pri-
mary index (resp., secondary index) ofA is any pos-
itive integer less than or equal to |A|p (resp., |A|s).
A primary span (resp., secondary span) of A is any
span [b, c] such that 1 ? b ? c ? |A|p (resp., |A|s).
Define a
A
? ? to mean that (a, ?) ? A (in words,
we say that A aligns primary index a to secondary
1The terms primary and secondary allow us to be agnostic
about how the extracted rules are used in a translation system,
i.e. the primary side can refer to the source or target language.
[3,5]
[2,4][2,4] 1 2 3 4
2 3 4 51 6
1 2 3 4
2 3 4 51 6
1 2 3 4
2 3 4 51 6
(a)
(d)(c)
(b)
1 2 3 4
2 3 4 51 6
Figure 1: A demonstration of alignment terminology.
(a) An alignment is a relation between positive integer
sets. (b) The primary domain of the example alignment
is {1,2,3,4} and the secondary domain is {1,3,5}. (c)
The image of primary span [2,4] is {3,5}. (d) The mini-
mal projection of primary span [2,4] is [3,5]. Secondary
spans [2,5], [3,6], and [2,6] are also projections of pri-
mary span [2,4].
index ?), and define a 6
A
? ? to mean that (a, ?) 6? A.
Define an aligned sentence pair as a triple
?s, ?,A? where A is an alignment and s, ? are sen-
tences of length |A|p and |A|s, respectively.
Primary and Secondary Domain: The primary
domain of alignment A is the set of primary in-
dices that are aligned to some secondary index, i.e.
pdom(A) = {a|?? s.t. a A? ?}. Analogously,
define sdom(A) = {?|?a s.t. a A? ?}. For the
example alignment of Figure 1(b), pdom(A) =
524
{1, 2, 3, 4} and sdom(A) = {1, 3, 5}.
Image: The image of a set I of primary indices
(denoted pimageA(I)) is the set of secondary in-
dices to which the primary indices of I align. In
Figure 1(c), for instance, the image of primary span
[2, 4] is the set {3, 5}. Formally, for a set I of pri-
mary indices of alignment A, define:
pimageA(I) = {?|?a ? I s.t. (a, ?) ? A}
Projection: The minimal projection of a set I of
primary indices (denoted pmprojA(I)) is the min-
imal enclosing span of the image of I . In other
words, pmprojA(I) = span(pimageA(I)). In Fig-
ure 1(d), for instance, the minimal projection of pri-
mary span [2, 4] is the secondary span [3, 5].
Consider Figure 1(d). We will also allow a more
relaxed type of projection, in which we allow the
broadening of the minimal projection to include un-
aligned secondary indices. In the example, sec-
ondary spans [2, 5], [3, 6], and [2, 6] (in addition
to the minimal projection [3, 5]) are all considered
projections of primary span [2, 4]. Formally, de-
fine pprojA([b, c]) as the set of superspans [?, ?]
of pmprojA([b, c]) such that [?, ?] ? sdom(A) ?
pmprojA([b, c]).
2.3 Rules
We define an unlabeled rule as a tuple ?k, s?, ??, pi?
where k is a nonnegative integer, s? and ??
are patterns of rank k, and pi is a permuta-
tion of the sequence ?1, 2, ..., k?. Such rules
can be rewritten using a more standard Syn-
chronous Context-Free Grammar (SCFG) format,
e.g. ?3, ?le? ? de??, ?? ?s ? ??, ?3, 2, 1?? can
be written: ? ? ?le?1 ?2 de ?3,?3 ?s?2 ?1?.
A labeled rule is a pair ?r, l?, where r is an un-
labeled rule, and l is a ?label?. The unlabeled rule
defines the essential structure of a rule. The label
gives us auxiliary information we can use as decod-
ing constraints or rule features. This deliberate mod-
ularization lets us unify sequence-based and tree-
based extraction methods.
Labels can take many forms. Two examples (de-
picted in Figure 2) are:
1. An SCFG label is a (k+ 1)-length sequence of
symbols.
DT NN JJ
NPB
NP
< NP, NN, JJ, NNP > 
IN NNP
PP
* *
NNP POS JJ
NP
*
NN
NP ? < le NN1 JJ2 de NNP3 ,NNP3 ?s JJ2 NN1 >
DT NN JJ
NPB
NP
IN NNP
PP
le de
NNP POS JJ
NP
?s
NN
label labeled rule
Figure 2: An example SCFG label (top) and
STSG label (bottom) for unlabeled rule ? ?
?le ?1 ?2 de ?3,?3 ?s ?2 ?1?.
2. An STSG label (from Synchronous Tree Sub-
stitution Grammar (Eisner, 2003)) is a pair of
trees.
STSG labels subsume SCFG labels. Thus STSG
extraction techniques can be used as SCFG extrac-
tion techniques by ignoring the extra hierarchical
structure of the STSG label. Due to space con-
straints, we will restrict our focus to SCFG labels.
When considering techniques originally formulated
to extract STSG rules (GHKM, for instance), we
will consider their SCFG equivalents.
3 A General Rule Extraction Schema
In this section, we develop a general algorithmic
schema for extracting rules from aligned sentence
pairs. We will do so by generalizing the GHKM al-
gorithm (Galley et al, 2004). The process goes as
follows:
? Repeatedly:
? Choose a ?construction request,? which
consists of a ?primary subrequest? (see
Figure 3a) and a ?secondary subrequest?
(see Figure 3b).
? Construct the unlabeled rule correspond-
ing to this request (see Figure 3, bottom).
? Label the rule (see Figure 2).
525
[1,4] [4,4][1,1]
ne va pasil
he does not go
INDEX
SORT
1 4 2 3
? ? does not
[1,4 ]
[3,3][1,1]
[1,4] [4,4][1,1]
ne va pasil
he does not go
? does not ?
INDEX
SORT
1 3 2 4
? ? ne pas
? ne ? p a s
INDEX
SORT
1 3
1 2 1  2
primar y
pa ttern
secondary
pa ttern
permutat io n
(a ) (b )
Figure 3: Extraction of the unlabeled rule ? ? ??1 does not?2,?1 ne?2 pas?. (a) Choose primary subre-
quest [1, 4]  [1, 1][4, 4]. (b) Choose secondary subrequest [1, 4]  [1, 1][3, 3]. (bottom) Construct the rule
? ? ??1 does not ?2,?1 ne?2 pas?.
3.1 Choose a Construction Request
The first step in the extraction process is to choose a
?construction request,? which directs the algorithm
about which unlabeled rule(s) we wish to construct.
A ?construction request? consists of two ?subre-
quests.?
Subrequests: A subrequest is a
nonempty sequence of non-null spans
?[b0, c0], [b1, c1], ..., [bk, ck]? such that, for all
1 ? i < j ? k, [bi, ci] and [bj , cj ] are disjoint
proper2 subsets of [b0, c0]. If it also true that
ci < bj , for all 1 ? i < j ? k, then the subrequest
is called monotonic. We refer to k as the rank of the
subrequest.
We typically write subrequest
?[b0, c0], [b1, c1], ..., [bk, ck]? using the notation:
2If unary rules are desired, i.e. rules of the form ? ? ?,
then this condition can be relaxed.
[b0, c0] [b1, c1]...[bk, ck]
or as [b0, c0]  if k = 0.
For subrequest x = [b0, c0]  [b1, c1]...[bk, ck],
define:
covered(x) = ?ki=1[bi, ci]
uncovered(x) = [b0, c0]\covered(x)
Primary Subrequests: Given an alignment A,
define the set frontier(A) as the set of primary spans
[b, c] of alignment A such that pmprojA([b, c])) is
nonempty and disjoint from pimageA([1, b ? 1]) ?
pimageA([c+ 1, |A|p]).
3
3Our definition of the frontier property is an equivalent re-
expression of that given in (Galley et al, 2004). We reexpress
it in these terms in order to highlight the fact that the frontier
526
Algorithm CONSTRUCTRULEs,?,A(x, ?):
if construction request ?x, ?? matches alignment A then
{u1, ..., up} = uncovered([b0, c0] [b1, c1]...[bk, ck])
{?1, ..., ?q} = uncovered([?0, ?0] [?1, ?1]...[?k, ?k])
s? = INDEXSORT(?b1, b2, ..., bk, u1, u2, ..., up?, ?
k
? ?? ?
?,?, ...,?, su1 , su2 , ..., sup?)
?? = INDEXSORT(??1, ?2, ..., ?k, ?1, ?2, ..., ?q?, ?
k
? ?? ?
?,?, ...,?, ??1 , ??2 , ..., ??q?)
pi = INDEXSORT(??1, ?2, ..., ?k?, ?1, 2, ..., k?)
return {?k, s?, ??, pi?}
else
return {}
end if
Figure 4: Pseudocode for rule construction. Arguments: s = ?s1 s2 ... sm? and ? = ??1 ?2 ... ?n? are sentences,
A = ?m,n,A? is an alignment, x = [b0, c0] [b1, c1]...[bk, ck] and ? = [?0, ?0] [?1, ?1]...[?k, ?k] are subrequests.
Define preqs(A) as the set of monotonic subre-
quests whose spans are all in frontier(A). We refer
to members of preqs(A) as primary subrequests of
alignment A. Figure 3a shows a primary subrequest
of an example alignment.
Secondary Subrequests: Given a primary sub-
request x = [b0, c0]  [b1, c1]...[bk, ck] of align-
ment A, define sreqs(x,A) as the set of subrequests
[?0, ?0]  [?1, ?1]...[?k, ?k] such that [?i, ?i] ?
pprojA([bi, ci]), for all 0 ? i ? k. We refer to
members of sreqs(x,A) as secondary subrequests
of primary subrequest x and alignmentA. Figure 3b
shows a secondary subrequest of the primary subre-
quest selected in Figure 3a.
Construction Requests: A construction request
is a pair of subrequests of equivalent rank. Con-
struction request ?x, ?? matches alignment A if x ?
preqs(A) and ? ? sreqs(x,A).
3.2 Construct the Unlabeled Rule
The basis of rule construction is the INDEXSORT
operator, which takes as input a sequence of
integers I = ?i1, i2, ..., ik?, and an equivalent-
length sequence of arbitrary values ?v1, v2, ..., vk?,
and returns a sequence ?vj1 , vj2 , ..., vjk?, where
?j1, j2, ..., jk? is a permutation of sequence
I in ascending order. For instance, INDEX-
SORT(?4, 1, 50, 2?, ??a?, ?b?, ?c?, ?d??) =
property is a property of the alignment alone. It is independent
of the auxiliary information that GHKM uses, in particular the
tree.
Primary Protocol RANKPPk:
{[b0, c0] [b1, c1]...[bj , cj ]
s.t. 1 ? b0 ? c0 and 0 ? j ? k}
Primary Protocol MAPPPt:
{[b0, c0] [b1, c1]...[bk, ck]
s.t. ?0 ? i ? k [bi, ci] ? spans(t)}
Primary Protocol MAPPPT :
?
t?T
MAPPPt
Figure 5: Various primary protocols. Parameters: k is a
nonnegative integer; t is a spanmap; T is a set of span-
maps (typically encoded as a forest).
??b?, ?d?, ?a?, ?c??. Note that the output of
INDEXSORT(I, V ) is nondeterministic if sequence
I has repetitions. In Figure 4, we show the pseu-
docode for rule construction. We show an example
construction in Figure 3 (bottom).
3.3 Label the Rule
Rule construction produces unlabeled rules. To label
these rules, we use a labeling protocol, defined as a
function that takes a construction request as input,
and returns a set of labels.
Figure 7 defines a number of general-purpose la-
527
Secondary Protocol TRIVSPA(x):
return sreqs(x,A)
Secondary Protocol MAPSP?,A(x):
{[?0, ?0] [?1, ?1]...[?k, ?k] ? sreqs(x,A)
s.t. ?0 ? i ? k : [?i, ?i] ? spans(?)}
Figure 6: Various secondary protocols. Parameters: ?
is a spanmap; A is an alignment; x = [b0, c0]  
[b1, c1]...[bk, ck] is a subrequest.
beling protocols. Some of these are driven by trees.
We will represent a tree as a spanmap, defined as
a function that maps spans to symbol sequences.
For instance, if a parse tree has constituent NP over
span [4, 7], then the corresponding spanmap t has
t([4, 7]) = ?NP?. We map spans to sequences in or-
der to accommodate unary chains in the parse tree.
Nonconstituent spans are mapped to the empty se-
quence. For spanmap t, let spans(t) be the set of
spans [b, c] for which t([b, c]) is a nonempty se-
quence.
4 Extraction Programs
In the previous section, we developed a general
technique for extracting labeled rules from aligned
sentence pairs. Note that this was not an algorithm,
but rather an algorithmic schema, as it left two ques-
tions unanswered:
1. What construction requests do we make?
2. What labeling protocol do we use?
We answer these questions with an extraction pro-
gram, defined as a triple ?X ,?,L?, where:
? X is a set of subrequests, referred to as the pri-
mary protocol. It specifies the set of primary
subrequests that interest us. Figure 5 defines
some general-purpose primary protocols.
? ? maps every subrequest to a set of subre-
quests. We refer to ? as the secondary protocol.
It specifies the set of secondary subrequests that
interest us, given a particular primary subre-
quest. Figure 6 defines some general-purpose
secondary protocols.
Labeling Protocol TRIVLP(x, ?):
return ?k+1
Labeling Protocol PMAPLPt(x, ?):
{?l0, ..., lk? s.t. ?0 ? i ? k : li ? t([bi, ci])}
Labeling Protocol PMAPLPT (x, ?):
?
t?T
PMAPLPt(x, ?)
Labeling Protocol SMAPLP? (x, ?):
{??0, ..., ?k? s.t. ?0 ? i ? k : ?i ? ?([?i, ?i])}
Labeling Protocol SMAPLPT (x, ?):
?
??T
SMAPLP? (x, ?)
Labeling Protocol IMAPLPT,T (x, ?):
{?(l0, ?0), ..., (lk, ?k)?
s.t. ?l0, ..., lk? ? PMAPLPT (x, ?)
and ??0, ..., ?k? ? SMAPLPT (x, ?)}
Figure 7: Various labeling protocols. Parameters: t, ? are
spanmaps; T, T are sets of spanmaps; x = [b0, c0]  
[b1, c1]...[bk, ck] and ? = [?0, ?0]  [?1, ?1]...[?k, ?k]
are subrequests.
? L is a labeling protocol. Figure 7 defines some
general-purpose labeling protocols.
Figure 8 shows the pseudocode for an ?evaluator?
that takes an extraction program (and an aligned sen-
tence pair) as input and returns a set of labeled rules.
4.1 The GHKM Extraction Program
As previously stated, we developed our extraction
schema by generalizing the GHKM algorithm (Gal-
ley et al, 2004). To recover GHKM as an instance
of this schema, use the following program:
EXTRACTs,?,A(MAPPPt, TRIVSPA, PMAPLPt)
where t is a spanmap encoding a parse tree over the
primary sentence.
528
Algorithm EXTRACTs,?,A(X ,?,L):
R = {}
for all subrequests x ? X do
for all subrequests ? ? ?(x) do
U = CONSTRUCTRULEs,?,A(x, ?)
L = L(x, ?)
R = R ? (U ? L)
end for
end for
return R
Figure 8: Evaluator for extraction programs. Parameters:
?s, ?,A? is an aligned sentence pair; X is a primary pro-
tocol; ? is a secondary protocol; L is a labeling protocol.
5 The Phrase Pair Extraction Program
In this section, we express phrase pair extraction
(Och et al, 1999) as an extraction program.
For primary span [b, c] and secondary span [?, ?]
of alignment A, let [b, c]
A
? [?, ?] if the following
three conditions hold:
1. a
A
? ? for some a ? [b, c] and ? ? [?, ?]
2. a
A
6? ? for all a ? [b, c] and ? 6? [?, ?]
3. a
A
6? ? for all a 6? [b, c] and ? ? [?, ?]
Define the ruleset PBMT(s, ?,A) to be the set of la-
beled rules ?r,?1? such that:
? r = ?0, ?sb...sc?, ???...???, ??
? [b, c]
A
? [?, ?]
We want to express PBMT(s, ?,A) as an extrac-
tion program. First we establish a useful lemma and
corollary.
Lemma 1. [b, c] A? [?, ?] iff [b, c] ? frontier(A) and
[?, ?] ? pprojA([b, c]).
Proof. Let [b, c]c = [1, b? 1] ? [c+ 1, |A|p].
[b, c] ? frontier(A) and [?, ?] ? pprojA ([b, c])
(1)
??
{
pmprojA ([b, c]) ? pimageA ([b, c]
c) = {}
[?, ?] ? pprojA ([b, c])
(2)
??
{
[?, ?] ? pimageA ([b, c]
c) = {}
[?, ?] ? pprojA ([b, c])
(3)
??
{
[?, ?] ? pimageA ([b, c]
c) = {}
pimageA ([b, c]) ? [?, ?]
(4)
??
{
conditions 2 and 3 hold
[?, ?] 6= {}
(5)
?? conditions 1, 2 and 3 hold
Equivalence 1 holds by definition of frontier(A).
Equivalence 2 holds because [?, ?] differs from
pmprojA ([b, c]) only in unaligned indices. Equiv-
alence 3 holds because given the disjointness
from pimageA ([b, c]
c), [?, ?] differs from
pimageA ([b, c]) only in unaligned indices. Equiva-
lences 4 and 5 are a restatement of conditions 2 and
3 plus the observation that empty spans can satisfy
conditions 2 and 3.
Corollary 2. Consider monotonic subrequest x =
[b0, c0]  [b1, c1]...[bk, ck] and arbitary subrequest
? = [?0, ?0]  [?1, ?1]...[?k, ?k]. Construction
request ?x, ?? matches alignment A iff [bi, ci]
A
?
[?i, ?i] for all 0 ? i ? k.
We are now ready to express the rule set
PBMT(s, ?,A) as an extraction program.
Theorem 3. PBMT(s, ?,A) =
EXTRACTs,?,A(RANKPP0, TRIVSPA, TRIVLP)
Proof.
?r, l? ? EXTs,?,A(RANKPP0, TRIVSPA, TRIVLP)
(1)
??
?
?????
?????
x = [b, c]  and ? = [?, ?] 
?x, ?? matches alignment A
{r} = CONSTRUCTRULEs,?,A(x, ?)
l = ?1
(2)
??
?
?????
?????
x = [b, c]  and ? = [?, ?] 
?x, ?? matches alignment A
r = ?0, ?sb...sc?, ???...???, ??
l = ?1
(3)
??
?
???
???
[b, c]
A
? [?, ?]
r = ?0, ?sb...sc?, ???...???, ??
l = ?1
(4)
?? ?r, l? ? PBMT(s, ?,A)
529
Equivalence 1 holds by the definition of EXTRACT
and RANKPP0. Equivalence 2 holds by the pseu-
docode of CONSTRUCTRULE. Equivalence 3 holds
from Corollary 2. Equivalence 4 holds from the def-
inition of PBMT(s, ?,A).
6 The Hiero Extraction Program
In this section, we express the hierarchical phrase-
based extraction technique of (Chiang, 2007) as
an extraction program. Define HIERO0(s, ?,A) =
PBMT(s, ?,A). For positive integer k, define
HIEROk(s, ?,A) as the smallest superset of HI-
EROk?1(s, ?,A) satisfying the following condition:
? For any labeled rule ??k ? 1, s?, ??, pi?,?k? ?
HIEROk?1(s, ?,A) such that:
1. s? = s?1 ? ?sb...sc? ? s
?
2
2. ?? = ??1 ? ???...??? ? ?
?
2
3. pi = ?pi1, pi2, ..., pik?1?
4. s?2 has rank 0.
4
5. ??1 has rank j.
6. [b, c]
A
? [?, ?]
it holds that labeled rule ?r,?k+1? is a member
of HIEROk(s, ?,A), where r is:
?k, s?1 ? ??? ? s
?
2, ?
?
1 ? ??? ? ?
?
2,
?pi1, ..., pij , k, pij+1, ..., pik?1??
Theorem 4. HIEROk(s, ?,A) =
EXTRACTs,?,A(RANKPPk, TRIVSPA, TRIVLP)
Proof. By induction. Define ext(k) to mean
EXTRACTs,?,A(RANKPPk, TRIVSPA, TRIVLP).
From Theorem 3, HIERO0(s, ?,A) = ext(0).
Assume that HIEROk?1(s, ?,A) = ext(k ? 1) and
prove that HIEROk(s, ?,A)\HIEROk?1(s, ?,A) =
ext(k)\ext(k ? 1).
?r?, l?? ? ext(k)\ext(k ? 1)
(1)
??
?
???????
???????
x? = [b0, c0] [b1, c1]...[bk, ck]
?? = [?0, ?0] [?1, ?1]...[?k, ?k]
?x?, ??? matches alignment A
{r?} = CONSTRUCTRULEs,?,A(x
?, ??)
l? = ?k+1
4This condition is not in the original definition. It is a cos-
metic addition, to enforce the consecutive ordering of variable
indices on the rule LHS.
(2)
??
?
????????????????????????????
????????????????????????????
x = [b0, c0] [b1, c1]...[bk?1, ck?1]
? = [?0, ?0] [?1, ?1]...[?k?1, ?k?1]
{r} = CONSTRUCTRULEs,?,A(x, ?)
pi = ?pi1, ..., pik?1?
r =
?k ? 1,s?1 ? ?sbk ...sck? ? s
?
2,
??1 ? ???k ...??k? ? ?
?
2, pi?
s?2 has rank 0 and ?
?
1 has rank j
x? = [b0, c0] [b1, c1]...[bk, ck]
?? = [?0, ?0] [?1, ?1]...[?k, ?k]
?x?, ??? matches alignment A
pi? = ?pi1, ..., pij , k, pij+1, ..., pik?1?
r? = ?k, s?1 ? ??? ? s
?
2, ?
?
1 ? ??? ? ?
?
2, pi
??
l? = ?k+1
(3)
??
?
??????????????????
??????????????????
pi = ?pi1, ..., pik?1?
r =
?k ? 1,s?1 ? ?sbk ...sck? ? s
?
2,
??1 ? ???k ...??k? ? ?
?
2, pi?
s?2 has rank 0 and ?
?
1 has rank j
?r,?k? ? HIEROk?1(s, ?,A)
pi? = ?pi1, ..., pij , k, pij+1, ..., pik?1?
r? = ?k, s?1 ? ??? ? s
?
2, ?
?
1 ? ??? ? ?
?
2, pi
??
[bi, ci]
A
? [?i, ?i] for all 0 ? i ? k
l? = ?k+1
(4)
?? ?r?, l?? ? HIEROk(s, ?,A)\HIEROk?1(s, ?,A)
Equivalence 1 holds by the definition of
ext(k)\ext(k ? 1). Equivalence 2 holds by
the pseudocode of CONSTRUCTRULE. Equivalence
3 holds by the inductive hypothesis and Corol-
lary 2. Equivalence 4 holds by the definition of
HIEROk(s, ?,A)\HIEROk?1(s, ?,A).
7 Discussion
In this paper, we have created a framework that al-
lows us to express a desired rule extraction method
as a set of construction requests and a labeling pro-
tocol. This enables a modular, ?mix-and-match? ap-
proach to rule extraction. In Table 1, we summa-
rize the results of this paper, as well as our conjec-
tured extraction programs for several other methods.
For instance, Syntax-Augmented Machine Transla-
tion (SAMT) (Zollmann and Venugopal, 2006) is a
530
hybridization of Hiero and GHKM that uses the pri-
mary protocol of Hiero and the labeling protocol of
GHKM. To bridge the approaches, SAMT employs
a fuzzy version5 of the spanmap t that assigns a triv-
ial label to non-constituent primary spans:
t?([b, c]) =
{
t([b, c]) if [b, c] ? spans(t)
??? otherwise
Other approaches can be similarly expressed as
straightforward variants of the extraction programs
we have developed in this paper.
Although we have focused on idealized meth-
ods, this framework also allows a compact and pre-
cise characterization of practical restrictions of these
techniques. For instance, (Chiang, 2007) lists six
criteria that he uses in practice to restrict the gener-
ation of Hiero rules. His condition 4 (?Rules can
have at most two nonterminals.?) and condition 5
(?It is prohibited for nonterminals to be adjacent on
the French side.?) can be jointly captured by replac-
ing Hiero?s primary protocol with the following:
{[b0, c0] [b1, c1]...[bj , cj ] s.t. 1 ? b0 ? c0
0 ? j ? 2
b2 > c1 + 1}
His other conditions can be similarly captured with
appropriate changes to Hiero?s primary and sec-
ondary protocols.
This work is primarily intended as a survey of the
dominant translation rule extraction paradigms, in
which we make explicit the close relationship be-
tween these approaches, and establish a language for
future hybridizations. From a practical perspective,
we facilitate a generic and extensible implementa-
tion which supports a wide variety of existing meth-
ods, and which permits the precise expression of
practical extraction heuristics.
5This corresponds with the original formulation of Syntax
Augmented Machine Translation (Zollmann and Venugopal,
2006). More recent versions of SAMT adopt a more refined
?fuzzifier? that assigns hybrid labels to non-constituent primary
spans.
References
David Chiang. 2005. A hierarchical phrase-based model
for statistical machine translation. In Proceedings of
ACL, pages 263?270.
David Chiang. 2007. Hierarchical phrase-based transla-
tion. Computational Linguistics, 33(2):201?228.
David Chiang. 2010. Learning to translate with source
and target syntax. In Proceedings of ACL, pages 1443?
1452.
A. de Gispert, G. Iglesias, G. Blackwood, E.R. Banga,
and W. Byrne. 2010. Hierarchical phrase-based
translation with weighted finite state transducers and
shallow-n grammars. Computational Linguistics,
36(3):505?533.
Jason Eisner. 2003. Learning non-isomorphic tree map-
pings for machine translation. In Proceedings of ACL,
pages 205?208.
Michel Galley, Mark Hopkins, Kevin Knight, and Daniel
Marcu. 2004. What?s in a translation rule? In Pro-
ceedings of HLT/NAACL.
Michel Galley, Jonathan Graehl, Kevin Knight, Daniel
Marcu, Steve DeNeefe, Wei Wang, and Ignacio
Thayer. 2006. Scalable inference and training of
context-rich syntactic models. In Proceedings of ACL-
COLING.
Liang Huang, Kevin Knight, and Aravind Joshi. 2006.
Statistical syntax-directed translation with extended
domain of locality. In Proceedings of AMTA.
Zhifei Li, Chris Callison-Burch, Chris Dyer, Juri Gan-
itkevitch, Sanjeev Khudanpur, Lane Schwartz, Wren
Thornton, Jonathan Weese, and Omar Zaidan. 2009.
Joshua: An open source toolkit for parsing-based ma-
chine translation. In Proceedings of the Fourth ACL
Workshop on Statistical Machine Translation, pages
135?139.
Yang Liu, Qun Liu, and Shouxun Lin. 2006. Tree-to-
string alignment template for statistical machine trans-
lation. In Proceedings of ACL/COLING, pages 609?
616.
Yang Liu, Yun Huang, Qun Liu, and Shouxun Lin. 2007.
Forest-to-string statistical translation rules. In Pro-
ceedings of ACL.
Yang Liu, Yajuan Lu, and Qun Liu. 2009. Improving
tree-to-tree translation with packed forests. In Pro-
ceedings of ACL/IJCNLP, pages 558?566.
Adam Lopez. 2007. Hierarchical phrase-based transla-
tion with suffix arrays. In Proceedings of EMNLP-
CoNLL.
Daniel Marcu, Wei Wang, Abdessamad Echihabi, and
Kevin Knight. 2006. Spmt: Statistical machine trans-
lation with syntactified target language phrases. In
Proceedings of EMNLP, pages 44?52.
531
Yuval Marton and Philip Resnik. 2008. Soft syntactic
constraints for hierarchical phrased-based translation.
In Proceedings of ACL.
Haitao Mi and Liang Huang. 2008. Forest-based transla-
tion rule extraction. In Proceedings of EMNLP.
Franz J. Och, Christof Tillmann, and Hermann Ney.
1999. Improved alignment models for statistical ma-
chine translation. In Proceedings of the Joint Conf. of
Empirical Methods in Natural Language Processing
and Very Large Corpora, pages 20?28.
Ashish Venugopal, Andreas Zollmann, and Stephan Vo-
gel. 2007. An efficient two-pass approach to
synchronous-cfg driven statistical mt. In Proceedings
of HLT/NAACL.
Min Zhang, Hongfei Jiang, Aiti Aw, Haizhou Li,
Chew Lim Tan, and Sheng Li. 2008. A tree se-
quence alignment-based tree-to-tree translation model.
In Proceedings of ACL.
Andreas Zollmann and Ashish Venugopal. 2006. Syntax
augmented machine translation via chart parsing. In
Proceedings of NAACL Workshop on Statistical Ma-
chine Translation.
532
