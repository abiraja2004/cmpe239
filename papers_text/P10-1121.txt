Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1189?1198,
Uppsala, Sweden, 11-16 July 2010. c?2010 Association for Computational Linguistics
Complexity Metrics in an Incremental Right-corner Parser
Stephen Wu Asaf Bachrach? Carlos Cardenas? William Schuler?
Department of Computer Science, University of Minnesota
? Unit de Neuroimagerie Cognitive INSERM-CEA
? Department of Brain & Cognitive Sciences, Massachussetts Institute of Technology
? University of Minnesota and The Ohio State University
swu@cs.umn.edu ?asaf@mit.edu ?cardenas@mit.edu ?schuler@ling.ohio-state.edu
Abstract
Hierarchical HMM (HHMM) parsers
make promising cognitive models: while
they use a bounded model of working
memory and pursue incremental hypothe-
ses in parallel, they still achieve parsing
accuracies competitive with chart-based
techniques. This paper aims to validate
that a right-corner HHMM parser is also
able to produce complexity metrics, which
quantify a reader?s incremental difficulty
in understanding a sentence. Besides
defining standard metrics in the HHMM
framework, a new metric, embedding
difference, is also proposed, which tests
the hypothesis that HHMM store elements
represents syntactic working memory.
Results show that HHMM surprisal
outperforms all other evaluated metrics
in predicting reading times, and that
embedding difference makes a significant,
independent contribution.
1 Introduction
Since the introduction of a parser-based calcula-
tion for surprisal by Hale (2001), statistical tech-
niques have been become common as models of
reading difficulty and linguistic complexity. Sur-
prisal has received a lot of attention in recent lit-
erature due to nice mathematical properties (Levy,
2008) and predictive ability on eye-tracking move-
ments (Demberg and Keller, 2008; Boston et al,
2008a). Many other complexity metrics have
been suggested as mutually contributing to reading
difficulty; for example, entropy reduction (Hale,
2006), bigram probabilities (McDonald and Shill-
cock, 2003), and split-syntactic/lexical versions of
other metrics (Roark et al, 2009).
A parser-derived complexity metric such as sur-
prisal can only be as good (empirically) as the
model of language from which it derives (Frank,
2009). Ideally, a psychologically-plausible lan-
guage model would produce a surprisal that would
correlate better with linguistic complexity. There-
fore, the specification of how to encode a syntac-
tic language model is of utmost importance to the
quality of the metric.
However, it is difficult to quantify linguis-
tic complexity and reading difficulty. The two
commonly-used empirical quantifications of read-
ing difficulty are eye-tracking measurements and
word-by-word reading times; this paper uses read-
ing times to find the predictiveness of several
parser-derived complexity metrics. Various fac-
tors (i.e., from syntax, semantics, discourse) are
likely necessary for a full accounting of linguis-
tic complexity, so current computational models
(with some exceptions) narrow the scope to syn-
tactic or lexical complexity.
Three complexity metrics will be calculated in
a Hierarchical Hidden Markov Model (HHMM)
parser that recognizes trees in right-corner form
(the left-right dual of left-corner form). This type
of parser performs competitively on standard pars-
ing tasks (Schuler et al, 2010); also, it reflects
plausible accounts of human language processing
as incremental (Tanenhaus et al, 1995; Brants and
Crocker, 2000), as considering hypotheses proba-
bilistically in parallel (Dahan and Gaskell, 2007),
as bounding memory usage to short-term mem-
ory limits (Cowan, 2001), and as requiring more
memory storage for center-embedding structures
than for right- or left-branching ones (Chomsky
and Miller, 1963; Gibson, 1998). Also, unlike
most other parsers, this parser preserves the arc-
eager/arc-standard ambiguity of Abney and John-
1189
son (1991). Typical parsing strategies are arc-
standard, keeping all right-descendants open for
subsequent attachment; but since there can be an
unbounded number of such open constituents, this
assumption is not compatible with simple mod-
els of bounded memory. A consistently arc-eager
strategy acknowledges memory bounds, but yields
dead-end parses. Both analyses are considered in
right-corner HHMM parsing.
The purpose of this paper is to determine
whether the language model defined by the
HHMM parser can also predict reading times ?
it would be strange if a psychologically plausi-
ble model did not also produce viable complex-
ity metrics. In the course of showing that the
HHMM parser does, in fact, predict reading times,
we will define surprisal and entropy reduction in
the HHMM parser, and introduce a third metric
called embedding difference.
Gibson (1998; 2000) hypothesized two types
of syntactic processing costs: integration cost, in
which incremental input is combined with exist-
ing structures; and memory cost, where unfinished
syntactic constructions may incur some short-term
memory usage. HHMM surprisal and entropy
reduction may be considered forms of integra-
tion cost. Though typical PCFG surprisal has
been considered a forward-looking metric (Dem-
berg and Keller, 2008), the incremental nature of
the right-corner transform causes surprisal and en-
tropy reduction in the HHMM parser to measure
the likelihood of grammatical structures that were
hypothesized before evidence was observed for
them. Therefore, these HHMM metrics resemble
an integration cost encompassing both backward-
looking and forward-looking information.
On the other hand, embedding difference is
designed to model the cost of storing center-
embedded structures in working memory. Chen,
Gibson, and Wolf (2005) showed that sentences
requiring more syntactic memory during sen-
tence processing increased reading times, and it
is widely understood that center-embedding incurs
significant syntactic processing costs (Miller and
Chomsky, 1963; Gibson, 1998). Thus, we would
expect for the usage of the center-embedding
memory store in an HHMM parser to correlate
with reading times (and therefore linguistic com-
plexity).
The HHMM parser processes syntactic con-
structs using a bounded number of store states,
defined to represent short-term memory elements;
additional states are utilized whenever center-
embedded syntactic structures are present. Simi-
lar models such as Crocker and Brants (2000) im-
plicitly allow an infinite memory size, but Schuler
et al (2008; 2010) showed that a right-corner
HHMM parser can parse most sentences in En-
glish with 4 or fewer center-embedded-depth lev-
els. This behavior is similar to the hypothesized
size of a human short-term memory store (Cowan,
2001). A positive result in predicting reading
times will lend additional validity to the claim
that the HHMM parser?s bounded memory cor-
responds to bounded memory in human sentence
processing.
The rest of this paper is organized as fol-
lows: Section 2 defines the language model of the
HHMM parser, including definitions of the three
complexity metrics. The methodology for evalu-
ating the complexity metrics is described in Sec-
tion 3, with actual results in Section 4. Further dis-
cussion on results, and comparisons to other work,
are in Section 5.
2 Parsing Model
This section describes an incremental parser in
which surprisal and entropy reduction are sim-
ple calculations (Section 2.1). The parser uses a
Hierarchical Hidden Markov Model (Section 2.2)
and recognizes trees in a right-corner form (Sec-
tion 2.3 and 2.4). The new complexity metric, em-
bedding difference (Section 2.5), is a natural con-
sequence of this HHMM definition. The model
is equivalent to previous HHMM parsers (Schuler,
2009), but reorganized into 5 cases to clarify the
right-corner structure of the parsed sentences.
2.1 Surprisal and Entropy in HMMs
Hidden Markov Models (HMMs) probabilistically
connect sequences of observed states ot and hid-
den states qt at corresponding time steps t. In pars-
ing, observed states are words; hidden states can
be a conglomerate state of linguistic information,
here taken to be syntactic.
The HMM is an incremental, time-series struc-
ture, so one of its by-products is the prefix prob-
ability, which will be used to calculate surprisal.
This is the probability that that words o1..t have
been observed at time t, regardless of which syn-
tactic states q1..t produced them. Bayes? Law and
Markov independence assumptions allow this to
1190
be calculated from two generative probability dis-
tributions.1
Pre(o1..t)=
?
q1..t
P(o1..t q1..t) (1)
def=
?
q1..t
t
?
?=1
P?A(q? | q??1)?P?B(o? | q? ) (2)
Here, probabilities arise from a Transition
Model (?A) between hidden states and an Ob-
servation Model (?B) that generates an observed
state from a hidden state. These models are so
termed for historical reasons (Rabiner, 1990).
Surprisal (Hale, 2001) is then a straightforward
calculation from the prefix probability.
Surprisal(t) = log2
Pre(o1..t?1)
Pre(o1..t)
(3)
This framing of prefix probability and surprisal in
a time-series model is equivalent to Hale?s (2001;
2006), assuming that q1..t ? Dt, i.e., that the syn-
tactic states we are considering form derivations
Dt, or partial trees, consistent with the observed
words. We will see that this is the case for our
parser in Sections 2.2?2.4.
Entropy is a measure of uncertainty, defined as
H(x) = ?P(x) log2 P(x). Now, the entropy Ht
of a t-word string o1..t in an HMM can be written:
Ht =
?
q1..t
P(q1..t o1..t) log2 P(q1..t o1..t) (4)
and entropy reduction (Hale, 2003; Hale, 2006) at
the tth word is then
ER(ot) = max(0, Ht?1 ? Ht) (5)
Both of these metrics fall out naturally from the
time-series representation of the language model.
The third complexity metric, embedding differ-
ence, will be discussed after additional back-
ground in Section 2.5.
In the implementation of an HMM, candidate
states at a given time qt are kept in a trel-
lis, with step-by-step backpointers to the highest-
probability q1..t?1.2 Also, the best qt are often kept
in a beam Bt, discarding low-probability states.
1Technically, a prior distribution over hidden states,
P(q0), is necessary. This q0 is factored and taken to be a de-
terministic constant, and is therefore unimportant as a proba-
bility model.
2Typical tasks in an HMM include finding the most likely
sequence via the Viterbi algorithm, which stores these back-
pointers to maximum-probability previous states and can
uniquely find the most likely sequence.
This mitigates the problems of large state spaces
(e.g., that of all possible grammatical derivations).
Since beams have been shown to perform well
(Brants and Crocker, 2000; Roark, 2001; Boston
et al, 2008b), complexity metrics in this paper
are calculated on a beam rather than over all (un-
bounded) possible derivations Dt. The equations
above, then, will replace the assumption q1..t ?Dt
with qt?Bt.
2.2 Hierarchical Hidden Markov Models
Hidden states q can have internal structure; in Hi-
erarchical HMMs (Fine et al, 1998; Murphy and
Paskin, 2001), this internal structure will be used
to represent syntax trees and looks like several
HMMs stacked on top of each other. As such, qt
is factored into sequences of depth-specific vari-
ables ? one for each of D levels in the HMM hi-
erarchy. In addition, an intermediate variable ft is
introduced to interface between the levels.
qt
def= ?q1t . . . qDt ? (6)
ft
def= ?f1t . . . fDt ? (7)
Transition probabilities P?A(qt | qt?1) over com-
plex hidden states qt are calculated in two phases:
? Reduce phase. Yields an intermediate
state ft, in which component HMMs may ter-
minate. This ft tells ?higher? HMMs to hold
over their information if ?lower? levels are in
operation at any time step t, and tells lower
HMMs to signal when they?re done.
? Shift phase. Yields a modeled hidden state qt,
in which unterminated HMMs transition, and
terminated HMMs are re-initialized from
their parent HMMs.
Each phase is factored according to level-
specific reduce and shift models, ?F and ?Q:
P?A(qt|qt?1) =
?
ft
P(ft|qt?1)?P(qt|ft qt?1) (8)
def=
?
f1..Dt
D
?
d=1
P?F(f
d
t |fd+1t qdt?1qd?1t?1 )
? P?Q(qdt |fd+1t fdt qdt?1qd?1t ) (9)
with fD+1t and q0t defined as constants. Note that
only qt is present at the end of the probability cal-
culation. In step t, ft?1 will be unused, so the
marginalization of Equation 9 does not lose any
information.
1191
. . .
. . .
. . .
. . .
f3t?1
f2t?1
f1t?1
q1t?1
q2t?1
q3t?1
ot?1
f3t
f2t
f1t
q1t
q2t
q3t
ot
(a) Dependency structure in the HHMM
parser. Conditional probabilities at a node are
dependent on incoming arcs.
d=1
d=2
d=3
word
t=1 t=2 t=3 t=4 t=5 t=6 t=7 t=8
the
engineers
pulled
off an
engineering
trick
? ? ? ? ? ? ?
? ? vbd
VBD/PRT
? ? ?
dt
NP/NN
S/VP
S/VP
S/NP
S/NN
S/NN S
(b) HHMM parser as a store whose elements at each time step are listed
vertically, showing a good hypothesis on a sample sentence out of many
kept in parallel. Variables corresponding to qdt are shown.
S
NP
DT
the
NN
engineers
VP
VBD
VBD
pulled
PRT
off
NP
DT
an
NN
NN
engineering
NN
trick
(c) A sample sentence in CNF.
S
S/NN
S/NN
S/NP
S/VP
NP
NP/NN
DT
the
NN
engineers
VBD
VBD/PRT
VBD
pulled
PRT
off
DT
an
NN
engineering
NN
trick
(d) The right-corner transformed version of (c).
Figure 1: Various graphical representations of HHMM parser operation. (a) shows probabilistic depen-
dencies. (b) considers the qdt store to be incremental syntactic information. (c)?(d) demonstrate the
right-corner transform, similar to a left-to-right traversal of (c). In ?NP/NN? we say that NP is the active
constituent and NN is the awaited.
The Observation Model ?B is comparatively
much simpler. It is only dependent on the syntac-
tic state at D (or the deepest active HHMM level).
P?B(ot | qt)
def= P(ot | qDt ) (10)
Figure 1(a) gives a schematic of the dependency
structure of Equations 8?10 for D = 3. Evalua-
tions in this paper are done with D = 4, following
the results of Schuler, et al (2008).
2.3 Parsing right-corner trees
In this HHMM formulation, states and dependen-
cies are optimized for parsing right-corner trees
(Schuler et al, 2008; Schuler et al, 2010). A sam-
ple transformation between CNF and right-corner
trees is in Figures 1(c)?1(d).
Figure 1(b) shows the corresponding store-
element interpretation3 of the right corner tree
in 1(d). These can be used as a case study to
see what kind of operations need to occur in an
3This is technically a pushdown automoton (PDA), where
the store is limited to D elements. When referring to direc-
tions (e.g., up, down), PDAs are typically described opposite
of the one in Figure 1(b); here, we push ?up? instead of down.
HHMM when parsing right-corner trees. There
is one unique set of HHMM state values for each
tree, so the operations can be seen on either the
tree or the store elements.
At each time step t, a certain number of el-
ements (maximum D) are kept in memory, i.e.,
in the store. New words are observed input, and
the bottom occupied element (the ?frontier? of the
store) is the context; together, they determine what
the store will look like at t+1. We can characterize
the types of store-element changes by when they
happen in Figures 1(b) and 1(d):
Cross-level Expansion (CLE). Occupies a new
store element at a given time step. For exam-
ple, at t=1, a new store element is occupied
which can interact with the observed word,
?the.? At t = 3, an expansion occupies the
second store element.
In-level Reduction (ILR). Completes an active
constituent that is a unary child in the right-
corner tree; always accompanied by an in-
level expansion. At t= 2, ?engineers? com-
pletes the active NP constituent; however, the
1192
level is not yet complete since the NP is along
the left-branching trunk of the tree.
In-level Expansion (ILE). Starts a new active
constituent at an already-occupied store ele-
ment; always follows an in-level reduction.
With the NP complete in t= 2, a new active
constituent S is produced at t=3.
In-level Transition (ILT). Transitions the store
to a new state in the next time step at the same
level, where the awaited constituent changes
and the active constituent remains the same.
This describes each of the steps from t=4 to
t=8 at d=1 .
Cross-level Reduction (CLR). Vacates a store
element on seeing a complete active con-
stituent. This occurs after t = 4; ?off?
completes the active (at depth 2) VBD con-
stituent, and vacates store element 2. This
is accompanied with an in-level transition at
depth 1, producing the store at t=5. It should
be noted that with some probability, complet-
ing the active constituent does not vacate the
store element, and the in-level reduction case
would have to be invoked.
The in-level/cross-level ambiguity occurs in the
expansion as well as the reduction, similar to Ab-
ney and Johnson?s arc-eager/arc-standard compo-
sition strategies (1991). At t=3, another possible
hypothesis would be to remain on store element
1 using an ILE instead of a CLE. The HHMM
parser, unlike most other parsers, will preserve this
in-level/cross-level ambiguity by considering both
hypotheses in parallel.
2.4 Reduce and Shift Models
With the understanding of what operations need to
occur, a formal definition of the language model is
in order. Let us begin with the relevant variables.
A shift variable qdt at depth d and time step t is
a syntactic state that must represent the active and
awaited constituents of right-corner form:
qdt
def= ?gAqdt , g
W
qdt
? (11)
e.g., in Figure 1(b), q12=?NP,NN?=NP/NN. Each g is
a constituent from the pre-right-corner grammar,
G.
Reduce variables f are then enlisted to ensure
that in-level and cross-level operations are correct.
fdt
def= ?kfdt , gfdt ? (12)
First, kfdt is a switching variable that differenti-
ates between ILT, CLE/CLR, and ILE/ILR. This
switching is the most important aspect of fdt , so
regardless of what gfdt is, we will use:
? fdt ? F0 when kfdt =0, (ILT/no-op)
? fdt ? F1 when kfdt =1, (CLE/CLR)
? fdt ? FG when kfdt ? G. (ILE/ILR)
Then, gfdt is used to keep track of a completely-
recognized constituent whenever a reduction oc-
curs (ILR or CLR). For example, in Figure 1(b),
after time step 2, an NP has been completely rec-
ognized and precipitates an ILR. The NP gets
stored in gf13 for use in the ensuing ILE instead
of appearing in the store-elements.
This leads us to a specification of the reduce and
shift probability models. The reduce step happens
first at each time step. True to its name, the re-
duce step handles in-level and cross-level reduc-
tions (the second and third case below):
P?F(f
d
t | fd+1t qdt?1qd?1t?1 )
def=
{
if fd+1t 6?FG : Jfdt =0K
if fd+1t ?FG, fdt ? F1 : P??F-ILR,d(fdt | qdt?1 qd?1t?1 )
if fd+1t ?FG, fdt ? FG : P??F-CLR,d(fdt | qdt?1 qd?1t?1 )
(13)
with edge cases q0t and fD+1t defined as appropri-
ate constants. The first case is just store-element
maintenance, in which the variable is not on the
?frontier? and therefore inactive.
Examining ?F-ILR,d and ?F-CLR,d, we see that
the produced fdt variables are also used in the ?if?
statement. These models can be thought of as
picking out a fdt first, finding the matching case,
then applying the probability models that matches.
These models are actually two parts of the same
model when learned from trees.
Probabilities in the shift step are also split into
cases based on the reduce variables. More main-
tenance operations (first case) accompany transi-
tions producing new awaited constituents (second
case below) and expansions producing new active
constituents (third and fourth case):
P?Q(q
d
t | fd+1t fdt qdt?1qd?1t )
def=
?
?
?
?
?
if fd+1t 6?FG : Jqdt = qdt?1K
if fd+1t ?FG, fdt ? F0 : P??Q-ILT,d(qdt | fd+1t qdt?1 qd?1t )
if fd+1t ?FG, fdt ? F1 : P??Q-ILE,d(qdt | fdt qdt?1 qd?1t )
if fd+1t ?FG, fdt ?FG : P??Q-CLE,d(qdt | qd?1t )
(14)
1193
FACTOR DESCRIPTION EXPECTED
Word order in
narrative
For each story, words were indexed. Subjects would tend to read faster later in a story. negative
slope
Reciprocal
length
Log of the reciprocal of the number of letters in each word. A decrease in the reciprocal
(increase in length) might mean longer reading times.
positive
slope
Unigram
frequency
A log-transformed empirical count of word occurrences in the Brown Corpus section of
the Penn Treebank. Higher frequency should indicate shorter reading times.
negative
slope
Bigram
probability
A log-transformed empirical count of two-successive-word occurrences, with Good-
Turing smoothing on words occuring less than 10 times.
negative
slope
Embedding
difference
Amount of change in HHMM weighted-average embedding depth. Hypothesized to in-
crease with larger working memory requirements, which predict longer reading times.
positive
slope
Entropy
reduction
Amount of decrease in the HHMM?s uncertainty about the sentence. Larger reductions
in uncertainty are hypothesized to take longer.
positive
slope
Surprisal ?Surprise value? of a word in the HHMM parser; models were trained on the Wall Street
Journal, sections 02?21. More surprising words may take longer to read.
positive
slope
Table 1: A list of factors hypothesized to contribute to reading times. All data was mean-centered.
A final note: the notation P??(? | ?) has been used
to indicate probability models that are empirical,
trained directly from frequency counts of right-
corner transformed trees in a large corpus. Alter-
natively, a standard PCFG could be trained on a
corpus (or hand-specified), and then the grammar
itself can be right-corner transformed (Schuler,
2009).
Taken together, Equations 11?14 define the
probabilistic structure of the HHMM for parsing
right-corner trees.
2.5 Embedding difference in the HHMM
It should be clear from Figure 1 that at any time
step while parsing depth-bounded right-corner
trees, the candidate hidden state qt will have a
?frontier? depth d(qt). At time t, the beam of
possible hidden states qt stores the syntactic state
(and a backpointer) along with its probability,
P(o1..t q1..t). The average embedding depth at a
time step is then
?EMB(o1..t) =
?
qt?Bt
d(qt) ?
P(o1..t q1..t)
?
q?t?Bt P(o1..t q
?
1..t)
(15)
where we have directly used the beam notation.
The embedding difference metric is:
EmbDiff(o1..t) = ?EMB(o1..t) ? ?EMB(o1..t?1)
(16)
There is a strong computational correspondence
between this definition of embedding difference
and the previous definition of surprisal. To see
this, we rewrite Equations 1 and 3:
Pre(o1..t)=
?
qt?Bt
P(o1..t q1..t) (1?)
Surprisal(t) = log2 Pre(o1..t?1) ? log2 Pre(o1..t)
(3?)
Both surprisal and embedding difference include
summations over the elements of the beam, and
are calculated as a difference between previous
and current beam states.
Most differences between these metrics are rel-
atively inconsequential. For example, the dif-
ference in order of subtraction only assures that
a positive correlation with reading times is ex-
pected. Also, the presence of a logarithm is rel-
atively minor. Embedding difference weighs the
probabilities with center-embedding depths and
then normalizes the values; since the measure is
a weighted average of embedding depths rather
than a probability distribution, ?EMB is not always
less than 1 and the correspondence with Kullback-
Leibler divergence (Levy, 2008) does not hold, so
it does not make sense to take the logs.
Therefore, the inclusion of the embedding
depth, d(qt), is the only significant difference
between the two metrics. The result is a met-
ric that, despite numerical correspondence to sur-
prisal, models the HHMM?s hypotheses about
memory cost.
3 Evaluation
Surprisal, entropy reduction, and embedding dif-
ference from the HHMM parser were evaluated
against a full array of factors (Table 1) on a cor-
pus of word-by-word reading times using a linear
mixed-effects model.
1194
The corpus of reading times for 23 native En-
glish speakers was collected on a set of four nar-
ratives (Bachrach et al, 2009), each composed of
sentences that were syntactically complex but con-
structed to appear relatively natural. Using Linger
2.88, words appeared one-by-one on the screen,
and required a button-press in order to advance;
they were displayed in lines with 11.5 words on
average.
Following Roark et al?s (2009) work on the
same corpus, reading times above 1500 ms (for
diverted attention) or below 150 ms (for button
presses planned before the word appeared) were
discarded. In addition, the first and last word of
each line on the screen were removed; this left
2926 words out of 3540 words in the corpus.
For some tests, a division between open- and
closed-class words was made, with 1450 and 1476
words, respectively. Closed-class words (e.g., de-
terminers or auxiliary verbs) usually play some
kind of syntactic function in a sentence; our evalu-
ations used Roark et al?s list of stop words. Open
class words (e.g., nouns and other verbs) more
commonly include new words. Thus, one may ex-
pect reading times to differ for these two types of
words.
Linear mixed-effect regression analysis was
used on this data; this entails a set of fixed effects
and another of random effects. Reading times y
were modeled as a linear combination of factors
x, listed in Table 1 (fixed effects); some random
variation in the corpus might also be explained by
groupings according to subject i, word j, or sen-
tence k (random effects).
yijk = ?0 +
m
X
?=1
??xijk? + bi + bj + bk + ? (17)
This equation is solved for each of m fixed-
effect coefficients ? with a measure of confidence
(t-value = ??/SE(??), where SE is the standard er-
ror). ?0 is the standard intercept to be estimated
along with the rest of the coefficients, to adjust for
affine relationships between the dependent and in-
dependent variables. We report factors as statisti-
cally significant contributors to reading time if the
absolute value of the t-value is greater than 2.
Two more types of comparisons will be made to
see the significance of factors. First, a model of
data with the full list of factors can be compared
to a model with a subset of those factors. This is
done with a likelihood ratio test, producing (for
mixed-effects models) a ?21 value and correspond-
ing probability that the smaller model could have
produced the same estimates as the larger model.
A lower probability indicates that the additional
factors in the larger model are significant.
Second, models with different fixed effects can
be compared to each other through various infor-
mation criteria; these trade off between having
a more explanatory model vs. a simpler model,
and can be calculated on any model. Here, we
use Akaike?s Information Criterion (AIC), where
lower values indicate better models.
All these statistics were calculated in R, using
the lme4 package (Bates et al, 2008).
4 Results
Using the full list of factors in Table 1, fixed-effect
coefficients were estimated in Table 2. Fitting the
best model by AIC would actually prune away
some of the factors as relatively insignificant, but
these smaller models largely accord with the sig-
nificance values in the table and are therefore not
presented.
The first data column shows the regression on
all data; the second and third columns divide the
data into open and closed classes, because an eval-
uation (not reported in detail here) showed statis-
tically significant interactions between word class
and 3 of the predictors. Additionally, this facil-
itates comparison with Roark et al (2009), who
make the same division.
Out of the non-parser-based metrics, word order
and bigram probability are statistically significant
regardless of the data subset; though reciprocal
length and unigram frequency do not reach signif-
icance here, likelihood ratio tests (not shown) con-
firm that they contribute to the model as a whole.
It can be seen that nearly all the slopes have been
estimated with signs as expected, with the excep-
tion of reciprocal length (which is not statistically
significant).
Most notably, HHMM surprisal is seen here to
be a standout predictive measure for reading times
regardless of word class. If the HHMM parser is
a good psycholinguistic model, we would expect
it to at least produce a viable surprisal metric, and
Table 2 attests that this is indeed the case. Though
it seems to be less predictive of open classes, a
surprisal-only model has the best AIC (-7804) out
of any open-class model. Considering the AIC
on the full data, the worst model with surprisal
1195
FULL DATA OPEN CLASS CLOSED CLASS
Coefficient Std. Err. t-value Coefficient Std. Err. t-value Coefficient Std. Err. t-value
(Intcpt) -9.340?10?3 5.347?10?2 -0.175 -1.237?10?2 5.217?10?2 -0.237 -6.295?10?2 7.930?10?2 -0.794
order -3.746?10?5 7.808?10?6 -4.797? -3.697?10?5 8.002?10?6 -4.621? -3.748?10?5 8.854?10?6 -4.232?
rlength -2.002?10?2 1.635?10?2 -1.225 9.849?10?3 1.779?10?2 0.554 -2.839?10?2 3.283?10?2 -0.865
unigrm -8.090?10?2 3.690?10?1 -0.219 -1.047?10?1 2.681?10?1 -0.391 -3.847?10+0 5.976?10+0 -0.644
bigrm -2.074?10+0 8.132?10?1 -2.551? -2.615?10+0 8.050?10?1 -3.248? -5.052?10+1 1.910?10+1 -2.645?
embdiff 9.390?10?3 3.268?10?3 2.873? 2.432?10?3 4.512?10?3 0.539 1.598?10?2 5.185?10?3 3.082?
etrpyrd 2.753?10?2 6.792?10?3 4.052? 6.634?10?4 1.048?10?2 0.063 4.938?10?2 1.017?10?2 4.857?
srprsl 3.950?10?3 3.452?10?4 11.442? 2.892?10?3 4.601?10?4 6.285? 5.201?10?3 5.601?10?4 9.286?
Table 2: Results of linear mixed-effect modeling. Significance (indicated by ?) is reported at p < 0.05.
(Intr) order rlngth ungrm bigrm emdiff entrpy
order .000
rlength -.006 -.003
unigrm .049 .000 -.479
bigrm .001 .005 -.006 -.073
emdiff .000 .009 -.049 -.089 .095
etrpyrd .000 .003 .016 -.014 .020 -.010
srprsl .000 -.008 -.033 -.079 .107 .362 .171
Table 3: Correlations in the full model.
(AIC=-10589) outperformed the best model with-
out it (AIC=-10478), indicating that the HHMM
surprisal is well worth including in the model re-
gardless of the presence of other significant fac-
tors.
HHMM entropy reduction predicts reading
times on the full dataset and on closed-class
words. However, its effect on open-class words is
insignificant; if we compare the model of column
2 against one without entropy reduction, a likeli-
hood ratio test gives ?21 = 0.0022, p = 0.9623
(the smaller model could easily generate the same
data).
The HHMM?s average embedding difference
is also significant except in the case of open-
class words ? removing embedding difference on
open-class data yields ?21 = 0.2739, p = 0.6007.
But what is remarkable is that there is any signifi-
cance for this metric at all. Embedding difference
and surprisal were relatively correlated compared
to other predictors (see Table 3), which is expected
because embedding difference is calculated like
a weighted version of surprisal. Despite this, it
makes an independent contribution to the full-data
and closed-class models. Thus, we can conclude
that the average embedding depth component af-
fects reading times ? i.e., the HHMM?s notion of
working memory behaves as we would expect hu-
man working memory to behave.
5 Discussion
As with previous work on large-scale parser-
derived complexity metrics, the linear mixed-
effect models suggest that sentence-level factors
are effective predictors for reading difficulty ? in
these evaluations, better than commonly-used lex-
ical and near-neighbor predictors (Pollatsek et al,
2006; Engbert et al, 2005). The fact that HHMM
surprisal outperforms even n-gram metrics points
to the importance of including a notion of sentence
structure. This is particularly true when the sen-
tence structure is defined in a language model that
is psycholinguistically plausible (here, bounded-
memory right-corner form).
This accords with an understated result of
Boston et al?s eye-tracking study (2008a): a
richer language model predicts eye movements
during reading better than an oversimplified one.
The comparison there is between phrase struc-
ture surprisal (based on Hale?s (2001) calculation
from an Earley parser), and dependency grammar
surprisal (based on Nivre?s (2007) dependency
parser). Frank (2009) similarly reports improve-
ments in the reading-time predictiveness of unlexi-
calized surprisal when using a language model that
is more plausible than PCFGs.
The difference in predictivity due to word class
is difficult to explain. One theory may be that
closed-class words are less susceptible to random
effects because there is a finite set of them for
any language, making them overall easier to pre-
dict via parser-derived metrics. Or, we could note
that since closed-class words often serve grammat-
ical functions in addition to their lexical content,
they contribute more information to parser-derived
measures than open-class words. Previous work
with complexity metrics on this corpus (Roark et
al., 2009) suggests that these explanations only ac-
count for part of the word-class variation in the
performance of predictors.
1196
Further comparsion to Roark et al will show
other differences, such as the lesser role of word
length and unigram frequency, lower overall cor-
relations between factors, and the greater predic-
tivity of their entropy metric. In addition, their
metrics are different from ours in that they are de-
signed to tease apart lexical and syntactic contri-
butions to reading difficulty. Their notion of en-
tropy, in particular, estimates Hale?s definition of
entropy on whole derivations (2006) by isolating
the predictive entropy; they then proceed to define
separate lexical and syntactic predictive entropies.
Drawing more directly from Hale, our definition
is a whole-derivation metric based on the condi-
tional entropy of the words, given the root. (The
root constituent, though unwritten in our defini-
tions, is always included in the HHMM start state,
q0.)
More generally, the parser used in these evalu-
ations differs from other reported parsers in that
it is not lexicalized. One might expect for this
to be a weakness, allowing distributions of prob-
abilities at each time step in places not licensed
by the observed words, and therefore giving poor
probability-based complexity metrics. However,
we see that this language model performs well
despite its lack of lexicalization. This indicates
that lexicalization is not a requisite part of syntac-
tic parser performance with respect to predicting
linguistic complexity, corroborating the evidence
of Demberg and Keller?s (2008) ?unlexicalized?
(POS-generating, not word-generating) parser.
Another difference is that previous parsers have
produced useful complexity metrics without main-
taining arc-eager/arc-standard ambiguity. Results
show that including this ambiguity in the HHMM
at least does not invalidate (and may in fact im-
prove) surprisal or entropy reduction as reading-
time predictors.
6 Conclusion
The task at hand was to determine whether the
HHMM could consistently be considered a plau-
sible psycholinguistic model, producing viable
complexity metrics while maintaining other char-
acteristics such as bounded memory usage. The
linear mixed-effects models on reading times val-
idate this claim. The HHMM can straightfor-
wardly produce highly-predictive, standard com-
plexity metrics (surprisal and entropy reduction).
HHMM surprisal performs very well in predicting
reading times regardless of word class. Our for-
mulation of entropy reduction is also significant
except in open-class words.
The new metric, embedding difference, uses the
average center-embedding depth of the HHMM
to model syntactic-processing memory cost. This
metric can only be calculated on parsers with an
explicit representation for short-term memory el-
ements like the right-corner HHMM parser. Re-
sults show that embedding difference does predict
reading times except in open-class words, yielding
a significant contribution independent of surprisal
despite the fact that its definition is similar to that
of surprisal.
Acknowledgments
Thanks to Brian Roark for help on the reading
times corpus, Tim Miller for the formulation of
entropy reduction, Mark Holland for statistical in-
sight, and the anonymous reviewers for their input.
This research was supported by National Science
Foundation CAREER/PECASE award 0447685.
The views expressed are not necessarily endorsed
by the sponsors.
References
Steven P. Abney and Mark Johnson. 1991. Memory
requirements and local ambiguities of parsing strate-
gies. J. Psycholinguistic Research, 20(3):233?250.
Asaf Bachrach, Brian Roark, Alex Marantz, Susan
Whitfield-Gabrieli, Carlos Cardenas, and John D.E.
Gabrieli. 2009. Incremental prediction in naturalis-
tic language processing: An fMRI study.
Douglas Bates, Martin Maechler, and Bin Dai. 2008.
lme4: Linear mixed-effects models using S4 classes.
R package version 0.999375-31.
Marisa Ferrara Boston, John T. Hale, Reinhold Kliegl,
U. Patil, and Shravan Vasishth. 2008a. Parsing costs
as predictors of reading difficulty: An evaluation us-
ing the Potsdam Sentence Corpus. Journal of Eye
Movement Research, 2(1):1?12.
Marisa Ferrara Boston, John T. Hale, Reinhold Kliegl,
and Shravan Vasishth. 2008b. Surprising parser ac-
tions and reading difficulty. In Proceedings of ACL-
08: HLT, Short Papers, pages 5?8, Columbus, Ohio,
June. Association for Computational Linguistics.
Thorsten Brants and Matthew Crocker. 2000. Prob-
abilistic parsing and psychological plausibility. In
Proceedings of COLING ?00, pages 111?118.
1197
Evan Chen, Edward Gibson, and Florian Wolf. 2005.
Online syntactic storage costs in sentence com-
prehension. Journal of Memory and Language,
52(1):144?169.
Noam Chomsky and George A. Miller. 1963. Intro-
duction to the formal analysis of natural languages.
In Handbook of Mathematical Psychology, pages
269?321. Wiley.
Nelson Cowan. 2001. The magical number 4 in short-
term memory: A reconsideration of mental storage
capacity. Behavioral and Brain Sciences, 24:87?
185.
Matthew Crocker and Thorsten Brants. 2000. Wide-
coverage probabilistic sentence processing. Journal
of Psycholinguistic Research, 29(6):647?669.
Delphine Dahan and M. Gareth Gaskell. 2007. The
temporal dynamics of ambiguity resolution: Evi-
dence from spoken-word recognition. Journal of
Memory and Language, 57(4):483?501.
Vera Demberg and Frank Keller. 2008. Data from eye-
tracking corpora as evidence for theories of syntactic
processing complexity. Cognition, 109(2):193?210.
Ralf Engbert, Antje Nuthmann, Eike M. Richter, and
Reinhold Kliegl. 2005. SWIFT: A dynamical model
of saccade generation during reading. Psychological
Review, 112:777?813.
Shai Fine, Yoram Singer, and Naftali Tishby. 1998.
The hierarchical hidden markov model: Analysis
and applications. Machine Learning, 32(1):41?62.
Stefan L. Frank. 2009. Surprisal-based comparison be-
tween a symbolic and a connectionist model of sen-
tence processing. In Proc. Annual Meeting of the
Cognitive Science Society, pages 1139?1144.
Edward Gibson. 1998. Linguistic complexity: Local-
ity of syntactic dependencies. Cognition, 68(1):1?
76.
Edward Gibson. 2000. The dependency locality the-
ory: A distance-based theory of linguistic complex-
ity. In Image, language, brain: Papers from the first
mind articulation project symposium, pages 95?126.
John Hale. 2001. A probabilistic earley parser as a
psycholinguistic model. In Proceedings of the Sec-
ond Meeting of the North American Chapter of the
Association for Computational Linguistics, pages
159?166, Pittsburgh, PA.
John Hale. 2003. Grammar, Uncertainty and Sentence
Processing. Ph.D. thesis, Cognitive Science, The
Johns Hopkins University.
John Hale. 2006. Uncertainty about the rest of the
sentence. Cognitive Science, 30(4):609?642.
Roger Levy. 2008. Expectation-based syntactic com-
prehension. Cognition, 106(3):1126?1177.
Scott A. McDonald and Richard C. Shillcock. 2003.
Low-level predictive inference in reading: The influ-
ence of transitional probabilities on eye movements.
Vision Research, 43(16):1735?1751.
George Miller and Noam Chomsky. 1963. Finitary
models of language users. In R. Luce, R. Bush,
and E. Galanter, editors, Handbook of Mathematical
Psychology, volume 2, pages 419?491. John Wiley.
Kevin P. Murphy and Mark A. Paskin. 2001. Lin-
ear time inference in hierarchical HMMs. In Proc.
NIPS, pages 833?840, Vancouver, BC, Canada.
Joakim Nivre. 2007. Inductive dependency parsing.
Computational Linguistics, 33(2).
Alexander Pollatsek, Erik D. Reichle, and Keith
Rayner. 2006. Tests of the EZ Reader model:
Exploring the interface between cognition and eye-
movement control. Cognitive Psychology, 52(1):1?
56.
Lawrence R. Rabiner. 1990. A tutorial on hid-
den Markov models and selected applications in
speech recognition. Readings in speech recognition,
53(3):267?296.
Brian Roark, Asaf Bachrach, Carlos Cardenas, and
Christophe Pallier. 2009. Deriving lexical and
syntactic expectation-based measures for psycholin-
guistic modeling via incremental top-down parsing.
Proceedings of the 2009 Conference on Empirical
Methods in Natural Langauge Processing, pages
324?333.
Brian Roark. 2001. Probabilistic top-down parsing
and language modeling. Computational Linguistics,
27(2):249?276.
William Schuler, Samir AbdelRahman, Tim
Miller, and Lane Schwartz. 2008. Toward a
psycholinguistically-motivated model of language.
In Proceedings of COLING, pages 785?792,
Manchester, UK, August.
William Schuler, Samir AbdelRahman, TimMiller, and
Lane Schwartz. 2010. Broad-coverage incremen-
tal parsing using human-like memory constraints.
Computational Linguistics, 36(1).
William Schuler. 2009. Parsing with a bounded
stack using a model-based right-corner transform.
In Proceedings of the North American Association
for Computational Linguistics (NAACL ?09), pages
344?352, Boulder, Colorado.
Michael K. Tanenhaus, Michael J. Spivey-Knowlton,
Kathy M. Eberhard, and Julie E. Sedivy. 1995. In-
tegration of visual and linguistic information in spo-
ken language comprehension. Science, 268:1632?
1634.
1198
