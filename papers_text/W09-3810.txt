Proceedings of the 11th International Conference on Parsing Technologies (IWPT), pages 69?72,
Paris, October 2009. c?2009 Association for Computational Linguistics
Synchronous Rewriting in Treebanks
Laura Kallmeyer
University of Tu?bingen
Tu?bingen, Germany
lk@sfs.uni-tuebingen.de
Wolfgang Maier
University of Tu?bingen
Tu?bingen, Germany
wo.maier@uni-tuebingen.de
Giorgio Satta
University of Padua
Padova, Italy
satta@dei.unipd.it
Abstract
Several formalisms have been proposed
for modeling trees with discontinuous
phrases. Some of these formalisms allow
for synchronous rewriting. However, it
is unclear whether synchronous rewriting
is a necessary feature. This is an impor-
tant question, since synchronous rewrit-
ing greatly increases parsing complexity.
We present a characterization of recursive
synchronous rewriting in constituent tree-
banks with discontinuous annotation. An
empirical investigation reveals that syn-
chronous rewriting is actually a neces-
sary feature. Furthermore, we transfer this
property to grammars extracted from tree-
banks.
1 Introduction
Discontinuous phrases are frequent in natural
language, particularly in languages with a rela-
tively free word order. Several formalisms have
been proposed in the literature for modeling trees
containing such phrases. These include non-
projective dependency grammar (Nivre, 2006),
discontinuous phrase structure grammar (DPSG)
(Bunt et al, 1987), as well as linear context-
free rewriting systems (LCFRS) (Vijay-Shanker et
al., 1987) and the equivalent formalism of sim-
ple range concatenation grammar (sRCG) (Boul-
lier, 2000). Kuhlmann (2007) uses LCFRS for
non-projective dependency trees. DPSG have
been used in Plaehn (2004) for data-driven pars-
ing of treebanks with discontinuous constituent
annotation. Maier and S?gaard (2008) extract
sRCGs from treebanks with discontinuous con-
stituent structures.
Both LCFRS and sRCG can model discontinu-
ities and allow for synchronous rewriting as well.
We speak of synchronous rewriting when two or
more context-free derivation processes are instan-
tiated in a synchronous way. DPSG, which has
also been proposed for modeling discontinuities,
does not allow for synchronous rewriting because
the different discontinuous parts of the yield of a
non-terminal are treated locally, i.e., their deriva-
tions are independent from each other. So far, syn-
chronous rewriting has not been empirically mo-
tivated by linguistic data from treebanks. In this
paper, we fill this gap by investigating the exis-
tence of structures indicating synchronous rewrit-
ing in treebanks with discontinuous annotations.
The question of whether we can find evidence for
synchronous rewriting has consequences for the
complexity of parsing. In fact, parsing with syn-
chronous formalisms can be carried out in time
polynomial in the length of the input string, with
a polynomial degree depending on the maximum
number of synchronous branches one can find in
derivations (Seki et al, 1991).
In this paper, we characterize synchronous
rewriting as a property of trees with crossing
branches and in an empirical evaluation, we con-
firm that treebanks do contain recursive syn-
chronous rewriting which can be linguistically
motivated. Furthermore, we show how this char-
acterization transfers to the simple RCGs describ-
ing these trees.
2 Synchronous Rewriting Trees in
German treebanks
By synchronous rewriting we indicate the syn-
chronous instantiation of two or more context-free
derivation processes. As an example, consider the
language L = {anbncndn | n ? 1}. Each
of the two halves of some w ? L can be ob-
tained through a stand-alone context-free deriva-
tion, but for w to be in L the two derivations must
be synchronized somehow. For certain tasks, syn-
chronous rewriting is a desired property for a for-
malism. In machine translation, e.g., synchronous
69
rewriting is extensively used to model the syn-
chronous dependence between the source and tar-
get languages (Chiang, 2007). The question we
are concerned with in this paper is whether we can
find instances of recursive synchronous rewriting
in treebanks that show discontinuous phrases.
We make the assumption that, if the annota-
tion of a treebank allows to express synchronous
rewriting, then all cases of synchronous rewriting
are present in the annotation. This means that, on
the one hand, there are no cases of synchronous
rewriting that the annotator ?forgot? to encode.
Therefore unrelated cases of parallel iterations in
different parts of a tree are taken to be truly unre-
lated. On the other hand, if synchronous rewrit-
ing is annotated explicitely, then we take it to be a
case of true synchronous rewriting, even if, based
on the string, it would be possible to find an anal-
ysis that does not require synchronous rewriting.
This assumption allows us to concentrate only on
explicit cases of synchronous rewriting .
We concentrate on German treebanks annotated
with trees with crossing branches. In such trees,
synchronous rewriting amounts to cases where dif-
ferent components of a non-terminal category de-
velop in parallel. In particular, we search for cases
where the parallelism can be iterated. An exam-
ple is the relative clause in (1), found in TIGER.
Fig. 1 gives the annotation. As can be seen in
the annotation, we have two VP nodes, each of
which has a discontinuous span consisting of two
parts. The two parts are separated by lexical ma-
terial not belonging to the VPs. The two com-
ponents of the second VP (Pop-Idol and werden)
are included in the two components of the first,
higher, VP (genausogut auch Pop-Idol and wer-
den ko?nnen). In other words, the two VP compo-
nents are rewritten in parallel containing again two
smaller VP components.
(1) . . . der
. . . who
genausogut
as well
auch
also
Pop-Idol
pop-star
ha?tte
AUX
werden
become
ko?nnen
could
?who could as well also become a pop-star?
Let us assume the following definitions: We
map the elements of a string to their positions. We
then say that the yield ? of a node n in a tree is
the set of all indices i such that n dominates the
leaf labeled with the ith terminal. A yield ? has a
gap if there are i1 < i2 < i3 such that i1, i3 ? ?
and i2 /? ?. For all i, j ? ? with i < j, the set
??i,j? = {k | i ? k ? j} is a component of ? if
??i,j? ? ? and i?1 /? ? and j+1 /? ?. We order
the components of ? such that ??i1,j1? < ??i2,j2?
if i1 < i2.
Trees showing recursive synchronous rewrit-
ing can be characterized as follows: We have a
non-terminal node n1 with label A whose yield
has a gap. n1 dominates another node n2 with la-
bel A such that for some i 6= j, the ith component
of the yield of n2 is contained in the ith component
of the yield of n1 and similar for the jth compo-
nent. We call the path from n1 to n2 a recursive
synchronous rewriting segment (RSRS).
Table 1 shows the results obtained from search-
ing for recursive synchronous rewriting in the Ger-
man TIGER and NeGra treebanks. In a prepro-
cessing step, punctuation has been removed, since
it is directly attached to the root node and therefore
not included in the annotation.
TIGER NeGra
number of trees 40,013 20,597
total num. of RSRS in all trees 1476 600
av. RSRS length in all trees 2.13 2.12
max. RSRS length in all trees 5 4
Table 1: Synchronous rewriting in treebanks
Example (1) shows that we find instances of re-
cursive synchronous rewriting where each of the
rewriting steps adds something to both of the par-
allel components. (1) was not an isolated case.
The annotation of (1) in Fig. 1 could be turned
into a context-free structure if the lowest node
dominating the material in the gap while not
dominating the synchronous rewriting nodes (here
VAFIN) is attached lower, namely below the lower
VP node. (Note however that there is good linguis-
tic motivation for attaching it high.) Besides such
cases, we even encountered cases where the dis-
continuity cannot be removed this way. An exam-
ple is (2) (resp. Fig. 2) where we have a gap con-
taining an NP such that the lowest node dominat-
ing this NP while not dominating the synchronous
rewriting nodes has a daughter to the right of the
yields of the synchronous rewriting nodes, namely
the extraposed relative clause. This structure is of
the type ancbnd, where a and b depend on each
other in a left-to-right order and can be nested,
and c and d also depend on each other and must
be generated together. This is a structure that re-
quires synchronous rewriting, even on the basis of
the string language. Note that the nesting of VPs
can be iterated, as can be seen in (3).
(2) . . . ob
. . . whether
auf
on
deren
their
Gela?nde
premises
der
the
Typ
type
von
of
70
S
VP
VP
PRELS ADV ADV NN VAFIN VAINF VMINF
der genausogut auch Pop-Idol ha?tte werden ko?nnen
Figure 1: Example for recursive synchronous rewriting
Abstellanlage
parking facility
gebaut
built
werden
be
ko?nne,
could,
der
which
. . .
. . .
?whether on their premises precisely the type of parking
facility could be built, which . . . ?
(3) . . . ob
. . . whether
auf
on
deren
their
Gela?nde
premises
der
the
Typ
type
von
of
Abstellanlage
parking facility
eigentlich
actually
ha?tte
had
schon
already
gebaut
built
werden
be
sollen,
should,
der
which
. . .
. . .
?whether on their premises precisely the type of parking
facility should actually already have been built, which
. . . ?
As a conclusion from these empirical results,
we state that to account for the data we can find in
treebanks with discontinuities, i.e., with crossing
branches, we need a formalism that can express
synchronous rewriting.
3 Synchronous Rewriting in Grammars
Extracted from Treebanks
In the following, we will use simple RCG (which
are equivalent to LCFRS) to model our treebank
annotations. We extract simple RCG rewriting
rules from NeGra and TIGER and check them for
the possibility to generate recursive synchronous
rewriting.
A simple RCG (Boullier, 2000) is a tuple G =
(N,T, V, P, S) where a) N is a finite set of pred-
icate names with an arity function dim: N ? N,
b) T and V are disjoint finite sets of terminals and
variables, c) P is a finite set of clauses of the form
A(?1, . . . , ?dim(A)) ? A1(X(1)1 , . . . ,X(1)dim(A1))
? ? ?Am(X(m)1 , . . . ,X(m)dim(Am))
for m ? 0 where A,A1, . . . , Am ? N , X(i)j ?
V for 1 ? i ? m, 1 ? j ? dim(Ai) and ?i ?
(T ? V )? for 1 ? i ? dim(A), and e) S ? N is
the start predicate name with dim(S) = 1. For all
c ? P , it holds that every variable X occurring in
c occurs exactly once in the left-hand side (LHS)
and exactly once in the RHS. A simple RCG G =
(N,T, V, P, S) is a simple k-RCG if for all A ?
N, dim(A) ? k.
For the definition of the language of a simple
RCG, we borrow the LCFRS definitions here: Let
G = ?N,T, V, P, S? be a simple RCG. For every
A ? N , we define the yield of A, yield(A) as
follows:
a) For every A(~?) ? ?, ~? ? yield(A);
b) For every clause
A(?1, . . . , ?dim(A)) ? A1(X(1)1 , . . . ,X(1)dim(A1))
? ? ?Am(X(m)1 , . . . ,X(m)dim(Am))
and all ~?i ? yield(Ai) for 1 ? i ? m,
?f(?1), . . . , f(?dim(A))? ? yield(A) where
f is defined as follows:
(i) f(t) = t for all t ? T ,
(ii) f(X(i)j ) = ~?i(j) for all 1 ? i ? m, 1 ?
j ? dim(Ai) and
(iii) f(xy) = f(x)f(y) for all x, y ? (T ?
V )+.
c) Nothing else is in yield(A).
The language is then {w | ?w? ? yield(S)}.
We are using the algorithm from Maier and
S?gaard (2008) to extract simple RCGs from Ne-
Gra and TIGER. For the tree in Fig. 1, the algo-
rithm produces for instance the following clauses:
PRELS(der) ? ?
ADV(genausogut) ? ?
. . .
S(X1X2X3X4) ? PRELS(X1)VP2(X1,X4) VAFIN(X3)
VP2(X1X2X3,X4X5) ? ADV(X1) ADV(X2)
VP2(X3,X4) VMINF(X5)
VP2(X1,X2) ? NN(X1) VAINF(X2)
We distinguish different usages of the same cat-
egory depending on their numbers of yield com-
ponents. E.g., we distinguish non-terminals VP1,
VP2, . . . depending on the arity of the VP. We de-
fine cat(A) for A ? N as the category of A, inde-
pendent from the arity, e.g., cat(VP2) =VP.
In terms of simple RCG, synchronous rewrit-
ing means that in a single clause distinct variables
occurring in two different arguments of the LHS
predicate are passed to two different arguments of
the same RHS predicate. We call this recursive
71
S
NP
VP
VP
VP
PP NP
ob auf dem Gela?nde der Typ von Abstellanlage . . . ha?tte . . . gebaut werden sollen, der. . .
Figure 2: Iterable treebank example for synchronous rewriting
if, by a sequence of synchronous rewriting steps,
we can reach the same two arguments of the same
predicate again. Derivations using such cycles of
synchronous rewriting lead exactly to the recursive
synchronous rewriting trees characterized in sec-
tion 2. In the following, we check to which extent
the extracted simple RCG allows for such cycles.
In order to detect synchronous rewriting in a
simple k-RCG G, we build a labeled directed
graph G = (VG , EG , l) from the grammar with
VG a set of nodes, EG a set of arcs and l :
VG ? N ? ? {0, . . . , k} ? {0, . . . , k} where N ? =
{cat(A) |A ? N} a labeling function. G is con-
structed as follows. For each clause A0(~?) ?
A1( ~?1) . . . Am( ~?m) ? P we consider all pairs of
variables Xs,Xt for which the following condi-
tions hold: (i) Xs and Xt occur in different argu-
ments i and j of A0, 1 ? i < j ? dim(A0); and
(ii) Xs and Xt occur in different arguments q and
r of the same occurrence of predicate Ap in the
RHS, 1 ? q < r ? dim(Ap) and 1 ? p ? m.
For each of these pairs, two nodes with labels
[cat(A0), i, j] and [cat(Ap), q, r], respectively, are
added to VG (if they do not yet exist, otherwise we
take the already existing nodes) and a directed arc
from the first node to the second node is added to
EG . The intuition is that an arc in G represents
one or more clauses from the grammar in which
a gap between two variables in the LHS predicate
is transferred to the same RHS predicate. To de-
tect recursive synchronous rewriting, we then need
to discover all elementary cycles in G, i.e., all cy-
cles in which no vertex appears twice. In order to
accomplish this task efficiently, we exploit the al-
gorithm presented in Johnson (1975). On a gram-
mar extracted from NeGra (19,100 clauses), the
algorithm yields a graph with 28 nodes containing
206,403 cycles of an average length of 12.86 and
a maximal length of 28.
4 Conclusion
The starting point of this paper was the question
whether synchronous rewriting is a necessary fea-
ture of grammer formalisms for modelling natu-
ral languages. In order to answer this question,
we have characterized synchronous rewriting in
terms of properties of treebank trees with crossing
branches. Experiments have shown that recursive
cases of synchronous rewriting occur in treebanks
for German which leads to the conclusion that,
in order to model these data, we need formalisms
that allow for synchronous rewriting. In a second
part, we have extracted a simple RCG from these
treebanks and we have characterized the grammar
properties that are necessary to obtain recursive
synchronous rewriting. We then have investigated
the extent to which a grammar extracted from Ne-
Gra allows for recursive synchronous rewriting.
References
Pierre Boullier. 2000. Range concatenation grammars.
In Proceedings of IWPT.
Harry Bunt, Jan Thesingh, and Ko van der Sloot. 1987.
Discontinuous constituents in trees, rules and pars-
ing. In Proceedings of EACL.
David Chiang. 2007. Hierarchical phrase-based trans-
lation. Computational Linguistics.
Donald B. Johnson. 1975. Finding all the elementary
circuits of a directed graph. SIAM Journal on Com-
puting.
Marco Kuhlmann. 2007. Dependency Structures and
Lexicalized Grammars. Dissertation, Saarland Uni-
versity.
Wolfgang Maier and Anders S?gaard. 2008. Tree-
banks and mild context-sensitivity. In Proceedings
of Formal Grammar.
Joakim Nivre. 2006. Inductive Dependency Parsing.
Springer.
Oliver Plaehn. 2004. Computing the most probable
parse for a discontinuous phrase-structure grammar.
In New developments in parsing technology. Kluwer.
H. Seki, T. Matsumura, M. Fujii, and T. Kasami. 1991.
On multiple context-free grammars. Theoretical
Computer Science.
K. Vijay-Shanker, David Weir, and Aravind Joshi.
1987. Characterising structural descriptions used by
various formalisms. In Proceedings of ACL.
72
