CONVERSATIONS WITH A COMPUTER - AN EXAMPLE OF NETWORK 
PROGRAMMING IN RELATIONAL DATA BASE ENVIRONMENT 
M. Nalbach, K. Studzinski and S. Wsligorski 
I ns t i tu te  of  In fo rmat ics  
Warsaw Un ivers i ty  
00901 Warsaw, PKiN 850 
Poland 
Any e f f i c ient  human-computer conversat ion  in  an e thn ic  
language needs rather large ammount of information, which 
generally may be classified as follows: 
I/ Script: rules governing entire exchange of messages be- 
tween computer and human which generally determine how 
computer reacts and responds in various possible situat- 
i ons .  
2 /  Grammar and vocabulary  of  the language:  ru les  of  recogn i -  
t ion  of  words, phrases and ent i re  messages,  inc lud ing  
algorithms of lexical and syntactical analysis. 
3/ Semantics: rule~ of understanding of words and messages, 
including methods of determining how the words and mess- 
ages relate to data stored in memory and what should be 
specific reactions of the computer according to the re- 
cognized meaning messages. 
This data may be presented in various forms, e.g. as 
dictionaries, transition networks for lexical analysis, 
augmented transition networks (ATN) for syntactic analysis, 
semantic networks,  re la t ions ,  end so on. They may be a l so  
inc luded in to  programs which cont ro l  and run converset ions .  
- 203 - 
I t  i s  ev ident  that  th i s  in fo rmat ion  must  be  eas i ly  mod- 
i f i ab le  in  case  o f  debugg ing  or  improvement .  I t  i s  very  use -  
fu l  i f  the  fo rm of  e l l  data  c reated  by a user  compl ies  w i th  
cer ta in  s tandards  and the  data  ere  s tored  in  8 un i fo rm way, 
so as  to  make unders tand ing  and mod i f i ca t ion  as  easy  as  poss -  
ib le .  For  th i s  reason  we use  as  a s tandard  s torage  a re la t -  
iona l  data  base .  
We may cons ider  any rea l  conversat ion  w i th  8 computer  
as  a sequence  o f  a tomic  un i ts ,  each  compr is ing  one exchauge 
o f  messages  between human and computer ,  w i th  a l l  accompany-  
ing  ac t ions .  Every  d ia logue  determines  one sequence  o f  such  
un i ts  and t rans i t ions .  A l l  such  sequences  o f  un i t s  and t rans -  
i t ions  fo rm a network .  I t  tu rns  out  that  i t  i s  very  use fu l  
to  in t roduce  recurs ion  in to  such  networks ;  s ince  i t  i s  poss -  
ib le  to  s tore  or  to  fe tch  data  dur ing  a d ia logue ,  th i s  con-  
cept  resembles  augmented  t rans i t ion  networks  (ATN). In  fac t ,  
these  conversat ion  cont ro l  networks  may be  t rans formed in to  
ATN. However ,  the i r  o r ig ina l  fo rm prov ides  bet ter  p ro tect ion  
aga ins t  undes i red  indetermin ism and backt rack ing .  ATN in  the i r  
original form are applied for syntactical analysis. 
Obviously, such networks are nothing else as programs 
in a special programming lar~uage (or lengu~es), quite nat- 
urelly~ networks may be comfortably described by relations. 
This paper  presents results of an ~plementation of these 
i deas .  Data base  management  programs are  in  For t ran ,  but  
user  access  to  the  data  base  i s  ent i re ly  conversat iona l .  A l l  
networks  s tored  in  the  base  have  fo rm o f  re la t ions .  For  ex -  
ample ,  e lements  o f  a re la t ion  fo r  an ATN may have  the  fo rm 
shown in  F ig .  I .  Th is  re la t ion  i s  t rans la ted  in to  ? s imp ler  
one in  wh ich  a l l  cond i t ions  and act ions  are  rep laced  by  l inks  
to  For t ran  subrout ines  obta ined  as  resu l t s  o f  t rans la t ion  o f  
cor respond ing  express ions ,  and names o f  s ta tes  in  "tO" f ie ld  
a re  rep laced  by ident i f ie rs  o f  appropr ia te  tup les  in  the  new 
re la t ion .  Networks  in  th i s  fo rm may be  in terpreted  or  compi l -  
- 204 .  - 
ed to Fortran. Compilation is usually msde for large ATN's 
for which simple interpretation would be too slow. We obtain- 
ed in this way good speeds even for very complicated syntact- 
ic grammars. Conversation control netwOrks are always inter- 
preted, for in this case no speedup was necessary. The con- 
versation control allows bootstrapping, i.e. an appropriately 
created network may control process of conversational creat- 
ion or modification of any CCN. 
Our implementation was made in Fortran, in spite of 811 
its disadvantages, mainly for Portability reasons. It is still 
much more easy to transfer to other computer or mini soft- 
ware written in Fortran than in any other language, including 
LISP. 
STATE!ARCNAM 
s/ TST 
S5/ PUSH 
SIOI POP 
ARG' , .~ENT 
ONTEST 
tU'S/ 
AP~.,t~COETR (N) 
CONDITION 
EQ(LEX 
qUOt~ ~ON~ 
~Q (G~I~ (CAT) 
~vot~ ~A~ PRON}} 
T 
ACTIONS ~0 
SETR (WHERE ON) ~ 1 ! 
SETR(ADJ $4/ 
Fig.  I 
- 205  - 
