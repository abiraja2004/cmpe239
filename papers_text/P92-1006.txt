Efficiency, Robustness and Accuracy 
in Picky Chart 
David M. Magerman 
Stanford  Un ivers i ty  
S tanford ,  CA 94305 
magerman@cs .s t  an ford .edu  
Parsing* 
Carl Weir 
Paramax Systems 
Paol i ,  PA  19301 
we i r@prc .un isys .com 
ABSTRACT 
Th is  paper  descr ibes  P icky ,  a probabi l i s t ic  agenda-based  
char t  pars ing  a lgor i thm which  uses  a techn ique  cal led p~'ob- 
abilistic prediction topredict which grammar rules are likely 
to lead to an acceptable parse of the input. Using a subopti- 
mal search method, "Picky significantly reduces the number of 
edges produced by CKY-like chart parsing algorithms, while 
maintaining the robustness of pure bottom-up arsers and 
the accuracy of existing probabilistic parsers. Experiments 
using Picky demonstrate how probabilistic modelling can im- 
pact upon the efficiency, robustness and accuracy of a parser. 
1. I n t roduct ion  
This paper addresses the question: Why should we use 
probabilistic models in natural anguage understanding? 
There are many answers to this question, only a few of 
which are regularly addressed in the literature. 
The first and most common answer concerns ambigu~ 
ity resolution. A probabilistic model provides a clearly 
defined preference nile for selecting among grammati- 
cal alternatives (i.e. the highest probability interpreta- 
tion is selected). However, this use of probabilistic mod- 
els assumes that we already have efficient methods for 
generating the alternatives in the first place. While we 
have O(n 3) algorithms for determining the grammatical- 
ity of a sentence, parsing, as a component of a natural 
language understanding tool, involves more than simply 
determining all of the grammatical interpretations of an 
input. Ill order for a natural anguage system to process 
input efficiently and robustly, it must process all intelligi- 
ble sentences, grammatical or not, while not significantly 
reducing the system's efficiency. 
This observ~ttiou s ggests two other answers to the cen- 
tral question of this paper. Probabilistic models offer 
a convenient scoring method for partial interpretations 
in a well-formed substring table. High probability con- 
stituents in the parser's chart call be used to interpret 
ungrammat.ical sentences. Probabilistic models can also 
*Special I.hanks to Jerry Hobbs and F3ob Moo*re at S\[II for 
providing access to their colllptllel's, and to Salim \]-/oukos, Pe- 
l:er Brown,  and Vincent and Steven Della Piel.ra ,-xt IF3M for their 
inst.ructive lessons on probabi|isti,: modell ing of natural  I:mguage. 
be used for efficiency by providing a best-first search 
heuristic to order the parsing agenda. 
This paper proposes an agenda-based probabilistic hart 
parsing algorithm which is both robust and efficient. The 
algorithm, 7)icky 1, is considered robust because it will 
potentially generate all constituents produced by a pure 
bottom-up arser and rank these constituents by likeli- 
hood. The efficiency of the algorithm is achieved through 
a technique called probabilistic prediction, which helps 
the algorithm avoid worst-case behavior. Probabilistic 
prediction is a trainable technique for modelling where 
edges are likely to occur in the chart-parsing process. 2 
Once the predicted edges are added to the chart using 
probabilistic prediction, they are processed in a style 
similar to agenda-based chart parsing algorithms. By 
limiting the edges in the chart to those which are pre- 
dicted by this model, the parser can process a sentence 
while generating only the most likely constituents given 
the input. 
In this paper, we will present the "Picky parsing al- 
gorithm, describing both the original features of the 
parser and those adapted from previous work. Then, 
we will compare the implementation f ` picky with exist- 
ing probabilistic and non-probabilistic parsers. Finally, 
we will report the results of experiments exploring how 
`picky's algorithm copes with the tradeoffs of efficiency, 
robustness, and accuracy. 3 
2. Probab i l i s t i c  Mode ls  in  "P icky  
The probabilistic models used ill the implementation of
"Picky are independent of the algorithm. To facilita.te the 
comparison between the performance of "Picky and its 
predecessor, "Pearl, the probabilistic model ilnplelnented 
for "Picky is similar to "Pearl's coring nlodel, the context- 
l 'pearl =-- probabil istic Earley-style parser  (~-Ear l ) .  "Picky =- 
probabil istic CI(Y-like parser ( 'P-CKY). 
2Some famil iarity with chart  parsing terminology is assumed in 
this paper. For terminological definitions, see \[9\], \[t0l, \[11\], or \[17\]. 
3Sections 2 and 3, the descriptions of the probabil istie models 
used in ",Picky and the T'icky algorithn,,  are similar in content 
to the corresponding sections of Magernmn and Weir\[13\]. The 
experimental  results and discussions which follow in sections .1-6 
~tre original. 
40 
free grammar with context-sensitive probability (CFG 
with CSP) model. This probabilistic model estimates 
the probability of each parse T given the words in the 
sentence S, P(TIS), by assuming that each non-terminal 
and its immediate children are dependent on the non- 
terminal's iblings and parent and on the part-of-speech 
trigram centered at the beginning of that rule: 
P(TIS) ~- I I  P(A  --+ a\]C --~ 13A7, aoala2) (1) 
AET 
where C is the non-terminal node which immediately 
dominates A, al is the part-of-speech associated with the 
leftmost word of constituent A, and a0 and a2 are the 
parts-of-speech of the words to the left and to the right 
of al, respectively. See Magerman and Marcus 1991 \[12\] 
for a more detailed description of the CFG with CSP 
model. 
3. The  Pars ing  A lgor i thm 
A probabilistic language model, such as the aforemen- 
tioned CFG with CSP model, provides a metric for eval- 
uating the likelihood of a parse tree. However, while it 
may suggest a method for evaluating partial parse trees, 
a language model alone does not dictate the search strat- 
egy for determining the most likely analysis of an input. 
Since exhaustive search of the space of parse trees pro- 
duced by a natural language grammar is generally not 
feasible, a parsing model can best take advantage of a 
probabilistic language model by incorporating it into a 
parser which probabilistically models the parsing pro- 
cess. "Picky attempts to model the chart parsing process 
for context-free grammars using probabilistic prediction. 
Picky parses sentences in three phases: covered left- 
corner phase (I), covered bidirectional phase (II), and 
tree completion phase (III). Each phase uses a differ- 
ent method for proposing edges to be introduced to the 
parse chart. The first phase, covered left-corner, uses 
probabilistic prediction based on the left-corner word of 
the left-most daughter of a. constituent to propose dges. 
The covered bidirectional phase also uses probabilistic 
prediction, but it allows prediction to occur from the 
left-corner word of any daughter of a constituent, and 
parses that constituent outward (bidirectionally) from 
that daughter. These phases are referred to as "cov- 
ered" because, during these phases, the parsing mech- 
anism proposes only edges that have non-zero proba- 
bility according to the prediction model, i.e. tha.t have 
been covered by the training process. The final phase, 
tree completion, is essentially an exhaustive search of all 
interpretations of the input, according to the gra.mn\]a.r. 
However, the search proceeds in best-first order, accord- 
ing to the measures provided by the language model. 
This phase is used only when the probabilistic prediction 
model fails to propose the edges necessary to complete 
a parse of the sentence. 
The following sections will present and motivate the pre- 
diction techniques used by the algorithm, and will then 
describe how they are implemented in each phase. 
3 .1 .  P robab i l i s t i c  P red ic t ion  
Probabilistie prediction is a general method for using 
probabilistic information extracted from a parsed corpus 
to estimate the likelihood that predicting an edge at a 
certain point in the chart will lead to a correct analysis 
of the sentence. The Picky algorithm is not dependent 
on the specific probabilistic prediction model used. The 
model used in the implementation, which is similar to 
the probabilistic language model, will be described. 4 
The prediction model used in the implementation of 
Picky estimates the probability that an edge proposed 
at a point in the chart will lead to a correct parse to be: 
P( A --+ otB\[3\]aoal ~. ), (2) 
where ax is the part-of-speech of the left-corner word of 
B, a0 is the part-of-speech of the word to the left of al, 
and a~ is the part-of-speech of the word to the right of 
a l .  
To illustrate how this model is used, consider the sen- 
tence 
The cow raced past the barn. (3) 
The word "cow" in the word sequence "the cow raced" 
predicts NP  --+ det n, but not NP  --4 det  n PP ,  
since PP is unlikely to generate a verb, based on train- 
ing material, s Assuming the prediction model is well 
trained, it will propose the interpretation of "raced" 
as the beginning of a participial phrase modifying "the 
cow," as in 
The cow raced past the barn mooed. (4) 
However, the interpretation of "raced" as a past par- 
ticiple will receive a low probability estimate relative to 
the verb interpretation, since the prediction aodel only 
considers local context. 
4It is not necessary for ~he prediction model to be the same as 
the language model used to evaluate complete analyses. However, 
it is helpful if this is the ca.se, so that the probability estimates of 
incomplete dges will be consistent with the probability estimates 
of completed constituents. 
SThroughout this discussion, we will describe the prediction 
process using wo,-ds as the predictors of edges. In the implementa- 
tion, due to sparse data concerns, only parts-of-speech are used to 
predict edges. Give,, more robust estimation techniques, a prob- 
abilistic prediction model conditioned on word sequences i likely 
to perform as well or better. 
41 
The process of probabilistic prediction is analogous to 
that of a human parser recognizing predictive lexical 
items or sequences in a sentence and using these hints to 
restrict he search for the correct analysis of the sentence. 
For instance, a sentence beginning with a wh-word and 
auxiliary inversion is very likely to be a question, and try- 
ing to interpret it as an assertion is wasteful. If a verb is 
generally ditransitive, one should look for two objects to 
that verb instead of one or none. Using probabilistic pre- 
diction, sentences whose interpretations are highly pre- 
dictable based on the trained parsing model can be ana- 
lyzed with little wasted effort, generating sometimes no 
more than ten spurious constituents for sentences which 
contain between 30 and 40 constituents! Also, in some 
of these cases every predicted rule results in a completed 
constituent, indicating that the model made no incorrect 
predictions and was led astray only by genuine ambigu- 
ities in parts of the sentence. 
3 .2 .  Exhaust ive  P red ic t ion  
When probabilistic prediction fails to generate the edges 
necessary to complete a parse of the sentence, exhaus- 
tive prediction uses the edges which have been generated 
in earlier phases to predict new edges which might com- 
bine with them to produce a complete parse. Exhaus- 
tive prediction is a combination of two existing types of 
prediction, "over-the-top" prediction \[11\] and top-down 
filtering. 
Over-the-top rediction is applied to complete dges. A 
completed edge A -+ a will predict all edges of the form 
B -+ flAT. 6 
Top-down filtering is used to predict edges in order to 
complete incomplete dges. An edge of the form A --4 
aBoBxB2f l ,  where a B1 has been recognized, will predict 
edges of the form B0 + 3' before B1 and edges of the 
form B2 --4 ~ after B1. 
3.3. Bid i rec t iona l  Pars ing  
The only difference between phases I and II is that phase 
II allows bidirectional parsing. Bidirectional parsing is 
a technique for initiating the parsing of a constituent 
from any point in that constituent. Chart parsing algo- 
rithms generally process constituents from left-to-right. 
For instance, given a grammar ule 
A -+ B1B2. . -B , ,  (5) 
6In the implementation of "Picky, over-the-top rediction fi)r 
A --+ o' will only predict edges of the form B -+ A~'. This liJnitaticm 
on over-the-top recliction is due to the expensive bookl~eeping 
involved in bidirectional parsing. See the section on bidirectional 
parsing for more details. 
a parser generally would attempt o recognize a B1, then 
search for a B2 following it, and so on. Bidirectional 
parsing recognizes an A by looking for any Bi. Once a 
Bi has been parsed, a bidirectional parser looks for a 
/3/-1 to the left of the Bi, a Bi+I to the right, and so 
on.  
Bidirectional parsing is generally an inefficient tech- 
nique, since it allows duplicate edges to be introduced 
into the chart. As an example, consider a context-free 
rule NP -+ DET N, and assume that there is a deter- 
miner followed by a noun in the sentence being parsed. 
Using bidirectional parsing, this NP rule can be pre- 
dicted both by the determiner and by the noun. The 
edge predicted by the determiner will look to the right 
for a noun, find one, and introduce a new edge consisting 
of a completed NP. The edge predicted by the noun will 
look to the left for a determiner, find one, and also intro- 
duce a new edge consisting of a completed NP. Both of 
these NPs represent identical parse trees, and are thus 
redundant. If the algorithm permits both edges to be 
inserted into the chart, then an edge XP --+ ~ NP/3 will 
be advanced by both NPs, creating two copies of every 
XP edge. These duplicate XP edges can themselves be 
used in other rules, and so on. 
To avoid this propagation of redundant edges, the parser 
must ensure that no duplicate dges are introduced into 
the chart. 79icky does this simply by verifying every time 
an edge is added that the edge is not already in the chart. 
Although eliminating redundant edges prevents exces- 
sive inefficiency, bidirectional parsing may still perform 
more work than traditional left-to-right parsing. In the 
previous example, three edges are introduced into the 
chart to parse the NP -+ DET N edge. A left-to-right 
parser would only introduce two edges, one when the 
determiner is recognized, and another when the noun is 
recognized. 
The benefit of bidirectional parsing can be seen when 
probabilistic prediction is introduced into the parser. 
Freqneatly, the syntactic structure of a constituent is 
not determined by its left-corner word. For instance, 
in the sequence V NP PP, the prepositional phrase PP 
can modify either the noun phrase NP or the entire verb 
phrase V NP. These two interpretations require different 
VP rules to be predicted, but the decision about which 
rule to use depends on more than just the verb. The cor- 
rect rule may best be predicted by knowing the preposi- 
tion used in the PP. Using probabilistic prediction, the 
decision is made by pursuing the rule which has the high- 
est probability according to the prediction model. This 
rule is then parsed bidirectionally. If this rule is in fact 
the correct rule to analyze the constituent, hen no other 
42 
predictions will be made for that constituent, and there 
will be no more edges produced than in left-to-right pars- 
ing. Thus, the only case where bidirectional Parsing is 
less efficient han left-to-right parsing is when the pre- 
diction model fails to capture the elements of context of 
the sentence which determine its correct interpretation. 
3 .4 .  The  Three  Phases  o f  7~icky  
Covered Le f t -Corner  The first phase uses probabilis- 
tic prediction based on the part-of-speech sequences from 
the input sentence to predict all grammar ules which 
have a non-zero probability of being dominated by that 
trigram (based on the training corpus), i.e. 
P(A --4 BSlaoala2 ) > O i6) 
where al is the part-of-speech of the left-corner word of 
B. In this phase, the only exception to the probabilis- 
tic prediction is that any rule which can immediately 
dominate the preterminal category of any word in the 
sentence is also predicted, regardless of its probability. 
This type of prediction is referred to as exhaustive pre- 
diction. All of the predicted rules are processed using a 
standard best-first agenda processing algorithm, where 
the highest scoring edge in the chart is advanced. 
Covered B id i rect iona l  If an S spanning the entire 
word string is not recognized by the end of the first 
phase, the covered bidirectional phase continues the 
parsing process. Using the chart generated by the first 
phase, rules are predicted not only by the trigram cen- 
tered at the left-corner word of the rule, but by the 
trigram centered at the left-corner word of any of the 
children of that rule, i.e. 
V(A --+ ,~B*lbob~b2 ) > 0. (7) 
where bl is the part-of-speech associated with the left- 
most word of constituent B. This phase introduces in- 
complete theories into the chart which need to be ex- 
panded to the left and to the right, as described in the 
bidirectional parsing section above. 
Tree  Complet ion  If the bidirectional processing fails 
to produce a successful parse, then it is assumed that 
there is some part of the input sentence which is not 
covered well by the training material. In the final phase, 
exhaustive prediction is performed on all complete the- 
ories which were introduced in the previous phases but 
which are not predicted by the trigrams beneath t.heln 
(i.e. V(rule \] trigram) = 0). 
In this phase, edges ~tre only predicted by their left- 
corner word. As mentioned previously, bidirect.ional 
parsing can be inefficient when the prediction model is 
inaccurate. Since all edges which the pledictioa model 
assigns non-zero probability have already been predicted, 
the model can no longer provide any information for 
future predictions. Thus, bidirectional parsing in this 
phase is very likely to be inefficient. Edges already in 
the chart will be parsed bidirectionally, since they were 
predicted by the model, but all new edges will be pre- 
dicted by the left-corner word only. 
Since it is already known that the prediction model will 
assign a zero probability to these rules, these predictions 
are instead scored based on the number of words spanned 
by the subtree which predicted them. Thus, this phase 
processes longer theories by introducing rules which can 
advance them. Each new theory which is proposed by 
the parsing process is exhaustively predicted for, using 
the length-based scoring model. 
The final phase is used only when a sentence is so far 
outside of the scope of the training material that none 
of the previous phases are able to process it. This phase 
of the algorithm exhibits the worst-case xponential be- 
havior that is found in chart parsers which do not use 
node packing. Since the probabilistic model is no longer 
useful in this phase, the parser is forced to propose an 
enormous number of theories. The expectation (or hope) 
is that one of the theories which spans most of the sen- 
tence will be completed by this final process. Depending 
on the size of the grammar used, it may be unfeasible 
to allow the parser to exhaust all possible predicts be- 
fore deciding an input is ungrammatical. The question 
of when the parser should give up is an empiricM issue 
which will not be explored here. 
Post -process ing:  Par t ia l  Pars ing  Once the final 
phase has exhausted all predictions made by the gram- 
mar, or more likely, once the probability of all edges 
in the chart falls below a certain threshold, Picky deter- 
mines the sentence to be ungrammatical. However, since 
the chart produced by 7)icky contains all recognized con- 
stituents, sorted by probability, the chart can be used to 
extract partial parses. As implemented, T'icky prints out 
the most probable completed S constituent. 
4. Why a New A lgor i thm? 
Previous research efforts have produced a wide vari- 
ety of parsing algorithms for probabilistic and non- 
probabilistie grammars. One might question the need 
for a. new algorithm to deal with context-sensitive prob- 
abilistic models. However, these previous efforts have 
generally failed to address both efficiency and robust- 
hess effe(:ti rely. 
For noll-probabilistic grammar models, tile CKY algo- 
rithm \[9\] \[17\] provides efficiency and robustness in poly- 
nomia.1 time, O(6'n3). C,I(Y can be modified to ha.n- 
43 
dle simple P-CFGs \[2\] without loss of efficiency. How- 
ever, with the introduction of context-sensitive proba- 
bility models, such as the history-based grammar\[l\] and 
the CFG with CSP models\[12\], CKY cannot be mod- 
ified to accommodate these models without exhibiting 
exponential behavior in the grammar size G. The linear 
behavior of CKY with respect o grammar size is depen- 
dent upon being able to collapse the distinctions among 
constituents of the same type which span the same part 
of the sentence. However, when using a context-sensitive 
probabilistic model, these distinctions are necessary. For 
instance, in the CFG with CSP model, the part-of- 
speech sequence generated by a constituent affects the 
probability of constituents that dominate it. Thus, two 
constituents which generate different part-of-speech se- 
quences must be considered individually and cannot be 
collapsed. 
Earley's algorithm \[6\] is even more attractive than CKY 
in terms of efficiency, but it suffers from the same expo- 
nential behavior when applied to context-sensitive prob- 
abilistic models. Still, Earley-style prediction improves 
the average case performance of en exponential chart- 
parsing algorithm by reducing the size of the search 
space, as was shown in \[12\]. However, Earley-style pre- 
diction has serious impacts on robust processing of un- 
grammatical sentences. Once a sentence has been de- 
termined to be ungrammatical, Earley-style prediction 
prevents any new edges from being added to the parse 
chart. This behavior seriously degrades the robustness 
of a natural anguage system using this type of parser. 
A few recent works on probabilistic parsing have pro- 
posed algorithms and devices for efficient, robust chart 
parsing. Bobrow\[3\] and Chitrao\[4\] introduce agenda- 
based probabilistic parsing algorithms, although nei- 
ther describe their algorithms in detail. Both algo- 
rithms use a strictly best first search. As both Chitrao 
and Magerman\[12\] observe, a best first search penalizes 
longer and more complex constituents (i.e. constituents 
which are composed of more edges), resulting in thrash- 
ing and loss of efficiency. Chitrao proposes a heuristic 
penalty based on constituent length to deal with this 
problem. Magerman avoids thrashing by calculating the 
score of a parse tree using the geometric mean of the 
probabilities of the constituents contained in the tree. 
Moore\[14\] discusses techniques for improving the effi- 
ciency and robustness of chart parsers for unification 
grammars, but the ideas are applicable to probabilistic 
grammars as well. Some of the techniques proposed are 
well-known ideas, such as compiling e-t, ra.nsitions (null 
gaps) out of the grammar and heuristically controlling 
the introduction of predictions. 
The Picky parser incorporates what we deem to be the 
most effective techniques of these previous works into 
one parsing algorithm. New techniques, uch as proba- 
bilistic prediction and the multi-phase approach, are in- 
troduced where the literature does not provide adequate 
solutions. Picky combines the standard chart parsing 
data structures with existing bottom-up and top-down 
parsing operations, and includes a probabilistic version 
of top-down filtering and over-the-top prediction. Picky 
also incorporates a limited form of bi-directional pars- 
ing in a way which avoids its computationally expensive 
side-effects. It uses an agenda processing control mech- 
anism with the scoring heuristics of Pearl. 
Wi th  the exception of probabilistic prediction, most of 
the ideas in this work individually are not original to the 
parsing technology literature. However, the combination 
of these ideas provides robustness without sacrificing ef- 
ficiency, and efficiency without losing accuracy. 
5. Resu l ts  o f  Exper iments  
The Picky parser was tested on 3 sets of 100 sentences 
which were held out from the rest of the corpus during 
training. The training corpus consisted of 982 sentences 
which were parsed using the same grammar that Picky 
used. The training and test corpora re samples from the 
MIT's Voyager direction-finding system. 7 Using Picky's 
grammar, these test sentences generate, on average, over 
100 parses per sentence, with some sentences generated 
over 1,000 parses. 
The purpose of these experiments i to explore the im- 
pact of varying of Picky's parsing algorithm on parsing 
accuracy, efficiency, and robustness. For these exper- 
iments, we varied three attributes of the parser: the 
phases used by parser, the maximum number of edges 
the parser can produce before failure, and the minimum 
probability parse acceptable. 
In the following analysis, the accuracy rate represents 
the percentage of the test sentences for which the high- 
est probability parse generated by the parser is identical 
to the "correct" pa.rse tree indicated in the parsed test 
corpus, s 
Efficiency is measured by two ratios, the prediction ratio 
and the completion ratio. The prediction ratio is defined 
as the ratio of number of predictions made by the parser 
7Spec ia l  thanks  to V ic tor  Zue  at  M IT  for  the  use of  the  speech  
data  f rom MIT 's  Voyager  sys tem.  
8There  are  two except ions  to th is  accuracy  measure .  I f  t i le 
parser  generates  a p laus ib le  parse  for a sentences  wh ich  has  mul t i -  
pie p laus ib le  in t .e rpretat ions ,  the  parse  is cons idered  cc~rrcct. Also.  
if the  parser  generates  a correct; pal'se~ I)ll~ the  parsecl  test  corpus  
conta ins  an  incor rect  parse  (i.e. if there  is an  er ror  in the  answer  
key) ,  the  parse  is cons idered  col-rect.  
44 
during the parse of a sentence to the number of con- 
stituents necessary for a correct parse. The completion 
ratio is the ratio of the number of completed edges to 
the number of predictions during the parse of sentence. 
Robustness cannot be measured irectly by these ex- 
periments, since there are few ungrammatical sentences 
and there is no implemented method for interpreting the 
well-formed substring table when a parse fails. However, 
for each configuration of the parser, we will explore the 
expected behavior of the parser in the face of ungram- 
matical input. 
Since Picky has the power of a pure bottom-up arser, 
it would be useful to compare its performance and effi- 
ciency to that of a probabilistic bottom-up arser. How- 
ever, an implementation of a probabilistic bottom-up 
parser using the same grammar produces on average 
over 1000 constituents for each sentence, generating over 
15,000 edges without generating a parse at all! This 
supports our claim that exhaustive CKY-like parsing al- 
gorithms are not feasible when probabilistic models are 
applied to them. 
5 .1 .  Cont ro l  Conf igurat ion  
The control for our experiments i  the configuration of 
Picky with all three phases and with a maximum edge 
count of 15,000. Using this configuration, :Picky parsed 
the 3 test sets with an 89.3% accuracy rate. This is 
a slight improvement over Pearl's 87.5% accuracy rate 
reported in \[12\]. 
Recall that we will measure the efficiency of a parser 
configuration by its prediction ratio and completion ratio 
on the test sentences. A perfect prediction ratio is 1:1, 
i.e. every edge predicted is used in the eventual parse. 
However, since there is ambiguity in the input sentences, 
a 1:1 prediction ratio is not likely to be achieved. Picky's 
prediction ratio is approximately than 4.3:1, and its ratio 
of predicted edges to completed edges is nearly 1.3:1. 
Thus, although the prediction ratio is not perfect, on 
average for every edge that is predicted more than one 
completed constituent results. 
This is the most robust configuration of Picky which will 
be attempted in our experiments, ince it includes bidi- 
rectional parsing (phase II) and allows so many edges to 
be created. Although there was not a sufficient num- 
ber or variety of ungrammatical sentences to explore 
the robustness of this configuration further, one inter- 
esting example did occur in the test sets. The sentence 
How do I how do I get to MIT? 
is an ungranm~atical but interpretable sentence which 
begins with a restart. The Pearl parser would have gen- 
erated no analysis tbr the latter part of the sentence and 
the corresponding sections of the chart would be empty. 
Using bidirectional probabilistic prediction, Picky pro- 
duced a correct partial interpretation of the last 6 words 
of the sentence, "how do I get to MIT?" One sentence 
does not make for conclusive evidence, but it repre- 
sents the type of performance which is expected from 
the Picky algorithm. 
5 .2 .  Phases  vs .  E f f i c iency  
Each of Picky's three phases has a distinct role in the 
parsing process. Phase I tries to parse the sentences 
which are most standard, i.e. most consistent with the 
training material. Phase II uses bidirectional parsing to 
try to complete the parses for sentences which are nearly 
completely parsed by Phase I. Phase III uses a simplis- 
tic heuristic to glue together constituents generated by 
phases I and II. Phase III is obviously inefficient, since it 
is by definition processing atypical sentences. Phase II 
is also inefficient because of the bidirectional predictions 
added in this phase. But phase II also amplifies the in- 
efficiency of phase III, since the bidirectional predictions 
added in phase II are processed further in phase III. 
Pred. Comp. 
Phases Ratio Ratio 
I 1.95 1.02 
I,II 2.15 0.94 
II 2.44 0.86 
I,III 4.01 1.44 
III 4.29 1.40 
I,II,III 4.30 1.28 
II,III 4.59 1.24 
Coverage %Error 
75.7% 2.3% 
77.0% 2.3% 
77.3% 2.0% 
88.3% 11.7% 
88.7% 11.3% 
89.3% 10.7% 
89.7% 10.3% 
Table 1: Prediction and Completion Ratios and accuracy 
statistics for Picky configured with different subsets of 
Picky's three phases. 
In Table 1, we see the efficiency and accuracy of Picky 
using different, subsets of the parser's phases. Using the 
control parser (phases I, II, and II), the parser has a 4.3:1 
prediction ratio and a 1.3:1 completion ratio. 
By omitting phase III, we eliminate nearly half of the 
predictions and half the completed edges, resulting in 
a 2.15:1 prediction ratio. But this efficiency comes at 
the cost of coverage, which will be discussed in the next 
section. 
By omitting phase II, we observe a slight reduction in 
predictions, but an increase in completed edges. This 
behavior esults from the elimination of the bidirectional 
predictions, which tend to genera.re duplicate edges. 
Note that this configuration, while slightly more efficient, 
45 
is less robust in processing ungrammatical input. 
5 .3 .  Phases  vs .  Accuracy  
For some natural anguage applications, uch as a natu- 
ral language interface to a nuclear reactor or to a com- 
puter operating system, it is imperative for the user to 
have confidence in the parses generated by the parser. 
Picky has a relatively high parsing accuracy rate of 
nearly 90%; however, 10% error is far too high for fault- 
intolerant applications. 
Phase No. 
I + II 238 
III 62 
Overall 300 
Accuracy Coverage %Error 
97% 77% 3% 
60% 12% 40% 
89.3% 89.3% 10.7% 
Table 2: 7~icky's parsing accuracy, categorized by the 
phase which the parser reached in processing the test 
sentences. 
Consider the data in Table 2. While the parser has an 
overall accuracy rate of 89.3%, it is.far more accurate on 
sentences which are parsed by phases I and II, at 97%. 
Note that 238 of the 300 sentences, or 79%, of the test 
sentences are parsed in these two phases. Thus, by elimi- 
nating phase III, the percent error can be reduced to 3%, 
while maintaining 77% coverage. An alternative to elim- 
inating phase III is to replace the length-based heuristic 
of this phase with a secondary probabilistic model of the 
difficult sentences in this domain. This secondary model 
might be trained on a set of sentences which cannot be 
parsed in phases I and II. 
5 .4 .  Edge  Count  vs .  Accuracy  
In the original implementation of the Picky algorithm, 
we intended to allow the parser to generate dges un- 
til it found a complete interpretation or exhausted all 
possible predictions. However, for some ungrammati- 
cal sentences, the parser generates tens of thousands of 
edges without terminating. To limit the processing time 
for the experiments, we implemented a maximum edge 
count which was sufficiently large so that all grammat- 
ical sentences in the test corpus would be parsed. All 
of the grammatical test sentences generated a parse be- 
fore producing 15,000 edges. However, some sentences 
produced thousands of edges only to generate an incor- 
rect parse. In fact, it seemed likely tha,t there might be 
a correlation between very high edge counts and incor- 
rect parses. We tested this hypothesis by varying the 
maximum edge count. 
In Table 3, we see an increase in efficiency and a decrease 
Maximum Pred. Comp. 
Edge Count Ratio Ratio 
15,000 4.30 1.35 
1,000 3.69 0.93 
500 3.08 0.82 
300 2.50 0.86 
150 1.95 0.92 
100 1.60 0.84 
Coverage %Error 
89.3% 10.7% 
83.3% 7.0% 
80.3% 5.3% 
79.3% 2.7% 
66.0% 1.7% 
43.7% 1.7% 
Table 3: Prediction and Completion Ratios and accuracy 
statistics for 7~icky configured with different maximum 
edge count. 
in accuracy as we reduce the maximum number of edges 
the parser will generate before declaring a sentence un- 
grammatical. By reducing the maximum edge count by 
a factor of 50, from 15,000 to 300, we can nearly cut 
in half the number of predicts and edges generated by 
the parser. And while this causes the accuracy rate to 
fall from 89.3% to 79.3%, it also results in a significant 
decrease in error rate, down to 2.7%. By decreasing the 
maximum edge count down to 150, the error rate can be 
reduced to 1.7%. 
5 .5 .  P robab i l i ty  vs .  Accuracy  
Since a probability represents the likelihood of an inter- 
pretation, it is not unreasonable to expect he probabil- 
ity of a parse tree to be correlated with the accuracy of 
the parse. However, based on the probabilities associ- 
ated with the "correct" parse trees of the test sentences, 
there appears to be no such correlation. Many of the 
test sentences had correct parses with very low probabil- 
ities (10-1?), while others had much higher probabilities 
(10-2). And the probabilities associated with incorrect 
parses were not distinguishable from the probabilities of 
correct parses. 
The failure to find a correlation between probability a.nd 
accuracy in this experiment does not prove conclusively 
that no such correlation exists. Admittedly, the training 
corpus used for all of these experiments i far smaller 
than one would hope to estimate the CFG with CSP 
model parameters. Thus, while the model is trained well 
enough to steer the parsing search, it may not be suffi- 
ciently trained to provide meaningful probability values. 
6. Conc lus ions  
There are many different applications of natural lan- 
guage parsing, and each application has a different cost 
threshold for efficiency, robustness, and accuracy. '\['he 
"Pick), algorithm introduces a framework for integral.ing 
46 
these thresholds into the configuration of the parser in 
order to maximize the effectiveness of the parser for the 
task at hand. An application which requires a high de- 
gree of accuracy would omit the Tree Completion phase 
of the parser. A real-time application would limit the 
number of edges generated by the parser, likely at the 
cost of accuracy. An application which is robust to er- 
rors but requires efficient processing of input would omit 
the Covered Bidirectional phase. 
The :Picky parsing algorithm illustrates how probabilis- 
tic modelling of natural anguage can be used to improve 
the efficiency, robustness, and accuracy of natural lan- 
guage understanding tools. 
REFERENCES 
1. Black, E., Jelinek, F., Lafferty, J., M~german, D. M., 
Mercer, R. and Roukos, S. 1992. Towards History-based 
Grammars: Using Richer Models of Context in Prob- 
abilistic Parsing. In Proceedings of the February 1992 
DARPA Speech and Natural Language Workshop. Ar- 
den House, NY. 
2. Brown, P., Jelinek, F., and Mercer, R. 1991. Basic 
Method of Probabilistic Context-free Grammars. IBM 
Internal Report. Yorktown Heights, NY. 
3. Bobrow, R. J. 1991. Statistical Agenda Parsing. In Pro- 
ceedings of the February 1991 DARPA Speech and Nat- 
ural Language Workshop. Asilomar, California. 
4. Chitrao, M. and Grishman, R. 1990. Statistical Parsing 
of Messages. In Proceedings of the June 1990 DARPA 
Speech and Natural Language Workshop. Hidden Valley, 
Pennsylvania. 
5. Church, K. 1988. A Stochastic Parts Program and Noun 
Phrase Parser for Unrestricted Text. In Proceedings of 
the Second Conference on Applied Natural Language 
Processing. Austin, Texas. 
6. Earley, J. 1970. An Efficient Context-Free Parsing Algo- 
rithm. Communications of the A CM Vol. 13, No. 2, pp. 
94-102. 
7. Gale, W. A. and Church, K. 1990. Poor Estimates of 
Context are Worse than None. In Proceedings of the 
June 1990 DARPA Speech and Natural Language Work- 
shop. Hidden Valley, Pennsylvania. 
8. Jelinek, F. 1985. Self-orgmlizing Language Modeling for 
Speech Recognition. IBM Report. 
9. Kasami, T. 1965. An Efficient Recognition and Syn- 
tax Algorithm for Context-Free Languages. Scientific 
Report AFCRL-65-758, Air Force Cambridge Research 
Laboratory. Bedford, Massachusetts. 
10. Kay, M. 1980. Algorithm Schemata and Data Structures 
in Syntactic Processing. CSL-80-1~, October 1980. 
11. Kimball, J. 1973. Principles of Surface Structure Parsing 
in Natural Language. Cognition, 2.15-47. 
12. Magerman, D. M. and Marcus, M. P. 1991. Pearl: A 
Probabilistic Chart Parser. In Proceedings of the Euro- 
pean ACL Conference, Mavcli 1991. Berlin, Germany. 
13. Magerman, D. M. and Weir, C. 1992. Probabilisti?: Pre- 
diction and Picky Chart Parsing. In Proceedings of the 
47  
February 1992 DARPA Speech and Natural Language 
Workshop. Arden House, NY. 
14. Moore, R. and Dowding, J. 1991. Efficient Bottom-Up 
Parsing. In Proceedings of the February 1991 DARPA 
Speech and Natural Language Workshop. Asilomar, Cal- 
ifornia. 
15. Sharman, R. A., Jelinek, F., and Mercer, R. 1990. Gen- 
erating a Grammar for Statistical Training. In Proceed- 
ings of the June 1990 DARPA Speech and Natural Lan- 
guage Workshop. Hidden Valley, Pennsylvania. 
16. Seneff, Stephanie 1989. TINA. In Proceedings of the Au- 
gust 1989 International Workshop in Parsing Technolo- 
gies. Pittsburgh, Pennsylvania. 
17. Younger, D. H. 1967. Recognition and Parsing of 
Context-Free Languages in Time n 3. Information and 
ControlVol. 10, No. 2, pp. 189-208. 
