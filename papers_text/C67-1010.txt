The Re levance  of Some Compi le r  CQnst ruct ion  
Techn iques  to  the Descr ip t ion  and Trans la t ion  
Of Languages  
by 
Steven I ,  Lasz lo  
Western  Union Te legraph  Co. 
The f ramework  is mach ine- t rans la t ion .  Compi le r -bu i ld ing  
can fo r 'a  var ie ty  of reasons  be cons idered  as  a spec ia l  case  of 
mach ine- t rans la t ion .  It  is  the purpose  of th is  paper  to exp l i ca te  
some techn iques  used  in compi le r -bu i ld ing ,  and to re la te  these  to 
l ingu is t ic  theory  and to the pract i ce  of mach ine- t rans la t ion .  "
The genera l ly  observed  mach ine- t rans la t ion  procedure  could  
be schernat i zed  as  in F IGURE 1, or  to put i t  another  way ,  
le 
2. 
3. 
Pars ing  the  source - text .  
T rans la t ion  f rom source  to ob jec t - language.  
Synthes is  of g ramrrmt ica l ly  cor rec t  ob jec t - text .  
F IGURE 1. " 
b reak-down,  t rans la t ion ,  and recompos i t ion .  The t rans la t ion  
usua l ly  occurs  on the leve l  of some s impl i f ied ,  cannon ica l  fo rm 
(that is not necessar i l y  the kerne l - fo rm)  of both languages ,  such 
that  the source - text  is decomposed,  and the ob jec t - text  recomposed 
f rom this  fo rm.  The t rans la t ion  a lgor i thm usua l ly  requ i res  a 
s ta tement  of the s t ruc ture  of both the source  and the ob jec t - language,  
a.s we l l  as  the s ta temen~f  some pr imi t ive - to -pr imi t ive  
* Cur rent ly  a t  Dec is ion  S~stems,  Inc.  
-- I -  
cor respondence  parad igm for  both syntact i c  and lex ica l  p r imi t ives .  
Compi le rs  on the other  hand work  on the bases  of only the f i r s t  two 
s teps  of F IGURE 1. : b reakdown,  . and t rans la t ion .  Consequent ly ,  
the processor  requ i res  only s ta tements  of the s t ruc ture  of the 
source  - language and of the cor respondence  parad igm.  That  does  
not imp ly  that  the s t ruc ture  of the ob jec t - language is i r re levant to  
the process  of t rans la t ion ,  but that  it  is imp l i c i t  in the 
cor respondence  parad igm,  and in the se lec t ion  of what  is a 
p r imi t ive  or  te rmina l  in the descr ip t ion  of the Source~- language.  
Through the use  of examples  i t  wi l l  be shown that  BNF  and 
s imi la r  language-descr ip t ion  dev ices  (8) a re  - -  by  themse ives  - -  
both ana ly t i ca l ly  and generat ive ly  inadequate  and depend on o ther  
dev ices ,  imp l i c i t  in the t rans la t ion  a lgor i thm.  It  wi l l  be  shown 
that  by some extens ions  of the not ion of P - ru les  and some 
app l i ca t ions  of the concept  of T-r___.~e__.s (4), a descr ip t ion  that  is  bpth  
ana ly t i ca l ly  and generat ive ly  adequate  may be const ructed  fo r  
p rogramming languages .  The programming language P .  O. L .  Z (IZ}, 
(13) was  se lec ted  for  the examples  because  an adequate ,  fu l ly  
exp l i c i t  descr ip t ion  does  ex is t  for  it; fu r thermore ,  the language 
conta ins  most  syntact i ca l ly  p rob lernat i c  features  of o ther  
p rogramming languages  as  we l l  as  p resent ing  a few unique prob lems 
in descr ip t ion  that  a re  wor thy  of a t tent ion .  
? The fa i lu re  to come to gr ips  with the  ~ prob lem is  
su f f i c ient  to demonst ra te  the inadequacy  of BNF  and s imi la r  dev ices  
? (8). The s impl i f ied  program-segments  in F IGURE 2, serve  to 
i l l us t ra te  
EXAMPLE I. 
I .  Let A be variable. 
2. Let B be = "7". 
3. Let C be = "9.5 'i. 
4. Let D be = ". 07Z". 
5. A=B+C/D.  
6. Pr in t  A. 
EXAMPLE Z. 
Def ine Funct  (A, B) = (C). 
Q 
End.  
- - -and  e l sewhere - - -  
Funct  (Q, R) -- (Z). 
V = D +K ~Funct  (P,T}. 
F IGURE Z. 
-2 -  
this p rob lem.  B'NF and s imi la r  dev ices  would generate  a parse  
des ignat ing  "A, "B" ,  etc.  in qEXAMPLE 1. as  ident i f ier  (a 
syntact ic  word -c lass )  hut would fai l  to ind icate that the var ious  
occur rences  of a given ident i f ier  (e. g . ,  "A"  in s ta tements  1. ,  5 . ,  
and 6. ) a re  that of the same lex ica l  token or semant ic  object .  
Re lated to the ident i ty p rob lem is the res t r i c t ion  that each 
ident i f ier  occur r ing  in a p rogram s ta tement  must  a l so  occur  in one 
and only one def init ion.  This res t r i c t ion  may be ca l led  the 
de f in i t ionprob lem.  BNF,  e tc . ,  do not handle the def in i t ion 
prob lem.  Other man i fes ta t ions  of the ident i ty and def in i t ion 
prob lems are  assoc ia ted  with the use of macro -  or compound 
funct ions (see EXAMPLE Z. ,  F IGURE Z.),  subscr ip t  express ions ,  
etc.  
Since there  ex ists  a demonst rab le  necess i ty  for  es tab l i sh ing  
the above ment ioned ident i t ies  and res t r i c t ion  (3), compi le rs  
conta in  - -  impl ic i t  in the t rans la t ion  a lgor i thm - -  an e laborate  
tab le -bu i ld ing / tab le -search ing / ident i ty - tes t ing  procedure .  Without 
such procedures ,  the syntact ic  descr ip t ion  is inadequate,  fu l l  
ana lys i s  and t rans la t ion  imposs ib le .  In o rder  to deal  with these  
prob lems expl ic i t ly ,  it was dec ided to incorporate  a
t rans format iona l  component  a long with the BNF- l i ke  phrase-  
s t ruc ture  component  in the descr ip t ion  of P .  O. L .  2 .  The above  
reasons  for  pos i t ing a t rans format iona l  component  a re  in essence  
the programming- language equiva lents  of Chomsky ls  o r ig ina l  
reasons  to use t rans format ions  in the descr ip t ion  of natura l  
languages .  
Rule 1. M 9- # ,M,se1 .1 ,  # 
where  ' !M" is  the init ia l  symbol ,  "#" is the boundary  marker ,  
and the subscr ip t  wil l  be expla ined la ter .  
Rule Z. M -~DEFINE, functment ion ,  p rogram,  END 
sel .  I 
where  the convent ion is used that  te rmina l  symbo ls  a re  a l l  
capi ta l  l e t te rs ,  and members  of the in termed ia te  a lphabet  
a re  in lower  case .  
Rule 3. p rogram-k . .  . ,  p laceho lder ,  M,  . . . 
F IGURE 3. 
In F IGURE 3. ,  in a s imp l i f i ed  fo rm it is shown that  the phrase-  
s t ruc ture  component  generates  funct ion def in i t ions (17), (18) 
embedded in others  (see Rule 3. ), and that  the fo rm of the funct ion 
is generated  in the def in i t ion - -  as  the expans ion of the symbo l  
-3 -  
" functment ion"  - -  generat ing  p lace -ho lders  for  ins tances  of use of 
the funct ion.  T rans format ions  rep lace  the p lace -ho lders  with the 
appropr ia te  fo rm of the funct ion generated  in the def init ion, thus 
account ing  for both the ident i ty and the def in it ion prob lems.  Other 
t rans format ions  exist  to handle other ins tances  of these prob lems 
e. g . ,  labels ,  ident i f ie rs ,  subscr ip t  express ions .  The method is : 
ident ica l :  the fo rm is generated  in the re levant  definit ion, p lace -  
ho lders  a re  generated  for  ins tances  of use,  and the p lace -ho lders  
a re  rep laced  t rans format iona l ly  with the cor rec t  fo rm generated  in 
the def init ion.  
Other t rans format ions  deal  with addi t ional  notat ional  ! 
res t r i c t ions  of P.  O. L .Z .  One such res t r i c t ion  is that a funct ion 
def in i t ion may re ference  other  funct ions but a def in i t ion may not be 
embedded in another .  Def in i t ions (see F IGURE 3. ) a re  in fact  
generated  embedded,  and it becomes  necessary  to pos i t  some 
exbedding t ra .ns format ion  (7), mov ing  the nested  def in i t ions outs ide 
the "parent"  def init ion.  There  exist  severa l  proofs  in the l i te ra ture  
estab l i sh ing  the equiva lence between languages  generated  by 
grammars  with and without the use of boundary  markers  (5), (10). 
The exbedding t rans format ion  may be expressed  more  s imply  if 
boundarymarkers  a re  used (see F IGURE 4. ). 
#, . . . ,  #, M, #, . . . ,  #.> #, M, #, #, . . . ,  # 
or  
M 
F IGURE 4o 
The boundary -markers  may be deleted la ter  by another  
transformation, or they may rewrite as carriage-returns on some 
keyboard, depending on the orthography of the particular 
implementation and med ium.  The T-rules may be generated by 
positing a set of elementary transformations (i. e. , single node 
operations ) and a set of formation and ~ombination rules over the 
set of elementary transformations, prJoducing some set of compound 
or complex transformations. This i~ not significantly different 
f rom having locally ordered subsets of a set of elementary 
-4 -  
t rans format ions  (11), (1Z)? 
Syntact ic  descr ip t ions  of p rogramming languages  pub l i shed in 
the past  =- e. g . ,  (1), (9), (19) - -  genera l ly  Cook a program-  
s ta tement  to cor respond to the bas ic  unit of : 'grammar,  denoted by 
the. in it ia l  symbo l  of the phrase-s t ruc ture  grammar .  The grammer  
d i scussed  here  takes  a funct ion def in it ion (s~e F IGURE 3. ) as  i ts 
bas ic  unit. P rogram-s ta tements  a re  e lements  of the in termed ia te  
a lphabet  and have no other  theoret i ca l  standing or s ign i f icance.  
The natura l  language cor re la tes  of p rogram-s ta tements  a re  
sentences ,  and funct ion def in i t ions cor respond to some la rger -  
than-sentence  units of d i scourse  (e. g . ,  paragraphs  or chapters ) .  
This p rocedure  may lead to some syntact ic  or at least  l inguist ic  
method  of d is t ingu ish ing between "mean ingfu l "  and "mean ing less"  
. programs.  Using a syntax of p rogra ins ,  o r funct lons  a l so  y ie lds 
an intu i t ive ly  more  p leas ing set  of re la t ionsh ips  among e lements  ~f 
the descr ibed  language.  
The present  g rammar  makes  no ef for t  to d is t ingu ish  between'  
"e legant"  and ine legant"  p rogramming,  but does d is t ingu ish  both 
f rom "ungrammat ica l "  Code. Dec la r ing  arguments  or var iab les  
never  ? re ferenced is inelegant;  re fe renc ing  undec la red  operands  is  
ungrammat ica l .  To re turn  momentar i l y  to the ident i ty and 
def in i t ion prob lems:  it is poss ib le  to generate  a def init ion such that  
there  a re  no cor respond ing  p lace -ho lders ;  but each p lace -ho lder  
must  be rep laced  by some def in i t ion -generated  fo rm of the 
appropr ia te  nature .  In descr ib ing  the def in i t ion and use of funct ions ,  
separate  p lace-h01ders  accomodate  recurs ive  use and the genera l  
case  of usage.  
It is cus tomary  to give descr ip t ions  of p rogramming languages  
such that - -  with the except ion of some smal l  set  of key words  such  
as a r i thmet ic  operators ,  de l imi te rs  of def in i t ions,  etc.  - -  the 
phrase-s t ruc ture  grammar  generates  character -s t r ings  for  the 
!ex ica l  i tems.  In natura i  languages the vocabu lary  is f ixed. There  
is a stable,  l im i ted  Set of vocabu lary  e lements  that cor respond to 
each syntact ic  word -c lass .  In p rogramming languages that is not 
the case :  a smal l  set  of word -c lasses  rewri te each as a set  of one 
or  more  key-words ;  o thers  wil l  expand - -  through the use of some 
phras&-s t ruc ture  ru les  - -  as any string? of characters .  In the 
descr ip t ian  of P.  O. L. Z it was decided to separate  the lexicon= 
generat ion  ru les  f rom the phrase-s t ruc ture  ru les .  Though they are  
the same shape that BNF ru les  of the same purpose  .would be, it  
was de~erm~ned that separat ing  the ru les  generat ing  lex ica l  i tems - -  
even  as morphophonemic  ru les  of natura l  languages represent  a 
separate  c lass  of ru les  - -  is more  intui t ively acceptab le :  a c lass  of 
o r thograph ic  ru les .  F IGURE 5. ind icates  what some of these  ru les  
~night look l ike. 
In the tekt 0g F IGURE 3 . ,  Rule 1., the exp lanat ion  of the 
subscr ip t  was de fer red .  Funct ions  and  operators  used in 
p rogramming languages ?a re  two notat ional  var iants  of the same 
concept  (17). Depending onthe  notat ion of the sys tem,  any operat ion  
may be expressed  e i ther  as an operator  or a funct ion.  Since in 
- 5 -  
Rule I. identifier * alpha (, characters t r ing> 
where  "~ . . .  > " enc lose  opt iona l  i tems.  
Rule ,- 2. ~ *I alpha } characterstring t numera! 
where "~...~" enclose alternative options such that one and 
on ly  onetoftHeJ  opt ions  enumerated  must~be se lec ted .  
iqu~e ~. alpha * 
~, character  s t r ing> 
f I 2 Ru le  4. numera l *  " 
0 1 
F IGURE ? 5. " 
P .  O. L .  Z there  are  both  funct ions  and  operators ,  depend ing  on 
notat iona l  conven ience ,  newly  de f ined  operat ions  may be  def ined  
as  e i ther .  \]Being de f ined  as  one or  the  o ther ,  however ,  res t r i c ts  
the i r  d i s t r ibut ion  or  "embeddab i l i ty"  to  cer ta in  contexts .  Th is  
phenomenon i s  accounted  fo r  by  the  use  of a dev ice  s imi la r  to  the  
notat ion  of complex  s_ymbol theory  (4), (11),  ( lZ ) ,  (15). The  
P .O .L .  Z notat ion  is  such  that  funct ions  ( i .  e . ,  de f ined  macro  s) 
ma 7 occur  as  funct ions ,  coord inate  t rans format ions  ( l inear  o r  
o therwise)  o r  as  operands  (denot ing  the i r  va lue  fo r  a par t i cu la r  ? 
se t  of a rguments )  and  operators  may appear  as  a r i thmet ic ,  
re la t iona l  o r  log ica l  operators ,  depend ing  on range  and/or  domain  
as  we l l  as  d i s t r ibut iona l  res t r i c t ions .  In  P .  O. L .  2 every  program - 
however  s imple  or  complex  - -  must  have  an  "outermost"  funct ion ,  
one in to  wh ich  a l l  o thers  a re  embedded by  the  P - ru les .  The  f i r s t  
ru le  of the  grammar  (see  F IGURE 5 . ,  Ru le  1. ) expands  the  
"outermost"  funct ion .  E l sewhere  in  the  phrase-s t ructure  
component ,  depend ing  on context ,  o ther  
"Msel. i s'' are introduced, as well as ~'Mse!. Zs", "Msel. 3 s'', 
"M and "M ~s". sel. 4 s", sel. 
-6 -  
Th~ese cor respond to the var ious  embedded occur rences  of funct ions 
and Operators .  The rewr i tes  or  expans ions of the severa l  vers ions  
of "M" a re  a lmost  ident ica l  except  for  the s t r ing  denot ing the left  
b racket  de l imi t ing the def init ion.  A l te rnat ive  so lut ions ex ist  but 
the above one appears  most  intu i t ive ly  sat is fy ing .  
There  are  proofs  and demonst ra t ions  in the l i te ra ture  to the 
effect that full, left, or  r ight  parenthes is  notat ion is context - f ree ,  
but not much on el ided parenthes is  notat ion.  We have  in the past  
const ructed  severa l  context -sens i t i ve  grammars  generat ing  e l ided 
parenthes is  notat ion,  but they did not seem very  sat i s fac tory .  
Adding a dev ice  not hereto fore  assoc ia ted  with product ion - ru les ,  ai 
set  of ru les  was produced  to generate  the el ided parentheses  
notat ion such that the ru les  look and process  very  much l ike context -  
f ree  ru les  (see F IGURE 6.) .  .~ 
Rule I. 
Rule 2. 
express ion  9- express ion   
/ 
"express ion n+e,  operator  n ,  express io  
expr  e s s ion n+e 
express ionn-~ "(", express ion ,  ")" 
ident i f ier  p iaceho lder  
unaryoperator ,  express ion  
where  for  one cyc le  (I I)n remains  the same in teger  between 
s ubru les  I and 2 and e remains  the same in teger  inc rement .  
F IGURE 6. 
Though the "counter"  n and the " increment  " eare  not par t  of a 
known sys tem of p roduct ion  ru les ,  the i r  nature  and the reason  for  
the i r  use can be c lear ly  stated.  The i r  use per ,n i t s  a s imp ler  
scanner  for  the syntax than context - res t r i c ted  ru les  do. 
A s imi la r  counter  is used to handle the concatenat ions  of n -  
tup les . .  In P .  O. L. Z an i tem of data may be dec la red  as  a pair, 
t r ip le ,  or n - tup le ,  and operat ions  may be per fo rmed over  n l tup les  
of ident ica l  n . s  (see F IGURE 7. ). 
-7.- 
Rule i. n-tuple-expression ")" n-tuple, operator, n-tuple 
wlrere n = n = n. Any  of the n- tuples may however be 
concatenates of two or more  n-tuples of smaller n-s such that: 
Rule Z. n-tuple ~ (m) - tuple, concatenator, (n-m____)-tupl e 
where n andre  are positive integers and the arithmetic 
relationship designated obtains. 
F IGURE 7. 
Of course, the (m)-tuple or the (n-m)-tuple may be further broken 
down by the same rule into further concatenates. 
The above are selected examples rather than an exhaustive 
list of the transformations in the syntax of P. O. L.Z. A rigorous 
statement of the transformations is available, stated as mappings 
Of structural descriptions into structural descriptions, accounting 
for the attachment and detachment of nodes. Presenting the 
selection of transformations here in a descriptive rather than a 
rigorous fo rm offers an idea of the general approach. 
Const ruct ing  the phrase  s t ruc ture  component ,  many  a l te rnat ive  
so lut ions or approaches  came up at  every  juncture ;  in spec i fy ing  
the t rans format iona l  component ,  the a l te rnat ives  quick ly  mul t ip l ied  
beyond manageab le  propor t ions .  It is cer ta in ly  the case  that  
th roughout  its b r ie f  but exci t ing h i s to ry ,  one of the a ims  of 
t rans format iona l  theory  has been to descr ibe  language in te rms of 
the most? res t r i c ted  - -  hence s imp les t - -  sys tem poss ib le .  But one 
may wel l  regard  the sets  of dev ices  so la r  advanced  as par ts  of 
transformational theory, as algorithmic alphabets (in the A .A .  
Markov /M~rt in  Davis (5), (15) sense). Specific algorithmic 
alphabets are more  or less arbitrary selections f rom some universe 
of elementary and compound algorithms bound by  formation and 
com~ination rules. This paper is not a proposal toward the 
modification, extension or restriction of transformational theory, 
mere ly  at, indication that an overlapping set of algorithms may be 
selected to deal with a similar but not identical problem: the 
structural ~ " " descrlptlon of some formal notation systems such as 
programming languages. 
Beyond doubt, substantial simplification and sophistication may 
be ach ieved  over  the mode l  descr ibed  here .  The ef fort  here  has 
been toward the application of linguistic techniques to artificial 
languages, conforming to the linguist's notion of what it means  to 
"give an account 0f the data", rather than to the laxer standards of 
themethods  used to describe programming languages. 
-8- 
BIBLIOGRAPHY:? " ~ 
I .  Ba~kus, J .W.  "The Syntax and Semantics of the. Proposed 
International Algebraic Language of the Zurich ACM-GAMM 
Conference",  Information Processing;  Proceedings of the 
International Conference on Information Process ing.  Par i s :  
z. 
." 
4. 
5. 
6. 
7 ? 
8. 
?9. 
10. 
11?" 
13. 
14. 
15. 
16. 
17. 
UNESCO, 1960. 
Cheatham, J r . ,  T .E .  The Introduction of Definitional Facilities.. 
into Higher Level P rogramming Languages. Draft Report i 
CA-6605-061 I. ; Wakefield, Mass.  : Computer Associates, Inc. ,  
1966. 
The Theory and Construction Of Compi lers 
Dra f t  Report CA-6606-0111. ; Wakefield, Mass.  : Computer~ 
Associates,  Inc.,  1966'. 
Chomsky, Noam. . . . .  Aspects of the Theory of Syntax. Cambrtdge~ " , 
Mass . : 'M IT  P ress ,  1965. 
"On Certain Formal  Propert ies  of 
Grammars" ,  Information and Control, 2, (1959), pp. 137-167. 
Davis, Martin. Computabil ity and Unsolvabil ity. New York;  
McGraw-Hil l ,  1958. 
F i lm, re .  C. J .  "The Posit ion of Embedding Transformat ions 
in a Grammar" , .Word ,19 ,  Z  (1963). 
Corn, Saul? "Specif ication Languages for Mechanical Languages 
and their P rocessors  -- A Baker 's  Dozen", Communications of
the ACM, 7, 12, (1961). 
Heising, W.P .  'TI istory and Summary of FORTRAN Standardi- 
zation Development for the ASA", Communications of the ACM, 
7, ~0, (1964). 
Landweber, P.S.  "Three Theorems on Phrase Structure 
Grammars  of Type I", Information and Control, 6, (1963), 
pp. 131-136. 
Lakoff, G .P .  Cycles and Complex Symbols in English Syntax. 
Unpublished Manuscript, Indiana UniversitY, \]963. 
Some Constraints On Transformat ions.  
Unpublished manuscript,  Indiana Univers i fy ,  1964. 
Laszlo,  S.I. "Report on a Proposed General  Purpose Procedure 
Oriented Computer Programming Language"? Repo.rt of the 
Institute of Educational Research,  Bloomington: Indiama 
? University, 1965. 
"P .O .L . ,  A General  Purpose, Procedure 
Oriented Computer Programming Language" Repor t of the 
Inst itute Of Educational Research, Bloomington: Indianan 
University, 1965. 
Matthews, P.H., "Problems of Selection in Transformational 
Grammar",  Journal of L.!nguistics, i, (1965)? 
Mark,v,  A .A . ,  Theory of Algorithms. Washington, D.C. : 
U.S. Pr int ing Office, 1965. 
McCarthy, John "A Basis for a Mathematical  Theory of 
Computation", in Computer Programming and Formal  Systems. 
P. Braff0rt & D. Hirschberg (ed.), Amsterdam:  N. Holland 
"9 -  
Pub l i sh ing  Co. 1963.  . 
18. et a l . ,  L ISP  1.5 P rogrammer 's  Manual ;  
Cambr idge ,  Mass . :  MIT  P ress ,  196Z. 
19. Naur ,  Peter  (ed.)  "Rev ised  Repor t  on the A lgor i thmic  Language 
ALGOL 60", Communicat ions  of the ACM, repr in ted  in 
? E .W.  D i jks t ra ,  A P r imer  of ALGOL Programming.  New York :  
Academic  P ress ,  1964. 
-10 -  
