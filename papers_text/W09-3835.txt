Proceedings of the 11th International Conference on Parsing Technologies (IWPT), pages 222?225,
Paris, October 2009. c?2009 Association for Computational Linguistics
Interactive Predictive Parsing 1
Ricardo Sa?nchez-Sa?ez, Joan-Andreu Sa?nchez and Jose?-Miguel Bened??
Instituto Tecnolo?gico de Informa?tica
Universidad Polite?cnica de Valencia
Cam?? de Vera s/n, Valencia 46022 (Spain)
{rsanchez, jandreu, jbenedi}dsic.upv.es
Abstract
This paper introduces a formal framework
that presents a novel Interactive Predic-
tive Parsing schema which can be oper-
ated by a user, tightly integrated into the
system, to obtain error free trees. This
compares to the classical two-step schema
of manually post-editing the erroneus con-
stituents produced by the parsing system.
We have simulated interaction and cal-
culated evalaution metrics, which estab-
lished that an IPP system results in a high
amount of effort reduction for a manual
annotator compared to a two-step system.
1 Introduction
The aim of parsing is to obtain the linguistic in-
terpretation of sentences, that is, their underlying
syntactic structure. This task is one of the fun-
damental pieces needed by a computer to uns-
derstand language as used by humans, and has
many applications in Natural Language Process-
ing (Lease et al, 2006).
A wide array of parsing methods exist, in-
cluding those based on Probabilistic Context-Free
Grammars (PCFGs). (Charniak, 2000; Collins,
2003; Johnson, 1998; Klein and Manning, 2003;
Matsuzaki et al, 2005; Petrov and Klein, 2007).
The most impressive results are achieved by sub-
tree reranking systems, as shown in the semi-
supervised method of (McClosky et al, 2006),
or the forest reranking approximation of (Huang,
2008) in which packed parse forests (compact
structures that contain many possible tree deriva-
tions) are used.
These state-of-the-art parsers provide trees of
excelent quality. However, perfect results are vir-
1Work supported by the MIPRCV ?Consolider Inge-
nio 2010? (CSD2007-00018), iTransDoc (TIN2006-15694-
CO2-01) and Prometeo (PROMETEO/2009/014) reserach
projects, and the FPU fellowship AP2006-01363.
tually never achieved. If the need of one-hundred-
percent error free trees arises, the supervision of a
user that post-edits and corrects the errors is un-
avoidable.
Error free trees are needed in many tasks such as
handwritten mathematical expressions recognition
(Yamamoto et al, 2006), or creation of new gold
standard treebanks (Delaclergerie et al, 2008)).
For example, in the creation of the Penn Tree-
bank grammar, a basic two-stage setup was em-
ployed: a rudimentary parsing system providad a
skeletal syntactic representation, which then was
manually corrected by human annotators (Marcus
et al, 1993).
In this paper, we introduce a new formal frame-
work that tightly integrates the user within the
parsing system itself, rather than keeping him iso-
lated from the automatic tools used in a classi-
cal two-step approach. This approach introduces
the user into the parsing system, and we will call
it ?interactive predictive parsing?, or simply IPP.
An IPP system is interactive because the user is in
continuous contact with the parsing process, send-
ing and receiving feedback. An IPP system is also
predictive because it reacts to the user corrections:
it predicts and suggest new parse trees taking into
account the new gold knowledge received from
the user. Interactive predictive methods have been
studied and successfully used in fields like Auto-
matic Text Recognition (Toselli et al, 2008) and
Statistical Machine Translation (Barrachina et al,
2009; Vidal et al, 2006) to ease the work of tran-
scriptor and translators.
Assessment of the amount of effort saved by the
IPP system will be measured by automatically cal-
culated metrics.
2 Interactive Predictive Parsing
A tree t, associated to a string x1|x|, is composed
by substructures that are usually referred as con-
stituents or edges. A constituent cAij is a span de-
222
fined by a nonterminal symbol (or syntactic tag) A
that covers the substring xij .
Assume that using a given probabilistic context-
free grammar G as the model, the parser analyzes
the input sentence x = x1 . . . x|x| and produces
the parse tree t?
t? = argmax
t?T
pG(t|x), (1)
where pG(t|x) is the probability of parse tree t
given the input string x using model G, and T is
the set of all possible parse trees for x.
In an interactive predictive scenario, after ob-
taining the (probably incorrect) best tree t?, the user
is able to modify the edges cAij that are incorrect.
The system reacts to each of the corrections intro-
duced by the human by proposing a new t?? that
takes into account the corrected edge. The order
in which incorrect constituents are reviewed deter-
mines the amount of effort reduction given by the
degree of correctness of the subsequent proposed
trees.
There exist several ways in which a human ana-
lyzes a sentende. A top-to-bottom may be consid-
ered natural way of proceeding, and we follow this
approach in this work. This way, when a higher
level constituent is corrected, possible erroneous
constituents at lower levels are expectedly auto-
matically recalculated.
The introduced IPP interaction process is sim-
ilar to the ones already established in Computer-
Assisted Text Recognition and Computer-Assisted
Translation 1.
Within the IPP framework, the user reviews the
constituents contained in the tree to assess their
correctness. When the user find an incorrect edge
he modifies it, setting the correct label and span.
This action implicitly validates a subtree that is
composed by the corrected edge plus all its ances-
tor edges, which we will call the validated prefix
tree tp. When the user replaces the constituent cAij
with the correct one c?Aij , the validated prefix tree
is:
tp(c?Aij ) = {cBmn : m ? i, n ? j
d(cBmn) ? d(c?Aij )}
(2)
with d(cDpq) being the depth of constituent cDpq.
1In these fields, the user reads the sentence from left to
right. When the user finds and corrects an erroneus word, he
is implicitly validating the prefix sentence up to that word.
The remaining suffix sentence is recalculated by the system
taking into account the validated prefix sentece.
When a constituent correction is performed, the
prefix tree tp(c?Aij ) is fixed and a new tree t?? that
takes into account the prefix is proposed
t?? = argmax
t?T
pG(t|x, tp(c?Aij )). (3)
Given that we are working with context-free
grammars, the only subtree that effectively needs
to be recalcuted is the one starting from the par-
ent of the corrected edge. Let the corrected edge
be c?Aij and its parent cDst, then the following tree is
proposed
t?? = argmax
t?T
pG(t|x, tp) = (t? \ t?Dst) ? t??Dst , (4)
with
t??Dst = argmax
tDst?Tst
pG(tDst|xmn, c?Aij ) . (5)
Expression (4) represents the newly proposed
tree t??, which consists of original proposed tree
t? minus the subpart of the original proposed tree
t?Dst (whose root is the parent of the corrected edge
cDst) plus the newly calculated subtree t??
D
st (whose
root is also the parent of the corrected constituent
cDst, but also takes into account the corrected one
as shown in Expression (5)).
In Figure 1 we show an example that intends to
clarify the interactive predictive process. First, the
system provides a proposed parse tree (Fig. 1.a).
Then the user, which has in his mind the correct
reference tree, notices that it has two wrong con-
stituents (cX23 and cZ44) (Fig. 1.b), and choses to re-
place cX23 by cB22 (Fig. 1.c). Here, cB22 corresponds
to c?Aij from expressions (3) and (5).
As the user does this correction, the system au-
tomatically validates the correct prefix: all the an-
cestors of the modified constituent (dashed line in
the figure, tp(c?Aij ) from expression (2)). The sys-
tem also invalidates the subtrees related to the cor-
rected constituent (dotted line line in the figure, t?Dst
from expression (4)).
Finally, the system automatically predicts a new
subtree (t??Dst from expression (4)) (Fig. 1.d). No-
tice how cZ34 changes its span and cD44 is introduced
which provides the correct reference parse.
Within the example shown in Figure 1, the user
would obtain the gold tree with just one correction,
rather than the three operations needed on a two-
step system (one deletion, one substitution and one
insertion).
223
SB Z
Y
ba c d
A
DC
(a) Reference tree
S
ba c d
A
CB
X
Y
Z
(b) Iteration 0:
Proposed out-
put tree 1
S
ba c d
A
CB
X Z 423 4
Y
(c) Iteration 0: Er-
roneus constituents
S
ba c d
A
B 2
2 ?
? ?
Y
(d) Iteration 1:
User corrected
constituent
S
B Z
Y
ba c d
A
DC
3
4
(e) Iteration 1:
Proposed output
tree 2
Figure 1: Synthetic example of user interaction with the IPP system.
3 IPP Evaluation
The objective of the experimentation presented
here is to evaluate the amount of effort saved for
the user using the IPP system, compared to the ef-
fort required to manually correct the trees without
the use of an interactive system. In this section, we
define a standard automatic evaluation protocol,
akin to the ones used in Computer-Aided Trans-
lation and Computer Aided Text Recognition.
In the absence of testing of an interactive sys-
tem with real users, the gold reference trees were
used to simulate system interaction by a human
corrector. In order to do this, the constituents in
the proposed tree were automatically reviewed in a
preorder manner 2. In each step, the constituent in
the proposed tree was compared to the correspond-
ing one in the reference tree: if the constituent was
equivalent no action was taken. When one incor-
rect constituent was found in the proposed tree, it
was replaced by the correct one from the reference
tree. This precise step simulated what a human su-
pervisor would do, that is, to type the correct con-
stituent in place of the erroneus one.
The system then performed the predictive step
(i.e. recalculation of subtrees related to the cor-
rected constituent). We kept a correction count,
which was incremented by one after each predic-
tive step.
3.1 Evaluation metrics
For evaluation, first we report a metric represent-
ing the amount of human correcting work needed
to obtain the gold tree in a classical two-step pro-
cess (i.e. the number of operations needed to post-
edit the proposed tree in orther to obtain the gold
2Interaction in this ordered manner guaranteed that the
evaluation protocol only needed to modify the label A and
the end point j of a given edge cAij , while i remained valid
given the modifications of previous constituents.
one). We then compare this value to a metric that
measures the amount of effort needed to obtain
the gold tree with the human interacting within the
presented IPP system.
Parsing quality is generally assessed by the clas-
sical evaluation metrics, precission, recall and F-
measure. We defined the following metric that
measures the amount of effort needed in order to
post-edit a proposed tree and obtain the gold ref-
erence parse tree, akin to the Word Error Rate
used in Statistical Machine Translation and related
fields:
? Tree Constituent Error Rate (TCER): Min-
imum number of constituent substitution,
deletion and insertion operations needed to
convert the proposed parse tree into the corre-
sponding gold reference tree, divided by the
total number of constituents in the reference
tree 3.
The TCER is in fact strongly related to the F-
measure: the higher the F-measure is, the lower
TCER will be.
Finally, the relevant evaluation metric that as-
sessed the IPP system performance represents the
amount effort that the operator would have to
spend using the system in order to obtain the gold
tree, and is directly comparable to the TCER:
? Tree Constituent Action Rate (TCAC): Num-
ber of constituent corrections performed us-
ing the IPP system to obtain the reference
tree, divided by the total number of con-
stituents in the reference tree.
4 Experimental results
An IPP system was implemented over the classical
CYK-Viterbi algorithm. Experimentation was run
3Edit distance is calcualted over the ordered set of tree
constituents. This is an approximation of the edit distance
between trees.
224
over the Penn Tree bank: sections 2 to 21 were
used to obtain a vanilla Penn Treebank Grammar;
test set was the whole section 23.
We obtained several binarized versions of the
train grammar for use with the CYK. The Chom-
sky Normal Form (CNF) transformation method
from the NLTK4 was used to obtain several right-
factored binary grammars of different sizes 5.
A basic schema was introduced for parsing sen-
tences with out-of-vocabulary words: when an
input word could not be derived by any of the
preterminals in the vanilla treebank grammar, a
very small probability for that word was uniformly
added to all of the preterminals.
Results for the metrics discussed on section 3.1
for different markovizations of the train grammar
can be seen in Table 1. We observe that the perc-
etage of corrections needed using the IPP system
is much lower than the rate of needed corrections
just post-editing the proposed trees: from 42% to
46% in effort reduction by the human supervisor.
These results clearly show that an interactive
predictive system can relieve manual annotators of
a lot of burden in their task.
Note that the presented experiments were done
using parsing models that perform far from the lat-
est F1 results; their intention was to assess the util-
ity of the IPP schema. Expected relative reduc-
tions with IPP systems incorporating state-of-the-
art parsers would not be so large.
PCFG Baseline IPP RelRedF1 TCER TCAC
h=0, v=1 0.67 0.40 0.22 45%
h=0, v=2 0.68 0.39 0.21 46%
h=0, v=3 0.70 0.38 0.22 42%
Table 1: Results for the test set: F1 and TCER
for the baseline system; TCAC for the IPP system;
relative reduction beteween TCER and TCAC.
5 Conclusions
We have introduced a novel Interactive Predictive
Parsing framewrok which can be operated by a
user to obtain error free trees. We have simulated
interaction with this system and calculated evalau-
tion metrics, which established that an IPP system
results in a high amount of effort reduction for a
manual annotator compared to a two-step system.
4http://nltk.sourceforge.net/
5This method implements the vertical (v value) and hori-
zontal (h value) markovizations (Klein and Manning, 2003).
Near term future work includes applying the
IPP scenario to state-of-the-art reranking and pars-
ing systems, as well as in the development of adap-
tative parsing systems
References
Barrachina, Sergio, Oliver Bender, Francisco Casacu-
berta, Jorge Civera, Elsa Cubel, Shahram Khadivi,
Antonio Lagarda, Hermann Ney, Jess Toms, En-
rique Vidal, Juan-Miguel Vilar. 2009. Statistical ap-
proaches to computer-assisted translation. In Com-
putational Linguistics, 35(1) 3-28.
Charniak, Eugene. 2000. A maximum-entropy-
inspired parser. In NAACL ?00, 132-139.
Collins, Michael. 2003. Head-driven statistical mod-
els for natural language parsing. In Computational
Linguistics, 29(4):589-637.
De la Clergerie, ?Eric, Olivier Hamon, Djamel Mostefa,
Christelle Ayache, Patrick Paroubek and Anne Vil-
nat. 2008. PASSAGE: from French Parser Evalua-
tion to Large Sized Treebank. In LREC?08.
Huang, Liang. 2008. Forest reranking: discriminative
parsing with non-local features. In ACL ?08.
Johnson, Mark. 1998. PCFG models of linguistic
tree representation. In Computational Linguistics,
24:613-632.
Klein, Dan and Chistopher D. Manning. 2003. Accu-
rate Unlexicalized Parsing. In ACL ?03, 423-430.
Lease, Matthew, Eugene Charniak, Mark Johnson and
David McClosky. 2006. A look at parsing and its
applications. In National Conference on Artificial
Intelligence, vol. 21-II, 1642-1645.
Marcus, Mitchell P., Mary Ann Marcinkiewicz and
Beatrice Santorini. 1995. Building a Large Anno-
tated Corpus of English: The Penn Treebank. Com-
putational Linguistics 19(2), 313-330.
Matsuzaki, Takuya, Yasuke Miyao and Jun?ichi Tsujii.
2005. Probabilistic CFG with latent annotations. In
ACL ?05, 75-82.
McClosky, David, Eugene Charniak and Mark John-
son. 2006. Effective self-training for parsing. In
HLT-NAACL ?06
Petrov, Slav and Dan Klein. 2007. Improved inference
for unlexicalized parsing. In NAACL-HLT ?07.
Toselli, Alejandro, Vero?nica Romero and Enrique Vi-
dal. 2008. Computer Assisted Transcription of Text
Images and Multimodal Interaction. In MLMI ?08.
Vidal, Enrique, Francisco Casacuberta, Luis Ro-
driguez, Jorge Civera and Carlos D. Martnez Hinare-
jos. 2006. Computer-assisted translation using
speech recognition. In IEEE Trans. on Audio,
Speech, and Language Processing, 14(3), 941-951.
Yamamoto, Ryo, Shinji Sako, Takuya Nishimoto and
Shigeki Sagayama. 2006. On-line recognition
of handwritten mathematical expressions based on
stroke-based stochastic context-free grammar. In
10th International Workshop on Frontiers in Hand-
writing Recognition.
225
