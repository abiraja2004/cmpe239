Weighted and Probabilistic Context-Free
Grammars Are Equally Expressive
Noah A. Smith?
Carnegie Mellon University
Mark Johnson??
Brown University
This article studies the relationship between weighted context-free grammars (WCFGs), where
each production is associated with a positive real-valued weight, and probabilistic context-free
grammars (PCFGs), where the weights of the productions associated with a nonterminal are
constrained to sum to one. Because the class of WCFGs properly includes the PCFGs, one
might expect that WCFGs can describe distributions that PCFGs cannot. However, Z. Chi
(1999, Computational Linguistics, 25(1):131?160) and S. P. Abney, D. A. McAllester, and
P. Pereira (1999, In Proceedings of the 37th Annual Meeting of the Association for Computa-
tional Linguistics, pages 542?549, College Park, MD) proved that every WCFG distribution
is equivalent to some PCFG distribution. We extend their results to conditional distributions,
and show that every WCFG conditional distribution of parses given strings is also the condi-
tional distribution defined by some PCFG, even when the WCFG?s partition function diverges.
This shows that any parsing or labeling accuracy improvement from conditional estimation of
WCFGs or conditional random fields (CRFs) over joint estimation of PCFGs or hidden Markov
models (HMMs) is due to the estimation procedure rather than the change in model class,
because PCFGs and HMMs are exactly as expressive as WCFGs and chain-structured CRFs,
respectively.
1. Introduction
In recent years the field of computational linguistics has turned to machine learning
to aid in the development of accurate tools for language processing. A widely used
example, applied to parsing and tagging tasks of various kinds, is a weighted grammar.
Adding weights to a formal grammar allows disambiguation (more generally, ranking
of analyses) and can lead to more efficient parsing. Machine learning comes in when we
wish to choose those weights empirically.
The predominant approach for many years was to select a probabilistic model?
such as a hidden Markov model (HMM) or probabilistic context-free grammar
(PCFG)?that defined a distribution over the structures allowed by a grammar. Given a
? School of Computer Science, Carnegie Mellon University, Pittsburgh, PA 15217, USA.
E-mail: nasmith@cs.cmu.edu.
?? Department of Cognitive and Linguistic Sciences, Brown University, Providence, RI 02912, USA.
E-mail: Mark Johnson@brown.edu.
Submission received: 30 November 2005; revised submission received: 11 January 2007; accepted for
publication: 30 March 2007.
? 2007 Association for Computational Linguistics
Computational Linguistics Volume 33, Number 4
treebank, maximum likelihood estimation can be applied to learn the probability values
in the model.
More recently, new machine learning methods have been developed or ex-
tended to handle models of grammatical structure. Notably, conditional estimation
(Ratnaparkhi, Roukos, and Ward 1994; Johnson et al 1999; Lafferty, McCallum, and
Pereira 2001), maximum margin estimation (Taskar et al 2004), and unsupervised con-
trastive estimation (Smith and Eisner 2005) have been applied to structured models.
Weighted grammars learned in this way differ in two important ways from traditional,
generative models. First, the weights can be any positive value; they need not sum
to one. Second, features can ?overlap,? and it can be difficult to design a generative
model that uses such features. The benefits of new features and discriminative training
methods are widely documented and recognized.
This article focuses specifically on the first of these differences. It compares the
expressive power of weighted context-free grammars (WCFGs), where each rule is
associated with a positive weight, to that of the corresponding PCFGs, that is, with
the same rules but where the weights of the rules expanding a nonterminal must sum
to one.
One might expect that because normalization removes one or more degrees of free-
dom, unnormalized models should be more expressive than normalized, probabilistic
models. Perhaps counterintuitively, previous work has shown that the classes of proba-
bility distributions defined by WCFGs and PCFGs are the same (Abney, McAllester, and
Pereira 1999; Chi 1999).
However, this result does not completely settle the question about the expressive
power of WCFGs and PCFGs. As we show herein, a WCFG can define a conditional
distribution from strings to trees even if it does not define a probability distribution
over trees. Because these conditional distributions are what are used in classification
tasks and related tasks such as parsing, we need to know the relationship between
the classes of conditional distributions defined by WCFGs and PCFGs. In fact we
extend the results of Chi and of Abney et al, and show that WCFGs and PCFGs both
define the same class of conditional distribution. Moreover, we present an algorithm
for converting an arbitrary WCFG that defines a conditional distribution over trees
given strings but possibly without a finite partition function into a PCFG with the
same rules as the WCFG and that defines the same conditional distribution over trees
given strings.
This means that maximum conditional likelihood WCFGs are non-identifiable, be-
cause there are an infinite number of rule weights all of which maximize the conditional
likelihood.
2. Weighted CFGs
A CFG G is a tuple ?N, S,?, R? where N is a finite set of nonterminal symbols, S ? N is
the start symbol, ? is a finite set of terminal symbols (disjoint from N), and R is a set of
production rules of the form X ? ? where X ? N and ? ? (N ? ?). A WCFG associates
a positive number called the weight with each rule in R.1 We denote by ?X?? the weight
attached to the rule X ? ?, and the vector of rule weights by ? = {?A?? : A ? ? ? R}.
A weighted grammar is the pair G? = ?G,??.
1 Assigning a weight of zero to a rule equates to excluding it from R.
478
Smith and Johnson Weighted and Probabilistic CFGs
Unless otherwise specified, we assume a fixed underlying context-free grammar G.
Let ?(G) be the set of (finite) trees that G generates. For any ? ? ?(G), the score s?(?) of
? is defined as follows:
s?(?) =
?
(X??)?R
(?X??)
f (X??;?) (1)
where f (X ? ?; ?) is the number of times X ? ? is used in the derivation of the tree ?.
The partition function Z(?) is the sum of the scores of the trees in ?(G).
Z(?) =
?
???(G)
s?(?)
Because we have imposed no constraints on?, the partition function need not equal
one; indeed, as we show subsequently the partition function need not even exist. If Z(?)
is finite then we say that the WCFG is convergent, and we can define a Gibbs probability
distribution over ?(G) by dividing by Z(?):
P?(?) =
s?(?)
Z(?)
A probabilistic CFG, or PCFG, is a WCFG in which the sum of the weights of the
rules expanding each nonterminal is one:
?X ? N,
?
(X??)?R
?X?? = 1 (2)
It is easy to show that if G? is a PCFG then Z(?) ? 1. A tight PCFG is a PCFG G?
for which Z(?) = 1. Necessary conditions and sufficient conditions for a PCFG to be
tight are given in several places, including Booth and Thompson (1973) and Wetherell
(1980).
We now describe the results of Chi (1999) and Abney, McAllester, and Pereira (1999).
Let G = {G?} denote the set of the WCFGs based on the CFG G (i.e., the WCFGs in G
all have the same underlying grammar G but differ in their rule weight vectors ?).
Let GZ<? be the subset of G for which the partition function Z(?) is finite, and let
GZ=? = G \ GZ<? be the subset of G with an infinite partition function. Further let GPCFG
denote the set of PCFGs based on G. In general, GPCFG is a proper subset of GZ<?, that
is, every PCFG is also a WCFG, but because there are weight vectors ? that don?t obey
Equation 2, not all WCFGs are PCFGs.
However, this does not mean that WCFGs are more expressive than PCFGs. As
noted above, the WCFGs GZ<? define Gibbs distributions. Again, for a fixed G, let
PZ<? be the probability distributions over the trees ?(G) defined by the WCFGs GZ<?
and let PPCFG be the probability distributions defined by the PCFGs GPCFG. Chi (Propo-
sition 4) and Abney, McAllester, and Pereira (Lemma 5) showed that PZ<? = PPCFG,
namely, that every WCFG probability distribution is in fact generated by some PCFG.
There is no ?PZ=?? because there is no finite normalizing term Z(?) for such WCFGs.
479
Computational Linguistics Volume 33, Number 4
2.1 Chi?s Algorithm for Converting WCFGs to Equivalent PCFGs
Chi (1999) describes an algorithm for converting a WCFG to an equivalent PCFG. Let
G? be a WCFG in GZ<?. If X ? N is a nonterminal, let ?X(G) be the set of trees rooted
in X that can be built using G. Then define:
ZX(?) =
?
???X (G)
s?(?)
For simplicity, let Zt(?) = 1 for all t ? ?. Chi demonstrated that G? ? GZ<? implies
that ZX(?) is finite for all X ? N ? ?.
For every rule X ? ? in R define:
??X?? =
?X??
|?|
?
i=1
Z?i (?)
ZX(?)
where ?i is the ith element of ? and |?| is the length of ?. Chi proved that G?? is a PCFG
and that P?? (?) = s?(?)/Z(?) for all trees ? ? ?(G).
Chi did not describe how to compute the nonterminal-specific partition functions
ZX(?). The ZX(?) are related by equations of the form
ZX(?) =
?
?:X???R
?X??
|?|
?
i=1
Z?i (?)
which constitute a set of nonlinear polynomial equations in ZX(?). Although a numeri-
cal solver might be employed to find the ZX(?), we have found that in practice iterative
propagation of weights following the method described by Stolcke (1995, Section 4.7.1)
converges quickly when Z(?) is finite.
3. Classifiers and Conditional Distributions
A common application of weighted grammars is parsing. One way to select a parse tree
for a sentence x is to choose the maximum weighted parse that is consistent with the
observation x:
??(x) = argmax
???(G):y(?)=x
s?(?) (3)
where y(?) is the yield of ?. Other decision criteria exist, including minimum-loss de-
coding and re-ranked n-best decoding. All of these classifiers use some kind of dynamic
programming algorithm to optimize over trees, and they also exploit the conditional
distribution of trees given sentence observations. A WCFG defines such a conditional
distribution as follows:
P?(? | x) =
s?(?)
?
????(G):y(?? )=x s?(??)
=
s?(?)
Zx(?)
(4)
480
Smith and Johnson Weighted and Probabilistic CFGs
where Zx(?) is the sum of scores for all parses of x. Note that Equation (4) will be
ill-defined when Zx(?) diverges. Because Zx(?) is constant for a given x, solving Equa-
tion (3) is equivalent to choosing ? to maximize P?(? | x).
We turn now to classes of these conditional distribution families. Let CZ<? (CPCFG)
be the class of conditional distribution families that can be expressed by grammars in
GZ<? (GPCFG, respectively). It should be clear that, because PZ<? = PPCFG, CZ<? = CPCFG
since a conditional family is derived by normalizing a joint distribution by its marginals.
We now define another subset of G. Let GZn<? contain every WCFG G? = ?G,??
such that, for all n ? 0,
Zn(?) =
?
???(G):|y(?)|=n
s?(?) < ? (5)
(Note that, to be fully rigorous, we should quantify n in GZn<?, writing ?G?nZn(?)<?.?
We use the abbreviated form to keep the notation crisp.) For any G? ? GZn<?, it also
follows that, for any x ? L(G), Zx(?) < ?; the converse holds as well.
It follows that any WCFG in GZn<? can be used to construct a conditional dis-
tribution of trees given the sentence, for any sentence x ? L(G). To do so, we only
need to normalize s?(?) by Zx(?) (Equation (4)). Let GZn=? contain the WCFGs where
some Zn(?) diverge; this is a subset of GZ=?.2 To see that GZ=? ? GZn<? = ?, consider
Example 1.
Example 1
?A?A A = 1, ?A?a = 1
This grammar produces binary structures over strings in a+. Every such tree receives
score 1. Because there are infinitely many trees, Z(?) diverges. But for any fixed string
an, the number of parse trees is finite. This grammar defines a uniform conditional
distribution over all binary trees, given the string.
For a grammar G? to be in GZn<?, it is sufficient that, for every nonterminal X ? N,
the sum of scores of all cyclic derivations X ?+ X be finite. Conservatively, this can be
forced by eliminating epsilon rules and unary rules or cycles altogether, or by requiring
the sum of cyclic derivations for every nonterminal X to sum to strictly less than one.
Example 2 gives a grammar in GZn=? with a unary cyclic derivation that does not
?dampen.?
Example 2
?A?A A = 1, ?A?A = 1, ?A?a = 1
For any given an, there are infinitely many equally weighted parse trees, so even the
set of trees for an cannot be normalized into a distribution (Zn(?) =?). Generally
speaking, if there exists a string x ? L(G) such that the set of trees that derive x is not
2 Here, full rigor would require quantification of n, writing ?G?nZn (?)=?.?
481
Computational Linguistics Volume 33, Number 4
finite (i.e., there is no finite bound on the number of derivations for strings in L(G); the
grammar in Example 2 is a simple example), then GZn<? and GZ<? are separable.3
For a given CFG G, a conditional distribution over trees given strings is a function
?? ? (?(G) ? [0, 1]). Our notation for the set of conditional distributions that can be
expressed by GZn<? is CZn<?. Note that there is no ?CZn=?? because an infinite Zn(?)
implies an infinite Z(x) for some sentence x and therefore an ill-formed conditional fam-
ily. Indeed, it is difficult to imagine a scenario in computational linguistics in which non-
dampening cyclic derivations (WCFGs in GZn=?) are desirable, because no linguistic
explanations depend crucially on arbitrary lengthening of cyclic derivations.
We now state our main theorem.
Theorem 1
For a given CFG G, CZn<? = CZ<?.
Proof
Suppose we are given weights ? for G such that G? ? GZn<?. We will show that the
sequence Z1(?), Z2(?), ... is bounded by an exponential function of n, then describe
a transformation on ? resulting in a new grammar G?? that is in GZ<? and defines
the same family of conditional distributions (i.e., ?? ? ?(G),?x ? L(G), P?(? | x) =
P?? (? | x)).
First we prove that for all n ? 1 there exists some c such that Zn(?) ? cn. Given G?,
we construct G??? in CNF that preserves the total score for any x ? L(G). The existence
of G??? was demonstrated by Goodman (1998, Section 2.6), who gives an algorithm for
constructing the value-preserving weighted grammar G??? from G?.
Note that G? = ?N?, S,?, R??, containing possibly more nonterminals and rules than G.
The set of (finite) trees ?
(
G?
)
is different from ?(G); the new trees must be binary and
may include new nonterminals.
Next, collapse the nonterminals in N? into one nonterminal, S. The resulting gram-
mar is G??? = ??{S}, S,?, R??, ???. R? contains the rule S ? S S and rules of the form S ? a
for a ? ?. The weights of these rules are
??S?S S = ? = max(1,
?
(X?Y Z)?R?
??X?Y Z) (6)
??S?a = ? = max(1,
?
(X?b)?R?
??X?b) (7)
The grammar G??? will allow every tree allowed by G??? (modulo labels on nonterminal
nodes, which are now all S). It may allow some additional trees. The score of a tree
under G??? will be at least as great as the sum of scores of all structurally equivalent trees
under G???, because ? and ? are defined to be large enough to absorb all such scores. It
follows that, for all x ? L(G):
s??(x) ? s??(x) = s?(x) (8)
3 We are grateful to an anonymous reviewer for pointing this out, and an even stronger point: for a given
G, G and GZn<? have a nonempty set-difference if and only if G has infinite ambiguity (some x ? L(G)
has infinitely many parse trees).
482
Smith and Johnson Weighted and Probabilistic CFGs
Summing over all trees of any given yield length n, we have
Zn(??) ? Zn(??) = Zn(?) (9)
G? generates all possible binary trees (with internal nodes undifferentiated) over
a given sentence x in L(G). Every tree generated by G? with yield length n will have
the same score: ?n?1?n, because every binary tree with n terminals has exactly n ? 1
nonterminals. Each tree corresponds to a way of bracketing n items, so the total number
of parse trees generated by G? for a string of length n is the number of different ways
of bracketing a sequence of n items. The total number of unlabeled binary bracketings
of an n-length sequence is the nth Catalan number Cn (Graham, Knuth, and Patashnik
1994), which in turn is bounded above by 4n (Vardi 1991). The total number of strings of
length n is |?|n. Therefore
Zn(??) = Cn|?|n?n?1?n ? 4n|?|n?n?1?n ? (4|?|??)n (10)
We now transform the original weights ? as follows. For every rule (X ? ?) ? R,
let
??X?? ?
?X??
(8|?|??)t(?) (11)
where t(?) is the number of ? symbols appearing in ?. This transformation results in
every n-length sentence having its score divided by (8|?|??)n. The relative scores of
trees with the same yield are unaffected, because they are all scaled equally. Therefore
G?? defines the same conditional distribution over trees given sentences as G?, which
implies that G? and G?? have the same highest scoring parses. Note that any sufficiently
large value could stand in for 8|?|?? to both (a) preserve the conditional distribution
and (b) force Zn(?) to converge. We have not found the minimum such value, but 8|?|??
is sufficiently large.
The sequence of Zn(?) now converges:
Zn(??) ?
Zn(?)
(8|?|??)n ?
(
1
2
)n
(12)
Hence Z(??) =
??
n=0 Zn(?
?) ? 2 and G?? ? GZ<?. 
Corollary 1
Given a CFG G, CZn<? = CPCFG.
Proof
By Theorem 1, CZn<? = CZ<?. We know that PZ<? = PPCFG, from which it follows that
CZ<? = CPCFG. Hence CZn<? = CPCFG. To convert a WCFG in CZn<? into a PCFG, first
apply the transformation in the proof of Theorem 1 to get a convergent WCFG, then
apply Chi?s method (our Section 2.1). 
483
Computational Linguistics Volume 33, Number 4
Figure 1
A graphical depiction of the primary result of this article. Given a fixed set of productions, G is
the set of WCFGs with exactly those productions (i.e., they vary only in the production weights),
GZ<? is the subset of G that defines (joint) probability distributions over trees (i.e., that have a
finite partition function Z) and PZ<? is the set of probability distributions defined by grammars
in GZ<?. Chi (1999) and Abney, McAllester, and Pereira (1999) proved that PZ<? is
the same as PPCFG, the set of probability distributions defined by the PCFG GPCFG with the same
productions as G. Thus even though the set of WCFGs properly includes the set of PCFGs,
WCFGs define exactly the same probability distributions over trees as PCFGs. This article
extends these results to conditional distributions over trees conditioned on their strings. Even
though the set GZn<? of WCFGs that define conditional distributions may be larger than GZ<?
and properly includes GPCFG, the set of conditional distributions CZn<? defined by GZn<? is
equal to the set of conditional distributions CPCFG defined by PCFGs. Our proof is constructive:
we give an algorithm which takes as input a WCFG G ? GZn<? and returns a PCFG which
defines the same conditional distribution over trees given strings as G.
Figure 1 presents the main result graphically in the context of earlier results.
4. HMMs and Related Models
Hidden Markov models (HMMs) are a special case of PCFGs. The structures they
produce are labeled sequences, which are equivalent to right-branching trees. We can
write an HMM as a PCFG with restricted types of rules. We will refer to the unweighted,
finite-state grammars that HMMs stochasticize as ?right-linear grammars.? Rather than
using the production rule notation of PCFGs, we will use more traditional HMM nota-
tion and refer to states (interchangeable with nonterminals) and paths (interchangeable
with parse trees).
In the rest of the article we distinguish between HMMs, which are probabilistic
finite-state automata locally normalized just like a PCFG, and chain-structured Markov
random fields (MRFs; Section 4.1), in which moves or transitions are associated with
positive weights and which are globally normalized like a WCFG.4 We also distinguish
two different types of dependency structures in these automata. Abusing the standard
terminology somewhat, in a Mealy automaton arcs are labeled with output or terminal
symbols, whereas in a Moore automaton the states emit terminal symbols.5
4 We admit that these names are somewhat misleading, because as we will show, chain-structured MRFs
also have the Markov property and define the same joint and conditional distributions as HMMs.
5 In formal language theory both Mealy and Moore machines are finite-state transducers (Mealy 1955;
Moore 1956); we ignore the input symbols here.
484
Smith and Johnson Weighted and Probabilistic CFGs
A Mealy HMM defines a probability distribution over pairs ?x,??, where x is a
length-n sequence ?x1, x2, ..., xn? ? ?n and ? = ??0,?1,?2, ...,?n? ? Nn+1 is a state (or
nonterminal) path. The distribution is given by
PHMM(x,?) =
(
n
?
i=1
p(xi,?i | ?i?1)
)
p(STOP | ?n) (13)
?0 is assumed, for simplicity, to be constant and known; we also assume that every
state transition emits a symbol (no 
 arcs), an assumption made in typical tagging and
chunking applications of HMMs. We can convert a Mealy HMM to a PCFG by including,
for every tuple ?x,?,?? (x ? ? and ?,? ? N) such that p(x,? | ?) > 0, the rule ? ? x ?,
with the same probability as the corresponding HMM transition. For every ? such that
p(STOP | ?), we include the rule ? ? 
, with probability p(STOP | ?).
A Moore HMM factors the distribution p(x,? | ?) into p(x | ?) ? p(? | ?). A Moore
HMM can be converted to a PCFG by adding a new nonterminal ?? for every state ?
and including the rules ? ? ?? (with probability p(? | ?)) and ?? ? x ? (with probability
p(x | ?)). Stop probabilities are added as in the Mealy case. For a fixed number of states,
Moore HMMs are less probabilistically expressive than Mealy HMMs, though we can
convert between the two with a change in the number of states.
We consider Mealy HMMs primarily from here on. If we wish to define the distri-
bution over paths given words, we conditionalize
PHMM(? | x) =
(
?n
i=1 p(xi,?i | ?i?1)
)
p(STOP | ?n)
?
???Nn+1
(
?n
i=1 p(xi,?
?
i | ??i?1)
)
p(STOP | ??n)
(14)
This is how scores are assigned when selecting the best path given a sequence.
For a grammar G that is right-linear, we can therefore talk about the set of HMM
(right-linear) grammars GHMM, the set of probability distributions PHMM defined by those
grammars, and CHMM, the set of conditional distributions over state paths (trees) that they
define.6
4.1 Mealy Markov Random Fields
When the probabilities in Mealy HMMs are replaced by arbitrary positive weights, the
production rules can be seen as features in a Gibbs distribution. The resulting model
is a type of MRF with a chain structure; these have recently become popular in natural
language processing (Lafferty, McCallum, and Pereira 2001). Lafferty et al?s formulation
defined a conditional distribution over paths given sequences by normalizing for each
sequence x:
PCMRF(? | x) =
(
n
?
i=1
??i?1,xi,?i
)
??n,STOP
Zx(?)
(15)
6 Of course, the right-linear grammar is a CFG, so we could also use the notation GPCFG, PPCFG, and CPCFG.
485
Computational Linguistics Volume 33, Number 4
Using a single normalizing term Z(?), we can also define a joint distribution over
states and paths:
PCMRF(x,?) =
(
n
?
i=1
??i?1,xi,?i
)
??n,STOP
Z(?)
(16)
Let G = {G?} denote the set of weighted grammars based on the unweighted right-
linear grammar G. We call these weighted grammars ?Mealy MRFs.? As in the WCFG
case, we can add the constraint Zn(?) < ? (for all n), giving the class GZn<?.
Recall that, in the WCFG case, the move from G to GZn<? had to do with cyclic
derivations. The analogous move in the right-linear grammar case involves 
 emis-
sions (production rules of the form X ? Y). If, as in typical applications of finite-state
models to natural language processing, there are no rules of the form X ? Y, then
GZn<? is empty and GZn<? = G. Our formulae, in fact, assume that there are no 

emissions.
Because Mealy MRFs are a special case of WCFGs, Theorem 1 applies to them.
This means that any random field using Mealy HMM features (Mealy MRF) such that
?n, Zn(?) < ? can be transformed into a Mealy HMM that defines the same conditional
distribution of tags given words.7
Corollary 2
For a given right-linear grammar G, CHMM = CZ<? = CZn<?.
Lafferty, McCallum, and Pereira?s conditional random fields are typically trained to
optimize a different objective function than HMMs (conditional likelihood and joint
likelihood, respectively). Our result shows that optimizing either objective on the set
of Mealy HMMs as opposed to Mealy MRFs will achieve the same result, modulo
imperfections in the numerical search for parameter values.
4.2 Maximum-Entropy Markov Models
While HMMs and chain MRFs represent the same set of conditional distributions, we
can show that the maximum-entropy Markov models (MEMMs) of McCallum, Freitag,
and Pereira (2000) represent a strictly smaller class of distributions.
An MEMM is a similar model with a different event structure. It defines the distri-
bution over paths given words as:
PMEMM(? | x) =
n
?
i=1
p(?i | ?i?1, xi) (17)
Unlike an HMM, the MEMM does not define a distribution over output sequences x.
The name ?maximum entropy Markov model? comes from the fact that the conditional
7 What if we allow additional features? It can be shown that, as long as the vocabulary ? is finite and
known, we can convert any such MRF with potential functions on state transitions and emissions into
an HMM functioning equivalently as a classifier. If ? is not fully known, then we cannot sum over all
emissions from each state, and we cannot use Chi?s method (Section 2.1) to convert to a PCFG (HMM).
486
Smith and Johnson Weighted and Probabilistic CFGs
distributions p(? | ?, x) typically have a log-linear form, rather than a multinomial form,
and are trained to maximize entropy.
Lemma 1
For every MEMM, there is a Mealy MRF that represents the same conditional distribu-
tion over paths given symbols.
Proof
By definition, the features of the MRF include triples ??i?1, xi,?i?. Assign to the
weight ??i,xj,?k the value PMEMM(?i | ?k, xj). Assign to ??i,STOP the value 1. In computing
PCMRF(? | x) (Equation (15)), the normalizing term for each x will be equal to 1. 
MEMMs, like HMMs, are defined by locally normalized conditional multinomial
distributions. This has computational advantages (no potentially infinite Z(?) terms to
compute). However, the set of conditional distributions of labels given terminals that
can be expressed by MEMMs is strictly smaller than those expressible by HMMs (and
by extension, Mealy MRFs).
Theorem 2
For a given right-linear grammar G, CMEMM ? CHMM.
Proof
We give an example of a Mealy HMM whose conditional distribution over paths (trees)
given sentences cannot be represented by an MEMM. We thank Michael Collins for
pointing out to us the existence of examples like this one. Define a Mealy HMM with
three states named 0, 1, and 2, over an alphabet {a, b, c}, as follows. State 0 is the start
state.
Example 3
Under this model, PHMM(0, 1, 1 | a, b) = PHMM(0, 2, 2 | a, c) = 1. These conditional dis-
tributions cannot both be met by any MEMM. To see why, consider
p(1 | 0, a) ? p(1 | 1, b) = p(2 | 0, a) ? p(2 | 2, c) = 1
This implies that
p(1 | 0, a) = p(1 | 1, b) = p(2 | 0, a) = p(2 | 2, c) = 1
487
Computational Linguistics Volume 33, Number 4
But it is impossible for p(1 | 0, a) = p(2 | 0, a) = 1. This holds regardless of the form of
the distribution p(? | ?, x) (e.g., multinomial or log-linear).
Because P(0, 1, 1 | a, b) = P(0, 2, 2 | a, c) cannot be met by any MEMM, there are
distributions in the family allowed by HMMs that cannot be expressed as MEMMs,
and the latter are less expressive. 
It is important to note that this result applies to Mealy HMMs; our result compares
models with the same dependencies among random variables. If the HMM?s distribu-
tion p(xi,?i | ?i?1) is factored into p(xi | ?i) ? p(?i | ?i?1) (i.e., it is a Moore HMM), then
there may exist an MEMM with the same number of states that can represent some
distributions that the Moore HMM cannot.8
One can also imagine MEMMs in which p(?i | ?i?1, xi, ...) is conditioned on more
surrounding context (xi?1 or xi+1, or the entire sequence x, for example). Conditioning
on more context can be done by increasing the order of the Markov model?all of
our models so far have been first-order, with a memory of only the previous state.
Our result can be extended to include higher-order MEMMs. Suppose we allow the
MEMM to ?look ahead? n words, factoring its distribution into p(?i | ?i?1, xi, xi+1, ...,
xi+n).
Corollary 3
A first-order Mealy HMM can represent some classifiers that no MEMM with finite
lookahead can represent.
Proof
Consider again Example 3. Note that, for all m ? 1, it sets
PHMM(0,
m 1?s
? ?? ?
1, ..., 1 | amb) = 1
PHMM(0, 2, ..., 2
? ?? ?
m 2?s
| amc) = 1
Suppose we wish to capture this in an MEMM with n symbols of look-ahead. Letting
m = n + 1,
p(1 | 0, an+1) ? p(1 | 1, anb) ?
n
?
i=1
p(1 | 1, an?ib) = 1
p(2 | 0, an+1) ? p(2 | 2, anc) ?
n
?
i=1
p(2 | 2, an?ic) = 1
The same issue arises as in the proof of Theorem 2: it cannot be that p(1 | 0, an+1) =
p(2 | 0, an+1) = 1, and so this MEMM does not exist. Note that even if we allow the
8 The HMM shown in Example 3 can be factored into a Moore HMM without any change to the
distribution.
488
Smith and Johnson Weighted and Probabilistic CFGs
MEMM to ?look back? and condition on earlier symbols (or states), it cannot represent
the distribution in Example 3. 
Generally speaking, this limitation of MEMMs has nothing to do with the estima-
tion procedure (we have committed to no estimation procedure in particular) but rather
with the conditional structure of the model. That some model structures work better
than others at real NLP tasks was discussed by Johnson (2001) and Klein and Manning
(2002). Our result?that the class of distributions allowed by MEMMs is a strict subset
of those allowed by Mealy HMMs?makes this unsurprising.
5. Practical Implications
Our result is that weighted generalizations of classical probabilistic grammars (PCFGs
and HMMs) are no more powerful than the probabilistic models. This means that, inso-
far as log-linear models for NLP tasks like tagging and parsing are more successful
than their probabilistic cousins, it is due to either (a) additional features added to
the model, (b) improved estimation procedures (e.g., maximum conditional likelihood
estimation or contrastive estimation), or both. (Note that the choice of estimation proce-
dure (b) is in principle orthogonal to the choice of model, and conditional estimation
should not be conflated with log-linear modeling.) For a given estimation criterion,
weighted CFGs, and Mealy MRFs, in particular, cannot be expected to behave any
differently than PCFGs and HMMs, respectively, unless they are augmented with more
features.
6. Related Work
Abney, McAllester, and Pereira (1999) addressed the relationship between PCFGs and
probabilistic models based on push-down automaton operations (e.g., the structured
language model of Chelba and Jelinek, 1998). They proved that, although the conversion
may not be simple (indeed, a blow-up in the automaton?s size may be incurred), given
G, PPCFG and the set of distributions expressible by shift-reduce probabilistic push-down
automata are weakly equivalent. Importantly, the standard conversion of a CFG into a
shift-reduce PDA, when applied in the stochastic case, does not always preserve the prob-
ability distribution over trees. Our Theorem 2 bears a resemblance to that result. Further
work on the relationship between weighted CFGs and weighted PDAs is described in
Nederhof and Satta (2004).
MacKay (1996) proved that linear Boltzmann chains (a class of weighted models
that is essentially the same as Moore MRFs) express the same set of distributions as
Moore HMMs, under the condition that the Boltzmann chain has a single specific end
state. MacKay avoided the divergence problem by defining the Boltzmann chain always
to condition on the length of the sequence; he tacitly requires all of his models to be in
GZn<?. We have suggested a more applicable notion of model equivalence (equivalence
of the conditional distribution) and our Theorem 1 generalizes to context-free models.
7. Conclusion
We have shown that weighted CFGs that define finite scores for all sentences in their
languages have no greater expressivity than PCFGs, when used to define distributions
489
Computational Linguistics Volume 33, Number 4
over trees given sentences. This implies that the standard Mealy MRF formalism is
no more powerful than Mealy HMMs, for instance. We have also related ?maximum
entropy Markov models? to Mealy Markov random fields, showing that the former is a
strictly less expressive weighted formalism.
Acknowledgments
This work was supported by a Fannie and
John Hertz Foundation fellowship to
N. Smith at Johns Hopkins University. The
views expressed are not necessarily endorsed
by the sponsors. We are grateful to three
anonymous reviewers for feedback that
improved the article, to Michael Collins for
encouraging exploration of this matter and
helpful comments on a draft, and to Jason
Eisner and Dan Klein for insightful
conversations. Any errors are the sole
responsibility of the authors.
References
Abney, Steven P., David A. McAllester,
and Fernando Pereira. 1999. Relating
probabilistic grammars and automata.
In Proceedings of the 37th Annual Meeting of
the Association for Computational Linguistics,
pages 542?549, College Park, MD.
Booth, Taylor L. and Richard A. Thompson.
1973. Applying probability measures to
abstract languages. IEEE Transactions on
Computers, 22(5):442?450.
Chelba, Ciprian and Frederick Jelinek.
1998. Exploiting syntactic structure for
language modeling. In Proceedings
of the 36th Annual Meeting of the
Association for Computational Linguistics
and 17th International Conference on
Computational Linguistics, pages 325?331,
Montreal, Canada.
Chi, Zhiyi. 1999. Statistical properties of
probabilistic context-free grammars.
Computational Linguistics, 25(1):131?160.
Goodman, Joshua T. 1998. Parsing Inside-Out.
Ph.D. thesis, Harvard University,
Cambridge, MA.
Graham, Ronald L., Donald E. Knuth,
and Oren Patashnik. 1994. Concrete
Mathematics. Addison-Wesley,
Reading, MA.
Johnson, Mark. 2001. Joint and conditional
estimation of tagging and parsing models.
In Proceedings of the 39th Annual Meeting of
the Association for Computational Linguistics,
pages 314?321, Toulouse, France.
Johnson, Mark, Stuart Geman, Stephen
Canon, Zhiyi Chi, and Stefan Riezler.
1999. Estimators for stochastic
?unification-based? grammars.
In Proceedings of the 37th Annual
Conference of the Association for
Computational Linguistics, pages 535?541,
College Park, MD.
Klein, Dan and Christopher D. Manning.
2002. Conditional structure versus
conditional estimation in NLP models.
In Proceedings of the Conference on Empirical
Methods in Natural Language Processing,
pages 9?16, Philadelphia, PA.
Lafferty, John, Andrew McCallum, and
Fernando Pereira. 2001. Conditional
random fields: Probabilistic models for
segmenting and labeling sequence data.
In Proceedings of the 18th International
Conference on Machine Learning,
pages 282?289, Williamstown, MA.
MacKay, David J. C. 1996. Equivalence of
linear Boltzmann chains and hidden
Markov models. Neural Computation,
8(1):178?181.
McCallum, Andrew, Dayne Freitag, and
Fernando Pereira. 2000. Maximum
entropy Markov models for information
extraction and segmentation. In
Proceedings of the 17th International
Conference on Machine Learning,
pages 591?598, Palo Alto, CA.
Mealy, G. H. 1955. A method for
synthesizing sequential circuits.
Bell System Technology Journal,
34:1045?1079.
Moore, Edward F. 1956. Gedanken-
experiments on sequential machines.
In Automata Studies, number 34 in
Annals of Mathematics Studies.
Princeton University Press, Princeton,
NJ, pages 129?153.
Nederhof, Mark-Jan and Giorgio Satta.
2004. Probabilistic parsing strategies.
In Proceedings of the 42nd Annual
Meeting of the Association for
Computational Linguistics, pages 543?550,
Barcelona, Spain.
Ratnaparkhi, Adwait, Salim Roukos,
and R. Todd Ward. 1994. A maximum
entropy model for parsing. In Proceedings
of the International Conference on Spoken
Language Processing, pages 803?806,
Yokohama, Japan.
Smith, Noah A. and Jason Eisner. 2005.
Contrastive estimation: Training
log-linear models on unlabeled data.
490
Smith and Johnson Weighted and Probabilistic CFGs
In Proceedings of the 43rd Annual Meeting
of the Association for Computational
Linguistics, pages 354?362, Ann Arbor, MI.
Stolcke, Andreas. 1995. An efficient
probabilistic context-free parsing
algorithm that computes prefix
probabilities. Computational Linguistics,
21(2):165?201.
Taskar, Ben, Dan Klein, Michael Collins,
Daphne Koller, and Christopher Manning.
2004. Max-margin parsing. In Proceedings
of the Conference on Empirical Methods in
Natural Language Processing, pages 1?8,
Barcelona, Spain.
Vardi, Ilan. 1991. Computational Recreations in
Mathematica. Addison-Wesley, Redwood
City, CA.
Wetherell, C. S. 1980. Probabilistic languages:
A review and some open questions.
Computing Surveys, 12:361?379.
491

