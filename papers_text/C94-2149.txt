XTAG System - A Wide Coverage Grammar for English 
Christy Doran, Dania Egedi, Beth Ann Hockey, B. Srinivas and Martin Zaidel* 
Institute for Research in Cognitive Science 
University of Pennsylvania 
Philadelphia, PA 19104-6228, USA 
{cdoran, egedi, beth, srini, zaidel} @linc.cis.upenn.edu 
Abstract 
This paper presents the XTAG system, agrammar de- 
velopment tool based on the Tree Adjoining Grammar 
(TAG) formalism that includes a wide-coverage syn- 
tactic grammar for English. The various components 
of the system are discussed and preliminary evalua- 
tion results from the parsing of various corpora are 
given. Results from the comparison of X3AG against 
the IBM statistical parser and the Alvey Natural Lan- 
guage Tool parser are also given. 
1 INTRODUCTION 
XTAG is a large on-going project o develop a wide- 
coverage grammar for English, based on the l,exi- 
calized Tree Adjoining Grammar (I3"AG) tbrmalism. 
LTAG is a lexicalized mildly-context sensitive tree 
rewriting system \[Joshi et al, 1975; Schabes, 1990\] 
that is closely related to Dependency Grammars and 
Categorial Grammars. Elementary trees in 13~AG 
provicle a larger domain of locality over which syn- 
tactic and semantic (predicate-argument) constraints 
are specified. XTAG also serves as an LTAG gram- 
mar development system consisting of a predictive 
left-to-right parser, an X-window interface, a roof 
phological analyzer, and a part-of-speech tagger (also 
referred to as simply 'tagger'). 
2 SYSTEM DESCRIPT ION 
Figure 1 shows the overall llow of the system when 
parsing a sentence. The input sentence is submit- 
ted to the Morphological Analyzer and the 3hgger. 
The morphological analyzer etrieves the morpho- 
logical information for each individual word from 
the morphological database. This output is tiltered 
in the P.O.S Blender using the output of the trigram 
tagger to reduce the part-of-speech ambiguity of the 
*currently at BBN, Cambridge, MA, USA 
Input Sentence 
~ 'ph  Analy~ l_ 'l'~ger ,,__ 
_ _ ~\ [  p.0.S Blender ~< 1 
? . . . . . . .  i i __  
/ i  ~-1%~ TteeSdection , ,~NynOB~ 
. . . . . . . . . .  . . . . . . . . . .  
Derivation Structure 
Figure I : Overview of XTAG system 
words. The sentence, now annotated with part-of- 
speech tags and morphological information for each 
word, is input to the Parser, which consults the syn- 
tactic database and tree database to retrieve the appro- 
priate tree structures for each lexical item. A variety 
o\[' heuristics arc used to reduce the number of trees 
selected. The parsertitan composes the structures to 
obtain the parse(s) of the sentence. 
2.1 Morphological Analyzer 
The morphology database \[Karp et al, 19921 was 
originally exlracted from 1979 edition of the Collins 
English Dictionary and Oxford Adwmced Learner's 
l)ictionary of Current English, and then cleaned up 
and auglnentcd by hand. It consists of approximately 
317,000 inltected items, along with their root forms 
and intlectional intbrmalion (such as case, num- 
922 
bet, tense). Thirteen parts of speech are difleren- 
tiated: Noun, Proper Noun, Pronoun, Verb, Verb 
Particle, Adverb, Adjective, Preposition, Comple- 
mentizer, Determiner, Conjunction, lntmjection, and 
Noun/Verb Contraction. Notms and Verhs are the 
largest categories, with approximately 213,000 and 
46,500 inflected forms, respectively. '\['he access time 
for a given inflected entry is 0.6 msec. 
2.2 Part -of -Speech Tagger 
A trigram part-of-speech tagger \[Church, 19881, 
trained on the Wall Street Jotlrilal Corpus, is incor- 
porated in XTAG. The trigraln tagger has been ex- 
tended to output he N-best parts-of-speech sequences 
\[Soong and Huang, 1990\]. XTAG uses this infer 
mat|on Io reduce the number of specious parses by 
filtering the possible parts-of-speech provided by the 
morphological nalyzer for each word. The tagger 
decreases tile time to parse a sentence by an average 
of 93%. 
2.3 Parser 
Tim system uses an Ea,'ley-style parser which has 
been extended to handle feature structures associated 
with trees \[Schabes, 19901. The parser uses a general 
two-pass parsing s|rategy for 'lexicalized' gramlnars 
ISchabes, 19881. In the tree-selection pass, the parser 
uses tile syntactic database entry \[or each lexical item 
in the sentence to select a set of elementary struc- 
tures from the tree database. The tree-grafting pass 
composes the selected trees using substitution a d ad- 
junct|on operations toobtain the parse of the sentence. 
The output of tile parser for tile sentence I had a map 
yesterday is illustrated in l;igure 2. The parse tree I
represents he surface constituent s ructure, while the 
derivation tree represents he deriwttion history of 
tile parse. The nodes of the derivation tree are the tree 
names anchored by tile lexical items. The composi- 
tion operation is indicated by the nature of Ihe arcs; a 
dashed line is used for substitution a d a bold line for 
adjunct|on. The number beside ach tree name is the 
address of the node at which the operation took place. 
Tile deriwltion tree can also be interpreted as a de- 
pendency graph with unlabeled arcs hetween words 
of the sentence. 
lleuristics that take advantage of 12FAGs have been 
implemented to improve the performance of tile 
parser. For instance, the span of the tree and the 
position of the anchor in the tree are used to weed out 
unsuitable trees in the first pass of the parser. Statisti- 
cal information about he usage frequency of the trees 
I liach node of Ihe parse tree has a ligature sh'uchlre, not shown 
here, associaled with it. 
Sr  
NP Vl'r 
N VP  Ad  
NA 
I V NP yesterday 
had DeltP N 
I I 
1) map 
I 
a 
P~.ll'Se T ree  
nxOVnxl\[hadl 
o.NXN\[I\] (1) l~vxARB\[yesterdayl (2) r*NXdxNImap\] (2.2)
I 
i i 
cd)XDlal (1) 
l)erivation Tree 
Figure 2: Output structures from the Parser 
has been acquired by parsing corpora. This informa- 
tion has been compiled into a statistical database (tile 
l,ex Prob DB) that is used by the parser. These 
methods peed the runt|me by approxmmtely 87%. 
J 2.3.1 lleuristics for Ranking the 1 arses 
The parser generates the parses in a rank order. This 
ranking is determined using a combination ofheuris- 
tics, which are expressed as structural preferences for 
deriwttion, e..g. attachment si es of adjuncts, right- vs. 
left- branching structures, topicalized sentences, etc. 
Similar hem'istics have been used for other parsers. 
See recent work by IHobbs and Bear, 199411, \[Mc- 
Cord, 19931,and \[Nagao, 1994t. 
A partial ist el ~ the heuristics used in XTAG fol- 
lows: 
1. Prefer argument positions to adjunct positions 
(here, this amotmts Io preferring fewer adjunc- 
t|on operations). 
2. For PPs other Ihan o/', attach to nearest site that 
is llOt a proper noun. 
3. Prefer right-branching structtu'e for sequences of
adiectives adverbs and PPs. 
923 
4. 
5. 
Prefer left-branching structure for sequences of
norms. 
Prefer high attachment (wide-scope) for a modi- 
tier and a sequence of modifees of the same type 
(i.e. a PP following or preceding a coordinate 
NP, an adjective or determiner preceding a co- 
ordinate NP or sequence of Ns, an N preceding 
coordinate Ns). 
These rankings are used to control the number of 
sentences passed on to further levels of processing. 
In applications emphasizing speed, only the high- 
est ranked parse will be considered, in applications 
emphasizing accuracy, the top N parses can be con- 
sidered. 
2.3.2 Syntactic Database 
The syntactic database associates lexical items with 
the appropriate trees and tree families based on se- 
lectional information. The syntactic database entries 
were originally extracted from the Oxford Advanced 
Learner's Dictionary and Oxford Dictionary for Con- 
temporary Idiomatic English; and then modified and 
augmented by hand. There are more than 37,000 
syntactic database ntries. Selected entries from this 
database are shown in Table 1. Each syntactic entry 
consists of an INDEX feld, the uninflected form under 
which the entry is compiled in the database, an ENTRY 
field, which contains all of the lexical items that will 
anchor the associated tree(s), a pos field, which gives 
the part-of-speech for the lexical item(s) in the ENTRY 
feld, and then either (but not both) a TREES or FAM 
field. The TREES field indicates a list of individual 
trees to be associated with the entry, while the FAM 
field indicates a list of tree families. A tree family, 
which corresponds toa subcategorization frame (see 
section 2.3.3), may contain a number of trees. A 
syntactic entry may also contain a list of feature tem- 
plates (Fs) which expand out to feature quations to 
be placed in the specified tree(s). Any number of EX 
felds may be provided for example sentences. Note 
that lexical items may have more than one entry and 
may select he same tree more than once, using dif- 
ferent features to capture lexical idiosyncrasies (e.g. 
have). 
2.3.3 Tree Database 
Trees in the English \[;FAG framework fall into two 
conceptual c asses. The smaller class consists o1' indi- 
vidual trees such as trees (a), (d), and (e) in Figure 3. 
These trees are generally anchored by non-verbal lex- 
ical items. The larger class consists of trees that are 
INDEX: have/26 
ENTRY: have 
POS: V 
TREES: ~Vvx 
FS: #VPr_ind, #VPr_past, #VPr_perfect+ 
#VP_ppart, #VP_pass- 
EX: he had died; we had died 
INDEX: have/50 
ENTRY: have 
POS: V 
TREES: flVvx 
FS: #VP_inf 
EX: John has to go to the store. 
INDEX: have/69 
ENTRY: NP0 have NP1 
POS: NP0 V NPI 
FAM: Tnx0Vnx I 
FS: #TRANS+ 
EX: John has a problem. 
INDEX: map/I 
\]gNTRY: NP0 map out NP1 
POS: NP0 V PL NP1 
FAM: Tnx0Vplnxl 
INDEX: map/3 
ENTRY: map 
POS: N 
TREES: {rN, (~NXdxN,/iNn 
FS: #N_wh-, #N_.refl- 
INDEX: map/4 
ENTRY: map 
POS: N 
TREES: (~NXN 
FS: #N..wh-, #N_refl-, #N_plur 
"Fable 1 : Selected Syntactic Database Entries 
grouped into tree families. These tree families rep- 
resent subcategorization frmnes; the trees in a tree 
family would be related to each other transforma- 
tionally in a movement-based approach. Trees 3(b) 
and 3(c) are members of two distinct ree families. 
As illustrated by trees 3(d) and 3(e), each node of a 
tree is annotated with a set of features whose wtlues 
may be specified within the tree or may be derived 
from the syntactic database. There are 385 trees that 
compose 40 tree families, along with 62 individually 
selected trees in the tree database. 
924 
NP 
(a) 
N t ? 
NP0$ VP 
VO NP /$ 
(b) 
~r 
NI'(~I, VP 
V0 I'1.0 NPI$ 
(c) 
NP \[ras . . . . . . . .  /ace\] 
line .* <3>\] 
Igl' : <2>\] 
DeII'.I. \[ag,'\[wh : <1>: <2> \[\]\[\] NO \[:::::~ :<;3>> \[! 
\[\] 
V) 
w', \[\] 
Ii I ellSe : <2> \[ 
nlode : <3> \[ 
ISSJ~lI-CllSe i <4> I
mrl;ect : <5> j 
If , . :  <,> \[\] w,*  \ [ . , , , . t~t  : <s.-- \[\] t . . . . . . .  2> \[1 \[ NA I13 ,nod,~ : <3> \[\] I ~ssig,,-case : <4> \[\]1 \[\] 
(d) (c) 
Figure 3: Natnple trees frolll the Tree 1)atabase 
2.3 .4  Statistics Database 
The statistics database contains trec tmigram frequen- 
cies which have been collected by parsing lhe Wall 
Street Jourllal, the IBM manttal, and the ATIS corptts 
using the XTAG English grammar. The parser, aug- 
mented with the statistics database \[Joshi and Srini- 
vas, 1994\], assigns each word of the input sentence 
the top three inost frequently used trees given the 
part-of-speech o1' the word. On failure the parser 
retries using all the trees suggested by the syntactic 
database liar each word. The augmented parser has 
been observed to have a success rate of 50% without 
retries. 
2.4 X - In ter face  
XTAG provides a graphical interface for manipulat- 
ing TAGs. The interface offers the following: 
Menu-based facility for creating and modifying 
tree liles and loading grammar files. 
User controlled parser parameters, including the 
parsing of categories (S, embedded S, NP, l)etP), 
and the use of the tagger (on/o flTrctry on failure), 
Storage/,etriewfl facilities for elementary and 
t)arsed hces as text liles. 
The production of postscript files corresponding 
to elementary and parsed trees. 
Graphical displays of trec and feature data struc- 
tures, including a scroll 'web' for large tree 
structures. 
Mouse-based tree editor for crca|ing and modi- 
fying trees and feature shuctures. 
Hand combination of trees by adjunction or sub- 
stitution for use in diagnosing rallunar prob- 
lems. 
Figure 4 shows tile X window interface after a 
number of sentences have becll pat'sed. 
925 
Exits Bttffers Oranmuar Parsers Parsing 
derived-tree-889 
Bill w'oJttod to go to Washh~oa 
derived- tree- 140368 
derived- tree- 140369 
derived- tree- 140370 
I eoul~t't understmul him 
derived- tree- 140449 
Go to your room 
derived- tree- 140420 
derlved-tree-140621 
derived-tree- 140622 
derived- tree- 140763 
derived- tree- 140764 
derived- tree-140768 
derived- tt~-140766 
parsers in the same class as XqAG. Although XTAG 
is being extended to handle sentence fragments, they 
are not included at present, and are thereby not re- 
flected in the data in Table 2. Statistical information 
ti'om the parsed corpora described in Section 2.3.4 is 
presently used only for' speeding the parser but not to 
tune the grammar to parse any specilic corpus. Note 
then, thai the data below does not involve any corpus 
training. 
Corpus 
WSJ 
IBM Manual 
ATIS 
nts~ 
Av. # of 
% Parsed parses/sent 
39.09% 7.53 
75.42% 6.14 
74.42% 6.0 
Table 2: Performance of XTAG on various corpora 
Figure 4: XTAG Interface 
3 ENGLISH GRAMMAR 
The morphology, syntactic, and tree databases to- 
gether comprise the English grammar. Lexical items 
not in the databases are handled by default mecha- 
nisms. The range of syntactic phenomena that can 
be handled is large and includes auxiliaries (includ- 
ing inversion), copula, raising and small clause con- 
structions, topicalization, relative clauses, infinitives, 
gerunds, passives, adjuncts, it-clefts, wh-clefts, PRO 
constructions, noun-noun modifications, extraposi- 
tion, determiner phrases, genitives, negation, noun- 
verb contractions and imperatives. Analyses for sen- 
tential adjuncts and time NP adverbials are currently 
being implemented. The combination of large scale 
lexicons and wide phenomena coverage result in a 
robust system. 
4 CORPUS PARSING AND EVALU- 
ATION 
XTAG has recently been used to parse the Wall Street 
Journal 2, IBM manual, and ATIS corpora s a means 
of evaluating the coverage and correctness ofXTAG 
parses. For this evaluation, a sentence is consid- 
ered to have parsed correctly if XTAG produces 
parse trees. Verifying the presence of the correct 
parse among the parses generated is done manually 
at present. Table 2 shows the preliminary results. We 
will present more complete and rigorous results by the 
time of the conference and compare them with other 
2Sentences of length <= 15 words 
4.1 Comparison with IBM Parser  
A more detailed experiment tomeasure the crossing 
bracket accuracy of the XTAG-parsed IBM-manual 
sentences has been performed. Of the 1600 IBM 
sentences that have been parsed (those available from 
the Penn Treebank \[Marcus et al, 19931), only 67 
overlapped with the IBM-manual treebank that was 
bracketed by University of Lancaster. 3 The XTAG- 
parses for these 67 sentences were compared 4 with 
the Lancaster IBM-manual treebank. 
Table 3 shows the results obtained in this experi- 
ment. It also shows the crossing bracket accuracy of 
the latest IBM statistical parser \[Jelinek el al., 1994\] 
on the same genre of sentences. Recall is a measure 
of the number of bracketed constituents he system 
got right divided by the number of constituents in
the corresponding Treebank sentences. Precision is 
the number of bracketed constituents the system got 
right divided by the number of bracketed constituents 
in the system's parse. 
Based on the present data, we believe our" results 
will be consistent for the complete XTAO-parsed 
IBM corpus; we plan to evaluate the XTAG parses 
against the Penn Treebank. In addition, we are pars- 
ing the Lancaster sentences, and adding those to the 
XTAG IBM corpus. 
While the crossing-brackets measure is useful for 
comparing the output of different parsers, we believe 
that it is a somewhat inadequate method for" evaluat- 
ing a parser like XTAG for" two main reasons. First, 
3The treebank was obtained through Salim Roukos 
(roukos@watson.ibm.com) at IBM. 
~We used the parseval program written by Phil llarison 
(phil @atc.boeing.com). 
926 
Sysl:em 
X'A'A% 
IBM Stat. 
parser 
t  !"am-k-?ts l-- 1 1 
1000 86.2% Nol | Not I 
_ \[ Ava Ja?k, I Ayailablo 
Table 3: Performailco O\[ XTAG on II}Mqnalnlal sen~ 
fences 
tile parse generated by the XTAG system is nnich 
richer in its representation f the internal structure of 
certain phrases thari those present in manually cre- 
ated treebanks. Even though the Lancaster treebank 
is 1nero detailed in terins of bracketing than the Pemi 
Treebank, it is not complete in its bracketing of the 
internal structure of notln phlases. As a result oFcom- 
paring the XTAG parse with a skeletal representation, 
the precision score is misleadingly ow for the XTAG 
system. 
a seCol ld i'eaSOll tliat lhe crossing brackcl I l leaSlll 'e 
is inadequate for ewlhiafing XTA(I  is thai the pri- 
iriary strtlcturo in XTAG is the doriwition tl'oo \['rOlll 
whicll the bracketed hee is deriwtd. Two identical 
bracketings for a sentellCO Ci\[ll \[laVe coinpletely tlil:- 
forent deriwition trees. A iliore direcl ilieasuro oF the 
tlorlornlanco il' file XTAG parser would evahiale the 
deriwition structtlre, which captures the dependencies 
between word;;. 
4.2 Coi l ipar isOl l  with A lvey 
We also colnpared the XTt\G parser to the Alvey 
Nal:tlral kailgtlage Tools (ANI ;l') t)alser, and louild 
that the two perfornled coniparably. We parsed the sol 
of I~DOCI'2 Noltn Pluases presented in Appendix l:l of 
the teciinical report IC, arroll, 1903 \], using Iho XTAG 
parser. The lechnical report presenls the ranking of 
tile correct parse and also gives the Ioial iillillber of 
doriwitions for each liOtill phrase. In this experhnenl, 
we have conlparod lhe total nuinber o\[' doriwliions 
obtained |'rent X'I'A(I with lhai oblainod front the 
ANUF parser. 
Table 4 sulnlnarizos the results of lhis cxperhlleilt. 
A iolal of 143 lloun i)luasos were parsed. The NPs 
whicll did nol have a correct parse in the top lhroo 
derivations for tile ANLT parser were considered as 
faihlres for AN\[ \ ] ' .  Tile maxinitlnl and average iluni- 
her of derivations cohnnns show Ihe highesl and lhe 
average lillnlbc;r o\[ derivations produced for tile NPs 
that tiave a correct derivation hi the top tinco deriwi- 
tlons, l:or tile XTAG systeiii, porloriilallce rcsulls 
with alid without ihe P()S lagger are siR)wit. 5 
5BcCatlSt? tilt? NPs {11o, eli {ivol'~l~O, silorit',f Ihall ihc.' St?lltcnt?os 
on which il was lrahi~;d, the perforlnanco of Iho POS la~ggt?r is 
syswni 7iparsed % parsed 
ANi : r i 'a rmr- ;  71 127-M Si~.Sl% 
X'IAG with I <,7 1 65.(/3% 
XTAG wilhout / 127l \ [ -  86.7i% 
_ !~os j~ i~ , L _ 2 
v ,x T xu I 
32 1 4. 7 d 
28 \[ 3.45 / 
Table 4: Conlparison of XTAG and ANIfI" Parser 
It would be interesting lo see if the two systems 
perfornied similarly on a wider range of dala. In 
ICarroll, 1993 \], only tile IA)OCE NPs are annotated 
with tile nunlber of deriwltions; we are interested in 
getting nlore data annolated with Ihis inforimition, in 
order to lllake further conlparisons. 
5 COMPUTER PI ,ATFORM 
XTAG was developed Oll the Still SI-'ARC station so- 
ties, and has been tested on the Still 4 and l ip BOIL 
CATs series 9000. It is awlihlble through allonymotlS 
flp, and requires 20MB of space. Please send nlail to 
xtag-requesl(,~linc.cis.upenn.edu for I'tp instructions 
or inore hllormaliOll. XTAG Fequh'es lhe following 
sollware to rtll/: 
u k niachiile runnhlg UNIX and X t IR4. Prt'vious 
releases o\[ X will ilol work. X1 tR4 is free 
software available \[rolli MIT. 
Ii A COllllllOll l,isp conipiler which supports tile 
latest deliniiit)n of Ct)llllllOn I,isp (Steele's (701n- 
men Lisp, second edition). XTAG has been 
lesled wiih Lucid Commoli l,is I) 4.0 and Alle- 
gro 4.0.1. 
ii (\]l,X versioll 4 or hi.gher. C\],X is the lisp etluiv. 
alent to tile Xlib package wrilten in C. 
? Mark Kalllrowilz's l,isp \[Jlilities fronl CMIJ: 
logical-pathnalnes and dolsystenl. 
The latest version o1' CLX (RS.0) and tile CMU 
l,isp Utilities are provided in our flp directory for 
your convenience, ltowevcr, we ask that you refer to 
the approl~riate source for updates. 
The nlorpllology database colnponentl Kar l) el al., 
1992 I, no longer under Iicenshlg restrictions, is avail- 
able as a separate syslolll frolil the XTA( i  system. Igp 
hislrtiotioils alld iilore iiifornlatiOll can bc obtahled by 
inailing requosls 1o lcx-request(a)lhlc.cis.upenn.odu. 
signilit?antly degraded. \[:or this i'oflSOll, the table contains illJi)r- 
lliatioil abotlt lilt? pc:rlorlliant?t? of XTA( I  both with and wilhout 
Ihe tagger. 
927 
References 
\]Carroll, 199311 Carroll, J. (1993). Practical 
Unification-based Parsing of Natural Lan- 
guage. University of Cambridge, Computer 
Laboratory, Cambridge, England. 
\[Church, 1988\] Church., K. (1988). A Stochastic 
Parts Program and Noun Phrase Parser for Unre- 
stricted Text. In 2nd Applied Natural xmguage 
Processing ConJerence. 
IHobbs and Bear, 199411 Hobbs, J. and Bear, J. 
(1994). Two principles of parse preference. In
Current Issues in Natural Language Process- 
ing: In Honour of Don Walker. Giardini with 
Kluwer. 
IJelinek et al, 199411 Jelinek, E, Lafferty, J., Mager- 
man, D., Mercel, R., Ratnaparkhi, A., and 
Roukos, S. (1994). Decision tree parsing using 
a hidden derivation model. ARPA Workshop on 
Human Language Technology, pages 260-265. 
\[Joshi et al, 197511 Joshi, A.J., Levy, L., and Taka- 
hashi, M. (1975). T1ee adjunct grammars. In 
Journal of Computer and System Sciences. 
\[Joshi and Srinivas, 1994\] Joshi, A.J. and Srinivas, 
B. (1994). Disambiguation f Super Parts of 
Speech (or Suptertags): Almost Parsing. In 
Proceedings of the 15 ~/~ International Confer- 
ence on Computational Linguistics (COLING 
'92), Kyoto, Japan, August. 
\[Karp et al, 1992\] Kaq), I)., Schabes, Y., Zaidel, M., 
and Egedi, 1). (I 992). A Freely Available Wide 
Coverage Morphological Analyzer for English. 
In Proceedings of the 15 t/~ hzternational Confer- 
ence on Computational Linguistics (COLING 
'92) Nantes, France, August. 
\[Marcus et al, 1993\] Marcus, M., Santorini, B., and 
Malvinkiewicz, M.A. (I 993). Building a large 
annotated corpus of English: The Penn Tree- 
bank. Computational Linguistics, 19.2:313-- 
330, June. 
\[McCord, 1993\] McCord, M. (1993). Heuristics 
for broad-coverage natural language process- 
ing. In DARPA Human Language Teehnology 
Workshop, March. 
INagao, 1994\] Nagao, M. (1994). Varieties of 
heuristics in sentence processing. In Current Is- 
sues in Natural Language Processing: In Hon- 
our of Don Walker. Giardini with Kluwer. 
\[Schabes, 198811 Schabes, Y., Abeill6, A., and 
Joshi, A.K. (1988). Parsing strategies with 'lex- 
icalized' grammars: Application to tree adjoin- 
ing grammars. In Proceedings of the 12 zh bzter- 
national Conference on Comt)utational Linguis- 
tics (COLING'88), Budapest, Ilungary, August. 
\[Schabes, 1990\] Schabes, Y. (1990). Mathemati- 
cal and Computational Aspects c~f Lexicalized 
Grammars. Ph.1). thesis, University of Penn- 
sylvania, Philadelphia, PA, August. Awlil- 
able as technical report (MS-CIS-90-48, LINC 
LAB179) fi'om the Department of Computer 
Science. 
\[Soong and Huang, 199011 Soong, EK. and 
Huang, E. (1990). A Fast Tree-Trellis Search 
for Finding the N-Best Sentence Hypothesis in 
Continuous Speech Recognition. In Journal o/ 
Acoustic Society, AM., May. 
928 
