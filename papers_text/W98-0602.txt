A Dynamic Temporal Logic of Events, Intervals and States for 
Nominalization in Natural Language 
Raft Naumann 
Seminar ftir Allgemeine Sprachwissenschaft 
University of Dtisseldorf 
D-40225 Dtisseldorf, Germany 
Abstract 
The interpretation of nominalized expressions in 
English poses several problems. First, it must be 
explained how their meanings are derived from the 
meanings of the underlying verbs. Second, diffe- 
rent forms of nominalizations differ in their se- 
mantic behaviour. Finally, aspectual restrictions 
which exist for ingofnominals must be explained. 
The solution to be proposed is based on the as- 
sumption that non-stative verbs denote changes. 
Changes can be conceived of in two different 
ways, either as objects which bring about a parti- 
cular result or as relations between states. A dyna- 
mic structure of events, intervals and states is defi- 
ned in which both perspectives can be expressed 
by means of sorting the universe D. The basic idea 
is to augment a transition system for Dynamic 
Logic (DL) by a further domain of events such 
that programs from DL can be described either as 
objects or relations between states. The interpreta- 
tion of verbs is based on the second perspective: 
they denote (generalized) relations between states. 
The interpretation of nominalized expressions uses 
the first perspective: they denote changes as ob- 
jects. Different forms of nominalizations denote 
different sorts of objects which are systematically 
related to the denotation of the underlying verb. 
1 Data and Evidence 
In English (at least) three forms of nominalizations 
exist. 
(1) a. the performance of the song (by the so- 
prano) 
b. the performing of the song (by the sopra- 
no) 
c. the soprano's performing the song 
The NP in (la) is usually called a derived nominal, 
the NP in (lb) an ingolnominal and the NP in (lc) 
a gerundive nominal. It is commonly assumed that 
these forms are morphologically and semantically 
derived from the underlying verb, i.e. perform in 
(1). Evidence for this assumption comes from the 
following data. First, sentence (2a) is true just in 
case its corresponding 'statement of occurrence' 
(Zucchi (1993)) (2b) is true. 
(2) a. The soprano performed the song at 9:00. 
b. A performance/performing of the song by 
the soprano occurred at 9:00. 
For gerundive nominals a similar equivalence 
exists. (3a) is a paraphrase of (3b) which is true 
just in case (3b) is true. 
(3) a. The soprano's inging the song surprised 
US. 
b. That the soprano performed the song sur- 
prised us. 
From this equivalence it cannot be inferred that a 
gerundive nominal and a that-clause have the same 
denotation. Only the latter can be arguments of 
verbs like believe and know or of predicates like is 
true or is false. This is the so-called distribution- 
problem. This first set of data gives rise to the 
following constraint which a semantic analysis of 
nominalizations must satisfy (Zucchi (1993)): The 
semantic properties of ingof, derived and gerun- 
dive nominals should be accounted for without 
assuming that they are listed in the lexicon, but 
rather by assuming that they are generated by a 
rule from the meanings of the corresponding verbs. 
Second, similar to 'ordinary' nouns like 
'man' derived/ingofnominals (but not gerundive 
10 
nominals) allow determiners (4a), yet al forms of 
nominalization can occur in subject-position (4b,c). 
(4) a. the/a/one performing/performance of the 
song 
b. Performing the song is strange. 
c. The performing (performance) of the 
song is strange. 
These data show that nominalized NPs should get 
an interpretation which m~kes their type compati- 
ble with that assigned to 'ordinary' NPs like 'a 
man' or 'John'. Otherwise, predicates like 'is 
strange' will be type ambiguous, making it neces- 
sary to explain in a systematic way the (semantic) (7) 
relationship that exists between different occurren- 
ces of a predicate. This yields a second constraint: 
Derived and ingofnominals must be assigned mea- 
nings in such a way that it is possible to give a 
uniform interpretation of determiners like some or 
the. 
A third set of data concerns emantic diffe- 
rences between derived and ingof nominals (which 
behave semantically (almost) alike) on the one 
hand and gerundive nominals on the other. First, 2 
whereas a sentence containing a derived/ingofno- 
minal has two readings, the corresponding sentence 
with a gerundive nominal admits of only one rea- 
ding. 
(5) a. The soprano's performing of the song 
surprised us. 
b. The soprano's performing the song sur- 
prised us. 
(5a) has two readings. According to the first, the 
existential-reading, it is the mere performance 
which surprised us and not some specific quality 
the performance had. On the second reading, the 
property-reading, it is some property the perfor- 
mance had which was surprising and not the fact 
that it occurred at all. By contrast, sentence (5b) 
with a gerundive nominal has only the existential- 
reading according to which the soprano was not 
expected to perform the song. The property-rea- 
ding is excluded. A second difference concerns 
selectional distinctions: gerundive and ingofnomi- 
nals do not occur with the same range of predica- 
tes. 
(6) a. The performing of the song by the sopra- 
b. 
no was slow/sudden/took a long time. 
*The Soprano's performing the song was 
slow/sudden/took a long time. 
Whereas gerundive nominals are not possible with 
predicates like is slow or take a long time, they are 
acceptable with surprise. For ingofnominals there 
are no such restrictions. A final difference has to 
do with restrictions on which predicates do at all 
admit a particular type of nominalization. Whereas 
all verbs admit gerundive nominals, ingofnomina- 
lization is excluded with stative verbs like know or 
love. 
a. *John's knowing of the answer (*the 
knowing of the answer by John) 
b. *Bill's loving of Mary (*the loving of 
Mary by Bill) 
A third constraint therefore is that an analysis must 
admit an explanation of the semantic distinctions 
between the different forms of nominalization. 
A Dynamic-Temporal Event- 
Structure 
In Naumann (I 996,1997a,b) a theory of aspectual 
phenomena has been developed which is based on 
the intuition that non-stative verbs like eat or run 
express changes. The intuitive notion of a change 
comprises at least the following two aspects which 
are complementary to each other. 
(i) something (an object) which brings about he 
change 
(ii) something (a result) which is brought about 
by the change which did not hold before the 
change occurred 
-The notion of a change that is used in (i) and (ii), 
respectively, refers in each case to the other aspect. 
In (i) 'change' is understood as the result that is 
brought about, i.e., in the sense that is captured by 
(ii), whereas in (ii) 'change' is meant as the object 
that brings about the result. 
The second aspect can be described as a 
transformation of state. Before the change occur- 
red, the world was in a particular state, say s, in 
which some condition (property) d~ did not hold, 
11 
whereas after the change has occurred, the world is 
in a state s' in which ~ does hold. This perspecti- 
ve is captured in Dynamic Logic (DL). Some in- 
put-state s in which -~? holds is transformed into 
an output-state s' in which ? holds. Program-let- 
ters ~ are interpreted as binary relations on the 
domain S of states: \[r~\] c S x S. The elements of 
\[r~\] (pairs of states) can be interpreted as particu- 
lar executions of the program. Each program letter 
defines an accessibility relation such that DL is a 
polymodal logic. The fact that (s,s') ~ \[~1 means 
that state s' can be reached (or is accessible) from 
state s by executing the program rc in s. It is there- 
fore possible to view the program letter n as a 
label by which transitions between states can be 
decorated: s ---~(rc) s' holds just in case (s,s') 
\[rc\] and is to be read as 'by executing rc in state 
s state s' is reached'. 
The disadvantage of the perspective which 
underlies DL is that changes are only derived ob- 
jects, i.e. pairs of states or relations between states, 
that are defined in terms of the domain S of states. 
There is no separate domain E the elements of 
which are interpreted as bringing about the trans- 
formations of a state s to a state s' denoted by re. 
It is therefore not possible to interpret r~, when it 
is used to label a transition, as the object that 
brings about this transition because it is not inter- 
preted as an independent object. What is not cap- 
tured in DL, therefore, is the first perspective 
mentioned above in (i) according to which a chan- 
ge can be understood as an object which brings 
about a particular result. This perspective is captur- 
ed, among others, in event-semantics (ES), Kfifka 
(1992), where events are interpreted as elements of 
a separate domain E. What is missing in ES is the 
second perspective of a change as a state-trans- 
former according to which events effect changes 
by bringing about some result ~. 
The two perspectives can be combined in the 
following way. Each event e is of a particular type 
Pv where the index v corresponds to some (non- 
stative) verb from English, say eat or run. The ele- 
ments of the event-type Pv are characterized by 
bringing about (or effecting) a change with respect 
to some property. For instance, events of type eat 
bring about changes with respect o the mass of an 
object. This object is denoted by the internal argu- 
ment of eat, say an apple in eat an apple. The 
result ~ that holds with respect to this property 
upon termination of the event is that the mass is 
zero, i.e., the object has vanished. Events of type 
run, on the other hand, bring about a change with 
respect o the location of the object that is denoted 
by the external argument, e.g. John in John ran. 
The location of the object at the end of the event 
is different from its location at the beginning of 
the event (to be precise, the change need not al- 
ways consist in a change of location. Events of 
type run around the park are possible counterex- 
amples. Rather, the object traverses a non-empty 
path. Whereas the path is empty when the event is 
started, it is non-empty at its end). 
Events of type eat differ from those of type 
run in the way the result d~ is brought about. This 
can be illustrated by means of the notion of a nu- 
cleus-structure (Moens/Steedman (1988)). A nu- 
cleus-structure consists of three parts: the incep- 
tion-point (IP), the development-portion (DP) and 
the culmination-point (CP). 
Nuc leus -St ructure  
e 
S S' 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  \[ 
IP DP CP 
Figure 1 
The result ? is evaluated at each part of the nu- 
cleus-structure. (Sequential) events of type eat and 
run agree on how ~ is evaluated at the IP and at 
the CP: it is false at the IP and true at the CP. 
They differ with respect o the DP. Whereas ~b is 
constantly false on the DP for events of type eat, 
it continuously holds for events of type run. From 
this it follows that for events of type eating ~ only 
holds at the CP and is therefore true at exactly one 
point of the nucleus-structure, whereas for events 
of type running ~ is false at only one point of the 
nucleus-structure, namely at the IP. The distinction 
between events of type eat and those of type run 
is therefore made in terms of how the result ~ is 
evaluated at intermediate states of an occurrence. 
Aspectually it is therefore not the mere input-out- 
put behaviour that is important but also what hap- 
pens in between the beginning and the end of an 
occurrence. 
From a procedural perspective the nucleus- 
structure can be interpreted as the execution-se- 
quence ~ of some program n. The IP corresponds 
12 
to the input-state s, the CP to the output-state s'
and the DP to the set of intermediate states s" in 
between s and s': s < s" < s' (where < is the orde- 
ring on G or some global ordering induced on the 
domain S). Thus, to each event e corresponds its 
execution-sequence G (= (s,s')) such that each 
event-type P, induces a binary relation R,, on S 
such that each element of R.v is the execution se- 
quence of a (completed) event e e P~. The binary 
relation R~ is the result of applying a so-called 
dynamic mode to a property of states Q. The dyna- 
mic modes corresponding to an accomplishment- 
verb like eat  and an activity-verb like run are gi- 
ven in (8a) and (8b), respectively. 
(8) a. Con-BEC mode: 
~,Q~.ss'\[-~Q(s) A Q(s') A 
Vs"\[s < s" < s' -> Q(s")\]\] 
b. Min-BEC mode: 
~Q~.ss'\[~Q(s) A Q(s') ^  
Vs"\[s < s" < s' -> -~Q(s")\]\] 
In (8) Q is a property of states corresponding to 
the result that an event of type P~ is supposed to 
bring about. Not all events of type P~ will satisfy 
OPv(Q) (for OPt the dynamic mode assigned to P~) 
on their execution-sequence but only a certain 
subset, namely the completed sequential ones (for 
details see Naumann (1998) and section (2.1) be- 
low). The MIN-BEC-mode (partly) characterizes 
the class of accomplishments. This means that a 
verb-type v which belongs to this class is assigned 
this mode. Activity-verbs like push  are assigned 
Con-BEC, the mode characterizing the class of 
activities. Other aspectual classes are characterized 
by different modes, Naumann (1997a,b), Nau- 
mann/Moil (1998). The dynamic mode assigned to 
an event-type P~ determines therefore the way in 
which a change ffected by an event of this type is 
basically brought about. On this view events are a 
sort of 'reification' of particular executions of the 
program ~. In terms of ~ as a label of transitions 
this means that instead of s -o(r0 s' one now has 
s--o(e) s' such that e ~ P~ and (s,s') e R~ (= Ire\]) 
where R~ is the binary relation induced by P,. In 
contrast o the DL-perspective the label e can be 
interpreted as the object that brings about the tran- 
sition from s to s'. 
13 
DL-perspective 
I . . . . . . . . . . . . . . . . . . . . . . . . .  I ( s , s ' )  e in\] 
S S' 
new perspective 
ee  P, 
I . . . . . . . . . . . . . . . . . . . . . . . . .  I 
S S' 
Figure 2 
The above considerations are made precise in the 
following definition. 
Definition: a dynamic-temporal structure of events, 
intervals and states of signature <VERB~, VERBs, 
VAR, TR, DM> is a tuple 
<D, E, S, O,T ,  I, c~, B, g, y, 5, K, ~?*, {Re} 
v'~ VERBs, {0i} i~TR, coingco 0,cog~> such that 
(i) D is the domain of entities (or individuals) 
(ii) E = <E, m, {Pv} v ~ VERBn~ > is an 
eventuality structure with 
- E is a set of events 
- m is a binary relation on E (the part-of 
relation on E) which is a partial order 
- the Pv are unary relations on E 
(iii) S = <S, { Rop(Q )} OP ~ DM, { Qp} pc VAR> 
is a transition structure with 
- S is a set of states 
- {Rop(Q)} OP ~ DM is a set of parametri- 
zed relations on S. For each Q ~ {Qp} p 
VAR RopcQ ) is a set of (finite) sequen- 
ces, i.e. a subset of S* (S* is the set of 
all finite sequences of elements from S) 
on which Q is evaluated in the same way. 
the Qp are unary relations on S; they re- 
present properties of states which can be 
changed by events of an appropriate type. 
(iv) O is the domain of urelements ('ordinary' 
objects) 
(v) T = <T,< > is a (time-)point-structure with 
T the domain of time-points (moments of 
time) 
< is a strict partial, linear and discrete 
ordering on T 
(vi) I = <I, <~, m > is the interval-structure indu- 
ced by T such that 
(vii) 
(viii) 
(ix) 
(x) 
(xi) 
(xii) 
I is the set of all non-empty fini- 
te convex sets (intervals) over 
<T, <> 
\[t,t'\] <I \[h,h'\] iff t' < t I 
\[t,t'\] ~ \[h,tl'\] iff tt_<t and t'<_ h' 
Instead of construing the interval-structu- 
re I from the point-structure, one can take 
intervals as primitive and define a rela- 
tion In between elements of T and ele- 
ments of I which holds just in case t is 
an element of i in the structure I induced 
by T. 
cx :E ->Tand13 : E -> T ass ign  to an 
event e its beginning-time o~(e) and end- 
time 13(e), respectively (it is required that 
co(e) < 13(e)). The functions c~ and B indu- 
ce a function x : E -> I which assigns to 
each e e E its run-time interval x(e) such 
that z(e) = i = {t ~ T I ~(e) _< t _< 13(e)} 
Thus, z can also be defined as the pro- 
duct-mapping <ct,13> : E -> T x T. 
It : T -> S is a function which assigns to 
each time point t ~ T the state It(t) ~ S 
which holds at t 
y :  {P~} -> \[{Qp} -> {Rdm(Q)} \] is a func- 
tion which assigns to each P~ a dynamic 
mode, i.e., a relation between properties 
of states and (finite) sequences of states 
(see (8) above for details). 
~5: {P~} v ~ VERB.,-> {Qp} p~ VAR 
assigns to each event-type P, a property 
of states Qp 
This definition is too simple because the 
property depends on some argument x 
(e.g., it is the mass of an apple that gets 
changed). Therefore, ~i should be defined 
as a function which assigns to each P~ for 
some v a function from D to {Qp}. As 
the simplified definition does have no 
negative consequences for the analysis, it 
will be chosen for the sake of simplicity. 
The {Rv, } v' ~ VERB s are n+2-ary rela- 
tions on D" x S x S (for variable n) 
which are used to interpret stative verbs. 
VERB, = { know, love, believe, be ill .... } 
is the set of stative verbs in English. 
Thus, VERB = VERBn, u VERB, is the 
set of (basic) verbs in English. 
The 0~ i e TR are thematic relations (in 
effect, partial functions) like Agent or Pa- 
14 
(xiii) 
tient, i.e. relations between events and 
individuals (not necessarily urelements, 
that is individuals of sort o). 
K : {P,} v e VERB~ -> 0* assigns to 
each P, an n-tuple of 0-relations, namely 
all those relations for which events of 
type P~ are defined (0" is the set of finite 
sequences (tuples) of thematic relations). 
The role of ~? is similar to that of axioms 
like (i) which are used in ES: 
(i) Ve\[Pgiv,(e) -> ~Xl,X2,X3\[(e,x I) ~ 0ngen t A 
(e, x2) e 0soo~:o A (e, X3) e 0~,~\]\] 
K* is a (partial) function which assigns to 
an event-type P and an event e an n-tuple 
of objects: 
*(P)(e) = <x I..... x,> iff (i) e e P, (ii) 
K(P) = <01 ..... 0~> and (iii) ni\[~c(P)\](e) = 
xi 
(xiv) 
(xv) 
where ~ is the n-th projection function 
which when applied to the value of ~c for 
some P yields the n-th element of ~c(P): if 
~:(P) = <0~ ..... 0,>, then ~i(n(P)) = 0 i if 1 
_< i _< n, undefined otherwise. 
EcD,  S c D, Tc  D, O ~D,  I cD  
The functions coi,g~o  and co~ are defined 
below in sections (2.1) and (2.2) respec- 
tively. 
The composition of o~ and It as well as that of 13 
and It assign to each event e its source-state It - 
c~(e) and target-state It ? 13(e), respectively. 
(xvi) ~*(e) = s iff c~(e) = t and It(t) = s 
(a* = It ? a) 
13"(e) = s' iff 13(e) = t' and It(t') = s' 
(B* = la " 8) 
The product-mapping <cz*,8*> (=x*): E -> S* 
assigns to each event e its execution sequence 
x*(e). The function It which assigns to each t its 
corresponding state It(t) can be extended to inter- 
vals i e I such that It* : I -> S ? assigns to each 
interval i a finite sequence of states in accordance 
with It, i.e., It*0) = cs such that Vi : 1 _< i _< n, s i = 
It(ti). Thus, o = It(h)...it(tn) with t I = t, t, = t' and 
i = \[t,t'\]. ~* is the composition of x and It*: "~* = 
la* ? ,~. 
According to (xiv), the domain D of entities 
is structured such that there are the subdomains E, 
S, T, I and O corresponding to the sorts E (event), 
s (state), tp (time-point), i (interval) and o (urele- 
ment, 'ordinary' object). D itself corresponds to 
the universal sort e (note that 'e' is used ambi- 
guously: it is either the universal sort or an ele- 
ment of E). Objects of basic sort ct are ct,tx' and 
ct" for (x = i,s,tp or o. Thus, ct will be used ambi- 
guously for sort symbols and objects of this sort. x i 
are objects of the universal sort, i.e. elements from 
D. 
2.1 The Interpretation of ingofNominals 
In the previous ection it was shown that the intui- 
tive notion of a change covers two different, yet 
complementary perspectives. A change can be 
viewed either as an object or as a transformation 
of state. The first perspective is related to the 
eventuality structure E whereas the second per- 
spective is linked to the dynamic transition structu- 
re S. These two complementary perspectives will 
be used for the interpretation of verbs and deri- 
ved/ingofnominals. In principle, each of the two 
perspectives can be used for the interpretation of
both verbs and defived/ingofnominals. In ES the 
first perspective is chosen for the interpretation of
verbs. An n-place verb v is interpreted as the n+l- 
place relation (9). 
(9) ~.x I ... XxnXe\[P,(e ) ^01(e,xl) ^ ... ^  0n(e,x,) \]
In contrast o ES, the translation of verbs in the 
present approach will be based on the second per- 
spective of a change. This decision is based on 
two reasons. First, 'ordinary', i.e. non-derived 
nouns, like man for instance, are usually analyzed 
as denoting sets of objects of the basic domain D. 
Using type-theory, this means that they are trans- 
lated as expressions of type <e,t> (where D, = D). 
From this it follows that derived and ingofnomi- 
nals should be interpreted as denoting sets of basic 
entities too. In the present framework there are 
five basic domains: O,E,I,T and S. It is therefore 
possible to distinguish between five different (non- 
logical) sorts of basic expressions because each 
domain can be taken to be the domain for expres- 
sions of a corresponding sort 13 where 8 is either o, 
E, i, tp or s, i.e. the sort of objects, events, inter- 
vals, time-points or states. Above D was defined as 
the union of the basic domains. The sorting of the 
universe D can be used at the level of types of ex -  
pressions by letting each expression of type <B,t> 
for g e {o,e,i,s,tp} be also of type <e,t>. It is then 
possible to translate nouns uniformly as expres- 
sions of type <e,t>, i.e. as denoting sets of 
elements from D, which can be further subclassi- 
fled according to the sorts o, e, i, tp and s. For in- 
stance, the translation of man will be an expression 
of type <o,t>, denoting sets of 'ordinary' objects 
(that is, elements from O). Derived nouns like per- 
formance of the song by the soprano and ingof 
nominals like performing of the song by the sopra- 
no are translated as expression s of type <e,t> 
which denote sets of events. The second reason 
has to do with the distinction between the trans- 
lations of verbal and nominal expressions. On the 
present account, an n-place verb will be translated 
as an expression of type <(z~..., <ctn,<s,<s,t>>>...>, 
where the ct i, l_<i_<n, are the types of the (transla- 
tions of the) subcategodzed ('ordinary') arguments. 
From this it follows that the translations of senten- 
ce radicals like John run or Mary eat an apple are 
of type <s,<s,t>>. They denote binary relations on 
S and, consequently, no sets of basic objects. This 
is in contrast o nominal expressions the transla- 
tions of which are of type <ctn,<13,t>> for (x n a 
(possibly empty) sequence of types and 8 a basic 
type. After the first n arguments have been disch- 
arged, nominal expression like man or performing 
of the song by the soprano therefore denote sets of 
elements of some basic domain D B. Thus, verbal 
expressions are semantically distinguished from 
nominal ones. Whereas (the dynamic components 
of) the latter denote sets of entities, the (dynamic 
components of) former denote binary relations on 
S. The main task consists in showing how the non- 
relational perspective can be derived from the rela- 
tional perspective that is used for the interpretation 
of verbs in the lexicon. 
Each event e of type P, for some v is related 
to an n+2 tuple <x 1 ..... xn,s,s'> of objects (indivi- 
duals): 'v'e ~ Pv3xl...xn3ss'\[(e,xl) ~ 01 ^  ... (e,xn) 
0 n A x*(e) = (s,s')\] by means of the functions ix*, 
13", ~: and ~*. The pair (s,s') is the execution-se- 
quence of e. The xi are the values for e of the 
thematic relations for which the event-type Pv is 
defined according to ~:. From this it follows that 
each Pv induces an n+2-ary relation Rv defined in 
(lo). 
15 
(10) a. 
b. 
Rv(X~)...(x~)(s)(s') = 1 iff there is an e 
Pv such that 
(i) ~?*(P,)(e) = <x~ ..... x~> 
(ii) ct*(e) = s 
(iii) B*(e) = s' 
Rv = {<x~,...x,,s,s'> ~ D n x S x S I 3e\[e 
Pv A (e,xi) ~ 0 i A x*(e) = (s,s')\]} 
The condition (i) requires that the value for e of 
each e-role for which Pv is defined is an argument 
of the relation and that the i-th argument of R is 
the value of e for the i-th e-role assigned to Pv. 
The second requirement implies that (e,x~) ~ 0 i. In 
(10b) and the definitions that follow condition (i) 
will therefore be reduced to (e,x~) ~ 0 i. 
Let {Rv} v ~ VERB~ be the set of (induced) 
binary relations corresponding to (10). Rv will be 
used in the interpretation f the verb v in the lexi- 
con although this relation itself cannot be taken as 
the denotation of the verb. Rather, v denotes a 
subset of Rv, namely that subset such that (s,s') 
OP(Q) with OP = ~P~) and Q = 8(P0. Recall that 
on the present account each transformation f sta- 
tes is supposed to be brought about by some event 
e of a particular type Pv. For a particular v, the 
change is brought about in some specific way de- 
termined by the dynamic mode ~Pv) with respect 
to the property Q (= 8(Pv)). For instance, events of 
type eating bring about a change with respect o 
the mass of an object that is denoted by the inter- 
nal argument and the property Q is that the mass 
be zero. An attempt to bring about Q by eating can 
fail. For instance, if only half of the object is ea- 
ten, Q does not hold in the final state of the execu- 
tion. At the program-level the execution is a non- 
completed one which is a proper prefix of a 
completed one, where a completed execution is an 
execution (s,s') such that (s,s') ~ ~P,)(8(P~)). If 
? ~P) = Min-BEC, no proper prefix of an execu- 
tion-sequence that is an element of the program is 
itself an element of the program. Yet these non- 
completed execution-sequences too are transforma- 
tions of states that are brought about by an event 
e' of type eating but they are not denoted by eat 
because 8(Pv) does not hold in their final states. 
Events e of type Pv the execution-sequences 
of which satisfy ~Pv)(8(P,)) are denoted by ex- 
pressions where the arguments are non-mass and 
singular like John eat the apple or The student 
push the cart to the station. From a programming 
perspective, these transitions correspond to (exe- 
cutions of) a sequential program. If the arguments 
are plural as in eat three apples or eat apples, the 
program must be executed for each apple separa- 
tely such that one gets a parallel program that 
consists of three (or n) sequential subprograms 
each of which is of type ~P,)(8(Pv)). The execu- 
tion sequence of the parallel program need not 
satisfy ~P0(8(Pv)) which is exactly what is requi- 
red witness the well-known aspectual contrast bet- 
ween eat three apples and eat apples. As shown in 
Naumann (1997a, 1998), given 8 and y, it is pos- 
sible to calculate the dynamic mode for the result 
Q' (which is a function of the results for the se- 
quential subprograms). The relation that is denoted 
by verbs in the lexicon is given in (11) (OP = 
~P,), Q = 8(P~)). 
(11) R,,?o~o9 ~ = {<x~,...x,,s,s'> ~ D" x S x S I 
3e\[e ~ Pv A (e,x i) E 0 i A x*(e) 
= (s,s') A (S,S') ~ OP(Q)\]} (1 -< 
i_<n) 
For a given v, Rv~oPcoo~ is a subset of Rv. Similarly 
to R,, it is determined by ~?, ~?*, ~* and, additio- 
nally, by 8 and y. According to (11), a non-stative 
verb in the lexicon denotes a (generalized) relation 
between states, i.e., it is an expression of sort 
<ct,<s,<s,t>>> where ?x is a (non-empty) sequence 
of basic sorts, as required at the beginning of this 
section. The relation R~ (or Rv~opcoo~) represents the 
perspective of a change as a relation between sta- 
tes. 
The relationship between P~ and R,,cOp~Q~ ) can 
also be expressed by means of a function p : {Pv} 
-> {R~optQ~ } v ~ VERB,~ which maps an event- 
type Pv to the corresponding relation Rv?op~Q)~ (P is 
a variable which ranges over the P~). 
(12) p = ~.P~xp..~,xo~ss'3e\[e ~ P ^ (e,xi)~ 0 i ^ 
x*(e) = (s,s') A (S,S') ~ ~Pv)(8(Pv))\] 
The perspective on which a change is a basic ob- 
ject can be defined in a similar way by means of 
the functions K:, ~:*, x*, 8 and y. 
(13) a. Rctv~(OpCQ)~(x)...(x.)(e)= 1 iff 
( i)  e e Pv 
(ii) K*(Pv)(e) = <x 1 ..... xn> 
(iii) X*(e) ~ ~Pv)(8(P0) 
b. Rc~v~(OpCQ) ~ = {<x t..... x.,e> ~ D" x E I \[e 
P~ A (e,xi) ~ 0i ^  x*(e) ~ ~Pv)(8(Pv))\]} 
16 
Similarly to the relational perspective, a function 
p* : {Pv} -> {R.{~){oPtop)} v e VERB~ can be defi- 
ned that expresses the relationship between P,, and 
Recv)(o~)- 
(14) p*= XPXxr..Xx.Xe\[e ~ P ^ (e,x i) ~0 i ^ 
x*(e) ~ NP,)(~(P,))\] 
There is a 1-1 correspondence between the P~ and 
the R,t~) (or R,c~)toPcop)). On the assumption that for 
vcv' v,v' ~ VERBo~ tL,co~op) ~: tL,.~o~)), there is 1- 
1 correspondence 11 between {R,~)~o~))} and 
{R~tov~op)}. If "~*(e) = (s,s') then <x~ ..... x?,s,s'> 
tL,toP(o~) <-> <x~ ..... xo,e> ~ P~{v)~oe(op). For a given v, 
the relation (13) is the denotation of the correspon- 
ding ingo:nominal. The ingo/-morphem is then 
interpreted as mapping R~oP~op) to the correspon- 
ding relation Rc(o~Q ,, i.e. as the function coi,g{oO : 
{R~(o~,~ } -> {R~){O~(Q, } which assigns to each 
element in its domain the corresponding relation in 
its range: cO~?~oo(R.,~O~<Q~)) = R (~)<Op~Q,. Using X-nota- 
tion (and the equivalence between sets and their 
characteristic functions), coiog(oO is defined in (15). 
(R ranges over the relations in the domain of 
COing(oO)" 
(15) ~i~toO = 
XRkx~...Xx,Xe\[\[rfl(R)\](x0...(x,)(e)\] 
According to (15), coi.g~o o is the inverse of 1"1. The 
ingo/-morphem does not change the argument-grid: 
each argument of the verb is also an argument of 
the nominalized expression (see Zucchi (1993) for 
details). Furthermore, ingof is polymorphic in the 
sense that it applies to expressions of different 
arity. 
The definition of ~i,g(oO in (15) is based on a 
relation between R~c~)(oP{o9 ) and R~,cOp(Q~). As was 
shown above, the relations R,,(OptQ) ) and R, cv)~oPco9 ) 
can be determined as the ranges of two functions 
p and p*, respectively, which map P~ to these 
relations. From these two relationships it follows 
that R~(~)(oP(o9 ) can be defined in terms of R~(oP(op) if 
it is possible to 'recover' P, from IL,(op(Q,. This is 
the case if P is injective (i.e., for v ~: v', p(P~) ?: 
p(P?)). C0ing(o o can then be defined as the composi- 
tion of p-i and p*, (16a), which yields (16b) when 
spelled out: 
(16) a.  (.oing(o 0 = p ,  . p-i 
b. (.0ing(o 0 = 
XRXxr..Xx,Xe\[e fiX(R) ^ (e,x i) ~ 0 i ^ 
x*(e) a ~P~)(~i(P~))\] (l_<i_<n) 
According to (16), first p" is applied to R.,(oP~oj) 
(i.e., the result of p for P,), yielding Pv, and next 
p* is applied to P, yielding Rccv~OPCOp): R~?oPco~ ~ --* 
(P") Pv -~ (P*) Rc~v~opcopr 
The aspectual restriction on ingofnominals i
explained as follows. Stative verbs like know or 
love do not express changes. This is captured by 
interpreting them as generalized binary relations on 
S to which no events correspond (the relations Re 
v' ~ VERB, in (xi) above). The relations are there- 
fore not derived from event-types Pv but are rather 
taken to be primitive. Consequently, there are no 
R,<~) (and R~c~)~opco~)) such that the function p (or 
p*) and therefore co~,g(o o is not defined for them. 
Stative verbs denote sequences of states on which 
some condition Q continuously holds. The dyna- 
mic mode that corresponds to stative verbs is 
HOLD = XQXss'Vs"\[s < s" < s' -> Q(s")\] which 
can be interpreted as a kind of (iterated) test- 
program from DL. 
2.2 The Interpretation of gerundive Nominals 
In section (2.1) the derivation of ingofnominals 
from verbs was semantically analyzed as a map- 
ping that makes use of the double perspective in 
which a change can be described in the dynamic 
event-structure defined above. The analysis of 
gerundive nominals is based on a third perspective. 
Whenever an event e of some type P occurs, a 
corresponding sequence 6 is (partially) realized on 
the run-time "t(e) of e, namely that sequence t~ 
such that x(e) = i and p*(i) = (s,s') (i.e. x*(e) = 
(s,s')). The occurrence of e therefore partly deter- 
mines the world when it occurs by bringing about 
~(P) in the way corresponding to 7(P). Thus, each 
event e can be said to leave some trace behind. 
This trace concerns the property that is changed by 
the event, e.g. the location of some object. The 
trace of an event can be defined as a pair <i, 
OP(Q)> and thus as a property of intervals. Pro- 
perties of intervals can be taken to be states of 
affairs (SOAs), i.e., partial constellations the world 
is in during some period. SOAs as properties of 
intervals are a third perspective in which a change 
can be described. It will be argued that gerundive 
nominals denote SOAs. 
17 
First, intervals are objects which are neither 
slow or sudden nor can they be said to take a long 
time. Second, on the existential reading it is the 
occurrence of an event which is surprising. But 
whenever an event has occurred, a corresponding 
SOA has been realized. This explains the equiva- 
lence between The singing of the song by the so- 
prano surprised us and The soprano's inging the 
song surprised us on the existential reading. What 
is surprising about e's run-time interval is the fact 
that OP(Q) is realized on it. Third, for an event e 
there is the further possibility that some other pro- 
perty of it is surprising besides its property of ha- 
ving occurred at all. Fourth, as the domain D is 
structured such that E,I, and O are subsets of D 
and gerundive nominals are of sort <i,t>, each 
expression of this sort is also of sort <e,t>. One 
can therefore explain why NPs with gerundive 
nominals (and ingofnominals ) can occur in subject- 
position of verbs like is strange without having to 
assume that the latter is ambiguous. Fifth, not only 
traces of events are states of affairs but any pro- 
perty of intervals for some OP, including HOLD, 
such that there are no aspectual restrictions on 
gerundive nominals. Therefore, the notion of a 
SOA not only comprises changes as intervals on 
which a change of some property Q occurred but 
also intervals on which Q continuously holds (as a 
result of some change brought about by an event 
e). The state of affairs that OP(Q) has been reali- 
zed is defined in (17). 
(17) SOAop(Q ) = {ieI I  \[p*(i) e OF(Q)\]} 
SOAop(Q ) is that property which an interval i has 
just in case OP(Q) is realized on it in the sense 
that the corresponding sequence p*(i) satisfies this 
property. SOAop(Q ) is the largest set such that 
OP(Q) is realized on some i. The following subsets 
can be defined. First, the set of those intervals 
which are the run-time of an event e which brings 
about OP(Q): SOA~.op(Q ), (18a). The events corre- 
sponding to SOA~.op(Q ) need not all belong to the 
same type P, because OP(Q) can be brought about 
by events of different types. The restriction of 
SOA,.op(Q ~ to intervals which are the run-times of 
events of type P, bringing about OP(Q), SOA,.op(Q), 
is defined in (18b). 
(18) a.  SOAc,op(Q ) = 
{i e I I 3e3P\[e P ^ x(e) = i ^ 8(P) = 
Q ^ T(P) = OP ^ g*(i) ~ OP(Q)\]} 
b. SOAv.oP(o) = 
{i e I I  Be e E\[e ~ Pv A "~(e) = i ^ 8(Pv) 
= Q A NPv) = OP A g*(i) e OP(Q)\]} 
Syntactically, ingo:nominals differ from gerundive 
nominals by the fact that the former can co-occur 
with determiners whereas this is excluded for the 
latter: the performing of the song (by the soprano) 
vs. *the performing the song. There are different 
methods of how this difference can be handled 
(Zucchi (1993)). I follow Zucchi (1993) and apply 
the ingg,-morphem after the ordinary arguments 
have been discharged that such ingg, applies to an 
expression of sort <s,<s,t>>. For the sake of sim- 
plicity I will assume that the result is basically an 
expression of sort <i,t>. Using a type-shifting rule 
the type can be lift to <<i,t>,t>. 
The ingg, denotes the funct ion  oog, : 
{R*,(Op(Q~) } v ~ VERB, ,  u {R*v.(HOLD(Q,D} 
v'~ VERB s -> ~o(I) which maps those binary rela- 
tions R on S which result from an n+2-nary rela- 
tion R~(op(o:) v ~ VERB after the first n arguments 
have been discharged to the set of intervals i on 
which an element of R has been actualized. Thus, 
for a non-stative verb v with non-mass singular 
arguments, R*~(op(Q , is the parametrized relation 
{<s,s'> ~ S x S I 3e\[e e P, A (e,xi) e 0 i A "~*(e) 
= (S,S') A (S,S') e y(Pv)(8(P~))\]} such that 
<xv--,x,,s,s'> e Rv(oP(Q)r For other types of argu- 
ments, i.e. plural ones, the situation is more com- 
plicated, as explained in section (2. I). In this case 
the sequence (s,s') need not be an element of 
T(P,)(8(P~)) because it is the execution-sequence 
of a parallel event. What is the case, rather, is that 
the execution-sequence of each sequential part is 
an element of Y(Pv)(8(Pv)). R*v,(HOLD(Q.)) is defined 
similarly for a stative verb v'. cog. is defined in 
(19) using X-notation. (R ranges over the domain 
of cog.) 
(19) o~, = XRki3ss'\[R(s)(s') A la*(i) = (s,s')\] 
On the assumption that R is denoted by an expres- 
sion with non-mass ingular arguments, the folio- 
wing cases can be distinguished. If R = R*v. for 
some v' e VERBs, each (s,s') e R satisfies 
HOLD(Q?). If, on the other hand, R = R*~(Op(Q~ 
for some v e VERB,s, R corresponds to an event- 
type P~, such that each (s,s') e R satisfies OP(Q) 
for Q = 8(P~) and OP = T(P~). The intervals i are 
18 
then the run-times of the events of the correspon- 
ding subtype P'v of Pv. (for instance, if R is the 
relation denoted by John eat the apple, P'v = Pjo~ 
c~ ~ vpl,). If R is denoted by an expression with 
plural argu-ments, one gets the following. For a 
non-stative verb, the sequence (s,s') is the join of 
the execution-sequences ~ of a set of sequential 
events such that each ~ is an element of 
~P~)(~5(Pv)). For a stative verb v', (s,s') is the join 
of sequences each of which is an element of 
HOLD(Qv.). In each case the interval i is the join 
of intervals i' such that i'e SOA~cop(Q~. 
3 Conclusion 
The analysis of nominalization i English presen- 
ted in this paper is based on two assumptions. 
(i) Non-stative verbs denote changes 
(ii) The notion of change comprises different 
aspects 
From (i) it follows that any theory must admit to 
model the intuitive notion of change. This seems 
to require some form of Dynamic Logic or some 
other form of programming logic in which the 
development of something oing on in time can be 
represented. The second assumption seems to re- 
quire the use of a (many-) sorted model such that 
the domains corresponding to the different sorts 
are systematically related to each other. Each do- 
main must be equipped with some structure. The 
different aspects that the notion of change com- 
prises are then linked to the different domains and 
their corresponding structures. Thus, besides sor- 
ting the universe, there must be enough structure 
in order that the different aspects can be modeled 
in an adequate way. This makes it necessary to use 
some form of a decompositional analysis of verbs. 
In the present approach the decomposition is 
done first with respect o the argument structu- 
re: n-place verbs are analyzed as denoting 
n+2-ary relations, and second with respect o 
the semantic ontent of a verb. This content is 
split into a dynamic and a static component. 
The dynamic omponent denotes ome type of 
transition between states which is brought 
about by an event. This component is therefo- 
re closely related to the first decompositional 
component. The static component concems the 
relationship between the arguments that are 
introduced by the decompositional analysis 
and the 'ordinary', subcategorized arguments. 
This relationship is expressed by thematic re- 
lations. 
References 
Krifka, M. (1992) Nominal Reference, Temporal 
Constitution and Thematic Relations, in: Sag, I. 
et al (eds.): Lexical Matters, CSLI Publications, 
Stanford, pp.29-53 
Moens, M./Steedman, M. (1988). Temporal Ontol- 
ogy and Temporal Reference, J. of Computatio- 
nal Linguistics, 14 
Naumann, R. (1996). Aspectual Composition in 
Dynamic Logic, Proc.10th Amsterdam Collo- 
quium 
- (1997a). A Dynamic Temporal Logic for Aspec- 
tual Phenomena in Natural Language, to appear 
in Proceedings 2. International Conference on 
Temporal Logic, (D. Gabbay/H. Barringer 
(eds.)), Kluwer 
- (1997b). A Dynamic Decompositional Event- 
Semantics, talk given at the 2. conference on 
'Sinn und Bedeutung', Berlin, submitted to Lin- 
guistics and Philosophy 
- (1998). A Dynamic Logic of Events and States 
for the Interaction between Plural Quantification 
and Verb Aspect in Natural Language, to appe- 
ar in Proc. 5th WoLLIC, Sao Paulo, Brazil 
Naumann, R./Mori,Y. (1998). An Analysis of De- 
finite and Indefinite Japanese Aspectualities in
Dynamic Decompositional Event Semantics, to 
appear in Proc. 6th Symposium on Logic and 
Language, Budapest 
Zucchi, A. (1993). The Language of Propositions 
and Events, Dordrecht, Kluwer 
19 
