Portable Knowledge Sources for Machine Translation 
Koi<'hi '\]~ake.d a 
Tokyo  Research  Lal>oratory,  IBM Research  
1623-14 Sh imotsurum~t ,  Yam;~to, K~ulaga,wa. 242, Ja, pa,n 
Phone:  81-462-73-4569,  81-462-73-7413 (FAX)  
takedag~tr l .vm~t . lbm.com 
ABSTRACT 
in this paper, we describe the acquisition iuld (Irga- 
nization of knowledge sources fur machine translation 
(MT) systems. It has heen liointed out by many users 
that one of the most annoying things idmtlt MT sys-- 
terns is tim repeated occurrence of identical errors in 
word sense and attachment dlsambiguation. We show 
the limitations of a conventional user-dictionary method 
and explain how our approach solves the prol/lem. 
1. I n t roduct ion  
In the last decal% more and more commercia.l ma- 
chine translation (MT) systems have lmcome available 
for a wide variety (if languag, e Iiairs. An MT system is a 
very handy tool: trot one quickly Iinds out thai, it Irlakes 
tt, e same errors over and over again even if a user dictio- 
nary is carefully maintained. There are sew, ral re;mons 
for such repeated errors. 
1. Commercial MT systems are not tmilt in actor  
dance with a powerful h;xical semantic formalism. 
The user dictionary alone cannot (llsamlfiguate 
word senses and phrasal icttitelimei/ts satisNmtorily. 
2. MT systems cannot handle the domain and context 
dei)endency ofword sm,se, ph rasal atl, aeh men L an d 
word selection. 
3. In a shared environment, each user has a differ-. 
ent user dictionary, and must therefore redumhmtly 
correct the same errors ms all the other users. 
A powerful exieal semantic apl)roaeh \[s\] couhl give more 
accurate translatiml~ but it might be. too Inuch to ask 
users to develop their dictionaries within that formal- 
ism. Tl, e simple structure of a user dieti(mary also re- 
stricts the learning ability of M'r  systems during the 
post-editing process. The second of the almw~ re;kstms 
t l~  motivated recent exanlple-ba~ed and case-b~med ma- 
chine translation re.search \[9, s, 10\]. However, a method 
for finding the best-matehlng eases hi a cime. base., where 
cases (or exalnples) are collected from different dmna.ins 
or contexts~ has not been studied well. Nor is it kllown 
whether considering the frequency of eases gives a bet- 
ter result. The third reason is rarely <liscussed> hut it 
is riot desirable sirnply to share a single user dictionary, 
since the dictionary may become inconsistent by reflect- 
ing multil>le users' updates. McRoy \[s\] discussed word 
sense disambiguation using multlph; knowledge sources, 
but her method is still dictionary-b~med. 
Some of the eoolmerclal systems for human-aided 
trailslatlm h such as the Translation Manager/2 \[~1~ can 
provide the user with nmre Ilexible access to multilile 
dictionaries and the Iranslation memory (a repository 
of pairs of smlrce and target sentences). This organiza- 
tion of knowledge cmdd lie quite useful for selecting cor- 
rect transhttlons of vvords~ lint the types of knowledge 
awdlable from the dictionaries and translation memo. 
ries are rather limited> and are certainly not enough for 
resolving strueturaJ ambiguities in sentences. 
In this paper, we propose Porhtble Knowledge Sources 
(PKSs) for machine translatlou. A PKS consists of 
preference infi~rmatitm on word sense, l)hrasal attach- 
ment, and word selection for translation. It is acquired 
through user lift.erection in the post-editing process, and 
is stored with the document being translated. When 
translating a document by using an Mq' system, a user 
can specify a llst (if already-translated documents, and 
the system will ma.ke use of the PKSs included in the 
specilied documents. We show how Sltch a collectimt 
of I)KSs is organized, used for translation~ and inte- 
grated into a user dictionary, and how the problem 
stated aliow~ can he solved by using PKSs. 
2. Por tab le  Knowledge Sources  
A Portabh~ Knowledge Source (PKS) consists of pref- 
erence infornlation on three kinds of ambiguity: 
1. Word sense 
2. Phrasal attachelnent 
3. Word selection 
The preference inf'ormatiou is acquired from the ilser 
through post-.edlting or interactlw; translation \[% i \ ]  iuld 
is paired with the docu lnelit that the user is working till. 
That is, a t'KS is stored and managed 1,\[)gether with the 
document flit which it is created. 
l,et PKI~ PK~> and PK3 be PKSs for the respective 
types of ambiguity mentioned above. The following is 
~n e?ample of word sense ~mbig~fity: 
l)elet.e the line. 
85 
The word "line" could be (1) a single row of letters, (2) 
a geometric mark, (3) a hardware wire, and so on, for 
each of which a different ranslation is usually required 
in a target language. When tile user specifies that a 
particular occurrence of tile word "line" in a document 
D means a single row, the PI(S 
(Pgl ("line" (cat n)) (sense I)) 
is created, and is stored with D. 
An example of phrasal attachment ambiguity is as fol- 
lows: 
Order the publication through the IBM branch 
serving your locality. 
The present participle phrase can be either attached to 
the main verb "order," or to tile noun "branch." If 
the user specifies that it modifies the noun as a post- 
nominal adjective phrase (ADJP), the PKS 
(PK2 ("serve" (cat v) (~orm prspr t ) )  
ADJP ("branch" (cat n))) 
is created) The preference of prepositional phrase at- 
tachment is also represented by PK2. 
Finally, an example of word selection arnbiguity is (1) 
"~ '1 - - .  ? 'y~" '  and (2) "~E?~:J ' -"  fl, r the com- 
pound noun "memory chip", where tile first translatinn 
can often be found in PC documents, while the second 
one, which ha.a the same meaning, is typically used in 
textbooks. When the user specifies that the second one 
should be used, the PKS 
(PK3 ("memory chip" (cat n)) 
( " I t~N~"  (cat n))) 
is created. If word sense is to be included in the defini- 
tion of word selection, such that the word W1 is used 
in sense S and should be translated by the word W2~ it 
is separately represented by (PK1 W1 S) and (PK3 W1 
w2). 
Each PKS collected through user interactim~ has an 
age, based on the time and (late of its creation. The 
younger the PKS, the stronger its preferM)ility in one 
document, since it could have been used to overrule the 
preceding PKSs. Note that the age of a PI(S is valid 
only among other PKSs in the same set. Two sets of 
PKSs are not comparable if they are paired with differ- 
ent documents. 
3. Organ iz ing  Por tab le  Knowledge  
Sources  
Once the user has translated several documents, tile 
sets of PKSs paired with them begin helping tile MT 
system to resolve the three kimls of ambiguity described 
(The  representation of the PK?  can vary depending on the MT 
system that  uses the PKS. For examl)le, the modifier and modillee 
phrases cau be represented by syntactic structures;  word senses 
and semantic ase relations can be associated; and so eli. 
Dic t ionary -based  
MT System 
ill i ;; ;iii!ili i i\]~i: \[i\]?i !:i i i{iiii~  Tilli l if ii i: i\]ii ;i\]ii i \]~ :~i~i\]i~ili ::!i Y 
I 
i::!i:;- worO #O OCt on!!il)i; i::!) ~::!!~;~!ii!i~;i!i~iiii::~iis:iii~i~!i::ii!i;i~::i~:sii::i~i~i~::iii~!::~i!~!iii~ii~;!~ii!ii~!i~:i!~:i;~\] 
documents  
PKS-based  MT System 
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
core d lc t lor lar  \[iiiili .................................... ...... y,..i,ti?ii!iiiSi\] 
P K S ~  
documents  
PKS  
Figure 1: l)ictionary-based and PKS:based MT Sys: 
tems 
in the previous ection. When a new document is to be 
translated, the user either specifies a list of previously 
translated ocuments as a source of available PKSs, or 
lets the MT system automatlcMly choose them. Such a 
list of documents is cMled a document list. 
Figure 1 compares a PKS-based MT system with that 
of a conventional dietionaryd~ased MT system. 
l",ven though a logical document (llay not be identified 
with a physical lile, it is the e:~siest and n|ost practical 
way to organize the hierarchy of documents. In prac- 
tlce, when transl~d.lng technical documents, it is usual to 
translate the glossary first, agree tm the translations of 
technical terms, and then work on individuM chapters. 
This gives us a natural ordering of documents~ 
glossary -+ chapter 1 ---+ chapter 2 ... 
which is also used as an ordering of PKSs to be hlcof 
porated for machine translation. One way of automat- 
ically choosing tile document X for translating a new 
document Y is to cMculate tit(: overlap of words con- 
tained in both X and Y, and to find the X with the 
largest overlap. This idea is similar to the context idea- ( 
tification method Bal, which is used effectively h)r word 
sense disambiguation. 
86 
One important  chltracteristic of tills PKS Ol'ganiza.- 
tlon is that  it can be dynamicMly rearranged. \Ve clxn 
invMidate some PKSs by shnply removing ix docunlent 
from tile document list, or validate a new set (if PKSs tJy 
adding its paired document  to tile list. This is extremely 
nseflil fur domaln-sensit ive and context-sensitiw~ tri~ns 
latlon, since a close look at documents ill a seemingly 
similar domain will show that there are too many con- 
tlicting word senses and word selections to build it single 
consistent domain dictionary. 2 In the worst ca.~e, the, 
user has to keep oil asking the systenl to prefer olte ('if 
several word senses ,'ks lnally thnes ms ix new doculilent 
arrives to be translated. 
Another important  observatklo is tlu~t tim system can 
calculate tile quallty of preference inhlrrnittion a.s fol- 
lows: 
1. Given a document list, find ~dl the PI(Ss ill tho 
docnment  list, aM create a PIqS graph I which is a 
directed gr~q)h, for each type of PKS (see Figure 2): 
* If the PKS is of type. (I 'KI 'w('rrdi sens%), 
crelxte a no(h'. Nwl for 'mo'rdi, a n.de  Nsj 
for sen.s'ej, and a directe.d arc a U (lal)(;led 
%ense") from Nwi to Nsj. 
? If the PKS is of type (PK2 word; role wordj) 
create a node Nr l  for wordi~ a node Nlj for 
wordj, and a directed a.rc aij (lal~eled with a 
syntactic role) from N'ri to Nlj. 
e If the PKS is of type (PK3 'lvo'rd; transj) 
create a node Nsl for "wordi, a node Ntj 
fl)r transj, and it directed iu'c (tij (hdmh~d 
"Irons") from Nsi  to Ntj. 
2. Count the number C1 of' conJlicling arcs far the 
PK1 and PK3 graphs, That  is, find the number (if 
arcs leaving tim saille node but gohig to dlffermit 
nodes. 
3. Count the number CP~ of conJlicting ilalii,s ;~ for each 
pair of nodes n l  and n2, connected by an arc al in 
the PK2 trap} b Sllt:h that for solill! ltodl~ I13, there 
are two arcs a2 from n\] to n3, and ix3 rronl n3 ttl n2, 
wile.re a2 and a3 }lave the same label (see Figure 3). 
Intuitively, CI shows a ll/llll}'Jo.r of alillli{{llOtlS word 
senses and word selections, and OR shows possibh.' 
i tttaehment ambiguities hi the giwm document list. 4 
=I~ecall tile word senses of the word "lh~e" in Section 2. All 
of them ~ppear in the  con lputer  dotn i t i l l  I not&l)ly in the  Itrelts of 
text editors, graphics, find hardwtu'e marauds, respectively. Our 
~pproach ~dlows tile user to lid just the sense dynttndcedly for each 
type of nlgrtu~tl. 
aA path is ~ sequence of directed arcs. (;ontllcting pMhs are 
two or store distinct sequellCe8 of paths hetween it giveil pair of 
nodes. 
4SIlppose that n l  is *l prepositional ll lrltse~ 112 is it verb I,hrlise: 
anti n3 is Itnother prepositimud phrttse, Then, we have au ambi- 
guity in tile nl uttadlment.  Multiple outgoing arcs from ~L ,lode 
in the PK2 graph do not necessarily imply ambiguities. 
PK1 
,0  __,0 
" l lno"  (cat  rl) t~or lao  1 
PK2 
ADJP  
"sarvo  . . . .  b ranch"  (cat n) 
cat  v)  
form prsprt) 
PKa 
"momorv  chip . . . .  ~,\[2~.  .TJ '  
(cut  n) (cat  n) 
Figure. 2: PKS graphs 
"information" (cat n) 
PP IN 
% ' '~  "file"(catn) 
PP ABOUT~IPP ABOUT 
"password" (cat n) 
l"it~ure 3: C,o,itli(:tiiig lmths hi a PK,q gra.ph 
Thereh/re, a document  lisL with hwge C1 and/or  C2 
gonerally should be divided into smaller lists for consls- 
Lent translation. Ill all ideal situation, C1 and C2 botll 
should be 0. Cole et id. \[:q and Nasukawafl 71 suggest hat 
there is a strong telidellcy for C\] to be very slna\[l in a 
reiLSOllal)le spoi l  Of goxt.  
It is easily shown that  for any two docllmellt lists 
I,l iUld 1/2 (1,1 N \[,2 -- (/)), the mtmbers of conllieting 
arcs and \[)al, ilS~ U l l ,  C121 (~'21, and  C22, respectlve\]y, 
are memogonir. Tlmt is, the numbers C,1 and C2 of 
contlieting arcs and Inxths of the combined document 
list L (= l,i U 1,2) satisfy CI > Ctt  +C21 and C2 > 
C2, + C~... 
4. \ ] ) i sambiguat ion  Method  
The Imsis of disanihiguation of the three t.ylms of itin- 
hignlty discussed in ~ection '.). is to prefer the host PKS 
hi the do(:ilmel/{ llst. tlutL matches the anihig/lity~ alid to 
hlterpret ~}ie. PKS as ~t rule for selecting a word SellSe i
phrasld attitchlttellt  oF word traitsh~thln. 
i f  there is lto matching PKS, either the. ambiguity is 
properly hiuidled I>y the systenl, which results in no tlS(!r 
corre.('.tioll in the dtiCltllielits~ ()r it is l lew to the systc ln .  
In tim fornler case, the riser will probably be satisfied 
wit.h the transhttim, by the system. In the latter case~ 
the translattlon may }litve to })e corrected hy t i le riser, 
but the interaction will be recorded its a lleW l l l (S and 
usexl for \[llttlri! d i s ; tm}/ iguat ion .  
I 
'\['}m rllati:hiItg~ algorithrn for I>K1 and PK3 rnles is a 
sinllile exa.ct matching of words a.nd le.xieal features. If 
87 
two or more PKS rules match the ambiguous word, the 
ages of the rules and the ordering o1" documents in the 
document llst uniquely determine the most preferable 
PKS. The PK2 rules, however, can be used with a more 
flexible matching algorithmIe, 12\] since the coverage of 
PK2 rules would be very limited if two phra.ses (the 
modifier and modifiee phrases) had to match the rule 
exactly. 
Once the document list has been given, the PK1 and 
PK3 rules can be polynomlally converted into a shrq)le 
lookup table, where the key is an ambiguous ward, and 
only the most preferable rules itre stored mr retriew~d, s 
PK2 rules can be organized similarly as a ternary lookup 
table. 
It should be noted that sentences in a document list 
can be utilized as an example base \[9\] since the docu- 
ments in the document list has already been translated, 
and the translation of the source sentence is readily 
available. Indeed~ the conventioual matching algorithm 
for a flat example base has to be extended into a hierar- 
chicM one, where the latest translation has the highest 
priority, and PKSs must be equally tllken into cons\[d: 
eration. 
5. Knowledge Source Compilation 
When a set of documents in one domain grows con- 
siderably, or when the MT system is to be transporte(I 
to a different environment, it is convenient to be able 
to compile PKSs into a single, portable user dictionary. 
The compilation is similar to the creation of lookup ta- 
bles, described in the previous ection. The numbers of 
conflicting arcs and paths should be carefully examined 
to see whether a given document list yields a cousistent 
user dictionary. "\['he user can rearrange the ordering of 
documents, and choose the most preferable among con- 
flicting PKS rules to make the optimal user dictionary 
for the domain. 
The rearrangement of documents in the document  
llst does not change the resulting PKS graphs. It just 
changes the preferences among the conflicting arcs or 
paths. Therefore, the optimal construction of ~t user dic- 
tionary does not have to consider an exponenthd num- 
ber of possible document orderlngs, but only a polyno- 
mial number of the following palrwise constraints: 
* If there are conflicting arcs ttl~ a2~ . .  "1 ak iu the 
PK1 (or PK3) graph, and the most i)referable arc 
is a;, the document di having the PK1 (or PK3) 
rule for ai must be preceded by each document dj 
having the arc a a" (j = 1 , . . . ,  k. j 7~ i). 
? If there are conflicting paths Pl, P2, . . ,  l)k in the 
PK2 graph, and the moat preferable path is Pl, the 
5Alternatively, all the conflicting PKS rules can I)e stored to 
give tire user as many candida.tes as possible. 
document di having the PK2 rule f~r the ~irst arc 
in Pl must be preceded by each docunmnt dj having 
tile I)1(2 rule for the first arc ill pj (j = 1, . . . ,  k. 
j T~ i). 
It is polynomlally decidable whether there is an mr- 
dering of documents that satisfies all of the above con- 
straints. An ordering of documents exists if\[" the con- 
straints are not cyclic (that is, iff there is a document D 
that must precede itself). \],\]yen if there is no linear or- 
dering of such documents, the user dictionary can still 
be cre~ted from the user-selected arcs and paths. In 
this case, however, there  is no natural carrespoudence 
between the user dictionary and a document list. Such a 
eorrespomtence is indispensable if the user wishes to up- 
date the user dictionary when a new document is :tdded 
at ;to arbitrary imsition in a document list. If the user 
dictionary is equivalently reducible to a document list, 
recompilation of the document list into the user dictio- 
nary is straightforward. When no such equlvMent list 
exists~ a docunmnt may only be added to the tail of the 
list, thus ow'.rruling all the conflicting PKSs. 
6. Al ternat ive  V iews  o f  Knowledge 
Organ izat ion  
In Section 3, we took a simplified view of the PKS or- 
ganization~ which we may call an "optimistic organiza- 
tion." It was implicitly i~ssumed ti,at only the elements 
in PKSs can conflict with each other. Howew~r, the sys- 
tem's default choice of word senses, may haw~ satisfied 
a user, but may eon\[lict with a PKS newly added to the 
document list. Thus, PKSs need to be more carefully 
organized if the user thinks that th~ translation by the 
system is adequate without the PKSs. This view may 
be called a "pessimistic organization" of PKSs. The op~ 
timlstic orga.niza.tion is easier to implement, while the 
pessimistic organization can provide users with more 
consistm~t translation. 
In the pessimistic org~niza.tion, the conflicting knowl- 
edge has to be defined in terms of PKSs ~uld the choices 
of word sense, phrasal i~ttachment, and word trans- 
lation I V the system. 'lk~chnically, it means that fur 
every PKS in the docu lmmt list, we have to examine 
if each rule in the PKS to determine whether it con- 
filets with a preceding PKS rule or a choice by the 
system. This is often w~ry time<:onsuming. One way 
to deal with this l)essimistic view is to keep track of 
the docunmnt list with which a new docnment is trans- 
lated. It can easily I)e shown that time-consuming 
checking of I)B2S conlli(-ts can be avoided by employ- 
ing a monotonm~sly growing sequence of document lists, 
{dl }, {all, d2}, . . . ,  {alL, d2, "'i" dk} such that each docu- 
nlent d i in the list has been translated by using the 
PI(Ss in the document llst {dr, d2, . . . ,  d i - I  }. 
88 
7. Conclusions 
In this paper, we have proposed it new machine trlcns- 
l itton mechanism based on portable, kn(~wledge sonrees. 
It provides MT systems with an efficient way of acqulr- 
ing ar,(l utilizing the vital inR~rmlttion from the nser 
in order to gradually achieve correct translation in at 
multi-domain, multi-user environment. Since the dOCll- 
men) lint (or a lint of previously translated ocuments) 
is usually read-only, it is not only a convenient unit for 
storing domain-oriented tlisamblguation knowledge, I,ut 
also an ideal resource for machine translation that can 
be shared by many nse.rs. 
We have started organizing our knowledge sources 
into a docu lne l l t  list. The c)trrent doc.nll lei|ts con- 
sist of four IBM AS/400 computer IuanllalS with about, 
2'2,000 sentences and a CAD manual with about 10,000 
sentences. Currently only alma) 1,200 sentences have 
been translated by using our prototype MT system 
Shalt2\[t l \ ]  and corrected by the use.r for knowlpdge atc- 
qulsition. The PKS rules art.' therefore few and not 
ready for qnantitative analysis. Some interesting oc- 
cnrrences of words, however~ have already been found. 
In one of the above, manuals, for example, the noun 
"part" was used in two different word senses: as a hard-- 
ware comlmnent and ms an abstract lmrtion of a whole. 
'Phe first usage of this noun, howew~r, seemed more re~ 
stricted: it was always modiIied by a prolmr noun. In 
one manual, the word "llne" wa.~ clearly acnd consis- 
tently used to mean a specific mw on the screen, while 
in another it wins always used to mean at geometric om- 
ponent. 
The iuteraetion of PKS rules has not been discussed 
in this paper) although it is a very interesting topic. 
Suppose that PI(2 rnles can also inch)de the word senses 
for each word. It is not clear whether the word senses 
in the rules shonld be considered its conditional (valid 
only if the pair of mo/lilier and modifiee is present) or 
absolute (no matter what the modifier and mtnlitiee acre). 
Only the latter case is handled by the PK1, and the 
former cases could be the exceptions to the PK 1 rules. 
If the "one sense per doenment" assnmption see)as 
too strong~ we can modify the PK1 aud 1'I;3 rules by 
adding contextual dependency to the rules so that at 
word sense or a word translation is valid only if the 
word appears with a certain modifier or modifiee, has at 
certain syntactic role~ and st) on. 
Acknowledgement 
I would like to thank Tetsuya N~sukawa and Naa- 
hike Urarnoto for many discussions which haw; gr~c<l- 
ually materialized into the idea of portable knowledge 
sources. The comments from tl\[ideo Watanabe and Ili- 
roshi Nomiyama also contribnted to the refinement (If 
the technical cmltents. Michael McDo~lMd, a.s usual, 
proofread the paper, and helped me write tim final ver- 
slO)l. 
References 
1) C. Boitet and II. Blanehon. "l)ialogue-13ased M'F for 
nmnolingual authors and the I,II)\[A projecC. In l'roe. 
of the Natural Langua9e Proeessi~g Pacific Rim S'yrapo- 
sium '93, pages 208-222, I,'ukuoka, Japan, Dee. 1993. 
2) |IIM Corp. "IBM SAA Al)/Cyele Translation Man- 
ager/2 l{elease 1.0". q'echnleal report, S1112-5900, 1992. 
3) W. (bile, 1?.. (_:hatch, and I). Ynrowsky. "One Sense 
I'er l)iseourse", ht Prec. of lhe ~lh I)A RPA Speeeh and 
NaturM Language Workshop, 1992. 
4) 11. Maruyama, 1I. Watanabe, and S. Ogino. "An In-- 
teractive dap~tnese l'arser for Machine q'ranslation", ht 
Proe. of the 13lh htlernalional Conference on Computa- 
tional Linguislies, pages 257-262, tlelsinki, Aug. 1990. 
5) S. W. Mcltoy. "Using Multiple Knowledge Sources for 
Word Sense I)iserhnination'. Computational Liguislies, 
18(1):1-30, Mar. 1992. 
6) K. Nagao. "Dependency Analyzer: A Knowledge-Based 
Alq)t.oach ta Strut%m'al l)isamblguatlon'. In Prec. of 
the 131h lnlernalional Conference on Compulalional 
Linguislies, pages 282-?87, llelsinki, Aug. 1990. 
7) '1'. Nasukawa. "l)iscource Constraint in COmlmter Man- 
uals". In l'roe, of lhe 51h lnlernalional Conference 
on !lTteorelieal and Methodological Issues in Machine 
Translation, pages 183 194, Kyot(~, Japan, July 1993. 
8) J. l~usl.ejovsky. "The Generative I,exieon". Compula- 
lional Linguistics, 17(4):409-4'tl, December 1991. 
9) S. Sat.o and M. Nag,re. "Toward Memory-based Trans- 
lation". In 1'roe. of Ihe 13lh International Conference 
on Cmapvlalional Linguislic.~ pages 247 252, tlelsinki, 
Aug. 1990. 
\] 0) E. Sumita and 1I. lida. "l,',xperiments and Prospects of 
l';xample-lb~sed Ivlachine Translation". In Prec. of the 
291h Annual Meeting of the Association for Computa- 
tional Linguistics, pages 185- 192, Berkeley, June 1991. 
11) K. Takeda, N. Ursine,o, T. Nasnkawa, and T. 'l'snt- 
snmi. "Shalt2 - A Symmetric Machine Translation Sys- 
l.em with Conceptual Transfer". In Prec. of lhe t#h 
International Conference on Computational Linguistics, 
pages 1034 1038, July 1992. 
12) N. Urarnoto. "Lexical and Structural )isambiguation 
IJsing an Examph~-Fl:t~e'. In l'rae, of the 2nd Japan- 
Au.stralia Joint Syrrtposi'um on NLP, pages 150 160, 
Oct. 1991. 
13) I). Yarowsky. "Word-Sense l)isambiguation Using St/t- 
tistieal Models tff Roger's Categories q'rained on I,arge 
Corpora". In Prec. of the 14th Inlernational Confer- 
enee on Compulalional Linguistics, pages 454-460, July 
1992, 
89 
