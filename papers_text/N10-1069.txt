Human Language Technologies: The 2010 Annual Conference of the North American Chapter of the ACL, pages 456?464,
Los Angeles, California, June 2010. c?2010 Association for Computational Linguistics
Distributed Training Strategies for the Structured Perceptron
Ryan McDonald Keith Hall Gideon Mann
Google, Inc., New York / Zurich
{ryanmcd|kbhall|gmann}@google.com
Abstract
Perceptron training is widely applied in the
natural language processing community for
learning complex structured models. Like all
structured prediction learning frameworks, the
structured perceptron can be costly to train
as training complexity is proportional to in-
ference, which is frequently non-linear in ex-
ample sequence length. In this paper we
investigate distributed training strategies for
the structured perceptron as a means to re-
duce training times when computing clusters
are available. We look at two strategies and
provide convergence bounds for a particu-
lar mode of distributed structured perceptron
training based on iterative parameter mixing
(or averaging). We present experiments on
two structured prediction problems ? named-
entity recognition and dependency parsing ?
to highlight the efficiency of this method.
1 Introduction
One of the most popular training algorithms for
structured prediction problems in natural language
processing is the perceptron (Rosenblatt, 1958;
Collins, 2002). The structured perceptron has many
desirable properties, most notably that there is no
need to calculate a partition function, which is
necessary for other structured prediction paradigms
such as CRFs (Lafferty et al, 2001). Furthermore,
it is robust to approximate inference, which is of-
ten required for problems where the search space
is too large and where strong structural indepen-
dence assumptions are insufficient, such as parsing
(Collins and Roark, 2004; McDonald and Pereira,
2006; Zhang and Clark, 2008) and machine trans-
lation (Liang et al, 2006). However, like all struc-
tured prediction learning frameworks, the structure
perceptron can still be cumbersome to train. This
is both due to the increasing size of available train-
ing sets as well as the fact that training complexity
is proportional to inference, which is frequently non-
linear in sequence length, even with strong structural
independence assumptions.
In this paper we investigate distributed training
strategies for the structured perceptron as a means
of reducing training times when large computing
clusters are available. Traditional machine learning
algorithms are typically designed for a single ma-
chine, and designing an efficient training mechanism
for analogous algorithms on a computing cluster ?
often via a map-reduce framework (Dean and Ghe-
mawat, 2004) ? is an active area of research (Chu
et al, 2007). However, unlike many batch learning
algorithms that can easily be distributed through the
gradient calculation, a distributed training analog for
the perceptron is less clear cut. It employs online up-
dates and its loss function is technically non-convex.
A recent study by Mann et al (2009) has shown
that distributed training through parameter mixing
(or averaging) for maximum entropy models can
be empirically powerful and has strong theoretical
guarantees. A parameter mixing strategy, which can
be applied to any parameterized learning algorithm,
trains separate models in parallel, each on a disjoint
subset of the training data, and then takes an average
of all the parameters as the final model. In this paper,
we provide results which suggest that the percep-
tron is ill-suited for straight-forward parameter mix-
ing, even though it is commonly used for large-scale
structured learning, e.g., Whitelaw et al (2008) for
named-entity recognition. However, a slight mod-
456
ification we call iterative parameter mixing can be
shown to: 1) have similar convergence properties to
the standard perceptron algorithm, 2) find a sepa-
rating hyperplane if the training set is separable, 3)
reduce training times significantly, and 4) produce
models with comparable (or superior) accuracies to
those trained serially on all the data.
2 Related Work
Distributed cluster computation for many batch
training algorithms has previously been examined
by Chu et al (2007), among others. Much of the
relevant prior work on online (or sub-gradient) dis-
tributed training has been focused on asynchronous
optimization via gradient descent. In this sce-
nario, multiple machines run stochastic gradient de-
scent simultaneously as they update and read from
a shared parameter vector asynchronously. Early
work by Tsitsiklis et al (1986) demonstrated that
if the delay between model updates and reads is
bounded, then asynchronous optimization is guaran-
teed to converge. Recently, Zinkevich et al (2009)
performed a similar type of analysis for online learn-
ers with asynchronous updates via stochastic gra-
dient descent. The asynchronous algorithms in
these studies require shared memory between the
distributed computations and are less suitable to
the more common cluster computing environment,
which is what we study here.
While we focus on the perceptron algorithm, there
is a large body of work on training structured pre-
diction classifiers. For batch training the most com-
mon is conditional random fields (CRFs) (Lafferty
et al, 2001), which is the structured analog of maxi-
mum entropy. As such, its training can easily be dis-
tributed through the gradient or sub-gradient com-
putations (Finkel et al, 2008). However, unlike per-
ceptron, CRFs require the computation of a partition
function, which is often expensive and sometimes
intractable. Other batch learning algorithms include
M3Ns (Taskar et al, 2004) and Structured SVMs
(Tsochantaridis et al, 2004). Due to their efficiency,
online learning algorithms have gained attention, es-
pecially for structured prediction tasks in NLP. In
addition to the perceptron (Collins, 2002), others
have looked at stochastic gradient descent (Zhang,
2004), passive aggressive algorithms (McDonald et
Perceptron(T = {(xt,yt)}
|T |
t=1)
1. w(0) = 0; k = 0
2. for n : 1..N
3. for t : 1..T
4. Let y? = argmaxy? w
(k) ? f(xt,y?)
5. if y? 6= yt
6. w(k+1) = w(k) + f(xt,yt)? f(xt,y?)
7. k = k + 1
8. return w(k)
Figure 1: The perceptron algorithm.
al., 2005; Crammer et al, 2006), the recently intro-
duced confidence weighted learning (Dredze et al,
2008) and coordinate descent algorithms (Duchi and
Singer, 2009).
3 Structured Perceptron
The structured perceptron was introduced by Collins
(2002) and we adopt much of the notation and pre-
sentation of that study. The structured percetron al-
gorithm ? which is identical to the multi-class per-
ceptron ? is shown in Figure 1. The perceptron is an
online learning algorithm and processes training in-
stances one at a time during each epoch of training.
Lines 4-6 are the core of the algorithm. For a input-
output training instance pair (xt,yt) ? T , the algo-
rithm predicts a structured output y? ? Yt, where Yt
is the space of permissible structured outputs for in-
put xt, e.g., parse trees for an input sentence. This
prediction is determined by a linear classifier based
on the dot product between a high-dimensional fea-
ture representation of a candidate input-output pair
f(x,y) ? RM and a corresponding weight vector
w ? RM , which are the parameters of the model1.
If this prediction is incorrect, then the parameters
are updated to add weight to features for the cor-
responding correct output yt and take weight away
from features for the incorrect output y?. For struc-
tured prediction, the inference step in line 4 is prob-
lem dependent, e.g., CKY for context-free parsing.
A training set T is separable with margin ? >
0 if there exists a vector u ? RM with ?u? = 1
such that u ? f(xt,yt) ? u ? f(xt,y?) ? ?, for all
(xt,yt) ? T , and for all y? ? Yt such that y? 6= yt.
Furthermore, letR ? ||f(xt,yt)?f(xt,y?)||, for all
(xt,yt) ? T and y? ? Yt. A fundamental theorem
1The perceptron can be kernalized for non-linearity.
457
of the perceptron is as follows:
Theorem 1 (Novikoff (1962)). Assume training set
T is separable by margin ?. Let k be the number of
mistakes made training the perceptron (Figure 1) on
T . If training is run indefinitely, then k ? R
2
?2 .
Proof. See Collins (2002) Theorem 1.
Theorem 1 implies that if T is separable then 1) the
perceptron will converge in a finite amount of time,
and 2) will produce a w that separates T . Collins
also proposed a variant of the structured perceptron
where the final weight vector is a weighted average
of all parameters that occur during training, which
he called the averaged perceptron and can be viewed
as an approximation to the voted perceptron algo-
rithm (Freund and Schapire, 1999).
4 Distributed Structured Perceptron
In this section we examine two distributed training
strategies for the perceptron algorithm based on pa-
rameter mixing.
4.1 Parameter Mixing
Distributed training through parameter mixing is a
straight-forward way of training classifiers in paral-
lel. The algorithm is given in Figure 2. The idea is
simple: divide the training data T into S disjoint
shards such that T = {T1, . . . , TS}. Next, train
perceptron models (or any learning algorithm) on
each shard in parallel. After training, set the final
parameters to a weighted mixture of the parameters
of each model using mixture coefficients ?. Note
that we call this strategy parameter mixing as op-
posed to parameter averaging to distinguish it from
the averaged perceptron (see previous section). It is
easy to see how this can be implemented on a cluster
through a map-reduce framework, i.e., the map step
trains the individual models in parallel and the re-
duce step mixes their parameters. The advantages of
parameter mixing are: 1) that it is parallel, making
it possibly to scale to extremely large data sets, and
2) it is resource efficient, in particular with respect
to network usage as parameters are not repeatedly
passed across the network as is often the case for
exact distributed training strategies.
For maximum entropy models, Mann et al (2009)
show it is possible to bound the norm of the dif-
PerceptronParamMix(T = {(xt,yt)}
|T |
t=1)
1. Shard T into S pieces T = {T1, . . . , TS}
2. w(i) = Perceptron(Ti) ?
3. w =
?
i ?iw
(i) ?
4. return w
Figure 2: Distributed perceptron using a parameter mix-
ing strategy. ? Each w(i) is computed in parallel. ? ? =
{?1, . . . , ?S}, ??i ? ? : ?i ? 0 and
?
i ?i = 1.
ference between parameters trained on all the data
serially versus parameters trained with parameter
mixing. However, their analysis requires a stabil-
ity bound on the parameters of a regularized max-
imum entropy model, which is not known to hold
for the perceptron. In Section 5, we present empir-
ical results showing that parameter mixing for dis-
tributed perceptron can be sub-optimal. Addition-
ally, Dredze et al (2008) present negative parame-
ter mixing results for confidence weighted learning,
which is another online learning algorithm. The fol-
lowing theorem may help explain this behavior.
Theorem 2. For a any training set T separable by
margin ?, the perceptron algorithm trained through
a parameter mixing strategy (Figure 2) does not nec-
essarily return a separating weight vector w.
Proof. Consider a binary classification setting
where Y = {0, 1} and T has 4 instances.
We distribute the training set into two shards,
T1 = {(x1,1,y1,1), (x1,2,y1,2)} and T2 =
{(x2,1,y2,1), (x2,2,y2,2)}. Let y1,1 = y2,1 = 0 and
y1,2 = y2,2 = 1. Now, let w, f ? R6 and using
block features, define the feature space as,
f(x1,1, 0) = [1 1 0 0 0 0] f(x1,1, 1) = [0 0 0 1 1 0]
f(x1,2, 0) = [0 0 1 0 0 0] f(x1,2, 1) = [0 0 0 0 0 1]
f(x2,1, 0) = [0 1 1 0 0 0] f(x2,1, 1) = [0 0 0 0 1 1]
f(x2,2, 0) = [1 0 0 0 0 0] f(x2,2, 1) = [0 0 0 1 0 0]
Assuming label 1 tie-breaking, parameter mixing re-
turns w1=[1 1 0 -1 -1 0] and w2=[0 1 1 0 -1 -1]. For
any ?, the mixed weight vector w will not separate
all the points. If both ?1/?2 are non-zero, then all
examples will be classified 0. If ?1=1 and ?2=0,
then (x2,2,y2,2) will be incorrectly classified as 0
and (x1,2,y1,2) when ?1=0 and ?2=1. But there is a
separating weight vector w = [-1 2 -1 1 -2 1].
This counter example does not say that a parameter
mixing strategy will not converge. On the contrary,
458
if T is separable, then each of its subsets is separa-
ble and converge via Theorem 1. What it does say
is that, independent of ?, the mixed weight vector
produced after convergence will not necessarily sep-
arate the entire data, even when T is separable.
4.2 Iterative Parameter Mixing
Consider a slight augmentation to the parameter
mixing strategy. Previously, each parallel percep-
tron was trained to convergence before the parame-
ter mixing step. Instead, shard the data as before, but
train a single epoch of the perceptron algorithm for
each shard (in parallel) and mix the model weights.
This mixed weight vector is then re-sent to each
shard and the perceptrons on those shards reset their
weights to the new mixed weights. Another single
epoch of training is then run (again in parallel over
the shards) and the process repeats. This iterative
parameter mixing algorithm is given in Figure 3.
Again, it is easy to see how this can be imple-
mented as map-reduce, where the map computes the
parameters for each shard for one epoch and the re-
duce mixes and re-sends them. This is analogous
to batch distributed gradient descent methods where
the gradient for each shard is computed in parallel in
the map step and the reduce step sums the gradients
and updates the weight vector. The disadvantage of
iterative parameter mixing, relative to simple param-
eter mixing, is that the amount of information sent
across the network will increase. Thus, if network
latency is a bottleneck, this can become problematic.
However, for many parallel computing frameworks,
including both multi-core computing as well as clus-
ter computing with high rates of connectivity, this is
less of an issue.
Theorem 3. Assume a training set T is separable
by margin ?. Let ki,n be the number of mistakes that
occurred on shard i during the nth epoch of train-
ing. For any N , when training the perceptron with
iterative parameter mixing (Figure 3),
N?
n=1
S?
i=1
?i,nki,n ?
R2
?2
Proof. Let w(i,n) to be the weight vector for the
ith shard after the nth epoch of the main loop and
let w([i,n]?k) be the weight vector that existed on
shard i in the nth epoch k errors before w(i,n). Let
PerceptronIterParamMix(T = {(xt,yt)}
|T |
t=1)
1. Shard T into S pieces T = {T1, . . . , TS}
2. w = 0
3. for n : 1..N
4. w(i,n) = OneEpochPerceptron(Ti,w) ?
5. w =
?
i ?i,nw
(i,n) ?
6. return w
OneEpochPerceptron(T , w?)
1. w(0) = w?; k = 0
2. for t : 1..T
3. Let y? = argmaxy? w
(k) ? f(xt,y?)
4. if y? 6= yt
5. w(k+1) = w(k) + f(xt,yt)? f(xt,y?)
6. k = k + 1
7. return w(k)
Figure 3: Distributed perceptron using an iterative param-
eter mixing strategy. ? Each w(i,n) is computed in paral-
lel. ? ?n = {?1,n, . . . , ?S,n}, ??i,n ? ?n: ?i,n ? 0 and
?n:
?
i ?i,n = 1.
w(avg,n) be the mixed vector from the weight vec-
tors returned after the nth epoch, i.e.,
w(avg,n) =
S?
i=1
?i,nw(i,n)
Following the analysis from Collins (2002) Theorem
1, by examining line 5 of OneEpochPerceptron in
Figure 3 and the fact that u separates the data by ?:
u ?w(i,n) = u ?w([i,n]?1)
+ u ? (f(xt,yt)? f(xt,y?))
? u ?w([i,n]?1) + ?
? u ?w([i,n]?2) + 2?
. . . ? u ?w(avg,n?1) + ki,n? (A1)
That is, u ? w(i,n) is bounded below by the average
weight vector for the n-1st epoch plus the number
of mistakes made on shard i during the nth epoch
times the margin ?. Next, by OneEpochPerceptron
line 5, the definition ofR, and w([i,n]?1)(f(xt,yt)?
f(xt,y?)) ? 0 when line 5 is called:
?w(i,n)?2 = ?w([i,n]?1)?2
+?f(xt,yt)? f(xt,y?)?2
+ 2w([i,n]?1)(f(xt,yt)? f(xt,y?))
? ?w([i,n]?1)?2 +R2
? ?w([i,n]?2)?2 + 2R2
. . . ? ?w(avg,n?1)?2 + ki,nR2 (A2)
459
That is, the squared L2-norm of a shards weight vec-
tor is bounded above by the same value for the aver-
age weight vector of the n-1st epoch and the number
of mistakes made on that shard during the nth epoch
times R2.
Using A1/A2 we prove two inductive hypotheses:
u ?w(avg,N) ?
N?
n=1
S?
i=1
?i,nki,n? (IH1)
?w(avg,N)?2 ?
N?
n=1
S?
i=1
?i,nki,nR
2 (IH2)
IH1 implies ?w(avg,N)? ?
?N
n=1
?S
i=1 ?i,nki,n?
since u ?w ? ?u??w? and ?u? = 1.
The base case is w(avg,1), where we can observe:
u ?wavg,1 =
S?
i=1
?i,1u ?w(i,1) ?
S?
i=1
?i,1ki,1?
using A1 and the fact that w(avg,0) = 0 for the sec-
ond step. For the IH2 base case we can write:
?w(avg,1)?2 =
?
?
?
?
?
S?
i=1
?i,1w(i,1)
?
?
?
?
?
2
?
S?
i=1
?i,1?w(i,1)?2 ?
S?
i=1
?i,1ki,1R
2
The first inequality is Jensen?s inequality, and the
second is true by A2 and ?w(avg,0)?2 = 0.
Proceeding to the general case, w(avg,N):
u ?w(avg,N) =
S?
i=1
?i,N (u ?w(i,N))
?
S?
i=1
?i,N (u ?w(avg,N?1) + ki,N?)
= u ?w(avg,N?1) +
S?
i=1
?i,Nki,N?
?
[
N?1?
n=1
S?
i=1
?i,nki,n?
]
+
S?
i=1
?i,Nki,N
=
N?
n=1
S?
i=1
?i,nki,n?
The first inequality uses A1, the second step
?
i ?i,N = 1 and the second inequality the induc-
tive hypothesis IH1. For IH2, in the general case,
we can write:
?w(avg,N)?2 ?
S?
i=1
?i,N?w(i,N)?2
?
S?
i=1
?i,N (?w(avg,N?1)?2 + ki,NR2)
= ?w(avg,N?1)?2 +
S?
i=1
?i,Nki,NR
2
?
[
N?1?
n=1
S?
i=1
?i,nki,nR
2
]
+
S?
i=1
?i,Nki,NR
2
=
N?
n=1
S?
i=1
?i,nki,nR
2
The first inequality is Jensen?s, the second A2, and
the third the inductive hypothesis IH2. Putting to-
gether IH1, IH2 and ?w(avg,N)? ? u ?w(avg,N):
[
N?
n=1
S?
i=1
?i,nki,n
]2
?2 ?
[
N?
n=1
S?
i=1
?i,nki,n
]
R2
which yields:
?N
n=1
?S
i=1 ?i,nki,n ?
R2
?2
4.3 Analysis
If we set each ?n to be the uniform mixture, ?i,n =
1/S, then Theorem 3 guarantees convergence to
a separating hyperplane. If
?S
i=1 ?i,nki,n = 0,
then the previous weight vector already separated
the data. Otherwise,
?N
n=1
?S
i=1 ?i,nki,n is still in-
creasing, but is bounded and cannot increase indefi-
nitely. Also note that if S = 1, then ?1,n must equal
1 for all n and this bound is identical to Theorem 1.
However, we are mainly concerned with how fast
convergence occurs, which is directly related to the
number of training epochs each algorithm must run,
i.e., N in Figure 1 and Figure 3. For the non-
distributed variant of the perceptron we can say that
Nnon dist ? R2/?2 since in the worst case a single
mistake happens on each epoch.2 For the distributed
case, consider setting ?i,n = ki,n/kn, where kn =?
i ki,n. That is, we mix parameters proportional to
the number of errors each made during the previous
epoch. Theorem 3 still implies convergence to a sep-
arating hyperplane with this choice. Further, we can
2It is not hard to derive such degenerate cases.
460
bound the required number of epochs Ndist:
Ndist ?
Ndist?
n=1
S?
i=1
[ki,n]
ki,n
kn ?
Ndist?
n=1
S?
i=1
ki,n
kn
ki,n ?
R2
?2
Ignoring when all ki,n are zero (since the algorithm
will have converged), the first inequality is true since
either ki,n ? 1, implying that [ki,n]ki,n/kn ? 1, or
ki,n = 0 and [ki,n]ki,n/kn = 1. The second inequal-
ity is true by the generalized arithmetic-geometric
mean inequality and the final inequality is Theo-
rem 3. Thus, the worst-case number of epochs is
identical for both the regular and distributed percep-
tron ? but the distributed perceptron can theoreti-
cally process each epoch S times faster. This ob-
servation holds only for cases where ?i,n > 0 when
ki,n ? 1 and ?i,n = 0 when ki,n = 0, which does
not include uniform mixing.
5 Experiments
To investigate the distributed perceptron strategies
discussed in Section 4 we look at two structured pre-
diction tasks ? named entity recognition and depen-
dency parsing. We compare up to four systems:
1. Serial (All Data): This is the classifier returned
if trained serially on all the available data.
2. Serial (Sub Sampling): Shard the data, select
one shard randomly and train serially.
3. Parallel (Parameter Mix): Parallel strategy
discussed in Section 4.1 with uniform mixing.
4. Parallel (Iterative Parameter Mix): Parallel
strategy discussed in Section 4.2 with uniform
mixing (Section 5.1 looks at mixing strategies).
For all four systems we compare results for both the
standard perceptron algorithm as well as the aver-
aged perceptron algorithm (Collins, 2002).
We report the final test set metrics of the con-
verged classifiers to determine whether any loss in
accuracy is observed as a consequence of distributed
training strategies. We define convergence as ei-
ther: 1) the training set is separated, or 2) the train-
ing set performance measure (accuracy, f-measure,
etc.) does not change by more than some pre-defined
threshold on three consecutive epochs. As with most
real world data sets, convergence by training set sep-
aration was rarely observed, though in both cases
training set accuracies approached 100%. For both
tasks we also plot test set metrics relative to the user
wall-clock taken to obtain the classifier. The results
were computed by collecting the metrics at the end
of each epoch for every classifier. All experiments
used 10 shards (Section 5.1 looks at convergence rel-
ative to different shard size).
Our first experiment is a named-entity recogni-
tion task using the English data from the CoNLL
2003 shared-task (Tjong Kim Sang and De Meul-
der, 2003). The task is to detect entities in sentences
and label them as one of four types: people, organi-
zations, locations or miscellaneous. For our exper-
iments we used the entire training set (14041 sen-
tences) and evaluated on the official development
set (3250 sentences). We used a straight-forward
IOB label encoding with a 1st order Markov fac-
torization. Our feature set consisted of predicates
extracted over word identities, word affixes, orthog-
raphy, part-of-speech tags and corresponding con-
catenations. The evaluation metric used was micro
f-measure over the four entity class types.
Results are given in Figure 4. There are a num-
ber of things to observe here: 1) training on a single
shard clearly provides inferior performance to train-
ing on all data, 2) the simple parameter mixing strat-
egy improves upon a single shard, but does not meet
the performance of training on all data, 3) iterative
parameter mixing achieves performance as good as
or better than training serially on all the data, and
4) the distributed algorithms return better classifiers
much quicker than training serially on all the data.
This is true regardless of whether the underlying al-
gorithm is the regular or the averaged perceptron.
Point 3 deserves more discussion. In particular, the
iterative parameter mixing strategy has a higher final
f-measure than training on all the data serially than
the standard perceptron (f-measure of 87.9 vs. 85.8).
We suspect this happens for two reasons. First, the
parameter mixing has a bagging like effect which
helps to reduce the variance of the per-shard classi-
fiers (Breiman, 1996). Second, the fact that parame-
ter mixing is just a form of parameter averaging per-
haps has the same effect as the averaged perceptron.
Our second set of experiments looked at the much
more computationally intensive task of dependency
parsing. We used the Prague Dependency Tree-
bank (PDT) (Hajic? et al, 2001), which is a Czech
461
Wall Clock
0.65
0.7
0.75
0.8
0.85
Test 
Data
 F-m
easu
re
Perceptron -- Serial (All Data)Perceptron -- Serial (Sub Sampling)Perceptron -- Parallel (Parameter Mix)Perceptron -- Parallel (Iterative Parameter Mix)
Wall Clock
0.7
0.75
0.8
0.85
Test 
Data
 F-m
easu
re
Averaged Perceptron -- Serial (All Data)Averaged Perceptron -- Serial (Sub Sampling)Averaged Perceptron -- Parallel (Parameter Mix)Averaged Perceptron -- Parallel (Iterative Parameter Mix)
Reg. Perceptron Avg. Perceptron
F-measure F-measure
Serial (All Data) 85.8 88.2
Serial (Sub Sampling) 75.3 76.6
Parallel (Parameter Mix) 81.5 81.6
Parallel (Iterative Parameter Mix) 87.9 88.1
Figure 4: NER experiments. Upper figures plot test data f-measure versus wall clock for both regular perceptron (left)
and averaged perceptron (right). Lower table is f-measure for converged models.
language treebank and currently one of the largest
dependency treebanks in existence. We used the
CoNLL-X training (72703 sentences) and testing
splits (365 sentences) of this data (Buchholz and
Marsi, 2006) and dependency parsing models based
on McDonald and Pereira (2006) which factors fea-
tures over pairs of dependency arcs in a tree. To
parse all the sentences in the PDT, one must use a
non-projective parsing algorithm, which is a known
NP-complete inference problem when not assuming
strong independence assumptions. Thus, the use of
approximate inference techniques is common in or-
der to find the highest weighted tree for a sentence.
We use the approximate parsing algorithm given in
McDonald and Pereira (2006), which runs in time
roughly cubic in sentence length. To train such a
model is computationally expensive and can take on
the order of days to train on a single machine.
Unlabeled attachment scores (Buchholz and
Marsi, 2006) are given in Figure 5. The same trends
are seen for dependency parsing that are seen for
named-entity recognition. That is, iterative param-
eter mixing learns classifiers faster and has a final
accuracy as good as or better than training serially
on all data. Again we see that the iterative parame-
ter mixing model returns a more accurate classifier
than the regular perceptron, but at about the same
level as the averaged perceptron.
5.1 Convergence Properties
Section 4.3 suggests that different weighting strate-
gies can lead to different convergence properties,
in particular with respect to the number of epochs.
For the named-entity recognition task we ran four
experiments comparing two different mixing strate-
gies ? uniform mixing (?i,n=1/S) and error mix-
ing (?i,n=ki,n/kn) ? each with two shard sizes ?
S = 10 and S = 100. Figure 6 plots the number
of training errors per epoch for each strategy.
We can make a couple observations. First, the
mixing strategy makes little difference. The rea-
son being that the number of observed errors per
epoch is roughly uniform across shards, making
both strategies ultimately equivalent. The other ob-
servation is that increasing the number of shards
can slow down convergence when viewed relative to
epochs3. Again, this appears in contradiction to the
analysis in Section 4.3, which, at least for the case
of error weighted mixtures, implied that the num-
ber of epochs to convergence was independent of
the number of shards. But that analysis was based
on worst-case scenarios where a single error occurs
on a single shard at each epoch, which is unlikely to
occur in real world data. Instead, consider the uni-
3As opposed to raw wall-clock/CPU time, which benefits
from faster epochs the more shards there are.
462
Wall Clock
0.74
0.76
0.78
0.8
0.82
0.84
Unla
beled
 Atta
chme
nt Sc
ore
Perceptron -- Serial (All Data)Perceptron -- Serial (Sub Sampling)Perceptron -- Parallel (Iterative Parameter Mix)
Wall Clock0.78
0.79
0.8
0.81
0.82
0.83
0.84
0.85
Unla
beled
 Atta
chme
nt Sc
ore
Averaged Perceptron -- Serial (All Data)Averaged Perceptron -- Serial (Sub Sampling)Averaged Perceptron -- (Iterative Parameter Mix) 
Reg. Perceptron Avg. Perceptron
Unlabeled Attachment Score Unlabeled Attachment Score
Serial (All Data) 81.3 84.7
Serial (Sub Sampling) 77.2 80.1
Parallel (Iterative Parameter Mix) 83.5 84.5
Figure 5: Dependency Parsing experiments. Upper figures plot test data unlabeled attachment score versus wall clock
for both regular perceptron (left) and averaged perceptron (right). Lower table is unlabeled attachment score for
converged models.
0 10 20 30 40 50Training Epochs
0
2000
4000
6000
8000
10000
# Tra
ining
 Mist
akes
Error mixing (10 shards)Uniform mixing (10 shards)Error mixing (100 shards)Uniform mixing (100 shards)
Figure 6: Training errors per epoch for different shard
size and parameter mixing strategies.
form mixture case. Theorem 3 implies:
N?
n=1
S?
i=1
ki,n
S
?
R2
?2
=?
N?
n=1
S?
i=1
ki,n ? S ?
R2
?2
Thus, for cases where training errors are uniformly
distributed across shards, it is possible that, in the
worst-case, convergence may slow proportional the
the number of shards. This implies a trade-off be-
tween slower convergence and quicker epochs when
selecting a large number of shards. In fact, we ob-
served a tipping point for our experiments in which
increasing the number of shards began to have an ad-
verse effect on training times, which for the named-
entity experiments occurred around 25-50 shards.
This is both due to reasons described in this section
as well as the added overhead of maintaining and
summing multiple high-dimensional weight vectors
after each distributed epoch.
It is worth pointing out that a linear term S in
the convergence bound above is similar to conver-
gence/regret bounds for asynchronous distributed
online learning, which typically have bounds lin-
ear in the asynchronous delay (Mesterharm, 2005;
Zinkevich et al, 2009). This delay will be on aver-
age roughly equal to the number of shards S.
6 Conclusions
In this paper we have investigated distributing the
structured perceptron via simple parameter mixing
strategies. Our analysis shows that an iterative pa-
rameter mixing strategy is both guaranteed to sepa-
rate the data (if possible) and significantly reduces
the time required to train high accuracy classifiers.
However, there is a trade-off between increasing
training times through distributed computation and
slower convergence relative to the number of shards.
Finally, we note that using similar proofs to those
given in this paper, it is possible to provide theoreti-
cal guarantees for distributed online passive aggres-
sive learning (Crammer et al, 2006), which is a form
of large-margin perceptron learning. Unfortunately
space limitations prevent exploration here.
Acknowledgements: We thank Mehryar Mohri, Fer-
nando Periera, Mark Dredze and the three anonymous re-
views for their helpful comments on this work.
463
References
L. Breiman. 1996. Bagging predictors. Machine Learn-
ing, 24(2):123?140.
S. Buchholz and E. Marsi. 2006. CoNLL-X shared
task on multilingual dependency parsing. In Proceed-
ings of the Conference on Computational Natural Lan-
guage Learning.
C.T. Chu, S.K. Kim, Y.A. Lin, Y.Y. Yu, G. Bradski, A.Y.
Ng, and K. Olukotun. 2007. Map-Reduce for ma-
chine learning on multicore. In Advances in Neural
Information Processing Systems.
M. Collins and B. Roark. 2004. Incremental parsing with
the perceptron algorithm. In Proceedings of the Con-
ference of the Association for Computational Linguis-
tics.
M. Collins. 2002. Discriminative training methods for
hidden Markov models: Theory and experiments with
perceptron algorithm. In Proceedings of the Confer-
ence on Empirical Methods in Natural Language Pro-
cessing.
K. Crammer, O. Dekel, J. Keshet, S. Shalev-Shwartz,
and Y. Singer. 2006. Online passive-aggressive algo-
rithms. The Journal of Machine Learning Research,
7:551?585.
J. Dean and S. Ghemawat. 2004. MapReduce: Simpli-
fied data processing on large clusters. In Sixth Sym-
posium on Operating System Design and Implementa-
tion.
M. Dredze, K. Crammer, and F. Pereira. 2008.
Confidence-weighted linear classification. In Pro-
ceedings of the International Conference on Machine
learning.
J. Duchi and Y. Singer. 2009. Efficient learning using
forward-backward splitting. In Advances in Neural In-
formation Processing Systems.
J.R. Finkel, A. Kleeman, and C.D. Manning. 2008. Effi-
cient, feature-based, conditional random field parsing.
In Proceedings of the Conference of the Association
for Computational Linguistics.
Y. Freund and R.E. Schapire. 1999. Large margin clas-
sification using the perceptron algorithm. Machine
Learning, 37(3):277?296.
J. Hajic?, B. Vidova Hladka, J. Panevova?, E. Hajic?ova?,
P. Sgall, and P. Pajas. 2001. Prague Dependency Tree-
bank 1.0. LDC, 2001T10.
J. Lafferty, A. McCallum, and F. Pereira. 2001. Con-
ditional random fields: Probabilistic models for seg-
menting and labeling sequence data. In Proceedings
of the International Conference on Machine Learning.
P. Liang, A. Bouchard-Co?te?, D. Klein, and B. Taskar.
2006. An end-to-end discriminative approach to ma-
chine translation. In Proceedings of the Conference of
the Association for Computational Linguistics.
G. Mann, R. McDonald, M. Mohri, N. Silberman, and
D. Walker. 2009. Efficient large-scale distributed
training of conditional maximum entropy models. In
Advances in Neural Information Processing Systems.
R. McDonald and F. Pereira. 2006. Online learning of
approximate dependency parsing algorithms. In Pro-
ceedings of the Conference of the European Chapter
of the Association for Computational Linguistics.
R. McDonald, K. Crammer, and F. Pereira. 2005. On-
line large-margin training of dependency parsers. In
Proceedings of the Conference of the Association for
Computational Linguistics.
C. Mesterharm. 2005. Online learning with delayed la-
bel feedback. In Proceedings of Algorithmic Learning
Theory.
A.B. Novikoff. 1962. On convergence proofs on percep-
trons. In Symposium on the Mathematical Theory of
Automata.
F. Rosenblatt. 1958. The perceptron: A probabilistic
model for information storage and organization in the
brain. Psychological Review, 65(6):386?408.
B. Taskar, C. Guestrin, and D. Koller. 2004. Max-margin
Markov networks. In Advances in Neural Information
Processing Systems.
E. F. Tjong Kim Sang and F. De Meulder. 2003. Intro-
duction to the CoNLL-2003 Shared Task: Language-
Independent Named Entity Recognition. In Proceed-
ings of the Conference on Computational Natural Lan-
guage Learning.
J. N. Tsitsiklis, D. P. Bertsekas, and M. Athans. 1986.
Distributed asynchronous deterministic and stochastic
gradient optimization algorithms. IEEE Transactions
on Automatic Control, 31(9):803?812.
I. Tsochantaridis, T. Hofmann, T. Joachims, and Y. Altun.
2004. Support vector machine learning for interdepen-
dent and structured output spaces. In Proceedings of
the International Conference on Machine learning.
C. Whitelaw, A. Kehlenbeck, N. Petrovic, and L. Ungar.
2008. Web-scale named entity recognition. In Pro-
ceedings of the International Conference on Informa-
tion and Knowledge Management.
Y. Zhang and S. Clark. 2008. A tale of two parsers: In-
vestigating and combining graph-based and transition-
based dependency parsing using beam-search. In Pro-
ceedings of the Conference on Empirical Methods in
Natural Language Processing.
T. Zhang. 2004. Solving large scale linear prediction
problems using stochastic gradient descent algorithms.
In Proceedings of the International Conference on Ma-
chine Learning.
M. Zinkevich, A. Smola, and J. Langford. 2009. Slow
learners are fast. In Advances in Neural Information
Processing Systems.
464
