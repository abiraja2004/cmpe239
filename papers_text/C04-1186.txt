Semantic Role Labeling Using Dependency Trees  
Kadri Hacioglu 
 Center for Spoken Language Research  
University of Colorado at Boulder 
hacioglu@cslr.colorado.edu
 
Abstract 
In this paper, a novel semantic role labeler based 
on dependency trees is developed. This is ac-
complished by formulating the semantic role la-
beling as a classification problem of dependency 
relations into one of several semantic roles. A 
dependency tree is created from a constituency 
parse of an input sentence. The dependency tree 
is then linearized into a sequence of dependency 
relations. A number of features are extracted for 
each dependency relation using a predefined lin-
guistic context. Finally, the features are input to a 
set of one-versus-all support vector machine 
(SVM) classifiers to determine the corresponding 
semantic role label. We report results on 
CoNLL2004 shared task data using the represen-
tation and scoring scheme adopted for that task. 
1   Introduction 
In semantic role labeling (SRL) the goal is to group 
sequences of words together and classify them by 
using semantic labels. For semantic representation 
we select the predicate-argument structure that ex-
ists in most languages. In this structure a word is 
specified as a predicate and a number of word 
groups are considered as arguments accompanying 
the predicate.  Those arguments are assigned differ-
ent semantic categories depending on the roles that 
they play with respect to the predicate.  
We illustrate the predicate-argument structure in 
Figure 1 for the sentence ?We are prepared to pur-
sue aggressively completion of this transaction he 
says? taken from the PropBank corpus. The chosen 
predicate is the word pursue, and its arguments with 
their associated word groups are illustrated. Note 
that the word prepared is another predicate of the 
sentence possibly with different argument labels 
attached to the same or different word groups. For 
example, the word we is A1 of prepared. This proc-
ess of selecting a predicate in a sentence, grouping 
sequences of words and assigning the semantic roles 
they play with respect to the chosen predicate is of-
ten referred to as semantic role labeling. We believe 
that a highly accurate extraction of this structure is 
vital for high performance in many NLP tasks such 
as information extraction, question answering, 
summarization and machine translation. 
 
 
 
 
 
 
 
 
 
 
 
 
Figure 1: Predicate-argument structure of sample 
sentence. Argument labels are in PropBank-style. 
 
Semantic role labeling based on predicate-
argument structure was first explored in detail by 
(Gildea and Jurafsky, 2002). Since then several 
variants of the basic approach have been introduced 
using different features and different classifiers 
based on various machine learning techniques 
(Gildea and Palmer, 2002; Gildea and Hockenmaier, 
2003; Surdeanu et. al., 2003;  Chen and Rambow, 
2003; Fleischman and Hovy, 2003; Hacioglu and 
Ward, 2003; Thompson et. al., 2003; Pradhan et. al., 
2003b; Hacioglu, 2004). Large semantically anno-
tated databases, like FrameNet (Baker et.al, 1998) 
and PropBank (Kingsbury and Palmer, 2002) have 
been used to train and test the classifiers. Most of 
those approaches can be divided into one of the fol-
lowing three broad classes with respect to the type 
of tokens classified; namely, constituent-by-
constituent (C-by-C), phrase-by-phrase (P-by-P) and 
word-by-word (W-by-W) semantic role labelers.  
In C-by-C semantic role labeling, the syntactic 
tree representation of a sentence is linearized into a 
sequence of its syntactic constituents (non-
terminals). Then each constituent is classified into 
one of several semantic roles using a number of fea-
tures derived from the sentence structure or a lin-
guistic context defined for the constituent token. In 
the P-by-P and W-by-W methods (Hacioglu, 2004; 
Hacioglu and Ward, 2003) the problem is formu-
lated as a chunking task and the features are derived 
for each base phrase and word, respectively. The 
tokens were classified into one of the semantic la-
bels using an IOB (inside-outside-begin) representa-
tion and a bank of SVM classifiers; a one-versus-all 
classifier has been used for each class. 
Predicate:pursue 
A0  A1 AM-MNR
  we  completion of this transaction  aggressively 
   
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figure 2. Example of a dependency tree augmented with semantic roles. Semantic labels correspond to the 
predicate posted. The same tree with different semantic labels also exists in the corpus for predicate abated. 
 
In this paper, we introduce another approach that 
we refer to as the relation-by-relation (R-by-R) se-
mantic role labeling. The method is based on de-
pendency trees generated from constituency trees. 
Although the system currently does not use more 
information than C-by-C systems, the information is 
structured in a different manner and, consequently, 
the nature of some linguistic features is quite differ-
ent. We point out that this information restructuring 
is very useful in localizing the semantic roles asso-
ciated with the selected predicate, since the depend-
ency trees directly encode the argument structure of 
lexical units populated at their nodes through de-
pendency relations. 
A related work is reported in (Gildea and Hock-
enmaier, 2003). However, they use Combinatory 
Categorical Grammar (CCG) to derive the depend-
ency relations. In addition, our method differs in the 
selection of dependency relations for labeling, in the 
creation of features and in the implementation of the 
classifier.  
Recently, there has been some interest in develop-
ing a deterministic machine-learning based approach 
for dependency parsing (Yamada and Matsumato, 
2003). In addition to relatively easier portability to 
other domains and languages the deterministic de-
pendency parsing promises algorithms that are ro-
bust and efficient. Therefore, an SRL algorithm 
based on dependency structures is expected to bene-
fit from those properties.  
2   Dependency Bank (DepBank) 
In this section, we describe the corpus that we auto-
matically created using the syntactic annotations of 
the Penn TreeBank with the semantic annotations of 
the PropBank. Hereafter, we refer to this new corpus 
as DepBank. 
Firstly, we convert constituency trees into de-
pendency trees1. The functional tags are removed 
from constituency trees before the conversion, since 
the current state-of-the-art syntactic parsers do not 
exploit those tags. Secondly, we trace the depend-
ency trees to determine the word sequences covered 
by the dependency relation nodes. Finally, we aug-
ment those nodes with their semantic role labels that 
cover the same sequence of words. The relations 
that do not align with any semantic role are tagged 
using the label  ?O?. In Figure 2, we illustrate a 
sample dependency tree from the DepBank. It corre-
sponds to the predicate posted of the following sen-
tence (semantic roles are also indicated):  
 
[A0 The dollar] [V posted]  [A1 gains] [AM-LOC 
in quiet training] [AM-ADV as concerns about equi-
ties abated] 
 
We note that the other predicate in the sentence is 
abated and the same tree with different semantic 
labels is also instantiated in the DepBank for it. The 
dependency relation nodes are indicated by ?R:? in 
Figure 2. The lexical nodes are indicated by ?W:?. 
The dependency relation types are paired with the 
corresponding semantic role labels. The only excep-
tion is the node that belongs to the predicate; the 
semantic label V is used with the lemma of the 
predicate. The lexical nodes include the word itself 
and its part-of-speech (POS) tag.   
3   Semantic Role Labeling of Relations 
In the proposed approach, we first linearize the de-
pendency tree in a bottom-up left-to-right manner 
into a sequence of dependency relations. During this 
                                                        
1 engconst2dep, from the University of Maryland, is used. Spe-
cial thanks to R. Hwa, A. Lopez and M. Diab.  
process we filter out the dependency relations that 
are less likely to be an argument. The selection 
mechanism is based on simple heuristics derived 
from dependency trees. Then we extract a set of fea-
tures for each dependency relation. Finally, we input 
the features to a bank of SVM classifiers. A one-
versus-all SVM classifier is used for each semantic 
role.   
3.1 Dependency Relation Selection 
In dependency tree representations, we observe that 
the semantic roles are highly localized with respect 
to the chosen predicate.  We exploit this observation 
to devise a method for deciding whether a depend-
ency relation is likely to be a semantic role or not. 
We define a tree-structured family of a predicate as a 
measure of locality. It is a set of dependency relation 
nodes that consists of the predicate?s parent, chil-
dren, grandchildren, siblings, siblings? children and 
siblings? grandchildren with respect to its depend-
ency tree. Any relation that does not belong to this 
set is skipped while we linearize the dependency 
tree in a bottom-up left-to-right manner. Further se-
lection is performed on the family members that are 
located at the leaves of the tree. For example, a leaf 
member with det dependency relation is not consid-
ered for semantic labeling. Our selection mechanism 
reduces the data for semantic role labeling by ap-
proximately 3-4 fold with nearly 1% miss of seman-
tic labels, since a quite large number of nodes in the 
dependency trees are not associated with any seman-
tic role.  
3.2  Features 
For each candidate dependency relation we extract a 
set of features. In the following, we explain these 
features and give examples for their values referring 
to the dependency tree shown in Figure 1 (feature 
values for the relation node R:mod with the seman-
tic label [A0] is given in parentheses). The features 
that are specific to the dependency relation (i.e. to-
ken-level features) are  
 
Type: This feature indicates the type of the de-
pendency relation  (mod) 
Family membership:  This feature indicates how 
the dependency relation is related to the predicate in 
the family (child) 
Position:  This feature indicates the position of 
the headword of the dependency relation with re-
spect to the predicate position in the sentence (be-
fore) 
Headword: the modified (head) word in the rela-
tion (posted).    
Dependent word: the modifying word in the re-
lation (dollar) 
POS tag of  headword: (VBD)   
POS tag of dependent word: (NN)  
Path: the chain of relations from   relation node 
to predicate. (mod? *)  
 
and the features that are specific to the  predicate 
(i.e. sentence-level features): 
 
POS pattern of predicate?s children: This fea-
ture indicates the left-to-right chain of the POS tags 
of the immediate words that depend on the predi-
cate. (NN-NNS-IN-IN) 
Relation pattern of predicate?s children: This 
feature indicates the left-to-right chain of the rela-
tion labels of the predicate?s children (mod-obj-p-
obj) 
POS pattern of predicate?s siblings: This fea-
ture indicates the left-to-right chain of the POS tags 
of the headwords of the siblings of predicate. (-) 
Relation pattern of predicate?s siblings: This 
feature indicates the left-to-right chain of the rela-
tion labels of the predicate?s siblings. (-).  
3.3  Classifier 
We selected support vector machines (Vapnik, 
1995) to implement the semantic role classifiers. 
The motivation for this selection was the ability of 
SVMs to handle an extremely large number of inter-
acting or overlapping features with quite strong gen-
eralization properties. Support vector machines for 
SRL were first used in (Hacioglu and Ward, 2003) 
as word-by-word (W-by-W) classifiers. The system 
was then applied to the constituent-by-constituent 
(C-by-C) classification in (Hacioglu et. al., 2003) 
and phrase-by-phrase (P-by-P) classification in (Ha-
cioglu, 2004). Several extensions of the basic sys-
tem with state-of-the-art performance were reported 
in (Pradhan et.al, 2003; Pradhan et. al. 2004; Ha-
cioglu et. al. 2004). All  SVM classifiers for seman-
tic argument labeling were  realized using the 
TinySVM with a polynomial kernel of degree 2 and 
the general purpose SVM based chunker YamCha2. 
4   Experiments    
Experiments were carried out using a part of the 
February 2004 release of the PropBank.  Sections 15 
through 18 were used for training, Section 20 was 
used for developing and Section 21 was used for 
testing. This is exactly the same data used for 
CoNLL2004 shared task on SRL. Therefore, the 
results can be directly compared to the performance 
of the systems that used or that will use the same 
data. The system performance is evaluated by using 
precision, recall and F metrics. In the experiments, 
                                                        
2 http://cl.aist-nara.ac.jp/~taku-ku/software/ 
the gold standard constituency parses were used. 
Therefore, the results provide an upper bound on the 
performance with automatic parses. Table 1 presents 
the results on the DepBank development set.  The 
results on the CoNLL2004 development set are also 
illustrated. After we project the predicted semantic 
role labels in the DepBank dev set onto the 
CoNLL2004 dev set (directly created from the 
PropBank) we observe a sharp drop in the recall per-
formance. The drop is due to the loss of approxi-
mately 8% of semantic roles in the DepBank dev set 
during the conversion process; not all phrase nodes 
in constituency trees find an equivalent relation 
node in dependency trees. However, this mismatch 
is significantly less than the 23% mismatch reported 
in (Gildea and Hockenmaier, 2003) between the 
CCGBank and an earlier version of the PropBank. 
  
Dev  Set Precision Recall F1 
DepBank 85.6% 83.6%  84.6 
CoNLL 84.9% 75.2% 79.8 
Table 1: Results on DepBank and CoNLL04 sets. 
5   Conclusions 
We have automatically created a new corpus of de-
pendency trees augmented with semantic role labels. 
Using this corpus, we have developed and experi-
mented with a novel SRL system that classifies de-
pendency relations. This is quite different from 
previous research on semantic role labeling. We 
have presented encouraging intermediate results. 
Currently, we are investigating the reasons of mis-
match between PropBank and DepBank semantic 
annotations. We also plan to add new features, ex-
periment with automatic parses, and compare and 
combine the system with our state-of-the-art C-by-C 
system. 
Acknowledgements 
This research was supported in part by the ARDA 
AQUAINT Program via contract OCG4423B and by 
the NSF grant ISS-9978025. 
References  
Collin F. Baker, Charles J. Fillmore, and John B. 
Lowe 1998. The Berkley FrameNet Project. In 
Proc. of  CoLING-ACL?98. 
John Chen and Owen Rambow. 2003. Use of Deep 
Linguistic Features for the Recognition and La-
beling of Semantic Arguments. In Proc. of 
EMNLP-2003 
Daniel Gildea and Daniel Jurafsky. 2002. Automatic 
Labeling of Semantic Roles. Computational Lin-
guistics, 28:3, pages 245-288. 
Daniel Gildea  and Martha Palmer. 2002. The Ne-
cessity of Syntactic Parsing for Predicate Argu-
ment Recognition. In Proc. of ACL?02. 
Daniel Gildea and Julia Hockenmaier. 2003. Identi-
fying Semantic Roles Using Combinatory Cate-
gorical Grammar. In Proc. of EMNL?03, Japan. 
Micheal Fleischman and Eduard Hovy. 2003. A 
Maximum Entropy Approach to FrameNet Tag-
ging. In Proc. of  HLT/NAACL-03. 
Kadri Hacioglu and Wayne Ward. 2003. Target 
word detection and semantic role chunking using 
support vector machines. In  Proc.  of 
HLT/NAACL-03. 
Kadri Hacioglu, Sameer Pradhan, Wayne Ward, 
James H. Martin and Daniel Jurafsky. 2003. Shal-
low Semantic Parsing using Support Vector Ma-
chines. CSLR Technical Report, CSLR-TR-2003-1.  
Kadri Hacioglu. 2004. A Semantic Chunking Model 
Based on Tagging.  In Proc. of  HLT/NAACL-04. 
Kadri Hacioglu, Sameer Pradhan, Wayne Ward, 
James H. Martin and Daniel Jurafsky. 2004. Se-
mantic Role Labeling by Tagging Syntactic 
Chunks. CONLL-2004 Shared Task. 
Paul Kingsbury, Martha Palmer, 2002. From Tree-
Bank to PropBank. In Proc. of  LREC-2002. 
Sameer Pradhan, Kadri Hacioglu, Wayne Ward, 
James H. Martin, Dan Jurafsky. 2003. Semantic 
Role Parsing: Adding Semantic Structure to Un-
structured Text. In Proc. of ICDM 2003. 
Sameer Pradhan, Kadri Hacioglu, Wayne Ward, 
James H. Martin, Dan Jurafsky. 2004. Support 
Vector Learning for Semantic Argument Classifi-
cation. To appear in Journal of Machine Learn-
ing. 
Mihai Surdeanu, Sanda Harabagiu, John Williams, 
and Paul Aarseth. 2003. Using Predicate-
Argument Structure for  Information Extraction. 
In Proc. of ACL03. 
Cynthia A. Thompson, Roger Levy, and Christopher 
D. Manning. 2003. A Generative Model for Se-
mantic Role Labeling.  In Proc.of  ECML-03. 
Vladamir Vapnik 1995. The Nature of Statistical 
Learning Theory. Springer Verlag, New York, 
USA. 
Hiroyasu Yamada and Yuji Matsumoto. 2003. Sta-
tistical Dependency Analysis with Support Vector 
Machines.  In Proc. of  IWPT?03. 
