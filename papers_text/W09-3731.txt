Proceedings of the 8th International Conference on Computational Semantics, pages 295?298,
Tilburg, January 2009. c?2009 International Conference on Computational Semantics
Formalisation of Intensionality as Algorithms
Roussanka Loukanova
Computational Linguistics, Uppsala University and TiLPS, Tilburg Universiy
rloukano@stp.lingfil.uu.se
1 Background and Recent Development
In a sequence of papers, Moschovakis developed a class of languages of re-
cursion as a new approach to the mathematical notion of algorithm and de-
velopment of computational semantics, e.g., see Moschovakis [7], for FLR,
and Moschovakis [8], for L
?
ar
. In particular, the language and theory of
acyclic recursion L
?
ar
is intended for modeling the logical concepts of mean-
ing and synonymy, from the perspective of the theory of computability, by
targeting adequateness of computational semantics of NL. L
?
ar
is a higher
order type theory, which is a proper extension of Gallin?s TY
2
, Gallin [3],
and, thus, of Montague?s Intensional Logic (IL). L
?
ar
has a highly expressive
language, an effective reduction calculus and strong mathematical proper-
ties. It models the notion of algorithm by abstract mathematical objects,
which are tuple of functions defined by mutual recursion, called acyclic re-
cursors. The referential intensions of the meaningful L
?
ar
terms are acyclic
recursors defined by their canonical forms, which are recursion terms. For
the construction of recursion terms (where-terms), the language L
?
ar
uses a
recursion operator, denoted by the constant where that applies over a head
term A
0
and a set of assignments, called body, {p
1
:= A
1
, . . . , p
n
:= A
n
},
where each A
i
is a term of the same type as the recursion variable p
i
(1 ? i ? n): A
0
where{p
1
:= A
1
, . . . , p
n
:= A
n
}. The where-terms rep-
resent recursive computations by designating functional recursors: intu-
itively, the denotation of the term A
0
depends on the functions denoted
by p
1
, . . . , p
n
that are computed recursively by the system of assignments
{p
1
:= A
1
, . . . , p
n
:= A
n
}. In an acyclic system of assignments, the com-
putations close-off. The formal syntax of L
?
ar
allows only recursion terms
with acyclic systems of assignments, while the FLR allows cyclicity, but is
limited with respect to its type system. The languages of recursion (e.g.,
FLR and L
?
ar
) have two semantic layers: denotational semantics and ref-
295
erential intensions. The recursion terms of L
?
ar
are essential for encoding
that two-fold semantic information. Denotational Semantics: For any
given semantic structure A, there is at most one, well-defined denotation
function, den, from terms and variable assignments to objects in the do-
main of A. Thus, for any variable assignment g, an L
?
ar
term A of type
? denotes a uniquely defined object den(A)(g) of the subdomain A
?
of A.
L
?
ar
has a reduction calculus that reduces each term A to its canonical form
cf(A) ? A
0
where {p
1
:= A
1
, . . . , p
n
:= A
n
} (unique modulo congruence, i.e.,
with respect to renaming bound variables and reordering of assignments).
Intensional Semantics: The notion of intension in the languages of re-
cursion covers the most essential, computational aspect of the concept of
meaning. Intuitively, Int(A) is the algorithm for computing its denotation
den(A). Formally, the referential intension, Int(A), of a meaningful expres-
sion A is the recursor that is defined by the canonical form cf(A) of A. Two
meaningful expressions are synonymous iff their referential intensions are
naturally isomorphic, i.e., they are the same algorithms. Thus, the algorith-
mic meaning of a well-formed expression (i.e., its sense) is the information
for how to ?compute? its denotation, i.e., expressions have sense by carry-
ing instructions for acquiring what they denote in a structure (model). The
canonical form cf(A) of a meaningful term A encodes its intension, i.e., the
algorithm for computing its denotation, via: (1) the basic semantic facts,
which consist of {p
1
:= A
1
, . . . , p
n
:= A
n
} and the ?head pattern? A
0
,
that are needed for computing the denotational interpretation den(A), and
(2) a rank order of the steps for incremental computation of the denotation
den(A)(g), e.g., a terminating order of the recursive steps that compute each
den(A
i
)(g), for i ? {0, . . . , n}. Thus, the languages of recursion offer a for-
malisation of central computational aspects of Frege?s distinction between
sense and denotation, with two semantic ?levels?:
NL Syntax =? L
?
r
=? Referential Intensions (Algorithms) =? Denotations
? ?? ?
ComputationalSemantics
2 Open Problems for the Language of Acyclic Re-
cursion as Semantic Theory of NL
Relational Type Theory with Partiality Acyclic recursion terms and
acyclic recursors model terminating algorithms for computing the denota-
tions of meaningful expressions. The idea of restricting recursion languages
to acyclicity, as in L
?
ar
, is that, for certain applications to NL semantics,
partiality and self-reference are not needed. In 80?s, Barwise and Perry
296
(e.g., [1]) introduced Situation Theory with the ideas that partiality, factual
content and situatedness are crucial features of the meaning concepts that
involve mental states, incl. attitudes. Situation Theory models partiality
and the inherent relational and situational nature of information, in general,
not only linguistic, by diverging from the traditional type theoretic settings.
Situation Semantics proceeds as a special case of application of Situation
Theory to NL semantic information. By taking up the ideas of partiality,
Muskens [9] realized the ideas of Situation Semantics by generalizing Gallin?s
TY
2
with partial relations and building corresponding generalized Montague
grammars, i.e., Partial Type-theoretic Grammars. The importance of par-
tial relational structures to semantics of NL is well investigated by Situation
Theory. Furthermore, Muskens [9] demonstrated that encoding relational
type systems is not only inadequate in the case of partial relational struc-
tures, but needless. That opens a need of extending the language L
?
ar
to a
full higher order type theory for modeling recursors with partial functions
and relations.
Factuality and State Variation L
?
ar
uses states (similar to indexes for
possible worlds and times, situations, contexts) at all levels of its own syntax
and semantics. However, the potential expressiveness of L
?
ar
for represen-
tation of state dependant semantic objects has not been fully developed.
There is a need of more finely grained semantic concepts by a type theory
of recursion that: (a) represents denotation functions with values that are
partial, situated objects with factual content, and, (b) uses terms with inter-
nal variation of state constants and state variables that occur inside terms.
Such terms are more adequate representation of information that depends
on varying
1
states. Work in the direction of representing locality of semantic
facts in L
?
ar
, has been done (however without state variation in individual
terms) by Kalyvianaki [5],[4].
Denotation and Intention Muskens [10] refined the denotation func-
tion by a revision of Thomason?s Intentional Logic. The result is a logi-
cal grammar that takes propositions as primitive objects, with a relation
that associates propositions with sets of possible worlds. The techniques of
Muskens [10] offer a possibility for refining the denotational semantics of re-
cursion languages by splitting it into two sub-layers: (a) situated denotations
(as above), and, (b) denotational intention:
Syn L
?
r
=? Intensions (Algorithms) =? Denotations
{
Sit Denotations
Denotational Intentions
1
Similarly to, for example, the varying resource situations in Situation Theory.
297
Underspecification Underspecified semantic representation became
major effort of contemporary research, see Bunt [2] for a comprehensive
overview of the field. Representing semantic underspecification of NL with
languages of recursion needs to be developed. Initial work, see Loukanova [6],
shows the unique expressiveness of L
?
ar
to accommodate its inherent facilities
for representing semantic underspecification of NL expressions.
Representation of Attitudes Semantics of attitudes, such as know,
believe, etc., in the languages of recursion, is an open problem.
Syntax-Semantics Interface A major work to be done is to define
render relations from NL to languages of recursion. Initial work shows that
that is a realistic task. A more demanding task, with potential applications,
e.g., to machine translation, is a render relation with inverse to NL.
References
[1] J. Barwise and J. Perry. Situations and Attitudes. Cambridge, MA:MIT press,
1983.
[2] H. Bunt. Semantic underspecification: Which technique for what purpose? In
H. Bunt and R. Muskens, editors, Computing Meaning, volume 3 of Studies in
Linguistics and Philosophy 83, pages 55?85. Springer, Dordrecht, 2007.
[3] D. Gallin. Intensional and Higher-Order Modal Logic. North-Holland, 1975.
[4] E. Kalyvianaki. Algorithmic Natural Language Semantics. PhD thesis, Uni-
versity of Athens, 2007.
[5] E. Kalyvianaki. Factual content in algorithmic natural language semantics.
In V. V. Nurmi and D. Sustretov, editors, Proceedings of the Twelfth ESSLLI
2007 Student Session, pages 123?133, Dublin, Ireland, 2007.
[6] R. Loukanova. Typed lambda language of acyclic recursion and scope under-
specification. In R. Muskens, editor, Workshop on New Directions in Type-
theoretic Grammars, ESSLLI 2007, pages 73?89, Dublin, Ireland, 2007.
[7] Y. N. Moschovakis. Sense and denotation as algorithm and value. Number 2
in Lecture Notes in Logic, pages 210?249. Springer, 1994.
[8] Y. N. Moschovakis. A logical calculus of meaning and synonymy. Linguistics
and Philosophy, 29:27?89, 2006.
[9] R. Muskens. Meaning and Partiality. Studies in Logic, Language and Infor-
mation. Stanford: CSLI Publications, 1995.
[10] R. Muskens. Sense and the computation of reference. Linguistics and Philos-
ophy, 28:473?504, 2005.
298
