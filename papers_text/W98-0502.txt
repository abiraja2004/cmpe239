i 
} 
J 
I i  
! ii 
'i 
| 
Unit Coordination and Gapping 
in Dependency Theory 
Vincenzo Lombardo and Lconardo Lesmo 
Dipartimento di Informatica nd Centro di Scienza Cognitiva 
Universita' di Torino 
c.so Svizzera 185 - 10149 Torino - Italy 
{vincenzo, lesmo}Odi.unito.it 
Abstract 
The paper investigates the problem of 
representing coordination constructs in a 
formal system for the dependency approach to
syntax. The distinctive aspect of the formalism 
is the presence of non-lexical (trace - ~) nodes 
in the representation. We illustrate the basic 
mechanisms, and how they can account for 
syntactic phenomena i volving long-distance 
dependencies. Then, we see how the same 
mechanism can account for the gaps and 
ellipses of coordination constructs. 
1. Introduction 
Coordination is a long standing problem for 
linguistic theories, because of its particular 
aspects which do not fit well with the 
dominance-based character of the vast 
majority of paradigms. The accounts of 
coordination which have been devised in 
constituency theories all rely on the notion of 
non traditional constituents, because of the 
variety of word strings that can play the role of 
conjuncts (see, for example, (Gazdar et al 
1985)). Maybe the most natural description has 
been provided by Steedman in a series of 
papers on Combinatory Categorial Grammar 
(Steedman 1985, 1990, 1996). He generalizes 
the notion of constituent through the operators 
of functional composition and type raising, the 
so-called combinators. This uniformity of 
analysis suffers from the generation of 
spurious ambiguities, even if this proliferation 
of structures seems to be justified (in some 
cases t) by the requirement of characterizing 
intonation pauerns. Sarkar and Joshi (1997) 
forward CCG analysis in the LTAG 
framework, by interpreting combinators in 
1 For example, it is hard to analyze "Keats teals apples" 
as both (Keats (steals apples)) and ((Keats teals) 
apples) (Sarkar, Joshi 1997). This is likely to be a 
spurious ambiguity. 
terms of argument sharing and traces handled 
by TAG operators (conjoin or adjunction 
itself). In this way, they are able to keep 
unaltered the notion of fixed constituency due 
to LTAG lexicon. 
Dependency paradigms exhibit obvious 
difficulties with coordination because, 
differently from most linguistic structures, it is 
not possible to characterize the coordination 
construct with a general schema involving a 
head and some modifiers of it. The conjunction 
itself, has distributional properties that have 
nothing to do with the whole coordination. 
Hudson (1990, following Tesniere 1959) gives 
up the idea of providing a dependency 
structure for the coordination, and 
characterizes conjuncts as word strings. 
Conjuncts are internally organized as (possibly 
disconnected) dependency structures and each 
conjunct root is dependency related to some 
element of the sentence which is external to 
the coordination. 
Mel'cuk (1988), on the other hand, 
privileges one of the two conjuncts as the head 
of the coordination, and claims that 
coordination symmetry is such only at the 
semantic level. This approach solves the 
problem of providing a head with the same 
distributional properties of the whole 
coordination. When applied to English, it 
allows to represent the prepositional character 
of conjunctions observed by Ross (1970). 
In this work we provide a dependency 
account of coordination following Mel'cuk's 
hint: one of the two conjuncts is the head of 
the construction, and the conjunction itself is 
the head of the other conjunct. We extend the 
lexicalized ependency formalism presented in
(Lombardo, Lesmo 1998): each rule constrains 
the form and the number of dependents of a 
word in a dependency tree (see fig. 1). 
The formalism is projective, and accounts 
for long-distancedependency phenomena 
11 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
through the introduction of non lexical 
categories, which can be viewed as a 
notational variant of some graph structures 
already present in some formalisms (see, e.g., 
Word Grammar (Hudson 1990)). The presence 
of non lexical categories keeps unaltered the 
condition of projectivity, encoded in a notion 
of derivation. The core of the grammar 
consists of primitive and non primitive 
dependency rules, representing predicate- 
argument structures associated with lexical 
items. Non primitive dependency rules result 
from the application of metarules to primitive 
rules. The dependency rules that license 
coordination are non primitive rules for the 
head conjunct. They can be distinguished in
rules for unit coordination, where conjuncts 
are complete predicate-argument structures, 
and gapped coordinations, where conjuncts 
have gaps inside. 
The paper is organized as follows. The next 
section presents the basic dependency s stem, 
along with the notion of derivation? Section 3 
presents the treatment ofcoordination, together 
with examples of metarules that account for 
several forms of unit and gapped 
constructions. Section 4 concludes the paper? 
2. A dependency formalism 
The basic idea of dependency is that the 
syntactic structure of a sentence is described in
terms of binary relations (dependency 
relations) on pairs of words, a head (or 
parent), and a dependent  (daughter), 
respectively; these relations form a tree, the 
dependency tree. In this section we describe 
the dependency s stem in (Lombardo, Lesmo 
1998). The syntactic knowledge is expressed 
by dependency rules which describe a node of 
know 
SUB J /  SCOMP 
I ~ l i k~ 
SUB J/ ~OBJ 
John beans 
Figure 1. A dependency tree for the sentence "I 
know John likes beans'. The leftward or rightward 
orientation of the edges represents he order 
constraints: the dependents that precede 
(respectively, follow) the head stand on its left 
(resp. fight). 
12 
and the parse structures generated by a 
grammar of this form are defined through a 
derivation procedure. 
The grammar and the lexicon coincide, 
since the rules are lexicalized: the head of the 
rule is a word of a certain category, i.e. the 
lexical anchor, and the dependents are 
categories linked by edges labelled with 
dependency relations. From the linguistic point 
of view we can recognize two types of 
dependency rules: primitive dependency rules, 
which represent linearly-ordered predicate- 
argument structures (possibly with adjuncts), 
and non-primitive dependency rules, which 
describe syntactic phenomena like argument 
sharings and extractions. Metarules (see 
section 3), which produce non primitive rules 
from primitive rules (by means of one or 
several applications), obey linguistic principles 
(cf. GPSG approach (Gazdar et al 1985)). 
A dependency grammar is a six-tuple <W, C, 
S, D, I, H>, where 
W is a finite set of words; 
C is a set of syntactic ategories; 
S is a non-empty set of root categories (CD_ S); 
D is the set of dependency relations (e.g. 
SUB J, OBJ, XCOMP, P-OBJ, PRED2); 
I is a finite set of symbols (among which the 
special symbol 0), called u-indices; 
H is a set of dependency rules of the form 
x:X (<rlYlUl'Cl> ... <ri.lYi.lUi.l'Ci_l> # 
<a'i+IYi+lUi+l'Ci+l> ... <rmYmum'Cm>) 
1) xe W, is the head of the rule; 
2) Xe C, is its syntactic ategory; 
3) an element <rj Y- u- q:j> is a d-quadruple ? J J 
(which describes a dependent); the 
sequence of d-quads, including the special 
symbol # (representing the linear position 
of the head), is called the d-quad sequence. 
We have that 
3a)rieD, j e {1 ..... i - l , i+l ..... m}; 
3b) Yj~C,j e {1 ..... i-l, i+l ..... m}; 
3c) ujeI, j ~ {1 ..... i-l, i+l ..... m}; 
3d) ~ is a (possibly empty) set of triples <u, 
r, Y>, called u-triples, where ue I, re D, 
Y~C. 
Principle of u-triple satisfiability : 
For each dependency rule/5~ H and u e I, there 
2 The special relation VISITOR (Hudson 1990) 
accounts for displaced elements and, differently from 
the other relations, i  not ~mantically interpreted. 
! 
I, !i 
I i 
exists a u-triple <uj,r,Y>~xj in a d-quad 
?a-jYjujxj> of 8 iff there exists one d-quad 
<riYiuixi> of 5 such that uj=ui, i ~j. 
Intuitively, a dependency rule constrains one 
node (head) and its dependents in a 
dependency tree3: the d-quad sequence states 
the order of elements, both the head (# 
position) and the dependents (d-quads). The 
grammar is lexicalized, because each 
dependency rule has a lexical anchor in its 
head (x:X). A d-quad <riYiuixi> identifies a 
dependent of category Yi, connected with the 
head via a dependency relation ri. Each 
element of the d-quad sequence is possibly 
associated with a u-index (ui) and a set of u- 
triples (xi). The x-component can be viewed as 
a slash feature in GPSG terms. Both ui and zi 
can be null elements, i.e. 0 and ?, respectively. 
A u-triple (x-component of the d-quad) <u, R, 
Y> bounds the area of the dependency tree 
where the trace can occur. The principle of u- 
triple satisfiability states a one-to-one 
correspondence b tween the u-indices and the 
u-triples of the d-quads. The dependent 
indexed by Uk in the rule is coindexed with a 
trace node in the subtree rooted by the 
dependent containing the u-triple <Uk, R, Y>. 
The derivation procedure requires some 
preprocessing (u-index annotation) on the 
dependency rules and some terminology. 
As one dependency rule can be used more 
than once in a derivation process, it is 
necessary to annotate the u-indices with unique 
symbols (progressive integers) before the 
actual use. The annotation must be consistent 
in the u and the x components. A dependency 
rule (as well as a u-triple) with u-indices all 
annotated is said to be instantiated: I + refers to 
the set of annotated u-indices (including the 
special symbol 0). 
3 As stated above, the dependency rules express the 
subcategorization frames, and possibly include adjuncts. 
Here are two examples of dependency rules: 
yawned:V(<SUBJ, N 0, 0> #), 
is the licensing rule of "John yawned"; 
yawned:V(<SUBJ, N,0, 9> # <MANNER, ADV,0, f~9>) 
is the licensing rule of "John yawned loudly". In the first 
case the dependency rule represents the 
subcategorization frame; in the ~cond case the rule 
includes an adjunct. 
13 
A word w (e W) or the trace symbol  (~ W) 
and two annotated u-indices !1 and v is a word 
object of the grammar. Given a grammar G, 
the set of word objects of G is 
? Wx(G)={ }tXv I p.,veI +, xe Wu {E } }. 
A pair consisting of a category X (e C) and a 
string of instantiated u-triples Y is a category 
object of the grammar (X(y)). 
A 4-tuple <r, Y(T1), u, Y2> consisting of a 
dependency relation r (e D), a category object 
X(y1),  an  annotated u-index u, a set of 
instantiated u-triples ~2 is a derivation object 
of the grammar. Given a grammar G, the set of 
derivation objects of G is 
Cx(G) = {<r,Y(Tl),U,~'2> : 
re D, Ye C, ue I +, TI, T2 are sequences of
instantiated u-triples}. 
Given a grammar G, L'(G) is the language of 
sequences of word objects: 
L'(G)={ ?xa Wx(G)* I 
<TOP, Q(O), 0, 0> :=~* ?x and Qe S(G)} 
where TOP is a dummy dependency relation 
for the root of the tree and ~ is the derivation 
relation (defined below).  The language 
generated by the grammar G, L(G), is defined 
through the function t: 
L(G)={we Wx(G)* / w=t(CX) and aa  L'(G)}, 
where t is defined recursively as 
t(-) = -, t(llWv a) = w t(a), t(lal~v a) = t(a). 
and - is the empty sequence. 
The derivation procedure performs a leftmost 
generation of a sentence of L'(G). The 
derivation relation consists of two expressions. 
Let ?xa (Wx(G))* and ~ e (Wx(G) u Cx(G))*. 
DRI:a <r, X(Tp), u, Tx> W =~ 
(X 
<r l ,Y1( p l ),U l ,X l > 
<r2,Y2(P2),u2,x2> 
<ri-l,Yi-l(Pi-1),u i-l,Xi-l> 
uXO 
<ri+l,Y i+l(l~i+l),U i+l,Xi+l> 
o .o  
<rm,Ym(Pm),Um,'Cm> 
where x:X (<rlY lUl x 1 > ... <ri-lYi-lUi-lXi-l> # 
<ri+lYi+lUi+lZi+l> .... <rmYmumXm>) is a 
dependency rule, and Pl u ... u Pm--Tp u Tx- 
I 
I 
I 
I 
I 
I 
I 
i 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
i 
DR2: a <r,X(<v, r, X>), u, ()> ~=~ a nevV 
=~* is the reflexive, transitive closure of =~. 
DR1 distributes over the dependents of a 
dependency rule the u-triples still to be 
satisfied (yp) plus the new u-indices introduced 
by the rule itself (~'x). The u-index u, occurring 
in the current derivation object, is associated 
(as a It-index) with the lexical head of the rule 
x. The whole subtree headed by x will be co- 
indexed with a trace node which will satisfy a 
u-triple of u in one of the p sets (DR2). If u=0 
no coindexing occurs. DR2 implements the u- 
triple satisfaction: the u-triple <v, r, X> 
represents an expectation for a trace of 
category X attached to its head through a 
relation r. When DR2 applies, the trace (word 
object l~Ev) is in fact inserted in the derivation 
with v-index v. Notice that the trace has u (the 
u-index of the derivation object) as It-index: 
this means that the trace itself can be the 
reference for another trace. 
As an example, consider the grammar 
GI=< 
WI: {I, John, beans, know, likes} 
CI: {V, V+EX, N} 
$1: {V, V+EX } 
D 1: { SUB J, OBJ, VISITOR, TOP} 
I1: 10, u} 
TI>, 
where T1 includes the following dependency 
rules: 
1. I: N (#); 
2. John: N (#); 
3. beans: N (#); 
4. likes: V (<SUBJ, N, 0, O> # <OBJ, N, 0, ~>); 
5. know: V+EX (<VISITOR, N, u, 0> 
<SUB J, N, 0, ~> # 
<SCOMP, V, 0, {<u,OBJ,N>}>). 
A derivation for the sentence "Beans I know 
John likes" is the following (at each step, the 
leftmost derivation object is underlined, and 
the derivation relation to be applied marks the 
symbol =~): 
<TOP. V+EXf.~). 0. O> =:~DR 1 
<VIS ITOR.  N(O) .  u l .  O~: <SUBJ ,  N(~) ,  0, @> know 
<SCOMP, V(~), 0, {<uI,OBJ,N>}> =::~DRI 
ulbeans <SUBJ. N(O). 0. 0> know 
14 
<SCOMP, V(O), 0, {<ul,OBJ,N>}> :=~DRI 
ulbeans I know <SCOMP. V(Q~t. 0. |<uI.OBJ.N>I> 
~DRI 
utbeans I know <StlBJ. N(~X_9~likes 
<OBJ, N(~'uI,OBJ,N>), 0, ~ :=b DRI 
u\]beans I know John likes 
<OBJ. N(<ul.OBJ.N>k 0.0> ==b DR2 
ul beans I know John likes i~ul 
The dependency tree corresponding to this 
derivation is in fig. 2. 
Given DR1 and DR2, a trace node 
represents a gap for the whole subtree headed 
by the lexical node coindexed with it. So, in 
fig. 2, if we replace "beans" with a complex 
noun phrase ("black beans that come from 
Guatemala"), u 1 again annotates only "beans", 
but the trace node represents the gap for the 
whole subtree. 
3. Coordinat ion in Engl ish 
In section 2 we have described a lexicalized 
dependency formalism and a notion of 
derivation that yields the legal sentences and 
the corresponding dependency trees. In 
(Lombardo, Lesmo 1998) we have defined an 
Earley-type parsing algorithm for this 
formalism. In this section we address the 
problem of providing adependency analysis of 
coordination constructs. The (non primitive) 
dependency rules that account for coordination 
are the result of the application of metarules to 
basic dependency rules. Metarules and 
primitive dependency rules express the 
linguistic knowledge. The iterated application 
of metarules produces all the non primitive 
dependency rules, that together with the 
primitive rules, form the grammar. The 
application of the derivation rules to the 
complete set of rules produces the sentences of 
the language. This section addresses the 
linguistic issue of providing anumber of 
know 
ul beanf I" ~ l ikes  
SUB J /  ~OBJ 
John Eul 
Figure 2. Dependency tree of the ~ntence "Beans I
know John likes", given the grammar GI. 
f/ 
? 
{i 
I! t 
r 
ii 
! 
:i! 
metarules that deal with coordination, and the 
formal issue of extending the derivation 
procedure to gapped conjuncts. First, we 
introduce the general notation for metarules; 
then, we consider a number of coordination 
phenomena in English, starting from the 
simple to the complex ones, which require 
some extensions to the derivation rules. 
3.1 Metarules 
The general schema of a metarule 4 is 
meta-id 
SOURCE ~ TARGET 
where "meta-id" is an identifier of the 
metarule, and SOURCE and TARGET are 
PATI'ERNS of dependency rules. A PATrERN is 
an abstraction over a dependency rule, where 
the head can (possibly) reduce to the syntactic 
category (from x:X to X), and some 
subsequences of d-quads can be (possibly) 
replaced by some variable symbol. The 
abstraction allows to generalize the description 
of phenomena, where possible.5 
An example of metarule for object 
extraction is the following: 
V (<SUBJ, N, 0, 9> # <SCOMP, V, 0, 0">) 
....)ex2 
V+EX ( <VISITOR, N, u, 9> 
<SUB J, N, 0, O> # 
<SCOMP, V, 0, {<u,OBJ,N>}> ) 
which can be represented graphically as 
! i P 
i n <u. OBJ. N> 
I ~ The metarule x2 takes as SOURCE a PATI'ERN 
that represents he subcategorization frame of a 
verb with a sentential complement (know, 
believe, admit . . . .  ), and produces as TARGET 
4 This section presents an intuitive sketch of metarules, 
without any claim about the full generality of the 
examples ofmetarules reported herein. 
5 Recently, there has been a trend in linguistics to view 
most syntactic phenomena aslexicon-dependent rather 
than category-dependent (.~metimes, .g. passivization, 
the shift even continues to sentence-dependency). I  our
work, the final goal is to associate metarules to 
subcategories arranged ina hierarchy (on this topic, see 
(Barbero et al, this volume)). In this paper, we neglect 
this point, and all our examples of melarules assume 
category-headed patterns. 
the corresponding PATrERN that accounts for 
extracting the object from the sentential 
complement. In the previous ection, we have 
seen how a dependency rule abstracted by this 
PA'ITERN can derive "Beans, I know John 
tikes". 
Some subsequenees of d-quads do not affect 
the application of metarules, and pass 
unaltered from the SOURCE to the TARGET. 
PATIERNs avoid redundancy by introducing 
variables. The following metarule accounts for 
preposition stranding (for example, "This 
place, he comes to", or "This place, he often 
comes to with reluctance"): 
V (<SUB J, N, 0, ~> # (~ I <P, P, 0, (~> 02) 
.._)psl 
V+PS ( <VISITOR, N, u, 0> 
<SUB J, N, 0, 0> 
# 
<p, P, 0, {<u, P-OBJ, N>}> 
02 ) 
A unification procedure accounts for matching 
PATIERNs (SOURCE and TARGET) and 
dependency rules, taking care of variable 
sustitutions from SOURCE to TARGET. The 
SOURCE dependency rule for "comes" in fig. 
3a represents its subcategorization frame. The 
metarule psi matches this dependency rule 
through its SOURCE PATIERN, and produces 
the TARGET dependency rule, which licenses 
the dependency tree in fig. 3b. 
In the remainder of this section, we describe 
the metarules that apply to dependency rules to 
generate the coordination constructs. 
comes: V VISITOR comes: V 
P 
<u, P-OBJ, N> 
(a) 
comes  
Co) 
Figure 3. Me~ule psi for preposition stranding (a), and 
dependency tree of the sentence "This place, he comes 
to" (b). 
15 
I In the derivation process, we assume the ~, :oor~n / /~"x~coo 
grammar to be fully instantiated, that is all the it RD 
metarules have been applied to generate all the 
non primitive dependency rules. / t CONJ-X 
I 3.2 Metarules for coordination (a) 
The treatment of coordination relies on the 
application of proper metarules to dependency 
rules. Gapped constituent coordination results 
from the same mechanism that accounts for 
long-distance dependencies in section 2. The 
treatment of coordination illustrated here 
pursues the goal of providing a dominance- 
based representation. As we will see, this can 
lead sometimes to less standard analyses of 
coordination phenomena. Most of the theories 
in the literature assume aparallel constituency- 
based (Steedman 1996) (Sarkar, Joshi 1997) or 
string-based (Hudson 1990) analyses of the 
conjuncts. This prevents a fully incremental 
processing of the input, since before 
processing the infix conjunction (and, or .... ) 
we need to analyze the second conjunct. The 
theory illustrated here naturally favors the 
incremental nalysis. 
As the formalism is lexicalized, 
coordinating conjunctions are treated as 
lexically ambiguous elements (polymorphic 
functors in categorial terms): they are assigned 
the categories of the form CONJ-X, for each 
syntactic category X. So, we have CONJ-V for 
verbs, CONJ-N for nouns, and so on. 
The first metarule we take into account is 
the one that works for unit coordination 
(coord-uni06: 
X ((~) ._.>coord-unit X ((~ <COORD, CONJ-X, 0, ~)  
For each dependency rule with a head of 
category X (variable), coord-unit produces a
dependency rule having exactly the same d- 
quad sequence (o), but with the added 
fightmost dependent CONJ-X, whose relation 
with the head is COORD (fig. 4a). The 
dependency rule 
and: CONJ-V (# <2nd, V, 0, 0>) 
licenses the second conjunct of a coordination 
of finite verbs. The relation "2nd ~ links the 
second conjunct as a dependent of the 
conjunction and. The TARGET dependency rule 
in fig. 4b results from the application of the 
metarule "coord-unit" o the primitive 
! 6 The term "unit coordination" for the full constituent coordination comes from (Huang 1984). 
laughed: V laughed: V
coord-unit SUB F ~COORD 
co ,.v 
(b) 
laughed 
John "and 
sn~zed 
/ 
(c) 
Figure 4. Graphical repre~ntation f metarule for 
unit coordinations (a), application to a dependency 
rule for laughed (b), and dependency tree of "John 
laughed and Mary sneezed". 
dependency rule for the predicate-argument 
structure of laughed (the same for sneezed and 
other intransitive verbs). According to these 
dependency rules, the sentence "John laughed 
and Mary sneezed" can be represented as 
shown in fig. 4c. 
The metarule "coord-unit" accounts for full 
constituent (unit) coordinations, where the two 
conjuncts are headed by a word of the same 
category. Note that "full constituents ~ means 
that conjuncts have no gaps inside. Other 
examples are the following sentences: 
She eats apples and pears (OBJ, coordination), 
Elizabeth likes to go to the zoos and to the 
musewns (DEST coordination), 
Ma~. thought ostrichs fly and kangaroos wim 
(SCOMP coordination) 7 
Difficulties with coordination arise with 
gapped conjuncts. Literature usually 
distinguishes between non-traditional- 
7 The latter examples consider constituents hat are full 
arguments ofpredicate-argument structures. Note that 
VP coordination, which is a full constituent coordination 
in phrase structure terms, is not an example of unit 
coordination, becan~ the dependency rules repre~nt 
the whole predicate-argument structure (including 
subject). 
! 16 
! 
( 
i 
constituent coordination and gapping (see, V coord-gap I.IB/ V_...~COO 
however, (Steedman 1990), for an exception), soB~-7~ SUBJ S RD 
As stated above, we deal uniformly with the f /oN, ,  N " " uN ! ~ CONJ-V two types of coordination: the common key is <u, stmJ, > 
I to classify coordination phenomena according (a) 
i to the elements that are missing in the 
conjuncts. Consider the following case of a v eoord-gap V 
I 3 ~ VP-coordination: stmJ s Lucy saw a butterfly and laughed. N N CO NJ.-y. aN fig. can see a <~, OBJ, N> In 5 we dependency 
representation f this sentence. Lucy is co- (b) I i indexed by Ul with the trace Eul in the second v coord-gap V 
coniunct, stm~,"~o stmJ+OB, s tm~'~a_  ? BJ J : We assume that any coordination where one 
N uN CONJ-V v N I :~ of the two conjuncts misses some part of the 
i~ 1 predicate-argument structure (including <u.stmj.r~> 
:~ <v, OBJ. N> i~ adjuncts) is a gapped coordination. The (c) 
I in te rp re tat ion of thega pped co ordination can tra/~a~'I'?al~p I ~ ~/~cV~oRD~ be summarized as follows: a coordination has s j coora-gap S j 
a structure headed by one of the conjuncts; the l~'~ OBJ~OB, 
,: missing elements are handled by traces (non I ~ lexical nodes) and u-indices, that are N \[tol N CONJ-V aN vP\[tol <u, OBJ, N> 
controlled through u-triples in non-primitive <v.I-OBJ.p\[to\]> 
dependency rules (accounting for (d) 
! coordination)? The dependency rule that I licenses the tree in fig. 5 is the following: Figure 7. Metarules for several types of gapped 
saw: V( <SUB J, N. u, 9> coordinations. 
! # 
I ~' <OBJ, DE'T, O. @> Mary cooked and ate beans 
i!~ <COORD, CONJ-V, 0, {<u, SUBJ, N>}>) (SUBJ+OBJ gap, or V coordination, fig. 7c) 
The metarule that produces this dependency John offered, and Mary actually gave, a 
~ rule is in fig. 7a: it states that it is possible to goMen Cadillac to Billy Schwartz 
produce a dependency rule for SUB J-gapped (OBJ+I-OBJ gap, a l~ Right Node Raising, fig. 7d) 
i~ coordinations from a rule having a verb as its 
head and an initial d-quad which represents a These metarules enforce the high attachment 
I ~ SUBJ relation. In the subtree rooted by the of actual dependents and the low attachment of 
i ~,, conjunction there must be a SUBJ trace node. gapped ependents (trace nodes)? This implies 
ii U-triple specifications allow to produce a that right dependents attach to the farther head I i' uniform treatment of many kinds of argument of the two, always respecting the condition the 
~ gaps, among which the following (single and projectivity. Even if the second conjunct could 
~, multiple) ones: attach more immediately tothe lower head, we 
Mary cooked and John ate beans think that, intonationally, the second conjunct 
(OBJgap, fig. 7b) forms a unit per se, without the right 
tm/~OBJ~Ld dependents. This also seems to be an empirical 
s D support of the constraint that u-triple 
ulLUCy a an satisfaction follows the top-down direction. 
NBAR~ ~nd 
butterflYsoBlau.ghedj/ 3.3 Head gapping 
The formalism and the derivation procedure 
ea t introduced in section 2 assume a trace node 
represents the gap for the whole subtree 
Figure 5. Dependency tree of the sentence Lucy headed by the lexical node coindexed with it 
saw a butterfly and laughed. (full subtree gapping). This prevents the 
17 
representation of coordination constructs 
where the missing structure in the second 
conjunct is not a whole subtree, but only a part 
of it, namely the head and, possibly, some of 
its dependents. This phenomenon occurs in the 
cases known as gapping in the literature. Here 
are some examples: 
1 saw a unicorn and Carol a tyrannosaurus 
(Vgapping) 
1 gave the books to Mary and the records to 
Sue (v + SUBJ gapping) 
John wants to give the books to Mary and Bill 
to Sue (complex v + OBJ gapping) 
In this cases we speak of head gapping. In this 
section we extend the formalism of section 2 to 
account for head gapping. 
The steps which are necessary for the 
extension are the following. (1) We must be 
able to associate a u-index with the head 
position (#); in the formalism of section 2 only 
d-quads (of dependents) had u-symbols 
associated. (2) We must introduce and keep 
apart in the word objects It-indices concerning 
a whole subtree and It-indices concerning a
single node. (3) We must introduce and keep 
apart in the u-triples the u-indices concerning a 
whole subtree and the u-indices concerning a 
single node. (4) When both head and (some) 
dependents are gapped, we must constrain the 
satisfaction of the u-triples of the dependents 
to occur below the satisfaction of the u-triple 
of the head. s (5) We must modify the 
derivation relation in order to account for the 
changes in the formalism. 
(1) 
To associate a u-index with the head position 
in the dependency rules, we need to modify its 
definition: 
A dependency grammar is a six-tuple <W, 
C, S, D, I, H>, where W, C, S, D, I are as 
defined in section 2, and H is a set of 
dependency rules, of the form 
x:X (<1" lYlUl'\[ 1> ... <ri-lYi-lUi-l'\[i-l> <#, ui> 
<ri+lYi+lUi+l'ti+l> ... <rmYmum'tm>) 
where all symbols are the same as in section 2, 
except for the head position (#), which has 
been associated an index ui (possibly ?), such 
S The derivation process defined in section 2 loosely 
constrains the satisfaction of u-triples to occur in a 
specific subtree. Head gapping requires a stronger 
constraint to satisfy the u-triples of the gapped heads 
and dependents in the .~ame r spective tree position. 
18 
that uiE I. 
(2) 
? To introduce and keep apart he u-indices for a 
subtree and the ones for a single node in the 
derivation process, we must modify the word 
objects in 4-tuples consisting of a word w 
(E W) or the trace symbol 8 (~W) and three 
annotated indices rI, St and v. 
Given a grammar G, the set of word objects of 
Gis 
Wx(G)={q,lax v / r i , St,v E I +, xE W u { 8} }. 
where rI concerns x as a single node, and St 
concerns x as head of a subtree. 
(3) 
To introduce and keep apart the u-indices 
concerning a full subtree gapping or a head 
gapping in the u-triples, we introduce two 
forms: 
- simple (full subtree gapping): <u, r, X> 
- complex (head gapping): <!.u, r, x:X> 
where uE I, re D, xE W, XE C, and ! is a special 
symbol that specifies that the complex index 
concerns the single node linked by the 
dependency relation r. 
(4) 
To constrain the attachment of the trace nodes 
of gapped dependents o the trace node of the 
head, we generalize the complex form of the u- 
triple in 
<q.u, r, x:X> 
where u, r, and X are as before, and qeIu{ !}. 
Now, when the index is !.u we have a head gap 
indexed u (no indication on its parent, as in 
standard u-triple satisfaction); when the index 
is q.u, we have a head gap u whose parent is 
indexed by q. 
(5) 
The new derivation relation is the following: 
DR l:0t <r, X('yp), u, Tx> ~ =:~ 
o~ 
<rl,Y l(Pl),U 1',% I> 
<r2,Y2(P2),u2',X2> 
o . .  
<ri-l,Yi-l(Pi-1),Ui-l','~i-l> 
Ui,U X0 
<ri+l,Y i+l(Pi+l),U i+l','\[i+l> 
o .o  
<rrn,Y m(Pm),U m','~rn> 
? 
where 
a) x:X (<rlY lUl'\[ 1 > ... <ri-lYi-lUi-l'\[i-l> <# ui> 
I 
! :  
I 
\[: 
) 
t ,  
J~ 
( 
i; 
i 
I : 
I ! 
<a'i+lYi+lUi+l'~i+ 1 > -.- <rm Ymum'~m>) is a 
dependency rule; 
13) Pl u...  t.,, pm---q'p u Tx; 
c) if u is of the form q.s (where q,se I) then: 
c') build a u-triple 
<q.s, r, x:X> 
and insert it in the 13 set in ot or V containing 
the u-triple <t.q .... > (teI); 
c") for each uk (k=l ..... i-l, i+l ..... m) in 
the (head gapped) dependency rule such that 
Uk=!.w (we I), replace it with Uk'=S.W. 
The new DRI extends the version of section 2 by 
accounting for the treatment of complex u-triples (part 
c). If the u-index (u) of the derivation object to expand 
(<r,X(yp),u,yx>) is a pair of indices of the form q.s, this 
means that the derivation object results from the 
application of a head gapped dependency rule. Head 
gapping can possibly include some dependents: DRI 
collects all the word objects that participate to the 
gapping phenomenon. This process has two pha~s: c' 
builds a new u-triple for the current derivation object, 
and in~rts it in the p ~t  that already contains the head 
of the current gapped element (of the form <t.q, ...>); in 
other words, c' builds a "subtree" of gapped elements; c" 
obtains the actual (instantiated) index by referencing the 
current element as head of the next dependent. 
DR2: ot <r,X(<v, r, X>), u, O> V~ 0,ul~v 
DR2 is still the rule for full subtree gapping: it only 
applies to the satisfaction ofsimple u-triples. 
DR3:~ <r, X(yp), u, yx> V =::' 
(g 
<rl,Y l(Pl),U 1,1:1> 
<r2,Y 2(P2),u 2,'C2> 
..? 
<ri- l,Yi-l(13i-1),u i-l,l:i- I> 
ui,u Ew 
<ri+l,Y i+l(Pi+ l),U i+ l,'Ci+l> 
.o? 
<rm,Ym(Pm),U m,'~m> 
? 
where 
a) x:X (<r lY lU l I l>  ... <ri_lYi.lUi.l '\[i. l> <# ui> 
<ri+lYi+lUi+lXi+l> ... <rm YmumIm>) is a 
dependency rule; 
b) Tp includes a complex u-triple <v.w, rx, 
x:X>, v e I u {!},we I; 
c) for each complex u-triple <w.t, ry, y:Y> in 
Tp, there exists a d-quad <rkiYkiUki'tki > in the 
dependency rule such that rki=rY and Yki=Y, 
and Pki~{<t, rkiYki>}; 
d) 131 u . . .u  Pm---'Tx UTp- {<v.w, rx, x:X>} 
DR3 is totally new, and accounts for the satisfaction of 
complex u-triples. The complex u-triples that are ready 
for satisfaction are those of the form <v.w, rx, x:X>. 
The satisfaction mechanism looks for a dependency rule 
headed by x:X that contains a d-quad for each u-triple 
that represents a gapped dependent of the head 11- 
indexed by v. The result is a trace node where the v- 
index is w, and the 11- and the it-indices are computed as 
usual. Finally, DR3 modifies the set of u-triples Tp by 
removing the u-triple which has been satisfied. 
For the (V-gapped) sentence 
I saw a unicorn and Carol a tyrannosaurus 
we need the metarule in fig. 7a, which 
produces the TARGET dependency rule 
saw: V (<SUB J, N, 0, O> <#, !.u> <OBJ, N, 0, 0> 
<COORD, CONJ-V, 0, {<!.u, 2nd, V>}>) 
which licenses the dependency tree in fig. 7b. 
For the (V+SUBJ gapped) sentence 
I gave the books to Mary and the records to 
Sue (v + SUBJ gapping) 
the (non primitive) dependency rule is: 
gave: V (<SUBJ, N, u.v, 9> <#, !.u> <OBJ, N, 0, 9> 
<I-OBJ, P\[to\], 0, 9> 
<COORD,CONJ-V, 0, {<!.u, 2nd, V>, <u.v, SUBJ, N> }) 
which is built by the metarule in fig. 8a. 
The dependency tree which results from the 
derivation of this sentence is in fig. 9. 
CONJ-V 
<!.u, 2nd, V> 
(a) 
ul,O mw 
SUBJ OBI COORD 
I unicorn ana 
a Eul 
Carol tyrannosaurus 
a 
(b) 
Figure 7. The metarule for verb gapping (a) and the 
dependency tree of the sentence "I saw a unicorn 
and Carol a tyrannosaurus" (b). 
19 
V coord- gap !.u,OV 
sueJ SUBJ-V SUBJ COORD 
<!.u, 2nd, V> 
<u.v. SUBJ. N> 
ul gave 
SUBJ J~OBJ J~_~~-O~' -~~ I-OBJ COORD 
vl I books Io and 
the Mary E:uL 
(a) (b) the Sue 
Figure 8. The dependency tree a.~q~ciated with the ~ntence "I gave the books to Mary and the records to Sue". 
4.Conclusions Acknowledgements  
The paper has described a lexicalized 
dependency formalism and an asymmetric 
dominance-based treatment of coordination. 
The linguistic knowledge is formalized in 
primitive dependency rules and a number of 
metarules, which produce non primitive rules 
from pr imit ive rules. Long-d is tance 
dependencies are represented by coindexing 
lexical and non lexical nodes in the 
dependency tree. Metarules can generate the 
non primitive rules that license long distance 
dependencies and, in particular, those 
connected with coordinat ion gapped 
constructs. 
The paper gives an account of pair 
coordinations, but the formalism seems to be 
generalizable toany number of conjuncts. The 
basic conjunct unit is the predicate-argument 
structure including adjuncts. This assumption 
leads to the broad classification in unit and 
gapped coordinations. As we have seen, this 
can caused some non standard analyses of 
Right Node Raising and verb coordination. 
The formalism presented in this paper is 
only a first attempt of producing a dependency 
formalism that can account for coordination 
without resurging to phrase structure 
augmentations or string-based representations. 
The formalism is thus suitable to left-to-right 
incremental processing, because of the 
dominance-based  character  of the 
representation. We are aware that the 
formal ism is weak on the l inguistic 
competence, because it probably overgenerates 
with respect o legal sentences; however, we 
believe that the formal tools introduced 
(constraints on the u-triple satisfaction) can be 
successfully used to eliminate this problem. 
This paper has benefited from comments of 
the people at a seminar held by one of the 
authors at IRCS, UPenn, Philadelphia. 
References 
Barbero C., Lesmo L., Lombardo V., Merlo P., 
Integration of syntactic and lexical information i a 
hierarchical dependency gratmnar, this volume. 
Gazdar G., Klein E., Pullum G., Sag I., Generalized 
Phrase Structure Grammar, Basil Blackwell, 
Oxford, 1985. 
Huang X., Dealing with conjunctions in a machine- 
translation environment, Proc. of COLING 84, pp. 
243-246. 
Hudson R., English Word Granunar, Basil Blackwell, 
Oxford, 1990. 
Lombardo V., Lesmo L., Formal aspects and parsing 
issues of dependency theory, in Proc. of 
ACL/COLING 98. 
Mel'cuk I., Dependency Syntax: Theory and Practice, 
SUNY Press, Albany, 1988. 
Neuhaus P., Broker N., The Complexity of Recognition 
of Linguistically Adequate Dependency Granunars, 
Proc. ACL/EACL97, Madrid, 1997, pp.337-343. 
Ro~ J. R., Gapping and the order of constituents, in
Bierwi~h M. and Heidolph M. (eds.), Progress in 
Linguistics, Mouton, The Hague, 1970, pp. 249-259. 
Sarkar A., Joshi A.K., Handling Coordinmin in a Tree 
Adjoining Grammar, Unpublished manuscript, 
Department of Computer and Information Science, 
University of Pennsylvania, Philadelphia (PA), 
February 1997. 
Steedman M., Dependency and Coordination in the 
grammar of Dutch and English, Language 61, 1985, 
pp. 523-568. 
Steedman M., Gapping as constituent coordination, 
Linguistics and philosophy 13, 1990, pp. 207-264. 
Steedman M., Surface structure and interpretation , 
MIT Press, 1996. 
Tesniere L., Elements de syntaxe structurale, 
Klincksieck, Paris 1959 
20 
