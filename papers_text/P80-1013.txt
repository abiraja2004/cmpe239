CAPTURING L INGUIST IC  GENERAL IZAT IONS WITH METARULES 
IN AN ANNOTATED PHRASE-STRUCTURE GRAMMAR 
Kur t  Konol ige 
SRI In ternat iona l  = 
1. In t roduct ion  
Computat iona l  models employed by cur rent  natura l  language 
understanding systems rely on phrase-s t ruc ture  representat ions  
of  syntax.  Whether implemented as augmented t rans i t ion  nets, 
BNF grammars,  annotated phrase-structure grammars, or s imi lar  
methods, a phrase-structure representation makes the parsing 
problem computat lona l ly  t rac tab le  \ [7 \ ] .  However ,  
phrase-s t ruc ture  representat ions  have been open to the 
c r i t i c i sm that they do not capture l ingu is t ic  genera l i zat ions  
that  are easily expressed in t rans format iona l  grammars.  
This paper describes a formal ism for  spec i fy ing syntact ic  
and semantic genera l i zat ions  across the rules of a 
phrase-structure grammar (PSG). The formal ism consists of 
two  parts:  
1. A dec la ra t ive  descr ipt ion of basic syntact ic  
phrase-s t ruc tures  and their  associated semantic 
t rans la t ion .  
2. A set of  metaru les  for  der iv ing  addi t ional  grammar 
rules f rom the basic set. 
Since metaru les  operate on grammar rules rather  than phrase 
markers,  the t rans format iona l  e f fec t  of  metaru les  can be 
pro -computed  before  the grammar is used to analyze input,  
The computat iona l  e f f i c iency  of  a phrase-s t ruc ture  grammar is 
thus preserved,  
Metaru le  formulat ions  for PSGs have recent ly  rece ived 
increased a t tent ion  in the l inguist ics  l i te ra ture ,  especial ly in 
\ [4 \ ] ,  which great ly  in f luenced the formal ism presented in this 
paper.  Our formal ism d i f fe rs  s ign i f i cant ly  f rom \ [4 \ ]  in that  
the metaru les  work on a phrase-s t ruc ture  grammar annotated 
w i th  a rb i t ra ry  feature  sets (Annotated Phrase-s t ruc ture  
Grammar,  or APSG \ [7 \ ] ) .  Grammars for  a large subset of  
English have been wr i t ten  using this formal ism \ [9 \ ] ,  and its 
computat iona l  v iab i l i ty  has been demonstrated \ [6 \ ] .  Because of 
the increased s t ructura l  complex i ty  of APSGs over PSGs 
w i thout  annotat ions,  new techniques for  applying metaru les  to 
these s t ructures  are developed in this paper, and the not ion of  
a match between a metaru le  and a grammar rule is care fu l l y  
def ined.  The formal ism has been implemented as a computer  
program and pre l iminary  tests have been made to establish its 
va l id i ty  and e f fec t iveness .  
2. M etarules 
Metaru les  are used to capture l inguist ic  genera l i zat ions  that  
are not readi ly  expressed in the phrase-s t ruc ture  rules. 
Consider the two sentences: 
1, John gave a book to Mary 
2. Mary was given a hook by John 
A l though their  syntact ic  s t ructure  is d i f fe rent ,  these two 
sentences have many elements in common. In par t i cu la r ,  the 
pred icate /argument  s t ructure  they describe is the same: the 
g i f t  of  a book by john to Mary. T rans format iona l  grammars 
capture  this correspondence by t rans forming  the phrase marker 
=This research was supported by the Defense Advanced 
Research Projects Agency under Cont rac t  N00039-79-C-0118 
w i th  the Naval E lectron ics  Systems Command. The views and 
conclusions contained in this document are those of the author 
and should not be in terpreted  as representative of the of f i c ia l  
pol ic ies,  e i ther  expressed or impl ied,  of  the U.S. Government .  
The author is grate fu l  to Jane Robinson and Gary Hendr ix  for  
comments on an earlier dra f t  of  this paper.  
for  (1) into the phrase marker for  (2). The under ly ing 
pred icate /argument  s t ructure  remains the same, but the surface 
rea l i za t ion  changes. However ,  the recogn i t ion  of  
t rans format iona l  grammars is a very d i f f i cu l t  computat iona l  
problem.  = 
By contrast ,  metarules operate d i rec t ly  on the rules of  a 
PSG to produce more rules for  that  grammar.  As long as the 
number of der ived rules is f in i te ,  the resu l t ing  set of  rules is 
st i l l  a PSG, Unl ike t rans format iona l  grammars. PSGs have 
e f f i c ient  a lgor i thms for  parsing \ [3 \ ] .  In a sense, all of  the 
work of  t rans format ions  has been pushed o f f  into a 
pre -process ing  phase where new grammar rules are der ived.  
We are not great ly  concerned wi th  e f f i c iency  in pre-process ing,  
because it only has to be done once. 
There are st i l l  computat iona!  l im i ta t ions  on PSGs that must 
be taken into account  by any metaru le  system. Large numbers 
o f  phrase-s t ruc ture  rules can seriously degrade the 
per fo rmance  of a parser, both in terms of its running t ime == ,
storage for  the rules, and the ambigu i ty  of the resu l t ing  
parses \ [6 \ ] .  Moreover,  the generat ion of large numbers of  rules 
seems psycholog ica l ly  implaus ib le .  Thus the two c r i te r ia  we 
wi l l  use to judge the e f f i cacy  of metarules wi l l  be: can they 
adequate ly  capture l inguist ic  genera l i zat ions ,  and are they 
?omputat iona l ly  p rac t i cab le  in terms of the number of rules 
they generate. The formal ism of \ [4 \ ]  is especial ly vu lnerable  
to c r i t i c i sm on the la t te r  point,  since it  generates large 
numbers of new rules.  *== 
3. Representat ion  
An annotated phrase-structure grammar (APSG) as 
developed in \ [7 \ ]  is the target  representat ion  for  the 
metaru les .  The core component of an APSG is a set of 
context-free phrase-s t ruc ture  rules. As is customary,  these 
rules are input to a context - f ree  parser to analyze a str ing, 
produc ing a phrase-s t ruc ture  tree as output .  In addi t ion,  the 
parse tree so produced may have arb i t ra ry  feature  sets, cal led 
annotat ions,  appended to each node. The annotat ions are an 
e f f i c ient  means of  incorporat ing  addit ional  in fo rmat ion  into the 
parse t ree.  Typ ica l ly ,  features  wi l l  exist  for  syntact ic  
processing (e.g., number agreement), grammat ica l  funct ion  of 
const i tuents  (e.g., subject,  d i rect  and ind i rec t  objects) ,  and 
semantic in terpreta t ion .  
Associated wi th  each rule of the grammar are procedures 
for  operat ing  on feature  sets of the phrase markers the rule 
constructs .  These procedures may constrain the appl icat ion  of 
the rule by test ing features  on candidate const i tuents ,  or add 
in fo rmat ion  to the s t ructure  created by the rule,  based on the 
features  of  its const i tuents .  Rule procedures are wr i t ten  in 
the programming language LISP, g iv ing the grammar the power 
to recognize class 0 languages. The use of a rb i t ra ry  
procedures and feature  set annotat ions makes APSGs an 
*There  has been some success in res t r i c t ing  the power of 
t rans format iona l  grammars su f f i c ient ly  to al low a recognizer to 
be bui l t ;  see \ [8 \ ] .  
=*Shel l  \ [10 \ ]  has shown that,  for  a simple recursive descent 
parsing a lgor i thm,  running time is a l inear  funct ion  of the 
number of  rules. For other parsing schemes, the re lat ionsh ip  
between the number of rules and parsing t ime is unc lear .  
='~SThis is w i thout  consider ing in f in i te  schemas such as the 
one for  con iunct ion  reduct ion .  Basical ly,  the problem is that 
the formal ism of \ [4 \ ]  al lows complex features \[21 to def ine 
new categor ies,  generat ing an exponential number of categor ies  
(and hence rules) w i th  respect to the number of features .  
4.3 
extremely  power fu l  and compact fo r -a l i sm for represent ing a 
language, s imi lar  to the ear l ier  ATN formal isms \ [1 \ ] .  An 
example of how an APSG can encode a large subset of English 
is the DIAGRAM grammar \ [9 \ ] .  
It is un for tunate ly  the very power .of APSGs (and ATNs) 
that  makes it  d i f f i cu l t  to capture l inguist ic  general izat ions 
wi th in  these formal isms. Metarules for t ransforming one 
annotated phrase-st ructure  rule into another must not only 
t ransform the phrase-s t ructure ,  but also the procedures that 
operate on feature sets, in an appropr iate way. Because the 
t rans format ion  of  procedures is notor ious ly  d i f f i cu l t , *  one of 
the tasks of this paper wi l l  be to i l lus t rate  a dec larat ive  
notat ion describing operations on feature sets that is powerfu l  
enough to encode the manipulat ions of features necessary for  
the grammar, but is st i l l  simple enough for  metarulos to 
t ransform.  
4.  Notat ion 
Every rule of  the APSG has three parts:  
1. A phrase-s t ructure  rule; 
2. A res t r i c t ion  set (RSET) that restr icts  the 
app l i cab i l i ty  of  the rule, and 
3. An assignment set (ASET) that assigns values to 
features.  
The RSET and ASET manipulate features of the phrase marker 
analyzed by the rule; they are discussed below in detai l .  
Phrase-s t ructure  rules are wr i t ten  as: 
CAT -> C 1 C 2 ... Cn 
where CAT is the dominat ing category of the phrase, and C 1 
through C n are its immediate const i tuent  categor ies.  Terminal  
str ings can be included in the rule by enclosing them in double 
quote marks. 
A feature set is associated with each node in the parse t ree  
that  is created when z str ing is analyzed by the grammar.  
Each feature  has a name (a str ing of uppercase alphanumeric 
characters)  and an associated value. The values a feature  can 
take on (the domain of the feature)  are, in general,  a rb i t ra ry .  
One of  the most useful domains is the set "?, - ,N IL" ,  where 
N i l  is the unmarked case; this domain corresponds ~ to the 
binary features  used in \ [2 ) .  More compl icated domains can be 
used; for  example, a CASE feature  might have as its domain the 
set of tuplos ~<1 SG>,<2 SG>,c3 SG>,<I PL>,<2 PL>,<3 PL>'~. 
Most interest ing are those features whose domain is a phrase 
marker .  Since phrase markers are just data structures that the 
parser creates, they can be assigned as the value of a feature .  
This technique is used to pass phrase markers to various parts 
of the tree to re f lec t  the gr;llmmatical and semantic s t ructure 
of  the input; examples wi l l  be given in later sections. 
We adopt the fo l low ing  conventions in re fe r r ing  to features 
and their  values: 
- Features are one-p lace funct ions that range over 
phrase markers constructed by the phrase-s t ructure  
part  of a grammar rule.  The funct ion  is named by 
the feature name. 
- These funct ions are represented in pre f ix  form, e.g., 
(CASE NP) refers to the CASE feature of the NP 
const i tuent  of a phrase marker .  In cases where 
there is more than one const i tuent  wi th the same 
category name, they wi l l  be d i f fe rent ia ted  by a "~/" 
su f f i x ,  for  example, 
VP -> V NP?I NP~2 
* i t  is sometimes hard to even understand what i t  is that a 
procedure does, since it may involve recursion, s ide-e f fects ,  
and other compl icat ions.  
has two NP const i tuents.  
-A  phrase marker is assumed to have its immediate 
const i tuents  as features under their  category name, 
e . | . ,  (N NP) refers to the N const i tuent  of the NP. 
- Feature funct ions may be nested, e.g., 
(CASE (N NP)) refers tO the CASE feature of  the N 
const i tuent  of  the NP phrase marker .  For these 
nestings, we adopt the simpler notat ion 
(CASE N NP), which is assumed to be 
r ight -assoc ia t ive .  
-The  value N IL  always implies the unmarked case. 
At times it wi l l  be useful to consider features that 
are not exp l i c i t l y  attached to a phrase marker as 
being present wi th value NIL .  
-A  constant term wi l l  be wr i t ten  with a preceding 
single quote mark, e.s. , tSG refers to the constant 
token SG. 
4.1. Restr ict ions 
The RSET of a rule restr ic ts  the app l i cab i l i ty  of the rule by 
a predicat ion on the features of its const i tuents .  The phrase 
markers used as const i tuents must sat is fy the predicat ions in 
the RSET before they wi l l  he analyzed by the rule to create a 
new phrase marker .  The most useful predicate is equal i ty :  a 
feature  can take on only one par t i cu la r  value to be acceptable.  
For example, in the phrase structure rule:  
S -> NP VP 
number agreement could be enforced by the pred icat ion :  
(NBR NP) - {NBR VP) 
where NBR is a feature whose domain is SG,PL~.*  This would 
res t r i c t  the NBR feature on NP to agree with that  on VP 
before the S phrase was constructed.  The economy of  the 
APSG encoding is seen here: only a single phrase-s t ruc ture  ru le  
is required.  Also, the l inguist ic  requ i rement  that  subjects and 
their  verbs agree in number is enforced by a single statement ,  
rather  than being impl ic i t  in separate phrase structure rules, 
one for  singular sub ject -verb  combinations,  another for  plurals.  
Besides equal i ty ,  there are only three addit ional  
pred icat ions:  inequal i ty  (#), set membership (e) and set 
non-membership  (It). The last two  are useful in deal ing with 
non-b inary  domains. As discussed in the next section, t ight  
rest r ic t ions  on predicat ions are necessary i f  metarules are to 
be successful in t ransforming grammar rules. Whether these 
four predicates are adequate in descr ipt ive power for  the 
grammar we contemplate  remains an open empir ica l  question; 
we are cur rent ly  accumulat ing evidence for  their  su f f i c iency  by 
rewr i t ing  DIAGRAM using just those predicates.  
Rest r ic t ion  predicat ions for  a rule are co l lected in the 
RSET of  that  rule.  All  restr ic t ions must hold for the rule to 
be appl icable.  As an i l lust rat ion ,  consider the 
subcategor izat lon  rule for  d l t rans i t lve  verbs wi th  preposi t ional  
objects (e.g.. eJohn gave a book to Mary" ) :  
VP -> V NP PP 
RSET: (TRANS V) = ~DI; 
(PREP V)  : (PREP PP) 
The f i rs t  res t r i c t ion  selects only verbs that are marked as 
d l t rans i t ive ;  the TRANS feature comes f rom the lexical  entry 
of  the verb. D l t rans i t i v  verbs wi th prepos i t ional  arguments 
are always subcategor ized cy the par t i cu lar  preposit ion used, 
e.g., "give a always uses I re"  for  its preposit ional  argument.  
*How NP and VP categories could " inher i t "  the NBR feature 
f rom the i r  N and V const i tuents is discussed in the next  
section. 
44 
The second pred icat ion  res t r i c ts  the prepos i t ion of  the PP for  a 
given verb.  The PREP feature  of  the verb comes f rom its 
lex ica l  entry,  and must match the prepos i t ion of  the PP phrase* 
4.2. Assignments 
A rule wi l l  normal ly  assign features  to the dominat ing  node 
o f  the phrase marker it constructs ,  based on the values of  the 
const i tuents  f features .  For example,  feature  inher i tance  takes 
place in this way. Assume there is a feature  NBR mark ing the 
syntact ic  number of nouns. Then the ASET of  a rule for  noun 
phrases might be: 
NP -> DET N 
ASET:  (NBR NP) := (NBR N) 
This notat ion  is somewhat non-s tandard;  i t  says that  the value 
of  the NBR funct ion  on the NP phrase marker is to be the 
value of  the NBR funct ion  of  the N phrase marker .  
An in terest ing  appl icat ion  of  feature  assignment is to 
descr ibe the grammat ica l  funct ions of noun phrases w i th in  a 
clause. Recal l  that  the domain of  features  can be const i tuents  
themselves.  Adding an ASET descr ib ing the grammat ica l  
funct ion  of  its const i tuents  to the d i t rans i t i ve  VP rule yields 
the fo l low ing :  
VP -> V NP PP 
ASET: (D IROBJ  VP) := (NP VP);  
( INDOBJ  VP) := (NP PP). 
This ASET assigns the DIROBJ (d i rec t  ob ject )  feature  of  VP 
the value of the const i tuent  NP. Slmilarly~ the value of  
INDOBJ ( ind i rec t  ob ject )  is the NP const i tuent  of  the PP 
phrase. 
A rule may also assign feature  values to the const i tuents  of  
the phrase marker i t  constructs .  Such assignments are context  
sensitive, because the values are based on the context  in which 
the const i tuent  Occurs.*"  Again,  the most in teres t ing  use of 
this technique is in assigning funct iona l  roles to const i tuents  in 
par t i cu la r  phrases. Consider a rule for  main clauses: 
S -> NP VP 
ASET: (SUBJ VP) := (NP S), 
The three features  SUBJ, DIROBJ ,  and INDOBJ of  the VP 
phrase marker  wi l l  have as value the appropr iate  NP phrase 
markers,  since the DIROBJ and INDOBJ features  wi l l  be 
assigned to the VP phrase marker when it  is const ructed .  Thus 
the grammat ica l  funct ion  of  the NPs has been ident i f ied  by 
assigning features  appropr ia te ly .  
F ina l ly ,  note that  the grammat ica l  Functions were assigned 
to the VP phrase marker .  By assembling all o f  the arguments 
at this level ,  i t  is possible to account  for  bounded de let ion 
phenomenon that  are lex ica l ly  cont ro l led .  Consider 
subcategor i za t ion  for  Equi verbs, in which the subject of  the 
main clause has been deleted f rom the in f in i t i ve  complement  
(" John wants to gem): 
=Note that  we are not consider ing here prepos i t iona l  phrases 
that  are essent ia l ly  mesa-arguments  to the verb, deal ing wi th  
t ime, place, and the l ike. The preposi t ions used for  
mesa-arguments  are much more var iab le ,  and usual ly depend on 
semantic considerations. 
"*The  assignment of features to const i tuents  presents some 
computat iona l  problems, since a context - f ree  parser wi l l  no 
longer be su f f i c ient  to analyze str ings.  This was recognized in 
the or ig inal  version of  APSGs \ [7 \ ] ,  and a two-pass parser was 
constructed that f i r s t  uses the context - f ree  component of  the 
grammar to produce an in i t ia l  parse tree, then adds the 
assignment of features  in context .  
VP -> V INF 
ASET:  (SUBJ INF)  := (SUBJ 'VP)  
Here the subject NP of the main clause has been passed down 
to the VP (by the S ru le) ,  which in turn passes i t  to the 
in f in i t i ve  as its subject .  Not  all l inguist ic  phenomenon can be 
fo rmulated  so easi ly w i th  APSGs; in par t i cu la r ,  APSGs have 
t rouble  descr ib ing unbounded de let ion and con junct ion  
reduct ion .  Metaru le  fo rmulat ions  for the l a t te r  phenomena 
have been proposed in \ [5 \ ] ,  and we wi l l  not deal w i th  them 
here. 
5. Metaru les  for  APSGs 
Metaru les  consist of  two  parts:  a match template  wi th 
var iables  whose purpose is to match ex ist ing grammar rules; 
and an ins tant ia t lon  template  that  produces a new grammar 
rule by using the match template~s var iab le  bindings a f te r  a 
successful  match.  In i t ia l l y ,  a basic set of  grammar rules is 
input;  metarules der ive new rules, which then can recursively 
be used as input to the metaru les .  When ( i f )  the process halts,  
the new set of rules, together  with the basic rules, comprises 
the grammar.  
We wi l l  use the fo l low ing  notat ion  for  metaru les :  
MF => IF 
CSET: C1, C2, . .  Cn 
where MF is a _matchln| form, IF is an ins tant ia t ion  form, and 
CSET is a set of pred icat ions .  Both the MF and IF have the 
same fo rm as grammar rules, but in addi t ion,  they can conta in  
var iab les .  When an MF is matched against a grammar rule,  
these var iables are bound to d i f fe rent  parts of the rule i f  the 
match succeeds. The IF is ins tant la ted  wi th  these bindings to 
produce a new ru le .  To res t r i c t  the app l icat ion  of  metarules,  
addi t iona l  condit ions on the var iab le  bindings may be speci f ied 
(CSET);  these have the same form as the RSET of  grammar 
rules,  hut they can ment ion the var iables matched by the MF. 
Metaru les  may be c lassi f ied into three types: 
I .  In t roductory  metarules,  where the MF is empty 
(=> IF) .  These metarules in t roduce  a class of  
grammar rules.  
2. De let ion metarules,  where the IF is empty 
(MF =>). These delete any der ived grammar rules 
that  they match.  
3. Der ivat ion  metarules,  where both MF and IF are 
present .  These der ive new grammar rules from old 
ones. 
There are l ingu is t ic  genera l i zat ions  that  can he captured most 
perspicuously  by each of  the three forms. We wi l l  focus on 
der ivat ion  metarules here, since they are the most compl icated .  
6. Matching 
An impor tant  part  of  the der ivat ion  process is the de f in i t ion  
o f  a match between a metaru le  matching form and a grammar 
ru le .  The matching problem is compl icated by the presence of 
RSET and ASET pred icat ions  in the grammar rules.  Thus, i t  is 
he lp fu l  to def ine a match in terms of the phrase markers that  
wi l l  be admit ted  by the grammar rule and the MF. We wi l l  say 
that  an MF matches a grammar rule just  in case i t  admits at 
least those phrase markers admit ted  by the grammar ru le.  This 
de f in i t ion  of  a match is su f f i c ient  to a l low the fo rmula t ion  of 
match ing a lgor i thms for  grammar rules compl icated by 
annotat ions.  
We div ide the matching process into two parts:  match ing 
phrase-s t ruc tures ,  and matching feature  sets. Both parts must 
succeed in order  for  the match to succeed. 
45 
6.1. Matching Phrase-st ructures  
For phrase-structures,  the de f in i t ion  of  i match can be 
replaced by a d i rect  comparison of  the phrase-s t ructures  of the 
MF and grammar rule.  Var iables in the MF phrase-s t ructure  
are used to indicate Ido f l l t  care a parts of the grammar rule 
phrase-s t ructure ,  while constants must match exact ly .  S In| le  
lower  case letters are used for  variables that  must match 
single categories of the grammar rule.  A typ ica l  MF might be: 
S ->.a  VP 
which matches 
S -> NP VP with a=NP; 
S -> SB VP with IBSB; 
S -> ' IT '  VP with a J ' I T ' ;  
etC. 
A var iable that appears more than once in an MF must have the 
same binding for  each occurrence for a match to be successful, 
e.$., 
VP -> V a a 
matches 
VP -> V NP NP wi th  a=NP 
but  not 
VP -> V NP PP 
Single le t ter  variables must match a single category in a 
grammar rule.  Double le t ter  var iables are used to match a 
number of consecut ive Cat l lo r i l s  ( inc luding none) fR the rule.  
We have: 
VP -> V uu 
matching 
VP -> V with UUm(); 
VP -> V NP with uu"(NP) ;  
VP -> V NP PP wi th  uuu(NP PP); 
etc.  
Note that double le t ter  var iables are bound to an ordered list 
o f  elements fTom ~he matched rule.  Because of this 
character i s t i c ,  a~ MF with more th in  one double le t ter  var iable 
may match t rule in several d i f fe rent  ways: 
VP -> V uu vv 
matches 
VP -> V NP PP wi th  uu ' ( ) ,  vvs (NP Pp); 
uu=(N P), vvm(PP ); 
uum(NP VP),  vv - ( ) .  
Al l  of these are considered to be val id,  independent matches. 
Double and single le t ter  variables may be in termixed f ree ly  in 
an MF. 
While double le t ter  variables match mult ip le  categories In l 
phrase structure rule,  str ing variables match parts of  a 
category.  Str ing variables occur in both double and single 
le t te r  var iet ies;  as expected,  the former  match any number of 
consecut ive characters,  whi le the l i t te r  match s ln| le  
characters .  Str ing variables are assumed when an MF category 
contains i mixture  of  upper and lower case characters,  e.g.: 
Vt -> V NP~la NPuu 
matches 
VP -> V NP~I NP with a=1, uu=(); 
VP -> V NP/~I NP~2 with aa l ,  uu=(# 2); 
etc.  
Str ing var iables are most useful for  matching category names 
that  may use the ~ convent ion.  
6.2. Feature Matching 
So far  var iables have matched only the phrase-s t ructure  
part  of  grammar rules, and not the feature  annotat ions.  For 
feature  matching,  we must return  to the or iginal  de f in i t ion  of 
matching based on the admiss ib i l i ty  of  phrase markers.  The 
RSET of  a grammar rule is a closed formula  invo lv lng the 
feature  sees of the phrase marker constructed by the rule; let 
P stand for  this fo rmula .  I f  P is true for  a given phrase 
marker ,  then that  phrase marker is accepted by the rule; i f  
not,  It ts re jected.  S imi lar ly ,  the RSET of  a matching form is 
an open formula on the feature  sets of the phrase marker;  let 
R (x l ,x2 . . .Xn)  stand for  this formula,  where the x I are the 
var iables of the RSET. For the MF;s rest r ic t ions  to match 
those of the grammar rule,  we must be able to prove the 
formula :  
P => tea 1) (EX2)_ . (EXn)  R(x l ,x2 , - .Xn)  
That  Is. whenever  P admits a phrase marker,  there exists some 
b lnd in |  for  R0s free variables that  also admits the phrase 
marker .  
Now the importance of res t r i c t ing  the form of P and R can 
be seen. Proving that the above impl icat ion  holds for general P 
and R can be a hard problem, requi r ing,  for  example,  a 
reso lut ion theorem prover .  By res t r i c t ing  P and R to simple 
conjunct ions of  equal i t ies,  inequal i t ies,  and set membership 
predicates,  the match between P and R can be per formed by a 
simple and e f f i c ient  a lgor i thm.  
6.3. Instanttat ion 
When a matarule matches a grammar rule,  the CSET of the 
metaru ia  Is evaluated to see i f  the metaruie can indeed be 
appl ied.  For example, the MF: 
VP -> "BE"  xP 
CSET: x ~t 'V 
wi l l  match any rule for  which x is not bound to V. 
When an MF matches a rule, and the CSET is sat is f ied,  the 
Instant lat lon  form of the metaru le  is used to produce i new 
ru le.  TN~ variables of  the IF are instant iated with their  values 
f rom the match, producing I new rule.  In addit ion,  res t r i c t ion  
and assignment features that  do not conf l i c t  w i th  the IF 's  
features  are carr ied over f rom the rule that matched.  This 
la t te r  is a very handy property  of the instanttat ion,  since that 
is usually what the metarule wr i te r  desires. Consider 
metaru le  that derives the sub ject -aux  inverted form of a main 
clause wi th  a f in i te  verb phrase: 
grammar rule:  S -> NP AUX VP 
RSET: (NBR NP) = (NBR AUX) ;  
(F IN  VP) = i+; 
metaru le :  S -> NP AUX VP 
S~N>-> AUX NP VP 
i f  features were not carr ied over during an ins tan . ia t ion ,  the 
result  of  matching and Instant lat ing the metarule would be: 
SAI -> AUX NP VP 
This does not preserve number agreement,  nor does it  res t r i c t  
the VP to being f in i te .  Of course, the metarule could be 
rewr i t ten  to have the cor rect  rest r ic t ions  in the IF, but this 
would sharply curb the u t i l i ty  of the metarules,  and lead to the 
pro l i fe ra t ion  of metaruies wi th s l ight ly d i f fe rent  RSETs. 
46 
7. An Example: Dative Movement and Passive 
We are now ready to give a short example of two met,rules 
for dative movement and passive transformations. The 
predicate/argument structure will be described by the feature 
PA, whose value is a list: 
(V NP 1 Np 2 ...) 
where V is the predicating verb, and the NPs are its 
arguments. The order of the arguments is significant, since: 
("gave" "John" "a book" "Mary")  
<=> gift of a book by John to Mary 
'gave" "John' "Mary m "a book')  
<=> ?? gift  of Mary to a hook by John 
Adding the PA feature, the rule for ditranslt lve verbs with 
prepositional objects becomes: 
VP -> V NP PP 
RSET: (TRANS V) = IDI; 
(PREP V) = (PREP PP); 
ASET: (PA VP) := ' ((V VP) (SUBJ VP)(NP VP)(NP PP)) 
The SUBJ feature is the subject NP passed down by the S rule. 
7.1. Dative Movement 
In dative movement, the prepositional NP becomes a noun 
phrase next to the verb: 
1. John gave a book to Mary => 
2. John gave Mary a book 
The f irst object NP of (2) f i l ls the same argument role as the 
prepositional NP of (1). Thus the dative movement met,rule 
can be formulated as fol lows: 
met.rule DATMOVE 
VP -> V uu PP 
ASET: (PA VP) := '( a b c (NP PP)) 
=> VP -> V NP#D uu 
RSET: (DATIVE V) = t+; 
(PREP V) : NIL; 
ASET: (PA VP) := ' (ab  c (NP#D VP)) 
DATMOVE accepts VPs with a trail ing prepositional argument, 
and moves the NP from that argument to just after the verb. 
The verb must be marked as accepting dative arguments, hence 
the DATIVE feature restr ict ion in the RSET of the 
instantlation form. Also, since there is no longer a 
prepositional argument, the PREP feature of the VP doesn't 
have to match it. As for the predicate/argument structure, the 
NP#D constituent takes the place of the prepositional NP in 
the PA feature. 
DATMOVE can be applied to the dltranslt lve VP rule to 
yield the dltransitive dative construction. The variable 
bindings are: 
uu = (NP); 
a : (v vP) 
b : (SUBJ vp);  
c : (NP VP}. 
Instantlating the IF then gives the dative construction: 
VP -> V NP#D NP 
RSET: (DATMOVE V) = r+; 
(TRANS V) = 'Dis 
ASET: (PA VP) := 
' ( (  V VP) (SUBJ VP) (NP VP) (Np~ID VP)) 
There are other grammar rules that dative movement wil l  apply 
47 
to, for example, verbs with separable particles: 
Make up a story for me => Make me up a story. 
This is the reason the double- letter variable "uu'  was used in 
DATMOVE. As long as the final constituent of a VP rule is a 
PP, DATMOVE can apply to yield a dative construction. 
7.2. Passive 
In the passive transformation, the NP immediately fol lowing 
the verb is moved to subject position; the original subject 
moves to an age.r ive BY-phrase: 
(1) John gave a book to Mary => 
(2) A book was given to Mary by John. 
A metarule for the passive transformation is: 
met.rule PASSIVE 
VP -> V NPuu vv 
ASET: (PA VP) : :  ~(a (SUBJ VP) bb (NPuu VP) cc); 
=> AP -> V PPL vv PP#A 
RSET: (PREP PP#A) = ~BY; 
ASET: (PA VP) : :  '(a (NP PP#A) bb (SUBJ VP) cc). 
PASSIVE deletes the NP immediately fol lowing the verb, and 
adds a BY-prepositional phrase at the end. PPL is a past 
participle suff ix for the verb. In the predicate/argum=nt 
structure, the BY-phrase NP substitutes for the original 
subject, while the new subject is used in place of the original 
object NP. Applying PASSIVE to the ditransittve rule yields: 
AP -> V PPL PP PP#A 
RSET: (TRANS V) = 'DIs 
(PREP V) = (PREP PP); 
ASET: (PA VP) := 
' ( (V  VP) (NP PP#A) (SUBJ VP) (NP PP)); 
e.g.. "A book was given to Mary by John" wil l  be analyzed by 
this rule to have a PA feature of ("givea mJohn~ na 
book" "Mary") ,  which is the same predicate/argument structure 
as the corresponding active sentence. 
PASSIVE can also apply to the rule generated by DATMOVE 
to yield the passive form of VpIs with dative objects: 
AP -> V PPL NP PP#A 
RSET: (DATMOVE V) = f+; 
(TRANS V) = 'DIs 
ASET: (PA VP) := 
' ( (V  VP) (NP PP#A) {NP VP) (SUBJ VP)); 
e.g., "Mary was given a book by John". 
8. Implementation 
A system has been designed and implemented to test the 
val idity of this approach. It consists of a matcher/ instant iator 
for  met,rules, along with an iteration loop that applies all the 
met.rules on each cycle until no more new rules are generated. 
Met.rules fur verb subcategorization and finite and non-f inite 
clause structures have been written and input to the system. 
We were especially concerned: 
- To check the perspicuity of metarules for describing 
signif icant fragments of English using the above 
representation for grammar rules. 
- To check that a reasonably small number of new 
grammar rules were generated by the metarules for 
these fragments. 
Both of these considerations are cr it ical  for the performance 
of natural language processing systems. Preliminary tests 
indicate that the system satisfies both these concerns; indeed, 
the metarules worked so well that they exposed gaps in a 
phrase-structure grammar that was painstakingly developed 
over a f ive year period and was thought to be reasonably 
complete for a large subset of English 19\]. The number of 
derived rules generated was encouragingly small: 
Subcategorizatlon: 
1 grammar rule 
7 metaru les  -> 20 derived rules 
Clauses: 
8 grammar rules 
5 metarules => 25 derived rules 
9. Conclusions 
Metarules, when adapted to work on an APSG 
representation, are a very powerful tool for specifying 
generalizations in the grammar. A great deal of care must be 
exercised in  writing metarutes, because it is easy to state 
generalizations that do not actually hold. Also, the output of 
metarutes can be used again aS input to the metarules, and this 
often produces surprising results. Of course, language is 
complex, and it is to be expected that describing Its 
generalizations wil l  also be a di f f icult  task. 
The success of the metarule formulation in deriving a small 
number of new rules comes in part from the Increased 
definitional power of APSGs over ordinary PSGs. For example, 
number agreement and feature inheritance can be expressed 
simply by appropriate annotations in an APSG, but require 
metarules on PSGs. The definitional compactness of APSGs 
means that fewer metarules are needed, and hence fewer 
derived rules are generated. 
3. 
4. 
5. 
6. 
7. 
8, 
9. 
10. 
REFERENCES 
W. Woods, 'An Experimental Parsing System for Transition 
Network Grammars, ~ R. Rustin (ed.), Natural Lan~uase 
Processins, Prentice-Hall,  Englewood Cliffs, New Jersey, 
1973. 
N. Chomsky. Aspects o f  the Theory o f  5.,yntax, MIT Press, 
Cambridge, Mass., 1965. 
J. Early, "An Eff ic ient Context Free Parsing Algorithm," 
CAC_M, Vol. 13 (1970) 94-I02. 
Gerald Gazdar, 'English as a Context-Free Language" 
University of Sussex, (unpublished paper, April, 1979). 
Gerald Gazdar, "Unbounded Dependencies and Coordinate 
Structure'  University of Sussex, (submitted to 
Inquiry, October, 1979). 
Kurt Konollge, 'A Framework for a Portable NL Interface 
to Large Data Bases, m Technical Note 197, Art i f ic ia l  
Intelligence Center, SRI International, Menlo Park, 
California (October 1979). 
William H. Paxton, 'A Framework for Speech 
Understanding,' Technical Note 142, Art i f ic ia l  Intelligence 
Center, $RI international, Menlo Park, California (June 
1977}. 
S.R.  Petrtck, 'Automatic Syntactic and Semantic 
Analysis, e Proceedln|s of the Interdisciplinary Conference 
on Automated Text Processing, {November 1976). 
Jane Robinson, 'DIAGRAM: A Grammar for Dialogues.' 
Technical Note 20$, Art i f ic ia l  Intelligence Center, SRI 
International, Menlo Park, California {February 1980). 
B.A.  Shell, 'Observations on Context-Free Parsing,' 
Statistical Methods in Linl|uistics, (1976). 
48 
