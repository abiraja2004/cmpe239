Coordination in Tree Adjoining Grammars: 
Formalization and Implementation* 
Anoop Sarkar and Aravind Joshi 
Department of Computer and Information Science 
University of Pennsylvania 
Philadelphia, PA 19104 
{ anoop, j oshi }Olinc. cis. upenn, edu 
Abst rac t  
In this paper we show that an account 
for coordination can be constructed us- 
ing the derivation structures in a lexical- 
ized Tree Adjoining Grammar (LTAG). 
We present a notion of derivation in 
LTAGs that preserves the notion of 
fixed constituency in the LTAG lexicon 
while providing the flexibility needed 
for coordination phenomena. We also 
discuss the construction of a practi- 
cal parser for LTAGs that can han- 
dle coordination including cases of non- 
constituent coordination. 
1 Introduction 
LexicMized Tree Adjoining Grammars (LTAG) 
and Combinatory Categorial Grammar (CCG) 
(Steedman, 1997) are known to be weakly equiv- 
alent but not strongly equivalent. Coordination 
schema have a natural description in CCG, while 
these schema have no natural equivalent in a stan- 
dard LTAG. 
In (Joshi and Schabes, 1991) it was shown that 
in principle it is possible to construct a CCG- 
like account for coordination in the framework of 
LTAGs, but there was no clear notion of what the 
derivation structure would look like. In this pa- 
per, continuing the work of (Joshi and Schabes, 
1991), we show that an account for coordination 
can be constructed using the derivation structures 
in an LTAG. 
Using the notions given in this paper we also 
discuss the construction of practical parser for 
LTAGs that can handle coordination including 
cases of non-constituent coordination. This ap- 
proach has been implemented in the XTAG sys- 
tem (XTAG Research Group, 1995) thus extend- 
*This work is partially supported by NSF grant 
NSF-STC SBR 8920230. ARPA grant N00014-94 and 
ARO grant DAAH04-94-G0426. We want to thank 
Nobo Komagata, Seth Kulick, Jong Park, James 
Rogers, B. Srinivas, Mark Steedman, and two anony- 
mous reviewers for their valuable comments. 
ing it to handle coordination. This is the first 
full implementation of coordination in the LTAG 
framework. 
2 LTAG 
An LTAG is a set of trees (elementary lrees) which 
have at least one terminal symbol on its frontier 
called the anchor. Each node in the tree has a 
unique address obtained by applying a Gorn tree 
addressing scheme, shown in the tree ol(cooked) 
(Fig. 1). qYees can be rewritten using snbstitn- 
tion and adjunction. A history of these operations 
on elementary trees in the form of a derivation 
tree can be used to reconstruct the derivation of a 
string recognized by a LTAG. In Fig. 1, the tree 
fl(dried) adjoins into ~(beans) and trees ~(John) 
and a(beans) substitutes into a(cooked) to give a 
derivation tree for John cooked ried beans. Each 
node in the derivation tree is the name of an ele- 
mentary tree. The labels on the edges denote the 
address in the parent node where a substitution 
or adjunction has occured. 
TAG G: a (cooked) o~ (J{}hn) o~(beans) fi (dried) 
o S NP NP 
ADJ N* 1 P I 
.I I P~ John beans dried 
cfx)kc(I / /2~ 
NP ~P a(c00ked) \] / ~  
V NP 
I / / /~  '2 j t ,hnc /mked~ 
a(John) a(beans) 
I I ADJ ~q 
\[~(dried) I dried beans 
Derivatit,n Tree Derived Tree 
Figure 1: Example of an LTAG and an LTAG 
derivation 
3 Trees as S t ruc tured  Categor ies  
In (Joshi and Schabes, 1991) elementary trees as 
well as derived trees in an LTAG were considered 
as structured categories defined as a 3-tuple of an 
elementary or derived tree, the string it spanned 
610 
and the fnnctional type of the tree, e.g (cq, ll, Vl) 
in Fig. 2. Functional types for trees could be 
thought of us defining un-Curried flmctions co l  
rcsponding to the Curried CCG counterpart. A 
fimctional type was given to sequences of lexical 
items in trees even when they were not contiguous; 
i.e. discontinuous constituents were also assigned 
types. They were, however, barred from coordi- 
nating. 
Ol S 
NP~ VP  
V NP  
L I 
eats cook ies  
11 eats cook ies  
"~1 NP  --'~" S 
Figure 2: Structured Category for cats cookies 
Coordination of two structured categories 
cq,a2 succeeded if tile lexieai strings of both 
categories were contiguous, the functional types 
were identical, and the least nodes dominating tile 
strings spanned by the component tree have the 
same label. For example, in Fig. 3 the tree corre- 
sponding to eats cookies and drinks beer would be 
obtained by: 
\]. equating the NP nodes I in cq and t72, pre- 
serving the linear precedence of the argu- 
ments. 
2. coordinating the VP nodes, which are the 
least nodes dominating tile two contiguous 
strings. 
3. collapsing the supertrees above the VP node. 
4. selecting the leftmost NP as the lexical site 
for the argument, since precedence with the 
verb is maintained by this choice. 
o l  vP  o2  s NP~VAL 
V NP V NP ~ and 
I 1 : eals c(~)kies 12: d lil|~; beer eals ?l)okiea drinks I:ccr 
1:1 : NP ~ S 't2: NP ~ ,'q I: cats co~lkics altd drinks beer 
I :NP ----:~" S 
Figure 3: Coordination of eats cookies and drinks 
beer 
The process of coordination built a new de- 
rived structure given previously built pieces of 
1This notion of sharing should not be confilscd 
with a deletion type an;dysis of coordination. The 
scheme presented in (Joshi attd Schabes, 1991) as well 
~*s the analysis presented in this paper are not deletion 
analyses. 
derived structure (or perhaps elementary struc- 
tures). There is no clear notion of a derivation 
structure for this process. 
4 Coord inat ion  in TAG 
An account for coordination in a standard LTAG 
cannot be given without introducing a notion of 
sharing of arguments in tile two lexically anchored 
trees because of the not;ion of localily of argurnents 
in I?FAG. In (1) for instance, the NP the beans in 
I;he "right node raising" construction has to bc 
shared by the two eleinentary trees (anchored by 
cooked and ate respectively). 
(l) (((Harry cooked) and (Mary ate)) the 
beans) 
We introduce a notation that will enable us to 
talk about this more formally. In Fi R. 1 the no- 
tation ~ denotes that a node is a non-terminal 
and hence expects a substitution operation to oc~ 
cur. The notation , marks tile foot node of an 
auxiliary tree. Making this explicit we c~m view 
an elementary tree as a ordered pair of the tree 
structure ~n(l a ordered set 2 of such nodes fi'om 
its frontier 3, e.g. the tree for cooked will be rep- 
resented ~s (~(cooked), {\],2.2}}. Note that this 
representation is not required by the LTAG for- 
malism. The second projection of this ordered 
pair is used here for ease of explication. Let the 
second projection of the pair minus the foot nodes 
be (;he substitution set. We will occasionally use 
the first projection of the elementary tree to refer 
to the ordered pair. 
Setting up Contractions. We introduce an op- 
eration called build-contraction that takes an ele- 
mentary tree, places a subset from its second pro- 
jection into a contraction set and assigns the dif- 
ference of the set in the second projection of the 
original elementary trec and the contraction set to 
the second projection of the new elementary tree. 
The contents of the contraction set of a tree can be 
inferred from the contents of the set in the second 
projection of the elementary tree. Hence, while 
we refer to the contraction set of an elementary 
tree, it does not have to bc stored along with its 
representation. 
Fig. 4 gives some examples; each node in the 
contraction set is circled in the figure. In the tree 
(a(cooked), {1,2.2}) application of the operation 
on the NP node at address 2.2 gives us a tree with 
the contraction set {2.2}. The new tree is de- 
noted by {a(eookcd){u.2}, {1}), or o~(cooked)D.2 } 
for short. Placing the NP nodes at addresses 1 
and 2.2 of the tree a(cooked) into the contraction 
set gives us a(cooked)tl,2~ ). 
2'Fhc ordering is given by the fact that the elements 
of the set ~re Gorn ~tddresses. 
3We sh~ll assume there are no adjunction con- 
straints in this paper. 
611 
a(eooked) S a(cexlked) S I~Jj-.... I~ . .  
sP~ vp ~ w 
I I 
cooked c(mkcd 
Figure 4: Building contraction sets 
We assume ~hat the anchor cannot be involved 
in a build-contraction. This assumption needs 
to be revised when gapping is considered in this 
framework (?5). 
The Coordination Schema. We use the stan- 
dard notion of coordination shown in Fig. 5 which 
maps two constituents of like type, but with differ- 
ent interpretations, into a constituent of the same 
type 4. 
X Cnlq X 
Figure 5: Coordination schema 
We add a new rewriting operation to the LTAG 
formalism called conjoin 5. While substitution and 
adjunction take two trees to give a derived tree, 
conjoin takes three trees and composes them to 
give a derived tree. One of the trees is always the 
tree obtained by specializing the schema in Fig. 5 
for a particular category 6.
Informally, the conjoin operation works as fol- 
lows: The two trees being coordinated are sub- 
stituted into the conjunction tree. This no- 
tion of substitution differs from the traditional 
LTAG substitution operation in the following 
way: In LTAG substitution, always the root 
node of the tree being substituted is identified 
with the substitution site. In the conjoin op- 
eration however, the node substituting into the 
conjunction tree is given by an algorithm, which 
we shall call FindRoot that takes into account 
the contraction sets of the two trees. Find- 
Root returns the lowest node that dominates all 
nodes in the substitution set of the elementary 
tree 7, e.g. FindRoot(a(cooked){2.2}) will re- 
turn the root node, i.e. corresponding to the S 
4In this paper, we do not consider coordination of 
unlike categories, e.g. Pat is a Republican and proud 
of it. (Sarkar and Joshi, 1996) discusses uch cases, 
following Jorgensen and Abeill6 (1992). 
SLater we will discuss an alternative which replaces 
this operation by the traditional operations of substi- 
tution and adjunction. 
6The tree obtained will be a lexicalized tree, with 
the lexical anchor as the conjunction: and, but, etc. 
7This ensures the node picked by FindRoot always 
dominates a contiguous tring in a derivation. This 
captures the string contiguity condition that was used 
conj S instantiation of the coordination schema. 
FindRoot(c~(eooked){1,2.2}) will return node ad- 
dress 2.1, corresponding to the V conj Vinstanti- 
ation. 
The conjoin operation then creates a contrac- 
tion between nodes in the contraction sets of the 
trees being coordinated. The term contraction is 
taken from the graph-theoretic notion of edge con- 
traction. In a graph, when an edge joining two 
vertices is contracted, the nodes are merged and 
the new vertex retains edges to the union of the 
neighbors of the merged vertices s. The conjoin 
operation supplies a new edge between each cor- 
responding node in the contraction set and then 
contracts that edge. As a constraint on the ap- 
plication of the conjoin operation, the contraction 
sets of the two trees must be identical. 
Another way of viewing the conjoin operation 
is as the construction of an auxiliary structure 
fi'om an elementary tree. For example, from the 
elementary tree (a(drinks), {1, 2.2}), the conjoin 
operation would create the auxiliary structure 
(fl(drinks){1}, {2.2}) shown in Fig. 6. The ad- 
junction operation would now be responsible for 
creating contractions between nodes in the con- 
traction sets of the two trees supplied to it. Such 
an approach is attractive for two reasons. First, 
it uses only the traditional operations of substitu- 
tion and adjnnction. Secondly, it treats conj X as 
a kind of "modifier" on the left conjunct X. We 
do not choose between the two representations but 
continue to view the conjoin operation as a part 
of our formalism. 
S 
V NP~ 
I 
dnnL~ 
Figure 6: Coordination as adjunction. 
For example, applying conjoin to the trees 
Conj(and), a(eats){1} and c~(drinks){l} gives us 
tile derivation tree and derived structure for the 
constituent in (2) shown in Fig. 7. 
(2) . . .  eats cookies and drinks beer. 
In Fig. 7 the nodes (~(eats){1} and a(drinks)\[ll 
signify an operation left incomplete at address 1. 
in (Joshi and Schabes, 1991). A coordinated node will 
never dominate multiple foot nodes. Such a case oc- 
curs, e.g., two auxiliary trees with substitution odes 
at the same tree address are coordinated with only the 
substitution odes in the contraction set. 
SMerging in the graph-theoretic definition of con- 
traction involves the identification of two previously 
distinct nodes. In the process of contraction over 
nodes in elementary trees it is the operation on that 
node (either substitution or adjunction) that is iden- 
tified. 
612 
Conj(~ml) VI' S S 
v ,  . . . . .  
cot,i(,,,,+ \[ I I I 
cals el'tiMes drinks b~r 
oc (cats) { I } a (drinks) Derived structure 
2.21 /2.2 {I, 
(cookies) a (beer) 
Derivation tree 
Figure 7: An example of the conjoin operation. 
The Effects of Contraction. One of the effects of 
contraction is that; the notion of a derivation tree 
for the 12FAG formalism has to be extended to an 
acyclic derivation graph 9. Simultaneous substitu- 
tion or adjunction modifies a derivation tree into 
a graph as can be seen in Fig. 8. 
If a contracted node in a tree (after the conjoin 
operation) is a substitution ode, then the argu- 
ment is recorded as a substitution into the two el- 
ementary trees ms for example in the sentences (3) 
and (4). 
(3) Chapman eats cookies and drinks beer. 
(4) Keats steals and Chapman eats apples. 
Fig. 8 contains the derivation and derived struc- 
tures for (3) and Fig. 9 for (4). In Fig. 9 the d(,riw~- 
tion graph for sentence (4) accounts \['or the coor- 
dinations of the traditionM nonconstituent "Keats 
steals" by carrying out the coordination at the 
root, i.e. S conj S. No constituent corresponding 
to "Keats steals" is created in the process of co- 
ordination. 
1) S VP S 
e~(eats)ll I ot(tlrinks)ll I NP VP and 
L 
c~(cnokies) 0I(Chapman) or(beer) Chapman V NP V NP 
i I I \[ 
eats cookies drinks beer 
Dgl+ivation ,,itrtlt~tufc, Derivezl slitlcttlre 
Figure 8: Derivation for Chapman eats cookies 
and drinks beer. 
The derived structures in Figs. 8 and 9 are 
diff, cult to reconcile with traditional notions of 
phrase structure 1?. However, the derivation struc- 
ture gives us all the information about dependency 
?We shall use the general notation derivation struc- 
ture to refer to both derivation trees and derivation 
graphs. 
t?McCawley (1982) rMsed the heterodox view that 
a discontinuous constituent structure should be given 
for right node raising cases, having the same notion of 
constituency as our approach. IIowever, no conditions 
on the construction of such a structm'e was given. In 
fact, his mechanism also covered cases of parenthetical 
placement, scrambling, relative clause extraposition 
Colj(;md) S ~ S  
u(Keats) a(applcs) (y~Chapman) Keats V Chapmanv NP 
I I I 
steMs eats apples 
Derivation structule Derived structure 
Figure 9: Derivation for Keats steals and Chap- 
man eats apples. 
that we need about the constituents. The deriva- 
tion encodes exactly how particular elementary 
trees are put together. Obtaining a tree struc- 
ture fi:om a derived structure built by the conjoin 
operation is discussed in (Sarkar and Joshi, 1996). 
Considerations of the locality of movement phe- 
nomena and its representation i the LTAG tbr- 
realism (Kroch and Joshi, 1986) can also now ex- 
pkdn constraints on coordinate structure, such as 
across-the-board exceptions to the well known co- 
ordinate structure constraint, see Fig. 10. Also 
in eases of unbounded right node raising such as 
Keats likes and Chapman thinks Mary likes beans, 
Chapman thinks simply adjoins into the right con- 
junct of the coordinate structure 11. 
Elelnenlary flees 
NP 
V NP 
I I 
likcdBtaicd Ei 
S 
S alld S 
Coin p S* 
whh:h 
I)eriw~ticm Stnlcture 
0~(caoke,l) 
t / / /~2 Colj(and) 
I:)'.(Mary) a(bcans) ~ n 
i'(\] 
~(Keats) eL(Chapman) 
Derived s\[i\]lctllre i ? \] 
(hunp S* * 
NI' VP NP x NP which 
cooked thebcans Keatsliked andChapmanhated 
Figurc 10: Derivation tbr Mary cooked the beans 
which Keats liked and Chapman hated. 
5 Cont ract ions  on  Anchors  
An LTAG along with the operations of substitu- 
tion and adjnnction also has tile implicit opera- 
tion of lexical insertion (represented as the dia- 
mond mark in Fig. 11). Under this view, the 
and heavy NP shift. 
11A eomparision of this paper's approach with the 
derivational machinery in CCG and the devices of 3-D 
coordination is done in (Sarkar and Joshi, 1996). 
613 
LTAG trees are taken to be templates. For ex- 
ample, the tree in Fig. 11 is now represented as 
<~(eat), {1, 2.1, 2.2\]). 
a(eats) 
S 
NP~ VP 
V O NP~ 
t 
eats 
Figure 11: Lexicalization in a LTAG. 
If we extend the notion of contraction in the 
conjoin operation together with the operation of 
lexical insertion we have the following observa- 
tions: The two trees to be used by the conjoin op- 
eration are no longer strictly lexicalized as the la- 
bel associated with the diamond mark is a preter- 
minal. Previous uses of conjoin applied to two dis- 
tinct trees. If the lexicalization operation is to ap- 
ply simultaneously, the same anchor projects two 
elementary trees from the lexicon. The process of 
contraction ensures that the anchor is placed into 
a pair of LTAG tree templates with a single lexical 
insertion. 
Gapping. Using this extension to conjoin, we 
can handle sentences that have the "gapping" con- 
struction like sentence (5). 
(5) John ate bananas and Bill strawberries. 
The conjoin operation applies to copies of the 
same elementary tree when the lexical anchor is 
in the contraction set. For example, let o~(eats) 
be the tree selected by cats. The coordination of 
o~(cats){2.l} with a copy of itself and the subse- 
quent derivation tree is depicted in Fig. 1212 . 
S Conj(and) 
S and 5 1 ~  
~ c~(cat-s){ 2.1} a(cats){2.1 } 
V. N.+ NP+ 
eats Nr~ 
I 
eats 
Figure 12: Handling the gapping construction us- 
ing contractions. 
An extension of the approach here will be to 
permit the conjoin operation to create contrac- 
tions on all the nodes in contraction sets that it 
a2In English, following Ross (1970), the anchor goes 
to the left conjunct. 
dominates during a derivation, allowing us to rec- 
ognize cases of gapping such as: John wants Penn 
to win and Bill, Princeton. and John wants to try 
to see Mary and Bill, Susan. 
Coordinating Ditransitive verbs. In sentence (6) 
if we take the position that the string Mary a book 
is not a constituent (i.e. give has a structure as in 
Fig. 13), then we can use the notion of contraction 
over the anchor of a tree to derive the sentence 
in (6). The structure we derive is shown in Fig. 14. 
(6) John gave Mary a book and Susan a 
f l ower .  
S 
NP~ 
V NP~, NP~ r 
gave 
Figure 13: Tree for a ditransitive verb in LTAG. 
S VP S 
NP VP . VP 
John V NP NP NP NP 
I I I P r 
gave Mary a book Siisan a flower 
Figure 14: Derived tree for John gave Mary a book 
and Susan a flower. 
Interactions. Permitting contractions on mul- 
tiple substitution and adjunction sites along with 
contractions on the anchor allow the derivation of 
sluicing structures such as (7) (where the conjunct 
Bill too can be interpreted as \[John loves\] Bill too 
or as Bill \[loves Mary\] too 13. 
(7) John loves Mary and Bill too. 
6 Pars ing  I ssues  
This section discusses parsing issues that arise 
in the modified TAG formalism that we have 
presented. We do not discuss general issues 
in parsing TAGs, rather we give the appropri- 
ate modifications that are needed to the existing 
Earley-type parsing algorithm for TAGs due to 
Schabes and Joshi (1988). 
The algorithm relies on a tree traversal that 
scans the input string from left to right while rec- 
ognizing the application of the conjoin operation. 
The nodes in the elementary trees are visited in a 
top-down left to right manner (Fig. 15). F, ach dot 
in Fig. 15 divides the tree into a left context and a 
13Whether this should be derived syntactically is 
controversial, for example, see (Steedman, 1990). 
614 
right context, enabling the algorithm to scan the 
elementary tree while trying to recognize possible 
applications of the conjoin operation. 
S 4" B ? 
? a. , 'A ,(7 
Figure 15: Example of a tree traversal 
3'he derived structure corresponding to a coor- 
dination is a compositc structure built by apply- 
ing the conjoin operation to two elementary trees 
and an instantiation of the coordination schema. 
The algorithm never builds derived structures. It 
builds the derivation by visiting the appropriate 
,,()des during its tree traversal it, the following or- 
der (see Fig. 16). 
I 2 . - .3  d . . .5  6 . . .2 '  7 ' . . . ' (  4 ' . . .5 /  6 I . - .78  
The algorithm must also compute the correct 
span of the string for the nodes that have been 
identified via a contraction. Fig. 16 gives the 
possible scenarios tbr the position of nodes that 
have been linked by a contraction. Whet, loot 
nodes undergo contraction, the algorithm has to 
ensure that both the foo~ nodes share the sub- 
tree pushed under them, e.g. 9. ? ? 10 and 9 ~. ? ? 10 ~ 
in l,'ig. 16(a). Similarly, when substitution odes 
undergo contraction, the algorithm has to ensure 
that the tree recognized ile by pr('.dicting a sub- 
stitution is shared by the nodcs, e.g. 11 ? ? ? 12 and 
l l ' . . .  12' in Figs. 16(b) and 16(c). '1'he traversals 
9 ... 10 should st)an the same length of the intro, 
as 9 ' . . .10 ' ,  similarly for 11.. .  12 and 11' . . .12' .  
Various positions for such traversals is shown in 
Fig. 116. A derivation is valid if the input string 
is accepted and each i, ode in a contraction sl)ans 
a valid subs,ring in the inI)ut. 'rite complete 
and formal (leseription of the l)arsing algorithm 
is given in (Sarkar and Joshi, 1996). 
7 Conc lus ion 
We have shown thai; an acconnL tbr coordination 
can be given in a I/I.'AG while maintaining the no- 
tion of a derivation strncture which is central to 
the L'I'A(:I approa(-h. We showed that tixed con- 
stituen(-y can be maintained at the level of the 
elementary tree while accounting for cases of non- 
constituent coordination and gapping. We dis- 
cussed the construction of a practical parser for 
\];I'AG that can handle these (-ases of coordina- 
tion. 
x 
oXo 
- - (2 ' ) '  
(a) A A 
(3 )~(6)  (3~(6 ' )  
(9) ~ ~(10) (9') (10') t 
X does nil, dotninale A ~ 
(b) (3~.X ~(6) (3~o X o~6,) 
(11)? ~(12) ( I r~  ~(12') 
(c) 
Figure 16: Moving the dot while recognizing a
conjoin operation 
References 
Jorgensen, 1I. and A. Abeiild. 1992. Coordination of 
"Unlike" (httegories in TAG. In \]~roceedings of the 
2nd 7'AG Workshop, Philadelphia, PA. 
Joshi, Aravind and Yves Schabes. 1991. Fixed and 
tlexible phrase structnre: Coordination i  Tree Ad- 
joining Grammar. Presented at tile DARPA Work- 
shop on Spoken Language Systems. Asilomar, CA. 
Kroch, A. and A. K. Joshi. 1986. AnMyzing extrapo- 
sition in a tree adjoining gnmm, ar. In G. lluck and 
A. Ojeda, editors, Syntax and Semantics: l)iscon- 
tinuous Constituents. Academic Press, New York. 
McCawley, James. 1982. ParcnthcticMs and discom 
tinuous constituent structure. Linguistic Inquiry, 
13(1):91-106. 
Ross, John. 1970. Gapping and the order of con- 
stituents. In M. Bicrwisch and K. Iieidolph, edi- 
tors, l'rogress in Linguistics. Mouton, The Iiague. 
Sark~r, Anoop and Aravind Joshi. :1996. IIandling 
Coordination i  a Tree Adjoining Gramma.r. '\['ech-- 
nicM report, Dept. of Computer a.nd Info. Sc., Univ. 
of Pennsylwtnia, Philadelphia, PA. 
Schabes, Yves and Aravind K. Joshi. 71988. An 
F, arley~type parsing algorithm for tree adjoining 
grammars. In 26th Meeting of the Association for 
Computational Linguistics, Buffalo, NY. 
Steedman, Mark. 1990. Gapping as constituent cool 
dination. Linguistics and Philosophy, 13:207 264. 
Steedln~n, Mark. 1997. Surface Structure and inter- 
prctatiou: Unbounded and Bounded Dependency in
Combinatory Grammar. I,inguistic Inquiry mono 
graph (to ~q~pear). M\]T Press. 
XTAG Research Group. 1995. A Lexicalized 'Free 
Adjoining Grammar for F, nglish. Technical report, 
IRCS Tech Rpt. 95-.03, University of Pennsylvania, 
Philadelphia, PA. 
615 
