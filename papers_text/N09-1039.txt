Human Language Technologies: The 2009 Annual Conference of the North American Chapter of the ACL, pages 344?352,
Boulder, Colorado, June 2009. c?2009 Association for Computational Linguistics
Positive Results for Parsing with a Bounded Stack using a Model-Based
Right-Corner Transform
William Schuler
Dept. of Computer Science and Engineering
Minneapolis, MN
schuler@cs.umn.edu
Abstract
Statistical parsing models have recently been
proposed that employ a bounded stack in time-
series (left-to-right) recognition, using a right-
corner transform defined over training trees to
minimize stack use (Schuler et al, 2008). Cor-
pus results have shown that a vast majority
of naturally-occurring sentences can be parsed
in this way using a very small stack bound
of three to four elements. This suggests that
the standard cubic-time CKY chart-parsing
algorithm, which implicitly assumes an un-
bounded stack, may be wasting probability
mass on trees whose complexity is beyond hu-
man recognition or generation capacity. This
paper first describes a version of the right-
corner transform that is defined over entire
probabilistic grammars (cast as infinite sets
of generable trees), in order to ensure a fair
comparison between bounded-stack and un-
bounded PCFG parsing using a common un-
derlying model; then it presents experimental
results that show a bounded-stack right-corner
parser using a transformed version of a gram-
mar significantly outperforms an unbounded-
stack CKY parser using the original grammar.
1 Introduction
Statistical parsing models have recently been pro-
posed that employ a bounded stack in time-series
(left-to-right) recognition, in order to directly and
tractably incorporate incremental phenomena such
as (co-)reference or disfluency into parsing deci-
sions (Schuler et al, 2008; Miller and Schuler,
2008). These models make use of a right-corner
tree transform, based on the left-corner transform
described by Johnson (1998), and are supported by
corpus results suggesting that most sentences (in En-
glish, at least) can be parsed using a very small
stack bound of three to four elements (Schuler et
al., 2008). This raises an interesting question: if
most sentences can be recognized with only three
or four elements of stack memory, is the standard
cubic-time CKY chart-parsing algorithm, which im-
plicitly assumes an unbounded stack, wasting prob-
ability mass on trees whose complexity is beyond
human recognition or generation capacity?
This paper presents parsing accuracy results us-
ing transformed and untransformed versions of a
corpus-trained probabilistic context-free grammar
suggesting that this is indeed the case. Experimental
results show a bounded-memory time-series parser
using a transformed version of a grammar signifi-
cantly outperforms an unbounded-stack CKY parser
using the original grammar.
Unlike the tree-based transforms described previ-
ously, the model-based transform described in this
paper does not introduce additional context from
corpus data beyond that contained in the origi-
nal probabilistic grammar, making it possible to
present a fair comparison between bounded- and
unbounded-stack versions of the same model. Since
this transform takes a probabilistic grammar as in-
put, it can also easily accommodate horizontal and
vertical Markovisation (annotating grammar sym-
bols with parent and sibling categories) as described
by Collins (1997) and subsequently.
The remainder of this paper is organized as fol-
lows: Section 2 describes related approaches to pars-
ing with stack bounds; Section 3 describes an exist-
ing bounded-stack parsing framework using a right-
corner transform defined over individual trees; Sec-
tion 4 describes a redefinition of this transform to ap-
344
ply to entire probabilistic grammars, cast as infinite
sets of generable trees; and Section 5 describes an
evaluation of this transform on the Wall Street Jour-
nal corpus of the Penn Treebank showing improved
results for a transformed bounded-stack version of a
probabilistic grammar over the original unbounded
grammar.
2 Related Work
The model examined here is formally similar to
Combinatorial Categorial Grammar (CCG) (Steed-
man, 2000). But the CCG account is a competence
model as well as a performance model, in that it
seeks to unify category representations used in pro-
cessing with learned generalizations about argument
structure; whereas the model described in this paper
is exclusively a performance model, allowing gen-
eralizations about lexical argument structures to be
learned in some other representation, then combined
with probabilistic information about parsing strate-
gies to yield a set of derived incomplete constituents.
As a result, the model described in this paper has a
freer hand to satisfy strict working memory bounds,
which may not permit some of the alternative com-
position operations proposed in the CCG account,
thought to be associated with available prosody and
quantifier scope analyses.1
Other models (Abney and Johnson, 1991; Gibson,
1991) seek to explain human processing difficulties
as a result of memory capacity limits in parsing or-
dinary phrase structure trees. The Abney-Johnson
and Gibson models adopt a left-corner parsing strat-
egy, of which the right-corner transform described in
this paper is a variant, in order to minimize memory
usage. But the transform-based model described in
this paper exploits a conception of chunking (Miller,
1956) ? in this case, grouping recognized words
into stacked-up incomplete constituents ? to oper-
ate within much stricter estimates of human short-
term memory bounds (Cowan, 2001) than assumed
by Abney and Johnson.
1The lack of support for some of these available scope anal-
yses may not necessarily be problematic for the present model.
The complexity of interpreting nested raised quantifiers may
place them beyond the capability of human interactive incre-
mental interpretation, but not beyond the capability of post-hoc
interpretation (understood after the listener has had time to think
about it).
Several existing incremental systems are orga-
nized around a left-corner parsing strategy (Roark,
2001; Henderson, 2004). But these systems gen-
erally keep large numbers of constituents open for
modifier attachment in each hypothesis. This al-
lows modifiers to be attached as right children of any
such open constituent. But if any number of open
constituents are allowed, then either the assumption
that stored elements have fixed syntactic (and se-
mantic) structure will be violated, or the assump-
tion that syntax operates within a bounded mem-
ory store will be violated, both of which are psy-
cholinguistically attractive as simplifying assump-
tions. The HHMM model examined in this pa-
per upholds both the fixed-element and bounded-
memory assumptions by hypothesizing fixed reduc-
tions of right child constituents into incomplete par-
ents in the same memory element, to make room for
new constituents that may be introduced at a later
time. These in-element reductions are defined natu-
rally on phrase structure trees as the result of align-
ing right-corner transformed constituent structures
to sequences of random variables in a factored time-
series model.
3 Background
The recognition model examined in this paper is a
factored time-series model, based on a Hierarchic
Hidden Markov Model (Murphy and Paskin, 2001),
which probabilistically estimates the contents of a
memory store of three to four partially-completed
constituents over time. Probabilities for expansions,
transitions and reductions in this model can be de-
fined over trees in a training corpus, transformed
and mapped to the random variables in an HHMM
(Schuler et al, 2008). In Section 4 these probabil-
ities will be computed directly from a probabilistic
context-free grammar, in order to evaluate the con-
tribution of stack bounds without introducing addi-
tional corpus context into the model.
3.1 A Bounded-Stack Model
HHMMs are factored HMMs which mimic a
bounded-memory pushdown automaton (PDA), sup-
porting simple push and pop operations on a
bounded stack-like memory store.
HMMs characterize speech or text as a sequence
345
of hidden states qt (in this case, stacked-up syntac-
tic categories) and observed states ot (in this case,
words) at corresponding time steps t. A most likely
sequence of hidden states q?1..T can then be hypothe-
sized given any sequence of observed states o1..T :
q?1..T = argmax
q1..T
P(q1..T | o1..T ) (1)
= argmax
q1..T
P(q1..T )?P(o1..T | q1..T ) (2)
def= argmax
q1..T
T?
t=1
P?A(qt | qt-1)?P?B(ot | qt) (3)
using Bayes? Law (Equation 2) and Markov in-
dependence assumptions (Equation 3) to define
a full P(q1..T | o1..T ) probability as the product
of a Transition Model (?A) prior probability
P(q1..T ) def= ?t P?A(qt | qt-1) and an Observation
Model (?B) likelihood probability P(o1..T | q1..T ) def=?
t P?B(ot | qt).
Transition probabilities P?A(qt | qt-1) over com-
plex hidden states qt can be modeled using synchro-
nized levels of stacked-up component HMMs in an
HHMM. HHMM transition probabilities are calcu-
lated in two phases: a reduce phase (resulting in an
intermediate, marginalized state ft), in which com-
ponent HMMs may terminate; and a shift phase (re-
sulting in a modeled state qt), in which unterminated
HMMs transition, and terminated HMMs are re-
initialized from their parent HMMs. Variables over
intermediate ft and modeled qt states are factored
into sequences of depth-specific variables ? one for
each of D levels in the HHMM hierarchy:
ft = ?f1t . . . fDt ? (4)
qt = ?q1t . . . qDt ? (5)
Transition probabilities are then calculated as a
product of transition probabilities at each level, us-
ing level-specific reduce ?R,d and shift ?S,d models:
P?A(qt|qt-1) =
?
ft
P(ft|qt-1)?P(qt|ft qt-1) (6)
def=?
f1..Dt
D?
d=1
P?R,d(fdt |fd+1t qdt-1qd-1t-1 )?
P?S,d(qdt |fd+1t fdt qdt-1qd-1t ) (7)
with fD+1t and q0t defined as constants. In Viterbi
decoding, the sums are replaced with argmax opera-
tors. This decoding process preserves ambiguity by
. . .
. . .
. . .
. . .
f3t?1
f2t?1
f1t?1
q1t?1
q2t?1
q3t?1
ot?1
f3t
f2t
f1t
q1t
q2t
q3t
ot
Figure 1: Graphical representation of a Hierarchic Hid-
den Markov Model. Circles denote random variables, and
edges denote conditional dependencies. Shaded circles
are observations.
maintaining competing analyses of the entire mem-
ory store. A graphical representation of an HHMM
with three levels is shown in Figure 1.
Shift and reduce probabilities can then be defined
in terms of finitely recursive Finite State Automata
(FSAs) with probability distributions over transition,
recursive expansion, and final-state status of states at
each hierarchy level. In the version of HHMMs used
in this paper, each intermediate variable is a reduc-
tion or non-reduction state fdt ? G?{1,0} (indi-
cating, respectively, a complete reduced constituent
of some grammatical category from domain G, or
a failure to reduce due to an ?active? transition be-
ing performed, or a failure to reduce due to an
?awaited? transition being performed, as defined in
Section 4.3); and each modeled variable is a syn-
tactic state qdt ? G?G (describing an incomplete
constituent consisting of an active grammatical cat-
egory from domain G and an awaited grammatical
category from domain G). An intermediate vari-
able fdt at depth d may indicate reduction or non-
reduction according to ?F-Rd,d if there is a reduction
at the depth level immediately below d, but must in-
dicate non-reduction (0) with probability 1 if there
was no reduction below:2
P?R,d(fdt | fd+1t qdt-1qd-1t-1 ) def={
if fd+1t 6?G : [fdt =0]
if fd+1t ?G : P?F-Rd,d(fdt | qdt-1, qd-1t-1 ) (8)
2Here [?] is an indicator function: [?] = 1 if ? is true, 0
otherwise.
346
where fD+1t ?G and q0t = ROOT.
Shift probabilities over the modeled variable qdt
at each level are defined using level-specific transi-
tion ?Q-Tr,d and expansion ?Q-Ex,d models:
P?S,d(qdt | fd+1t fdt qdt-1qd-1t ) def=?
?
?
if fd+1t 6?G, fdt 6?G : [qdt = qdt-1]
if fd+1t ?G, fdt 6?G : P?Q-Tr,d(qdt | fd+1t fdt qdt-1qd-1t )
if fd+1t ?G, fdt ?G : P?Q-Ex,d(qdt | qd-1t )
(9)
where fD+1t ?G and q0t = ROOT. This model is
conditioned on reduce variables at and immediately
below the current FSA level. If there is no reduc-
tion immediately below the current level (the first
case above), it deterministically copies the current
FSA state forward to the next time step. If there
is a reduction immediately below the current level
but no reduction at the current level (the second case
above), it transitions the FSA state at the current
level, according to the distribution ?Q-Tr,d. And if
there is a reduction at the current level (the third case
above), it re-initializes this state given the state at the
level above, according to the distribution ?Q-Ex,d.
The overall effect is that higher-level FSAs are al-
lowed to transition only when lower-level FSAs ter-
minate. An HHMM therefore behaves like a prob-
abilistic implementation of a pushdown automaton
(or shift?reduce parser) with a finite stack, where the
maximum stack depth is equal to the number of lev-
els in the HHMM hierarchy.
3.2 Tree-Based Transforms
The right-corner transform used in this paper is sim-
ply the left-right dual of a left-corner transform
(Johnson, 1998). It transforms all right branching
sequences in a phrase structure tree into left branch-
ing sequences of symbols of the form A?/A???, de-
noting an incomplete instance of an ?active? category
A? lacking an instance of an ?awaited? category A???
yet to come.3 These incomplete constituent cate-
gories have the same form and much of the same
meaning as non-constituent categories in a Combi-
natorial Categorial Grammar (Steedman, 2000).
3Here ? and ? are node addresses in a binary-branching tree,
defined as paths of left (0) or right (1) branches from the root.
Rewrite rules for the right-corner transform are
shown below:4
? Beginning case: the top of a right-expanding
sequence in an ordinary phrase structure tree is
mapped to the bottom of a left-expanding se-
quence in a right-corner transformed tree:
A?
A??0
?
A??1
?
?
A?
A?/A??1
A??0
?
?
(10)
This case of the right-corner transform may be
considered a constrained version of CCG type
raising.
? Middle case: each subsequent branch in a
right-expanding sequence of an ordinary phrase
structure tree is mapped to a branch in a left-
expanding sequence of the transformed tree:
A?
? A???
A????0
?
A????1
?
?
A?
A?/A????1
A?/A???
?
A????0
?
?
(11)
This case of the right-corner transform may be
considered a constrained version of CCG for-
ward function composition.
? Ending case: the bottom of a right-expanding
sequence in an ordinary phrase structure tree is
mapped to the top of a left-expanding sequence
in a right-corner transformed tree:
A?
? A???
a???
?
A?
A?/A???
?
A???
a???
(12)
This case of the right-corner transform may be
considered a constrained version of CCG for-
ward function application.
4These rules can be applied recursively from bottom up
on a source tree, synchronously associating subtree structures
matched to variables ?, ?, and ? on the left side of each rule
with transformed representations of these subtree structures on
the right.
347
a) binary-branching phrase structure tree:
S
NP
NP
JJ
strong
NN
demand
PP
IN
for
NP
NPpos
NNP
NNP
new
NNP
NNP
york
NNP
city
POS
?s
NNS
JJ
general
NNS
NN
obligation
NNS
bonds
VP
VBN
VBN
propped
PRT
up
NP
DT
the
NN
JJ
municipal
NN
market
b) result of right-corner transform:
S
S/NN
S/NN
S/NP
S/VP
NP
NP/NNS
NP/NNS
NP/NNS
NP/NP
NP/PP
NP
NP/NN
JJ
strong
NN
demand
IN
for
NPpos
NPpos/POS
NNP
NNP/NNP
NNP/NNP
NNP
new
NNP
york
NNP
city
POS
?s
JJ
general
NN
obligation
NNS
bonds
VBN
VBN/PRT
VBN
propped
PRT
up
DT
the
JJ
municipal
NN
market
Figure 2: Trees resulting from a) a sample phrase structure tree for the sentence Strong demand for New York City?s
general obligations bonds propped up the municipal market, and b) a right-corner transform of this tree. Sequences of
left children are recognized from the bottom up through in-element transitions in a Hierarchic Hidden Markov Model.
Right children are recognized by expanding to additional stack elements.
The completeness of the above transform rules can
be demonstrated by the fact that they cover all pos-
sible subtree configurations (with the exception of
bare terminals, which are simply copied). The
soundness of the above transform rules can be
demonstrated by the fact that each rule transforms
a right-branching subtree into a left-branching sub-
tree labeled with an incomplete constituent.
An example of a right-corner transformed tree is
shown in Figure 2(b). An important property of this
transform is that it is reversible. Rewrite rules for re-
versing a right-corner transform are simply the con-
verse of those shown above.
Sequences of left children in the resulting mostly-
left-branching trees are recognized from the bot-
tom up, through transitions at the same stack ele-
ment. Right children, which are much less frequent
in the resulting trees, are recognized through cross-
element expansions in a bounded-stack recognizer.
4 Model-Based Transforms
In order to compare bounded- and unbounded-stack
versions of the same model, the formulation of
the right-corner and bounded-stack transforms in-
troduced in this paper does not map trees to trees,
but rather maps probability models to probability
348
models. This eliminates complications in comparing
models with different numbers of dependent vari-
ables ? and thus different numbers of free parame-
ters ? because the model which ordinarily has more
free parameters (the HHMM, in this case) is derived
from the model that has fewer (the PCFG). Since
they are derived from a simpler underlying model,
the additional parameters of the HHMM are not free.
Mapping probability models from one format to
another can be thought of as mapping the infinite
sets of trees that are defined by these models from
one format to another. Probabilities in the trans-
formed model are therefore defined by calculating
probabilities for the relevant substructures in the
source model, then marginalizing out the values of
nodes in these structures that do not appear in the
desired expression in the target model.
A bounded-stack HHMM ?Q,F can therefore be
derived from an unbounded PCFG ?G by:
1. organizing the rules in the source PCFG
model ?G into direction-specific versions (dis-
tinguishing rules for expanding left and right
children, which occur respectively as active and
awaited constituent categories in incomplete
constituent labels);
2. enforcing depth limits on these direction-
specific rules; and
3. mapping these probabilities to HHMM random
variable positions at the appropriate depth.
4.1 Direction-specific rules
An inspection of the tree-based right-corner trans-
form rewrites defined in Section 3.2 will show two
things: first, that constituents occurring as left chil-
dren in an original tree (with addresses ending in
?0?) always become active constituents (occurring
before the slash, or without a slash) in incomplete
constituent categories, and constituents occurring as
right children in an original tree (with addresses end-
ing in ?1?) always become awaited constituents (oc-
curring after the slash); and second, that left chil-
dren expand locally downward in the transformed
tree (so each A??0/... locally dominates A??0?0/...),
whereas right children expand locally upward (so
each .../A??1 is locally dominated by .../A??1?1).
This means that rules from the original grammar ?
if distinguished into rules applying only to left and
right children (active and awaited constituents) ?
can still be locally modeled following a right-corner
transform. A transformed tree can be generated
in this way by expanding downward along the ac-
tive constituents in a transformed tree, then turning
around and expanding upward to fill in the awaited
constituents, then turning around again to generate
the active constituents at the next depth level, and so
on.
4.2 Depth bounds
The locality of the original grammar rules in a right-
corner transformed tree allows memory limits on in-
complete constituents to be applied directly as depth
bounds in the zig-zag generation traversal defined
above. These depth limits correspond directly to the
depth levels in an HHMM.
In the experiments described in Section 5,
direction-specific and depth-specific versions of the
original grammar rules are implemented in an ordi-
nary CKY-style dynamic-programming parser, and
can therefore simply be cut off at a particular depth
level with no renormalization.
But in an HHMM, this will result in label-bias ef-
fects, in which expanded constituents may have no
valid reduction, forcing the system to define distri-
butions for composing constituents that are not com-
patible. For example, if a constituent is expanded at
depth D, and that constituent has no expansions that
can be completely processed within depth D, it will
not be able to reduce, and will remain incompatible
with the incomplete constituent above it. Probabili-
ties for depth-bounded rules must therefore be renor-
malized to the domain of allowable trees that can be
generated within D depth levels, in order to guaran-
tee consistent probabilities for HHMM recognition.
This is done by determining the (depth- and
direction-specific) probability P?B-L,d(1 |A??0)
or P?B-R,d(1 |A??1) that a tree generated at each
depth d and rooted by a left or right child will fit
within depth D. These probabilities are then esti-
mated using an approximate inference algorithm,
similar to that used in value iteration (Bellman,
1957), which estimates probabilities of infinite trees
by exploiting the fact that increasingly longer trees
contribute exponentially decreasing probability
mass (since each non-terminal expansion must
349
avoid generating a terminal with some probability
at each step from the top down), so a sum over
probabilities of trees with increasing length k is
guaranteed to converge. The algorithm calculates
probabilities of trees with increasing length k until
convergence, or to some arbitrary limit K:
P?B-L,d,k(1 |A??0) def=?
A??1?0,
A??1?1
P?G(A??0  A??0?0 A??0?1)
? P?B-L,d,k?1(1 |A??0?0)
? P?B-R,d,k?1(1 |A??0?1) (13)
P?B-R,d,k(1 |A??1) def=?
A??1?0,
A??1?1
P?G(A??1  A??1?0 A??1?1)
? P?B-L,d+1,k?1(1 |A??1?0)
? P?B-R,d,k?1(1 |A??1?1) (14)
Normalized probability distributions for depth-
bounded expansions ?G-L,d and ?G-R,d can now be
calculated using converged ?B-L,d and ?B-R,d esti-
mates:
P?G-L,d(A??0  A??0?0 A??0?1) def=
P?G(A??0  A??0?0 A??0?1)
? P?B-L,d(1 |A??0?0) ? P?B-R,d(1 |A??0?1) (15)
P?G-R,d(A??1  A??1?0 A??1?1) def=
P?G(A??1  A??1?0 A??1?1)
? P?B-L,d+1(1 |A??1?0) ? P?B-R,d(1 |A??1?1) (16)
4.3 HHMM probabilities
Converting PCFGs to HHMMs requires the calcu-
lation of expected frequencies F?G-L*,d(A? ? A???)
of generating symbols A??? in the left-progeny of a
nonterminal symbol A? (in other words, of A??? be-
ing a left child of A?, or a left child of a left child
of A?, etc.). This is done by summing over sub-
trees of increasing length k using the same approx-
imate inference technique described in Section 4.2,
which guarantees convergence since each subtree of
increasing length contributes exponentially decreas-
ing probability mass to the sum:
F?G-L*,d(A? ? A???) =
??
k=0
F?G-L*,d(A? k A???)
(17)
where:
F?G-L*,d(A? k A??0k) =?
A??0k?1 ,
A??0k?1?1
P?G-L*,d(A? k?1 A??0k?1)
? P?G-L,d(A??0k?1  A??0k A??0k?1?1) (18)
and P?G-L*,d(A? 0 A??) = [A? =A??].
A complete HHMM can now be defined us-
ing depth-bounded right-corner PCFG probabilities.
HHMM probabilities will be defined over syntac-
tic states consisting of incomplete constituent cat-
egories A?/A???.
Expansions depend on only the incomplete con-
stituent category ../A? (for any active category ?..?)
at qd?1t :
P?Q-Ex,d(a??0?? | ../A?) =?
A??0,
A??1
P?G-R,d?1(A?  A??0 A??1)?
F?G-L*,d(A??0 ? a??0??)?
A??0,
A??1,a??0??
P?G-R,d?1(A?  A??0 A??1)?
F?G-L*,d(A??0 ? a??0??)
(19)
Transitions depend on whether an ?active? or
?awaited? transition was performed at the current
level. If an active transition was performed (where
fdt = 1), the transition depends on only the in-
complete constituent category A??0???0/.. (for any
awaited category ?..?) at qdt?1, and the incomplete
constituent category ../A? (for any active category
?..?) at qd?1t?1 :
P?Q-Tr,d(A??0??/A??0???1 |1, A??0???0/.., ../A?) =?
A??0,
A??1
P?G-R,d?1(A?  A??0 A??1)?
F?G-L*,d (A??0
?A??0??)
F?G-L*,d (A?0
?A?0?0)?F?G-L*,d (A?0
0A?0?0)
?
P?G-L,d(A??0??  A??0???0 A??0???1)?
A??0,
A??1,
A??0??,
A??0???1
P?G-R,d?1(A?  A??0 A??1)?
F?G-L*,d (A??0
?A??0??)
F?G-L*,d (A?0
?A?0?0)?F?G-L*,d (A?0
0A?0?0)
?
P?G-L,d(A??0??  A??0???0 A??0???1)
(20)
If an awaited transition was performed (where fdt =
0), the transition depends on only the complete con-
stituent category A????0 at fd+1t , and the incomplete
350
constituent category A?/A??? at qdt?1:
P?Q-Tr,d(A?/A????1 |0, A????0, A?/A???) =
P?G-R,d(A???  A????0 A????1)?
A????1 P?G-R,d(A???  A????0 A????1)
(21)
Reduce probabilities depend on the complete con-
stituent category at fd+1t , and the incomplete con-
stituent category A??0???0/.. (for any awaited cate-
gory ?..?) at qdt?1, and the incomplete constituent cat-
egory ../A? (for any active category ?..?) at qd?1t?1 . If
the complete constituent category at fd+1t does not
match the awaited category of qdt?1, the probability
is [fdt = f0]. If the complete constituent category
at fd+1t does match the awaited category of qdt?1:
P?F-Rd,d(1 |A??0??/.., ../A?) =?
A??0,A??1 P?G-R,d?1(A?  A??0 A??1)?(
F?G-L*,d(A??0 ? A??0??)
?F?G-L*,d(A??0 0 A??0??)
)
?
A??0,A??1 P?G-R,d?1(A?  A??0 A??1)?
F?G-L*,d(A??0 ? A??0??)
(22)
and:
P?F-Rd,d(A??0?? |A??0??/.., ../A?) =?
A??0,A??1 P?G-R,d?1(A?  A??0 A??1)?
F?G-L*,d(A??0 0 A??0??)?
A??0,A??1 P?G-R,d?1(A?  A??0 A??1)?
F?G-L*,d(A??0 ? A??0??)
(23)
The correctness of the above distributions can be
demonstrated by the fact that all terms other than
?G-L,d and ?G-R,d probabilities will cancel out in
any sequence of transitions between an expansion
and a reduction, leaving only those terms that would
appear as factors in an ordinary PCFG parse.5
5 Results
A PCFG model was extracted from sections 2?21
of the Wall Street Journal Treebank. In order to
keep the transform process manageable, punctua-
tion was removed from the corpus, and rules oc-
curring less frequently than 10 times in the corpus
5It is important to note, however, that these probabilities are
not necessarily incrementally balanced, so this correctness only
applies to parsing with an infinite beam.
model (sect 22?24, len>40) F
unbounded PCFG 66.03
bounded PCFG (D=4) 66.08
Table 1: Results of CKY parsing using bounded and un-
bounded PCFG.
were deleted from the PCFG. The right-corner and
bounded-stack transforms described in the previous
section were then applied to the PCFG. The origi-
nal and bounded PCFG models were evaluated in a
CKY recognizer on sections 22?24 of the Treebank,
with results shown in Table 1.6 Results were signif-
icant only for sentences longer than 40 words. On
these sentences, the bounded PCFG model achieves
about a .15% reduction of error over the original
PCFG (p < .1 using one-tailed pairwise t-test). This
suggests that on long sentences the probability mass
wasted due to parsing with an unbounded stack is
substantial enough to impact parsing accuracy.
6 Conclusion
Previous work has explored bounded-stack parsing
using a right-corner transform defined on trees to
minimize stack usage. HHMM parsers trained on
applications of this tree-based transform of train-
ing corpora have shown improvements over ordinary
PCFG models, but this may have been attributable to
the richer dependencies of the HHMM.
This paper has presented an approximate in-
ference algorithm for transforming entire PCFGs,
rather than individual trees, into equivalent right-
corner bounded-stack HHMMs. Moreover, a com-
parison with an untransformed PCFG model sug-
gests that the probability mass wasted due to pars-
ing with an unbounded stack is substantial enough
to impact parsing accuracy.
Acknowledgments
This research was supported by NSF CAREER
award 0447685 and by NASA under award
NNX08AC36A. The views expressed are not nec-
essarily endorsed by the sponsors.
6A CKY recognizer was used in both cases in order to avoid
introducing errors due to model approximation or beam limits
necessary for incremental processing with large grammars.
351
References
Steven P. Abney and Mark Johnson. 1991. Memory re-
quirements and local ambiguities of parsing strategies.
J. Psycholinguistic Research, 20(3):233?250.
Richard Bellman. 1957. Dynamic Programming.
Princeton University Press, Princeton, NJ.
Michael Collins. 1997. Three generative, lexicalised
models for statistical parsing. In Proceedings of the
35th Annual Meeting of the Association for Computa-
tional Linguistics (ACL ?97).
Nelson Cowan. 2001. The magical number 4 in short-
term memory: A reconsideration of mental storage ca-
pacity. Behavioral and Brain Sciences, 24:87?185.
Edward Gibson. 1991. A computational theory of hu-
man linguistic processing: Memory limitations and
processing breakdown. Ph.D. thesis, Carnegie Mellon.
James Henderson. 2004. Lookahead in deterministic
left-corner parsing. In Proc. Workshop on Incremen-
tal Parsing: Bringing Engineering and Cognition To-
gether, Barcelona, Spain.
Mark Johnson. 1998. Finite state approximation of
constraint-based grammars using left-corner grammar
transforms. In Proceedings of COLING/ACL, pages
619?623.
Tim Miller and William Schuler. 2008. A syntactic time-
series model for parsing fluent and disfluent speech. In
Proceedings of the 22nd International Conference on
Computational Linguistics (COLING?08).
George A. Miller. 1956. The magical number seven, plus
or minus two: Some limits on our capacity for process-
ing information. Psychological Review, 63:81?97.
Kevin P. Murphy and Mark A. Paskin. 2001. Linear time
inference in hierarchical HMMs. In Proc. NIPS, pages
833?840.
Brian Roark. 2001. Probabilistic top-down parsing
and language modeling. Computational Linguistics,
27(2):249?276.
William Schuler, Samir AbdelRahman, Tim Miller, and
Lane Schwartz. 2008. Toward a psycholinguistically-
motivated model of language. In Proceedings of COL-
ING, Manchester, UK, August.
Mark Steedman. 2000. The syntactic process. MIT
Press/Bradford Books, Cambridge, MA.
352
