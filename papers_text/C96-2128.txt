Revers ib le  de layed  lex ica l  cho ice  in a b id i rec t iona l  f ramework  
Graham Wi lcock*  
Cent re  for Computat iona l  L inguist ics  
Un ivers i ty  of Manchester  Ins t i tu te  
of Sc ience and Techno logy  
PO Box  88, Manchester  M60 1QD 
Un i ted  K ingdom 
grahamOccl, umist ,  ac. uk 
Yuj i  Matsumoto  
Graduate  School  of In%rmat ion  Science 
Nara  Ins t i tu te  of Sc ience and %chno logy  
8916-5 Takayama,  Ikoma,  Nara  630-01 
, Japan 
matsu~is ,  a i s t -nara ,  ac. jp 
Abst ract  
We describe a bidirectional framework 
for natural anguage parsing and genera- 
tion, using a typed feature formalism and 
an HPSG-based grammar with a parser 
and generator derived from parallel pro- 
cessing algorithms. We present an ap- 
proach to delayed lexical choice in gener- 
ation, based on subsumption within the 
sort hierarchy, using a lexicon of nnder- 
instantiated signs which at'(; derived fi'om 
the normal lexicon by lexical rules. We 
then show how delayed lexical choice can 
be used in parsing, so that some types of 
ill-formed inputs can be parsed, but well- 
formed outputs are generated, using the 
same shared linguistic information. 
1 A b id i rec t iona l  f ramework  
In our bidirectional framework for a natural lan- 
guage engine, the linguistic descriptions in the 
grammar and lexicon are shared resources which 
are used, in appropriately compiled forms, for 
both parsing and generation. Like the Core Lan- 
guage Engine (CLE) (Alshawi, 1992), we use 
a unification-based phrase structure grammar, a 
logical form representation, a bottom-up chart 
parser and a semantic head-driven generation al- 
gorithm. However, we (lifter from CLE by exploit- 
ing recent developments in processing algorithms 
and in linguistic representation formalisms. We 
will clarify the similarities and differences at; the 
relevant points. 
1.1 Processing algorithms 
The SAX parser is a concurrent SICStus Prolog 
implementation of the PAX parallel pro'sing algo- 
rithm (Matsutnoto and Sugimura, 1987; Matsu- 
moto et al, 1994). Like the earlier BUP parser 
to which the CLE parser was closely related, SAX 
uses partial execution to compile the gramlnar for 
efficient bottom-up arsing. However, instead of 
*Visiting researcher of Information Systems Prod- 
uct Development Lalmratories, Sharp Corporation. 
building the chart by asserting edges into the Pro- 
log database, SAX implements the chart by cre- 
ating concurrent processes. For compiled rather 
than interpreted Prolog systems, this is a highly 
etficient form of chart, parsing, even on sequen- 
tim machines. The terminal and non-terminal 
symbols of the grammar are realized as processes 
which communicate via streams to build larger 
structures. A meta-process monitors tile strealns 
and controls l;he whole parsing process. 
The SGX generator is a concurrent SICStus 
Prolog implementation of the BCG parallel bidi- 
rectional chart generation algorithm (Haruno et 
al., :1993; Den, 1.994). SGX uses partial execu- 
tion to compile the grammar lot' efficient gener- 
ation. Like the CLE generator, SGX follows the 
semantic head-driven (SHD) generation algoril;hm 
(Shieber et al, 1990) to ensure fficient ordering of 
the geImration process. However, SGX also imple- 
ments tile suggestion of Shieber et.al, thal; back- 
tracking and recomputation of results should be 
avoided by using a chart, as in chart parsing. Like 
SAX, SGX implements the chart by concurrent 
processes and coininunication streants monitored 
by a meta-process. 
SAX and SGX accept definite clause grammars, 
with specific requirements o eliminate nondeter- 
minism. Prolog code can be added to DCG rules 
as extra conditions, but tile extra conditions must 
be deterministic. Empty categories are not sup- 
ported in normal processing, 1 and SGX does not 
allow non-chain rules with uninstantiated logica.1 
forms. 
1.2 Grammar formalism 
Large DCG-t)ased grammars typically have many 
rules, many categories, and many arguments per 
category. Such grammars could be efficiently pro- 
tossed by SAX and SGX, but are ditficult to de- 
l If empty categories are really imcessary, they can 
be handled in the concurrent processing system via a 
recta-process. This approach is described in (hnaichi 
and Matsumoto, 1995) tbr ill-tbrmcd inputs. However, 
we eliminate traces by lexical rule, and welcome tlte 
proposals of (Sag, 1.995) for eliminating all empty cat- 
egories from ItPSG. 
758 
veh)p and debug. CLE addressed this t)roblem t)y 
adopting GPSG grammatical theory mid ext)ress- 
ing linguistic descriptions as flmture structures, 
but the CI,E grmnmm' still had many arguments 
per category and many rules. We adopt Itl)SG 
grammatical theory (Pollard and Sag, 1994) and 
express linguistic descriptions in a l;yI)e(1 feature 
formalism, lint we still ilnt)le, ii~lent he grammar in 
1)CG forln. 
Sin(:e HPSG colle('.ts all fe, atures into a strut> 
tured sign , the many I)CG a.rguments are repla(:ed 
by a single HPSG sign. As H1)SG generalizes 
fl'om category-based rules (for S, NP, el;t:.) to 
schenms for phrasal signs, the many 1)CG rules 
are rel)lat;ed 1)y a few generalized rules. We sl)ec- 
ify a sepa.rate logi(:al form (LF) f()r generation, 
as in (Shieber et al, \]990). Our I)CG' categories 
therefore have the fin'mat word(S ign) /LF  and 
phrase (S ign) /LF .  2 
phrase(synsem! loc! (  
cat!(head!HF g 
subcat!@l is t l (Sub jSynsem) 
cont!Cont)) / i f (Cont)  
# word(synsem! loc! (  
cat!(head!HF & 
subcat !@l i s t l (Sub jSynsem))  &
cont!Cont)) / I f (Cont) .  
Figure 1: The sour(:e form of a grammar ule 
Figure 1 shows the source form of a simplified 
version of ItPSG Scheina 2 with zero eoint)h',nmnt 
daughters. ~ l i s t  1 is a l;emplate which ext)ands to 
a list; wil;h one meml)ei'. The # symbol is required 
by SGX to identify the semantic, head of ~ chain 
rule for SlID generation. 
1.3 Grammar  compi la t ion  
The ProFIT system (Erbaeh, 1995) iv an exten- 
sion of fq'olog whic, h SUl)ports a typed feature for- 
malisin with multiple inheiitalwe. CLE used a 
sort hierarchy only for senlantie seleetional restric- 
tions. HPSG uses a sort hierarchy also for syntac- 
tic resl;rictions, aim exploits multiple inheritmme 
for lexicon organization. 
2In this pape, r we follow (Shieber et al, 1990) and 
(Pollard add Sag, 1.994) in equating logical form with 
semmltic ontent. A separate logical form is therefore 
redundant, as the. content fe.ature could /)e used to 
<:ontrol SHD generation. Itowever, logical form may 
need to include other inforination, suet, as unscot)ed 
quantifiers (HPSG qstore), i)resul)positions (IIPSG 
context), pragmatic and discourse factors (in fact 
Shieber et al include mood ot)erators ). An impor- 
tant consequence of this is that a semmttic head in the 
sense of the IIPSG Content Princil)le is not necessar- 
ily a semantic head in the sense of the StID generation 
algorithm. 
ProFIT compiles the, typed hmture formalism 
into Prolog terlns, which can be used with any 
appropriate parser or generator. We therefore use 
I)roFIT in order to combine I\[PSG g~ra,lrllIl&r with 
the SAX l)a,i'ser and the SGX generator, 1)y (;{)tit- 
piling the grmnmar in two separate stages. 
In the tirst stage, the typed feature structures 
in the I)CG rules are compiled by I ' roF IT  into ef- 
ficient Prolog terms. Like CI,E, ProFf l '  t:ompiles 
feature, structures into terms, so that relatively 
slow unification of fe, ature strucl;ures i ret)laced t)y 
relatively fast mfitication of terins. Also like CLE, 
l'rol!Tl' uses the technique of (Mellish, 1988) tbr 
compiling finite domains such as index agreement 
into booh;an vectors for fast unification. 
In the second stage, tlle resulting I)C(\] contain- 
ing only Prolog terms is COml)ih',d sel)a.rately by 
the SAX l, rmmlator t'or pa,rsing mid 1)y the SGX 
trallsl&tor for generation. (~rgtHin&r ules Call 1)e 
labelled to be compiled only by SAX or only by 
SGX, st) thai, parsing could for e, xaml)le use some 
rules with wider coverage l;han others used in gen- 
ergttion, while sharing I\[IOSt of the gra, innl&r. 
Like the earlier BUP parser, the SAX transla- 
t;or uses t)art;ial execution to t)roduee fficient code 
for bol;1;om-ut) (:hart t)arsing. The SGX transla, tor 
eontl)iles tal)les of chain rules and also uses partial 
ex(~eution to l)rt)dut:e fliehmt code for Sill) (:ha,rt 
ge, ncration. 
1.4 Lex icon compi la t ion  
We, do not compile tile lexicon off:line ill/;() a static 
list of signs. Instead, the existence of a lexieal sign 
is proved on-line by lexical inlhrence rules. We 
specify a morph, ological lexicon inl;erfiu:e 
morph_ lex(Forn , ,  Cat,  \[LF, Sign\]) 
where N) rm is ~.~ specific morl)hological form, and 
Sign is a typed li,~atut'e structure. A lexieal infer- 
ence ruh, is shown in simplified form in Figure 2. 
In ProFIT,  sorts axe writl;en as <sort  and fea- 
tures as feature  ! value. 
morph_lex(Vbse, word, \[ i f(Cont), 
synsem!loc!( 
cat!(head!(vform!<bse & 
aux!<n & inv!<n) & 
subcat!@listl(loc!( 
cat!(head!<noun 
subcat!<elist 
cont!(Subj  g 
index!<ref))) )  
cont!(Cont ~ <psoa & 
quants!<el is t  & 
nuc leus! ( re ln!Re ln  
Role!Subj) ) ) \ ] )  
verb(Vbse, Rein, \[np/Role\]). 
Figure 2: A morphJex rule for a verb base form 
759 
We use lexical inference rules to derive flfll 
HPSG lexical signs from a database of simple Pro- 
log clauses. Such rules can partially re-use avail- 
able non-HPSG lexical information. The example 
assumes a lexical entry such as 
verb(walk, walk1, \[np/agent\]) 
specifying a verb with base form walJg and sense, 
walk1, which subcategorizes for a noun phrase 
subject assigned to a thematic role agent. 
We also use rules like normal HPSG lexical 
rules, to derive new signs fl'om other lexical signs 
for morphological derivations, complement extrac- 
tion and so on. We have no automatic defaults, 
so these rules must be written carefully. The sim- 
plified example in Figure 3 instantiates nomina- 
tive and 3rd singular in the first subcat item, and 
copies the rest of subcat by unification. 
morph_lex(V3sg, word, \[if(Cont), 
synsem!loc!( 
cat!(head!(vform!<fin 
aux!<n & inv!<n) 
subcat!(first!loc!( 
cat!(head!case!<nom 
subcat!<elist) 
cont!(Subject 
index!agr!(3&sg))) 
rest!Rest)) 
cont!(Cont & nucleus!reln!Reln))\]) 
morph_lex(Vbse, word, \[if(Cont), 
synsem!loc!( 
cat!(head!(vform!<bse 
aux!<n & inv!<n) 
subcat!(first!loc!( 
cat!(head!<noun 
subcat!<elist) 
cont!Subject) g 
rest!Rest)) 
cont!Cont)\]), 
morph_infl(verb_3sg, Vbse, Reln, V3sg). 
Figure 3: Lexical rule for 3rd singular verb form 
The typed feature structures in the lexical rules 
are compiled by ProF IT  into Prolog terms. The 
resulting rules arc then compiled by SICStus Pro- 
log, together with the database of simple lexical 
entries. 
2 Delayed lexical choice 
Delayed lexical choice is an established technique 
in natural language generation. When a back- 
tracking algorithm is combined with a lexicon of 
morphological forms, there is considerable non- 
determinism during syntactic generation, because 
features required for a deterministic choice of mor- 
phological form are not yet instantiated. With de- 
layed lexical choice, a lexicon of stems is used dur- 
ing syntactic generation, and the choice of mor- 
phological form is delayed to a postprocess. In- 
stead of producing a string of word forms, syntac- 
tic generation produces a string of lexical items. 
The morphological postprocess converts the lexi- 
cal items to final lexical forms, when all required 
syntactic features have become instantiated. 
2.1 Monotonicity 
Describing the implementation of delayed lexical 
choice in the MiMo2 system, Shieber et al (1990) 
pointed out that only monotonic rules (which tilt- 
ther instantiate the feature structure of a lcxi- 
cal item but do not change it) can be delayed. 
For example, the choice of singular or plural verb 
i'orm can be delayed until after the subject has 
been generated, by perforIning syntactic genera- 
tion with a lexical item based on the verb stem, 
which does not specify singular or plural. By con- 
trast, a lexical rule for passivization which changes 
the order of items on the subcat list is nonmono- 
tonic. Both the active and the passive variants 
must be made available as distinct lexical items 
during syntactic generation, a 
In an inheritance-based typed feature formal- 
ism, monotonicity is tmilt into the subsumption 
relation in the sort hierarchy. A sort subsumes 
its subsorts, which may further instantiate its fea- 
tures, but cannot change them. We exploit tile 
monotonicity of subsumption i the sort hierarchy 
in our implementation of delayed lexical choice. 
2.2 Syntactic-semantic lexicon 
In place of the MiMo2 lexicon of stems, we specify 
a syntactic-semantic lezicon interface 
synsemJex(Lex, Cat, \[LF, Sign\]) 
where Lex has no significance for generation. En- 
tries in tile syntactic-seInantic lexicon are derived 
by a small number of lexical rules from entries 
in the morphological lexicon. Like the morphJex 
rules, the synsem_lex rules are compiled first, by 
ProFIT and then by SICStus Prolog. 
To implement delayed lexical choice, we use the 
synsem_lex interface during syntactic generation, 
and then use the morph_lex interface in the mor- 
phological postprocess. We must therefore nsure 
that the delayed morph_lex rules will be mono- 
tonic. We do that by ensuring that tile synsem_tex 
entries subsume the morphJex entries from which 
they are derived. 
Figure 4 shows a simplified form of a synsem_lex 
rule for verbs. The rule derives the synsemJex en- 
try from tile morphJex base form entry, in which 
vform has a vahm of sort <bse. The subcat  of the 
synsem_lex entry is unified with the subcat  of the 
awe currently make such variants available via al- 
ternative forms of the lexicon access rule (Section 2.3). 
This could be improved by using constraints to enable 
subcat-changing rules to be delayed (van Noord and 
Bouma, 1994; Meurers and Minnen, 1995). 
760 
morph_lex entry, so that the synsem_lex entry sub- 
categorizes for the appropriate synt;actic omple- 
inents. The morptl_lex base form entry is used so 
that the agreement Datures of tile subject, will not 
t)c restricted. The content  vahte, s are also unified, 
so that the synseni_lex entry inchldes the appro- 
I)riate semantic roles. However, the head Datures 
are not unified. Tile synsemJex vform has a value. 
of sort <vform, wtfich is tim immediate supersort 
of the mort)hJex vform sort, <bse. Instead of flfll 
unification, the synselnJex hea(l feat,ures ut)sumc 
those of the morI)hJex entry. 
synsem_ lex(Lex ,  word, \[If(Cont g <psoa), 
synsem!loc!( 
cat!(head!(vform!<vform 
aux!<n & inv!<n) 
subcat!Subcat) 
cont!Cont)\]) 
morph_lex(Lex, word, \[if(Cont), 
synsem!loc!( 
cat!(head!(vform!<bse 
aux!<n & inv!<n) 
subcat!Subcat) 
cont!Cont)\]). 
Figure. 4: A synsem_le.x rule for verbs 
2.3 Grammar- lex icon  in ter face  
In I)CG-based systems, the interface between the 
grammar and the lexicon can often }m speciiied by 
a DCG rule which accesses the lexicon by means 
of an extra condition. In our fl'amework, such a 
rule might, be: 
word (S ign) /LF  - -> 
\[Word\] , 
{morph_lex(Word, word, \[LF, Sign\])}. 
Ilowevcr, since our concurrent t)roeessing algo- 
rithms require extra conditions to be determinis- 
tic, such a rule would find only one lexical entry 
(the first unifiable one), which would depend on 
the order of lexical rules and lexical entries. 
For parsing this is not a problem because, like 
CLE, wc use a morphological preprocess which 
performs lexicon access, building a morpheme lat- 
tice to be passed to the syntactic parsing pro- 
tess. Lexicon access is therefore separated from 
the parsing algorithm, and is not required to be 
deterministic. 
For generation with delayed lexical choice, we 
use a modified form of the nile: 
sgx word(S ign) /LF  - -> 
\[Sign\], 
{synsem_lex(Word, word, \[LF, Sign\])}. 
The label 'sgx' shows that the rule is to be com- 
piled only by SGX, not by SAX. It differs from the 
previous rule not only by accessing the synt,act,ic- 
semantic lexicon instead of dm morphological lex- 
icon, but also by speci\[ying that the lexical item 
is \[Sign\] instead of \[Word\]. That is, the output of 
syntactic geueration is a string of HPSG signs. 
2.4 Semant ic  head-dr iven  generat ion  
When syntactic generation begins, the StlD algo- 
rithm uses chain rules (like the rule ill Figure 1) to 
identify tim piw)t, the semantic head of the scn- 
t,ence. The synsem lex entry for the pivot is then 
accessed by the. extra condition in tile DCG rule 
above.. 
Since the synsem_lex entry for verbs (Figure 4) 
does not specify subject agreement or vform sub- 
type, but does specify subcategorization a d se- 
mantic roles, it can be used equally well as the sc.- 
mantle head to drive syntactic generation of, say, 
a 3rd-singular finite clause or an infinitival eom- 
t)lemt;nt. Since a single entry ('.all be used in this 
way, the extra condition can be detcrtninist,ic, as 
required. 
If the verb is the head of an infinitiwll con> 
p\]enlent, its vfornl l/econles ilmtant,iat,ed to <bse 
fl'om subcategorization by the auxiliary to. If t,hc 
vert) is the head of tlte main clause, its vform be- 
eonms instantiated to <f in (finite) by a rule R)r 
grammatical mfit,s in our grantmar. 4 
After syntactic generation, the string of I{PSG 
signs is conw~rted to a string of word forms by a 
morphological t)ostprocess, which unifies the signs 
with entries in the. inorphological lexicon. As the 
signs are t\]llly instantiated uring syntactic gen- 
eration, this postprocess i  also deterministic. 
a Revers ib le  delayed lexical choice 
Most forms of robust parsing are based on coil- 
straint, relaxation. Our approactl to delayed lexi- 
cal choice is based on using less instantiated signs 
flom the syntactic-semantic lexicon, rather than 
the more instant,iated signs from the morpholog- 
ical lexicon. Tiffs can be viewed as equivalent to 
constraint, re.laxation. It therefore seelns reason- 
able to consider eversing the approach, using de- 
layed lexical choice for parsing. 
Constraint, relaxer,ion in parsing typically has 
a two-pass approach. Strict parsing is attempted 
with normal gralmnar ules and the normal pars- 
ing algorithm. If strict parsing fails to produce a 
parse, relaxed parsing is attempted, using a mod- 
ified algorithm or modified grammar ules. With 
a lexicalist grammar like HPSG it seems more ap- 
propriate to use modified lexical rules, as in our 
syntactic-semantic lexicon. 
4In addition to the HPSG categories word and 
phrase, we have a category gram_unit for grammati- 
cal units which can be uttered independently. These 
include finite sentences, accusative NPs, and others. 
The rule for gram_unit thus instantiates certain tha- 
I, ures which arc" required for well-formed generation. 
761 
However, in our approach to delayed lexieal 
ehoice we do not start with strict constraints and 
then relax them. On the contrary, we start with 
relaxed constraints from less instantiated signs 
and then further instantiate the signs as other con- 
straints become available. Our approach is there- 
fore incremental description refinement (Mellish, 
1988) rather than constraint relaxation. 
3.1 Parsing and generation with delay 
When the syntactic-semantic lexicon is used for 
generation, tile logical form is the retriewfl key, 
and the name of the lexeme is irrelewmt. In tile 
interface synseIn_lex(Lex, word, \[LF, Sign\]), 
the variable Lex does not need to be unified with 
the name of the morpheme in tile morph_lex entry, 
and could be given another value, such as "verb". 
However, if we use the syntactic-semantic lexicon 
for parsing, tile value of this variable will be the 
retrieval key. If the value is taken directly from 
the words of the input string, it will not necessar- 
ily unify with the name of the morpheme in the 
morph_lex entry. 
In the case of verbs (Figure 4), where the input 
word may be an inflected form but the synsem_lex 
entry uses the morphJex entry for the base form, 
we nmst first use the morphological preprocess to 
obtain tile "root" form of the word, which is the 
same as the base form. We then use tile root form 
instead of the input form as the retrieval key. In 
the ease of pronouns, which take different forms 
according to case and reflexivity but have no nat- 
ural root form, the input form is used directly as 
the retrieval key (Section 3.2). 
Since the synsem_lex entry for verbs in Fig- 
ure 4 does not restrict subject agreement, an ill- 
formed input with ineorrect subject-verb agree- 
ment is parsed in exactly the same way as a well- 
formed intmt. The'subject agreement in the verb's 
sign remains uninstantiated until the subject and 
the verb phrase are combined by Schema 1, when 
the agreement features are instantiated to those 
of the subject. So "she swim" is accepted, but 
only "she swims" is generated ill a finite clause. 
Tile synsemAex entry in Figure 4 also does not, 
restrict vform, which remains uninstantiated until 
the verb phrase is combined into a larger phrase. 
So "she can swimming" is accepted, but only "she 
can swim" is generated, since "can" subeatego- 
rizes for a VP with vform of sort, <bse. 
3.2 Experimenting with delay 
Of course, difl'erent specifications in tile rules for 
the syntactic-semantic lexicon produce different 
etfects. In tile synsem_lex entry for pronouns in 
Figure 5, instead of unifying tile head feature case 
with the morphJex entry, the head is specified 
only as sort <noun, leaving the case unspecified. 
There are distinct morphJex entries for nomina- 
tive and accusative forms of personal pronouns, 
but it is irrelevant which one happens to be found 
when the rule is executed, because the rule does 
not unify the head features which include case. 
So the synsem_lex entry can be used deterministi- 
(:ally for syntactic generation, leaving tile case to 
be instantiated from subcategorization by a verb 
or preposition. 
In parsing, tile effect of this form of the rule 
is that the case of an input, pronoun is ignored. 
Whether this is good or bad depends oil both the 
language and tile level of relaxation desired. This 
form of the rule would clearly be unsuitable tbr 
free word order languages, but seems useful for 
English, accepting "for yon and I" but generating 
'~for  you  and  n le  '~ . 
synsem_lex(Lex, word, \[if(SynsemCont), 
synsem!loc!( 
cat!(head!<noun 
subcat!<elist) 
cont!(SynsemCont & <pron 
index!Index 
restr!<elist))\]) 
:- 
morph_lex(Lex, word, \[if(MorphCont), 
synsem!loc!( 
cat!(head!<noun 
subcat!<elist) 
cont!(MorphCont ~ <pron 
index!Index 
restr!<elist))\]). 
Figure 5: A synsem_lex rule for pronouns 
In Figure 5, the synsem_lex content  value is not 
unified with the morphJex content  vahm. Only 
the index values are unified, including tile gender, 
number and person features essential for pronouns 
(tile res t r  vahms are e lnpty lists). The  contant  
values are constrained only to be of sort <pron 
(pronominal). Ill the sort hierarchy, <pron has 
subsorts <ana (anaphoric) and <ppro (personal- 
pronominal), and <ana has its own subsorts <ref  1 
(reflexive) and <recp (reciprocal). HPSG binding 
theory is based on these sortal distinctions, which 
are part of the content value. 
Again, there are distinct morphJex entries for 
reflexive and personal-pronominal forms, but, it is 
irrelevant which one happens to be found when the 
rule is executed, because the rule does not unify 
the content  values. Therefore the synsemJex en- 
try can be used deterministically for syntactic gem 
eration before the sort, becomes instantiated to 
<ana or <ppro by the binding principles. 
Tile effect of this form of tile rule is to relax the 
binding constraints in parsing, accepting "I saw 
me" but generating "I saw myself". Of course tile 
distinction between "They saw themselves" (co- 
indexed) and "They saw them" (eontra-indexed) 
is also lost in parsing with this version. The bind- 
762 
ing constraints can l)e re-instated simply by unify- 
ing the content  values in the rule, but the above 
version is not neee.ssarily bad, for example in pars- 
ing non-native English. The rule could t)e im- 
t)roved by having alternative forms which distin- 
guish ard and non-ard person. 
4 Conclusion 
Our fralnework seeks to combille the elegance of 
a typed feature fornlalisln and IIPSG syntactic 
theory with efficient processing. The ProFIT sys- 
tem gives an efticient encoding of typed feature 
structures. The SAX and SGX systems use an ef- 
ficient (:hart implementation, and their concurrent 
processing algorithms give turther motivation for 
eliminating enlpty categories and reducing non- 
determinism. 
Wc have addressed the issue of bidirectional use 
of shared linguistic descril)tions, rather than ro- 
bust parsing. Itowevcr, the idea of using delwed 
lexical choice in reverse makes it possible, widlout 
modifying the parsing and generation algorithms, 
to parse certain types of ill-formed inputs and to 
generate corresponding well-formed outpul, s, us- 
ing the same shared linguistic descril)tions. 
Acknowledgements 
The first author would like to thank Mr Ilitoshi 
Suzuki (Sharp Cort)oration ) and Prof aun-ichi 
Tsujii (UMIST) for making this work possible. We 
also thank Dr Kristiina aokinen (NAIST) and the 
anonymous reviewers for valuable conlinetll;s. 
References 
Hiyan Alshawi, editor. 1992. The Core Language 
Engine. The MIT Press. 
Yasuharu l)en. 1994. Generalized chart algo- 
rithm: an efficient )rocedure for cost-based ab- 
duction. In 32nd Annual Meeting of the Associ- 
ation for Computational Linguistics, pages 218 
225. Association for Computational Linguistics. 
Gregor Erbaeh. 1995. ProFIT: Prolog with Fea- 
tures, Inheritance, and Templates. In Seve'nth 
Conference of the European Chapter of the As- 
sociation fin" Computational Linguistics. Asso- 
ciation for Computational Linguistics. 
Masahiko Haruno, Yasuhm'u Den, Yuji Matsu- 
mote, and Makoto Nagao. 1993. Bidirectional 
chart gene.ratioil of natural language texts. In 
Proceedings of the Eleventh National Confer- 
ertcc on Artificial lntclligence, pages 350 356. 
AAAI Press/The MIT Press. 
Osamu hnaichi and Yuji Matsumoto. 1995. In- 
tegration of syntactic, semantic and contex- 
tual information in processing rammaticMly 
ill-fi)rmed inputs, in I)~vccedings of the Four- 
teenth International Joint Conference on Arti- 
ficial lntelligenes, pages 1435 40. 
Yuji Matsumoto and \]{yoichi Suginmra. 1987. 
A parsing system based on logic programming. 
In Proceedings of the Tenth International Joint 
Conference on ArliJieial Intelligence, volmne 2, 
pages 671 4. 
Yuji Matsumoto, Yasuharu l)en, and Takehito 
Utsuro, 199,1. Koubun kaiseki shisutem'a SAX, 
shiyou setsumcisho (Parsing system SAX Man- 
hal) w'.rsio'u 2.1. Nm'a Institute of Sci('nc(~ and 
Technoh)gy. 
Christoph(:r S. Mellish. 1988. hnph'mcnting sys- 
temic classification |)y mfitication. Compv.ta- 
tional Linguistic, 14(1):40 51. 
W. Detmar Meurers an(\[ Guido Minnen. 1995. A 
(:omputational treatment of IIPSG lexical rules 
as cow~riation i  lexical entries. In Proceedings 
of the I~fth International Workshop on Natural 
Language Understanding and Logic l'rogram- 
ruing, Lisbon, Portugal. 
Carl Pollard and Ivan Sag. 1994. Head-driven 
Phrase Structure Grammar. University l'ress, 
Chicago. 
Ivan Sag. 1995. English relativ( ? (:lausc construe- 
dons. Unpublished inanuscript. 
Stuart M. Shiet)er, Gertjan wm Noord, Fer- 
nando C.N. P(;reira, and l{obert C. Moore. 
1990. Semantic head-driven generation. Con> 
putational Linguistics, 16(1):30 42. 
Gertjan van Noord and Gosse Bouina. 1994. 
Adjuncts and the 1)recessing of lexical rules. 
In 15th International Conference on ComFu- 
rational Linguistics. Association for Computa- 
tional IAnguistics. 
763 
