Synchronous Models of Language 
Owen Rambow 
CoGenTex,  Inc. 
840 Hanshaw Road,  Suite 11 
I thaca,  NY 14850-1589 
owen@cogentex, com 
Giorgio Satta 
Dipart imento  di E let t ron ica ed In format ica 
Universit~ di Padova  
via Gradenigo,  6 /A  
1-35131 Padova,  I ta ly 
satta@dei, unipd, it 
Abstract 
In synchronous rewriting, the productions 
of two rewriting systems are paired and 
applied synchronously in the derivation of 
a pair of strings. We present a new syn- 
chronous rewriting system and argue that 
it can handle certain phenomena that are 
not covered by existing synchronous ys- 
tems. We also prove some interesting for- 
mal/computational properties of our sys- 
tem. 
1 Introduction 
Much of theoretical linguistics can be formulated in 
a very natural manner as stating correspondences 
(translations) between layers of representation; for 
example, related interface layers LF and PF in GB 
and Minimalism (Chomsky, 1993), semantic and 
syntactic information in HPSG (Pollard and Sag, 
1994), or the different structures such as c-structure 
and f-structure in LFG (Bresnan and Kaplan, 1982). 
Similarly, many problems in natural language pro- 
cessing, in particular parsing and generation, can be 
expressed as transductions, which are calculations 
of such correspondences. There is therefore a great 
need for formal models of corresponding levels of 
representation, and for corresponding algorithms for 
transduction. 
Several different ransduction systems have been 
used in the past by the computational nd theoret- 
ical linguistics communities. These systems have 
been borrowed from translation theory, a subfield 
of formal language theory, or have been originally 
(and sometimes redundantly) developed. Finite 
state transducers (for an overview, see, e.g., (Aho 
and Ullman, 1972)) provide translations between 
regular languages. These devices have been pop- 
ular in computational morphology and computa- 
tional phonology since the early eighties (Kosken- 
niemi, 1983; Kaplan and Kay, 1994), and more re- 
cently in parsing as well (see, e.g., (Gross, 1989; 
Pereira, 1991; Roche, 1993)). Pushdown transduc- 
ers and syntax directed translation schemata (SDTS) 
(Aho and Ullman, 1969) translate between context- 
free languages and are therefore more powerful than 
finite state transducers. Pushdown transducers are 
a standard model for parsing, and have also been 
used (usually implicitly) in speech understanding. 
Recently, variants of SDTS have been proposed as 
models for simultaneously bracketing parallel cor- 
pora (Wu, 1995). Synchronization of tree adjoin- 
ing grammars (TAGs) (Shieber and Schabes, 1990; 
Shieber, 1994) are even more powerful than the pre- 
vious formalisms, and have been applied in machine 
translation (Abeill6, Schabes, and Joshi, 1990; Egedi 
and Palmer, 1994; Harbusch and Poller, 1994; Pri- 
gent, 1994), natural language generation (Shieber 
and Schabes, 1991), and theoretical syntax (Abeilld, 
1994). The common underlying idea in all of these 
formalisms is to combine two generative devices 
through a pairing of their productions (or, in the 
case of the corresponding automata, of their tran- 
sitions) in such a way that right-hand side nonter- 
minal symbols in the paired productions are linked. 
The processes of derivation proceed synchronously 
in the two devices by applying the paired grammar 
rules only to linked nonterminals introduced previ- 
ously in the derivation. The fact that the above sys- 
tems all reflect the same translation technique has 
not always been recognized in the computational lin- 
guistics literature. Following (Shieber and Schabes, 
1990) we will refer to the general approach as syn- 
chronous rewriting. While synchronous systems are 
becoming more and more popular, surprisingly little 
is known about the formal characteristics of these 
systems (with the exception of the finite-state de- 
vices). 
In this paper, we argue that existing synchronous 
systems cannot handle, in a computationally attrac- 
116 
tive way, a standard problem in syntax/semantics 
translation, namely quantifier scoping. We propose 
a new system that provides a synchronization be- 
tween two unordered vector grammars with domi- 
nance links (UVG-DL) (Rainbow, 1994). The type 
of synchronization is closely based on a previously 
proposed model, which we will call "local" synchro- 
nization. We argue that this synchronous system can 
deal with quantifier scoping in the desired way. The 
proposed system has the weak language preservation 
property, that is, the defined synchronization mech- 
anism does not alter the weak generative capacity 
of the formalism being synchronized. Furthermore, 
the tree-to-forest translation problem for our system 
can be solved in polynomial time; that is, given a 
derivation tree obtained according to one of the syn- 
chronized grammars, we can construct he forest of 
all the translated erivation trees in the other gram- 
mar, using a polynomial amount of time. 
The structure of this paper is as follows. In Sec- 
tion 2, we introduce quantifier aising and review 
two types of synchronization a d mention some new 
formal results. We introduce our new synchronous 
system in Section 3, and present our formal results 
and outline the proof techniques in Section 4. 
2 Types  o f  Synchron izat ion  
2.1 Quantifier Raising 
We start by presenting an example which is based 
on transfer between a syntactic representation a d 
a "semantic" representation f the scoping of quan- 
tified NPs. It is generally assumed that in English 
(and many other languages), quantified arguments 
of a verb can (in appropriate contexts) take scope 
in any possible order, and that this generalization 
extends to cases of embedded clauses (May, 1985). 1
For example, sentence (1) can have four possible in- 
terpretations (of the six possible orderings of the 
quantifiers, two pairs are logically equivalent), two 
of which are shown in (2). 
(1) Every man thinks some official said some Nor- 
wegian arrived 
(2) a. Vx, x a man, 3y, y an official, 3z, z a Nor- 
wegian, x thinks y said z arrived 
b. 3z, z a Norwegian, 3y, y an official, Vx, x a 
man, x thinks y said z arrived 
~We explicitly exclude from our analysis cases of 
quantified NPs embedded in NPs, and do not, of course, 
propose to develop a serious linguistic theory of quanti- 
fier scoping. 
We give a simplified syntactic representation for 
(1) in Figure 1, and a simplified semantic represen- 
tation for (2b) in Figure 2. 
S 
every man VP 
thinks S 
some official VP  
said S 
some Norwegian arrived 
Figure 1: Syntactic representation for (1) 
F 
exists z, F 
z a Norwegian 
exists y, F 
y an official 
for all x, F 
x a man 
think T F 
X 
say T F 
' 
Y arrive T 
I 
g 
Figure 2: Semantic representation for (2b) 
2.2 Non-Local Synchronization 
We will first discuss a type of synchronization pro- 
posed by (Shieber and Schabes, 1990), based on 
TAG.  We will refer to this system as non-local syn- 
chronous TAG (nISynchTAG). The synchronization 
is non-local in the sense that once links are intro- 
duced during a derivation by a synchronized pair of 
grammar rules, they need not continue to impinge on 
the nodes that introduced them: the links may be re- 
assigned to a newly introduced nonterminal when an 
original node is rewritten. We will refer to this mecl/- 
anism as link inheritance. To illustrate, we will give 
as an example an analysis of the quantifier-raising 
example introduced above, extending in a natural 
manner an example given by Shieber and Schabes. 
The elementary structures are shown in Figure 3 
(we only give one NP - -  the others are similar). The 
nominal arguments in the syntax are associated with 
117 
NP F F 
t { t 
every man for all x, F x 
l am~ 
Figure 3: Elementary structures in nlSynchTAG 
pairs of trees in the semantics, and are linked to two 
nodes, the quantifier and the variable. The deriva- 
tion proceeds as illustrated in Figure 4, finally yield- 
ing the two structures inFigure 1 and Figure 2. Note 
that some of the links originating with the NP nodes 
are inherited uring the derivation. By changing the 
order in which we add the nominal arguments at the 
end of the derivation, we can obtain all quantifier 
scopes in the semantics. 
The problem with non-local synchronization is 
that the weak language preservation property does 
not hold. (Shieber, 1994) shows that not all 
nlSynchTAG left-projection languages can be gen- 
erated by TAGs. As a new result, in (Rambow and 
Satta, 1996) we show that the recognition of some 
fixed left-projection languages of a nlSynchTAG is 
NP-complete. Our reduction crucially relies on link 
inheritance. This makes nlSynchTAG unattractive 
for applications in theoretical or computational lin- 
guistics. 
2.3 Local Synchronous Systems 
In contrast with non-local synchronization, i  local 
synchronization there is no inheritance of synchro- 
nization links. This is enforced by requiring that 
the links establish a bijection between onterminals 
in the two synchronously derived sentential forms, 
that is, each nonterminal must be involved in exactly 
one link. In this way, once a nonterminal is rewrit- 
ten through the application of a pair of rules to two 
NP ~ arrive T 
( 
Figure 4: Non-local derivation in nlSynchTAG 
linked nonterminals, no additional link remains to 
be transferred tothe newly introduced nonterminals. 
As a consequence of this, the derivation structures in
the left and right grammars are always isomorphic 
(up to ordering and labeling of nodes). 
The canonical example of local synchronization 
is SDTS (Aho and Ullman, 1969), in which two 
context-free grammars are synchronized. We give 
an example of an SDTS and a derivation in Fig- 
ure 5. The links are indicated as boxed numbers 
to the right of the nonterminal to which they ap- 
ply. (Shieber, 1994) defines the tree-rewriting ver- 
sion of SDTS, which we will call synchronous TAG 
(SynchTAG), and argues that SynchTAG does not 
have the formal problems of nlSynchTAG (though 
118 
Grammar: 
NPS? likes NP\[  
NP4~ -+ John 
NP_~ -~ the white N~ 
NL~ j --~ house 
Derivation: 
(SE\], Sg\]) 
==~(NPE\] likes NEE\], NP\[~\] pla~t a NP\[~\]) 
:::=~(NP\[~\] likes the white N~,  la N~ blanche plai~ d 
NP\[-;\]) 
(John likes the white house, la maison blanche 
pla~t d Jean) 
Figure 5: Sample SDTS and derivation 
S \ [~ NPE\] pla~t ~ NPF1 
NP\[4\[ -+ Jean 
NP~ -~ la N~ blanche 
NIT \] --~ rnaison 
(Shieber, 1994) studies the translation problem mak- 
ing the unappealing assumption that each tree in the 
input grammar is associated with only one output 
grammar tree). 
However, SynchTAG cannot derive all possible 
scope orderings, because of the locality restriction. 
This can be shown by adapting the proof technique 
in (Becker, Rambow, and Niv, 1992). In the follow- 
ing section, we will present a synchronous system 
which has local synchronization's formal advantages, 
but handles the scoping data. 
3 Extended Local Synchron izat ion  
In this section, we propose a new synchronous sys- 
tem, which is based on local synchronization of
unordered vector grammars with dominance links 
(UVG-DL) (Rambow, 1994). The presentations will 
be informal for reasons of space; we refer to (Ram- 
bow and Satta, 1996) for details. In UVG-DL, sev- 
eral context-free string rewriting rules are grouped 
into sets, called vectors. In a derivation, all or no 
rules from a given instance of a vector must be used. 
Put differently, all productions from a given vector 
must be used the same number of times. They can 
be applied in any order and need not be applied 
simultaneously or one right after the other. In addi- 
tion, UVG-DL has dominance links. An occurrence 
of a nonterminal A in the right-hand side of a rule p 
can be linked to the left-hand nonterminal ofanother 
rule p' in the same vector. This dominance link will 
act as a constraint on derivations: if p is used in 
a derivation, then p' must be used subsequently in 
the subderivation that starts with the occurrence of
A introduced by p. A UVG-DL is lexicalized iff at 
least one production in every vector contains a ter- 
minal symbol. Henceforth, all UVG-DLs mentioned 
in this paper will implicitly be assumed to be lex- 
icalized. The derivation structure of a UVG-DL is 
just the derivation structure of the same derivation 
in the underlying context-free grammar (the CFG 
obtained by forming the union of all vectors). We 
give an example of a UVG-DL in Figure 6, in which 
the dotted lines represent the dominance links. A 
sample derivation is in Figure 7. 
{ 
for all x, F x 
xaman '.,....' 
{ 
exists y, F i Y say T F 
y an official '.,. ,. '  
z a Norwegian :. 
. . .  
Figure 6: A UVG-DL for deriving semantic repre- 
sentations such as (2) 
Our proposal for the synchronization f two UVG- 
DL uses the notion of locality in synchronization, 
but with respect o entire vectors, not individual 
productions in these vectors. This approach, as we 
will see, gives us both the desired empirical coverage 
and acceptable computational nd formal results. 
We suppose that in each vector v of a UVG-DL there 
is exactly one privileged element, which we call the 
synchronous production of v. All other elements of 
v are referred to as asynchronous productions. In 
Figures 6 and 7, the synchronous productions are 
designated by a bold-italic left-hand side symbol. 
Furthermore, in the right-hand side of each asyn- 
chronous production of v we identify a single non- 
terminal nonterminal, called the heir. 
In a synchronous UVG-DL (SynchUVG-DL), vec- 
tors from one UVG-DL are synchronized with vec- 
tors from another UVG-DL. Two vectors are syn- 
chronized by specifying a bijective synchronization 
mapping (as in local synchronization) between the 
non-heir ight-hand side occurrences ofnonterminals 
in the productions of the two vectors. A nontermi- 
nal on which a synchronization li k impinges is re- 
ferred to as a synchronous nonterminal. A sample 
SynchUVG-DL grammar is shown in Figure 9. 
Informally speaking, during a SynchUVG-DL 
derivation, the two synchronous productions in a 
pair of synchronized vectors must be applied at 
the same time and must rewrite linked occurrences 
of nonterminals previously introduced. The asyn- 
chronous productions of the two synchronized gram- 
119 
mars are not subject o the synchronization require- 
ment, and they can be applied at any time and in- 
dependently of the other grammar (but of course 
subject to the grammar-specific dominance links). 
Any synchronous links that impinge on a nonter- 
minal rewritten by an asynchronous production are 
transferred to the heir of the asynchronous produc- 
tion. A production may introduce a synchronous 
nonterminal whose counterpart in the other gram- 
mar has not yet been introduced. In this case, the 
link remains "pending". Thus, while in SynchUVG- 
DL there is link inheritance as in non-local synchro- 
nization, link inheritance is only possible with those 
productions that themselves are not subject to the 
synchronization requirement. 
The locality of the synchronization becomes clear 
when we consider a new tree structure which we 
introduce here, called the vector derivation tree. 
Consider two synchronized UVG-DLderivations in a 
SynchUVG-DL. The vector derivation tree for either 
component derivation is obtained as follows. Each 
instance of a vector used in the derivation is repre- 
sented as a single node (which we label with that 
vector's lexeme). A node representing a vector vl 
is immediately dominated by the node representing 
the vector v2 which introduced the synchronization 
link that the synchronous production of vl rewrites. 
Unlike the standard erivation tree for UVG-DL, the 
vector derivation tree clearly shows how the vectors 
(rather than the component rules of the vectors) 
were combined during the derivation. The vector 
derivation tree for the derivation in Figure 7 is shown 
in Figure 8. 
F 
exists z, F 
z aNor~cg i~ .~-~.~ 
exists y, F ............ 
y an official a ~- - l l x ,  -F ....... "'"" . . . . . . . . . . .  . . 
l o t  , " ' " .  
x a man ~ . 
think T F ..' 
X 
say T F 
I 
Y arrive T 
I 
Z 
Figure 7: Derivation of (2b) in a UVG-DL 
It should be clear that the vector derivation trees 
for two synchronized derivations are isomorphic, re- 
flecting the fact that our definition of SynchUVG- 
think 
every man say 
exists arrive 
an official 
exists 
a Norwegian 
Figure 8: Vector derivation tree for derivation of 
(2b) 
DL is local with respect o vectors (though not with 
respect o productions, since the derivation trees of 
two synchronized UVG-DL derivations need not be 
isomorphic). The vector derivation tree can be seen 
as representing an "outline" for the derivation. Such 
a view is attractive from a linguistic perspective: if
each vector represents a lexeme and its projection 
(where the synchronous production is the basis of 
the lexical projection that the vector represents), 
then the vector derivation tree is in fact the depen- 
dency tree of the sentence (representing direct re- 
lations between lexemes uch as grammatical func- 
tion). In this respect, the vector derivation tree of 
UVG-DL is like the derivation tree of tree adjoining 
grammar and of D-tree grammars (DTG) (Rambow, 
Vijay-Shanker, and Weir, 1995), which is not sur- 
prising, since all three formalisms hare the same 
extended omain of locality. Furthermore, the vec- 
tor derivation tree of SynchUVG-DL shares with 
the the derivation tree of DTG the property that 
it reflects linguistic dependency uniformly; however, 
while the definition of DTG was motivated pre- 
cisely from considerations of dependency, the vector 
derivation tree is merely a by-product of our defi- 
nition of SynchUVG-DL, which was motivated from 
the desire to have a computationally tractable model 
of synchronization more powerful than SynchTAG.2 
We briefly discuss a sample derivation. We start 
with the two start symbols, which are linked. We 
then apply an asynchronous production from the se- 
mantic grammar. In Figure 10 (top) we see how 
the link is inherited by the heir nonterminal of the 
applied production. This step is repeated with two 
more asynchronous productions, yielding Figure 10 
(bottom). We now apply productions for the bodies 
of the clauses, but stop short before the two syn- 
chronous productions for the arrive clause, yielding 
Figure 11. We see the asynchronous production of 
the syntactic arrive vector has not only inherited the 
link to its heir nonterminal, but has introduced a link 
2We do not discuss modifiers in this paper for lack of 
space. 
1 20 
S F 
{ 
every man for all x, F* .: x 
x a Irmn :..... 
S-.. i ~" some officiall ~-  exists y, F* y 
y an official '. ./ ....* 
Figure 9: SynchUVG-DL grammar for quantifier 
scope disambiguation 
F 
S ~  exists z, F* 
F 
s ~ e X i s t s  z, F z a Norwegian ~ ........... 
exists y, F "'"'-.. 
y an official ~ . . .  ": 
for all x. F* 'i i 
Figure 10: SynchUVG-DL derivation, steps 1 and 2 
of its own. Since the semantic end of the link has 
not been introduced yet, the links remains "pend- 
ing" until that time. We then finish the derivation 
to obtain the two trees in Figure 1 and Figure 2, 
with no synchronization r dominance links left. 
4 Formal  resu l t s  
Theorem 1 SynchUVG-DL has the language 
preservation property. 
Proof  (outline). Let Gs be a SynchUVG-DL, G' 
and G" its left and right UVG-DL components, re- 
spectively. We construct a UVG-DL G generating 
the left-projection language of Gs. G uses all the 
S F 
NP VP exists z, F 
\[ ~ z a Norwegian ~ .............. 
\[ thinks S exists y, E.. "".. 
\[ ~ y an off,c,al ~ ...... "..... 
\[ NP VP for all x, F ""., "... 
/ ~ said S think T F / ".. 
Figure 11: SynchUVG-DL derivation, step 3 
nonterminal symbols of G' and G", and some com- 
pound nonterminals of the form \[A, B\], A and B 
nonterminals of G' and G", respectively. G simu- 
lates Gs derivations by intermixing symbols of G' 
and symbols of G", and without generating any of 
the terminal symbols of G". Most important, each 
pair of linked nonterminals generated by Gs is rep- 
resented by G using a compound symbol. This en- 
forces the requirement of simultaneous application 
of synchronous productions to linked nonterminals. 
Each vector v of G is constructed from a pair of 
synchronous vectors (v', v") of Gs as follows. First, 
all instances of nonterminals in v" are replaced by e. 
Furthermore, for any instance B of a right-hand side 
nonterminal of v" linked to a right-hand side non- 
terminal A of v', B is replaced by E and A by \[A, B\]. 
Then the two synchronous productions in v ~ and v" 
are composed into a single production in v, by com- 
posing the two left-hand sides in a compound symbol 
and by concatenating the two right-hand sides. Fi- 
nally, to simulate link inheritance in derivations of 
Gs, each asynchronous production in v' and v" is 
transferred to v, either without any change, or by 
composing with some nonterminal C both its left- 
hand side and the heir nonterminal in its right-hand 
side. Note that there are finitely many choices for 
the last step, and each choice gives a different vector 
in G, simulating the application of v' and v" to a set 
of (occurrences of) nonterminals in a particular link 
configuration i a sentential form of Gs. ? 
We now introduce a representation for sets of 
derivation trees in a UVG-DL G. A parse tree in 
G is an ordered tree representing a derivation in G 
and encoding at each node the production p used to 
start the corresponding subderivation and the mul- 
tiset of productions f used in that subderivation. A 
121 
parse forest in G is a directed acyclic graph which 
is ordered and bipartite. (We use ideas originally 
developed in (Lang, 1991) for the context-free case.) 
Nodes of the graph are of two different ypes, called 
and-nodes and or-nodes, respectively, and each di- 
rected arc connects nodes of different ypes. A parse 
forest in G represents a set T of parse trees in G if 
the following holds. When starting at a root node 
and walking through the graph, if we follow exactly 
one of the outgoing arcs at each or-node, and all of 
the outgoing arcs at each and-node, we obtain a tree 
in T modulo the removal of the or-nodes. Further- 
more, every tree in T can be obtained in this way. 
Lemma 2 Let G be a UVG-DL and let q >__ 1 be 
a natural number. The parse forest representing the 
set of all parse trees in G with no more than q vectors 
can be constructed in an amount of time bounded by 
a polynomial function of q. ? 
Let Gs be a SynchUVG-DL, G' and G" its left 
and right UVG-DL components, respectively. For 
a parse tree T in G', we denote as T(T) the set 
of all parse trees in G" that are synchronous with 
T according to Gs. The parse-to-forest translation 
problem for Gs takes as input a parse tree r in G' 
and gives as output a parse forest representation for 
T(T). If Gs is lexicalized, such a parse forest has size 
bounded by a polynomial function of I T I, despite the 
fact that the size of T(~) can be exponentially arger 
than the size of T. In fact, we have a stronger result. 
Theorem 3 The parse-to-forest translation prob- 
lem for a lexiealized SynchUVG-DL can be computed 
in polynomial time. 
Proof  (out l ine) .  Let Gs be a SynchUVG-DL 
with G' and G" its left and right UVG-DL com- 
ponents, respectively. Let T be a parse tree in G ~ 
and 7r be the parse forest representing T(T). The 
construction of 7r consists of two stages. 
In the first stage, we construct he vector deriva- 
tion tree 7 associated with T. Let q be the number 
of nodes of % We also construct a parse forest 7rq 
representing the set of all parse trees in G" with no 
more than q vectors. This stage takes polynomial 
time in the size of % since 3' can be constructed 
from r in linear time and 7rq can be constructed as 
in Lemma 2. 
In the second stage, we remove from 7rq all the 
parse trees not in 7r. This completes the construc- 
tion, since the set of parse trees represented by 7r is 
included in the set of parse trees represented by 7rq. 
Let nr and F be the root node and the set of all nodes 
of 7, respectively. For n E F, out(n) denotes the set 
of all children of n. We call family the set {n~} and 
any nonempty subset of out(n), n E F. The main 
idea is to associate a set of families ~n to each node 
n of 7rq, such that the following condition is satis- 
fied. A family F belongs to ~-n if and only if at least 
one subderivation i G" represented at n induces a 
forest of vector derivation trees whose root nodes 
are all and only the nodes in F. Each ~'n can eas- 
ily be computed visiting 7rq in a bottom-up fashion. 
Crucially, we "block" a node of 7rq if we fail in the 
construction of ~'n. We claim that each set ~'n has 
size bounded by the number of nodes in % This can 
be shown using the fact that all derivation trees rep- 
resented at a node of ~rq employ the same multiset of 
productions of G". From the above claim, it follows 
that 7rq can be processed in time polynomial in the 
size of r. Finally, we obtain 7r simply by removing 
from 7rq all nodes that have been blocked. ? 
5 Conc lus ion  
We have presented SynchUVG-DL, a synchronous 
system which has restricted formal power, is com- 
putationally tractable, and which handles the 
quantifier-raising data. In addition, SynchUVG-DL 
can be used for modeling the syntax of languages 
with syntactic constructions which have been ar- 
gued to be beyond the formal power of TAG, such 
as scrambling in German and many other lan- 
guages (Rainbow, 1994) or wh-movement in Kash- 
miri (Rambow, Vijay-Shanker, and Weir, 1995). 
SynchUVG-DL can be used to synchronize a syn- 
tactic grammar for these languages either with a se- 
mantic grammar, or with the syntactic grammar of 
another language for machine translation applica- 
tions. However, SynchUVG-DL cannot handle the 
list of cases listed in (Shieber, 1994). These pose a 
problem for SynchUVG-DL for the same reason that 
they pose a problem for other local synchronous sys- 
tems: the (syntactic) dependency structures repre- 
sented by the two derivations are different. These 
cases remain an open research issue. 
Acknowledgments  
Parts of the present research were done while Ram- 
bow was supported by the North Atlantic Treaty Or- 
ganization under a Grant awarded in 1993, while at 
TALANA, Universit6 Paris 7, and while Satta was 
visiting the Center for Language and Speech Pro- 
cessing, Johns Hopkins University, Baltimore, MD. 
References  
Abeill6, Anne. 1994. Syntax or semantics? Han- 
dling nonlocal dependencies with MCTAGs or 
122 
Synchronous TAGs. Computational Intelligence, 
10(4):471-485. 
Abeilld, Anne, Yves Schabes, and Aravind Joshi. 
1990. Using lexicalized TAGs for machine trans- 
lation. In Proceedings of the 13th International 
Conference on Computational Linguistics (COL- 
ING'90), Helsinki. COLING-90. 
Aho, A. V. and J. D. Ullman. 1969. Syntax di- 
rected translations and the pushdown assembler. 
J. Comput. Syst. Sci., 3(1):37-56. 
Aho, A. V. and J. D. Ullman. 1972. The Theory 
of Parsing, Translation, and Compiling. Prentice 
Hall, Englewood Cliffs, NJ. 
Becket, Tilman, Owen Rambow, and Michael Niv. 
1992. The derivational generative power, or, 
scrambling is beyond LCFRS. Technical Report 
IRCS-92-38, Institute for Research in Cognitive 
Science, University of Pennsylvania. 
Bresnan, J. and R. Kaplan. 1982. Lexical-functional 
grammar: A formal system for grammatical repre- 
sentation. In J. Bresnan, editor, The Mental Rep- 
resentation of Grammatical Relations. MIT Press. 
Chomsky, Noam. 1993. A minimalist program for 
linguistic theory. In Kenneth Hale and Samuel J. 
Keyser, editors, The View from Building 20. MIT 
Press, Cambridge, Mass., pages 1-52. 
Egedi, Dana and Martha Palmer. 1994. Constrain- 
ing lexical selection across languages using TAG. 
In 3 e Colloque International sur les Grammaires 
d'Arbres Adjoints (TAG+3), Rapport Technique 
TALANA-RT-94-01. Universit~ Paris 7. 
Gross, Maurice. 1989. The use of Finite-State Au- 
tomata in the lexical representation f natural lan- 
guage. In M. Gross and D. Perrin, editors, Elec- 
tronic Dictionaries and Automata in Computa- 
tional Linguistics. Springer. 
Harbusch, Karin and Peter Poller. 1994. Structural 
rewriting with synchronous rewriting systems. In 
3 ~ Colloque International sur les Grammaires 
d'Arbres Adjoints (TAG+3), Rapport Technique 
TALANA-RT-94-01. Universit~ Paris 7. 
Kaplan, Ronald M. and Martin Kay. 1994. Regular 
models of phonological rule systems. Computa- 
tional Linguistics, 20(3):331-378. 
Koskenniemi, Kimmo. 1983. Two-level morphol- 
ogy: A general computational model for word- 
form recognition and production. Technical Re- 
port 11, Department of General Linguistics, Uni- 
versity of Helsinki. 
Lang, B. 1991. Towards a uniform formal frame- 
work for parsing. In M. Tomita, editor, Current 
Issues in Parsing technology. Kluwer Academic 
Publishers, chapter 11, pages 153-171. 
May, Robert. 1985. Logical Form: Its structure and 
Derivation. MIT Press, Cambridge, Mass. 
Pereira, Fernando. 1991. Finite-state approxima- 
tion of phrase structure grammars. In 29th Meet- 
ing of the Association for Computational Linguis- 
tics (ACL'91), Berkeley, California. ACL. 
Pollard, Carl and Ivan Sag. 1994.  Head- 
Driven Phrase Structure Grammar. University of 
Chicago Press, Chicago. 
Prigent, Gilles. 1994. Synchronous tags and ma- 
chine translation. In 3 e Colloque International 
sur les Grammaires d'Arbres Adjoints (TAG+3), 
Rapport Technique TALANA-RT-94-01. Univer- 
sit~ Paris 7. 
Rambow, Owen. 1994. Multiset-valued linear index 
grammars. In 32nd Meeting of the Association for 
Computational Linguistics (.4 CL '94). ACL. 
Rambow, Owen and Giorgio Satta. 1996. Syn- 
chronous models of language. Manuscript under 
preparation. 
Rambow, Owen, K. Vijay-Shanker, and David Weir. 
1995. D-Tree Grammars. In 33rd Meeting 
of the Association for Computational Linguistics 
(.4 CL'95). ACL. 
Roche, Emmanuel. 1993.  Analyse syntaxique 
transformationelle dufran~ais par transducteur et
lexique-grammaire. Ph.D. thesis, Universitd Raris 
7, Paris, France. 
Shieber, Stuart and Yves Schabes. 1990. Syn- 
chronous tree adjoining rammars. In Proceedings 
of the 13th International Conference on Compu- 
tational Linguistics, Helsinki. 
Shieber, Stuart and Yves Schabes. 1991. Gener- 
ation and synchronous tree adjoining grammars. 
Computational Intelligence, 4(7):220-228. 
Shieber, Stuart B. 1994. Restricting the weak 
generative capacity of Synchronous Tree Ad- 
joining Grammar. Computational Intelligence, 
10(4):371-385. 
Wu, Dekai. 1995. An algorithm for simultane- 
ously bracketing parallel texts by aligning words. 
In 33rd Meeting of the Association for Computa- 
tional Linguistics (ACL '95). ACL. 
123 
