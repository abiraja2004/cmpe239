Proceedings of the 8th International Conference on Computational Semantics, pages 272?276,
Tilburg, January 2009. c?2009 International Conference on Computational Semantics
Flexible Semantic Composition with DUDES
Philipp Cimiano
Web Information Systems Group, TU Delft
1 DUDES
In this paper we present a novel formalism for semantic construction called
DUDES (Dependency-based Underspecified Discourse REpresentation
Structures). The DUDES formalism has been designed to overcome the
rigidity of semantic composition based on the lambda calculus (where the
order of application is typically fixed) and provides some flexibility with
respect to the direction of the dependence and with respect to the order
of application of arguments. In this short paper we present the DUDES
formalism and work through a simple example. DUDES bears some resem-
blance to the work on ?-DRT [2] and LUDs [1] as well as with the work
of Copestake et al [4] and represents a generalization of the formalism in-
troduced in [3]. A detailed discussion of the relation to these formalisms is
clearly out of the scope of this paper. DUDES are characterized by three
main facts. First, they represent semantic dependencies and are thus in-
herently suitable for a dependency-based grammar formalism assuming that
syntactic dependencies correspond to semantic dependencies (though the
correspondence might be ?inverted?). Second, they explicitly encode scope
relations and are thus able to yield underspecified representations as output
(in contrast to the linear logic approach for LFG [5] where different scopings
correspond to different derivations). Third, there is one single operation for
semantic composition which is, to some extent, order-independent (in con-
trast to traditional lambda-based formalisms) as well as flexible with respect
to the direction of the syntactic dependency. As the name suggests, DUDES
builds on DRT [6] and in particular on UDRT [7] in the sense that it relies on
labeled DRSs and dominance relations between these to talk about scope.
First of all, we now first formally introduce DUDES:
Definition 1 (DUDES)
A DUDES is a 7-tuple (m, l, t, U,A, S,C) consisting of
272
- A main discourse referent m and a distinguished label l
- The type t of the semantic structure (after inserting all arguments)
- A set U of UDRS components. These UDRS components are in essence
labeled DRSs [6].
- A set of argument quadruples (l, v, rel, type) consisting of i) a label l (the main label
of a DUDE inserted as argument, ii) the main variable v of the argument DUDE,
iii) a grammatical relation and iv) a semantic type.
- A set S of scope relations between labels introduced in U .
- A set C of constraints on the arguments, e.g. including ontological constraints or
selectional restrictions etc.
We now give the semantic representation of the entries for our running
example: ?John likes every nice woman.?:
John:
j l ??e, t?, t?
l:
j
John(j)
like:
e > t
>: , ?:
e:like(x,y)
(l
1
, x, subj, ??e, t?, t?), (l
2
, y, obj, ??e, t?, t?)
? ? scope(l
1
), l
1
? >,? ? scope(l
2
), l
2
? >
every:
x l ??e, t?, t?
l:
l
1
:
x
? l
2
:
(l?,x,spec,?e, t?)
l
?
? l
1
nice:
x l ?e, t?
l:
nice(x)
(l
?
, x,mod, ?e, t?)
l ? l
?
woman:
w l ?e, t?
l:
woman(w)
Further, we introduce the semantic composition operation for DUDES
along a dependency tree, distinguishing tree cases:
Definition 2 (Semantic Composition for DUDES)
Let (?
1
, ?
2
) be an edge in some DAG (dependency tree, LTAG derivation tree or F-
Structure DAG). Assume the edge is labeled with r (a grammatical function) and
the semantics of the vertices ?
1
and ?
2
are given by DUDEs as follows: ?
1
:=
(m
1
, l
1
, t
1
, U
1
, A
1
, S
1
, C
1
) and ?
2
= (m
2
, l
2
, t
2
, U
2
, A
2
, S
2
, C
2
). Then the result of applying
?
2
to ?
1
is the DUDE ?
?
= ?
1
(?
2
) = (m
?
, l
?
, t
?
, U
?
, A
?
, S, C
?
), where we need to distinguish
the following cases:
if (l, v, r, t
2
) ? A
1
if (l, v, r, t
1
) ? A
2
(t
1
= t
2
) if (l, v, r, t
1
) ? A
2
(t
1
6= t
2
)
(Complementation) (Modification) (Inversion)
m
?
:= m
1
m
?
:= m
1
m
?
:= m
2
t
?
:= t
1
t
?
:= t
1
t
?
:= t
2
U
?
:= U
1
? U
2
U
?
:= U
1
? U
2
U
?
:= U
1
? U
2
A
?
:= A
1
\{(l, v, r, t
2
)} A
?
:= A
1
A
?
:= A
2
\{(l, v, r, t
1
)}
S
?
:= S
1
? S
2
S
?
:= S
1
? S
2
S
?
:= S
1
? S
2
C
?
:= C
1
? C
2
C
?
:= C
1
? C
2
C
?
:= C
1
? C
2
v ? m
2
, l ? l
2
v ? m
1
(? m
2
), l ? l
1
v ? m
1
, l ? l
1
where ??? is the operation of unification between variables.
Concerning the order of application, from the definition of the seman-
tic composition operator it follows that complements and modifiers can be
applied in any order, but inversions have to be carried out at the end as
273
they change the mother DUDES and would thus inhibit the application of
the complements and the modifiers. In the following section we show how
the semantic composition operation defined above applies to a concrete ex-
ample. We will also discuss that our operations still work if (some of) the
dependencies are inverted.
2 A Worked Example
We will consider the two fol-
lowing (possible) analyses for
the sentence: ?John likes
every nice woman.?, corre-
sponding to the NP analysis
(a) and DP analysis (b), re-
spectively.
a)
like
subj
y
y
y
y
y
y
y
y
obj
E
E
E
E
E
E
E
E
john woman
spec
y
y
y
y
y
y
y
y
mod
E
E
E
E
E
E
E
E
every nice
b)
like
subj
y
y
y
y
y
y
y
y
obj
E
E
E
E
E
E
E
E
john every
spec
woman
mod
nice
2.1 Complementation
Given the dependency analysis in a) to the
right, as a result of applying our seman-
tic composition operator for the comple-
mentation case we get a DUDES where
the argument has been correctly inserted,
the DRS components and the scope condi-
tions have been merged and one argument
has been removed. Note that this was
possible because i) the edge was labeled
with the appropriate grammatical relation
?subj? and ii) the types of ?
2
and of the ar-
gument match (both are of type ??e, t?, t?).
The resulting DUDES for [[John likes]] is
shown in b) to the right. (In case of DRS
conditions which are not complex, we as-
sume that the functions ?res? and ?scope?
are resolved to the identity function.)
a)
e > t
>: , ?:
e:like(x,y)
(l
1
, x, subj, ??e, t?, t?), (l
2
, y, obj, ??e, t?, t?)
? ? scope(l
1
) ? >,? ? scope(l
2
) ? >
subj
j l ??e, t?, t?
l:
j
John(j)
b)
e > t
>: , ?:
e:like(j,y)
l
1
:
j
John(j)
(l
2
, y, obj, ??e, t?, t?)
? ? l
1
? >,? ? scope(l
2
) ? >
2.2 Specification and Modification
The two possible dependency analyses for determiner/noun constructions
give rise to two configurations, corresponding to a) and b) below, for the se-
mantic composition operator. In both cases, independent of the fact whether
274
the determiner is the dependent or the head, we get that first the semantic
representation of the adjective is applied to the one of the noun (as the mod-
ifier has to be applied before the inversion is carried out in configuration a),
thus yielding the two configurations in c) and d).
a)
w l ?e, t?
l:
woman(w)
spec
y
y
y
y
y
y
y
y
mod
E
E
E
E
E
E
E
E
x l ??e, t?, t?
l
1
:
x
? l
2
:
(l?,x,spec,?e, t?)
l
?
? l
1
x l ?e, t?
l:
nice(x)
(l
?
, x,mod, ?e, t?)
l ? l
?
b)
x l ??e, t?, t?
l
1
:
x
? l
2
:
(l?,x,spec,?e, t?)
l
?
? l
1
spec
w l ?e, t?
l:
woman(w)
mod
x l ?e, t?
l:
nice(x)
(l
?
, x,mod, ?e, t?)
l ? l
?
c)
w l ?e, t?
l:
woman(w)
,
l?:
nice(w)
l
?
? l
spec
x l ??e, t?, t?
l
1
:
x
?
l
2
:
(l?,x,spec,?e, t?)
l
?
? l
1
d)
x l ??e, t?, t?
l
1
:
x
?
l
2
:
(l?,x,spec,?e, t?)
l
?
? l
1
spec
w l ?e, t?
l:
woman(w)
,
l?:
nice(w)
l
?
? l
In case c) we have a case of inversion, while in case d) we have a case
of complementation. Overall, in both cases we yield the following DUDES:
[[every nice woman]]=
w l ??e, t?, t?
l
1
:
w
? l
2
: , l:
woman(w)
, l?:
nice(w)
l
?
? l, l ? l
1
2.3 Result
After a further semantic composition step (case complementation), applying
[[every nice woman]] (from Sec. 2.2) to [[John likes]] (from Sec. 2.1), we
yield as resulting UDRS:
275
e > t
>: , ?:
e:like(j,w)
, l
1
:
j
John(j)
l:
l
2
:
w
? l
3
:
, l?:
woman(w)
,
l?:
nice(w)
? ? l
1
? >,? ? l
3
, l ? >, l
?
? l
2
,l
??
? l
?
e
j
John(j)
w
?
woman(w)
nice(w)
e:like(j,w)
References
[1] J. Bos, B. Gamba?ck, C. Lieske, Y. Mori, M. Pinkal, and K. Worm. Compositional
semantics in verbmobil. In Proceedings of COLING?96, 1996.
[2] Johan Bos, Elsbeth Mastenbroek, Scott Mcglashan, Sebastian Millies, and Manfred
Pinkal. A compositional drs-based formalism for nlp applications. In Proceedings of
the International Workshop on Computational Semantics, 1994.
[3] P. Cimiano, A. Frank, and U. Reyle. UDRT-based semantics construction for LTAG
? and what it tells us about the role of adjunction in LTAG ?. In Proceedings of the
7th International Workshop on Computational Semantics, pages 41?52, 2007.
[4] Ann Copestake, Alex Lascarides, and Dan Flickinger. An algebra for semantic con-
struction in constraint-based grammars. In Proceedings of ACL?01, 2001.
[5] Mary Dalrymple, John Lamping, Fernando C. N. Pereira, and Vijay Saraswat. Linear
logic for meaning assembly. revised version of the (overview) paper in Proc. of the
Workshop on Computational Logic for Natural Language Processing, Edinburgh, UK.
1995., 2002.
[6] H. Kamp and U. Reyle. From Discourse to Logic. Kluwer, 1993.
[7] Uwe Reyle. Dealing with ambiguities by underspecification: Construction, represen-
tation and deduction. Journal of Semantics, 10(2):123?179, 1993.
276
