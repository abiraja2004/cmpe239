LESK: A LANGUAGE SYNT~TIZING NATURAL LANGUAGE, COMPUTER 
LANGUAGE AND LOGIC 
Douglas Skuce 
Dept. of Computer Sc ience ,  Un ivers i ty  of  Ottawa, Ottawa, 
Ontar io ,  Canada 
In t roduct ion  
LESK (Language fo r  Exact ly  3 ta t l~  Knowledge) i s  in tend-  
ed to br idge the cons iderab le  gap between natura l  language 
(I~L), computer lan6uage (CL) and log~tc. I t  i s  des i rab le  to  do  
so fo r  the fo l low ing  reason .  To implement any non- t r iv ia l  
computer system for  some problem domain, one must f i r s t  have 
a very  c lear  unders tand ing  of  the  domain concepts .  Usua l ly  the  
implementors do not  have th i s  knowledge, and must s t rugg le  to  
obta in  i t  from the domain exper ts ,  who are usua l ly  not comput- 
e r  exper ts .  Hence a means of  p rec i se  and e f f i c ient  knowledge 
express ion  would be very  use fu l .  No such too l  ex i s ts  today 
and we there fore  seek to  deve lop  one. LESK i s  a f i r s t  approx-  
imat ion  to such a medium for  knowledge capture .  
Anyone who has par t i c ipated  in  the des ign  of  any system 
where knowledge t rans fer  from exper ts  was invo lved  w i l l  appre -~ 
clare the need for such a tool. The existlng tools are the 
following: ~L, mathematical concepts and notation, computer 
concepts and notation, plus assorted devices llke dls4~ams, 
plctures, models, etc. By far the major tool is NL however, 
which i s  unfortunately very poorly used by most paople, part- 
icularly recent university @~aduates. The most frequent ezTors 
include the use of undefined termlnolo@~, synonyms or homon~ns 
(whose status as such must be guessed), unclear syntax, logical 
- 262 - 
er rors  (such as out r ight  cont rad ic t ions ) ,  undef ined re la t ions  
between concepts ,  and s?mp~e lack  of  good organ izat ion?  LESK 
fo rces  the user  to  express  h im/herse l f  izi ways des igned to  
minimize such er rors .  A T RSK system (an in teract ive  program 
wh?ch "unders tands"  LESK) would fu r ther  reduce such er rorso  
Cr i te r ia  fo r  LESK 
LESK should 
a) be readab le  by most un ivers i ty  graduates  in  sc ience ,  
medic ine ,  law or  bus iness ,  fo r  ezmnple|  
b) be wr i tab le  by most people w i th  a bas ic  knowledge of  se t  
theory ,  log ic  end computers ' ;  
o) have a s imple semant ics  express ib le  in  f i r s t -o rder  log ic~ 
d) be lmplementable us ing ar t i f i c ia l  in te l l igence  techn iques!  
e) be su f f i c ient ly  genera l  to  be usab le  in  the sub jec ts  of  
in teres t  to  those  l i s ted  in  a ) .  
The present  des ign  of  LESK has been shown to meet a l l  o f  
these  cr i te r ia .  
~asi~n of ~sK 
LESK should be viewed as a language fo r  making asser t -  
ions about sets ,  tup les ,  sequences, funct ions ,  re la t ions ,  
procedures and other  s~nple mathematical concepts us ing an 
Ens l i sh - l i ke  syntax  (many o ther  NLs could be used! t rans la t -  
i on  of  LESK-based knowledge should be eas ie r  than t rans la t ion  
o f  NL). The user  dec la res  words or  phrases e i ther  exp l i c i t l y  
or  ~np l io i t l y  to  be nouns (or  noun- l i ke ) ,  ad jec t ives ,  p re -  
pos i t ions ,  or verbs  (o ther  categor ies  have not been necess -  
a ry ) .  Nouns and noun phrases denote sets ,  s ta t ive  verbs  de-  
note  re la t ions ,  ac t ion  verbs  denote procedures ,  and prepos i t -  
ions  denote case re la t ions .  The syntax  i s  a compromise bet -  
ween b-L, CT, and logo .  A l l  const ruc ts  have a s imple f~rs t -  
-o rder  log ic  in terpreta t ion .  
An example (whose sp i r i t  should warm the hear t  of  those 
who despa i r  o f  ever  unders tand ing  the regu la t ions  of  the i r  
- 263 - 
i ns t i tu t ion)  fo l lows .  LESK pr imi t ives  a re  in  lower  case .  We 
first i l lustrate ~oun deo!arations. (N.B. In the final paper, 
this example will be greatly expanded and explained.) 
every PERSON: 
- has I NAME 
- has I integer called their AGE 
- has I ADDRESS 
end,  
every STUDENT: 
kinds: IK;LL-TIHE -, PART-TIME - | 
kinds: UNDERGRADUATE -, GRADUATE--! 
- is a PERSON! 
- is ENROLTR~ IN I DEGREE PROGRAM! 
- is a STUDENT IN 1 FACULTY, SCHOOL or DEPARTMeNt! 
- has 1 ACADEMIC RECORD 
end. 
every ACADEMIC RECORD of a STUDENT X: 
- has 1 FACULTY, SCHOOL or D E ~ T !  
- has 0 or more COURSE CREDITS! 
- has 0 or more COURSE SECTIONS called the COURSES-BEING- 
TAKEN BY X 
end ? 
every COURSE CREDIT: 
- is a pa i r~X,  Y~ where X is a COURSE, 
Y is a LETTER GRADE 
end, 
We i l lustrate next two stative verb declarations: 
a STUDENT X is ENROLLED IN a COURSE SECTION Y iff- 
X is on the ENROLLMENT LIST of Y. 
a STUDENT X is a STUDENT IN a FACULTY, SCHOOL or DEPARTMENT Y 
if f: 
- 264 - 
? - the FACULTY, SCHOOL or  DEPARTMENT of  the  ACADEMIC 
RECORD of  X. 
F ina l ly ,  we i l l us t ra te  an ac t ion  verb dec la ra t ion :  
To ENROLL a STUDENT X IN a COURSE SECTION Ys 
preconds for each PREREQUISITE Z of Y there is a COURSE 
CREDIT ~Z,M> on the ACADEMIC RECORD of X such 
that M is a PASSING GRADE~ 
X has PAID the FEE of Y| 
adds 
negate s 
de le te :  
procedure:  add X to the ENROLLMENT LIST of  Y! 
add Y to  the COURSESBEINGTAKEN BY X 
end. 
Conc~udin~ Remarks 
LESK has been used to descr ibe  neurophys io log ica l  know- 
ledge ,  e lec t r i ca l  c i rcu i t s ,  PASCAL, the Canadian census data -  
base,  and un ivers i ty  regu la t ions .  A par t ia l  implementat ion 
has been deve loped in  DEC 10 PROLOG. A LESK system should be 
capable of  answer ing any quest ion  (expressed in  LESK) which a 
person  could answer from the same LESK knowledge base.  This 
c lear ly  requ i res  both deduct ive  and database komponents. 
Systems now ex is t  which combine these two! i t  remains there -  
fo re  to  add the LESK component, which i s  our eventua l  goa l .  
- 265 - 
