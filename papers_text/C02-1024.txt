Interleaved semantic interpretation in environment-based parsing

William Schuler
Computer and Information Science Dept.
University of Pennsylvania
Philadelphia, PA 19103
schuler@linc.cis.upenn.edu
Abstract
This paper extends a polynomial-time parsing al-
gorithm that resolves structural ambiguity in input
sentences by calculating and comparing the deno-
tations of rival constituents, given some model of
the application environment (Schuler, 2001). The
algorithm is extended to incorporate a full set of
logical operators, including quantiers and conjunc-
tions, into this calculation without increasing the
complexity of the overall algorithm beyond polyno-
mial time, both in terms of the length of the in-
put and the number of entities in the environment
model.
1 Introduction
The development of speaker-independent mixed-
initiative speech interfaces, in which users not only
answer questions but also ask questions and give in-
structions, is currently limited by the inadequacy
of existing corpus-based disambiguation techniques.
This paper explores the use of semantic and prag-
matic information, in the form of the entities and
relations in the interfaced application's run-time en-
vironment, as an additional source of information to
guide disambiguation.
In particular, this paper extends an existing pars-
ing algorithm that calculates and compares the de-
notations of rival parse tree constituents in order
to resolve structural ambiguity in input sentences
(Schuler, 2001). The algorithm is extended to incor-
porate a full set of logical operators into this calcu-
lation so as to improve the accuracy of the resulting
denotations { and thereby improve the accuracy of
parsing { without increasing the complexity of the
overall algorithm beyond polynomial time (both in
terms of the length of the input and the number of
entities in the environment model). This parsimony
is achieved by localizing certain kinds of semantic
relations during parsing, particularly those between
quantiers and their restrictor and body arguments

The author would like to thank David Chiang, Karin Kip-
per, and Alexander Koller, as well as the anonymous reviewers
for comments on this material. This work was partially sup-
ported by NSF IIS-9900297 and DARPA N66001-00-1-8915.
(similar to the way dependencies between predicate
and argument head words are localized in lexicalized
formalisms such as tree adjoining grammars), in or-
der to avoid calculating exponential higher-order de-
notations for expressions like generalized quantiers.
2 Basic algorithm
This section describes the basic environment-based
parser (Schuler, 2001) which will be extended in Sec-
tion 3. Because it will crucially rely on the denota-
tions (or interpretations) of proposed constituents
in order to guide disambiguation, the parser will be
dened on categorial grammars (Ajdukiewicz, 1935;
Bar-Hillel, 1953), whose categories all have well de-
ned types and worst-case denotations. These cat-
egories are drawn from a minimal set of symbols C
such that:
NP 2 C and S 2 C;
if ; ? 2 C then =? 2 C and n? 2 C:
Intuitively, the category NP describes a noun phrase
and the category S describes a sentence, and the
complex categories =? and n? describe `a  lacking
a ? to the right' and `a  lacking a ? to the left'
respectively; so for example SnNP would describe a
declarative verb phrase lacking an NP subject to its
left in the input.
The type T and worst-case (most general) denota-
tion W of each possible category are dened below,
given a set of entities E as an environment:
T (S) = t : truth value W (S) = fTRUE;FALSEg
T (NP) = e : entity W (NP) = E
T (=?) = hT (?); T ()i W (=?) = W (?) W ()
T (n?) = hT (?); T ()i W (n?) = W (?) W ()
The denotation D of any proposed constituent is
constrained to be a subset of the worst-case deno-
tation W of the constituent's category; so a con-
stituent of category NP would denote a set of en-
tities, fe
1
; e
2
; : : : g, and a constituent of category
SnNP would denote a set of entity  truth value
pairs, fhe
1
;TRUEi; he
2
;FALSEi; : : : g. Note that no
denotation of a constituent can contain more than
O(jEj
v
) dierent elements, where v is a valency mea-
sure of the number of NP symbols occurring within
the constituent's category.
This paper will use the following denition of a
categorial grammar (CG):
Denition A categorial grammar G is a formal
grammar (N;; P ) such that:
  is a nite set of words w;
 P is a nite set of productions containing:
 ! w for all w2, with  2 C,
 ! =? ? for every rule =? ! : : : in P ,
 ! ? n? for every rule n? ! : : : in P ,
and nothing else;
 N is the nonterminal set f j  ! : : : 2 Pg.
and the following deductive parser,
1
which will be
extended later to handle a richer set of semantic op-
erations. The parser is dened with:
 constituent chart items [i; j; ] drawn from I
n
0

I
n
0
N , indicating that positions i through j in
the input can be characterized by category ;
 a lexical item [i; j; ] for every rule  ! w 2 P if
w occurs between positions i and j in the input;
 a set of rules of the form:
[i;k;=?] [k;j;?]
[i;j;]
for all  ! =? ? 2 P; i; j; k 2 I
n
0
,
[k;j;n?] [i;k;?]
[i;j;]
for all  ! ? n? 2 P; i; j; k 2 I
n
0
.
and can recognize an n-length input as a constituent
of category  (for example, as an S) if it can deduce
the chart item [0; n; ].
This parser can be implemented in a dynamic pro-
gramming algorithm, using the recursive function:
F (x) =
_
a
1
::: a
k
s:t:
a
1
::: a
k
x
k
^
i=1
F (a
i
)
(where x; a
1
: : : a
k
are proposed constituents drawn
from I
n
0
I
n
0
N ,
W
;
= FALSE, and
V
;
= TRUE),
by recording the result of every recursive sub-call to
F (x) in a chart, then consulting this chart on sub-
sequent calls to F (x) for the same x constituent.
2
Since the indices in every rule's antecedent con-
stituents a
1
: : : a
k
each cover smaller spans than
those in the consequent x, the algorithm will not
enter into an innite recursion; and since there are
only n
2
jN j dierent values of x, and only 2n dier-
ent rules that could prove any consequent x (two rule
forms for = and n, each with n dierent values of k),
the algorithm runs in polynomial time: O(n
3
jN j).
The resulting chart can then be annotated with back
pointers to produce a polynomial-sized shared forest
1
Following Shieber et al (1995).
2
Following Goodman (1999).
representation of all possible grammatical trees (Bil-
lot and Lang, 1989).
Traditional corpus-based parsers select preferred
trees from such forests by calculating Viterbi scores
for each proposed constituent, according to the re-
cursive function:
S
V
(x) = max
a
1
::: a
k
s:t:
a
1
::: a
k
x
 
k
Y
i=1
S
V
(a
i
)
!
 P(a
1
::: a
k
j x)
These scores can be calculated in polynomial time,
using the same dynamic programming algorithm as
that described for parsing. A tree can then be se-
lected, from the top down, by expanding the highest-
scoring rule application for each constituent.
The environment-based parser described here uses
a similar mechanism to select preferred trees, but the
scores are based on the presence or absence of enti-
ties in the denotation (interpretation) of each pro-
posed constituent:
3
S
D
(x) = max
a
1
::: a
k
s:t:
a
1
::: a
k
x
 
k
X
i=1
S
D
(a
i
)
!
+
(
1 if D(x) 6=;
0 otherwise
where the denotation D(x) of a proposed constituent
x is calculated using another recursive function:
D(x) =
[
a
1
::: a
k
s:t:
a
1
::: a
k
x
 

k
on
i=1
D(a
i
)
!
on
(
R(x) if k = 0
fhig otherwise
in which R(x) is a lexical relation dened for each
axiom x of category  equal to some subset of 's
worst-case denotation W (), as dened above.
4
The
operator on is natural (relational) join on the elds
of its operands:
AonB = fhe
1
:::e
max(a;b)
i j he
1
:::e
a
i2A; he
1
:::e
b
i2Bg
where a; b  0; and  is a projection that removes
the rst element of the result (corresponding the
most recently discharged argument of the head or
functor category):
A = fhe
2
:::e
a
i j he
1
:::e
a
i2Ag
This interleaving of semantic evaluation and pars-
ing for the purpose of disambiguation has much in
common with that of Dowding et al (1994), except
3
Here, the score is simply equal to the number of non-
empty constituents in an analysis, but other metrics are pos-
sible.
4
So a lexical relation for the constituent `lemon' of
category NP would contain all and only the lemons in
the environment, and a lexical relation for the con-
stituent `falling' of category SnNP would contain a map-
ping from every entity in the environment to some truth
value (TRUE if that entity is falling, FALSE otherwise):
e.g. fhlemon
1
; TRUEi; hlemon
2
; FALSEi; : : : g.
NP[lemon]
fl
1
; l
2
; l
3
; l
4
g
P:NPnNP/NP[in]
fhb
1
; hl
1
; l
1
ii; hm
1
; hl
2
; l
2
iig
NP[bin]
fb
1
; b
2
g
P:NPnNP/NP[by]
fhm
1
; hb
1
; b
1
ii; hm
2
; hb
2
; b
2
iig
NP[machine]
fm
1
;m
2
;m
3
g
PP:NPnNP[in]
fhl
1
; l
1
ig
PP:NPnNP[by]
fhb
1
; b
1
i; hb
2
; b
2
ig
NP[lemon]
fl
1
g
NP[bin]
fb
1
; b
2
g
PP:NPnNP[in]
fhl
1
; l
1
ig
NP[lemon]
fl
1
g [ ;
Figure 1: Denotation-annotated forest for `lemon in bin by machine.'
that in this case, constituents are not only seman-
tically type-checked, but are also fully interpreted
each time they are proposed.
Figure 1 shows a sample denotation-annotated
forest for the phrase `the lemon in the bin by the
machine', using the lexicalized grammar:
lemon, bin, machine : NP
the : NP=NP
in, by : NPnNP=NP
in which the denotation of each constituent (the set
in each rectangle) is calculated using a join on the
denotations of each pair of constituents that combine
to produce it. In this example, the right-branching
tree would be preferred because the denotation re-
sulting from the composition at the root of the other
tree would be empty.
Since this use of the join operation is linear on the
sum of the cardinalities of its operands, and since
the denotations of the categories in a grammar G
are bounded in cardinality by O(jEj
v
) where v is the
maximum valency of the categories in G, the total
complexity of the above algorithm can be shown to
be O(n
3
jEj
v
): polynomial not only on the length of
the input n, but also on the size of the environment E
(Schuler, 2001).
3 Extended algorithm
The above algorithm works well for attaching ordi-
nary complements and modiers, but as a semantic
theory it is not su?ciently expressive to produce cor-
rect denotations in all cases. For example, the lexical
relations dened above are insu?cient to represent
quantiers like `no' (using category NP=NP) in the
phrase `the boy with no backpack.'
5
A similar prob-
lem occurs with conjunctions; for example, the word
`and' (using category NPnNP=NP) in the phrase `the
child wearing glasses and blue pants', also cannot
be properly represented as a lexical relation.
6
This
raises the question: how much expressivity can be
allowed in a shared semantic interpretation without
exceeding the tractable parsing complexity neces-
sary for practical environment-based parsing?
In traditional categorial semantics (Montague,
1973; Barwise and Cooper, 1981; Keenan and Stavi,
1986) quantiers and noun phrase conjunctions de-
note higher-order relations: that is, relations be-
tween whole sets of entities instead of just be-
tween individuals. Under this interpretation, a
quantier like `no' would denote a set of pairs
fhA
1
; B
1
i; hA
2
; B
2
i; : : : g where each A
i
and B
i
are
disjoint subsets of E , corresponding to an accept-
able pair of restrictor and body sets satisfying the
quantier `no'. Unfortunately, since the cardinalities
of these higher-order denotations can be exponential
on the size of the environment E (there are 2
jEj
pos-
sible subsets of E and 2
2jEj
possible combinations of
two such subsets), such an approach would destroy
the polynomial complexity of the environment-based
parsing algorithm.
5
Assigning the identity relation fhe
1
; e
1
i; he
2
; e
2
i; : : : g to
the quantier would incorrectly yield the set of boys with a
backpack as a denotation for the full noun phrase; and assign-
ing the converse relation (from each entity in the environment
to every other entity fhe
1
; e
2
i; he
1
; e
3
i; : : : g) would incorrectly
yield the set of boys with anything that is not a backpack.
6
The identity relation fhe
1
; e
1
; e
1
i; he
2
; e
2
; e
2
i; : : : g, which
yields a correct interpretation in verb phrase conjunction,
would yield an incorrect denotation for the noun phrase
`glasses and blue pants,' containing only entities which are
at once both glasses and pants.
However, if the number of possible higher-order
functions is restricted to a nite set (say, to some
subset of words in a lexicon), it becomes tractable
to store them by name rather than by denotation
(i.e. as sets). Such function can then discharge all
their rst-order arguments in a single derivational
step to produce a rst-order result, in order to avoid
generating or evaluating any higher-order partial re-
sults. Syntactically, this would be analogous to com-
posing a quantier with both a noun phrase restric-
tor and a body predicate (e.g. a verb or verb phrase)
at the same time, to produce another rst-order
predicate (e.g. a verb phrase or sentence). Since
a generalized quantier function merely counts and
compares the cardinalities of its arguments in a lin-
ear time operation, this analysis provides a tractable
shortcut to the exponential calculations required in
the conventional analysis.
Note that this analysis by itself does not admit
productive modication of quantiers (because their
functions are drawn from some nite set) or of quan-
tied noun phrases (because they are no longer de-
rived as a partial result). This causes no disruption
to the attachment of non-conjunctive modiers, be-
cause ordinary syntactic modiers of quantier con-
stituents are seldom productive (in the sense that
their composition does not yield functions outside
some nite set), and syntactic modiers of NP con-
stituents usually only modify the restrictor set of the
quantier rather than the entire quantied function,
and can therefore safely be taken to attach below
the quantier, to the unquantied NP.
But this is not true in cases involving conjunc-
tion. Conjoined quantiers, like `some but not all,'
cannot always be dened using a single standard lex-
ical function; and conjunctions of quantied noun
phrases, like `one orange and one lemon', cannot
be applied to unquantied subconstituents (syntac-
tically, because this would fail to subsume the sec-
ond quantier, and semantically, because it is not
the restrictor sets which are conjoined). Keenan
and Stavi (1986) model conjunctions of quantiers
and quantied noun phrases using lattice operations
on higher-order sets, but as previously stated, these
higher-order sets preclude tractable interleaving of
semantic interpretation with parsing.
The solution proposed here is to treat each quan-
tier or quantied noun phrase conjunction as an el-
liptical conjunction of two complete rst-order pred-
icates (e.g. verb phrases or sentences), each subsum-
ing a dierent quantier and noun phrase restrictor
(in the case of NP conjunction), but sharing or du-
plicating a common body predicate. This analysis
requires multiple components to keep track of the
duplicated material above the conjunction, but as
long as the number of components is bounded, the
polynomial complexity of the parsing algorithm is
containing
(duplicated)
one orange
(unduplicated)
and one lemon
(unduplicated)
Figure 2: Duplicated verb in NP conjunction.
retained.
7
Figure 2 shows a duplicated verb predicate in the
derivation of an NP conjunction. The conjoined
constituents (the shaded regions in the gure) are
each composed of two components: one for the NP
itself, containing the quantier and the restrictor
predicate, and one for the verb which supplies the
body predicate of the quantier. Since the conjoined
constituents both correspond to complete quanti-
er expressions with no unsatised rst-order argu-
ments, their categories are that of simple rst-order
predicates (they are each complete verb phrases in
essence: `containing one orange' and `containing one
lemon'). The conjunction then forms a larger con-
stituent of the same form (the unshaded outline
in the gure), with a lower component containing
the conjoined constituents' NP components concate-
nated in the usual way, and an upper component in
which the conjoined constituents' non-NP compo-
nents are identied or overlapped. If the duplicated
components do not cover the same string yield, the
conjunction does not apply.
Note that, since they are only applied to ordinary
rst-order predicates (e.g. sentences or verb phrases)
in this analysis, conjunctions can now safely be as-
signed the familiar truth-functional denotations in
every case.
8
Also, since the resulting constituent
has the same number of components as the conjoined
constituents, there is nothing to prevent its use as
an argument in subsequent conjunction operations.
A sample multi-component analysis for quantiers
is shown below, allowing material to be duplicated
both to the left and to the right of a conjoined NP:
some,all,no,etc. : XnNP
q
 NP
q
nNP
q
NP
q
=NP

X=NP
q
 NP
q
nNP
q
NP
q
=NP

The lexical entry for a quantier can be split in this
7
Dahl and McCord (1983) propose a similar duplication
mechanism to produce appropriate semantic representations
for NP and other conjunctions, but for dierent reasons.
8
e.g. for the word `and': fh:::TRUE; :::TRUE; :::TRUEi;
h::TRUE; ::FALSE; ::FALSEi; h::FALSE; ::TRUE; ::FALSEi;
h::FALSE; ::FALSE; ::FALSEig
way into a number of components, the last (or low-
est) of which is not duplicated in conjunction while
others may or may not be. These include a com-
ponent for the quantier NP
q
=NP

(which will ulti-
mately also contain a noun phrase restrictor of cate-
gory NP

), a component for restrictor PPs and rela-
tive clauses of category NP
q
nNP
q
that are attached
above the quantier and duplicated in the conjunc-
tion, and a component for the body (a verb or verb
phrase or other predicate) of category XnNP
q
or
X=NP
q
. The subscript q species one of a nite
set of quantiers, and the subscript  indicates an
unquantied NP.
The deductive parser presented in Section 2 can
now be extended by incorporating sequences of rec-
ognized and unrecognized components into the con-
stituent chart items. As constituents are com-
posed, components are shifted from the unrecog-
nized sequence 
1
   
c
to the recognized sequence
hi
1
; j
1
; 
1
i    hi
c
; j
c
; 
c
i, until the unrecognized se-
quence is empty.
The extended parser is dened with:
 chart items of the form [i; j;;], where  is
a sequence of unrecognized components ,  is
a sequence of recognized components ha; b; i,
and i; j; k; a; b; c are indices in the input. Each
item [i; j;; hi
1
; j
1
; 
1
i    hi
c
; j
c
; 
c
i] indicates
that the span from i to j in the input can be
characterized by the categories 
1
through 
c
at
positions i
1
to j
1
through i
c
to j
c
respectively, so
that if these spans are concatenated in whatever
order they occur in the input string, they form
a grammatical constituent of category  with
unrecognized components .
 a lexical item [i; j; ; hi; j; i] for every rule  !
w 2 P if w occurs between positions i and j in
the input;
 a set of rules for all i; j; k; a; b; c 2 I
n
0
as below.
Two rules to invoke left and right function ap-
plication to an existing component:
[i;k;=?;hi;k;=?i] [k;j;?;hk;b;?="i]
[i;j;;hi;b;="i]
!=? ?2P ,
[k;j;n?;hk;j;n?i] [i;k;?;ha;k;?n"i]
[i;j;;ha;j;n"i]
!? n?2P ,
Two rules to invoke left and right function ap-
plication to a fresh component:
[i;k;=?;hi;k;=?i] [k;j;=??;]
[i;j;;hi;k;=?i]
!=? ?2P ,
[k;j;n?;hk;j;n?i] [i;k;n??;]
[i;j;;hk;j;n?i]
!? n?2P ,
Two rules to discharge empty components:
[i;j;=??;]
[i;j;;]
[i;j;n??;]
[i;j;;]
Three rules to skip conjunctions, by adding a
gap between the components in a constituent
(the rst rule consumes the conjunction to cre-
ate a partial result of category Conj
0
?
, and the
latter two use this to skip the opposing NP):
[k;j;?;]
[i;j;Conj
0
?
;]
[i;k;Conj;hi;k;Conji]
[k;j;Conj
0
?
;]
[i;j;?;]
[i;k;?; ]
[i;k;?;]
[i;j;?;]
[k;j;Conj
0
?
; ]
Two rules to reassemble discontinuous con-
stituents (again, using a partial result Conj
0
?
to
reduce the number of ranging variables):
[a;c;Conj;ha;c;Conji] [i;j;;hc;b;?i]
[i;j;;ha;b;Conj
0
?
i]
[i;j;;hc;b;Conj
0
?
i] [i;j;;ha;c;?i]
[i;j;;ha;b;?i]
Two rules to combine adjacent components:
[i;j;;ha;c;?="ihc;b;"i]
[i;j;;ha;b;?i]
[i;j;;hc;b;?n"iha;c;"i]
[i;j;;ha;b;?i]
And one rule to apply quantier functions:
[i;j;;ha;b;?
q
i]
[i;j;;ha;b;?

i]
The parsing and scoring functions remain identi-
cal to those in Section 2, but an additional k = 1
case containing a modied projection function  is
now added to the interpretation function, in order
to make the denotations of quantied constituents
depend on their associated quantiers:
D(x) =
[
a
1
::: a
k
s:t:
a
1
::: a
k
x
8
>
>
>
>
>
>
<
>
>
>
>
>
>
>
:
R(x) if k = 0

q
D(a
1
) if k = 1 and
a
1
x
=
[:::h:::?
q
i]
[:::h:::?

i]
k
on
i=1
D(a
i
) otherwise
The modied projection function evaluates a quan-
tier function q on some argument denotation A,
comparing the cardinality of the image of the re-
strictor set in A with the the cardinality of image of
the intersected restrictor and body sets in A:
9

q
A = fhe
2
:::e
a
; ti j h ; e
2
:::e
a
; i2A; t = q(jRj; jSj)
R = Aonfh ; e
2
:::e
a
; ig;
S = Aonfh ; e
2
:::e
a
;TRUEig g
This algorithm parses a categorial grammar in the
usual way { constituents are initially added to the
chart as single components covering a certain yield
in the input string (the indices of the component
are the same as the indices of the constituent itself),
and they are combined by concatenating the yields
of smaller constituents to make larger ones { until a
conjunction is encountered. When a conjunction is
9
Following Keenan and Stavi (1986).
0 1 2 3 4
containing one orange and one lemon
[0; 1; SnNP
q
=NP
q
0
; [1; 2; XnNP
9
 NP
9
nNP
9
 NP
9
; [2; 3;Conj; [3; 4; XnNP
9
 NP
9
nNP
9
 NP
9
;
h0; 1; SnNP
q
=NP
q
0
i] h1; 2;NP
9
i] fo
1
; o
2
; o
3
; o
4
g h2; 3;Conji] h3; 4;NP
9
i] fl
1
; l
2
; l
3
g
fho
1
; x
1
i; hl
2
; x
1
i; hl
3
; x
3
ig
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . (1)
[1; 4; XnNP
9
 NP
9
nNP
9
 NP
9
; h1; 2; NP
9
i] fo
1
; o
2
; o
3
; o
4
g
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . (2)
[1; 4; XnNP
9
 NP
9
nNP
9
 NP
9
; h3; 4; NP
9
i] fl
1
; l
2
; l
3
g
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . (3)
[1; 4; XnNP
9
 NP
9
; h1; 2; NP
9
i] fo
1
; o
2
; o
3
; o
4
g
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . (4)
[1; 4; XnNP
9
 NP
9
; h3; 4; NP
9
i] fl
1
; l
2
; l
3
g
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . (5)
[0; 4; SnNP
q
; h0; 1; SnNP
q
=NP
9
i  h1; 2;NP
9
i] fho
1
; x
1
ig
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . (6)
[0; 4; SnNP
q
; h0; 1; SnNP
q
=NP
9
i  h3; 4;NP
9
i] fhl
2
; x
1
i; hl
3
; x
3
ig
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . (7)
[0; 4; SnNP
q
; h0; 1; SnNP
q
=NP

i  h1; 2;NP

i] fx
1
g
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . (8)
[0; 4; SnNP
q
; h0; 1; SnNP
q
=NP

i  h3; 4;NP

i] fx
1
; x
3
g
(9)
[0; 4; SnNP
q
; h0; 1; SnNP
q
=NP

i  h1; 4;NP

i] fx
1
g
(10)
[0; 4; SnNP
q
; h0; 4; SnNP
q
i] fx
1
g
Figure 3: Sample derivation of conjoined NP.
encountered immediately to the left or right of a rec-
ognized constituent constituent x, and another con-
stituent of the same category is found immediately
beyond that conjunction, the parser creates a new
constituent that has the combined yield of both con-
stituents, but copies x's component yield (the string
indices of x's original components) with no change.
This has the eect of creating two new constituents
every time two existing constituents are conjoined:
each with a dierent component yield, but both with
the same (combined) constituent yield. These new
discontinuous constituents (with component yields
that do not exhaust their constituent yields) are still
treated as ordinary constituents by the parser, which
combines them with arguments and modiers until
all of their argument positions have been success-
fully discharged, at which point pairs of discontinu-
ous constituents with the same constituent yield can
be reassembled into whole { or at least less discon-
tinuous { constituents again.
A sample derivation for the verb phrase `con-
taining one orange and one lemon,' involving con-
junction of existentially quantied noun phrases, is
shown in Figure 3, using the above parse rules and
the lexicalized grammar:
containing : SnNP
q
=NP
q
0
one : XnNP
q
 NP
q
nNP
q
 NP
q
=NP

X=NP
q
 NP
q
nNP
q
NP
q
=NP

orange, lemon : NP

and : Conj
First the parser applies the skip conjunction rules
to obtain the discontinuous constituents shown af-
ter steps (1) and (2), and a component is discharged
from each of the resulting constituents using the
empty component rule in steps (3) and (4). The
constituents resulting from (3) and (4) are then com-
posed with the verb constituent for `containing' in
steps (5) and (6), using the left attachment rule for
fresh components. The quantiers are then applied
in steps (7) and (8), and the resulting constituents
are reassembled using the conjunction rules in step
(9). The adjacent components in the constituent
resulting from step (9) are then merged using the
combination rule in step (10), producing a complete
gapless constituent for the entire input.
Since the parser rules are xed, and the number of
components in any chart constituent is bounded by
the maximum number of components in a category
(inasmuch as the rules can only add a component
to the recognized list by subtracting one from the
unrecognized list), the algorithm must run in poly-
nomial space and time on the length of the input
sentence. Since the cardinality of each constituent's
denotation is bounded by jEj
v
(where E is the set
of entities in the environment and v is the maxi-
mum valency of any category), the algorithm runs in
worst-case polynomial space on jEj; and since there
is no more than one set composition operation per-
formed when a rule is applied, and each composition
operation runs in worst-case quadratic time on the
size of its composed sets (due to the quantier oper-
ation), the algorithm runs in worst-case polynomial
time on jEj as well.
4 Evaluation
The extended parser described above has been im-
plemented and evaluated on a corpus of 340 spo-
ken instructions to simulated human-like agents in
a controlled 3-D environment (that of children run-
ning a lemonade stand, which was deemed suitably
familiar to undergraduate student subjects). The
parser was run on the word lattice output of an
o-the-shelf speech recognizer (CMU Sphinx II) and
the parser chart was seeded with every hypothesized
word. The parser was also compared with the rec-
ognizer by itself, in order to determine the degree to
which an environment-based approach could com-
plement corpus-based disambiguation. The systems
were evaluated as word recognizers (i.e. ignoring the
brackets in the parser output) on the rst 100 sen-
tences of the corpus (corresponding to the rst seven
of 33 subjects); the latter 240 sentences were re-
served for training the recognizer and for developing
the grammar and semantic lexicon.
The average utterance length was approximately
three seconds (subsuming about 300 frames or posi-
tions in the parser chart), containing an average of
nine words. Parsing time averaged under 40 seconds
per sentence on a P4-1500MHz, most of which was
spent in forest construction rather than denotation
calculation.
Accuracy results show that the parser was able to
correctly identify a signicant number of words that
the recognizer missed (and vice versa), such that a
perfect synthesis of the two (choosing the correct
word if it is recognized by either system) would pro-
duce an average of 8 percentage points more recall
than the recognizer by itself on successful parses,
and as much as 19 percentage points more for some
subjects:
10
recognizer parser joint
subject prec recall fail prec recall recall
0 76 79 18 72 74 92
1 77 75 28 63 55 83
2 70 71 33 49 54 69
3 71 67 43 49 45 69
4 66 54 37 44 39 67
5 53 52 54 36 31 72
6 84 84 50 56 63 83
all 68 67 37 53 50 75
which indicates that the environment may oer a
useful additional source of information for disam-
biguation. Though it may not be possible to imple-
ment a perfect synthesis of the environment-based
10
Successful parses are those that result in one or more
complete analyses of the input, even if the correct tree is not
among them.
and corpus-based approaches, if even half of the
above gains can be realized, it would mark a sig-
nicant advance.
5 Conclusion
This paper has described an extension to an
environment-based parsing algorithm, increasing its
semantic coverage to include quantier and conjunc-
tion operations without destroying its polynomial
worst-case complexity. Experiments using an imple-
mentation of this algorithm on a corpus of spoken
instructions indicate that 1) the observed complex-
ity of the algorithm is suitable for practical user in-
terface applications, and 2) the ability to draw on
this kind of environment information in an inter-
faced application has the potential to greatly im-
prove recognition accuracy in speaker-independent
mixed-initiative interfaces.
References
Kazimierz Ajdukiewicz. 1935. Die syntaktische konnex-
itat. In S. McCall, editor, Polish Logic 1920-1939,
pages 207{231. Oxford University Press. Translated
from Studia Philosophica 1: 1{27.
Yehoshua Bar-Hillel. 1953. A quasi-arithmetical nota-
tion for syntactic description. Language, 29:47{58.
Jon Barwise and Robin Cooper. 1981. Generalized
quantiers and natural language. Linguistics and Phi-
losophy, 4.
Sylvie Billot and Bernard Lang. 1989. The structure of
shared forests in ambiguous parsing. In Proceedings of
the 27
th
Annual Meeting of the Association for Com-
putational Linguistics (ACL '89), pages 143{151.
Veronica Dahl and Michael C. McCord. 1983. Treating
coordination in logic grammars. American Journal of
Computational Linguistics, 9(2):69{91.
John Dowding, Robert Moore, Francois Andery, and
Douglas Moran. 1994. Interleaving syntax and seman-
tics in an e?cient bottom-up parser. In Proceedings of
the 32nd Annual Meeting of the Association for Com-
putational Linguistics (ACL'94).
Joshua Goodman. 1999. Semiring parsing. Computa-
tional Linguistics, 25(4):573{605.
E. Keenan and J. Stavi. 1986. A semantic characteriza-
tion of natural language determiners. Linguistics and
Philosophy, 9:253{326.
Richard Montague. 1973. The proper treatment of quan-
tication in ordinary English. In J. Hintikka, J.M.E.
Moravcsik, and P. Suppes, editors, Approaches to Nat-
ural Langauge, pages 221{242. D. Riedel, Dordrecht.
Reprinted in R. H. Thomason ed., Formal Philosophy,
Yale University Press, 1994.
William Schuler. 2001. Computational properties of
environment-based disambiguation. In Proceedings of
the 39th Annual Meeting of the Association for Com-
putational Linguistics (ACL '01), Toulouse, France.
Stuart M. Shieber, Yves Schabes, and Fernando C.N.
Pereira. 1995. Principles and implementation of de-
ductive parsing. Journal of Logic Programming, 24:3{
36.
