UNIVERSAL GUIDES AND FINITENESS AND SYMMETRY OF 
GRAMMAR PROCESSING ALGORITHMS 
Miroslav Martinovi~ 
Courant Institute of Mathematical Sciences, New York University 
martin@cs.nyu.edu 
ABSTRACT 
This paper presents a novel technique called "universal 
guides" which explores inherent properties of logic 
grammars (changing variable binding status) in order to 
characterize tbrmal criteria for termination i  a derivation 
process. The notion of universal guides also offers a new 
framework in which both parsing and generation can be 
viewed merely as two different instances of the same 
generic process: guide consumption. This technique 
generalizes and exemplifies a new and original use of an 
existing concept of "proper guides" recently proposed in 
literature for controlling top-down left-to-right (TDLR) 
execution in logic progrmns. We show that universal 
guides are independent of a particular grammar evaluation 
strategy. Also, unlike proper guides they can be specified 
in the same mmmer for any given algorithm without 
knowing in advance whether the algorithm is a parsing or 
a generation algorithm. Their introduction i to a grammar 
prevents as well the occurrence of certain grammar ules 
an infinite number of times dnring a derivation process. 
1. INTRODUCTION AND MOTIVATION 
This research interacted with a Japanese-English 
machine translation project at New York University. The 
results reported herein are part of an attempt to establish 
an evaluation system for grammar processing algorithms 
(parsing and generation algorithms). The need for 
evaluation of various competing approaches presently 
available lbr parser and generator design has been felt 
strongly in both Theoretical and Computational 
1,inguistics. Both fields have been thus fat predominantly 
empMcal, so that the measuring of actual progress has 
become very difficult, l lere, we introduce the notion of 
universal guides in order to discuss two of the most 
relevant criteria tot the comparison of different parsing 
and generation algorithms: finiteness aml symmetry. 
Other criteria such as completeness, soundness, efficiency, 
etc., although equally significant and interesting, are 
outside of the scope of this paper and are addressed in 
\[M92\]. 
There is a natural appeal to the problem of 
characterizing parsing and generation within the same 
fl'amework and in a symmetrical way. The reversibility is
by its nature symmetrical: parsing is retrieving asemantic 
content fiom a phonological one, and generation, a 
phonological from a semantic content. Several papers 
(\[$88\], \[N89\], \[SNMP89\], \[DI88\], \[DI90\], and \[DIP90\]) 
have recognized parsing and generation as instances of a 
single paradigm and have pointed out the correspondence 
between certain parsing problems and techniques (left- 
recursion, linking, Early deduction) and their correlates in 
generation. 
It has also been long noticed that adopting a certain 
technique for a derNation process can lead to termination 
problems (sometimes referred to as infinite derivations). 
Perhaps the best known example of this is using the 
TDLR derivation lor left-recursive rules. Consequently, to
specify conditions on grammars, whose liflfillment is 
necessary and stffficient o guarantee finite derivations 
under a given evaluation strategy, posed another problem, 
one that has been given serious attention recently (\[D90\], 
\[I)lP90\]). These conditions are usually referred to as the 
finiteness criteria and are often given in the form of 
sufficient hough not necessary conditions ("worst case" 
analysis of the finiteness of an algorithm). 
What we propose here is to abstract the notion of string 
index in parsing to the notion of a universal guide. A 
similar proposal was made in \[DIPg0\] for guides (here 
called proper guides to distinguish them fiom univetwal 
guides). Using the new concept, both parsing and 
generation call be seen as two instances of the same 
generic process: universal guide consmnption. Universal 
guides prove to be more general than proper guides 
because they can be used under any evaluation strategy 
and not only under TDLR technique as must proper 
guides. They achieve symmetry in treating parsing and 
generation but need not be instantiated ifl'erently in 
either case, unlike proper guides. Universal guides can be 
consnmed anywhere during a derivation, as opposed to 
proper guides which may be consumed only by the 
application of lexical rules, therefore restricting the class 
of grammars for which they can be used. Moreover, we 
show here that proper guides can be viewed as a special 
case of our universal guides concept. The introduction of 
universal guides into a grammar also prevents the infinite 
repetition of certain grammar ules (i.e. those that do not 
instantiate any grammar variable and cause infinite loops). 
2. PRIOR RELATED WORK 
Some of the most significant findings with respect o 
characterizing finiteness and symmetry of gratnmar 
processing algorithms have been published by \[)ymetman, 
lsabelle and Perrault in \[D1P90\]. The authors pointed out 
the symmetrical nature of parsing and generation by 
introducing the notion of (proper) guides. A guide 
structure is a partially ordered set G that respects the 
descending chain condition, i.e. the condition that in (3 all 
916 
strictly decreasing chaius (1~ >l\[>...>li>.,. ) are finite. 
Guides were introduced lilt() each of a logic gralllnlar's 
llon-tcrlllinals in the fOlill ell: IleW, SO called guide 
variables. These variables added SOlllC redundal/cy which 
could be exploited for tighter control of the 
computational process. Aller the guide wuiablcs were 
added and left recursion was eliminated (by perlbrming 
the usual trallslbrmation as indicated in \[I)IP901), the 
creation of a IICW gl'allllllaf, equivalent lo the original 
one, was completed. Then, a set of conditions was 
specified that, if the now gIanllnal' satisfied it, guaranteed 
a finite deriwition lor any given goal. The conditions are: 
tile guide coilstullplion condition (GCC) alid the no-clmin 
condition (Nee) .  The guide coi\]stnnption condition states 
that the wthies for guide wu'iablcs must initially he finite 
and must also be consumed (decreased) each time a 
lexical predicate is expanded. The no-chain condition 
prohihits tile exclusive appearance el:predicates like 7' 4/ 
on tile right-hand side of  a rule. It was shown that i f  both 
(iCC altd NCC held, all derivations ill the gl-allllllal' 
would lie finite. The notion of guides is applicable Io 
both parsing and generation btit it is instantiated 
difl{Jrently in each case (for parsing, the guide wiriablc 
rcprcscuts file list of words awaitiug to he allalyzed, aild 
fbr generation, the list of seniantics of subcalegorizcd 
constituents lonmining to be generated). Tile authors of 
I I)lPg01 also denlonstrated all application of their main 
result to the chiss of lexical gl'all/lllars. 
The following inqJrovcments look desirable with respect 
to the maiil result from 11)11>901: 
(i) The guides should bc specified bolero the details 
o1 Ihe algoritlun (parsin!.,> or gelleration) alld lhc 
underlying lallllllal" (lexical or other kind) arc awfilablc. 
They should llot he dependent on these details; 
(ii) The lnaiu result (concerning linitc derivations) 
should be stated with respect to ally gfanlniar evahlatioll 
strategy and not only with respect to tile top-down, 
left-to-right algorithm; 
(iii) The constunption of guides Stlould be allowed at 
ally level, llot only lexical; alld 
(iv) The very introduction of guides (with no 
addilional gralnlllar lrailsforniatioiis) should prevent a 
certain kind of iulinite derivalions fron/ happeuing (i.e. 
those due to left recursive rules). 
Wc show here that tile guides' approach hy l)ymctman 
ct al. can be viewed as a special case of tile universal 
guides approach lhat we introduce in this paper. We also 
demonstrate thai universal guides realize the desired 
iniprovcmcnls. 
3. UNIVERSAl ,  ( ;UI I )ES 
We nlotivatc our introduction of tmivcrsal guides 
around the idea that a deriwition can be perceived as a 
process of discovering the set of all wiriabfcs that 
participate iu it. In other words, a deriwltion is 13nding all 
logic grammar symbols that arc Uldnstantiatcd at the 
moment when they appear in the derivation for the first 
time, and keeping track of changing of their binding 
status. The logic glammar symbols enter a derivation hy 
applying a production rule in which they participate 
either as bound, or partially or totally unbotuld. 'f'hc 
non-hound ones may or may not get instantiated uring 
the dcriwltion and their number can be finite (in the 
case era  finite derivation) o, inlhiitc (as with an inl\]nitc 
deriwltion). The term complete derivation we use for the 
derivation "in which the set of uninstantiated variables 
eventually gets reduced to all empty set, 
The set (finite or infinite) of all these variables has 
properties sinlilar to tile guides as defined by 
llylnetman, et al in \[I)IP90\] (only the descending chain 
condition is not guaranteed) and will as such be a major 
compoHent of .our notion of universal guides. The 
comparison relalioil Ibr this partially ordered structure 
consisting of sets will be based on tile rclatiolJ "being a 
subset" c-. We forinalizc the previous discussion by the 
Ibllow ing dclhfitions. 
I)I:,FINITION 3. I. (A \[;SEI:UI, I~ARTIAI,I,Y 
O1(1)1H~, El) P, 1,;1 ,ATION) 
Lot S and S' bc two sets and N and N' lwo n()n- 
negative integers. We say that ordered pair (S,N) is 
greater than or equal lo ordered pair (S' ,N')  and write 
(S,N)~>(S',N') i ff(S S '&  N. N ' )or(S .~S'  or(S :S'& 
N>N')~ 
is obviously a reflexive, anti.-symmctrical and 
transitive relation and therefore a relation e/l partial 
order. 
I)I<;I:INITI()N 3.2. (UNIVI~,RSA1, GUII)I iS) 
l,ct ~ he a collection of all subsets of a set ~ (~ '.1~(~)) 
and I ? set of all non-negative integers. A universal 
guide structure is a partially ordered structure (P ,~) ,  
where P :  { (S ,N) /  S~'~ & N~I ? }, and > is fiom 
tile definition 3.1.. 
The presence of a special kind of universal guides in 
a grammar is always only implicit, but for tile sake of 
being able to prove Ihcts about them formally, it can be 
made explicit. The universal guide structure in a logic 
gramnmr is hased oil the set of wuiables still 
uninstantiated at a given moment of a derivation 
process, l",xpansion of a production rule may or may not 
instantiate (consume) some of them. l:or instance, by 
adding two special extra argtuncnts to each symbol in 
the following rules: 
(1) noun phrase ( Num, NP Str, NP Rest ) --> 
det(Num,NP Str,I) Rcst),noun(Nun\],l) Rest,NP Rest). 
(2) del ( sing, laiD Rest\] I) Rest ). 
(3) noun ( sing, I(log~kN Rest\]~ N Rest ). 
tile convergence or diver/_,ence of a derivation using tile 
rules becomes explicit. The uew arguments are: a set of 
currently uninstantiated variables (tile so called guide's 
set component) and a non-negative integer (the guide's 
977 
numeric omponent). The following simple derivation of 
the phrase a dog: 
noun~hrase (Num, NP_Str, NP_Rest) ->  
det (Num, NP. Str, DRest), 
noun (Nmn, DRest,  NP_Rest) --> (1) 
det (sing, laiD Rest\], D Rest), 
noun (sing, D Rest, NP Rest) --> (2) 
det (sing, \[a, doglNP Rest\], \[doglNP - Rest\]), 
noun (sing, \[dog\[NP_Rest\], NP_Rest). (3) 
(assuming there are p rules in the grammar) becomes: 
noun phrase (Num, NP_Str, NP Rest, 
{Num, NP_Str, NP_Rest, D_Rest}, p) --> 
det (Num, NP Str, D_Rest, 
{Num, NP Str, NP_Rest, D_Rest}, p-l), 
noun (Num, D Rest, NP Rest, 
{Num, NP_Str, NP Rest, DRest}, p-l) --> (/) 
det (sing, laiD_Rest\], I)  Rest, 
{NP_Rest, D_Rest}, p), 
noun (sing, D Rest, NP_Rest, 
{NP Rest, DRest}, O) --> (2) 
det (sing, \[a,dog~NP Rest\], \[dog~NP_Rest\], 
{NP_Rest}, O), 
noun (sing, \[doglNP Rest\], NP_Rest, 
{NP_Rest}, 0). (3). 
The new arguments are given in bold case. When a rule 
to be expanded (partially or completely) instantiates some 
variables (rules (2) and (3) in the previous example), the 
guide's set component is reduced by those variables and 
the guide's numeric omponent is reset o p (the number 
of rules in the grammar). On the other hand, when a rule 
does not instantiate any variable, the set component s ays 
unchanged and the numeric component is decreased by 
one (rule (1)). 
The numeric component actually counts (down) the 
number of consecutive occurrences of rules that do not 
instantiate may variable. If that number is larger than the 
total number of rules in the grammar (p), then a 
grammar ule must have been repeated in its unchanged 
form, and a potentially infinite derivation is caught. Such 
a rule is always failed. For example, np --> np pp rule 
will in a TDLR derivation cause an infinite loop. 
However, adding universal guides to it will always, when 
this rule is applied, decrease the guide's numeric 
component by one (as no variable gets instantiated). 
Since the numeric component is always initialized and 
reset (after a rule that instantiates some variable(s)) to 9 
(number of rules in the grammar), it will eventually go 
down to 0, which in turn will fail this rule, as in the 
following sequence: 
np(Vars,p) --> np(Vars,p- 1) pp(Vars,p- 1) 
--> np(Vars,p-2) pp(Vars,p-2)pp(Vars,p-l) 
--> np(Vars,p-3) pp(Vars,p-3)pp(Vars,p-2)pp(Vars, p- l) 
--> np(Vars,0) pp(Vars,0)pp(Vars, I) ... pp(Vars,p- 1) 
--> fail. 
All details (additional arguments for original predicates, 
additional predicates, transformation of the original rules 
into equivalent ones containing uides) of the procedure 
tbr introducing universal guides into a grammar and 
their handling can be lound in \[M92\]. 
Thus, the universal guide structure is represented in
the new grammar by the pairs (Unln,Num) which stand 
for the set of all currently uninstantiated variables and 
the numeric guide's component, respectively. The new 
grammar is equivalent o the original one. By the 
introduction of an additional grammar predicate at the 
end of each rule (called decrease in \[M92\]) the guide 
consumption condition is demonstrated to hold for any 
finite and complete derivation. If a variable gets bound 
then the guide gets stricUy smaller because the set of 
still uninstantiated variables participating in the 
derivation has lost one member. If no variabie gets 
instantiated, the decrease of the number component is 
there to ensure that the guide itself strictly decreases (by 
the definition 3.2.). By failing, this new (decrease) 
predicate will stop any derivation that contains a 
sequence of more than p consecutive applications of 
rules that do not instantiate any variable (because the 
further decrease of the guide's numeric component 
would make it negative). Otherwise, a production rule 
would be repeated in the same manner without 
instantiating any of the present variables which would in 
turn cause an infinite derivation to take place. Thus, 
because of the way the universal guides are introduced 
for any derivation in the new grammar, guide 
consumption condition holds. The difference between 
finite and infinite derivations is isolated and solely 
characterized by the set component of the universal 
guides being either finite or infinite initially. 
The following theorem establishes a correlation 
between proper and universal guides. 
Theorem 3.1.: lfthere is a proper guide structure for a 
class of logic grammars (in its form flom \[DIP90\]) 
satisfying guide consumption and no-chain conditions 
(GCC and NCC) under the TDLR grammar evaluation 
algorithm, then the universal guide structure (under the 
same algorithm) is a proper guide structure satisfying 
both GCC and NCC. 
Proof 
The existence of the proper guides atisfying GCC and 
NCC nnder the TDLR algorithm guarantees that all 
derivations will be finite for the given class of 
grammars (main theorem from \[DIP90\]). 
Since the derivations are finite, the universal guides 
will initially assume a finite value (its set component 
will be set to all variables taking part in the derivation 
and its number component will be assigned value p 
(number of different production rules in the grammar). 
The universal guides are defined to always satisfy the 
guide consumption condition, and since NCC is assnmed 
as well, it only remains to show that the descending 
918 
chain condition is respected. 
As every strictly descending chain of universal guides 
with a finite initial value must be finite (moreover, we 
know lhat its length is always less than or equal to p*u 
(u being number of variables taking part in the 
derivation), the universal guide structure has all 
properties of a proper guide structure,, 
Thus, whenever proper guides can be used to establish 
the finiteness of an algorithm, the universal guides 
approach may likewise be used. 
Also, tile notion of universal guides proves to be more 
general than the notion of guides in the sense that it does 
not asstane any partictflar algorithm under which a 
grammar will be processed. It is applicable to any 
algorithm, and to apply it would mean to specify 
conditions on gtammars thal would (for a given 
algorithm) guarantee finiteness of tile forclnentioncd sets 
(set components of the universal guides). Of conrse, the 
character of tile conditions will ctepcnd oll tile nature of 
tile gtamtnar processing algorithm. Proper guicles as 
proposed by I)ymetman, ctal. guarantee finiteness el:one 
specific (TI)I,R) algorithm if the grammar satisfies GCC 
and NCC. 
The following example describing a wh-question (here 
used for tile generation of tile sentence who wrote this 
\[~l'Olll the given semantics wrote(who, this')) could be 
helpftfl to illustrate the applicability of tile tmiversal 
guides approach where tim proper guides would not 
work: 
1 ) whques 
WhQues Sere, WhQues Sen, WhQues SenRest ) --> 
whsubj 
Number, WhSubj Sere, WhQues. Sen, Restl ), 
whpred 
Number, Tense, \[WhSubj Sere, WhObj Sere\], 
WhQues Sere, Restl, Rest2 ), 
who/~j ( WhOl~i Sere, Rest2, WhQues SenRest ). 
(2) whsubj (X, who, \[wholWhSubjRest\], WhSubjRest). 
(3) whsubj (X, what, \[what WhSubjRest\], WhSubjRest). 
(4) whpred (sing, perf, \[Subj,Obj\], wrote(who,this), 
\[wroteliWhPredRest\], WhPredRest ).
(5) whobj (this, \[thisl, WhObjRest\], WhObjRest). 
Fig. 3.1.: A Sample Grammar. 
When the semantic-head-driven g eration algorithm 
(see \[SNMP89\]) is used, lhe order in which different 
rules are applied carl best be described by tile analysis 
trec from tile Fig. 3.2.. The mnnbering for edges 
indicates the order in which the grammar ules were 
used. Thus, rule (4) was used first, then rule (1), 
lollowcd by rules (2) and (5) respectively. The variables 
that were introduced as uninstantiated are WhQues Sen 
(by invoking the topmost predicate), Sut?/, Old/, and 
WhPredRest (by the application of rule (4)). The 
application of rule (I) (expanded second) unified 
number components of u,hsub\] and whpred (already 
instantiatcd by rule (4)), semantic omponents ofwhsuhj 
and whol~/ with variables Sul?j and Ot?j fi'om wkf)red , 
whques( 
wrote(who, this), 
WhQues_Sen,\[\[l) 
whpred(Nun) ber: .. 
1 1  Tensse, Subj,  Obj l ,  
wrote(who,th is) ,  
whsubj(number, Rest 1, Rest2) 
WhQues_Sen, Rest 1) 
whsubj( sing, who, 
\[who I Iwrote I Rest2\]l, 
\[wrote I Rest2\]) 
whpred( sing, perf, 
\[Subj,Obj\], 
wrote(who,this), 
\[wrote \[ Rest2\], Rest2) 
whobj(  Obj ,  
Rest2, II) 
whobj( th is ,  
lthisl, \[I) 
31 
who 
. 
wrote 
\] 4 
this 
Fig. 3.2.: A Derivation 'Free. 
919 
respectively, WhSubjRest component with WhPred Sen 
component of whpred (already partially instantiated by 
rule (4)), as well as WhPredRest with WhObj Sen. It also 
unified WhSut~j Sen with WhQues Sen and \[\] with 
WhObjRest and therefore did not introduce any new 
uninstantiated variables. The application of rules (2) and 
(4) did not introduce new variables neither. Thus, the set 
of all uninstantiated variables participating in this 
derivation is { WhQues_Sen, Subj, Obj, WhPredRest }. 
Subj gets instantiated by the application of rule (2), Ol~/ 
and WhPredRest by rule (5), and the instantiation of the 
variable WhQues Sen is partially done by rules (4), (2), 
and eventually completed by rule (5). Thus, set 
component of the universal guide variable { 
WhQues_Sen, Subj, Obj, WbPredRest }is first consumed 
by the application of rule (4) (part of WhQues &m), then 
by rule (2) (another part of WhQuesSen, plus Subj), and 
eventually reduced to an empty set (represented here as 
\[\]) by rule (5) (final ingredienf of WhQues Sen, plus Ol~/ 
and WhPredRest). 
This semantic-head-driven d rivation with the universal 
guides included (and under' assumption that the grammar 
has p different production rules) can be described by the 
following steps: 
-- whques (wrote(who, this), WhQucs_Sen, \[\], 
{WhQues Sen, Subj, Obj, WhPredRest}, p). -?- 
-- whpred (sing, perf, \[Subj,Obj\], wrote(Subj,Obj), 
\[wrotclWhPredRcst\], WhPredRest, 
{WhQues_Sen, Subj, Obj, WhPredRest}, P). rule (4) 
-- whques (wrote(who,this), WhQues Sen, \[1, 
{WhQues Sen, Subj, Obj, WhPredRest}, p-I) --> 
whsubj (sing, Subj, WhQues_Sen, \[wrotel~WhPredRest\], 
{WhQues Sen, Subj, Obj, WhPredRest}, p-I), 
whpred (sing, perf, \[Subj,Obj\], wrote(Subj,Obj), 
\ [wrote ' ,WhPredRest \ ] ,  WhPredRest ,  
{WhQues_Sen,Subj,Obj,Wh PredRest}, o-l), 
whob j  (Ob j ,  WhPredRest ,  \ [ \ ] ,  
{WhQues_Sen,Subj,Obj,WhPredllest}, O-1) rule (1) 
-- whsubj (sing, who, \[who,wrote',WhPredRest\], 
\[wrote',Wh PredRest\],{WhQues_Sen,Obj,WhPredl/est}, 
p) rule (2) 
-- whobj (this, \[this\], \[\], {}, p) rule (5) 
Unlike universal guides proper guides require a specific 
(TDLR) grammar evaluation strategy and therefore this 
approach is not applicable at all for the semantic-head- 
driven generation algorithm since this algorithm assumes 
a grammar evaluation strategy different fi'om TDI,R. 
Generally and tbr any evaluation strategy, the formal 
link between the universal guide consumption and 
termination can be expressed by the following claim: 
Theorem 3.2.: I,et G be a logic grammar and G' its 
equivalent aRer the universal guides were introduced into 
G. If the guide consumption condition is fulfilled lbr a 
derivation in G' and initial value of the guide structure 
is finite, then the derivation in question will be finite too. 
The proof of this theorem as well as a detailed 
specification of how to introduce tmiversal guides into 
a grammar can be found in \[M92\]. 
Moreover, the common essence of tim parsing and 
generation process as merely different instances of the 
stone generic process of consuming the universal guides 
becomes obvious after making the appearance of 
universal guides explicit. Universal guide variables do 
not necessarily have different meaning for" parsing and 
generation as do proper guides. Even under an 
evaluation strategy (TDLR) assumed in advance proper 
guides (as in the case of lexical grammar> floln 
\[DIP90\]) represent difterenl entities for parsing and 
generation. For a parsing algorithm guides are difference 
lists of words remaining to be analyzed, and for' a 
generation they are lists of subcategorized semantics to 
be generated next. Unlike proper guides, universal 
guides exposed the common substance of the two 
processes. They are always (for parsing as well as for 
generation) instantiated as sets of all currently 
uninstantiated variables. 
Another feature of the univcrsal guides that gives them 
an advantage over proper guides is that they do not 
impose the restriction that the guides can be consnmed 
only at the level of lexical predicates. Thus, the class of 
grammars lbr which this approach can be used is 
broader than for that of proper guides. 
Also, we in effect presented here a class of grammars 
the recursivity of which can be proven by induction. 
4. CONCLUSION 
This paper' addressed finiteness and symmctry of 
parsing and generation algorithms using a novel 
univers'al guides approach. We pointed out some 
deficiencies of proper guides' approach as advocated in 
some earlier research. These included the applicability 
of proper guides only when the evaluation strategy is 
TDLR, and when it is also known whether a parsing or 
a generation algorithm is in question. Also, the 
consmnption of proper guides was allowed only at the 
lexical evel. By the introduction of univers'al guide.s' all 
of these deficiencies are eliminated and a true symmetry 
is achieved in treating the parsing and generation 
problem. Unlike proper guides, univers'al guides' do not 
need to be constructed and instantiated ifferently tbr 
parsing and for generation, and no additional grammar 
transformation (i.e. left recursion elimination) is needed 
for them to be applicable. 
5. ACKNOWLEDC, MENTS 
This papcr is based upon work supported by the 
Defense Advance Research Prqject Agency under 
Contract N00014-90-J-1851 from the Office of Naval 
Research, the National Science Foundation under Grant 
IRI-93-02615 and the Canadian Institute for Robotics 
and Intelligent Systems (IRIS). Additional support was 
92.0 
providcd by Wagner College, Staten lshmd and l'acc 
University, New York. 
6. REFERENCES 
11)1881 I)YMETMAN, M. and \[SAI{I:,\[,I,I'I, P.
1988. "Reversible l,ogic Grammars for Machine 
Translation". 
Proceedings of the 2nd International (.'onJerence 
on 7heoretical and Methodological Issues in 
Machine 7'ranslalion (?/ Natural Languages, 
Carnegie-Mellon University, Pittsburgh, PA. 
111)19011 I)YMI:/I'MAN, M. and ISABH,I,t.;, I'. 
1990. "Grammar Bidirectionality hrough Controlled 
l\]ackward Deduction". 
Logic and Logic Grammars ./i;r l,a~Nuage 
Processing. 
eds. Saint Dizier, P. and S. Szpakowicz, 
Chichester, England: Ellis llorwood. 
II)IPg0\] I)YMI:/I'MAN, M., ISAI~I';I,t,I". P. and 
PI,;RRAUI ,T, F. 
1990. "A Symmetrical Approach to Parsing and 
(ieneration". 
I'rocecdin,qs o\]' the 13th International 
(.'or~brence on (/ompulational Linguistics 
(('OLING-90) 
l lelsinki, Hnland, Vol. 3, pp. 90-96. 
\[1)M78\] I)\[,;RSIIOWITZ, N., MANNA, Z. 
1978. "Proving Termination with Multiset 
Orderings". 
"li~chnical RrT)ort, Staq/),'d Uni., March 1978. 
ID87\] I)I!RSIIOWITZ, N. 
1987. "Termination of Rewriting". 
,Joto'nal ~?" 5,)nnholic (/omputalion 
Vol. 3, 1987. 
\[M921 MARTINOVIC, M. 
1992. An Evaluation A))stem ./i)r Parsing and 
Generation Algorithm. 
October 1992, Belgrade University Thesis 
Research Report. 
\[MS921 MARTINOVI('2, M. and STRZALKOWSKI, T. 
1992. "Comparing Two Gralnmar-Based Generation 
Algorithms: A Case Study". 
Proceedings (?/'the 30th Annual Meeting q/the 
/lssociation Jor Computational Linguistics, 
July 1992, Newark, Delaware. 
\[N89\] VAN N()ORD, J. 
1989. "BUG: A Directed Bottom-Up Generator lbr 
Unification Based Formalisms". 
Working Papepw in Natural Language 
Processing No. 4. 
Utrecht, Holland: RUU, l)epartment of 
l,inguistics. 
IS88\] SIHEBVJL S. M. 
1988. "A IJnilbrm Architecture for Parsing and 
(}eneration". 
l'rocecdings of the 12tk International 
(/oq/brcrwe on Computational Linguistics. 
pp. 614-619., P, udapest,  hmgary, August 1988. 
\[SNMP89\] SI\[II~I~II:JL S.M., VAN NOORI), G., 
MOORt';, R., PERt';IRA, F. 
1989. "A Semantie-t lead-Driven Generation 
Algorithnl for Unification-Based Fornlalisms". 
l'roceedings q/'the 27th Annual Meeting of the 
Association Jbr ('ompulational Linguistics, 
pp. 7- 17, Vancouver, B.C., Canada, .hme 1989. 
921 
