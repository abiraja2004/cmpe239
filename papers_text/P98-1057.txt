Group Theory and Linguistic Processing* 
Marc Dymetman 
Xerox  Research  Centre  Europe  
6, chemin  de Mauper tu i s  
38240 Mey lan ,  F rance  
Marc .  Dymetman@xrce .  xerox ,  com 
1 Introduction 
There is currently much interest in bringing together 
the tradition of categorial grammar, and especially the 
Lambek calculus (Lambek, 1958), with the more recent 
paradigm of linear logic (Girard, 1987) to which it has 
strong ties. One active research area concerns the de- 
sign of non-commutative rsions of linear logic (Abr- 
usci, 1991; Rdtor6, 1993) which can be sensitive to word 
order while retaining the hypothetical reasoning capabil- 
ities of standard (commutative) linear logic that make it 
so well-adapted to handling such phenomena as quanti- 
fier scoping (Dalrymple t al., 1995). 
Some connections between the Lambek calculus and 
group structure have long been known (van Benthem, 
1986), and linear logic itself has some aspects trongly 
reminiscent of groups (the producer/consumer duality of 
a formula A with its linear negation Aa-), but no serious 
attempt has been made so far to base a theory of linguis- 
tic description solely on group structure. 
This paper presents uch a model, G-grammars (for 
"group grammars"), and argues that: 
? The standard group-theoretic notion of conjugacy, 
which is central in G-grammars, is well-suited to 
a uniform description of commutative and non- 
commutative aspects of language; 
? The use of conjugacy provides an elegant approach 
to long-distance dependency and scoping phenom- 
ena, both in parsing and in generation; 
? G-grammars give a symmetrical account of the 
semantics-phonology relation, from which it is easy 
to extract, via simple group calculations, rewriting 
systems computing this relation for the parsing and 
generation modes. 
2 Group Computation 
A MONOID AI is a set M together with a product M ? 
31 --+ ,ll, written (a, b) ~+ ab, such that: 
? This product is associative; 
? There is an element 1 E M (the neutral element) 
with la = al  = a for all a 6 M. 
* This paper is an abridged version of Group Theory and Gram- 
matical Description, TR-MLTT-033, XRCE, April 1998; available 
on the CMP-LG archive at the address: http://xxx.lanl.gov/abs/cmp- 
Ig/9805002. 
A GROUP is a monoid in which every element a has an 
inverse a -1 such that a-  l a = aa -1 -- l. 
A PREORDER on a set is a reflexive and transitive re- 
lation on this set. When the relation is also symmetrical, 
that is, R(x,  Y) ~ R(y,  x), then the preorder is called an 
EQUIVALENCE RELATION. When it is antisymmetrical, 
that is that is, R(x ,  Y) A R(y,  x) ~ x = Y, it is called a 
PARTIAL ORDER. 
A preorder R on a group G will be said to be COM- 
PATIBLE with the group product iff, whenever R(x, Y) 
and R( x', y'), then R( xx' ,  yy'). 
Normal submonoids of a group. We consider a com- 
patible preorder notated x -4 y on a group G. The fol- 
lowing properties, for any x, y E G, are immediate: 
x -+ y ?:~ x y -  l -41;  
x -4 y ?0 y - l  -4 x-1;  
x-41  ?:v 1 -4x -~;  
x-41  :::?, yxy - l  -41 ,  fo ranyyEG.  
Two elements x, x' in a group G are said to be CONJU- 
GATE if there exists y 6 G such that x' = yxy  -1. The 
fourth property above says that the set A,/ of elements 
x 6 G such that x -41 is a set which contains along with 
an element all its conjugates, that is, a NORMAL subset 
of G. As M is clearly a submonoid of G, it will be called 
a NORMAL SUBMONOID o f  G .  
Conversely, it is easy to show that with any nor- 
mal submonoid M of G one can associate a pre- 
order compatible with G. Indeed let's define x -+ y 
as xy  -1 6 M. The relation --~ is clearly reflex- 
ive and transitive, hence is a preorder. It is also 
compatible with G, for if xl --)- yl and x2 -4 y_~, then 
xly1-1, x2yg. -1 and yl (x~y2-1)y1-1 are in M; hence 
XlX2y~.-ly1-1 : x ly l - l y lx~.y2-1y1-1  is in M, im- 
plying that XlX2 -4 y ly: ,  that is, that the preorder is 
compatible. 
If S is a subset of G, the intersection of all normal 
submonoids of G containing S (resp. of all subgroups 
of G containing S) is a normal submonoid of G (resp. a 
J ln general M is not a subgroup of G. It is iff x ~ y implies 
Y --+ x, that is, if the compatible preorder --~ is an equivalence re- 
lation (and, therefore, a CONGRUENCE) on G. When this is the case, 
M is a NORMAL SUBGROUPof G. This notion plays a pivotal role in 
classical algebra. Its generalization to submonoids of G is basic for the 
algebraic theory of computation presented here. 
348 
normal subgroup of G) and is called the NORMAL SUB- 
MONOID CLOSURE NM(S) of S in G (resp. the NOR- 
MAL SUBGROUP CLOSURE NG(S) of S in G). 
The free group over %'. We now consider an arbitrary 
set V, called the VOCABULARY, and we form the so- 
called SET OF ATOMS ON W, which is notated V t_J V -1 
and is obtained by taking both elements v in V and the 
formal inverses v-1 of these elements. 
We now consider the set F(V)  consisting of the empty 
string, notated 1, and of strings of the form zxx~....:e,, 
where zi is an atom on V. It is assumed that such a 
string is REDUCED, that is, never contains two consecu- 
tive atoms which are inverse of each other: no substring 
vv-1 or v-1 v is allowed to appear in a reduced string. 
When a and fl are two reduced strings, their concate- 
nation c~fl can be reduced by eliminating all substrings of 
the form v v-  1 or v -  1 v. It can be proven that the reduced 
string 7 obtained in this way is independent of the order 
of such eliminations. In this way, a product on F (V)  
is defined, and it is easily shown that F(V)  becomes a
(non-commutative) group, called the FREE GROUP over 
V (Hungerford, 1974). 
Group computation. We will say that an ordered pair 
GCS = (~, R) is a GROUP COMPUTATION STRUCTURE 
if: 
1. V is a set, called the VOCABULARY, or the set of 
GENERATORS 
2. R is a subset of F(V) ,  called the LEXICON, or the 
set of RELATORS. 2 
The submonoid closure NM(R) of R in F (V)  is called 
the RESULT MONOID of  the group computation structure 
GCS. The elements of NM(R) will be called COMPU- 
TATION RESULTS, or  simply RESULTS. 
If r is a relator, and if ct is an arbitrary element of 
F(V) ,  then ct, rc~ -1 will be called a QUASI-RELATOR of 
the group computation structure. It is easily seen that 
the set RN of quasi-relators i equal to the normal sub- 
set closure of R in F(V) ,  and that NM(RN) is equal to 
NM(R). 
A COMPUTATION relative to GCS is a finite sequence 
c = (rl . . . .  , rn) of quasi-relators. The product rx ? ? ? r,, 
in F (V)  is evidently a result, and is called the RESULT 
OF THE COMPUTATION c. It can be shown that the result 
monoid is entirely covered in this way: each result is 
the result of some computation. A computation can thus 
be seen as a "witness", or as a "proof", of the fact that 
a given element of F (V)  is a result of the computation 
structure. 3 
For specific computation tasks, one focusses on results 
of a certain sort, for instance results which express a re- 
lationship of input-output, where input and output are 
2 For readers familiar with group theory, this terminology will evoke 
the classical notion of group PRESENTATION through generators and 
relators. The main difference with our definition is that, in the classical 
case, the set of relators is taken to be symmetrical, that is, to contain 
r -1 if it contains r. When this additional assumption is made, our 
preorder becomes an equivalence r lation. 
3The analogy with the view in constructive logics is clear. There 
what we call a result is called a formula or a tbpe, and what we call a 
computation is called aprot~ 
j john -1 
1 louise -1 
p parts 
ra man -1  
W woman -1  
A -I r (A) ran -1  
A -I s (A, B) B -I saw - I  
E -I i (E,A)  A -I in -I 
t(N) N -I the -I  
ev(N,X ,P \ [X \ ] )  p\ [x\ ] -1 ~- i  X N -I ever)' -a 
sm(N,X ,P \ [X \ ] )  p\ [x\ ] -1 ~- i  X N -1 some -x 
N -I t t (N ,X ,P \ [X \ ] )  p\[X\] -I a -I X ~ that - I  
Figure 1 : A G-grammar for a fragment of English 
assumed to belong to certain object types. For exam- 
ple, in computational linguistics, one is often interested 
in results which express a relationship between a fixed 
semantic input and a possible textual output (generation 
mode) or conversely in results which express a relation- 
ship between a fixed textual input and a possible seman- 
tic output (parsing mode). 
If GCS = (V, R) is a group computation structure, 
and if A is a given subset of F(V) ,  then we will call 
the pair GCSA = (GCS, A) a GROUP COMPUTATION 
STRUCTURE WITH ACCEPTORS. We will say that A 
is the set of acceptors, or the PUBLIC INTERFACE, of  
GCSA. A result of GCS which belongs to the public 
interface will be called a PUBLIC RESULT of GCSA.  
3 G-Grammars 
We will now show how the formal concepts introduced 
above can be applied to the problems of grammatical 
description and computation. We start by introducing 
a grammar, which we will call a G-GRAMMAR (for 
"Group Grammar"), for a fragment of English (see Fig. 
1). 
A G-grammar is a group computation structure with 
acceptors over a vocabulary V = Vlog U ~/pho~ con- 
sisting of a set of logical forms l/~og and a disjoint 
set of phonological elements (in the example, words) 
l/~ho,,. Examples of phonological elements are john, 
saw, ever).,, examples of logical forms j ,  s ( j ,  1) ,  
ev  (re,x, sra(w,y,  s (x ,y ) )  ); these logical forms can 
be glossed respectively as "john", "john saw louise" and 
"for every man x, for some woman y, x saw y". 
The grammar lexicon, or set of relators, R is given as a 
list of"lexical schemes". An example is given in Fig. 1. 
Each line is a lexical scheme and represents a set of re- 
lators in F(V) .  The first line is a ground scheme, which 
corresponds to the single relator j john-1, and so are 
the next four lines. The fifth line is a non-ground scheme, 
which corresponds to an infinite set of relators, obtained 
by instanciating the term meta-variable A (notated in up- 
percase) to a logical form. So are the remaining lines. 
We use Greek letters for expression meta-variables such 
as a, which can be replaced by an arbitrary expression 
of F(V) ;  thus, whereas the term meta-variables A, B ..... 
range over logical forms, the expression meta-variables 
,~, fl ..... range over products of logical forms and phono- 
349 
logical elements (or their inverses) in F(V) .  4 
The notation p \[x\] is employed to express the fact 
that a logical form containing an argument identifier x 
is equal to the application of the abstraction P to x. The 
meta-variable X in p \[X\] ranges over such identifiers (x, 
y, z .... ), which are notated in lower-case italics (and are 
always ground). The meta-variable p ranges over logi- 
cal form abstractions missing one argument (for instance 
Az. s ( j ,  z) ). When matching meta-variables in logical 
forms, we will allow limited use of higher-order unifica- 
tion. For instance, one can match P \[X\] to -~ ( j  ,x) by 
takingP = Az.s( j ,  z) and X = x. 
The vocabulary and the set of relators that we have just 
specified define a group computation structure GCS = 
(I,, _R). We will now describe a set of acceptors A for 
this computation structure. We take A to be the set of 
elements of F (V)  which are products of the following 
form: 
S l I /n - lWr~_1-1  . . . IV1 -1  
where S is a logical form (S stands for "semantics"), 
and where each II';- is a phonological element (W stands 
for "'word"). The expression above is a way of encoding 
the ordered pair consisting of the logical form S and the 
phonological string 111 l,I) . . .  l.I;~ (that is, the inverse of 
the product l, Vn- 11Vn- 1 - I . . .  I.V1-1). 
A public result SWn- lWn_ l -1 . . . t ' Iq  -1 in the 
group computation structure with acceptors ((V, R), A) 
- -  the G-grammar - -wi l l  be interpreted as meaning that 
the logical form S can be expressed as the phonological 
string IV1 l'l:~ ' .. lYn. 
Let us give an example of a public result relative to the 
grammar of Fig. 1. 
We consider the relators (instanciations of relator 
schemes): 
r l  = j -1  s ( j ,1 )  
r,_ = 1 louise -1 
r3  = j j ohn  - t  
I -  1 saw-1  
and the quasi-relators: 
' - i  r l '  = j r l  3 
r2 '  = ( j  san,)  r2  
r3  ' = r3  
j saw) - i  
Then we have:  
r l '  r2 '  r3 '  = 
j j-1 s(j,l) i-I saw-1 j-I 
j saw 1 louise-1 saw-  1. j -1  
j j ohn-1  = s ( j ,1 )  louise-1 saw-  1 john-  x 
which means that s ( j ,  1 ) louise-I  saw-  l j ohn-  1 is the 
result of a computation (r~ ' ,  r2 ' ,  r3 ' ) ? This result 
is obviously a public one, which means that the logi- 
cal form s ( j ,  1 ) can be verbalized as the phonological 
string john saw louise. 
4Expression meta-variables are employed in the grammar for form- 
ing the set of conjugates c~ e:cp ~-1  of certain expressions ezp (in 
our example, earp is ov{N,X ,P \ [X \ ]  ) P\[X\] -1 ,  sm(N,X ,P \ [X \ ]  ) 
P \[X\] -1  or X). Conjugacy allows the enclosed material exp to move 
as a bh, ck in expressions of F (V) ,  see sections 3. and 4. 
j ~ john 
i ~ louise 
p ~ paris 
m ~ man 
w ~ woman 
r (A)  -~ A ran 
s (A,B) -~ A saw B 
i (E ,A)  -~ E in A 
t (N)  --~ the N 
ev(N,X ,P \ [X \ ] )  ~ ce -1 
sm(N,X ,P \ [X I )  ...x cr -1 
t t  (N ,X ,P \ [X \ ] )  
eveo'  N X -a  oc P \ [X \ ]  
some N X -1 a P \ [X \ ]  
N that a -a X -1 c~ P \ [X \ ]  
Figure 2: Generation-oriented rules 
4 Generat ion  
Applying directly, as we have just done, the definition of 
a group computation structure in order to obtain public 
results can be somewhat unintuitive. It is often easier to 
use the preorder --+. If, for a, b, c 6 F (V) ,  abc is a rela- 
tor, then abc --+ 1, and therefore b --+ a - l c  -1. Taking this 
remark into account, it is possible to write the relators of 
our G-grammar as the "rewriting rules" of Fig. 2; we use 
the notation ----" instead of --+ to distinguish these rules 
from the parsing rules which will be introduced in the 
next section. 
The rules of Fig. 2 have a systematic structure. The 
left-hand side of each rule consists of a single logical 
form, taken from the corresponding relator in the G- 
grammar; the right-hand side is obtained by "moving" 
all the renmining elements in the relator to the right of 
the arrow. 
Because the rules of Fig. 2 privilege the rewriting of 
a logical form into an expression of F (V) ,  they are 
called generation-oriented rules associated with the G- 
grammar. 
Using these rules, and the fact that the preorder 
is compatible with the product of F (V) ,  the fact that 
s ( j ,  1 ) l ou i se - l saw- l john  - 1 is a public result can be 
obtained in a simpler way than previously. We have: 
s ( j , l )  
j ~ john 
1 ~ louise 
j saw 1 
by the seventh, first and second rules (properly instanci- 
ated), and therefore, by transitivity and compatibility of 
the preorder: 
s ( j ,1 )  ~ j saw 1 
john saw 1 ~ john saw louise 
which .proves that s ( j ,  1 ) ---~john saw louise, 
which Is equivalent to saying that s ( j ,  1) 
louise- 1 saw-  l j ohn-  1 is a public result. 
Some other generation examples are given in Fig. 3. 
The first example is straightforward and works simi- 
larly to the one we have just seen: from the logical form 
5. ( s ( j ,  1 ) ,  p)  one can derive the phonological string 
john saw louise in paris. 
350 
i(s(j, l) ,p) 
-~ s(j,l) in p 
_.x j saw 1 in p 
--~ john saw 1 in p 
john saw louise in p 
j ohn  saw louise in paris 
ev(m,x,sm(w,y, s (x,y) ) ) 
--~ ct -I every m x -I c~ sm(w,y ,s (x ,y ) )  
0 -1 every m x -1 o~ 19 -1 some w y-1 /3 s (x,y) 
---, cr -~ every man x -1 a 
/3-1 some woman y -1  /3 x saw y 
a -1 every man x -1 a x saw some woman 
(by taking/3 = saw -1 x -1)  
__x every man saw some woman 
(by taking a = 1) 
sm(w,y,ev(m,x, s (x,y) ) ) 
._~ /3-i some w y-1 /3 ev(m,x ,s (x ,y ) ) )  
/3 - I  some w y -1  /9 ce-1 ever)' m x -1 ce s (x ,y )  
--~ /3 -1 some woman y -1  fl 
c~ -1 ever), man x -1 ce x saw y 
/3 -1 some woman y -1  /3 every man saw y 
(by taking a = 1) 
.--, every man saw some woman 
(by taking/3 = saw -1 man -a every -1)  
Figure 3: Generation examples 
merit, quantified noun phrases can move to whatever 
place is assigned to them after the expansion of their 
"scope" predicate, a place which was unpredictable at 
the time of the expansion of the quantified logical form. 
The identifiers act as "target markers" for the quantified 
noun phrase: the only way to "get rid" of an identifier x 
is by moving z -1 ,  and  therefore  w i th  it the cor respond-  
ing quant i f ied  noun  phrase ,  to a place where it can cancel 
with z. 
5 Parsing 
To the compatible preorder ~ on F(V)  there corre- 
sponds a "reverse" compatible preorder ---, defined as 
a ---, b iff b ~ a, or, equivalently, a -  1 __+ b- 1. The nor- 
mal submonoid M '  in F(V)  associated with ---, is the 
inverse monoid of the normal submonoid M associated 
with ~,  that is, M '  contains a iff M contains a -  1. 
It is then clear that one can present he relations: 
j j ohn- i - -+  1 
A- I r (A)  ran - I -+  1 
sm(N,X ,P \ [X \ ] )  P \ [X \ ] - I~- IX  N- isom e- l -+  
etc. 
in the equivalent way: 
j ohn  j -1 ._ . ,  1 
ran r (A) - IA  ---7 1 
some N x- lo  ' P\[X\]  
etc. 
sm(N,X ,P \ [X \ ] ) -1~-1-v  1 
Long-distance movement and quantifiers The sec- 
ond and third examples are parallel to each other and 
show the derivation of the same string ever}' man saw 
some woman from two different logical forms. The 
penultimate and last steps of each example are the most 
interesting. In the penultimate step of the second exam- 
ple,/3 is instanciated to saw -1  x -1  . This has the effect of 
"moving" as  a who le  the expression some woman y -~ 
to the position just before y, and therefore to allow for the 
cancellation of y -  * and y. The net effect is thus to "re- 
place" the identifier y by the string some woman;  in the 
last step c~ is instanciated to the neutral element 1, which 
has the effect of replacing x by ever}' man.  In the penul- 
timate step of the third example, a. is instanciated to the 
neutral element, which has the effect of replacing x by ev- 
ery  man;  then fl is instanciated to saw-1man- levery -1 ,  
which has the effect of replacing y by some woman.  
Remark .  In all cases in which an expression similar to 
a al  . . .  am a -1  appears (with the ai arbitrary vo- 
cabulary elements), it is easily seen that, by giving a an 
appropriate value in F(V) ,  the al . . .  am can move ar- 
bitrarily to the left or to the right, but  on ly  together  in 
so l idar i ty ;  they can also freely permute cyclically, that 
is, by giving an appropriate value to a, the expression 
a al . . .  am a - l  can take on the value ak ak+l . . -  
a,,, al ? ?, ak-1 (other permutations are in general not 
possible). The values given to the or, fl, etc., in the exam- 
ples of this paper can be understood intuitively in terms 
of these two properties. 
We see that, by this mechanism of concerted move- 
john --~ j 
louise ---, 1 
paris ---, p 
man --, m 
woman -.--, W 
ran -= A -1 r(A) 
saw -v A -I s(A,B) B -I 
in --, E -I i(E,A) A -I 
the --7 t(N) N -I 
ever)' --, o ev(N,X,P\[X\])  
some --, c~ sm(N,X,P\[X\])  
that -v  N -I t t(N,X,P\[X\])  
p\[x\]-I ~-I X N -I 
P\[X\]-a ~-1 X N -I 
p\[x\]-1 ~-I X 
Figure 4: Parsing-oriented rules 
Suppose now that we move to the right of the --7 ar- 
row all elements appearing on the left of it, but for the 
single phonological element of each relator. We obtain 
the rules of Fig. 4, which we call the "parsing-oriented" 
rules associated with the G-grammar. 
By the same reasoning as in the generation case, it is 
easy to show that any derivation using these rules and 
leading to the relation PS  --,  LF ,  where PS  is a phono- 
logical string and LF  a logical form, corresponds to a 
public result LF  PS  -1  in the G-grammar. 
A few parsing examples are given in Fig. 5; they are 
the converses of the generation examples given earlier. 
In the first example, we first rewrite each of the 
phonological elements into the expression appearing on 
351 
j ohn  saw lou ise  in par i s  
--, j A -1 s (A,B)  B -1 i E -a 
--, s ( j ,B)  B -I 1 E -I i (E ,p)  
--, s ( j , l )  E -I i (E ,p)  
--, i ( s ( j , l )  ,p) 
i (E ,C)  C -a p 
ever  3 , man saw some woman 
? - ,  cr ev (N ,x ,P \ [x \ ] )  P \ [x \ ]  - I  a -1 X N -1 m A -1 s (A ,B)  B -1 /3 sm(M,y ,Q\ [y \ ] )  Q \ [y \ ] - i  
---, ~ ev(m,x ,P \ [x \ ] )  P lx \ ]  -a  o~ -1 x A -x s (A ,B)  B -1 /3 sm(w,y ,Q\ [y \ ] )  Q \ [y l -a  /3-1 y 
---, x A -a ev(m,x,P\[x\]) P\[x\] - I  s(A,B) B -1 /3 sm(w,y,Q\[y\])  Q\ [y \ ] - i  /3-a y 
- ,  x A -1 ev(m,x ,P \ [x \ ] )  P\[x\] -a s(A,B) Q\ [y \ ] - i  sm(w,y,Q\[y\])  B -1 y 
--, ev (m,x ,P \ [x l )  P\[x\] -a s(x,y)  Q\[y\]-a sm(w,y,Q\[y\]) 
and then either: 
---, ev(m,x,P\[xl)  P\[xl -a sm(w,y,s(x,y))  
--, ev(m,x, sm(w,y,s(x,y)  ) 
or: 
---, ev (m,x ,  sO<,y) )  Q\[y \ ] - i  sm(w,y ,Q\ [y \ ] )  
sm(w,y, ev (m, x, s (x,y)) 
Figure 5: Parsing examples 
~-*yM- lw  
the right-hand side of the rules (and where the meta- 
variables have been renamed in the standard way to avoid 
name clashes). The rewriting has taken place in par- 
allel, which is of course permitted (we could have ob- 
tained the same result by rewriting the words one by 
one). We then perform certain unifications: A is uni- 
fied with j ,  C with p; then B is unified to 1. 5 Finally E 
is unified with s ( j ,  i ), and we obtain the logical form 
? ( s ( j ,  3. ) ,  p ). In this last step, it might seem feasible 
to unify v. to ? (E, p) instead, but that is in fact forbid- 
den for it would mean that the logical form -i ( E, p) is 
not a finite tree, as we do require. This condition pre- 
vents "self-cancellation" of a logical form with a logical 
form that it strictly contains. 
Quantif ier scoping In the second example, we start 
by unifying m with N and w with M; then we "move" 
P\ [x \ ]  -1  next to s (A ,B)  by taking a = xA-1 ;  6 then 
again we "move" Q \[y\] -1 next to s (A, B) by taking fl 
= B sm (w, y, Q \[y\] ) -1; x is then unified with A and y 
with B. This leads to the expression: 
ev(m,x ,  P\[x\] ) P \ [x \ ] - l s  (x, y )Q\ [y \ ] - l sm(w,  y,Q\[y\] ) 
where we now have a choice. We can either 
unify s (x ,y )  with Q\ [y \ ] ,  or with P \ [x \ ] .  In the 
5Another possibility at this point would be to unify 1 with E rather 
than with E. This would lead to the construction of the logical form 
i ( 1, p ), and, after unification of E with that logical form, would con- 
duct to the output s ( j ,  i ( 1, p)  ). If one wants to prevent this output, 
several approaches are possible. The first one consists in typing the log- 
ical form with syntactic ategories. The second one is to have some no- 
tion of logical-form well-formedness (or perhaps interpretability) dis- 
allowing the logical forms i ( 1, p) \[louise in paris\] or i ( t (w), p) 
\[(the woman) in paris\], although it might allow the form t ( i  (w, p) ) 
\[the (woman in paris)\]. 
t'We have assumed that the meta-variables corresponding to identi- 
fiers in P and Q have been instanciated toarbitrary, but different, values 
x and y. See (Dy,netman, 1998) for a discussion of this point. 
first case, we continue by now unifying P Ix\] 
with sm(w,y ,s (x ,y )  ), leading to the output 
ev(m,x ,  sm(w,y ,s (x ,y ) ) ) .  In the sec- 
ond case, we continue by now unifying Q\[y\]  
with ev(m,x ,s (x ,y )  ), leading to the output 
sm(w,y,  ev (m,x ,s (x ,y ) ) .  The two possible 
quantifier scopings for the input string are thus obtained, 
each corresponding to a certain order of performing the 
unifications. 
Acknowledgments 
Thanks to Christian Retor6, Eric de la Clergerie, Alain 
Lecomte and Aarne Ranta for comments and discussion. 
References 
V.M. Abrusci. 1991. Phase semantics and sequent cal- 
culus for pure non-commutative classical inear logic. 
Journal of Symbolic Logic, 56(4). 
M. Dalrymple, J. Lamping, E Pereira, and V. Saraswat. 
1995. Linear logic for meaning assembly. In Proc. 
CLNLP, Edinburgh. 
Marc Dymetman. 1998. Group computation and its ap- 
plications to linguistic description. (in preparation). 
J.Y. Girard. 1987. Linear logic. Theoretical Computer 
Science, 50(1). 
Thomas W. Hungerford. 1974. Algebra. Springer- 
Verlag. 
J. Lambek. 1958. The mathematics of sentence struc- 
ture. American Mathematical Monthly, 65:154-168. 
C. R4tor& 1993. Rdseaux et sdquents ordonn~s. Ph.D. 
thesis, Univ. Paris 7. 
Johan van Benthem. 1986. Essays in Logical Semantics. 
D. Reidel, Dordrecht, Holland. 
352 
