Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 610?616,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
The Effect of Higher-Order Dependency Features in Discriminative
Phrase-Structure Parsing
Gregory F. Coppola and Mark Steedman
School of Informatics
The University of Edinburgh
g.f.coppola@sms.ed.ac.uk
steedman@inf.ed.ac.uk
Abstract
Higher-order dependency features are
known to improve dependency parser ac-
curacy. We investigate the incorporation
of such features into a cube decoding
phrase-structure parser. We find consid-
erable gains in accuracy on the range of
standard metrics. What is especially in-
teresting is that we find strong, statisti-
cally significant gains on dependency re-
covery on out-of-domain tests (Brown vs.
WSJ). This suggests that higher-order de-
pendency features are not simply over-
fitting the training material.
1 Introduction
Higher-order dependency features encode more
complex sub-parts of a dependency tree struc-
ture than first-order, bigram head-modifier rela-
tionships.1 The clear trend in dependency pars-
ing has been that the addition of such higher-order
features improves parse accuracy (McDonald &
Pereira, 2006; Carreras, 2007; Koo & Collins,
2010; Zhang & Nivre, 2011; Zhang & McDonald,
2012). This finding suggests that the same ben-
efits might be observed in phrase-structure pars-
ing. But, this is not necessarily implied. Phrase-
structure parsers are generally stronger than de-
pendency parsers (Petrov et al, 2010; Petrov &
McDonald, 2012), and make use of more kinds
of information. So, it might be that the infor-
mation modelled by higher-order dependency fea-
tures adds less of a benefit in the phrase-structure
case.
1Examples of first-order and higher-order dependency
features are given in ?3.2.
To investigate this issue, we experiment using
Huang?s (2008) cube decoding algorithm. This
algorithm allows structured prediction with non-
local features, as discussed in ?2. Collins?s (1997)
strategy of expanding the phrase-structure parser?s
dynamic program to incorporate head-modifier de-
pendency information would not scale to the com-
plex kinds of dependencies we will consider. Us-
ing Huang?s algorithm, we can indeed incorporate
arbitrary types of dependency feature, using a sin-
gle, simple dynamic program.
Compared to the baseline, non-local feature
set of Collins (2000) and Charniak & Johnson
(2005), we find that higher-order dependencies
do in fact tend to improve performance signifi-
cantly on both dependency and constituency ac-
curacy metrics. Our most interesting finding,
though, is that higher-order dependency features
show a consistent and unambiguous contribution
to the dependency accuracy, both labelled and un-
labelled, of our phrase-structure parsers on out-
of-domain tests (which means, here, trained on
WSJ, but tested on BROWN). In fact, the gains are
even stronger on out-of-domain tests than on in-
domain tests. One might have thought that higher-
order dependencies, being rather specific by na-
ture, would tend to pick out only very rare events,
and so only serve to over-fit the training material,
but this is not what we find. We speculate as to
what this might mean in ?5.2.
The cube decoding paradigm requires a first-
stage parser to prune the output space. For this, we
use the generative parser of Petrov et al (2006).
We can use this parser?s model score as a fea-
ture in our discriminative model at no additional
cost. However, doing so conflates the contribu-
tion to accuracy of the generative model, on the
one hand, and the discriminatively trained, hand-
610
written, features, on the other. Future systems
might use the same or a similar feature set to
ours, but in an architecture that does not include
any generative parser. On the other hand, some
systems might indeed incorporate this generative
model?s score. So, we need to know exactly what
the generative model is contributing to the accu-
racy of a generative-discriminative model combi-
nation. Thus, we conduct experiments in sets: in
some cases the generative model score is used, and
in others it is not used.
Compared to the faster and more psycholog-
ically plausible shift-reduce parsers (Zhang &
Nivre, 2011; Zhang & Clark, 2011), cube decod-
ing is a computationally expensive method. But,
cube decoding provides a relatively exact envi-
ronment with which to compare different feature
sets, has close connections with modern phrase-
based machine translation methods (Huang & Chi-
ang, 2007), and produces very accurate parsers. In
some cases, one might want to use a slower, but
more accurate, parser during the training stage of
a semi-supervised parser training strategy. For ex-
ample, Petrov et al (2010) have shown that a fast
parser (Nivre et al, 2007) can be profitably trained
from the output of a slower but more accurate one
(Petrov et al, 2006), in a strategy they call uptrain-
ing.
We make the source code for these experiments
available.2
2 Phrase-Structure Parsing with
Non-Local Features
2.1 Non-Local Features
To decode using exact dynamic programming (i.e.,
CKY), one must restrict oneself to the use of only
local features. Local features are those that fac-
tor according to the individual rule productions of
the parse. For example, a feature indicating the
presence of the rule S ? NP VP is local.3 But,
a feature that indicates that the head word of this
S is, e.g., joined, is non-local, because the head
word of a phrase cannot be determined by look-
ing at a single rule production. To find a phrase?s
head word (or tag), we must recursively find the
2See http://gfcoppola.net/code.php. This
software is available for free for non-profit research uses.
3A feature indicating that, e.g., the first word dominated
by S is Pierre is also local, since the words of the sentence
are constant across hypothesized parses, and words can be
referred to by their position with respect to a given rule pro-
duction. See Huang (2008) for more details.
head phrase of each local rule production, until we
reach a terminal node (or tag node). This recursion
would not be allowed in standard CKY. Many dis-
criminative parsers have used only local features
(Taskar et al, 2004; Turian et al, 2007; Finkel
et al, 2008). However, Huang (2008) shows that
the use of non-local features does in fact contribute
substantially to parser performance. And, our de-
sire to make heavy use of head-word dependency
relations necessitates the use of non-local features.
2.2 Cube Decoding
While the use of non-local features destroys the
ability to do exact search, we can still do inex-
act search using Huang?s (2008) cube decoding
algorithm.4 A tractable first-stage parser prunes
the space of possible parses, and outputs a forest,
which is a set of rule production instances that can
be used to make a parse for the given sentence,
and which is significantly pruned compared to the
entire space allowed by the grammar. The size of
this forest is at most cubic in the length of the sen-
tence (Billot & Lang, 1989), but implicitly repre-
sents exponentially many parses. To decode, we
fix an beam width of k (an integer). Then, when
parsing, we visit each node n in the same bottom-
up order we would use for Viterbi decoding, and
compute a list of the top k parses to n, according
to a global linear model (Collins, 2002), using the
trees that have survived the beam at earlier nodes.
2.3 The First-Stage Parser
As noted, we require a first-stage parser to prune
the search space.5 As a by-product of this pruning
procedure, we are able to use the model score of
the first-stage parser as a feature in our ultimate
model at no additional cost. As a first-stage parser,
we use Huang et al?s (2010) implementation of
the LA-PCFG parser of Petrov et al (2006), which
uses a generative, latent-variable model.
3 Features
3.1 Phrase-Structure Features
Our phrase-structure feature set is taken from
Collins (2000), Charniak & Johnson (2005), and
4This algorithm is closely related to the algorithm for
phrase-based machine translation using a language model
(Huang & Chiang, 2007).
5All work in this paradigm has used a generative parser as
the first-stage parser. But, this is arguably a historical acci-
dent. We could just as well use a discriminative parser with
only local features, like Petrov & Klein (2007a).
611
Huang (2008). Some features are omitted, with
choices made based on the ablation studies of
Johnson & Ural (2010). This feature set, which we
call ?phrase, contains the following, mostly non-
local, features, which are described and depicted
in Charniak & Johnson (2005), Huang (2008), and
Johnson & Ural (2010):
? CoPar The depth (number of levels) of par-
allelism between adjacent conjuncts
? CoParLen The difference in length between
adjacent conjuncts
? Edges The words or (part-of-speech) tags on
the outside and inside edges of a given XP6
? NGrams Sub-parts of a given rule production
? NGramTree An n-gram of the input sen-
tence, or the tags, along with the minimal tree
containing that n-gram
? HeadTree A sub-tree containing the path
from a word to its maximal projection, along
with all siblings of all nodes in that path
? Heads Head-modifier bigrams
? Rule A single rule production
? Tag The tag of a given word
? Word The tag of and first XP above a word
? WProj The tag of and maximal projection of
a word
Heads is a first-order dependency feature.
3.2 Dependency Parsing Features
McDonald et al (2005) showed that chart-based
dependency parsing, based on Eisner?s (1996) al-
gorithm, could be successfully approached in a
discriminative framework. In this earliest work,
each feature function could only refer to a sin-
gle, bigram head-modifier relationship, e.g., Mod-
ifier, below. Subsequent work (McDonald &
Pereira, 2006; Carreras, 2007; Koo & Collins,
2010) looked at allowing features to access more
complex, higher-order relationships, including tri-
gram and 4-gram relationships, e.g., all features
apart from Modifier, below. With the ability to
incorporate non-local phrase-structure parse fea-
tures (Huang, 2008), we can recognize depen-
dency features of arbitrary order (cf. Zhang &
McDonald (2012)). Our dependency feature set,
which we call ?deps, contains:
? Modifier head and modifier
6The tags outside of a given XP are approximated using
the marginally most likely tags given the parse.
? Sibling head, modifier m, and m?s nearest in-
ner sibling
? Grandchild head, modifier m, and one of
m?s modifiers
? Sibling+Grandchild head, modifier m, m?s
nearest inner sibling, and one of m?s modi-
fiers
? Grandchild+Grandsibling head, modifier
m, one of m?s modifiers g, and g?s inner sib-
ling
These features are insensitive to arc labels in the
present experiments, but future work will incorpo-
rate arc labels. Each feature class contains more
and less lexicalized versions.
3.3 Generative Model Score Feature
Finally, we have a feature set, ?gen, contain-
ing only one feature function. This feature
maps a parse to the logarithm of the MAX-RULE-
PRODUCT score of that parse according to the LA-
PCFG parsing model, which is trained separately.
This score has the character of a conditional like-
lihood for the parse (see Petrov & Klein (2007b)).
4 Training
We have two feature sets ?phrase and ?deps, for
which we fix weights using parallel stochastic op-
timization of a structured SVM objective (Collins,
2002; Taskar et al, 2004; Crammer et al, 2006;
Martins et al, 2010; McDonald et al, 2010). To
the single feature in the set ?gen (i.e. the genera-
tive model score), we give the weight 1.
The combined models, ?phrase+deps, ?phrase+gen,
and ?phrase+deps+gen, are then model combinations
of the first three. The combination weights
for these combinations are obtained using Och?s
(2003) Minimum Error-Rate Training (MERT).
The MERT stage helps to avoid feature under-
training (Sutton et al, 2005), and avoids the prob-
lem of scaling involved in a model that contains
mostly boolean features, but one, real-valued, log-
scale feature. Training is conducted in three stages
(SVM, MERT, SVM), so that there is no influence of
any data outside the given training set (WSJ2-21)
on the combination weights.
5 Experiments
5.1 Methods
All models are trained on WSJ2-21, with WSJ22
used to pick the stopping iteration for online
612
Test Set
WSJ BROWN
Type Model F1 UAS LAS F1 UAS LAS
G LA-PCFG 90.3 93.7 91.5 85.1 88.7 85.0
D phrase 91.2 93.9 91.0 86.1 89.4 85.1
deps ? 93.3 ? ? 89.3 ?
phrase+deps 91.7 94.4 91.5 86.4 90.1 85.9
G+D phrase+gen 92.1 94.7 92.6 87.0 90.0 86.5
phrase+deps+gen 92.4 94.9 92.8 87.4 90.7 87.1
Table 1: Performance of the various models in cube decoding experiments, on the WSJ test set (in-
domain) and the BROWN test set (out-of-domain). G abbreviates generative, D abbreviates discrim-
inative, and G+D a combination. Some cells are empty because ?deps features are only sensitive to
unlabelled dependencies. Best results in D and G+D conditions appear in bold face.
Test Set
Hypothesis WSJ BROWN
Greater Lesser F1 UAS LAS F1 UAS LAS
phrase+deps phrase .042 .029 .018 .140 .022 .009
phrase+deps deps ? <.001 ? ? .012 ?
phrase+gen phrase .013 .003 <.001 .016 .090 <.001
phrase+deps+gen phrase+gen .030 .122 .151 .059 .008 .020
phrase+deps+gen phrase+deps .019 .020 <.001 .008 .040 <.001
Table 2: Results of statistical significance evaluations of hypotheses of the form X?s accuracy is greater
than Y?s on the various test sets and metrics. Bold face indicates p < .05.
optimization, as is standard. The test sets are
WSJ23 (in-domain test set), and BROWN9 (out-of-
domain test set) from the Penn Treebank (Mar-
cus et al, 1993).7 We evaluate using harmonic
mean between labelled bracket recall and preci-
sion (EVALB F1), unlabelled dependency accuracy
(UAS), and labelled dependency accuracy (LAS).
Dependencies are extracted from full output trees
using the algorithm of de Marneffe & Manning
(2008). We chose this dependency extractor,
firstly, because it is natively meant to be run on
the output of phrase-structure parsers, rather than
on gold trees with function tags and traces still
present, as is, e.g., the Penn-Converter of Johans-
son & Nugues (2007). Also, this is the extractor
that was used in a recent shared task (Petrov &
McDonald, 2012). We use EVALB and eval.pl to
calculate scores.
For hypothesis testing, we used the paired boot-
strap test recently empirically evaluated in the con-
text of NLP by Berg-Kirkpatrick et al (2012). This
7Following Gildea (2001), the BROWN test set is usually
divided into 10 parts. If we start indexing at 0, then the last
(test) section has index 9. We received the BROWN data splits
from David McClosky, p.c.
involves drawing b subsamples of size n with re-
placement from the test set in question, and check-
ing relative performance of the models on the sub-
sample (see the reference). We use b = 106 and
n = 500 in all tests.
5.2 Results
The performance of the models is shown in Table
1, and Table 2 depicts the results of significance
tests of differences between key model pairs.
We find that adding in the higher-order depen-
dency feature set, ?deps, makes a statistically sig-
nificant improvement in accuracy on most met-
rics, in most conditions. On the in-domain WSJ
test set, we find that ?phrase+deps is significantly
better than either of its component parts on all
metrics. But, ?phrase+deps+gen is significantly bet-
ter than ?phrase+gen only on F1, but not on UAS
or LAS. However, on the out-of-domain BROWN
tests, we find that adding ?deps always adds con-
siderably, and in a statistically significant way, to
both LAS and UAS. That is, not only is ?phrase+deps
better at dependency recovery than its component
parts, but ?phrase+deps+gen is also considerably bet-
613
ter on dependency recovery than ?phrase+gen, which
represents the previous state-of-the-art in this vein
of research (Huang, 2008). This result is perhaps
counter-intuitive, in the sense that one might have
supposed that higher-order dependency features,
being highly specific by nature, might only have
only served to over-fit the training material. How-
ever, this result shows otherwise. Note that the
dependency features include various levels of lex-
icalization. It might be that the more unlexical-
ized features capture something about the struc-
ture of correct parses, that transfers well out-of-
domain. Future work should investigate this. And,
it of course remains to be seen how this result will
transfer to other train-test domain pairs.
To our knowledge, this is the first work to
specifically separate the role of the generative
model feature from the other features of Collins
(2000) and Charniak & Johnson (2005). We note
that, even without the ?gen feature, the discrimi-
native parsing models are very strong, but adding
?gen nevertheless yields considerable gains. Thus,
while a fully discriminative model, perhaps im-
plemented using a shift-reduce algorithm, can be
expected to do very well, if the best accuracy is
necessary (e.g., in a semi-supervised training strat-
egy), it still seems to pay to use the generative-
discriminative model combination. Note that the
LAS scores of our models without ?gen are rela-
tively weak. This is presumably largely because
our dependency features are, at present, not sen-
sitive to arc labels, so our results probably under-
estimate the capability of our general framework
with respect to labelled dependency recovery.
Table 3 compares our work with Huang?s
(2008). Note that our model ?phrase+gen uses es-
sentially the same features as Huang (2008), so
the fact that our ?phrase+gen is noticeably more ac-
curate on F1 is presumably due to the benefits
in reduced feature under-training achieved by the
MERT combination strategy. Also, our ?phrase+deps
model is as accurate as Huang?s, without even us-
ing the generative model score feature. Table 4
compares our work to McClosky et al?s (2006)
domain adaptation work with the Charniak &
Johnson (2005) parser. Their three models shown
have been trained on: i) the WSJ (supervised,
out-of-domain), ii) the WSJ plus 2.5 million sen-
tences of automatically labelled NANC newswire
text (semi-supervised, out-of-domain), and iii) the
BROWN corpus (supervised, in-domain). We test
Type Model WSJ
G+D Huang (2008) 91.7
D phrase+deps 91.7
G+D phrase+gen 92.1
G+D phrase+deps+gen 92.4
Table 3: Comparison of constituency parsing re-
sults in the cube decoding framework, on the WSJ
test set. On G+D, D, see Table 1.
Parser Training Data BROWN F1
CJ WSJ 85.2
CJ WSJ+NANC 87.8
CJ BROWN 88.4
Our Best WSJ 87.4
Table 4: Comparison of our best model,
?phrase+deps+gen, on BROWN, with the Charniak &
Johnson (2005) parser, denoted CJ, as reported in
McClosky et al (2006). Underline indicates best
trained on WSJ, bold face indicates best overall.
on BROWN. We see that our best (WSJ-trained)
model is over 2% more accurate (absolute F1
difference) than the Charniak & Johnson (2005)
parser trained on the same data. In fact, our
best model is nearly as good as McClosky et al?s
(2006) self-trained, semi-supervised model. Of
course, the self-training strategy is orthogonal to
the improvements we have made.
6 Conclusion
We have shown that the addition of higher-order
dependency features into a cube decoding phase-
structure parser leads to statistically significant
gains in accuracy. The most interesting finding
is that these gains are clearly observed on out-of-
domain tests. This seems to imply that higher-
order dependency features do not merely over-fit
the training material. Future work should look at
other train-test domain pairs, as well as look at ex-
actly which higher-order dependency features are
most important to out-of-domain accuracy.
Acknowledgments
This work was supported by the Scottish Infor-
matics and Computer Science Alliance, The Uni-
versity of Edinburgh?s School of Informatics, and
ERC Advanced Fellowship 249520 GRAMPLUS.
We thank Zhongqiang Huang for his extensive
help in getting started with his LA-PCFG parser.
614
References
Berg-Kirkpatrick, T., Burkett, D., & Klein, D.
(2012). An empirical investigation of statistical
significance in NLP. In EMNLP, 995?1005.
Billot, S., & Lang, B. (1989). The structure of
shared forests in ambiguous parsing. In ACL,
143?151.
Carreras, X. (2007). Experiments with a higher-
order projective dependency parser. In Pro-
ceedings of the CoNLL Shared Task Session of
EMNLP-CoNLL 2007, 957?961.
Charniak, E., & Johnson, M. (2005). Coarse-to-
fine n-best parsing and MaxEnt discriminative
reranking. In ACL, 173?180.
Collins, M. (1997). Three generative, lexicalised
models for statistical parsing. In ACL, 16?23.
Collins, M. (2000). Discriminative reranking for
natural language parsing. In ICML, 175?182.
Collins, M. (2002). Discriminative training meth-
ods for Hidden Markov Models: theory and
experiments with perceptron algorithms. In
EMNLP, 1?8.
Crammer, K., Dekel, O., Keshet, J., Shalev-
Shwartz, S., & Singer, Y. (2006). Online
passive-aggressive algorithms. JMLR, 7, 551?
585.
Eisner, J. (1996). Three new probabilistic mod-
els for dependency parsing: An exploration. In
COLING, 340?345.
Finkel, J. R., Kleeman, A., & Manning, C. D.
(2008). Efficient, feature-based, conditional
random field parsing. In ACL, 959?967.
Gildea, D. (2001). Corpus variation and parser
performance. In EMNLP, 167?202.
Huang, L. (2008). Forest reranking: Discrimina-
tive parsing with non-local features. In ACL,
586?594.
Huang, L., & Chiang, D. (2007). Forest rescor-
ing: Faster decoding with integrated language
models. In ACL.
Huang, Z., Harper, M., & Petrov, S. (2010). Self-
training with products of latent variable gram-
mars. In EMNLP, 12?22.
Johansson, R., & Nugues, P. (2007). Extended
constituent-to-dependency conversion for En-
glish. In Proc. of the 16th Nordic Conference on
Computational Linguistics (NODALIDA), 105?
112.
Johnson, M., & Ural, A. E. (2010). Reranking the
Berkeley and Brown parsers. In HLT-NAACL,
665?668.
Koo, T., & Collins, M. (2010). Efficient third-
order dependency parsers. In ACL, 1?11.
Marcus, M. P., Santorini, B., & Marcinkiewicz,
M. A. (1993). Building a large annotated corpus
of English: The Penn Treebank. Computational
Linguistics, 19(2), 313?330.
de Marneffe, M.-C., & Manning, C. D. (2008).
The Stanford typed dependencies representa-
tion. In Coling 2008: Proceedings of the work-
shop on Cross-Framework and Cross-Domain
Parser Evaluation, 1?8.
Martins, A. F., Gimpel, K., Smith, N. A., Xing,
E. P., Figueiredo, M. A., & Aguiar, P. M.
(2010). Learning structured classifiers with dual
coordinate ascent. Technical report, DTIC Doc-
ument.
McClosky, D., Charniak, E., & Johnson, M.
(2006). Reranking and self-training for parser
adaptation. In ACL, 337?344.
McDonald, R., & Pereira, F. (2006). Online learn-
ing of approximate dependency parsing algo-
rithms. In EACL, 81?88.
McDonald, R. T., Crammer, K., & Pereira, F. C. N.
(2005). Online large-margin training of depen-
dency parsers. In ACL, 91?98.
McDonald, R. T., Hall, K., & Mann, G. (2010).
Distributed training strategies for the structured
perceptron. In HLT-NAACL, 456?464.
Nivre, J., Hall, J., Nilsson, J., Chanev, A., Eryigit,
G., Ku?bler, S., Marinov, S., & Marsi, E. (2007).
Maltparser: A language-independent system for
data-driven dependency parsing. Natural Lan-
guage Engineering, 13(2), 95?135.
Och, F. J. (2003). Minimum error rate training
in statistical machine translation. In ACL, 160?
167.
Petrov, S., Barrett, L., Thibaux, R., & Klein, D.
(2006). Learning accurate, compact, and inter-
pretable tree annotation. In ACL, 433?440.
Petrov, S., Chang, P.-C., Ringgaard, M., & Al-
shawi, H. (2010). Uptraining for accurate deter-
ministic question parsing. In EMNLP, 705?713.
Petrov, S., & Klein, D. (2007a). Discriminative
log-linear grammars with latent variables. In
NIPS.
615
Petrov, S., & Klein, D. (2007b). Improved infer-
ence for unlexicalized parsing. In HLT-NAACL,
404?411.
Petrov, S., & McDonald, R. (2012). Overview of
the 2012 shared task on parsing the web. Notes
of the First Workshop on Syntactic Analysis of
Non-Canonical Language (SANCL).
Sutton, C., Sindelar, M., & McCallum, A. (2005).
Feature bagging: Preventing weight undertrain-
ing in structured discriminative learning. In
HLT-NAACL.
Taskar, B., Klein, D., Collins, M., Koller, D., &
Manning, C. D. (2004). Max-margin parsing.
In EMNLP, 1?8.
Turian, J., Wellington, B., & Melamed, I. D.
(2007). Scalable discriminative learning for nat-
ural language parsing and translation. In NIPS,
1409?1416.
Zhang, H., & McDonald, R. (2012). General-
ized higher-order dependency parsing with cube
pruning. In EMNLP, 238?242.
Zhang, Y., & Clark, S. (2011). Shift-reduce CCG
parsing. In ACL, 683?692.
Zhang, Y., & Nivre, J. (2011). Transition-based
dependency parsing with rich non-local fea-
tures. In ACL, 188?293.
616
