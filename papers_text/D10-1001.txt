Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 1?11,
MIT, Massachusetts, USA, 9-11 October 2010. c?2010 Association for Computational Linguistics
On Dual Decomposition and Linear Programming Relaxations
for Natural Language Processing
Alexander M. Rush David Sontag Michael Collins Tommi Jaakkola
MIT CSAIL, Cambridge, MA 02139, USA
{srush,dsontag,mcollins,tommi}@csail.mit.edu
Abstract
This paper introduces dual decomposition as a
framework for deriving inference algorithms
for NLP problems. The approach relies on
standard dynamic-programming algorithms as
oracle solvers for sub-problems, together with
a simple method for forcing agreement be-
tween the different oracles. The approach
provably solves a linear programming (LP) re-
laxation of the global inference problem. It
leads to algorithms that are simple, in that they
use existing decoding algorithms; efficient, in
that they avoid exact algorithms for the full
model; and often exact, in that empirically
they often recover the correct solution in spite
of using an LP relaxation. We give experimen-
tal results on two problems: 1) the combina-
tion of two lexicalized parsing models; and
2) the combination of a lexicalized parsing
model and a trigram part-of-speech tagger.
1 Introduction
Dynamic programming algorithms have been re-
markably useful for inference in many NLP prob-
lems. Unfortunately, as models become more com-
plex, for example through the addition of new fea-
tures or components, dynamic programming algo-
rithms can quickly explode in terms of computa-
tional or implementational complexity.1 As a re-
sult, efficiency of inference is a critical bottleneck
for many problems in statistical NLP.
This paper introduces dual decomposition
(Dantzig and Wolfe, 1960; Komodakis et al, 2007)
as a framework for deriving inference algorithms in
NLP. Dual decomposition leverages the observation
that complex inference problems can often be
decomposed into efficiently solvable sub-problems.
The approach leads to inference algorithms with the
following properties:
1The same is true for NLP inference algorithms based on
other exact combinatorial methods, for example methods based
on minimum-weight spanning trees (McDonald et al, 2005), or
graph cuts (Pang and Lee, 2004).
? The resulting algorithms are simple and efficient,
building on standard dynamic-programming algo-
rithms as oracle solvers for sub-problems,2 to-
gether with a method for forcing agreement be-
tween the oracles.
? The algorithms provably solve a linear program-
ming (LP) relaxation of the original inference
problem.
? Empirically, the LP relaxation often leads to an
exact solution to the original problem.
The approach is very general, and should be appli-
cable to a wide range of problems in NLP. The con-
nection to linear programming ensures that the algo-
rithms provide a certificate of optimality when they
recover the exact solution, and also opens up the
possibility of methods that incrementally tighten the
LP relaxation until it is exact (Sherali and Adams,
1994; Sontag et al, 2008).
The structure of this paper is as follows. We
first give two examples as an illustration of the ap-
proach: 1) integrated parsing and trigram part-of-
speech (POS) tagging; and 2) combined phrase-
structure and dependency parsing. In both settings,
it is possible to solve the integrated problem through
an ?intersected? dynamic program (e.g., for integra-
tion of parsing and tagging, the construction from
Bar-Hillel et al (1964) can be used). However,
these methods, although polynomial time, are sub-
stantially less efficient than our algorithms, and are
considerably more complex to implement.
Next, we describe exact polyhedral formula-
tions for the two problems, building on connec-
tions between dynamic programming algorithms
and marginal polytopes, as described in Martin et al
(1990). These allow us to precisely characterize the
relationship between the exact formulations and the
2More generally, other exact inference methods can be
used as oracles, for example spanning tree algorithms for non-
projective dependency structures.
1
LP relaxations that we solve. We then give guaran-
tees of convergence for our algorithms by showing
that they are instantiations of Lagrangian relaxation,
a general method for solving linear programs of a
particular form.
Finally, we describe experiments that demonstrate
the effectiveness of our approach. First, we con-
sider the integration of the generative model for
phrase-structure parsing of Collins (2003), with the
second-order discriminative dependency parser of
Koo et al (2008). This is an interesting problem
in its own right: the goal is to inject the high per-
formance of discriminative dependency models into
phrase-structure parsing. The method uses off-the-
shelf decoders for the two models. We find three
main results: 1) in spite of solving an LP relax-
ation, empirically the method finds an exact solution
on over 99% of the examples; 2) the method con-
verges quickly, typically requiring fewer than 10 it-
erations of decoding; 3) the method gives gains over
a baseline method that forces the phrase-structure
parser to produce the same dependencies as the first-
best output from the dependency parser (the Collins
(2003) model has an F1 score of 88.1%; the base-
line method has an F1 score of 89.7%; and the dual
decomposition method has an F1 score of 90.7%).
In a second set of experiments, we use dual de-
composition to integrate the trigram POS tagger of
Toutanova and Manning (2000) with the parser of
Collins (2003). We again find that the method finds
an exact solution in almost all cases, with conver-
gence in just a few iterations of decoding.
Although the focus of this paper is on dynamic
programming algorithms?both in the experiments,
and also in the formal results concerning marginal
polytopes?it is straightforward to use other com-
binatorial algorithms within the approach. For ex-
ample, Koo et al (2010) describe a dual decompo-
sition approach for non-projective dependency pars-
ing, which makes use of both dynamic programming
and spanning tree inference algorithms.
2 Related Work
Dual decomposition is a classical method for solv-
ing optimization problems that can be decomposed
into efficiently solvable sub-problems. Our work is
inspired by dual decomposition methods for infer-
ence in Markov random fields (MRFs) (Wainwright
et al, 2005a; Komodakis et al, 2007; Globerson and
Jaakkola, 2007). In this approach, the MRF is de-
composed into sub-problems corresponding to tree-
structured subgraphs that together cover all edges
of the original graph. The resulting inference algo-
rithms provably solve an LP relaxation of the MRF
inference problem, often significantly faster than
commercial LP solvers (Yanover et al, 2006).
Our work is also related to methods that incorpo-
rate combinatorial solvers within loopy belief prop-
agation (LBP), either for MAP inference (Duchi et
al., 2007) or for computing marginals (Smith and
Eisner, 2008). Our approach similarly makes use
of combinatorial algorithms to efficiently solve sub-
problems of the global inference problem. However,
unlike LBP, our algorithms have strong theoretical
guarantees, such as guaranteed convergence and the
possibility of a certificate of optimality. These guar-
antees are possible because our algorithms directly
solve an LP relaxation.
Other work has considered LP or integer lin-
ear programming (ILP) formulations of inference in
NLP (Martins et al, 2009; Riedel and Clarke, 2006;
Roth and Yih, 2005). These approaches typically
use general-purpose LP or ILP solvers. Our method
has the advantage that it leverages underlying struc-
ture arising in LP formulations of NLP problems.
We will see that dynamic programming algorithms
such as CKY can be considered to be very effi-
cient solvers for particular LPs. In dual decomposi-
tion, these LPs?and their efficient solvers?can be
embedded within larger LPs corresponding to more
complex inference problems.
3 Background: Structured Models for NLP
We now describe the type of models used throughout
the paper. We take some care to set up notation that
will allow us to make a clear connection between
inference problems and linear programming.
Our first example is weighted CFG parsing. We
assume a context-free grammar, in Chomsky normal
form, with a set of non-terminals N . The grammar
contains all rules of the form A ? B C and A ?
w where A,B,C ? N and w ? V (it is simple
to relax this assumption to give a more constrained
grammar). For rules of the form A ? w we refer
to A as the part-of-speech tag for w. We allow any
non-terminal to be at the root of the tree.
2
Given a sentence with n words, w1, w2, . . . wn, a
parse tree is a set of rule productions of the form
?A ? B C, i, k, j? where A,B,C ? N , and
1 ? i ? k < j ? n. Each rule production rep-
resents the use of CFG rule A ? B C where non-
terminal A spans words wi . . . wj , non-terminal B
spans words wi . . . wk, and non-terminal C spans
words wk+1 . . . wj . There are O(|N |3n3) such rule
productions. Each parse tree corresponds to a subset
of these rule productions, of size n? 1, that forms a
well-formed parse tree.3
We now define the index set for CFG parsing as
I = {?A? B C, i, k, j?: A,B,C ? N ,
1 ? i ? k < j ? n}
Each parse tree is a vector y = {yr : r ? I},
with yr = 1 if rule r is in the parse tree, and yr =
0 otherwise. Hence each parse tree is represented
as a vector in {0, 1}m, where m = |I|. We use Y
to denote the set of all valid parse-tree vectors; the
set Y is a subset of {0, 1}m (not all binary vectors
correspond to valid parse trees).
In addition, we assume a vector ? = {?r : r ?
I} that specifies a weight for each rule production.4
Each ?r can take any value in the reals. The optimal
parse tree is y? = arg maxy?Y y ? ? where y ? ? =?
r yr?r is the inner product between y and ?.
We use yr and y(r) interchangeably (similarly for
?r and ?(r)) to refer to the r?th component of the
vector y. For example ?(A ? B C, i, k, j) is a
weight for the rule ?A? B C, i, k, j?.
We will use similar notation for other problems.
As a second example, in POS tagging the task is to
map a sentence of n words w1 . . . wn to a tag se-
quence t1 . . . tn, where each ti is chosen from a set
T of possible tags. We assume a trigram tagger,
where a tag sequence is represented through deci-
sions ?(A,B) ? C, i? where A,B,C ? T , and
i ? {3 . . . n}. Each production represents a tran-
sition where C is the tag of word wi, and (A,B) are
3We do not require rules of the form A ? wi in this repre-
sentation, as they are redundant: specifically, a rule production
?A ? B C, i, k, j? implies a rule B ? wi iff i = k, and
C ? wj iff j = k + 1.
4We do not require parameters for rules of the formA? w,
as they can be folded into rule production parameters. E.g.,
under a PCFG we define ?(A ? B C, i, k, j) = logP (A ?
B C | A) + ?i,k logP (B ? wi|B) + ?k+1,j logP (C ?
wj |C) where ?x,y = 1 if x = y, 0 otherwise.
the previous two tags. The index set for tagging is
Itag = {?(A,B)? C, i? : A,B,C ? T , 3 ? i ? n}
Note that we do not need transitions for i = 1 or i =
2, because the transition ?(A,B) ? C, 3? specifies
the first three tags in the sentence.5
Each tag sequence is represented as a vector z =
{zr : r ? Itag}, and we denote the set of valid tag
sequences, a subset of {0, 1}|Itag|, as Z . Given a
parameter vector ? = {?r : r ? Itag}, the optimal
tag sequence is arg maxz?Z z ? ?.
As a modification to the above approach, we will
find it convenient to introduce extended index sets
for both the CFG and POS tagging examples. For
the CFG case we define the extended index set to be
I ? = I ? Iuni where
Iuni = {(i, t) : i ? {1 . . . n}, t ? T}
Here each pair (i, t) represents word wi being as-
signed the tag t. Thus each parse-tree vector y will
have additional (binary) components y(i, t) spec-
ifying whether or not word i is assigned tag t.
(Throughout this paper we will assume that the tag-
set used by the tagger, T , is a subset of the set of non-
terminals considered by the parser, N .) Note that
this representation is over-complete, since a parse
tree determines a unique tagging for a sentence:
more explicitly, for any i ? {1 . . . n}, Y ? T , the
following linear constraint holds:
y(i, Y ) =
n?
k=i+1
?
X,Z?N
y(X ? Y Z, i, i, k) +
i?1?
k=1
?
X,Z?N
y(X ? Z Y, k, i? 1, i)
We apply the same extension to the tagging index
set, effectively mapping trigrams down to unigram
assignments, again giving an over-complete repre-
sentation. The extended index set for tagging is re-
ferred to as I ?tag.
From here on we will make exclusive use of ex-
tended index sets for CFG parsing and trigram tag-
ging. We use the set Y to refer to the set of valid
parse structures under the extended representation;
5As one example, in an HMM, the parameter ?((A,B) ?
C, 3) would be logP (A|??)+logP (B|?A)+logP (C|AB)+
logP (w1|A) + logP (w2|B) + logP (w3|C), where ? is the
start symbol.
3
each y ? Y is a binary vector of length |I ?|. We
similarly use Z to refer to the set of valid tag struc-
tures under the extended representation. We assume
parameter vectors for the two problems, ?cfg ? R|I
?|
and ?tag ? R|I
?
tag|.
4 Two Examples
This section describes the dual decomposition ap-
proach for two inference problems in NLP.
4.1 Integrated Parsing and Trigram Tagging
We now describe the dual decomposition approach
for integrated parsing and trigram tagging. First, de-
fine the set Q as follows:
Q = {(y, z) : y ? Y, z ? Z,
y(i, t) = z(i, t) for all (i, t) ? Iuni} (1)
Hence Q is the set of all (y, z) pairs that agree
on their part-of-speech assignments. The integrated
parsing and trigram tagging problem is then to solve
max
(y,z)?Q
(
y ? ?cfg + z ? ?tag
)
(2)
This problem is equivalent to
max
y?Y
(
y ? ?cfg + g(y) ? ?tag
)
where g : Y ? Z is a function that maps a parse
tree y to its set of trigrams z = g(y). The benefit of
the formulation in Eq. 2 is that it makes explicit the
idea of maximizing over all pairs (y, z) under a set
of agreement constraints y(i, t) = z(i, t)?this con-
cept will be central to the algorithms in this paper.
With this in mind, we note that we have effi-
cient methods for the inference problems of tagging
and parsing alone, and that our combined objective
almost separates into these two independent prob-
lems. In fact, if we drop the y(i, t) = z(i, t) con-
straints from the optimization problem, the problem
splits into two parts, each of which can be efficiently
solved using dynamic programming:
(y?, z?) = (arg max
y?Y
y ? ?cfg, arg max
z?Z
z ? ?tag)
Dual decomposition exploits this idea; it results in
the algorithm given in figure 1. The algorithm opti-
mizes the combined objective by repeatedly solving
the two sub-problems separately?that is, it directly
Set u(1)(i, t)? 0 for all (i, t) ? Iuni
for k = 1 to K do
y(k) ? arg max
y?Y
(y ? ?cfg ?
?
(i,t)?Iuni
u(k)(i, t)y(i, t))
z(k) ? arg max
z?Z
(z ? ?tag +
?
(i,t)?Iuni
u(k)(i, t)z(i, t))
if y(k)(i, t) = z(k)(i, t) for all (i, t) ? Iuni then
return (y(k), z(k))
for all (i, t) ? Iuni,
u(k+1)(i, t)? u(k)(i, t)+?k(y(k)(i, t)?z(k)(i, t))
return (y(K), z(K))
Figure 1: The algorithm for integrated parsing and tag-
ging. The parameters ?k > 0 for k = 1 . . .K specify
step sizes for each iteration, and are discussed further in
the Appendix. The two arg max problems can be solved
using dynamic programming.
solves the harder optimization problem using an ex-
isting CFG parser and trigram tagger. After each
iteration the algorithm adjusts the weights u(i, t);
these updates modify the objective functions for the
two models, encouraging them to agree on the same
POS sequence. In section 6.1 we will show that the
variables u(i, t) are Lagrange multipliers enforcing
agreement constraints, and that the algorithm corre-
sponds to a (sub)gradient method for optimization
of a dual function. The algorithm is easy to imple-
ment: all that is required is a decoding algorithm for
each of the two models, and simple additive updates
to the Lagrange multipliers enforcing agreement be-
tween the two models.
4.2 Integrating Two Lexicalized Parsers
Our second example problem is the integration of
a phrase-structure parser with a higher-order depen-
dency parser. The goal is to add higher-order fea-
tures to phrase-structure parsing without greatly in-
creasing the complexity of inference.
First, we define an index set for second-order un-
labeled projective dependency parsing. The second-
order parser considers first-order dependencies, as
well as grandparent and sibling second-order depen-
dencies (e.g., see Carreras (2007)). We assume that
Idep is an index set containing all such dependen-
cies (for brevity we omit the details of this index
set). For convenience we define an extended index
set that makes explicit use of first-order dependen-
4
cies, I ?dep = Idep ? Ifirst, where
Ifirst = {(i, j) : i ? {0 . . . n}, j ? {1 . . . n}, i 6= j}
Here (i, j) represents a dependency with head wi
and modifier wj (i = 0 corresponds to the root sym-
bol in the parse). We use D ? {0, 1}|I
?
dep| to denote
the set of valid projective dependency parses.
The second model we use is a lexicalized CFG.
Each symbol in the grammar takes the form A(h)
where A ? N is a non-terminal, and h ? {1 . . . n}
is an index specifying that wh is the head of the con-
stituent. Rule productions take the form ?A(a) ?
B(b) C(c), i, k, j? where b ? {i . . . k}, c ? {(k +
1) . . . j}, and a is equal to b or c, depending on
whether A receives its head-word from its left or
right child. Each such rule implies a dependency
(a, b) if a = c, or (a, c) if a = b. We take Ihead
to be the index set of all such rules, and I ?head =
Ihead?Ifirst to be the extended index set. We define
H ? {0, 1}|I
?
head| to be the set of valid parse trees.
The integrated parsing problem is then to find
(y?, d?) = arg max
(y,d)?R
(
y ? ?head + d ? ?dep
)
(3)
where R = {(y, d) : y ? H, d ? D,
y(i, j) = d(i, j) for all (i, j) ? Ifirst}
This problem has a very similar structure to the
problem of integrated parsing and tagging, and we
can derive a similar dual decomposition algorithm.
The Lagrange multipliers u are a vector in R|Ifirst|
enforcing agreement between dependency assign-
ments. The algorithm (omitted for brevity) is identi-
cal to the algorithm in figure 1, but with Iuni, Y , Z ,
?cfg, and ?tag replaced with Ifirst, H, D, ?head, and
?dep respectively. The algorithm only requires de-
coding algorithms for the two models, together with
simple updates to the Lagrange multipliers.
5 Marginal Polytopes and LP Relaxations
We now give formal guarantees for the algorithms
in the previous section, showing that they solve LP
relaxations of the problems in Eqs. 2 and 3.
To make the connection to linear programming,
we first introduce the idea of marginal polytopes in
section 5.1. In section 5.2, we give a precise state-
ment of the LP relaxations that are being solved
by the example algorithms, making direct use of
marginal polytopes. In section 6 we will prove that
the example algorithms solve these LP relaxations.
5.1 Marginal Polytopes
For a finite set Y , define the set of all distributions
over elements in Y as ? = {? ? R|Y| : ?y ?
0,
?
y?Y ?y = 1}. Each ? ? ? gives a vector of
marginals, ? =
?
y?Y ?yy, where ?r can be inter-
preted as the probability that yr = 1 for a y selected
at random from the distribution ?.
The set of all possible marginal vectors, known as
the marginal polytope, is defined as follows:
M = {? ? Rm : ?? ? ? such that ? =
?
y?Y
?yy}
M is also frequently referred to as the convex hull of
Y , written as conv(Y). We use the notation conv(Y)
in the remainder of this paper, instead ofM.
For an arbitrary set Y , the marginal polytope
conv(Y) can be complex to describe.6 However,
Martin et al (1990) show that for a very general
class of dynamic programming problems, the cor-
responding marginal polytope can be expressed as
conv(Y) = {? ? Rm : A? = b, ? ? 0} (4)
where A is a p?m matrix, b is vector in Rp, and the
value p is linear in the size of a hypergraph repre-
sentation of the dynamic program. Note that A and
b specify a set of p linear constraints.
We now give an explicit description of the re-
sulting constraints for CFG parsing:7 similar con-
straints arise for other dynamic programming algo-
rithms for parsing, for example the algorithms of
Eisner (2000). The exact form of the constraints, and
the fact that they are polynomial in number, is not
essential for the formal results in this paper. How-
ever, a description of the constraints gives valuable
intuition for the structure of the marginal polytope.
The constraints are given in figure 2. To develop
some intuition, consider the case where the variables
?r are restricted to be binary: hence each binary
vector ? specifies a parse tree. The second con-
straint in Eq. 5 specifies that exactly one rule must
be used at the top of the tree. The set of constraints
in Eq. 6 specify that for each production of the form
6For any finite set Y , conv(Y) can be expressed as {? ?
Rm : A? ? b} where A is a matrix of dimension p ?m, and
b ? Rp (see, e.g., Korte and Vygen (2008), pg. 65). The value
for p depends on the set Y , and can be exponential in size.
7Taskar et al (2004) describe the same set of constraints, but
without proof of correctness or reference to Martin et al (1990).
5
?r ? I?, ?r ? 0 ;
X
X,Y,Z?N
k=1...(n?1)
?(X ? Y Z, 1, k, n) = 1 (5)
?X ? N , ?(i, j) such that 1 ? i < j ? n and (i, j) 6= (1, n):
X
Y,Z?N
k=i...(j?1)
?(X ? Y Z, i, k, j) =
X
Y,Z?N
k=1...(i?1)
?(Y ? Z X, k, i? 1, j)
+
X
Y,Z?N
k=(j+1)...n
?(Y ? X Z, i, j, k) (6)
?Y ? T, ?i ? {1 . . . n} : ?(i, Y ) =
X
X,Z?N
k=(i+1)...n
?(X ? Y Z, i, i, k) +
X
X,Z?N
k=1...(i?1)
?(X ? Z Y, k, i? 1, i) (7)
Figure 2: The linear constraints defining the marginal
polytope for CFG parsing.
?X ? Y Z, i, k, j? in a parse tree, there must be
exactly one production higher in the tree that gener-
ates (X, i, j) as one of its children. The constraints
in Eq. 7 enforce consistency between the ?(i, Y )
variables and rule variables higher in the tree. Note
that the constraints in Eqs.(5?7) can be written in the
form A? = b, ? ? 0, as in Eq. 4.
Under these definitions, we have the following:
Theorem 5.1 Define Y to be the set of all CFG
parses, as defined in section 4. Then
conv(Y) = {? ? Rm : ? satisifies Eqs.(5?7)}
Proof: This theorem is a special case of Martin et al
(1990), theorem 2.
The marginal polytope for tagging, conv(Z), can
also be expressed using linear constraints as in Eq. 4;
see figure 3. These constraints follow from re-
sults for graphical models (Wainwright and Jordan,
2008), or from the Martin et al (1990) construction.
As a final point, the following theorem gives an
important property of marginal polytopes, which we
will use at several points in this paper:
Theorem 5.2 (Korte and Vygen (2008), page 66.)
For any set Y ? {0, 1}k, and for any vector ? ? Rk,
max
y?Y
y ? ? = max
??conv(Y)
? ? ? (8)
The theorem states that for a linear objective func-
tion, maximization over a discrete set Y can be
replaced by maximization over the convex hull
?r ? I?tag, ?r ? 0 ;
X
X,Y,Z?T
?((X,Y )? Z, 3) = 1
?X ? T , ?i ? {3 . . . n? 1}:
X
Y,Z?T
?((Y,Z)? X, i) =
X
Y,Z?T
?((Y,X)? Z, i+ 1)
?X ? T , ?i ? {3 . . . n? 2}:
X
Y,Z?T
?((Y,Z)? X, i) =
X
Y,Z?T
?((X,Y )? Z, i+ 2)
?X ? T,?i ? {3 . . . n} : ?(i,X) =
X
Y,Z?T
?((Y,Z)? X, i)
?X ? T : ?(1, X) =
X
Y,Z?T
?((X,Y )? Z, 3)
?X ? T : ?(2, X) =
X
Y,Z?T
?((Y,X)? Z, 3)
Figure 3: The linear constraints defining the marginal
polytope for trigram POS tagging.
conv(Y). The problem max??conv(Y) ? ?? is a linear
programming problem.
For parsing, this theorem implies that:
1. Weighted CFG parsing can be framed as a linear
programming problem, of the form max??conv(Y) ??
?, where conv(Y) is specified by a polynomial num-
ber of linear constraints.
2. Conversely, dynamic programming algorithms
such as the CKY algorithm can be considered to
be oracles that efficiently solve LPs of the form
max??conv(Y) ? ? ?.
Similar results apply for the POS tagging case.
5.2 Linear Programming Relaxations
We now describe the LP relaxations that are solved
by the example algorithms in section 4. We begin
with the algorithm in Figure 1.
The original optimization problem was to find
max(y,z)?Q
(
y ? ?cfg + z ? ?tag
)
(see Eq. 2). By the-
orem 5.2, this is equivalent to solving
max
(?,?)?conv(Q)
(
? ? ?cfg + ? ? ?tag
)
(9)
To formulate our approximation, we first define:
Q? = {(?, ?) : ? ? conv(Y), ? ? conv(Z),
?(i, t) = ?(i, t) for all (i, t) ? Iuni}
6
The definition of Q? is very similar to the definition
of Q (see Eq. 1), the only difference being that Y
and Z are replaced by conv(Y) and conv(Z) re-
spectively. Hence any point inQ is also inQ?. It fol-
lows that any point in conv(Q) is also inQ?, because
Q? is a convex set defined by linear constraints.
The LP relaxation then corresponds to the follow-
ing optimization problem:
max
(?,?)?Q?
(
? ? ?cfg + ? ? ?tag
)
(10)
Q? is defined by linear constraints, making this a
linear program. Since Q? is an outer bound on
conv(Q), i.e. conv(Q) ? Q?, we obtain the guaran-
tee that the value of Eq. 10 always upper bounds the
value of Eq. 9.
In Appendix A we give an example showing
that in general Q? includes points that are not in
conv(Q). These points exist because the agreement
between the two parts is now enforced in expecta-
tion (?(i, t) = ?(i, t) for (i, t) ? Iuni) rather than
based on actual assignments. This agreement con-
straint is weaker since different distributions over
assignments can still result in the same first order
expectations. Thus, the solution to Eq. 10 may be
in Q? but not in conv(Q). It can be shown that
all such solutions will be fractional, making them
easy to distinguish from Q. In many applications of
LP relaxations?including the examples discussed
in this paper?the relaxation in Eq. 10 turns out to
be tight, in that the solution is often integral (i.e., it
is in Q). In these cases, solving the LP relaxation
exactly solves the original problem of interest.
In the next section we prove that the algorithm
in Figure 1 solves the problem in Eq 10. A similar
result holds for the algorithm in section 4.2: it solves
a relaxation of Eq. 3, whereR is replaced by
R? = {(?, ?) : ? ? conv(H), ? ? conv(D),
?(i, j) = ?(i, j) for all (i, j) ? Ifirst}
6 Convergence Guarantees
6.1 Lagrangian Relaxation
We now show that the example algorithms solve
their respective LP relaxations given in the previ-
ous section. We do this by first introducing a gen-
eral class of linear programs, together with an op-
timization method, Lagrangian relaxation, for solv-
ing these LPs. We then show that the algorithms in
section 4 are special cases of the general algorithm.
The linear programs we consider take the form
max
x1?X1,x2?X2
(?1 ? x1 + ?2 ? x2) such that Ex1 = Fx2
The matricesE ? Rq?m andF ? Rq?l specify q lin-
ear ?agreement? constraints between x1 ? Rm and
x2 ? Rl. The setsX1,X2 are also specified by linear
constraints, X1 = {x1 ? Rm : Ax1 = b, x1 ? 0}
and X2 =
{
x2 ? Rl : Cx2 = d, x2 ? 0
}
, hence the
problem is an LP.
Note that if we set X1 = conv(Y), X2 =
conv(Z), and define E and F to specify the agree-
ment constraints ?(i, t) = ?(i, t), then we have the
LP relaxation in Eq. 10.
It is natural to apply Lagrangian relaxation in
cases where the sub-problems maxx1?X1 ?1 ?x1 and
maxx2?X2 ?2 ? x2 can be efficiently solved by com-
binatorial algorithms for any values of ?1, ?2, but
where the constraints Ex1 = Fx2 ?complicate? the
problem. We introduce Lagrange multipliers u ? Rq
that enforce the latter set of constraints, giving the
Lagrangian:
L(u, x1, x2) = ?1 ? x1 + ?2 ? x2 + u ? (Ex1 ? Fx2)
The dual objective function is
L(u) = max
x1?X1,x2?X2
L(u, x1, x2)
and the dual problem is to find minu?Rq L(u).
Because X1 and X2 are defined by linear con-
straints, by strong duality we have
min
u?Rq
L(u) = max
x1?X1,x2?X2:Ex1=Fx2
(?1 ? x1 + ?2 ? x2)
Hence minimizing L(u) will recover the maximum
value of the original problem. This leaves open the
question of how to recover the LP solution (i.e., the
pair (x?1, x
?
2) that achieves this maximum); we dis-
cuss this point in section 6.2.
The dual L(u) is convex. However, L(u) is
not differentiable, so we cannot use gradient-based
methods to optimize it. Instead, a standard approach
is to use a subgradient method. Subgradients are tan-
gent lines that lower bound a function even at points
of non-differentiability: formally, a subgradient of a
convex function L : Rn ? R at a point u is a vector
gu such that for all v, L(v) ? L(u) + gu ? (v ? u).
7
u(1) ? 0
for k = 1 to K do
x(k)1 ? arg maxx1?X1(?1 + (u
(k))TE) ? x1
x(k)2 ? arg maxx2?X2(?2 ? (u
(k))TF ) ? x2
if Ex(k)1 = Fx
(k)
2 return u
(k)
u(k+1) ? u(k) ? ?k(Ex
(k)
1 ? Fx
(k)
2 )
return u(K)
Figure 4: The Lagrangian relaxation algorithm.
By standard results, the subgradient for L at a point
u takes a simple form, gu = Ex?1 ? Fx
?
2, where
x?1 = arg max
x1?X1
(?1 + (u
(k))TE) ? x1
x?2 = arg max
x2?X2
(?2 ? (u
(k))TF ) ? x2
The beauty of this result is that the values of x?1 and
x?2, and by implication the value of the subgradient,
can be computed using oracles for the two arg max
sub-problems.
Subgradient algorithms perform updates that are
similar to gradient descent:
u(k+1) ? u(k) ? ?kg
(k)
where g(k) is the subgradient ofL at u(k) and ?k > 0
is the step size of the update. The complete sub-
gradient algorithm is given in figure 4. The follow-
ing convergence theorem is well-known (e.g., see
page 120 of Korte and Vygen (2008)):
Theorem 6.1 If limk?? ?k = 0 and
??
k=1 ?k =
?, then limk?? L(u(k)) = minu L(u).
The following proposition is easily verified:
Proposition 6.1 The algorithm in figure 1 is an in-
stantiation of the algorithm in figure 4,8 with X1 =
conv(Y), X2 = conv(Z), and the matrices E and
F defined to be binary matrices specifying the con-
straints ?(i, t) = ?(i, t) for all (i, t) ? Iuni.
Under an appropriate definition of the step sizes ?k,
it follows that the algorithm in figure 1 defines a
sequence of Lagrange multiplers u(k) minimizing a
dual of the LP relaxation in Eq. 10. A similar result
holds for the algorithm in section 4.2.
8with the caveat that it returns (x(k)1 , x
(k)
2 ) rather than u
(k).
6.2 Recovering the LP Solution
The previous section described how the method in
figure 4 can be used to minimize the dualL(u) of the
original linear program. We now turn to the problem
of recovering a primal solution (x?1, x
?
2) of the LP.
The method we propose considers two cases:
(Case 1) If Ex(k)1 = Fx
(k)
2 at any stage during
the algorithm, then simply take (x(k)1 , x
(k)
2 ) to be the
primal solution. In this case the pair (x(k)1 , x
(k)
2 ) ex-
actly solves the original LP.9 If this case arises in the
algorithm in figure 1, then the resulting solution is
binary (i.e., it is a member of Q), and the solution
exactly solves the original inference problem.
(Case 2) If case 1 does not arise, then a couple of
strategies are possible. (This situation could arise
in cases where the LP is not tight?i.e., it has a
fractional solution?or where K is not large enough
for convergence.) The first is to define the pri-
mal solution to be the average of the solutions en-
countered during the algorithm: x?1 =
?
k x
(k)
1 /K,
x?2 =
?
k x
(k)
2 /K. Results from Nedic? and Ozdaglar
(2009) show that as K ? ?, these averaged solu-
tions converge to the optimal primal solution.10 A
second strategy (as given in figure 1) is to simply
take (x(K)1 , x
(K)
2 ) as an approximation to the primal
solution. This method is a heuristic, but previous
work (e.g., Komodakis et al (2007)) has shown that
it is effective in practice; we use it in this paper.
In our experiments we found that in the vast ma-
jority of cases, case 1 applies, after a small number
of iterations; see the next section for more details.
7 Experiments
7.1 Integrated Phrase-Structure and
Dependency Parsing
Our first set of experiments considers the integration
of Model 1 of Collins (2003) (a lexicalized phrase-
structure parser, from here on referred to as Model
9We have that ?1 ? x
(k)
1 + ?2 ? x
(k)
2 = L(u
(k), x(k)1 , x
(k)
2 ) =
L(u(k)), where the last equality is because x(k)1 and x
(k)
2 are de-
fined by the respective argmax?s. Thus, (x(k)1 , x
(k)
2 ) and u
(k)
are primal and dual optimal.
10The resulting fractional solution can be projected back to
the setQ, see (Smith and Eisner, 2008; Martins et al, 2009).
8
Itn. 1 2 3 4 5-10 11-20 20-50 **
Dep 43.5 20.1 10.2 4.9 14.0 5.7 1.4 0.4
POS 58.7 15.4 6.3 3.6 10.3 3.8 0.8 1.1
Table 1: Convergence results for Section 23 of the WSJ
Treebank for the dependency parsing and POS experi-
ments. Each column gives the percentage of sentences
whose exact solutions were found in a given range of sub-
gradient iterations. ** is the percentage of sentences that
did not converge by the iteration limit (K=50).
1),11 and the 2nd order discriminative dependency
parser of Koo et al (2008). The inference problem
for a sentence x is to find
y? = arg max
y?Y
(f1(y) + ?f2(y)) (11)
where Y is the set of all lexicalized phrase-structure
trees for the sentence x; f1(y) is the score (log prob-
ability) under Model 1; f2(y) is the score under Koo
et al (2008) for the dependency structure implied
by y; and ? > 0 is a parameter dictating the relative
weight of the two models.12 This problem is simi-
lar to the second example in section 4; a very sim-
ilar dual decomposition algorithm to that described
in section 4.2 can be derived.
We used the Penn Wall Street Treebank (Marcus
et al, 1994) for the experiments, with sections 2-21
for training, section 22 for development, and section
23 for testing. The parameter ? was chosen to opti-
mize performance on the development set.
We ran the dual decomposition algorithm with a
limit of K = 50 iterations. The dual decomposi-
tion algorithm returns an exact solution if case 1 oc-
curs as defined in section 6.2; we found that of 2416
sentences in section 23, case 1 occurred for 2407
(99.6%) sentences. Table 1 gives statistics showing
the number of iterations required for convergence.
Over 80% of the examples converge in 5 iterations or
fewer; over 90% converge in 10 iterations or fewer.
We compare the accuracy of the dual decomposi-
tion approach to two baselines: first, Model 1; and
second, a naive integration method that enforces the
hard constraint that Model 1 must only consider de-
11We use a reimplementation that is a slight modification of
Collins Model 1, with very similar performance, and which uses
the TAG formalism of Carreras et al (2008).
12Note that the models f1 and f2 were trained separately,
using the methods described by Collins (2003) and Koo et al
(2008) respectively.
Precision Recall F1 Dep
Model 1 88.4 87.8 88.1 91.4
Koo08 Baseline 89.9 89.6 89.7 93.3
DD Combination 91.0 90.4 90.7 93.8
Table 2: Performance results for Section 23 of the WSJ
Treebank. Model 1: a reimplementation of the genera-
tive parser of (Collins, 2002). Koo08 Baseline: Model 1
with a hard restriction to dependencies predicted by the
discriminative dependency parser of (Koo et al, 2008).
DD Combination: a model that maximizes the joint score
of the two parsers. Dep shows the unlabeled dependency
accuracy of each system.
 50
 60
 70
 80
 90
 100
 0  10  20  30  40  50
Per
cen
tage
Maximum Number of Dual Decomposition Iterations
f score% certificates% match K=50
Figure 5: Performance on the parsing task assuming a
fixed number of iterations K. f-score: accuracy of the
method. % certificates: percentage of examples for which
a certificate of optimality is provided. % match: percent-
age of cases where the output from the method is identical
to the output when using K = 50.
pendencies seen in the first-best output from the de-
pendency parser. Table 2 shows all three results. The
dual decomposition method gives a significant gain
in precision and recall over the naive combination
method, and boosts the performance of Model 1 to
a level that is close to some of the best single-pass
parsers on the Penn treebank test set. Dependency
accuracy is also improved over the Koo et al (2008)
model, in spite of the relatively low dependency ac-
curacy of Model 1 alone.
Figure 5 shows performance of the approach as a
function ofK, the maximum number of iterations of
dual decomposition. For this experiment, for cases
where the method has not converged for k ? K,
the output from the algorithm is chosen to be the
y(k) for k ? K that maximizes the objective func-
tion in Eq. 11. The graphs show that values of K
less than 50 produce almost identical performance to
K = 50, but with fewer cases giving certificates of
optimality (with K = 10, the f-score of the method
is 90.69%; with K = 5 it is 90.63%).
9
Precision Recall F1 POS Acc
Fixed Tags 88.1 87.6 87.9 96.7
DD Combination 88.7 88.0 88.3 97.1
Table 3: Performance results for Section 23 of the WSJ.
Model 1 (Fixed Tags): a baseline parser initialized to the
best tag sequence of from the tagger of Toutanova and
Manning (2000). DD Combination: a model that maxi-
mizes the joint score of parse and tag selection.
7.2 Integrated Phrase-Structure Parsing and
Trigram POS tagging
In a second experiment, we used dual decomposi-
tion to integrate the Model 1 parser with the Stan-
ford max-ent trigram POS tagger (Toutanova and
Manning, 2000), using a very similar algorithm to
that described in section 4.1. We use the same train-
ing/dev/test split as in section 7.1. The two models
were again trained separately.
We ran the algorithm with a limit of K = 50 it-
erations. Out of 2416 test examples, the algorithm
found an exact solution in 98.9% of the cases. Ta-
ble 1 gives statistics showing the speed of conver-
gence for different examples: over 94% of the exam-
ples converge to an exact solution in 10 iterations or
fewer. In terms of accuracy, we compare to a base-
line approach of using the first-best tag sequence
as input to the parser. The dual decomposition ap-
proach gives 88.3 F1 measure in recovering parse-
tree constituents, compared to 87.9 for the baseline.
8 Conclusions
We have introduced dual-decomposition algorithms
for inference in NLP, given formal properties of the
algorithms in terms of LP relaxations, and demon-
strated their effectiveness on problems that would
traditionally be solved using intersections of dy-
namic programs (Bar-Hillel et al, 1964). Given the
widespread use of dynamic programming in NLP,
there should be many applications for the approach.
There are several possible extensions of the
method we have described. We have focused on
cases where two models are being combined; the
extension to more than two models is straightfor-
ward (e.g., see Komodakis et al (2007)). This paper
has considered approaches for MAP inference; for
closely related methods that compute approximate
marginals, see Wainwright et al (2005b).
A Fractional Solutions
We now give an example of a point (?, ?) ? Q?\conv(Q)
that demonstrates that the relaxation Q? is strictly larger
than conv(Q). Fractional points such as this one can arise
as solutions of the LP relaxation for worst case instances,
preventing us from finding an exact solution.
Recall that the constraints for Q? specify that ? ?
conv(Y), ? ? conv(Z), and ?(i, t) = ?(i, t) for all
(i, t) ? Iuni. Since ? ? conv(Y), ? must be a con-
vex combination of 1 or more members of Y; a similar
property holds for ?. The example is as follows. There
are two possible parts of speech, A and B, and an addi-
tional non-terminal symbol X . The sentence is of length
3, w1 w2 w3. Let ? be the convex combination of the
following two tag sequences, each with probability 0.5:
w1/A w2/A w3/A and w1/A w2/B w3/B. Let ? be
the convex combination of the following two parses, each
with probability 0.5: (X(A w1)(X(A w2)(B w3))) and
(X(A w1)(X(B w2)(A w3))). It can be verified that
?(i, t) = ?(i, t) for all (i, t), i.e., the marginals for single
tags for ? and ? agree. Thus, (?, ?) ? Q?.
To demonstrate that this fractional point is not in
conv(Q), we give parameter values such that this frac-
tional point is optimal and all integral points (i.e., ac-
tual parses) are suboptimal. For the tagging model, set
?(AA? A, 3) = ?(AB ? B, 3) = 0, with all other pa-
rameters having a negative value. For the parsing model,
set ?(X ? A X, 1, 1, 3) = ?(X ? A B, 2, 2, 3) =
?(X ? B A, 2, 2, 3) = 0, with all other rule parameters
being negative. For this objective, the fractional solution
has value 0, while all integral points (i.e., all points inQ)
have a negative value. By Theorem 5.2, the maximum of
any linear objective over conv(Q) is equal to the maxi-
mum over Q. Thus, (?, ?) 6? conv(Q).
B Step Size
We used the following step size in our experiments. First,
we initialized ?0 to equal 0.5, a relatively large value.
Then we defined ?k = ?0 ? 2??k , where ?k is the num-
ber of times that L(u(k
?)) > L(u(k
??1)) for k? ? k. This
learning rate drops at a rate of 1/2t, where t is the num-
ber of times that the dual increases from one iteration to
the next. See Koo et al (2010) for a similar, but less ag-
gressive step size used to solve a different task.
Acknowledgments MIT gratefully acknowledges the
support of Defense Advanced Research Projects Agency
(DARPA) Machine Reading Program under Air Force Research
Laboratory (AFRL) prime contract no. FA8750-09-C-0181.
Any opinions, findings, and conclusion or recommendations ex-
pressed in this material are those of the author(s) and do not
necessarily reflect the view of the DARPA, AFRL, or the US
government. Alexander Rush was supported under the GALE
program of the Defense Advanced Research Projects Agency,
Contract No. HR0011-06-C-0022. David Sontag was supported
by a Google PhD Fellowship.
10
References
Y. Bar-Hillel, M. Perles, and E. Shamir. 1964. On formal
properties of simple phrase structure grammars. In
Language and Information: Selected Essays on their
Theory and Application, pages 116?150.
X. Carreras, M. Collins, and T. Koo. 2008. TAG, dy-
namic programming, and the perceptron for efficient,
feature-rich parsing. In Proc CONLL, pages 9?16.
X. Carreras. 2007. Experiments with a higher-order
projective dependency parser. In Proc. CoNLL, pages
957?961.
M. Collins. 2002. Discriminative training methods for
hidden markov models: Theory and experiments with
perceptron algorithms. In Proc. EMNLP, page 8.
M. Collins. 2003. Head-driven statistical models for nat-
ural language parsing. In Computational linguistics,
volume 29, pages 589?637.
G.B. Dantzig and P. Wolfe. 1960. Decomposition princi-
ple for linear programs. In Operations research, vol-
ume 8, pages 101?111.
J. Duchi, D. Tarlow, G. Elidan, and D. Koller. 2007.
Using combinatorial optimization within max-product
belief propagation. In NIPS, volume 19.
J. Eisner. 2000. Bilexical grammars and their cubic-time
parsing algorithms. In Advances in Probabilistic and
Other Parsing Technologies, pages 29?62.
A. Globerson and T. Jaakkola. 2007. Fixing max-
product: Convergent message passing algorithms for
MAP LP-relaxations. In NIPS, volume 21.
N. Komodakis, N. Paragios, and G. Tziritas. 2007.
MRF optimization via dual decomposition: Message-
passing revisited. In International Conference on
Computer Vision.
T. Koo, X. Carreras, and M. Collins. 2008. Simple semi-
supervised dependency parsing. In Proc. ACL/HLT.
T. Koo, A.M. Rush, M. Collins, T. Jaakkola, and D. Son-
tag. 2010. Dual Decomposition for Parsing with Non-
Projective Head Automata. In Proc. EMNLP, pages
63?70.
B.H. Korte and J. Vygen. 2008. Combinatorial optimiza-
tion: theory and algorithms. Springer Verlag.
M.P. Marcus, B. Santorini, and M.A. Marcinkiewicz.
1994. Building a large annotated corpus of English:
The Penn Treebank. In Computational linguistics, vol-
ume 19, pages 313?330.
R.K. Martin, R.L. Rardin, and B.A. Campbell. 1990.
Polyhedral characterization of discrete dynamic pro-
gramming. Operations research, 38(1):127?138.
A.F.T. Martins, N.A. Smith, and E.P. Xing. 2009. Con-
cise integer linear programming formulations for de-
pendency parsing. In Proc. ACL.
R. McDonald, F. Pereira, K. Ribarov, and J. Hajic. 2005.
Non-projective dependency parsing using spanning
tree algorithms. In Proc. HLT/EMNLP, pages 523?
530.
Angelia Nedic? and Asuman Ozdaglar. 2009. Approxi-
mate primal solutions and rate analysis for dual sub-
gradient methods. SIAM Journal on Optimization,
19(4):1757?1780.
B. Pang and L. Lee. 2004. A sentimental education:
Sentiment analysis using subjectivity summarization
based on minimum cuts. In Proc. ACL.
S. Riedel and J. Clarke. 2006. Incremental integer linear
programming for non-projective dependency parsing.
In Proc. EMNLP, pages 129?137.
D. Roth and W. Yih. 2005. Integer linear program-
ming inference for conditional random fields. In Proc.
ICML, pages 737?744.
Hanif D. Sherali and Warren P. Adams. 1994. A hi-
erarchy of relaxations and convex hull characteriza-
tions for mixed-integer zero?one programming prob-
lems. Discrete Applied Mathematics, 52(1):83 ? 106.
D.A. Smith and J. Eisner. 2008. Dependency parsing by
belief propagation. In Proc. EMNLP, pages 145?156.
D. Sontag, T. Meltzer, A. Globerson, T. Jaakkola, and
Y. Weiss. 2008. Tightening LP relaxations for MAP
using message passing. In Proc. UAI.
B. Taskar, D. Klein, M. Collins, D. Koller, and C. Man-
ning. 2004. Max-margin parsing. In Proc. EMNLP,
pages 1?8.
K. Toutanova and C.D. Manning. 2000. Enriching the
knowledge sources used in a maximum entropy part-
of-speech tagger. In Proc. EMNLP, pages 63?70.
M. Wainwright and M. I. Jordan. 2008. Graphical Mod-
els, Exponential Families, and Variational Inference.
Now Publishers Inc., Hanover, MA, USA.
M. Wainwright, T. Jaakkola, and A. Willsky. 2005a.
MAP estimation via agreement on trees: message-
passing and linear programming. In IEEE Transac-
tions on Information Theory, volume 51, pages 3697?
3717.
M. Wainwright, T. Jaakkola, and A. Willsky. 2005b. A
new class of upper bounds on the log partition func-
tion. In IEEE Transactions on Information Theory,
volume 51, pages 2313?2335.
C. Yanover, T. Meltzer, and Y. Weiss. 2006. Linear
Programming Relaxations and Belief Propagation?An
Empirical Study. In The Journal of Machine Learning
Research, volume 7, page 1907. MIT Press.
11
