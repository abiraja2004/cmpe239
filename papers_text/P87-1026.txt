FLUSH:  A F lex ib le  Lex icon  Des ign  
David J. Besemer and Paul S. Jacobs 
Artificial Intelligence Branch 
GE Corporate Research and Development 
Schenectady, NY 12301 USA 
Abstract 
Approaches to natural language processing that use a 
phrasal lexicon have the advantage ofeasily handling 
linguistic constructions that might otherwise be ex- 
tragrammatical. However, current phrasal exicons 
are often too rigid: their phrasal entries fail to cover 
the more flexible constructions. FLUSH, for Flexible 
Lexicon Utilizing Specialized and Hierarchical knowl- 
edge, is a knowledge-based lexicon design that allows 
broad phrasal coverage. 
I. I n t roduct ion  
Natural language processing systems must use a broad 
range of lexical knowledge to account for the syntactic use 
and meaning of words and constructs. The problem of un- 
derstanding is compounded by the fact that language is 
full of nonproductive constructs--expressions whose mean- 
ing is not fully determined by examining their parts. To 
handle these constructs, some systems use a phrasal ex- 
icon \[Becket, 1975, Wilensky and Arena, 1980b, Jacobs, 
.1985b, Steinacker and Buchberger, 1983, Dyer and Zernik, 
1986\], a dictionary designed to make the representation f 
these specialized constructs easier. 
The problem that phrasal exicons have is that they 
are too rigid: the phrasal knowledge is entered in a way 
that makes it difficult to represent the many forms some 
expressions may take without treating each form as a dis- 
tinct "phrase". For example, expressions such as "send 
a message", "give a hug", "working directory", and "pick 
up" may be handled as specialized phrases, but this over- 
looks similar expressions such as "give a message", "get 
a kiss", "working area", and "take up". Specialized con- 
structs must be recognized, but much of their meaning as 
well as their flexible linguistic behavior may come from a 
more general level. 
A solution to this problem of rigidity is to have a hier- 
archy of linguistic constructions, with the most specialized 
phrases grouped in categories with other phrases that be- 
have similarly. The idea of a linguistic hierarchy is not 
novel, having roots in both linguistics \[Lockwood, 1972, 
Halliday, 1978\] and Artificial Intelligence \[Sondheimer t
al., 1984\]. Incorporating phrasal knowledge into such a 
hierarchy was suggested in some AI work \[Wilensky and 
Arena, 1980a\], but the actual implementation of a hier- 
186 
archical phrasal exicon requires ubstantial extensions to 
the phrasal representation f such work. 
The Flexible Lexicon Utilizing Specific and Hierar- 
chical knowledge (FLUSH) is one component in a suite of 
natural anguage processing tools being developed at the 
GE Research and Development Center to facilitate rapid 
assimilation of natural anguage processing technology to a 
wide variety of domains. FLUSH has characteristics of both 
traditional and phrasal exicons, and the phrasal portion 
is partitioned into four classes of phrasal entries: 
? word sequences 
? lexical relations 
? linguistic relations 
? linguistic/conceptual re ations 
FLUSH's mechanisms for dealing with these four classes of 
specialized phrases make use of both general and specific 
knowledge to support extensibility. 
FLUSH is the lexical component of a system called 
TRUMP (TRansportable Understanding Mechanism Pack- 
age) \[Jacobs, 1986b\], used for language analysis in multiple 
domains. This paper will describe the phrasal knowledge 
base of FLUSH and its use in TRUMP. 
II. Compound Lexical 
Knowledge in FLUSH 
Because the knowledge mbodied in single word lexemes 
is not enough to account for nonproductive expressions, 
FLUSH contains phrasal entries called compound lezemes. 
This section first illustrates how each of the four classes of 
compound lexemes is represented in FLUSH and then de- 
scribes the algorithm for accessing the compound lexemes. 
So that the reader is better equipped to understand the fig- 
ures in the rest of this paper, the next paragraph briefly in- 
troduces the knowledge representation scheme that is em- 
ployed by FLUSH. 
Knowledge representation i  FLUSH is uses Ace \[Ja- 
cobs and Rau, 1984, Jacobs, 1985a\], a hierarchical knowl- 
edge representation framework based on structured inher- 
itance. Most of Ace's basic elements can be found in other 
knowledge representation schemes (e.g., isa links, slots, 
and inheritance)\[Bobrow and Winograd, 1977, Brachman 
and Schmolze, 1985, Wilensky, 1986\], but Ace has the 
prep-up 
D 
compound-lexeme \[ 
l? v-vp I 
p-vp \[ 
verb-piclc 1 /  D 
v-vp 
D 
verb-throw 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  
I v-throw-up I
P 
v-vp ~ I 
v-loo/c-u 
Figure 1: The compound lexeme verb-par~icle.zzx.up 
verb-loolc 
D 
unique ability to represent referential and metaphorical 
mappings among categories (see descriptions of re/and 
view below). The primitive semantic onnections in an 
Ace hierarchy include the following: 
dominate - -  defines an isa link between two categories. 
This relation is labeled with a "D" in the figures. 
(dominate act ion running) means that running is 
an action~i.e., action dominates running. 
manifest - -  defines a constituent of a category. Unless a 
role-play applies (see below), this relation is labeled 
"m" in the figures. 
(manifest act ion actor)  means that an action has 
an actor associated with it. This is analogous to a slot 
in other knowledge representations. 
role.play- establishes a relationship between a con- 
stituent (slot) of a dominating category and a con- 
stituent (slot) of a dominated category. In the figures, 
this relation is labeled with the appropriate role name 
for the constituent. 
(dominate act ion running 
(role-play actor runner)) 
means that in running, the role of actor (inherited 
from action) is played by the runner. 
ref - -  defines a mapping between an entity in the linguis- 
tic hierarchy and an entity in the conceptual hierarchy. 
This relation is labeled "re\]" in the figures. 
(ref  lex-run running) means that when the lexical 
category lez-run is invoked, the concept of running 
should be invoked as well. This is the main chan- 
nel through which semantic interpretation is accom- 
plished. 
view - -  defines a metaphorical mapping between two cat- 
egories in the conceptual hierarchy. 
(view transfer-event action 
(role-play source actor)) 
means that in certain cases, an action can be 
metaphorically viewed as a $ransfer.event, with the 
\]87 
actor viewed as the source of the transfer. 
This brief introduction to Ace will help the reader un- 
derstand the descriptions of the representation a d access 
of compound lexemes that are presented in the next two 
subsections. 
A .  Compound Lexemes  
1. Word Sequences 
Word sequences are phrases uch as "by and large" 
and "let alne" that must be treated as compound words 
because there is little hope in trying to determine their 
meaning by examining their components. Internally, these 
word sequences may or may not be grammatical (e.g., "kick 
the bucket" is internally grammatical, but "by and large" 
is not). 
Because type of compound lexeme is very specific, a 
separate category exists for each word sequence under the 
general category of word-sequence. Lexical constraints are 
placed on the different constituents of the word-sequence 
relation by dominating them by the appropriate simple 
lexeme. This is one method that can be used to establish 
constraints on compound lexemes, and it is used through- 
out the compound lexeme hierarchy. 
2. Lexical Relations 
Lexical relations include compound lexical entities 
such as "pick up" and "sell out" that can appear in a va- 
riety of surface forms, but have some general relationship 
among their simple lexeme constituents. Compound lex- 
emes such as verb-particles ("pick up"), verb-prepositions 
("take to"), and helper-verbs ("get going") all fall into 
the category of lezical relations. In contrast o the indi- 
vidual subcategories of word sequences, there are many 
entries that fall underneath each individual subcategory 
of lexical relations. Most of the entries under these sub- 
categories, however, share constituents with other entries, 
which makes generalizations possible. For example, Fig- 
ure 1 shows how all verb-particles that have up as the par- 
whole-verb 
I D 
base-va 
I mod-va rood 
\[ compound-lexeme \[ \ [prep-phrase I 
tD  , ~ base I /~D " 
,, ~ .~ m~'~ rood I I whole-noun 
~.  rnod-rel ~ _ ~ .~  r - "  
tD  
"? I I KY?  . . . . . .  , 
rood 
prep-root 
Figure 2: The modifying-relation compound-lexeme hi rarchy. 
ticle (e.g., "pick up", "throw up", "look up') are repre- 
sented. 
This generalization i  representing seemingly specific 
phrases is what makes FLUStt extensible. If a new verb- 
particle with up as the particle is added to the system (e.g., 
"hang up"), it inherits everything except he verb from the 
structure above it--that is, the general properties of verb- 
particle relations are inherited (such as the transposition 
of the particle with the object "it"), and the specific prop- 
erties of verb-particles having the preposition "up" (the 
constraint on the preposition itself, and possibly some de- 
fault semantics for the particle) are inherited. 
3. Linguistic Relations 
Linguistic relaiions are invoked according to con- 
straints on their constituents, where the constituents may 
be simple lexemes, compound lexemes, or syntactic struc- 
tures. An example occurs in the sentence "John was sold 
a book by Mary" where the object of the preposition is 
the main actor of the event described by the verb. This 
condition occurs only when the whole verb'is in the passive 
form (constraint 1) and the preposition in the modifying 
prepositional phrase is by (constraint 2). 
Linguistic relations are difficult to represent for two 
reasons: their constituents are not always simple lexemes 
and usually there are additional constraints on each con- 
stituent. It has been found, however, that a great deal of 
generality can be extracted from most of the linguistic re- 
lations to make accessing them easier. The best example 
of a linguistic relation is the class of the modifying prepo- 
sitioval phrases. In some instances, prepositional phrases 
modify noun phrases and verb phrases in almost he same 
way (e.g., "The man on the hill is a skier" and "We had 
a picnic on the hil?'). In other cases prepositional phrases 
modify noun phrases and verb phrases in completely dif- 
ferent ways (e.g., "The man by the car is my father." and 
"The boy was hit by the car."). FLUSH is able to represent 
both types of linguistic relation by having more than one 
level of generic representation. Figure 2 shows the gen- 
eral modifying relation (mod.rel) at the first level below 
compound-lexeme. Prepositional phrases that are homo- 
geneous across noun phrases and verb phrases are repre- 
sented underneath t is category. Below rood.tel in Figure 2 
are the verb-adjunct (va) and noun-post-modifier (npm) 
categories, which make up the second level of generic repre- 
sentation. Prepositional phrases that modify verb phrases 
and noun phrases differently are represented underneath 
these categories. 
As an example, in Figure 2 the rood-tel category has 
the more specific modifying relation mod-rel-zzz.from un- 
derneath it, which is a modifying relation where the prepo- 
sition in the modifier is prep-from. Example uses of this 
prepositional phrase are found in the sentences: "The man 
arrived from New York" and "The woman from Boston is 
my aunt". 
4. Lingulstic/Conceptual Relations 
These are expressions that cannot be easily handled 
as exclusively linguistic constructs, such as "giving per- 
mission", "getting permission", and "having permission". 
These expressions can be represented as an abstract pos- 
session concept where the possessed is ':noun-permission", 
thus combining a class of concepts with a lexical category. 
These compound lexemes have the unique character- 
istic of allowing linguistic relations to have explicit con- 
ceptual constraints. In the phrase "give a hug" there is 
an abstract relationship between the concept of giving and 
the simple lexeme noun.hug that implies the concept of 
hugging. Figure 3 shows the representation f this linguis- 
tic/conceptual relation. This kind of compound lexeme is 
invoked by the semantic interpreter, rather than by the 
parser, during a process called concretion--making con- 
cepts more concrete. The scope of this paper does not per- 
mit a discussion of concretion, but refer to \[Jacobs, 1986b\] 
for more information. 
The descriptions in this section illustrate how FLUSH 
is able to represent a wide range of lexical phenomena in
a hierarchical and uniform manner. The four classes of 
compound lexemes that are described encompass many of 
the usually problematic expressions in natural language, 
yet they are represented in a way that supports extension 
and adaptation. The next section describes how these rep- 
resentations are accessed by FLUSH. 
188 
l linguistic~conceptual mm~ concept \] DI lexeme I 
I lc-give-xxx h i  gi~ing 
vl oo. /? ?-lc-~ive-xxx I 
k,,x I 
lexemeN~ l_lc_~iv/eDu~\[ 
% 
Figure 3: The linguistic/conceptual re ation Icr-give-hug. 
B. Access 
Although the compound lexeme representations illustrated 
in the previous section differ, FLUSH is able to employ a 
fairly flexible algorithm for accessing them. When the 
parser encounters a relation that may constitute a com- 
pound lexeme, it passes the name of the relation and the 
constituents that fill the appropriate roles to FLUSH. If 
FLUSH finds a compound lexeme that satisfies the con- 
straints, it passes the lexeme back to the parser. 
For example, if TRUMP is working on the sentence 
":John picked up the book", it encounters a possible verb- 
particle relationship between the verb "picked" and the 
preposition "up". When this relationship is apparent o 
the parser, FLUSH is called with the verb-part relation with 
the constituents of pt-verb.pick as the verb and prep-up as 
the particle: 
(find-compound verb-part 
(v-verb-part pt-verb-piek) 
(p-verb-part prep-up) ) 
In this example, the compound lexeme verb.part-pick- 
up is found by FLUSH and is returned to the parser. If 
instead the sentence is ":John meditated up the hill", the 
parser takes the same action, but no compound lexeme is 
found by FLUSH because "meditated up" has no special 
meaning. 
FLUSH uses a two step procedure to locate specific 
compound lexemes. First, entries below the given relation 
in the hierarchy are checked to see if any of them sat- 
isfy the given constraints. If a compound lexeme exists, it 
is usually found during this step. There are some cases, 
however, in which the desired compound lexeme exists as 
a subcategory of an ancestor of the given relation. This 
situation was seen in the description of the modifying rela- 
tion (rood-tel), verb-adjunct (va), and noun-post-modifier 
(npm) in the previous ection (see Figure 2). In this case, 
a second step in the search process looks at the sibling cat- 
egories. This process continues until either the top of the 
compound.lexeme hi rarchy is reached (which happens im- 
mediately for most relations) or until a suitable compound 
lexeme is found. 
The process of finding a compound lexeme below 
the given relation is a matching problem. In response 
to the example call to f ind-compound above, the lexi- 
con proceeds to look at the defined categories underneath 
verb-part, which include verb.part-?ZZoUp, verb-part-?xz- 
out, verb-part-z~zx-off, etc., to see which one(s) satisfies the 
constraints, verb-part.zzz-up is found as a possibility, re- 
sulting in the same function being called recursively with 
the remaining constraints to find an appropriate category 
below it: 
(f ind-eompound verb-part-xxx-up 
(v-verb-part p~-verb-pick) ) 
This process is repeated until one of two conditions oc- 
curs: either the given constraints are exhausted, in which 
case a category that satisfies all of them has been found; 
or there are no more categories to search but there are still 
constraints left, in which case no match has been found 
and it may be appropriate to search the ancestors' sub- 
categories. In this example, the verb-part-pick-up category 
is found and returned on the second recursion, therefore, 
there is no need to search the hierarchy at a higher level. 
If instead the parser is working in the sentence "The 
man arrived from New York", it encounters a possible 
verb-adjunct (va) relation between the verb "arrived" and 
the prepositional phrase "from New York". The lexicon is 
called with the va relation, but the first step in the search 
process (i.e., looking below the given relation) does not 
yield a compound lexeme because mod-rel-zxx-from is de- 
fined in terms of the rood.tel relation rather than in terms 
of the va relation (see Figure 2). So even though the re- 
lation that the parser encounters in the pattern is a verb- 
adjunct relation, the lexicon is flexible enough that it can 
apply more general knowledge to the retrieval problem. 
The meanings of compound lexemes are represented 
and accessed using a reference pointer that links the lin- 
guistic category to a conceptual structure. Some of the 
conceptual reference pointers for compound lexemes are 
more complicated than simple lexical access because of- 
ten there are several components that need to be mapped, 
but they are still defined in terms of the ref association 
\[Jacobs, 1986a\]. The example form below defines a refer- 
ence from the compound lexeme mod-rel-zxz-from to the 
transfer-event concept: 
(ref transfer-event <-> mod-rel-xxx-from 
(source <-> m-mod-rel-xxx-from)) 
This reference stablishes that the modifying relation 
mod-rel-zzx-from should invoke the transfer-event concept, 
and the modifier part of mod-rel-zzx-from, namely m-mod- 
rel-zxz-from, should fill the role of source in this transfer- 
event. In the sentence "The man arrived from New York", 
189 
the prepositional phrase "from New York" invokes rood. 
rel-zxx-from. In turn, the transfer-event concept is invoked 
with "New York" as the source of the transfer. 
The explanations above illustrate that FLUSH is capa- 
ble of representing and accessing most of the different ypes 
of lexical knowledge that natural anguage processing sys- 
tems need to have. They also show how FLUSH can do 
most of it in a general manner, making extensions fairly 
straightforward. FLUSH is equipped also with a mecha- 
nism for automatic acquisition of new lexemes, described in 
\[Besemer, 1986\]. The discussion that follows concentrates 
on the application of the hierarchical lexicon to semantic 
interpretation i TRUMP. 
III. Semantic Interpretation 
using FLUSH 
Section II. described the organization of the FLUSH lexi- 
con, distinguishing several classes of lexical knowledge and 
showing the use of a hierarchical knowledge representation 
in representing examples of each class. One goal of this 
hierarchical organization is parsimony: because categories 
of compound lexemes inherit their constraints from more 
general categories, the number of linguistic constraints en- 
coded explicitly can be reduced. A second function of the 
hierarchical representation, perhaps more important, is to 
facilitate the interpretation of the meaning of a compound 
lexeme. 
Semantic interpretation is facilitated by each of the 
classes of compound lexemes discussed in section II.. The 
simple example of word sequences allows the semantic in- 
terpreter to set aside the meanings of the individual words 
to interpret phrases uch as "by and large" and '~?ick the 
bucket" correctly. Lexical relations, such as "pick up" 
and "working directory", permit the association of spe- 
cialized meanings as well as the contribution of certain 
flexible lexical classes to the meaning of a phrase. For ex- 
ample, the phrase "branch manager" is interpreted using 
knowledge that it belongs to a lexical category common 
with "lab manager" and "program manager". Linguistic 
relations uch as mod-rel-~zx-fram permit general exical 
knowledge to apply to the filling of conceptual roles. Lin- 
guistic/conceptual re ations uch as let-give-hug permit he 
specialized interpretation of expressions uch as "give a 
hug" in a broad range of surface forms. 
The following examples illustrate the operation of the 
TRUMP semantic interpreter and its use of the FLUSH lexi- 
con. 
Example  1: 
Send the laser printer characteristics to the branch 
manager. 
Processing the above sentence stimulates a steady flow 
of information between TRUMP'S parser and semantic in- 
terpreter and the FLUSH lexical access mechanism. The 
lexical analyzer ecognizes "laser", "printer" and "charac- 
teristics" as nouns, but the search for compound lexical 
entries is activated only as the parser recognizes that the 
nouns form a compound. The specific entry for "laser 
printer" in the FLUSH lexicon, returned using the com- 
pound access method described in the previous section, 
provides two important pieces of information to TRUMP: 
First, it gives the semantic interpreter the correct meaning 
of the phrase, permitting TRUMP to forbear consideration 
of interpretations such as "a printer that prints lasers". 
Second, it enables the parser to favor the grouping \[\[laser 
printer\] characteristics\] over \[laser \[printer characteristics\]\] 
and thus come up with a viable meaning for the entire 
phrase. 
The handling of the relationship between "charac- 
teristics" and "laser printer" makes use of the middle- 
level category en-~xx.characteristic, much like the verb- 
par~icle.~-up category described in section II. The cn- 
XZXocharac~eris~ic category, representing compound nomi- 
nals whose second noun is "characteristic", is associated 
with its meaning via a I%EF link in the following way: 
(ref characteristic <->. cn-xxx-charac~eristic 
(manifes~er <-> In-cn-xxx-charac~eris~ic)) 
The above 
association, in which ln.cn.~:zz-charac~er~stic denotes the 
first noun of a particular nominal compound, suggests the 
interpretation "characteristics of the laser printer". The 
treatment of this association as a middle-level node in the 
hierarchical lexicon, rather than as an independent lexi- 
cal entry, has two features: First, it is often overridden 
by a more specific entry, as in "performance characteris- 
tics". Second, it may cooperate with more specific lexical 
or conceptual information. For example, the conceptual 
role manifesIer is a general one that, when applied to a 
more specific category, can lead to a specific interpretation 
without requiring a separate conceptual entry. This would 
happen with "laser printer performance characteristics". 
The phrase "branch manager", like "laser printer 
characteristics", is interpreted using an intermediate n- 
try en.zzx-manager. While FLUSH has the capability, like 
PHRAN \[Wilensky and Arens, 1980b\], to constrain this 
category with the semantic onstraint hat the first noun 
must describe a bureaucratic unit, it is at present left to 
the semantic interpreter to determine whether the preced- 
ing noun can play such an organizational role. 
Example  2: 
Cancel the transmission to the printer. 
In this example, the lexical access mechanism ust 
determine that "to the printer" invoked the mod-rel-~zz- 
to linguistic relation, which can be attached either to the 
verb "cancel" or the nominal "transmission". The seman- 
tic interpreter then finds the following association: 
(ref ~rans~er-even~ <-> mod-rel-xxx-~o 
\]9O 
(destination <-> m_mod-rel-xxx-to)) 
The REF association above indicates that the object 
of the preposition "to" is related to the destination role of 
some generalized transfer event. Since "cancel" describes 
no such event, but "transmission" does, TRUMP correctly 
interprets "printer" as being the destination of the trans- 
mission. This allows the semantic interpreter to handle 
this example much in the same way as it would handle 
'`Transrnit the job to the printer n, because the rood-tel re- 
lation class includes both postnominal modifiers and ad- 
verbial prepositional phrases. As in the previous example, 
the semantic interpreter can make use of the interaction 
between this general interpretation rule and more specific 
knowledge; for example, "the sale of the the book to Mar!f' 
invokes the same mod-rel.xxx-to relation, but the role of 
Mary is determined to be customer because that role is 
the conceptual specialization of the destination of a trans- 
fer. The process of correctly determining a conceptual role 
using linguistic relations is described in \[Jacobs, 1987\]. 
Example 3: 
How many arguments does the command take? 
There are two major differences between this example 
and the previous two: First, the lexicon is driven by in- 
formation passed from TRUMP~S semantic interpreter, not 
only from the parser. In the previous example, the parser 
recognizes a potential relationship between a verb or nom- 
inal and a prepositional phrase. In this case, the semantic 
interpreter must determine if the conceptual relationship 
between the concept of taking and the term "arguments" 
invokes any special exical knowledge. Second, the inter- 
pretation of "take arguments" is not a specialization of an 
abstract concept such as transfer-event, but rather is a re- 
sult of a metaphorical view mapping from this concept o 
the concept of command-execution. 
The interpretation of this sentence thus proceeds as 
follows: At the completion of the syntactic parse, the se- 
mantic interpreter produces an instantiation of the con- 
cept taking with the object arguments. The lexical access 
system of FLUSH, using the same discrimination process 
that determines a specialized linguistic relation, identifies 
Icr-transfer-arguments as a linguistic/conceptual re ation 
invoked by the concept of a transfer with the lexical term 
"argument" attached to the conceptual object role. The 
same linguistic/conceptual re ation is invoked by "giving 
arguments" or "getting arguments". The semantic inter- 
preter continues by determining the metaphorical map- 
ping between the transfer-event concept and the command- 
execution concept, a mapping that derives from the same 
conceptual relationships as other similar metaphors such 
as "The recipe takes three cups of sugar." In this way 
the amount of specialized information used for "take ar- 
guments" is kept to a minimum; effectively, FLUSH in this 
case is merely recognizing a linguistic/conceptual trigger 
for a general metaphor. 
This section has described the application of the 
FLUSH lexicon to the process of semantic interpretation i  
the TI~UMP system. The examples illustrate some charac- 
teristics of the flexible lexicon design that differ from other 
phrasal systems: (1) There are a broad range of categories 
to which specialized information may be associated. The 
treatment of "branch manager" and "transmission to" il- 
lustrates the use of compound lexical knowledge at a more 
abstract level than other programs uch as PHRAN. (2) 
The hierarchical lexicon reduces the number of phrasal en- 
tries that would be required in a more rigid system. Ex- 
pressions uch as "take arguments" and "get arguments" 
share a common entry. (3) The quantity of information 
in each phrasal entry is minimized. Linguistic constraints 
are often inherited from general categories, and the amount 
of semantic information required for a specialized entry is 
controlled by the method of determining an appropriate 
conceptual role. The "take arguments" expression thus 
does not require explicit representation f the relationships 
between linguistic and conceptual roles. 
IV .  Conc lus ion  
FLUSH is a flexible lexicon designed to represent linguistic 
constructs for natural anguage processing in an extensi- 
ble manner. The hierarchical Organization of FLUSH, along 
with the provision for a number of types of phrasal con- 
structs, makes it easy to use knowledge at various levels 
in the lexical hierarchy. This design has the advantage 
of handling specialized linguistic constructs without being 
too rigid to deal with the range of forms in which these 
constructs may appear, and facilitates the addition of new 
constructs to the lexicon. FLUSH permits the correct se- 
mantic interpretation fa broad range of expressions with- 
out excessive knowledge at the level of specific phrases. 
References 
\[Becker, 1975\] J. Becker. The phrasal exicon. In Theo- 
retical Issues in Natural I,anguage Processing, Cam- 
bridge, Massachusetts, 1975. 
\[Besemer, 1986\] D. Besemer. FI, USH: Beyond the Phrasal 
I, ezicon. Technical Report 086CRD181, General Elec- 
tric Corporate Research and Development, 1986. 
\[Bobrow and Winograd, 1977\] D. Bobrow and T. Wino- 
grad. An overview of KRL, a knowledge representa- 
tion language. Cognitive Science, 1(1), 1977. 
\[Brachman and Schmolze, 1985\] R. Brachman and J. 
Schmolze. An overview of the KL-ONE knowledge 
representation system. Cognitive Science, 9(2), 1985. 
\[Dyer and Zernik, 1986\] M. Dyer and U. Zernik. Encod- 
ing and acquiring meanings for figurative phrases. In 
Proceedings of the 24th Annual Meeting of the Associ- 
ation for Computational I,inguistics, New York, 1986. 
191 
\[Halfiday, 1978\] M. A. K. Halfiday. Language as Social 
Semiotic. University Park Press, Baltimore, Mary- 
land, 1978. 
\[Jacobs, 1985a\] P. Jacobs. A Knowledge.Based Approach 
to Language Production. PhD thesis, University of 
California, Berkeley, 1985. Computer Science Divi- 
sion Report UCB/CSD86/254. 
\[Jacobs, 1985b\] P. Jacobs. PHRED: a generator for nat- 
ural language interfaces. Computational Linguistics, 
11(4), 1985. 
\[Jacobs, 1986s\] P. Jacobs. Knowledge structures for nat- 
ural language generation. In Proceedings of the 
Eleventh International Conference on Computational 
Linguistics, Bonn, Germany, 1986. 
\[Jacobs, 1986b\] P. Jaeobs. Language analysis in not-so- 
limited domains. In Proceedings of the Fall Joint 
Computer Conference, Dallas, Texas, 1986. 
\[Jacobs, 1987\] P. Jscobs. A knowledge framework for nat- 
ural language analysis. In Proceedings of the Tenth 
International Joint Conference on Artificial Intelli- 
gence, Milan, Italy, 1987. 
\[Jacobs and Ran, 1984\] P. Jaeobs and L. Rau. Ace: asso- 
ciating language with meaning. In Proceedings of the 
Eiz~h European Conference on Artificial Intelligence, 
Piss, Italy, 1984. 
\[Lockwood, 1972\] D. Lockwood. Introduction to Strat- 
ificational Linguistics. Harcourt, Brace, and Jo- 
vanovich, New York, 1972. 
\[Sondheimer tai., 1984\] N. Sondheimer, R. Weischedel, 
and R. Bobrow. Semantic interpretation using KL- 
ONE. In Proceedings of the Tenth International 
Conference on Computational Linguistics, Palo Alto, 
1984. 
\[Steinscker and Buchberger, 1983\] I. Steinacker and E. 
Buchberger. Relating syntax and semantics: the 
syntactico-semantic lexicon of the system VIE-LANG. 
In Proceedings of the First European Meeting of the 
ACL, Piss, Italy, 1983. 
\[Wilensky, 1986\] R. Wilensky. Knowledge representation - 
s critique and s proposal. In J. Kolodner and C. Ries- 
beck, editors, Ezperience, Memory, and Reasoning, 
Lawrence Erlbaum Associates, HiUsdale, New Jersey, 
1986. 
\[Wilensky and Arens, 1980a\] R. Wilensky and Y. Arens. 
PHRAN-A Knowledge-based Approach to Natural 
Language Analysis. Electronics Research Laboratory 
Memorandum UCB/ERL M80/34, University of Cal- 
ifornia, Berkeley, 1980. 
\[Wilensky and Arens, 1980b\] R. Wilensky and Y. Arens. 
PHRAN-a knowledge-based natural anguage under- 
stander. In Proceedings of the 18th Annual Meet- 
ing of the Association for Computational Linguistics, 
Philadelphia, 1980. 
192 
