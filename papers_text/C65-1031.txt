~Bno.-N- ~( 0 2 LCo 
1965 In ternat iona l  Conference  on Computat iona l  L ingu is t i cs  
AUTOMATIC  DEEP STRUCTURE ANALYS IS  
USING AN APPROXIMATE FORMALISM 
? Do Lieberman, Ochel D. Lochak and K. 
IBM Research  Center  
P. O. Box 218 
Yorktown Heights,  New York 
U.S.A. 
I -~ , . : .v:"" '"~,~,, .  ,'* 
f~ , : . . . , , ,  . . . . .  : ..... . , .~, .~,, , \  
ABSTRACT 
The aut~nat ic  sentence  s t ruc ture  ana lys i s  p rocedure  descr ibed  
earl ier~'----has been programmed.  The fo rmal i sm is not t rans -  
fo rmat iona l ,  but is suf f i c ient ly  genera l  to permi t  the express ion  
of a wide var ie ty  of s t ruc tura l  mode ls .  It is now being used to 
obtain automat ic  s t ruc tura l  descr ip t ions  wh ich  are  very  c lose  to 
the "deep s t ructure"  s t ruc tura l  descr ip t ions  of t rans format iona l  
theory .  
The formalism will be described, and its use for various structural 
models will be illustrated. A detailed description of the reformula- 
tion of a transformational g rammar  of English in terms of the 
approximate formalism will be given. 
The salient features of the computer program which operates on 
the formalism will be described, and samples of output will be 
presented. 
(I) D@ Lieberman, "A Procedure for Automatic Sentence Structure 
Analysis". Paper presented at the 1963 Annual Meeting of the 
AMTCL,  Denver, Colorado, August 25-27, 1963. 
Lieberman,  Lochak and Ochel 
The ob ject ive  of the work  descr ibed  here in  is the deve lopment  
of a computer i zed  l ingu is t ic  bas is  for appl icat ion to pract i ca l  and 
theoret i ca l  p rob lems in automat ic  language process ing ,  The three  
main  par ts  of work  are:  1) a fo rmal i sm for express ing  grammat ica l  
in format ion ,  2) a sentence  ana lys is  p rocedure  based on the fo rmal i sm,  
and 3) a g rammar  of Eng l i sh  expressed  in te rms of the fo rmal i sm,  
but mot ivated  by t rans format iona l  theory ,  
The Formal i sm 
The formal i sm is not intended to represent any particular lin- 
guistic theory or model, but rather, as the name implies, is simply 
a vehicle for expressing various models? It is designed to be suf- 
ficiently restrictive to permit the development of an associated 
sentence analysis procedure, and at the same time, to be suffi- 
ciently flexible to permit the relatively straightforward representa- 
tion of most  current linguistic models and variants, such as IC 
analysis, dependency theory, context-free and context-sensitive 
phrase structure grammars ,  etc. The formal ism is not well adapted 
to the direct representation of transformational g rammars ,  but, as 
described below, can be used to obtain structural descriptions very 
close to the "deep structure" of a transformational description. 
In the present system, a structural description is a single 
labeled tree, with no further inherent restrictions (a sentence with 
multiple syntactic readings will have multiple trees, but each reading 
is represented by a single tree)? Further restrictions, such as 
projectivity for example, can be imposed by appropriate use of 
"condition statements" described below. 
Lieberman, Lochak and 0chei 
- 3 - 
The grammat ica l  information is expressed through the 
formation of a set of category or node types. This collection is 
Each  node type in the node dictionary has called a node dictionary. 
the following format: 
Field A - 
Field Bi - 
Field Ci - 
Field Cij - 
Field D - 
F ie ld  E - 
node type 
list of possible immediate ancestors 
(order irrelevant) 
list of possible immediate descendents 
(order irrelevant) 
lists of conditions associated with selection 
of the items in the corresponding Ci-fieldo 
Each  condition statement consists of a 
condition type and an appropriate number  
of tree addresses. Conditions are used to 
express restrictions such as word  order~ 
government, agreemeut, etc. The types 
of conditions presently in the program are 
described below. 
continuity (do all the lexical items dominated 
by this node type (Field A) occupy a con- 
tinuous segment  of the input string). 
blockage (list of node types blocked by the 
current node type). Each of the node types 
in the list may  be accompanied by a Tree 
Address, with the interpretation that nodes 
of the given type are blocked by the current 
node only if they are dominated by the node 
at the Tree Address. 
L ieberman,  Lochak  and Ochel 
- 4 - 
gram: 
F ie lds  Gi - subcategor i za t ion  features ,  
The fol lowing types of condi t ions  a re  now inc luded in the pro -  
Type A Format  A +- (Tree Address)  
Interpretation: The current branch (the Ci under which 
the condition occurs) requires either the presence (if + 
is used) or the absence (if - is used) of the node at the 
Tree Address.  
Type  B Format  i: B 
Interpretation: The current branch is optional 
Type B Format  2: B + (Tree Address)  
Interpretation: The current branch is optional only if the 
node at the Tree Address  is present (if + is used) or 
absent (if - is used)? 
Type DB Format  I: DB 
Interpretation: The current branch is optionally deletable@ 
Type DB Format  2: DB + (Tree Address)  
Interpretation: The current branch is optionally deletable 
only if the node at the Tree Address  is present (if + is 
used) or absent (if - is used) 
Type DD Format  i: DD 
Interpretation: The current branch is obligatorily 
de le tab le .  
Type DD Format  2: DD +- (T ree  Address}  
In terpretat ion :  The cur rent  b ranch  is ob l igator i l y  
de le tab le  only if the node at the Tree  Address  is p resent  
(if + is used) or absent (if - is used). 
L ieberman,  Lochak  and  0che l  
- 5 - 
Type G Format :  G i / j  (T ree  Address ) (T ree  Address )  
In terpreta t ion :  The  presence  of the cur rent  b ranch  re -  
qu i res  ident i ty  of  the features  at  subf ie ld  i of  the  G- f ie ld  
of  the  node  at  the f i r s t  T ree  Address  and  subf ie ld  j of the  
G f ie ld  of  the node  at the  second Tree  Address .  
Type  H Format :  H (T ree  Address )  (T ree  Address )  
In terpreta t ion :  The  lex ica l  i tem at the f i r s t  T ree  Address  
must  p recede  the lex ica l  i tem at  the  second Tree  Address .  
If e i ther  of  the Tree  Addresses  does  not  po in t  to a lex ica l  
i tem,  the cond i t ion  s ta tement  is in  e r ror .  
Type  S Format :  S 
In terpreta t ion :  The  cur rent  b ranch  is se l f  sa t i s fy ing ,  i .e .  
it is not  a lex ica l  i tem but  has  no descendents .  Th is  con-  
d i t ion  is used ,  fo r  example ,  w i th  sentence  boundary  
branches .  
In add i t ion  to the above  cond i t ion  types ,  a spec ia l  dev ice  is 
used  to ind icate  that  a group  of poss ib le  descendents  of  a g iven  node  
are  mutua l ly  exc lus ive .  When on ly  two branches  are  invo lved ,  a 
Type  A - cond i t ion  can  be used ,  but  when more  than  two branches  
are  invo lved ,  the  use  of Type  A - cond i t ions  becomes  awkward .  
The  Sentence  Ana lys i s  ' P rocedure  
A cent ra l  feature  of  any  automat ic  sentence  s t ruc ture  ana lys i s  
p rocedure  is the  manner  in wh ich  syntact i c  ambigu i ty  is hand led  
dur ing  the process ing .  Even  syntact i ca l ly  un ique  sentences  wi l l ,  
dur ing  the  process ing ,  exh ib i t  mu l t ip le  potent ia l i t ies .  The  fo r -  
ma l i sm fo r  hand l ing  such  in termed ia te  representat ions  is a very  im-  
por tant  par t  of  the heur i s t i c  capac i ty  of  the program.  In the  present  
L ieberman,  Lochak and Ochei 
- 6 - 
system,  a compact graph- l ike  s t ructure  is used for in termediate  
representat ion .  At the end of the ana lys is ,  al l  syntact ic  readings of 
the sentence are represented  by a single graph with appropr ia te ly  
marked condit ions on its ver t ices  and edges. A specia l  output a lgor i thm 
is requ i red  to extract  the syntact ica l ly  permi t ted  t rees  f rom the compact  
graph representation. 
The scanning sequence (single-pass, iterative, multipass, 
left-to-rlght, right-to-left, chunk and process, etc? ) has been made 
a semi-independent component of the procedure in order to permit 
flexibility in the future application of theoretically or heuristically 
motivated approaches to search strategy? In the present version of 
the system, a left-to-right single-pass search strategy is used. 
This very simple search strategy was chosen as a start in order to 
permit concentration on the complexities in the other parts of the 
procedure. 
The sentence is analyzed one item at a time f rom left to right. 
The items on which the analysis procedure operates are not the 
orthographic words, but rather, the result of a dictionary lookup 
step which includes some morphophonemic  analysis. Thus, went 
would be analyzed into go + ~ painted would be analyzed into 
paint +past  or e n, etc. The dictionary lookup step would also 
yield, for each item, the node type or types (A-field) of which the 
item is a descendent, and subcategorization features to be placed 
in the corresponding G-fields. Thus, after dictionary lookup, the 
input sentence would be replaced by a string of nodes? These nodes are 
the items which are processed one at a time, left-to-right. 
The following sketch of the analysis procedure is intended to 
indicate current status; numerous  details are omitted? 
Lieberman, Lochak and Ochel 
- 7 - 
Suppose  d ic t ionary  lookup y ie lded  the  fo l low ing  s t r ing  of  nodes :  
A l l  poss ib le  immediate  ancestors  of  X ( l i s ted  in i ts  B - f ie ld )  a re  bu i l t  
up.  Thus ,  i f  the  B - f ie ld  of  node  X conta ined  
B1 P 
B2 Q 
B3 R 
the  fo l low ing  s t ruc ture  wou ld  resu l t  
and branches PX, QX and RX would be marked as mutually exclusive 
in any  one read ing  of  the  sentence .  Then ,  in the  same manner ,  a l l  
poss ib le  ancestors  of  node  P wou ld  be fo rmed,  and  the  bu i ld ing  upward  
process  wou ld  cont inue  unt i l  a spec ia l  node  type  w i thout  ancestors  
( the root  of  the  t ree)  was  reached.  If the  grammar  permi ts  recurs ion ,  
some method  fo r  p revent ing  in f in i te  depth  must  be in t roduced .  At  
p resent ,  we use  an  input  parameter  n wh ich  l im i ts  the  number  of  new 
nodes  of  any  one  type  on a s ing le  ancestor  s t r ing  to no As w i l l  be -  
come c learer  b~=low, th i s  does  not  l im i t  the to ta l  recurs ion  in a 
sentence  to no 
At  th i s  po in t ,  we have  a s t ruc ture  of  the  fo rm:  
L ieberman,  Lochak  and  0che l  
- 8 - 
~-~OOT ! 
? / 
I I 
\ /  
where  the nodes  have  been  ass igned  numbers  fo r  conven ience  of 
re fe rence  here in .  In the  ac tua l  p rocess ,  they  wou ld ,  of  course ,  be 
spec i f i c  node  types .  
Next ,  the new nodes  w i thout  ancestors  a re  bu i l t  upward  sys -  
temat ica l lyo  The  end  resu l t  ( syntact i c  read ings  of  the  sentence)  
shou ld  not  depend on the  sequence  used .  The  sequence  we are  now 
us ing  was  chosen  fo r  p rogramming conven ience .  It is not  per fec t ly  
c lear  that  the end  resu l t  is in  fac t  independent  of  the  sequence ,  but  
there  are ,  as yet ,  no ind icat ions  to the  cont rary .  In the  sequence  we 
are  now us ing ,  node  2 wou ld  be bu i l t  upward  next .  If new nodes  
w i thout  ancestors  were  fo rmed,  they  wou ld  be processed  next .  When 
process ing  of node  2 and  i ts  ancestors  is completed ,  node  5 is bu i l t  
upward  s imi la r ly ,  then  node  7, 8, Q and  R in that  o rder .  
L ieber rnan ,  Lochak  and  Oche l  
- 9 " 
Dur ing  the  bu i ld ing  upward  of  the very  f i r s t  ancestor  s t r ing  
X -P -6 -4 -3 -1 -ROOT,  there  was  no cho ice  but  to cont inua l ly  c reate  
new nodes  to serve  as  the  requ i red  ancestors .  However ,  in sub-  
sequent  bu i ld -ups ,  a requ i red  ancestor  node  type  may a l ready  ex is t ,  
in wh ich  case  it  is  used ,  p rov id ing  that  it  doesn ' t  resu l t  in a node  dom-  
inat ing  i t se l f .  If two or  more  nodes  share  a common ancestor ,  the  
cor respond ing  branches  are  marked  as  mutua l ly  exc lus ive  even  if the  
descendent  node  types  are  d i f fe rent  and  compat ib le  f rom the  po in t  o f  
v iew of the ancestor  node  (i. e. they  a t tach  to d i f fe rent  par ts  of  the  
ancestor ' s  C - f ie ld ) ,  because  we are  s t i l l  cons ider ing  the  bu i ldup  of 
a s ing le  i tem,  node  X, wh ich  cou ld  not  serve  as two const i tuents  
s imu l taneous ly  in  any  g iven  syntact i c  read ing  of the  sentence .  
Fo l low ing  complet ion  of  the bu i ld ing  up of  node  X, the re -  
su l tant  s t ruc ture  is scanned fo r  c losed  branches .  A branch  is ca l led  
c losed  i f  a l l  read ings  of  a sentence  requ i re  the  presence  of  that  b ranch .  
The  tes t  fo r  whether  a branch  is c losed  is whether  remova l  of the 
branch  wou ld  complete ly  d i sconnect  node  X f rom the  root?  For  
example ,  in  the  ?o l lowlng  s t ruc ture :  
L ieberman,  Lochak  and Ochel  
-10 -  
b ranches  U-T  and P -X  are  c losed .  C losed  branches  are  marked  
accord ing ly .  
A node with a c losed  branch  is ca l led  def in i te .  If a node is 
not def in i te,  it is ca l led  potent ia l .  This nomenc la ture  wi l l  be used 
below. 
The next step is the tes t ing  of the condi t ions assoc ia ted  with 
the var ious  branches  es tab l i shed  ur ing  the bui ldup.  The condit ions 
to be tes ted  for  a g iven branch  are  l i s ted  in the cor respond ing  par t  of 
the C- f ie ld  of the node f rom which  the branch  descends .  Since the 
resu l t s  of condi t ion  test ing  depend on b lockage,  wh ich  has not yet  
been d iscussed ,  a deta i led  descr ip t ion  of condi t ion tes t ing  wi l l  be 
postponed unti l  p rocess ing  of the next ~em (one which  is not the 
le f tmost  i tem) is cons idered .  
After  condi t ion  test ing,  b lockages  are  appl ied.  There  are  two 
types of b lockage - permanent  and temporary ,  and each  type can be 
def in i te or potent ia l .  The in fo rmat ion  caus ing b lockage is in the 
D- f ie ld  and the E - f ie ld  of each  node type. The D- f ie ld  is used  to in-  
dicate whether or not the node is continuous, i.e. whether the lexlcal 
items dominated by the node occupy a continuous segment of the input 
string. Each of the continuous nodes created during the building up 
process causes temporary  blockage to be applied to every node which 
it does not dominate. If the node causing blockage is definite, the 
blockage is definite; if the node causing blockage is potential, the 
blockage is potential. When a node causes temporary  definite blockage 
a list is kept, at the node causing blockage, of all the temporary  
blockages caused by that node. Later, when the node causing blockage 
has been filled with the required constituents, the blockage it caused 
Lieberman, Lochak and Ochei 
-11  - 
is removed. In the case of temporary  potential blockage, a similar 
list is created and, in addition (for reasons described below), a 
record of the node causing blockage is made at each blocked node. 
The next blockage action involves permanent  blockage (both 
definite and potential) and is guided by information in the E-fields of 
the various nodes created during the building up process? However,  
we  are still discussing the processing of the very first (leftmost) 
item in the input string, and in this case, permanent  blockage does 
not apply. Permanent  blockage action will be described below when 
processing of the next input item is considered. 
This completes processing of the first item, and we proceed 
to the next input item. The same building up process is carried out, 
except that now, a node (other than the root of the tree) required as 
an ancestor may already exist? In this case, the existing node is 
used as the ancestor, providing that: I) it is not definitely blocked, 
and 2) the required branch is not closed? If the existing node is 
potentially blocked, a connection is made, but the connection and the 
node which caused the potential blockage are marked  as mutually 
exclusive in any one reading of the sentence. This is why  (as 
described above) a record of the node causing potential blockage is 
kept at the potentially blocked node. If a connection is made to a 
potentially blocked node, alternative ancestors are also created 
since (as described below) the potential blockage may later be 
changed, retroactively, to definite blockage and the previously made 
connection would be erased. 
It can now be seen why  (as mentioned above) the recursion 
parameter  n does not limit the total recursion in a sentence to n? 
Lieberman, Lochak and Ochel 
-12 -  
The recursion parameter  limits the number  of ne___w nodes of a given 
type which can be created along an ancestor string during the building 
up of a given input item. Thus, in the building up of item 2, for 
example, n nodes of a given type mat  be created along an ancestor 
string and the string may then be connected to an already existing 
node which in turn may have had n nodes of the given type created 
along its ancestor string. 
Af ter  the  bu i ld ing  up of  i tem 2 is completed ,  c losed  branches  
are  marked  on the  newly  c reated  s t ruc ture  as  was  done  in the  process -  
ing of  i tem 1. However ,  in the  case  of i tem 2 and  subsequent  i tems,  
fu r ther  ac t ion  is taken .  If a b ranch  marked  c losed  had  a l so  been  
prev ious ly  (dur ing  the bu i ld ing  up) marked  as mutua l ly  exc lus ive  
w i th  some other  b ranch ,  the o ther  b ranch  is e rased .  
Whenever  a branch  is e rased ,  a rout ine  ca l led  CLEANUP is 
b rought  in to  ac t ion .  Th is  rout ine  fo l lows  up  a l l  the  consequences  of  
e ras ing  a branch ,  and  c leans  up the  s t ruc ture  accord ing ly .  For  
example ,  i f  the  branch  be ing  erased  is marked  as  a necessary  co -  
occur rence  of some other  b ranch ,  the  o ther  b ranch  is a l so  e rased .  
If the branch  be ing  erased  is the  so le  ancestor  of  some node ,  that  
node  is e rased ,  i .e .  a l lo f  i ts  b ranches  are  e rased .  If a b ranch  
be ing  erased  is an  ob l igatory  const i tuent  of  some permanent ly  
de f in i te ly  b locked  node ,  and  there  are  no compet ing  branches  
represent ing  that  const i tuent ,  the  node  is e rased .  Dur ing  c leanup,  
a b ranch  wh ich  was  not  p rev ious ly  c losed  may become c losed ,  thus  
mak ing  some prev ious ly  potent ia l  node  de f in i te .  If the  node  in quest ion  
caused  b lockage  at the  t ime it  was  c reated ,  the  b lockage  wou ld  have  
been  potent ia l .  The  b lockage  is now m~de def in i te  re t roact ive ly .  
L ieberman,  Lochak  and Ochel 
-13  - 
This is the purpose  of the bookkeeping descr ibed  above regard ing  
connect ions  made into potent ia l ly  b locked nodes.  A record  was kept 
of al l  b ranches  connected  into potent ia l ly  b locked nodes .  When a par t i c -  
u lar  potent ia l  b lockage becomes  def in i te,  the cor respond ing  marked  
branches  are  e rased .  Or, c leanup may operate  in the reverse  
direction. If a branch which had been connected into a potentially 
blocked node becomes  closed during cleanup, the node which caused 
the blockage is erased. 
The above account of cleanup is not meant  to be exhaustive, 
but s imply to describe the main  features of the CLEANUP routine. 
The cleanup routine may run into a contradiction. For  
example, a definite node or a closed branch might be marked  for 
erasure. When this happens, the analysis is terminated, and the 
sentence is labeled "non-grammat ica l"o  
Returning to the main  routine (CLEANUP is a subroutine 
used repeatedly during the main  routine), the next step is condition 
testing. Each  of the conditions listed in the various newly created 
node Ci-fields which received candidates are tested. The  result of 
a condition test is YES ,  NO, or UNTESTABLE.  YES  means  the 
condition is satisfied, NO means  the condition is violated, and 
UNTESTABLE means  that the condition was  untestable because one 
or more  of the nodes involved in the condition did not exist at the 
time the condition was  tested. 
If the result of a condition test is YES ,  no further action is 
taken. If the result is NO~ the subsequent action depends on the 
status of the various branches involved in the test. If none of the 
branches (including the one under which the test is listed) are 
L ieberman,  Lochak  and  0che l  
14 -  
c losed ,  they  are  marked  as mutua l ly  exc lus ive .  If the branch  under  
wh ich  the tes t  is  l i s ted  is c losed  and  the  o ther  b ranches  invo lved  in 
the tes t  a re  not ,  the  la t te r  a re  e rased .  If both  are  c losed ,  
the ana lys i s  is te rminated  and  the sentence  is labe led  "non-gram-  
mat ica l " .  The  erasures  a re  car r ied  out  by  the  CLEANUP rout ine  
and  a l l  consequences  of  each  erasure  are  fo l lowed up as  descr ibed  
above .  
A few UNTESTABLE resu l t s  can  be ac ted  upon.  For  example ,  
i f  a cond i t ion  on X is that  it  fo l low Y, and  Y does  not  ex is t ,  the re -  
su l t  is equ iva lent  to a NO resu l t .  However ,  w i th  most  cond i t ion  tes ts  
resu l t ing  in UNTESTABLE,  no immediate  ac t ion  is taken .  A l i s t  of 
such  events  is kept  and  the tes ts  a re  reapp l ied  a f te r  the  las t  i tem in 
the sentence  is p rocessed .  It is ,  of course ,  h igh ly  des i rab le  to 
reapp ly  prev ious ly  untes tab le  cond i t ions  the moment  they  become 
tes tab le .  Methods  fo r  accompl i sh ing  th i s ,  w i thout  pay ing  so h igh  a 
pr i ce  in mach ine  t ime and/or  space  that  the advantages  are  nu l l i f i ed ,  
a re  be ing  cons idered ,  but  at th i s  po in t  in the  work  a re  not  of  the 
h ighest  p r io r i ty ,  because  the end  resu l t  ( the s t ruc tura l  descr ip t ion)  
shou ld  depend on ly  on the co l lec t ion  of cond i t ions  and  not  on the order  
in wh ich  they  are  app l ied .  Th is  and  o ther  p rob lems concerned  
pr imar i l y  w i th  mach ine  runn ing  t ime w i l l  rece ive  inc reased  
emphas is  in the fu ture .  
Cont inu ing  w i th  the  main  cyc le ,  the  next  s tep  is app l i ca t ion  
of  b lockage .  F i r s t ,  temporary  b lockage ,  as  ind icated  by the  D- f ie lds  
of  the  newly  c reated  nodes ,  is app l ied  to a l l  re levant  nodes ,  both  
newly  c reated  and  prev ious ly  ex is t ing .  The  procedure  is the same as  
in the case  of  the  f i r s t  input  i tem.  
Lieberman, Lochak and Ochel 
-15 -  
Next, permanent  blockage, as indicated by the E- f ie lds  of the 
newly created nodes, is applied. The procedure is similar to that 
used for applying temporary  blockage, the essential difference being 
that blockage is applied only to previously existing nodes, and not to 
newly created nodes. This explains why  permanent  blockage did not 
apply during the processing of the first item -- there were no pre- 
viously existing nodes, only newly created nodes? In the actual 
program, it was convenient to allow permanent blockage to be applied 
during the processing of the first item, but the result is, of course, 
VACUOUS.  
Application of permanent  blockage provides possibilities for 
cleanup which do not occur in the case of temporary blockage. If a 
node is marked  permanently definitely blocked, it is checked to see 
whether it contains all of its non-deletable obligatory branches. If 
it does not, it is m~rked  for erasure and the CLEANUP subroutine 
goes into action. 
This completes the processing of item 2. The next and sub- 
sequent input items are processed similarly, until the final item, 
representing end of sentence, is reached. This item has only one 
possible ancestor (the special node at the root of the tree) and its 
E-field lists all node types. Thus, it permanently and definitely 
blocks all nodes? When all of these blockages have been applied and 
the resulting cleanups have been carried out, the analysis is com-  
pleted, and we proceed to the output routine. 
The purpose of the output routine is to print out, explicitly, 
each of the possible syntactic readings of the sentence assigned by 
the analysis procedure? The individual readings are not explicit at 
L ieberman,  Lochak  and Ochei  
-16 -  
the end of the ana lys i s  rout ine  because  they are  al l  represented  by a 
s ingle  compact  graph- l i ke  s t ruc ture  with dependenc ies  ( requ i red  co-  
occur rence  and mutua l  exc lus ion)  marked  on var ious  branches .  The 
output rout ine  scans  the graph- l i ke  s t ruc ture  sys temat ica l ly  and 
pr in ts  out al l  t rees  wh ich  sat i s fy  the marked  dependenc ies ,  have the 
spec ia l  root  node as the i r  root,  and in which  each  input i tem appears  
once and only once as a leaf .  
The resu l t s  a re  pr in ted  out in a t ree  fo rmat .  As a compromise  
between readab i l i ty  and mach ine  conven ience ,  the t ree  is ro ta ted  
counterc lockwise  through 90 ? , and the const i tuents  of each  node are  
jus t i f ied  upwards  (af ter  rotat ion)  to the leve l  of that node.  Thus,  the 
usua l  fo rm of a t ree ,  such as 
A 
B 
E F /,,, 
G H 
C D 
I J K P 
L M 
I 
N 
would appear  in the fo l lowing output format :  
A D P 
K 
C 3" 
I 
B F 
E 
M 
L 
H 
G 
N 
L ieberman,  Lochak  and Oche l  
-17-  
The prob lem of l in ing symbols  up proper ly  is s imp l i f ied  by our  re -  
qu i rement  that  al l  symbo ls  be f ive or  less  characters  long.  
As ind icated  above  in the descr ip t ion  of the types  of cond i t ions  
cur rent ly  used ,  a d i s t inc t ion  is made between opt iona l  and de le tab le  
const i tuents .  The essent ia l  d i f fe rence  is that  a de le ted  const i tuent  
shou ld  be f i l led  in if the s t ructura l  descr ip t ion  is to be a reasonab le  
approx imat ion  to deep s t ructure .  For  example ,  the sub jec t  or  ob jec t  
in a re la t ive  c lause  is de le ted  in the sur face  s t ructure ,  but can  be 
f i l led  in in the deep s t ructure  by copy ing  the noun in the noun phrase  
whose  determiner  conta ins  the sentence  wh ich  is re la t iv i zed .  Or,  if 
the agent  in a pass ive  sentence  is de le ted  in the sur face  s t ructure ,  it 
can  be f i l led  in at leas t  by an indef in i te  such  as someone or  some-  
th ing in the deep s t ructure .  At p resent ,  our  output  only  ind icates  
that  a de le ted  const i tuent  ex is ts  in the deep s t ructure ,  but we have  
not yet  fo rmulated  and programmed the ru les  for  f i l l ing in such  
const i tuents .  These  ru les  a re  a l so  needed dur ing  the ana lys i s  to 
permi t  cond i t ion  tes t ing  where  de le ted  i tems are  invo lved .  At 
p resent ,  if a cond i t ion  tes t  tu rns  out to invo lve  a de le ted  i tem,  the 
tes t  is ignored .  
The Grammar  
An overview of the grammatical categories (node types) and 
the i r  re la t ions  in s t ructura l  descr ip t ions  is g iven  in F igure  1. Most  
of the under l ined  symbols  a re  pre - lex ica l  i tems,  but some ( those  
beg inn ing  wi th  S) wi l l  be expanded la ter .  The over l ine  on some of 
the symbols  is used  to ind icate  that  they  are  expanded e lsewhere  in 
the d iagram.  An example  of a node type and its assoc ia ted  fi 'elds 
Lieberman, Lochak and Ochel 
-18 -  
is given in Figure Z in the fo rm in which we work  with the grammar .  
Each  line is on a separate punched card. 
The collection of categories was taken, for the most  part, f rom 
the phrase structure portion of a transformational g rammar  of English 
being developed at IBM. Some additional categories such as SREL ,  
SMNL,  SFT,  SPT  and SCOND were introduced to simplify condition 
statements using the current set of condition types. As more  condition 
types are formulated and incorporated into the program, these 
additional and essentially redundant categories may be eliminated. 
Symbols  beginning with X have no descriptive significance. They 
were  also introduced as a temporary  expedient to overcome certain 
defects in the present formalism, and will be eliminated when the 
formal ism is appropriately modified. If these structurally super- 
fluous nodes cause too much clutter in the output, they can be 
eliminated by simply erasing each one and connecting its immediate 
descendents to its ancestor as each tree is printed out. 
The present grammar  is very far f rom complete, in any sense 
of the word. The category types are reasonably extensive, but only 
a smattering of conditions are present, and these were  selected 
mainly to test various portions of the program as they were 
completed. However,  problems encountered thus far in using the 
formal ism to express grammatica l  information have been solved 
without undue difficulty. 
Some samples of output, and details regarding the programming 
will be presented during one of the informal afternoon group meetings. 
Lieberman, Lochak and Ochel 
-19-  
x 
~J 
,0. 
N 
I~  r 
.J 
c( 
"-~,j 
Lieberman, Lochak and Ochel 
- ZO - 
SREL 
XSREL 
PRE-S 
NP 
AUX 
VP 
POSTS 
SREL 
B 
A -(CICI)  
DD +(C~C2C3C2C1CII 
H C2C2i (C3CI I  
H C2C21(C&C2CII 
BIB IB331C2) (C2  
H C3C!)1C4C2} 
3~E- 
SR?L. 
~REL 
S~E~ 
~R-L 
S~EL 
SREL 
S~:L 
SREL 
SRmZL 
3,~riL 
SREL 
SREL 
$REL 
SREL 
SREL 
Figure 2 
f 
