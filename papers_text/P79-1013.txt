The Use of Ooject-Specl flc Knowledge in  Natural Language Processing 
Mark H. Bursteln 
Department of Computer Science, Yale University 
1. INTRODUCTION 
it is widely reco~nlzed that the process of 
understandln~ natural language texts cannot be 
accomplished without  accessin~ mundane Knowledge about 
the world \ [2 ,  4, 6, 7\]. That is, in order to resolve 
ambiguities, form expectations, and make causal 
connections between events, we must make use of all 
sorts of episodic, stereotypic and factual knowledge. 
In  this paper,  we are concerned with the way functional 
knowledge of objects, and associations between objects 
can be exploited in an understandln~ system. 
Consider the sentence 
(1)  Jonn opened the Oot t le  so he could pour the wine.  
Anyone read in~ this sentence makes assumptions about 
what happened which go far beyond what is stated. For 
example, we assume without hesitation that the wine 
beln~ poured came from inside the bottle. Although this 
seems quite obvious, there are many other 
interpretations wnlcn are equa l ly  va l id .  Jonn could be 
fillin~ the bottle rather than emptyln~ the wine out of 
i t .  In fac t ,  it need not be t rue  that  the wine ever  
contacted the bottle. There may have been some other 
reason Jonn had to open the bottle first. Yet, in the 
absence of a larger context, some causal inference 
mechanism forces us (as human understanders) to find the 
common interpretation in the process of connecting these 
two events causally. 
In interpreting this sentence, we also rely on an 
understanding of what it means for a bottle to be 
"open" .  Only by usin~ Knowledge of what is poss ib le  
when a bot t le  I s  open are able we understand why John 
had to  open the Pot t le  to  pour the wine out  o f  I t .  
Stron~ associations are at work here nelpin~ us to make 
these connections. A sentence such as 
(2) John closed the bottle and poured the wine. 
appears to be self contradictory only because we assume 
that the wine was in the bottle before applyln~ our 
knowledge of open and closed bottles to the situation. 
Only then do we realize that closing the bottle makes it 
impossible to pour the wine. 
Now cons ider  the sentence 
(3) John turned on the faucet and filled his glass. 
When reading this, we immediately assume that John 
filled his glass with water from the faucet. Yet, not 
only is water never mentioned in the sentence, there is 
nothing there to explicitly relate turning on the faucet 
and filling the glass. The glass could conceivably be 
filled with milk from a carton. However, in the absence 
of some greater context which forces a different 
interpretation on us, we immediately assume that the 
glass is being filled with water from the faucet. 
Understanding each of these sentences requires that we 
make use of associations we have In memory between 
oPJects and actions commonly InvolvlnE those objects, as 
? This  wore was supported in  par t  by the Advanced 
Research Pro jec ts  Agency o f  the Department o f  Defense 
and moni tored by the Of f i ce  o f  Naval Research under 
cont ra : t  N0001~-75-C-1111. 
well as relations between several different objects. 
This paper describes a computer program, OPUS (Object 
Primitive Understanding System) which constructs a 
representation of the meanings of sentences such as 
those above, including assumptions that  a human 
unders tander  would normal ly  make, by access in~ these 
types of associative memory structures. This 
stereotypic knowledge of physical objects Is captured in 
OPUS using Object Primitives \[5\]. Object Prlmitlves 
(or) were designed to act in conjunction with Scnank's 
conceptua l  dependency representat iona l  system \ [11 \ ] .  The 
processes developed to  perform conceptua l  ana lys i s  in  
OPUS invo lved  the in tegrat ion  o f  a conceptua l  ana lyzer  
s imi la r  to RlesOec~'s ELl \ [g \ ]  w i th  demon- l i ke  procedures 
for memory interaction and the introduction of 
object-related inferences. 
2. OBJECT PRIMITIVES 
The primary focus In this research has been on the 
development of processes which utillze I n fo rmat ion  
prov ided  by Ob ject  P r imi t ives  to  fac i l i ta te  the  
"comprehens ion"  o f  natura l  language texts  by computer .  
That Is, we were primarily concerned with the 
i n t roduct ion  of s tereotyp lc  knowledge of objects into 
the conceptua l  ana lys i s  o f  text. By encoding 
in format ion  in OP descr ip t ions ,  we were ab le  to increase 
the interpretive power of the analyzer in order to 
handle sentences of the sort discussed earlier. 
What fo l lows  I s  a br ie f  descr ip t ion  o f  the seven Object  
P r imi t ives .  A more thorough d iscuss ion  can be found in  
\[5\]. For those unfamiliar with the primitive acts of 
Schank's conceptual dependency theory, discussions of 
wnlch can be found in \[10,11\]. 
The Object  P r imi t ive  CONNECTOR Is  used to  ind icate  
classes of actions (described in te rms o f  Sohank*s 
primitives acts) which are normally enabled by the 
ob ject  being descr ibed .  In  par t i cu la r ,  a CONNECTOR 
enables ac t ions  between two spat ia l  reg ions .  For 
example, a window and a door  are both CONNECTORs which 
enable mot ion (PTRANS) o f  ob jec ts  through them when they  
are open. In  add i t ion ,  a window Is  a CONNECTOR which 
enables the action ATT?ND eyes (see) or MTRANS 
(acquisitlon of Information) by the instrumental action 
AI"rEND eyes .  These  act ions  are  enabled regard less  of  
whether the window i s  open or  c losed .  That I s ,  one can 
see through a window, and there fore  read or  observe 
th ings  on the o ther  s ide ,  even when the window i s  
c losed .  In  the examples d iscussed above, the  open 
bot t le  l s  g lven  a CONNECTOR descr ip t ion ,  rn i s  w i l l  be 
discussed fu r ther  la ter .  
A SEPARATOR d isenab les  a t rans fer  between two spat ia l  
reg ions .  A c losed  door  and a c losed  window are  both  
SEPARATORs which dlsenable the motion between the 
spatial regions they adjoin. In addition, a closed door 
is a SEPARATOR which dlsenables the acts MTRANS by 
A~END eyes (un less  the door i s  t ransparent )  o r  ears .  
That I s ,  one is  normal ly  prevented  from seeing or  
hear ing  through a c losed  door .  S imi la r ly ,  a c losed  
window i s  a SEPARATOR wh ich  d lsenab les  MTRANS wi th  
Ins t rument  ATTENO ears ,  a l though,  as  ment ioned aoove ,  
one can  s t i l l  see through a c losed window to the o ther  
s ide .  A c losed bot t le  i s  another  example o f  an ob jec t  
with a SEPARATOR descr ip t ion .  
I t  shou ld  be c lear  by now that  ob jec ts  de ,br ibed  us ing  
Ob ject  P r imi t ives  are  not  genera l ly  descr ibed  by a 
s ing le  pr imi t ive .  In  fac t ,  not  one out severa l  sets  o f  
53 
pr imi t ive  descr ip t ions  may be requ i red .  This Is  
i l l us t ra ted  above by the combinat ion o f  CONNECTOR and 
SEPARATOR descr ip t ions  requ i red  For a c losed window, 
whi le a somewhat different set Is requ i red  For an open 
window. These sets of descriptions form a small set of 
"states" which the object may Oe in, each state 
corresponding to a set of inferences and asSociations 
approriate to the object in that condition. 
A SOURCE descr ip t ion  ind icates  that  a aa jo r  funct ion  o f  
the ob jec t  descr ibed i s  to prov ide the user o f  that  
ob jec t  w i th  some other  ob jec t .  Thus a Faucet is a 
SOURCE o \ [  water ,  a wtne bot t le  l s  a SOURCE of  wine,  and 
a lamp i s  a SOURCE of  the phenomenon ca l led  l ight .  
SOURCEs o f ten  requ i re  some sor t  o f  ac t ivat ion .  Faucets  
must be turned on, wine bot t les  must be opened, and 
lamps are e i ther  turned on or l i t  depending on whether 
or not they are e l sc t r Jo .  
The Object Frlmltlve CONSUMER Is used to describe 
objects whose pr imary  Funct ion Is  to cons, me other  
objects. A trash can is a CONSUMER of waste paper, a 
dra ln  i s  a CONSUMER o f  l iqu ids ,  and a mai lbox ts  a 
CONSUMER o f  mai l .  Some ob jec ts  a re  both SOURCEs and 
CONSUMERS. A pipe is a CONSUMER of tobacco and a SOURCE 
of smoke. An Ice cube t ray  Is a CONSUMER of water and a 
SOURCE of ice cu~es. 
Many ob jec ts  can be descr ibed  In par t  by re la t ionsh ips  
that they assu~e with some other ob jec ts .  These 
re la t ions  a re  descr ibed  ustn~ the Object  P r imi t ive  
RELATZONAL. Containers, such as bottles, rooms, cars, 
etc . ,  have as par t  o f  the i r  descr ip t ions  a conta inment  
re la t ion ,  which may spec i fy  de fau l t s  For the type o f  
ob jec t  conta ined .  Objects, such as tab les  and chairs, 
wnloh are commonly used to support  o ther  ob jec ts  w i l l  be 
descr ibed with a suppor t  re la t ion .  
Objects such as bu i ld ings ,  cars ,  a i rp lanes ,  s to res ,  
e tc . ,  are a l l  th ings  which can conta in  people.  As such,  
they are  o f ten  d i s t ingu ished  by the  ac t iv i t ies  which 
people  in  those  p laces  engage in .  One impor tant  way OF 
encoding those  ac t iv i t ies  i s  by re fer r ing  to the  sc r ip ts  
which descr ibe  them. The Object  P r imi t ive  SETTING i s  
used to capture the asscclatlons between a place and any 
scr ip t - l i ke  act iv i t ies  that normal ly  occur there .  It 
can also be used to ind icate  o ther ,  re la ted  SETTINGs 
which the ob jec t  may be a par t  o f .  For example, a 
d in in~ car has a SETTING description wlth a llnK both to 
the restaurant script and to the SETTING For passenger 
t ra in .  This  in fo rmat ion  Is important  For the 
estab l i shment  OF re levant  contexts ,  g iv ing  access to 
many domain spec l / l c  expectat ions  which w l l l  
subsequent ly  be ava i lab le  to gu ide  processtn~ ~oth 
dur ing  conceptua l  ana lys i s  of  lex ica l  input  and when 
making InFerences at higher levels oF nognt t tve  
processing. 
The Final Object P r imi t ive ,  GESTALT, i s  used to 
character i ze  ob jec ts  which have recogn izab le ,  and 
separable, eubparts. " Trains, hi-Fi systems, and 
Kitchens,  a l l  evoke Images o f  ob jec ts  charaoter l zab le  by 
describing their subparts, and the way that those 
subparts re la te  to fOrm the whole. The OcJect P r imi t ive  
GESTALT is used to capture this type of  description. 
Using thls set of  prlmltlves as the Foundat ion For a 
memory representat ion ,  we can construct a more general  
h i -d i rec t iona l  assoc ia t ive  memory by in t roduc ing  some 
assoc ia t ive  l i nks  externa l  to ob jec t  pr imi t ive  
decompos i t ions .  For example,  the conceptua l  descr ip t ion  
o f  a wine bot t le  w i l l  Inc lude  a SOURCE descr ip t ion  For a 
bot t le  where the SOURCE output  i s  spec i f ied  as wine. 
This amounts to an assoc ia t ive  l ink  From the concept OF 
a wine bot t le  to the concept o f  wine. But how can we 
construct an assoolatlve llnK From wlne back to wlne 
bot t les?  ~lne does not have an ob jec t  p r imi t ive  
decomposition wnloh i nvo lves  wine bottles, so we must 
resor t  to some const ruct ion  which Js externa l  to ob jec t  
pr imi t ive  decompOs i t ions .  
Four assoc ia t ive  l inks  have been proposed \ [5 \ ] ,  each o f  
which pOints  to a par t i cu la r  ob jec t  p r imi t ive  
descr ip t ion .  For the  problem of  wine and wine Dot t les ,  
an assoc ia t ive  OUTPUTFROH l ink  i s  d i rec ted  from wlne to 
tne SOURCE descr ip t ion  o f  a wine bot t le .  Th is  externa l  
l ink  prov ides  us wi th an assoc ia t ive  l ink  From wine to  
wine bot t les .  
3. I~U~ROORAM 
I w i l l  now descr ibe  the process ing ot two sentences very  
s imi la r  to those d i scussed  ear l ie r .  The computer  
program (OPUS) which performs the Fo l lowing analyses was 
developed usin~ a con :eptua l  ana lyzer  wr i t ten  by Lar ry  
Eirnbaum \ [1 \ ] .  OPUS was then extended to inc lude  a 
capac i ty  For se t t ing  up and F i r ing  "demons" o r  
. t r iggers"  as they are ca l led  In K~L \ [3 \ ] .  The 
Funct ion ing o f  these demons w i l l  be I l lus t ra ted  below. 
3.1 THE INITIAL ANALXSIS 
In the process ing o f  the sentence "Jo~n opened the 
bot t le  so he could pour the wine,"  the phrase "John 
opened the bot t le , "  i s  analyzed to produce the Fo l lowin~ 
representat ion :  
SJohne : eDOe 
resu l t  
ehot t lee  CONNECTOR 
ENABLES 
?HUMO <:> PTRANS ~- ?OBJ <--~>-- 
?X 
L .  < (INSIDE SELF) 
(or) 
> ( INSIDE SELF) r -  
PTRANS <- ?OBJ <-~ ?HUMO <=> L -  < ?? 
(or) 
?HUMO <=> A'r'rzSD <. ?S?NS? <--E~ ?OBJe 
? (where ?OBJ Is  ins ide  SELF) 
Here 3ELF re fers  to the ob jec t  bein~ descr ibed ( the  
bot t le )  and ? - - -  ind icates  an unf i l l ed  s lo t .  eJohne 
here stands For the in terna l  memory representat ion  For a 
person wlth the name John. Memory tokens ro t  John and 
the bot t le  are const ructed by a general  demon which is 
t r tg&ered  dur ing conceptual  ana lys i s  whenever a PP ( the 
in terna l  representat ion  For an ob jec t )  i s  In t roduced.  
OF descr ip t ions  are attached to each ob jec t  token.  
This dtagrem represents  the asser t ion  that  John did 
someth ing which caused the bot t le  to assume a s ta te  
where its CONNECTOR description applied. The CONNECTOR 
descr ip t ion  ind icates  that  something can be removed from 
the bot t le ,  put in to  the bot t le ,  o r  I t s  contents  can be 
smel led,  looked a t ,  or  genera l ly  examined by some sense 
mods l t ty .  This CONNECTOR descr ip t ion  Is  not par t  oF the 
de f in i t ion  o f  the word ' open ' .  I t  is spec i f i c  Knowledge 
that  people  have about what i t  means to say that  a 
~ot t le  IS open. 
In s t r iv ing  at  the  ~bove representat ion ,  the program 
must re t r ieve  From memory th i s  OF descr ip t ion  o f  what i t  
means For a bot t le  to be open. This in fo rmat ion  i s  
s tored Peneath i t s  p rototype  For bot t les .  Presumably, 
there  Is  a lso  sc r ip t - l i ke  in fo rmat ion  about the 
d i f fe rent  methods For opening bot t les ,  the d i f fe rent  
types o f  caps (corks ,  tw is t -o f f ,  . . . ) ,  and which method 
i s  appropr ia te  For which cap. However, For the purpose 
o f  understanding a text  which does not re /e r  to a 
spec i f i c  type o f  bot t le ,  asp, o r  opentn~ procedure,  what 
i s  important  i s  the in fo rmat ion  aoout how the bot t le  can 
54 
then be used once i t  i s  opened. This  i s  the kind of 
knowledge that OOJect Primitives were des igned to 
capture .  
When the analyzer builds the state description of the 
bot t le ,  a genera l  demon assoc ia ted  w i th  new s ta te  
descr ip t ions  i s  t r iggered .  Th is  demon i s  respons ib le  
fo r  updat ing  memory by add ing  the  new s ta te  in fo rmat ion  
to  the  token  in  the  ACTOR s lo t  o f  the  s ta te  descr ip t ion .  
Thus the  bot t le  token  i s  updated  to  inc lude  the  gtven  
CONNECTOR descr ip t ion .  For the purposes o f  this 
program, the bot t le  i s  then considered to be an "open" 
bot t le .  A second funct ion  o f  th i s  demon i s  to set up 
exp l i c i t  expectat ions  fo r  fu ture  ac t ions  based on the 
new in format ion .  In th i s  case, templates fo r  three  
actions the program might expect to see described can be 
constructed from the  three  par t ia l l y  specified 
conceptua l i za t ions  shown above In the CONNECTOR 
descr ip t ion  o f  the open bot t le .  These templates are  
attached to the state descrJptlon as possible 
consequences of that state, for use when attempting to 
infer the causal connections between events. 
3.2 CONCEPT DRIVEN INFERENCES 
The phrase "so ne could pour the w ine . "  Is analyzed as 
eJohn~ ~.> enable PTRANS <- ewinee <~_>F 
?X i 
< (INSIDE ?CONTAINER) 
When thls representation is built by the analyzer, we do 
not know that the the wine being poured came from the 
previously mentioned bottle. This inference Js made in 
the program by a slot-filling demon called the 
CONTAINER-FINDER, at tached to the  primitive act  PTRANS. 
The demon, triggered when a PTRANS from Inside an 
unspecified container is built, looks on the iist of 
active tokens (a part of snort term memory) for any 
conta iners  that  might be expected to contain the  
substance moved, in this case wine. This is done by 
app ly ing  two tests to the objects In snort term memory. 
The first, the DEFAULT-CONTAINMENT test, looks fo r  
objects descr ibed by the RELATIONAL primitive, 
i nd icat ing  that  they are conta iners  ( l ink  = INSIDE) with  
de fau l t  ob jec t  conta ined being wine. The second, the 
COMMON-SOURCE tes t ,  looks fo r  known SOURCEs o f  wine by 
following the assoc ia t ive  OUTPUTFROM link from wlne. I f  
either of these tests succeed, then the ob ject  found is 
inferred to be the container poured from. 
At dlfferent times, e i ther  the DEFAULT-CONTAINMENT test 
or the COMMON-SOURCJ~ test may be necessary in order to 
establish probable conta inment .  For example, i t  i s  
reasonable to expect a vase to contain water since the 
RELATIONAL descr ip t ion  of a vase has defau l t  containment 
slots for water and flowers. But we do not always 
expect water to come from vases since there is no 
OUTFUTFROM link from water to  a SOURCE description of a 
vase .  If we heard "Water spilled when J ohn  bumped the 
vase , "  containment would be es tab l i shed  by the 
DEFAULT-CONFAINMENT test. AssoclatJve links are not 
always hi-directional (vase ---> water, but water -/-> 
vase) and we need separate mechanisms to trace links 
with different orlentatlons. In our  wine example, the 
COMMON-SOURCE test Is responsible for establishing 
containment, since wine is known to be OUTPUTFROM 
bottles but bottles are not always assumed to hold wine. 
Another in fe rence  made during the in i t ia l  ana lys i s  f inds  
the contents of  the bottle mentioned in the first clause 
of the sentence. Thls expectation was set up by a demon 
called the CONTENTS-FINDER when the description of the 
open bottle, a SOURCE with unspecified output, was 
bu i l t .  The demon causes  a search  o f  STM for  an ob jec t  
which could De OUTPUT-FROM a bot t le ,  and the token fo r  
this particular bottle is then marked as being a SOURCE 
of that oCject. The description of this particular 
bottle as a SOURCE of wine Is equivalent, in Object 
Primitive terms, to sayin~ that the bottle is a wine 
bottle. 
3.3 CAUSAL VERIFICATION 
Once the requests t ry ing ,  to fill slots not filled during 
the initial ana lys i s  nave been cons idered ,  the process 
which attempts to f ind  causal connections between 
conceptualizations is activated, in this particular 
case, the analyzer has already indicated that the 
appropr ia te  causal l ink  i s  enablement. In ~enera l ,  
however, the lex ica l  in fo rmat ion  which caused the 
analyzer to build this causal llng is only an lndJcatlon 
that some enabling relation exists between the two 
actions (opening the bottle and pouring the wine). In 
fact, a long causal cnaJn may Oe required to connect the 
two acts, with an enaClement link being only one link in 
that chain. Furthermore, one cannot always rely on the 
text to indicate where causal relationships exist. The 
sentence "John opened the bottle and poured the wine." 
must ultimately be Interpreted as virtually synonymous 
with (1)  above. 
The causal verification process first looks for a match 
between the conceptual representation of the enabled 
action (pour ing  the wine), and one of the potentially 
enabled acts derived earlier from the OP descrJptlon of 
the opened oottle. In this ex&mple, a match is 
immediately found between the action of pourln~ from the 
bottle and tne expected act ion  generated from the 
CONNECTO~ descrJptlon of the open bottle (PTRANS FROM 
(INSIDE PART SEL~)). Other Object Primitives may a lso  
lead to expectations for actions, as we snail see later. 
When a match Js found, further conceptual checks are 
made on the enabled act to ensure that  the ac t ion  
described "makes sense" with the particular objects 
currently fJlllng the slots In that acts description. 
When the match Is based on expectations derlved from the 
CONNECTO~ description of a container, the check Is a 
"contalner/contents check," which attempts  to ensure 
that  the ob jec t  found in the conta iner  may reasonably  be 
expected to be found there .  The sentence "John opened 
the bot t le  so ne could pu l l  out the e lephant" ,  i s  
peculiar because we no associations exist wnlch would 
lead us to expect that elephants are ever found in 
bottles. The strangeness of this sentence can only be 
explained by the application of stereotypic knowledge 
about what we expect and don ' t  expect to f ind  ins ide  a 
bottle. 
The contalner/contents cnecK is similar to the test 
described above In connection with the CONTAINER-FINDER 
demon. That is, the bottle is checked by both the 
DEFAULT-CONTAINMENT test and the COMMON-SOURCE test for 
known links relatin~ wlne and botles. When this check 
succeeds, the enable llnk has been verified by matcnlng 
an expected action, and by checking restrictions on 
re la ted  ob jec ts  appear ing  in tne  s lo ts  o f  that  ac t ion .  
The two CD acts that matched are then merged. 
The merging process accomplishes several tnJn~s. First, 
it completes the linking of tne causal chain between tne 
events described in the sentence. Second, it causes the 
filling of empty slots appearing in either the enabled 
act or In the enabling act, wherever one left a slot 
unspecified, and the other had that slot filled. These 
newly  f i l l ed  s lo ts  can  propagate  back  a long  the  causa l  
chaln, as we shall see in the example of the next 
section. 
55 
3.~ CAUSAL CHAIN CONSTRUCTION 
In processin~ the sentence 
(~) John turned on the faucet so he could drinK. 
the causa l  cha in  cannot be bu i l t  by a d i rec t  match wi th  
an expected  event .  Add i t iona l  inferences must he made 
to complete the chain between the act ions  described in 
the sentence. The representation produced by the 
conceptual ana lyzer  for "John turned on the faucet," Is 
*John* <~> *ooe 
\]J~ resu l t  
Sfaucet e ~ (SOURCE with OUTPUT ? ~water e) 
As with the bot t le  in the prev ious example, the 
descr ip t ion  o f  the faucet  as an ac t ive  SOURCE o f  water 
i s  based on in fo rmat ion  found beneath the prototype  fo r  
faucet, descrlbLnE the "on" state fo r  that object. The 
principle e~pectatlon for SOURCE objects is that the 
person ~o "turned on" the SOURCE ob ject  wants to take 
cont ro l  o f  (and u l t imate ly  make use o f )  whatever i t  i s  
that Is output from that SOURCE. In CD, this i s  
expressed by a template for an ATRANS (abstract 
transfer) of the output  object, in this case, water. An 
important s ide  effect of the construction of this 
expectation is that a token for some water is created, 
which can be used by a s lo t - f i l l i ng  In ference  la ter .  
The representat ion  fo r  "he could dr ink"  Is  par t ia l l y  
descr ibed ~y an INGEST with an unspec i f ied  liquid in the 
OBJECT slot. A special request to look for the missing 
liquid Is set up ~y a demon on the act INGEST, similar 
to the one on the PTRANS in the prev ious example. This 
request finds the token for water placed In the short 
term mamory ~nen the expectat ion  that someone would 
ATRANS cont ro l  of some water  was generated .  
? faucet*  ~ (SOURCE with OUTPUT = *watere) 
I I I  ,. (possible enaOled action) 
HI 
;i,1" "E l  ?HUMO ?HUMO <=> ATRANS <- ewatere < 
The causal chain completion that occurs for thls 
sentence is somewhat more complicated than It was for 
the prev ious case. As we nave seen, the on ly  
expectation set up by the SOURCE description of the 
faucet was for an ATRANS of water from the faucet. 
However, the action that is described here is an INGEST 
with Instrumental FTRANS. When the chain connector 
rails to find a match between the ATRANS and either the 
INGEST or its instrumental PTRANS, i n fe rence  procedures 
are called to ~enerate any oOvlouS intermediate states 
that might connect these two acts. 
The first inference rule that is applied Is the 
resultatlve inference \[8\] that an ATRANS of an object TO 
someone results in a state where the object Is possessed 
by (POSS-BY) that person. Once this state has been 
~enerated, it is matched a~alnst the INGEST in the same 
way the ATRANS was. When this match fails, no further 
forward inferences are ~enerated, since possession of 
water can lead to a wide ran~ e of new actions, no one of 
wnich is strongly expected. 
The backward chaining Inferencer Is then called to 
generate any ~nown precond i t ions  fo r  the act  INGEST. 
The primary precondition (causative i n fe rence)  fo r  
drinking is that the person doing the drinking has the 
l i qu id  which ~e or  she Is  about to dr ink .  This in fe r red  
enaolln~ state is then found to match the state (someone 
possesses water) Inferred from the expected ATRANS. The 
=arch completes the causal cnaln, causing the merging of 
the matched concepts. In this case, the mergln~ process 
causes the program to infer that it was procaoly John 
who took (AT~ANSed) the water from the faucet, in 
addition to turning it on. Had the sentence read "John 
turned on the faucet so .Mary could drlnK."p the program 
would infer that Mary took the water from the faucet. 
efaucete ~ (SOURCE with OUTPUT = ewatere) 
i enable ?HUMO ATRANS ( -  ewater ? TO ?HUGO result ?watere (POSS-B? ?HUHO) \ 
match? 
yes...lnfer ?HUMO ? mJonnJ 
- -~ewatere  q~ (POSS-B~ mJohnO) 
bacgwar~J 
inference ,I~, enable 
L . . t John l  <.> INGEST <- ?LIQUID ~ inst 
OJonne <=> PTRANS <- ?LIQUID 
One should note hers that  the add i t iona l  in fe rences  used 
to complete the causal chain were very basic. The 
primary connections came directly from oOJect-specific 
expectatlons derived from the OOject Primitlve 
descr ip t ions  o f  the ob jec ts  Invo lved .  
4. C ~  
I t  ta important  to understand how OPUS d i f fe rs  from 
prev ious in fe rence  s t ra teK ies  in natura l  language 
process ing.  To emphasize the or ig ina l  cont r ibut ions  o f  
OPUS we w i l l  compare i t  to  R ie~er ' s  ear ly  work on 
in fe rence  and causal chain const ruct ion .  Since Rie~er*s 
research i s  c lose ly  re la ted  to OPUS, a comparison o f  
this system to Rieger's pro;rum will illustrate which 
aspects of OPUS are novel, and which aspects have been 
inherited. 
There is a ~reat deal of similarity between the types of  
in fe rences  used In OPUS and those used by Rte~er in h is  
descr ip t ion  o f  Mt~qORX \ [8 \ ] .  The causat ive  and 
resu l ta t ive  in fe rences  used to complete the causal chain 
in  our las t  example came d i rec t ly  from that  work. In 
add i t ion ,  the demons used by OPUS are s imi la r  in  f lavor  
to the forward in fe rences  and spec i f i ca t ion  
(s lo t - f i l l i ng)  in fe rences  descr ibed by Rieger .  
Expectat ions  are exp l i c i t l y  represented here as they 
were there ,  a l low ing  them to be used In more then one 
way, as In the case where water i s  in fe r red  to be the 
~/Gg~Ted l iqu id  so le ly  from i t s  presence in a prev ious 
expectat ion .  
There are ,  however, two ways in which OPUS departs  from 
the in fe rence  s t ra teg ies  o f  Mb~OR? In s ign i f i cant  ways. 
(1)  On one the leve l  o f  computer implementat ion there i s  
a reorgan izat ion  o f  process cont ro l  in OPUS, and (2) on 
a theoret i ca l  leve l  OPUS exp lo i t s  an add i t iona l  
representatLona l  system which al lo~m in ference  
generat ion  to be more s t ronB ly  d i rec ted  and cont ro l led .  
In terms o f  implementat ion,  OPUS in tegrates  the 
processes o f  conceptual  ana lys i s  and memoryohased 
in ference  prooeantnB. By using demons, in fe rences  can 
be made dur ing conceptual  ana lys i s ,  as the conceptual  
memory representat ions  are ~enerated.  This  e l iminates  
much o f  the need fo r  an in fe rence  d isc r iminat ion  
procedure aot ing  on complete ly  pre -ana lyzed 
comoeptua i i zat ions  produced Py a separate  program 
module. In ,~tOR~, the processes o f  conceptual  ana lys i s  
and in ference  ~snerat ion  were sharp ly  modular ized fo r  
reasons which were more pragmatic than theoret i ca l .  
~ough i s  Known about the in teract ions  o f  ana lys i s  and 
in ference  at th i s  t ime fo r  us to approach the two as 
56 
concurrent processes which share control and contribute 
to each other  In a very dynamic manner, ideas from KRL 
\[3\] were Instrumental In desJgnJn~ an in tegrat ion  of 
prev ious ly  separate processing modules. 
On a more theoret i ca l  leve l ,  the  In ference  processes  
used for causal chain completion Jn OPUS are more h igh ly  
constrained than was possible in Rle~er's system. In 
MEMORY, all possible inferences were made for each new 
conceptua l i za t ion  which  was input to  the  program.  
I n i t ia l l y ,  input consisted o f  concepts coming f rom the  
parser .  MEHORX then attempted to sake in ferences  from 
the  conceptua l i za t ions  wh ich  i t  i t se l f  had produced,  
repeat ing th i s  cycle unt i l  no new inferences could be 
~enerated. Causal chains were connected ~nen matches 
were found between inferred concepts and concepts 
already stored In Its ~emory. However, the Inference 
mecnanlsms used were in no way dlrected speclflcally to 
tne task of making connections between concepts found In 
its Input text. This lead to a comblnatorlal explosion 
in the number of inferences made from each new i nput .  
In OPUS, forward expectations are based on specific 
assoc ia t ions  from the objects mentioned, and only when 
the objects in the text are described in a manner that 
indicates they are being used functionally. In 
addition, no more than one or two levels of forward or 
backward Inferences are made before the procedure Is 
exhausted ,  the  sys tem s tops  once  a match  I s  made or  I t  
runs  out  o f  h igh ly  probab le  in ferences  to  make.  Thus ,  
there is no chance for the ~Jnds of comblnatorlal 
explosion Rieger experlenced. By strengthenln~ the 
representat ion ,  and exp lo i t ing  an in tegrated processing 
strategy, the comblnatorJal exp los ion  problem can be 
eliminated. 
OPUS makes use o f  a well  s t ructured  set o f  memory 
assoc ia t ions  fo r  ob jec ts ,  the Object P r imi t ives ,  to 
encode In format ion  which  can be used i n  a var ie ty  of  
R leger 's  qenera l  in ference classes. Because th i s  
Information is directly assoclated with memory 
representations for the objects, rather than being 
embodied Jn disconnected inference rules elsewhere, 
appropriate Inferences for the objects mentioned can be 
found directly. By using this extended repressntatlonai 
system, we can begin to examine the kinds of associative 
memory required to produce what appeared from Rieger's 
model to  ~e the  " t remendous  amount  o f  'h idden'  
computation" necessary for the processing of any natm'al 
l anguage text. 
REFERENC?S 
\[11 Blrnbaum, L. ,  and Se l f r ldge  M. (1978).  On 
Conceptual Ana lys is .  (unpubl ished) Yale 
Un ivers i ty ,  New Haven, CT. 
\[2\] Bobrow, D. G., Kaplan, R .M. ,  Kay, M., Norman, 
D .A . ,  Thompson, H., and Winograd, T. (1977). 
GUS, a frame dr iven  d ia log  system,  Art i f i c ia l  
In te l l igence ,  Vol.  8, No. 1. 
\[31 Bobrow, D. G . ,  and Wlnograd, T. (1977). An 
overview o f  KRL, a Knowledge representat ion  
language. Co=nlt ive Science 1, no. 1 
\[~\] Charntak, E. (1972). Toward a model of ch i ld rens  
s tory  comprehension. AITR-266, Ar t i f i c ia l  
In te l l igence  Laboratory, MZT, Cambridge, HA. 
Lehnert ,  W.G. (1978). Representing phys ica l  
ob jects  in memory. Technical  Report #111. 
Dept. o f  Computer Science, Yale Un ivers i ty ,  New 
Haven, CT. 
C6\] Minsky, M. (1975). A framework fo r  represent ing  
Knowledge. In Winston, P. H., ed. ,  The~1.~JZg~L~ 
of C~Dutar  Vlslon, McGraw-Hill, New York, NY. 
C71 
C81 
C91 
Norman, D. A., and Rumelhart, D. ?. ,  and the LNR 
Research Group (1975) ExDlorat ions lnCo=nl t ton .  
W. H. Freeman and Co., San granslsco.  
Rleger,  C. (1975). Conceptual memory. Zn 
R. C. Schank, ed. ,  Concectual 
Prdceasinm. North Hol land,  Amsterdam. 
Rlesbeok, C. and Schank, R. C. (1976). 
Comprehension by computer: expectat ion-baaed 
ana lys i s  o f  sentences in context .  Technical  Report 
#78. Dept. o f  Computer SCience, Yale Un ivers i ty ,  
New Haven, CT. 
\[10\] 3ohank, R .C . ,  (1975).  Conceptual Dependency 
Theory. in Schank, R. C . (ed . ) ,  
P rocess in l .  North Hol land,  Amsterdam. 
\[111 5ohank, R. C. and Abelson, R. P. (1977). ~cr io ts ,  
Plans, ~oals,  ~ Understandtn?. Lawence Rrlba ,,m 
Press, H l l l sda le ,  NJ. 
57 

