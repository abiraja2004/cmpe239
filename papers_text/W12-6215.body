Proceedings of the 10th International Workshop on Finite State Methods and Natural Language Processing, pages 80?89,
Donostia?San Sebastia?n, July 23?25, 2012. c?2012 Association for Computational Linguistics
A Finite-State Temporal Ontology and Event-intervals
Tim Fernando
Computer Science Department
Trinity College Dublin
Ireland
tfernand@tcd.ie
Abstract
A finite-state approach to temporal ontology
for natural language text is described under
which intervals (of the real line) paired with
event descriptions are encoded as strings. The
approach is applied to an interval temporal
logic linked to TimeML, a standard mark-up
language for time and events, for which vari-
ous finite-state mechanisms are proposed.
1 Introduction
A model-theoretic perspective on finite-state meth-
ods is provided by an important theorem due to
Bu?chi, Elgot and Trakhtenbrot (Thomas, 1997).
Given a finite alphabet ?, a system MSO? of
monadic second-order logic is set up with a binary
relation symbol (for successor) and a unary relation
symbol for each symbol in ? so that the formulae of
MSO? define precisely the regular languages over ?
(minus the null string ). Extensions of this theorem
to infinite strings and trees are fundamental to work
on formal verification associated with Model Check-
ing (Clarke et al., 1999). In that work, a well-defined
computational system (of hardware or software) can
be taken for granted, against which to evaluate pre-
cise specifications. The matter is far more delicate,
however, with natural language semantics. It is not
clear what models, if any, are appropriate for natural
language. Nor is it obvious what logical forms natu-
ral language statements translate to. That said, there
is a considerable body of work in linguistic seman-
tics that uses model theory, and no shortage of nat-
ural language text containing information that cries
out for extraction.
A step towards (semi-)automated reasoning about
temporal information is taken in TimeML (Puste-
jovsky et al., 2003), a ?mark-up language for tempo-
ral and event expressions? (www.timeml.org).
The primary aim of the present paper is to show how
finite-state methods can push this step further, by
building strings, regular languages and regular rela-
tions to represent some basic semantic ingredients
proposed for TimeML. An instructive example is
sentence (1), which is assigned in (Pratt-Hartmann,
2005a; ISO, 2007) the logical form (2).
(1) After his talk with Mary, John drove to Boston.
(2) p(e) ? q(e?) ? after(e, e?)
If we read p(e) as ?e is an event of John talking with
Mary? and q(e?) as ?e? is an event of John driving to
Boston? then (2) says ?an event e? of John driving to
Boston comes after an event e of John talking with
Mary .? Evidently, (1) follows from (3) and (4) be-
low (implicitly quantifying the variables e and e? in
(2) existentially).
(3) John talked with Mary from 1pm to 2pm.
(4) John drove to Boston from 2pm to 4pm.
But is (3) not compatible with (5) ? and indeed im-
plied by (5)?
(5) John talked with Mary from 1pm to 4pm.
Could we truthfully assert (1), given (4) and (5)? Or
if not (1), perhaps (6)?
(6) After talking with Mary for an hour, John drove
to Boston.
80
The acceptability of (6) suffers, however, if we are
told (7).
(7) John drove toward Boston from 1pm to 2pm.
Clearly, individuating events, as (2) does, opens
up a can of worms. But since at least (Davidson,
1967), there has been no retreating from events (Par-
sons, 1990; Kamp and Reyle, 1993; Pratt-Hartmann,
2005). Be that as it may, an appeal to events carries
with it an obligation to provide a minimal account
of what holds during these events and perhaps even
a bit beyond. It is for such an account that finite-
state methods are deployed below, viewed through
the lens of the Bu?chi-Elgot-Trakhtenbrot theorem.
That lens gives temporal logic, the formulae of
which ? hereafter called fluents (for brevity) ?
may or may not hold at a string position, conceived
as time and ordered according to succession within
the string. For example, we can introduce a flu-
ent p for ?John talked with Mary? and a fluent q
for ?John drove to Boston? to form the string p q
(of length 2) for ?after John talked with Mary, John
drove to Boston.? The idea is that a string ?1 ? ? ??n
of boxes ?i describes a sequence t1, . . . , tn of n
times, ti coming before ti+1, such that every fluent
in ?i holds at ti.1 To a first approximation, a box ?i
is a snapshot at time ti, making ?1 ? ? ??n a cartoon
or filmstrip. But just what is a time ti: a temporal
point or an interval?
For p q to apply to (3) and (4), it is natural
to regard ti as an interval, setting up an account
of the entailment from (5) to (3) in terms of the
so-called subinterval property of John-talking-with-
Mary (Bennett and Partee, 1972). John-driving-to-
Boston, by contrast, does not have this property, ne-
cessitating the change from to Boston in (4) to to-
ward Boston in (7). We can bring out this fact by
representing individual events as strings, refining,
for instance, our picture q of John?s drive to Boston
by adding a fluent r for ?John in Boston? to form
q q,r . An event of motion is conceptualized as a
finite sequence of snapshots in (Tenny, 1987) and
elsewhere ? a conceptualization resoundingly re-
jected in (Jackendoff, 1996) because
1The alphabet ? from which strings are formed is the family
Pow(X) of subsets of some set X of fluents. A fluent corre-
sponds to a monadic second-order variable in the Bu?chi-Elgot-
Trakhtenbrot theorem.
it misrepresents the essential continuity of
events of motion. For one thing, aside from
the beginning and end points, the choice of a
finite set of subevents is altogether arbitrary.
How many subevents are there, and how is one
to choose them? Notice that to stipulate the
subevents as equally spaced, for instance one
second or 3.5 milliseconds apart, is as arbi-
trary and unmotivated as any other choice.
Another difficulty with a snapshot conceptu-
alization concerns the representation of non-
bounded events (activities) such as John ran
along the river (for hours). A finite sequence
of subevents necessarily has a specified begin-
ning and ending, so it cannot encode the ab-
sence of endpoints. And excluding the speci-
fied endpoints simply exposes other specified
subevents, which thereby become new end-
points. Thus encoding nonbounded events re-
quires major surgery in the semantic represen-
tation. [page 316]
Jackendoff?s objections are overcome below by
finite-state manipulations that may well be called
surgery. Following details supplied in the next sec-
tion,2 strings are formed from a finite set X of flu-
ents that is allowed to vary so that
(i) the continuity desired by Jackendoff arises in
the inverse limit of a system of projections piX
(defined below; Table 1), and
(ii) the temporal span of any finite string may, on
expanding the set X , stretch without bound to
the left (past) and/or to the right (future).
Applying piX , section 2 proceeds to encode a model
A of an interval temporal logic as a string s(A).
Building on that encoding, section 3 develops finite-
state methods for interval temporal logic. Section
4 concludes with proposals (drawing on work of the
earlier sections) for extending the empirical (linguis-
tic) coverage.
2 From event-intervals to strings
Before equating the set X of fluents with a model
interpreting TimeML, let us bring out the intuition
2The present work extends a line of research most recently
reported in (Fernando, 2011, 2011a, 2011b, 2012). That line is
related to (Niemi and Koskenniemi, 2009), from which it dif-
fers in adopting an alphabet Pow(X) that equates sucession in
a string with temporal succession.
81
?X(?1 ? ? ??n) def= (?1 ?X) ? ? ? (?n ?X)
bc(s) def=
?
?
?
bc(?s?) if s = ??s?
?bc(??s?) if s = ???s? and ? 6= ??
s otherwise
unpad(s) def=
{ unpad(s?) if s = s? or s?
s otherwise
Table 1: Behind piX(s) def= unpad(bc(?X(s)))
underlying the function piX through a familiar exam-
ple. We can represent a calendar year by the string
smo def= Jan Feb ? ? ? Dec
of length 12 (with a month in each box), or (adding
one of 31 days d1, d2,. . ., d31) the string
smo,dy def= Jan,d1 Jan,d2 ? ? ?
Jan,d31 Feb,d1 ? ? ? Dec,d31
of length 365 (a box per day in a non-leap year).3
Unlike the points in say, the real line R, a box can
split if we enlarge the set X of fluents we can put in
it, as illustrated by the change from Jan in smo to
Jan,d1 Jan,d2 ? ? ? Jan,d31 in smo,dy. Two func-
tions link the strings smo,dy and smo
(i) a function ?mo that keeps only the months in a
box so that
?mo(smo,dy) = Jan 31 Feb 28 ? ? ? Dec 31
(ii) block compression bc, which compresses con-
secutive occurrences of a box into one, map-
ping ?mo(smo,dy) to
bc( Jan 31 Feb 28 ? ? ? Dec 31) = smo
so that bc(?mo(smo,dy)) = smo. As made precise
in Table 1, ?X ?sees only X? (setting modef= {Jan,
3In (Niemi and Koskenniemi, 2009), smo is represented as
the string
[m Jan ]m [m Feb ]m [m Mar ]m ... [m Dec ]m
of length 36 over 14 symbols (the 12 months plus the 2 brackets
[m and ]m) on which finite-state transducers operate. (See the
previous footnote.)
R ?Allen sR ? Lpi({x, x?}) ?R([a, b], [a?, b?])
x = x? x, x? a = a?, b = b?
x s x? x, x? x? a = a?, b < b?
x si x? x, x? x a = a?, b? < b
x f x? x? x, x? a? < a, b = b?
x fi x? x x, x? a < a?, b = b?
x d x? x? x, x? x? a? < a, b < b?
x di x? x x, x? x a < a?, b? < b
x o x? x x, x? x? a < a? ? b < b?
x oi x? x? x, x? x a? < a ? b? < b
x m x? x x? --
x < x? x x? b < a?
x mi x? x? x --
x > x? x? x b? < a
Table 2: The Allen relations via pi{x,x?}
Feb, . . .Dec} to make ?mo an instance of ?X ), while
bc eliminates stutters, hardwiring the view that time
passes only if there is change (or rather: we observe
time passing only if we observe a change within a
box). As this example shows, temporal granularity
depends on the set X of observables that may go
inside a box. Writing bcX for the composition map-
ping s to bc(?X(s)), we have
bc{Jan}(smo,dy) = bc{Jan}(smo) = Jan
bc{Feb}(smo,dy) = bc{Feb}(smo) = Feb
bc{d3}(smo,dy) = ( d3 )12 .
Now, the function piX is bcX followed by the deletion
unpad of any initial or final empty boxes (Table
1).4 We can then define a fluent x to be an s-interval
if pi{x}(s) is x . Next, let Lpi(X) be the language
piX [
?
x?X pi?1{x} x ] consisting of strings piX(s) for
s ? Pow(X)? such that pi{x}(s) = x for all x ? X .
Note that Lpi({x}) = { x } while for x 6= x?,
Lpi({x, x?}) consists of 13 strings sR, one per inter-
val relation R in (Allen, 1983); see columns 1 and 2
of Table 2
Lpi({x, x?}) = {sR | R ? Allen} .
4Restricted to a finite alphabet, the maps ?X , bc, unpad
and piX are computable by finite-state transducers (Fernando,
2011).
82
For example, in the case of the ?f inish? relation
f?Allen,
s |= x fx? ?? pi{x,x?}(s) = x? x, x?
provided x and x? are s-intervals. The third column
of Table 2 characterizes R ?Allen as conditions ?R
on pairs [a, b] and [a?, b?] of real numbers (in R) de-
noting closed intervals5 ? e.g.,
[a, b] f [a?, b?] ?? a? < a and b = b? .
This brings us to the semantics of TimeML pro-
posed in (Pratt-Hartmann, 2005a). A system T PL
of Temporal Preposition Logic is built from an infi-
nite set E of event-atoms, and interpreted relative to
the family
I def= {[a, b] | a, b ? R and a ? b}
of closed, bounded non-empty intervals in R. A
T PL-model A is defined to be a finite subset of
I ? E. The intuition is that a pair ?I, e? in A repre-
sents ?an occurrence of an event of type e over the
interval? I (Pratt-Hartmann, 2005; page 17), revers-
ing the construal in line (2) above of e as a token.
Identifying occurrences with events, we can think of
A as a finite set of events, conceived as ?intervals
cum description? (van Benthem, 1983; page 113).
Treating events as fluents, we have
Proposition 1. For every T PL-model A, there is a
unique string s(A) ? Lpi(A) such that for all x, x? ?
A with x = ?I, e? and x? = ?I ?, e??,
pi{x,x?}(s(A)) = sR ?? ?R(I, I ?)
for R ?Allen and sR, ?R specified in Table 2.
To construct the string s(A), let Ends(A) be the set
of endpoints of A
Ends(A) def=
?
I?dom(A)
ends(I)
where dom(A) is the domain {I | (?e ? E) ?I, e? ?
A} of A, and ends([a, b]) is the unordered pair
5Over non-empty closed intervals that include points [a, a],
the Allen relations m and mi collapse to o and oi, respectively.
Alternatively, we can realize m and mi by trading closed in-
tervals for open intervals (required to be non-empty); see the
Appendix below.
x1 def= ?[1, 5], e? r1 = 1, r2 = 4
x2 def= ?[4, 9], e? r3 = 5, r4 = 9
x3 def= ?[9, 50], e?? r5 = 50
A def= {x1, x2, x3}
Table 3: Example s(A) = x1 x1, x2 x2 x2, x3 x3
{a, b}. Sorting gives Ends(A) = {r1, r2, . . . , rn}
with r1 < r2 < ? ? ? < rn. Breaking [r1, rn] up into
2n? 1 intervals, let
?i def= {?I, e? ? A | ri ? I} for 1 ? i ? n
and
?i def= {?I, e? ? A | [ri, ri+1] ? I} for 1 ? i < n.
Interleaving and block-compressing give
s(A) def= bc(?1?1 ? ? ??n?1?n?1?n)
(see Table 3 for an example). One may then verify
(by induction on the cardinality of the domain of A)
that s(A) is the unique string in Lpi(A) satisfying
the equivalence in Proposition 1.
But is encoding A as a string s(A) adequate for
T PL-satisfaction? Let us introduce T PL-formulae
through an English example.
(8) During each of John?s drives to Boston, he ate
a donut.
(8) translates in T PL to (9), which is interpreted
relative to a T PL-model A and an interval I ? I
according to (10) and (11), with [e]? abbreviating
??e??? (as usual), > a tautology (in that A |=I >
always) and ? as strict (irreflexive) subset.
(9) [John-drive-to-Boston] ?John-eat-a-donut?>
(10) A |=I ?e?? def?? (?J ? I s.t. A(J, e))
A |=J ?
(11) A |=I ?? def?? not A |=I ?
Clause (10) shows off a crucial feature of T PL:
quantification over intervals is bounded by the do-
main of A; that is, quantification is restricted to in-
tervals that are paired up with an event-atom by the
83
T PL-model (making T PL ?quasi-guarded?; Pratt-
Hartmann, 2005; page 5). This is not to say that the
only intervals I that may appear in formingA |=I ?
are those in the domain of A. Indeed, for [a, b] ? I
and [a?, b?] ? dom(A) such that [a?, b?] ? [a, b],
T PL uses intervals
init([a?, b?], [a, b]) def= [a, a?]
fin([a?, b?], [a, b]) def= [b?, b]
to interpret {e}<? and {e}>? according to (12).
(12) A |=I {e}<? def?? (?!J ? I s.t. A(J, e))
A |=init(J,I) ?
A |=I {e}>? def?? (?!J ? I s.t. A(J, e))
A |=fin(J,I) ?
The bang ! in ?!J in (12) expresses uniqueness,
which means that under the translation of (1) as (13)
below, the interval I of evaluation is required to con-
tain a unique event of John talking with Mary.
(1) After his talk with Mary? ?? ? John drove to Boston? ?? ?.
p q
(13) {p}>?q?>
For a translation of (1) more faithful to
(2) p(e) ? q(e?) ? after(e, e?)
than (13),6 it suffices to drop ! in (12) for ?e?< and
?e?> in place of {e}< and {e}> respectively (Fer-
nando, 2011a), and to revise (13) to ?p?>?q?>. Re-
laxing uniqueness, we can form [p]>?q?> for after
every talk with Mary, John drove to Boston, as well
as ?p?>?p?> for after a talk with Mary, John talked
with Mary again. T PL has further constructs ef
and el for the (minimal) first and (minimal) last e-
events in an interval.
Returning to the suitability of s(A) for T PL, con-
sider the question: when do two pairsA, I andA?, I ?
of T PL-models A,A? and intervals I, I ? ? I sat-
isfy the same T PL-formulae? Some definitions are
in order. A bijection f : A ? B between finite sets
6Caution: e and e? are tokens in (2), but types in T PL.
A and B of real numbers is order-preserving if for
all a, a? ? A,
a < a? ?? f(a) < f(a?)
in which case we write f : A ?= B. Given a T PL-
model A, and a function f : Ends(A) ? R, let Af
be A with all its intervals renamed by f
Af def= {?[f(a), f(b)], e? | ?[a, b], e? ? A} .
Now, we say A is congruent with A? and write A ?=
A? if there is an order-preserving bijection between
Ends(A) and Ends(A?) that renames A to A?
A ?= A? def?? (?f : Ends(A) ?= Ends(A?))
A? = Af .
Finally, we bring I into the picture by defining the
restriction AI of A to I to be the subset
AI def= {?J, e? ? A | J ? I}
of A with intervals strictly contained in I .
Proposition 2. For all finite subsets A and A? of
I ? E and all intervals I, I ? ? I, if AI ?= A?I? then
for every T PL-formula ?,
A |=I ? ?? A? |=I? ? .
Proposition 2 suggests normalizing a T PLmodelA
with endpoints r1 < r2 < ? ? ? < rn to nr(A) with ri
renamed to i
nr(A) def= Af where f def= {?r1, 1?, . . . , ?rn, n?}.
Assigning every T PL-formula ? the truth set
T (?) def= {s(nr(AI)) | A is a T PL-model,
I ? I and A |=I ?}
gives
Proposition 3. For every T PL-formula ?, T PL-
model A, and interval I ? I,
A |=I ? ?? s(nr(AI)) ? T (?) .
To bolster the claim that T (?) encodes T PL-
satisfaction, we may construct T (?) by induction
on ?, mimicking the clauses for T PL-satisfaction,
as in (14).
(14) T (? ? ??) = T (?) ? T (??)
Details are provided in the next section, where we
consider the finite-state character of the clauses, and
may verify Propositions 2 and 3.
84
3 Regularity and relations behind truth
A consequence of Proposition 3 is that the entail-
ment from ? to ?? given by
? |?I,E ?? def?? (? finite A ? I ? E)(?I ? I)
A |=I ? implies A |=I ??
becomes equivalent to the inclusion T (?) ? T (??),
or to the unsatisfiability of ? ? ???
? |?I,E ?? ?? T (? ? ???) = ?
assuming classical interpretations (14) and (15) of
conjunction ? and negation ?.
(15) T (??) = ?+ ? T (?)
Finite-state methods are of interest as regular lan-
guages are closed under intersection and comple-
mentation. (Context-free languages are not; nor is
containment between context-free languages decid-
able.) The alphabet ? in (15) is, however, infinite;
? is the set Fin(J ? E) of finite subsets of J ? E,
where J is the set
J def= {[n,m] ? I | n,m ? Z+}
of intervals in I with endpoints in the set Z+ of
positive integers 1, 2, . . . (containing the domain of
a normalized T PL-model). As with piX , regular-
ity demands restricting ? to a finite subalphabet ?
or better: subalphabets given by the set F of pairs
?I ?, E?? of finite subsets I ? and E? of J and E re-
spectively, for which
? =
?
?I?,E???F
Pow(I ? ? E?) .
The basis of the decidability/complexity results in
(Pratt-Hartmann, 2005) is a lemma (number 3 in
page 20) that, for any T PL-formula ?, bounds the
size of a minimal model of ?. We get a computable
function mapping a T PL-formula ? to a finite sub-
set I? of J just big enough so that if ? is T PL-
satisfiable,
(?A ? Pow(I? ? E?))(?I ? I?) A |=I ?
whereE? is the finite subset ofE occurring in ?. To
minimize notational clutter, we leave out the choice
?I ?, E?? ? F of a finite alphabet below.
Next, keeping intersection and complementation
in (14) and (15) in mind, let us call an opera-
tion regularity-preserving (rp) if its output is regu-
lar whenever all its inputs are regular. To interpret
T PL, we construe operations broadly to allow their
inputs and output to range over relations between
strings (and not just languages), construing a rela-
tion to be regular if it is computable by a finite-state
transducer. For instance, the modal diamond ?e? la-
belled by an event-atom e ? E is interpreted via an
accessibility relation R(e) in the usual Kripke se-
mantics
T (?e??) = R(e)?1T (?)
of ?e?? where R?1L is the set {s ? ?? | (?s? ?
L) sRs?} of strings related by R to a string in L.
The operation that outputs R?1L on inputs R and L
is rp. But what is the accessibility relationR(e)?
Three ingredients go into makingR(e):
(i) a notion of strict containment A between
strings
(ii) the demarcation s? of a string s
(iii) a set D(e) of strings representing full occur-
rences of e.
We take up each in turn, starting withA, which com-
bines two ways a string can be part of another. To
capture strict inclusion ? between intervals, we say
a string s? is a proper factor of a string s, and write
s pfac s?, if s? is s with some prefix u and suffix v
deleted, and uv is non-empty
s pfac s? ?? (?u, v) s = us?v and uv 6= .
(Dropping the requirement uv 6=  gives factors
simpliciter.) The second way a string s? may be part
of s applies specifically to strings of sets. We say s
subsumes s?, and write s s?, if they are of the same
length, and ? holds componentwise between them
?1 ? ? ??n  ??1 ? ? ???m
def?? n = m and
??i ? ?i for 1 ? i ? n.
Now, writing R;R? for the relational composition of
binary relations R and R? in which the output of R
is fed as input to R?
s R;R? s? def?? (?s??) sRs?? and s??R?s? ,
85
we compose pfac with  for strict containment A
A def= pfac ;  (=  ; pfac) .
(It is well-known that relational composition ; is
rp.) Next, the idea behind demarcating a string s
is to mark the beginning and ending of every in-
terval I mentioned in s, with fresh fluents bgn-I
and I-end. The demarcation (?1?2 ? ? ??n)? of
?1?2 ? ? ??n adds bgn-I to ?i precisely if
there is some e such that ?I, e? ? ?i and either
i = 1 or ?I, e? 6? ?i?1
and adds I-end to ?i precisely if
there is some e such that ?I, e? ? ?i and either
i = n or ?I, e? 6? ?i+1.7
For s = s(A) given by the example in Table 3,
s? = x1, bgn-I1 x1, x2, I1-end, bgn-I2
x2 x2, x3, I2-end, bgn-I3 x3, I3-end
We then form the denotation DI?(e) of e relative to
a finite subset I ? of I by demarcating every string in?
I?I? ?I, e?
+ as in (16).
(16) DI?(e) def= ?I?I?{s? | s ? ?I, e?
+}
To simplify notation, we suppress the subscript I ?
on DI?(e). Restricting strict containment A to D(e)
gives
sR?(e) s? def?? s A s? and s? ? D(e)
from which we defineR(e), making adjustments for
demarcation
sR(e) s? def?? s? R?(e) s??.
That is, R(e) is the composition ??;R?(e); ?? where
demarcation ?? is inverted by ??. As T PL?s other
constructs are shown in ?4.1 of (Fernando, 2011a)
to be interpretable by rp operations, we have
7The markers bgn-I and I-end are analogous to the brackets
[g and ]g in (Niemi and Koskenniemi, 2009), an essential differ-
ence being that a grain (type) g supports multiple occurrences
of [g and ]g, in contrast to the (token) interval I .
Proposition 4. All T PL-connectives can be inter-
preted by rp operations.
Beyond T PL, the interval temporal logic HS of
(Halpern and Shoham, 1991) suggests variants of
?e?? with strict containment A in R(e) replaced by
any of Allen?s 13 interval relations R.
(17) A |=I ?e?R? def?? (?J s.t. I R J)
A(J, e) and A |=J ?
To emulate (17), we need to mark the evaluation in-
terval I in A by some r 6? E, setting
Ar[I] def= A ? {?I, r?}
rather than simply forming AI (which will do if we
can always assume the model?s full temporal extent
is marked). A string s = ?1 ? ? ??n r-marks I if
?I, r? ? ?ni=1 ?i. If that interval is unique, we say
s is r-marked, and write I(s) for the interval it r-
marks, and s? for s with the fluent ?I(s), r? deleted
(so that s(Ar[I])? = s(A)). For any of the rela-
tions R ?Allen, we let ?R hold between r-marked
strings that are identical except possibly for the in-
tervals they r-mark, which are related by R
s ?R s? def?? s? = s?? and I(s) R I(s?).
Next, given an event-atom e, we let R(e)R be a bi-
nary relation that holds between r-marked strings re-
lated by ?R, the latter of which picks out a factor
subsuming some string in D(e)
sR(e)R s? def?? s ?R s? and
(?d ? D(e)) s?r  d
where s?r is the factor of s? that begins with bgn-I(s?)
and ends with I(s?)-end. Replacing AI by Ar[I] in
T (?) for
Tr(?) def= {s(nr(Ar[I])) | A is a T PL-model,
I ? I and A |=I ?} ,
(17) corresponds to
Tr(?e?R?) = R(e)?1R Tr(?).
86
4 Conclusion and future work
The key notion behind the analysis above of time in
terms of strings is the map piX , which for X consist-
ing of interval-event pairs ?I, e?, is applied in Propo-
sition 1 to turn a T PL-model A into a string s(A).
As far as T PL-satisfaction A |=I ? is concerned,
we can normalize the endpoints of the intervals to an
initial segment of the positive integers, after restrict-
ing A to intervals contained in the evaluation inter-
val I (Proposition 3). For a finite-state encoding of
T PL-satisfaction, it is useful to demarcate the oth-
erwise homogeneous picture ?I, e? + of ?I, e?, and
to define a notion A of proper containment between
strings. We close with further finite-state enhance-
ments.
Demarcation is linguistically significant, bearing
directly on telicity and the so-called Aristotle-Ryle-
Kenny-Vendler classification (Dowty, 1979), illus-
trated by the contrasts in (18) and (19).
(18) John was driving |? John drove
John was driving to L.A. 6|? John drove to L.A.
(19) John drove for an hour
John drove to L.A. in an hour
The difference at work in (18) and (19) is that John
driving to L.A. has a termination condition, in(John,
L.A.), missing from John driving. Given a fluent
such as in(John, L.A.), we call a language L ?-telic
if for every s ? L, there is an n ? 0 such that
s  ?? n ? (which is to say: a string in L ends
as soon as ? becomes true). L is telic if it is ?-telic,
for some ?. Now, the contrasts in (18) and (19) can
be put down formally to the language for John driv-
ing to L.A. being telic, but not that for John driving
(Fernando, 2008).
The demarcation (via ?) just described does not
rely on some set I ? of intervals I from which flu-
ents bgn-I and I-end are formed (as in s? from sec-
tion 3). There are at least two reasons for attempt-
ing to avoid I ? when demarcating or, for that matter,
building the set D(e) of denotations of e. The first
is that under a definition such as (16), the number
of e-events (i.e., events of type e) is bounded by the
cardinality of I ?.
(16) DI?(e) def= ?I?I?{s? | s ? ?I, e?
+}
The second is that an interval arguably has little to
do with an e-event being an e-event. An interval
[4,9] does not, in and of itself, make ?[4, 9], e? an e-
event; ?[4, 9], e? is an e-event only in a T PL-model
that says it is. An alternative is to express in strings
what holds during an event that makes it an e-event.
Consider the event type e of Pat walking a mile. In-
cremental change in an event of that type can be rep-
resented through a parametrized fluent f(r) with pa-
rameter r ranging over the reals in the unit interval
[0, 1], such that f(r) says Pat has walked r?(a mile).
Let D(e) be
f(0) f?
+
f(1)
where f? abbreviates the fluent
(?r < 1) f(r) ? Previous(?f(r)).
Previous is a temporal operator that constrains
strings ?1 ? ? ??n so that whenever Previous(?) be-
longs to ?i+1, ? belongs to ?i; that is,
Previous(?) ? ?
using an rp binary operator ? on languages that
combines subsumption  with constraints famil-
iar from finite-state morphology (Beesley and Kart-
tunen, 2003).
The borders and interior of ?I, e? aside, there is
the matter of locating an e-string in a larger string
(effected in T PL through strict inclusion ?, the
string-analog of which is proper containment A).
But what larger string? The influential theory of
tense and aspect in (Reichenbach, 1947) places e rel-
ative not only to the speech S but also to a reference
time r, differentiating, for instance, the simple past
e, r S from the present perfect e S,r , as required
by differences in defeasible entailments |?, (20), and
acceptability, (21).
(20) Pat has left Paris |? Pat is not in Paris
Pat left Paris 6|? Pat is not in Paris
(21) Pat left Paris. (?Pat has left Paris.)
But Pat is back in Paris.
The placement of r provides a bound on the iner-
tia applying to the postcondition of Pat?s departure
87
(Fernando, 2008). The extension Ar[I] proposed in
section 3 to the combinationAI (adequate for T PL,
but not HS) explicitly r-marks the evaluation inter-
val I , facilitating an account more intricate than sim-
ply A of e?s occurrence in the larger string. T PL
goes no further than Ramsey in analyzing That Cae-
sar died as an ontological claim that an event of cer-
tain sort exists (Parsons, 1990), leading to the view
of an event as a truthmaker (Davidson, 1967; Mulli-
gan et al., 1984). The idea of an event (in isolation)
as some sort of proof runs into serious difficulties,
however, as soon as tense and aspect are brought
into the picture; complications such as the Imperfec-
tive Paradox (Dowty, 1979), illustrated in (22), raise
tricky questions about what it means for an event to
exist and how to ground it in the world (speaking
loosely) in which the utterance is made.
(22) John was drawing a circle when he ran out of
ink.
But while the burden of proof may be too heavy to
be borne by a single pair ?I, e? of interval I and
event-atom e, the larger picture in which the pair is
embedded can be strung out, and a temporal state-
ment ? interpreted as a binary relation R? between
such strings that goes well beyond A. The inputs to
R? serve as indices, with those in the domain ofR?
supporting the truth of ?
? is true at s def?? (?s?) sR? s?
(Fernando, 2011, 2012). In witnessing truth at par-
ticular inputs, the outputs of R? constitute denota-
tions more informative than truth values, from which
indices can be built bottom-up, in harmony with a
semantic analysis of text from its parts (to which
presumably TimeML is committed). An obvious
question is how far finite-state methods will take us.
Based on the evidence at hand, we have much fur-
ther to go.
Acknowledgments
My thanks to Daniel Isemann for useful, sustained
discussions. The work is supported by EI Grant #
CC-2011-2601B:GRCTC.
References
