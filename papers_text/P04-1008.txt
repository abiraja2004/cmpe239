Statistical Modeling for Unit Selection in Speech Synthesis
Cyril Allauzen and Mehryar Mohri and Michael Riley?
AT&T Labs ? Research
180 Park Avenue, Florham Park, NJ 07932, USA
{allauzen, mohri, riley}@research.att.com
Abstract
Traditional concatenative speech synthesis systems
use a number of heuristics to define the target and
concatenation costs, essential for the design of the
unit selection component. In contrast to these ap-
proaches, we introduce a general statistical model-
ing framework for unit selection inspired by auto-
matic speech recognition. Given appropriate data,
techniques based on that framework can result in a
more accurate unit selection, thereby improving the
general quality of a speech synthesizer. They can
also lead to a more modular and a substantially more
efficient system.
We present a new unit selection system based on
statistical modeling. To overcome the original ab-
sence of data, we use an existing high-quality unit
selection system to generate a corpus of unit se-
quences. We show that the concatenation cost can
be accurately estimated from this corpus using a sta-
tistical n-gram language model over units. We used
weighted automata and transducers for the repre-
sentation of the components of the system and de-
signed a new and more efficient composition algo-
rithm making use of string potentials for their com-
bination. The resulting statistical unit selection is
shown to be about 2.6 times faster than the last re-
lease of the AT&T Natural Voices Product while
preserving the same quality, and offers much flex-
ibility for the use and integration of new and more
complex components.
1 Motivation
A concatenative speech synthesis system (Hunt and
Black, 1996; Beutnagel et al, 1999a) consists of
three components. The first component, the text-
analysis frontend, takes text as input and outputs
a sequence of feature vectors that characterize the
acoustic signal to synthesize. The first element of
each of these vectors is the predicted phone or half-
phone; other elements are features such as the pho-
netic context, acoustic features (e.g., pitch, dura-
tion), or prosodic features.
? This author?s new address is: Google, Inc, 1440 Broadway,
New York, NY 10018, riley@google.com.
The second component, unit selection, deter-
mines in a set of recorded acoustic units corre-
sponding to phones (Hunt and Black, 1996) or half-
phones (Beutnagel et al, 1999a) the sequence of
units that is the closest to the sequence of fea-
ture vectors predicted by the text analysis frontend.
The final component produces an acoustic signal
from the unit sequence chosen by unit selection
using simple concatenation or other methods such
as PSOLA (Moulines and Charpentier, 1990) and
HNM (Stylianou et al, 1997).
Unit selection is performed by defining two cost
functions: the target cost that estimates how the
features of a recorded unit match the specified fea-
ture vector and the concatenation cost that estimates
how well two units will be perceived to match when
appended. Unit selection then consists of finding,
given a specified sequence of feature vectors, the
unit sequence that minimizes the sum of these two
costs.
The target and concatenation cost functions have
traditionally been formed from a variety of heuris-
tic or ad hoc quality measures based on features of
the audio and text. In this paper, we follow a differ-
ent approach: our goal is a system based purely on
statistical modeling. The starting point is to assume
that we have a training corpus of utterances labeled
with the appropriate unit sequences. Specifically,
for each training utterance, we assume available a
sequence of feature vectors f = f1 . . . fn and the
corresponding units u = u1 . . . un that should be
used to synthesize this utterance. We wish to esti-
mate from this corpus two probability distributions,
P (f |u) and P (u). Given these estimates, we can
perform unit selection on a novel utterance using:
u = argmax
u
P (u|f) (1)
= argmin
u
(? logP (f |u) ? logP (u)) (2)
Equation 1 states that the most likely unit se-
quence is selected given the probabilistic model
used. Equation 2 follows from the definition of
conditional probability and that P (f) is fixed for a
given utterance. The two terms appearing in Equa-
tion 2 can be viewed as the statistical counterparts
of the target and concatenation costs in traditional
unit selection.
The statistical framework just outlined is simi-
lar to the one used in speech recognition (Jelinek,
1976). We also use several techniques that have
been very successfully applied to speech recogni-
tion. For instance, in this paper, we show how
? logP (u) (the concatenation cost) can be accu-
rately estimated using a statistical n-gram language
model over units. Two questions naturally arise.
(a) How can we collect a training corpus for build-
ing a statistical model? Ideally, the training cor-
pus could be human-labeled, as in speech recog-
nition and other natural language processing tasks.
But this seemed impractical given the size of the
unit inventory, the number of utterances needed for
good statistical estimates, and our limited resources.
Instead, we chose to use a training corpus gener-
ated by an existing high-quality unit selection sys-
tem, that of the AT&T Natural Voices Product. Of
course, building a statistical model on that output
can, at best, only match the quality of the origi-
nal. But, it can serve as an exploratory trial to mea-
sure the quality of our statistical modeling. As we
will see, it can also result in a synthesis system that
is significantly faster and modular than the original
since there are well-established algorithms for rep-
resenting and optimizing statistical models of the
type we will employ. To further simplify the prob-
lem, we will use the existing traditional target costs,
providing statistical estimates only of the concate-
nation costs (? logP (u)).
(b) What are the benefits of a statistical modeling
approach?
(1) High-quality cost functions. One issue
with traditional unit selection systems is that
their cost functions are the result of the following
compromise: they need to be complex enough
to have a perceptual meaning but simple enough
to be computed efficiently. With our statistical
modeling approach, the labeling phase could be
performed offline by a highly accurate unit selec-
tion system, potentially slow and complex, while
the run-time statistical system could still be fast.
Moreover, if we had audio available for our training
corpus, we could exploit that in the initial label-
ing phase for the design of the unit selection system.
(2) Weighted finite-state transducer representa-
tion. In addition to the already mentioned synthesis
speed and the opportunity of high-quality measures
in the initial offline labeling phase, another benefit
of this approach is that it leads to a natural represen-
tation by weighted transducers, and hence enables
us to build a unit selection system using general
and flexible representations and methods already in
use for speech recognition, e.g., those found in the
FSM (Mohri et al, 2000), GRM (Allauzen et al,
2004) and DCD (Allauzen et al, 2003) libraries.
Other unit selection systems based on weighted
transducers were also proposed in (Yi et al, 2000;
Bulyko and Ostendorf, 2001).
(3) Unit selection algorithms and speed-up. We
present a new unit selection system based on sta-
tistical modeling. We used weighted automata and
transducers for the representation of the compo-
nents of the system and designed a new and efficient
composition algorithm making use of string poten-
tials for their combination. The resulting statistical
unit selection is shown to be about 2.6 times faster
than the last release of the AT&T Natural Voices
Product while preserving the same quality, and of-
fers much flexibility for the use and integration of
new and more complex components.
2 Unit Selection Methods
2.1 Overview of a Traditional Unit Selection
System
This section describes in detail the cost functions
used in the AT&T Natural Voices Product that we
will use as the baseline in our experimental results,
see (Beutnagel et al, 1999a) for more details about
this system. In this system, unit selection is based
on (Hunt and Black, 1996) but using units corre-
sponding to halfphones instead of phones. Let U
be the set of recorded units. Two cost functions
are defined: the target cost Ct(fi, ui) is used to
estimate the mismatch between the features of the
feature vector fi and the unit ui; the concatena-
tion cost Cc(ui, uj) is used to estimate the smooth-
ness of the acoustic signal when concatenating the
units ui and uj . Given a sequence f = f1 . . . fn
of feature vectors, unit selection can then be formu-
lated as the problem of finding the sequence of units
u = u1 . . . un that minimizes these two costs:
u = argmin
u?Un
(
n?
i=1
Ct(fi, ui) +
n?
i=2
Cc(ui?1, ui))
In practice, not all unit sequences of a given length
are considered. A preselection method such as the
one proposed by (Conkie et al, 2000) is used. The
computation of the target cost can be split in two
parts: the context cost Cp that is the component of
the target cost corresponding to the phonetic con-
text, and the feature cost Cf that corresponds the
other components of the target cost:
Ct(fi, ui) = Cp(fi, ui) + Cf (fi, ui) (3)
For each phonetic context ? of length 5, a list L(?)
of the units that are the most frequently used in the
phonetic context ? is computed. For each feature
vector fi in f , the candidate units for fi are com-
puted in the following way. Let ?i be the 5-phone
context of fi in f . The context costs between fi and
all the units in the preselection list of the phonetic
context ?i are computed and the M units with the
best context cost are selected:
Ui = M-best
ui?L(?i)
(Cp(fi, ui))
The feature costs between fi and the units in Ui are
then computed and the N units with the best target
cost are selected:
U ?i = N-bestui?Ui
(Cp(fi, ui) + Cf (fi, ui))
The unit sequence u verifying:
u = argmin
u?U ?1???U ?n
(
n?
i=1
Ct(fi, ui) +
n?
i=2
Cc(ui?1, ui))
is determined using a classical Viterbi search. Thus,
for each position i, the N2 concatenation costs be-
tween the units in U ?i and U ?i+1 need to be com-
puted. The caching method for concatenation costs
proposed in (Beutnagel et al, 1999b) can be used to
improve the efficiency of the system.
2.2 Statistical Modeling Approach
Our statistical modeling approach was described
in Section 1. As already mentioned, our general
approach would consists of deriving both the tar-
get cost ? logP (f |u) and the concatenation cost
? logP (u) from appropriate training data using
general statistical methods. To simplify the prob-
lem, we will use the existing target cost provided by
the traditional unit selection system and concentrate
on the problem of estimating the concatenation cost.
We used the unit selection system presented in the
previous section to generate a large corpus of more
than 8M unit sequences, each unit corresponding to
a unique recorded halfphone. This corpus was used
to build an n-gram statistical language model us-
ing Katz backoff smoothing technique (Katz, 1987).
This model provides us with a new cost function, the
grammar cost Cg, defined by:
Cg(uk|u1...uk?1) = ? log(P (uk|u1...uk?1))
where P is the probability distribution estimated by
our model. We used this new cost function to re-
place both the concatenation and context costs used
in the traditional approach. Unit selection then con-
sists of finding the unit sequence u such that:
u = argmin
u?Un
n?
i=1
(Cf (fi, ui)+Cg(ui|ui?k . . . ui?1))
In this approach, rather than using a preselection
method such as that of (Conkie et al, 2000), we are
using the statistical language model to restrict the
candidate space (see Section 4.2).
3 Representation by Weighted Finite-State
Transducers
An important advantage of the statistical frame-
work we introduced for unit selection is that the re-
sulting components can be naturally represented by
weighted finite-state transducers. This casts unit se-
lection into a familiar schema, that of a Viterbi de-
coder applied to a weighted transducer.
3.1 Weighted Finite-State Transducers
We give a brief introduction to weighted finite-state
transducers. We refer the reader to (Mohri, 2004;
Mohri et al, 2000) for an extensive presentation of
these devices and will use the definitions and nota-
tion introduced by these authors.
A weighted finite-state transducer T is an 8-tuple
T = (?,?, Q, I, F,E, ?, ?) where ? is the finite
input alphabet of the transducer, ? is the finite out-
put alphabet, Q is a finite set of states, I ? Q the
set of initial states, F ? Q the set of final states,
E ? Q ? (? ? {}) ? (? ? {}) ? R ? Q a fi-
nite set of transitions, ? : I ? R the initial weight
function, and ? : F ? R the final weight function
mapping F to R. In our statistical framework, the
weights can be interpreted as log-likelihoods, thus
there are added along a path. Since we use the stan-
dard Viterbi approximation, the weight associated
by T to a pair of strings (x, y) ? ?? ? ?? is given
by:
[[T ]](x, y) = min
pi?R(I,x,y,F )
?[p[pi]] + w[pi] + ?[n[pi]]
where R(I, x, y, F ) denotes the set of paths from an
initial state p ? I to a final state q ? F with input
label x and output label y, w[pi] the weight of the
path pi, ?[p[pi]] the initial weight of the origin state
of pi, and ?[n[pi]] the final weight of its destination.
A Weighted automaton A = (?, Q, I, F,E, ?, ?)
is defined in a similar way by simply omitting the
output (or input) labels. We denote by ?2(T ) the
0 1a 2b 3c 4d
(a)
0
1a:x
5
a:u
2b:y
6b:v
3c:z 4d:t
7c:w 8a:s
(b)
0
1a:x
2
a:u
3b:y
4b:v
5c:z
6c:w
7d:t
(c)
Figure 1: (a) Weighted automaton T1. (b) Weighted
transducer T2. (c) T1 ? T2, the result of the compo-
sition of T1 and T2.
weighted automaton obtained from T by removing
its input labels.
A general composition operation similar to
the composition of relations can be defined for
weighted finite-state transducers (Eilenberg, 1974;
Berstel, 1979; Salomaa and Soittola, 1978; Kuich
and Salomaa, 1986). The composition of two trans-
ducers T1 and T2 is a weighted transducer denoted
by T1 ? T2 and defined by:
[[T1 ? T2]](x, y) = min
z???
{[[T1]](x, z) + [[T2]](z, y)}
There exists a simple algorithm for constructing
T = T1 ? T2 from T1 and T2 (Pereira and Riley,
1997; Mohri et al, 1996). The states of T are iden-
tified as pairs of a state of T1 and a state of T2. A
state (q1, q2) in T1?T2 is an initial (final) state if and
only if q1 is an initial (resp. final) state of T1 and q2
is an initial (resp. final) state of T2. The transitions
of T are the result of matching a transition of T1
and a transition of T2 as follows: (q1, a, b, w1, q?1)
and (q2, b, c, w2, q?2) produce the transition
((q1, q2), a, c, w1 + w2, (q?1, q?2)) (4)
in T . The efficiency of this algorithm was critical to
that of our unit selection system. Thus, we designed
an improved composition that we will describe later.
Figure 1(c) gives the resulting of the composition of
the weighted transducers given figure 2(a) and (b).
3.2 Language Model Weighted Transducer
The n-gram statistical language model we construct
for unit sequences can be represented by a weighted
automaton G which assigns to each sequence u its
log-likelihood:
[[G]](u) = ? log(P (u)). (5)
according to our probability estimate P . Since
a unit sequence u uniquely determines the corre-
sponding halfphone sequence x, the n-gram statis-
tical model equivalently defines a model of the joint
distribution of P (x, u). G can be augmented to
define a weighted transducer G? assigning to pairs
(x, u) their log-likelihoods. For any halfphone se-
quence x and unit sequence u, we define G? by:
[[G?]](x, u) = ? logP (u) (6)
The weighted transducer G? can be used to generate
all the unit sequences corresponding to a specific
halfphone sequence given by a finite automaton p,
using composition: p ? G?. In our case, we also wish
to use the language model transducer G? to limit the
number of candidate unit sequences considered. We
will do that by giving a strong precedence to n-
grams of units that occurred in the training corpus
(see Section 4.2).
Example Figure 2(a) shows the bigram model G
estimated from the following corpus:
<s> u1 u2 u1 u2 </s>
<s> u1 u3 </s>
<s> u1 u3 u1 u2 </s>
where ?s? and ?/s? are the symbols marking the
start and the end of an utterance. When the unit u1
is associated to the halfphone p1 and both units u1
and u2 are associated to the halfphone p2, the corre-
sponding weighted halfphone-to-unit transducer G?
is the one shown in Figure 2(b).
3.3 Unit Selection with Weighted Finite-State
Transducers
From each sequence f = f1 . . . fn of feature vec-
tors specified by the text analysis frontend, we can
straightforwardly derive the halfphone sequence to
be synthesized and represent it by a finite automa-
ton p, since the first component of each feature vec-
tor fi is the corresponding halfphone. Let W be the
weighted automaton obtained by composition of p
with G? and projection on the output:
W = ?2(p ? G?) (7)
W represents the set of candidate unit sequences
with their respective grammar costs. We can then
use a speech recognition decoder to search for the
best sequence u since W can be thought of as the
</s>
u3
</s>/0.703
.
?/3.647 u1
u1/0.703
</s>/1.466
u3/1.871
u1/0.955
u2
u2/1.466
u3/0.921
?/5.034
u2/0.514
</s>/0.410
?/4.053
u1/1.108
<s>
?/5.216
u1/0.003
</s>
u3
?:</s>/0.703
.
?:?/3.647 u1
p1:u1/0.703
?:</s>/1.466
p2:u3/1.871
p1:u1/0.955
u2
p2:u2/1.466
p2:u3/0.921
?:?/5.034
p2:u2/0.514
?:</s>/0.410
?:?/4.053
p1:u1/1.108
<s>
?:?/5.216
p1:u1/0.003
(a) (b)
Figure 2: (a) n-gram language model G for unit sequences. (b) Corresponding halfphone-to-unit weighted
transducer G?.
counterpart of a speech recognition transducer, f
the equivalent of the acoustic features and Cf the
analogue of the acoustic cost. Our decoder uses a
standard beam search of W to determine the best
path by computing on-the-fly the feature cost be-
tween each unit and its corresponding feature vec-
tor.
Composition constitutes the most costly opera-
tion in this framework. Section 4 presents several
of the techniques that we used to speed up that al-
gorithm in the context of unit selection.
4 Algorithms
4.1 Composition with String Potentials
In general, composition may create non-
coaccessible states, i.e., states that do not admit a
path to a final state. These states can be removed
after composition using a standard connection (or
trimming) algorithm that removes unnecessary
states. However, our purpose here is to avoid the
creation of such states to save computational time.
To that end, we introduce the notion of string
potential at each state.
Let i[pi] (o[pi]) be the input (resp. output) label of
a path pi, and denote by x ? y the longest common
prefix of two strings x and y. Let q be a state in a
weighted transducer. The input (output) string po-
tential of q is defined as the longest common prefix
of the input (resp. output) labels of all the paths in
T from q to a final state:
pi(q) =
?
pi??(q,F )
i[pi]
po(q) =
?
pi??(q,F )
o[pi]
The string potentials of the states of T can be com-
puted using the generic shortest-distance algorithm
of (Mohri, 2002) over the string semiring. They can
be used in composition in the following way. We
will say that two strings x and y are comparable if
x is a prefix of y or y is a prefix of x.
Let (q1, q2) be a state in T = T1 ? T2. Note
that (q1, q2) is a coaccessible state only if the out-
put string potential of q1 in T1 and the input string
potential of q2 in T2 are comparable, i.e., po(q1) is
a prefix of pi(q2) or pi(q2) is a prefix of po(q1).
Hence, composition can be modified to create only
those states for which the string potentials are com-
patible.
As an example, state 2 = (1, 5) of the transducer
T = T1 ? T2 in Figure 1 needs not be created since
po(1) = bcd and pi(5) = bca are not comparable
strings.
The notion of string potentials can be extended
to further reduce the number of non-coaccessible
states created by composition. The extended input
string potential of q in T , is denoted by p?i(q) and is
the set of strings defined by:
p?i(q) = pi(q) ? ?i(q) (8)
where ?i(q) ? ? and is such that for every ? ?
?i(q), there exist a path pi from q to a final state such
that pi(q)? is a prefix of the input label of pi. The ex-
tended output string potential of q, p?o(q), is defined
similarly. A state (q1, q2) in T1 ? T2 is coaccessible
only if
(p?o(q1) ? ??) ? (p?i(q2) ? ??) 6= ? (9)
Using string potentials helped us substantially im-
prove the efficiency of composition in unit selection.
4.2 Language Model Transducer ? Backoff
As mentioned before, the transducer G? represents
an n-gram backoff model for the joint probability
distribution P (x, u). Thus, backoff transitions are
used in a standard fashion when G? is viewed as an
automaton over paired sequences (x, u). Since we
use G? as a transducer mapping halfphone sequences
to unit sequences to determine the most likely unit
sequence u given a halfphone sequence x 1we need
to clarify the use of the backoff transitions in the
composition p ? G?.
Denote by O(V ) the set of output labels of a set
of transitions V . Then, the correct use derived from
the definition of the backoff transitions in the joint
model is as follows. At a given state s of G? and for
a given input halfphone a, the outgoing transitions
with input a are the transitions V of s with input
label a, and for each b 6? O(V ), the transition of the
first backoff state of s with input label a and output
b.
For the purpose of our unit selection system, we
had to resort to an approximation. This is because in
general, the backoff use just outlined leads to exam-
ining, for a given halfphone, the set of all units pos-
sible at each state, which is typically quite large.2
Instead, we restricted the inspection of the backoff
states in the following way within the composition
p ? G?. A state s1 in p corresponds in the composed
transducer p ? G? to a set of states (s1, s2), s2 ? S2,
where S2 is a subset of the states of G?. When
computing the outgoing transitions of the states in
(s1, s2) with input label a, the backoff transitions of
a state s2 are inspected if and only if none of the
states in S2 has an outgoing transition with input la-
bel a.
1This corresponds to the conditional probability P (u|x) =
P (x, u)/P (x).
2Note that more generally the vocabulary size of our statis-
tical language models, about 400,000, is quite large compared
to the usual word-based models.
4.3 Language Model Transducer ? Shrinking
A classical algorithm for reducing the size of an
n-gram language model is shrinking using the
entropy-based method of (Stolcke, 1998) or the
weighted difference method (Seymore and Rosen-
feld, 1996), both quite similar in practice. In our
experiments, we used a modified version of the
weighted difference method. Let w be a unit and
let h be its conditioning history within the n-gram
model. For a given shrink factor ?, the transition
corresponding to the n-gram hw is removed from
the weighted automaton if:
log(P? (w|h)) ? log(?hP? (w|h?)) ?
?
c(hw) (10)
where h? is the backoff sequence associated with h.
Thus, a higher-order n-gram hw is pruned when
it does not provide a probability estimate signifi-
cantly different from the corresponding lower-order
n-gram sequence h?w.
This standard shrinking method needs to be mod-
ified to be used in the case of our halfphone-to-unit
weighted transducer model with the restriction on
the traversal of the backoff transitions described in
the previous section. The shrinking methods must
take into account all the transitions sharing the same
input label at the state identified with h and its back-
off state h?. Thus, at each state identified with h in
G?, a transition with input label x is pruned when the
following condition holds:
?
w?Xxh
log(P? (w|h)) ?
?
w?Xxh?
log(?hP? (w|h?)) ?
?
c(hw)
where h? is the backoff sequence associate with h
and Xxk is the set of output labels of all the outgoing
transitions with input label x of the state identified
with k.
5 Experimental results
We used the AT&T Natural Voices Product speech
synthesis system to synthesize 107,987 AP news ar-
ticles, generating a large corpus of 8,731,662 unit
sequences representing a total of 415,227,388 units.
We used this corpus to build several n-gram Katz
backoff language models with n = 2 or 3. Ta-
ble 1 gives the size of the resulting language model
weighted automata. These language models were
built using the GRM Library (Allauzen et al, 2004).
We evaluated these models by using them to syn-
thesize an AP news article of 1,000 words, corre-
sponding to 8250 units or 6 minutes of synthesized
speech. Table 2 gives the unit selection time (in sec-
onds) taken by our new system to synthesize this AP
Model No. of states No. of transitions
2-gram, unshrunken 293,935 5,003,336
3-gram, unshrunken 4,709,404 19,027,244
3-gram, ? = ?4 2,967,472 14,223,284
3-gram, ? = ?1 2,060,031 12,133,965
3-gram, ? = 0 1,681,233 10,217,164
3-gram, ? = 1 1,370,220 9,146,797
3-gram, ? = 4 934,914 7,844,250
Table 1: Size of the stochastic language models for
different n-gram order and shrinking factor.
Model composition search total time
baseline system - - 4.5s
2-gram, unshrunken 2.9s 1.0s 3.9s
3-gram, unshrunken 1.2s 0.5s 1.7s
3-gram, ? = ?4 1.3s 0.5s 1.8s
3-gram, ? = ?1 1.5s 0.5s 2.0s
3-gram, ? = 0 1.7s 0.5s 2.2s
3-gram, ? = 1 2.1s 0.6s 2.7s
3-gram, ? = 4 2.7s 0.9s 3.6s
Table 2: Computation time for each unit selection
system when used to synthesize the same AP news
article.
news article. Experiments were run on a 1GHz Pen-
tium III processor with 256KB of cache and 2GB of
memory. The baseline system mentioned in this ta-
ble is the AT&T Natural Voices Product which was
also used to generate our training corpus using the
concatenation cost caching method from (Beutnagel
et al, 1999b). For the new system, both the compu-
tation times due to composition and to the search
are displayed. Note that the AT&T Natural Voices
Product system was highly optimized for speed. In
our new systems, the standard research software li-
braries already mentioned were used. The search
was performed using the standard speech recog-
nition Viterbi decoder from the DCD library (Al-
lauzen et al, 2003). With a trigram language model,
our new statistical unit selection system was about
2.6 times faster than the baseline system.
A formal test using the standard mean of opinion
score (MOS) was used to compare the quality of the
high-quality AT&T Natural Voices Product synthe-
sizer and that of the synthesizers based on our new
unit selection system with shrunken and unshrunken
trigram language models. In such tests, several lis-
teners are asked to rank the quality of each utterance
from 1 (worst score) to 5 (best). The MOS results of
the three systems with 60 utterances tested by 21 lis-
teners are reported in Table 3 with their correspond-
Model raw score normalized score
baseline system 3.54? .20 3.09? .22
3-gram, unshrunken 3.45? .20 2.98? .21
3-gram, ? = ?1 3.40? .20 2.93? .22
Table 3: Quality testing results: we report for each
system, the mean and standard error of the raw and
the listener-normalized scores.
ing standard error. The difference of scores between
the three systems is not statistically significant (first
column), in particular, the absolute difference be-
tween the two best systems is less than .1.
Different listeners may rank utterances in dif-
ferent ways. Some may choose the full range of
scores (1?5) to rank each utterance, others may se-
lect a smaller range near 5, near 3, or some other
range. To factor out such possible discrepancies in
ranking, we also computed the listener-normalized
scores (second column of the table). This was done
for each listener by removing the average score over
the full set of utterances, dividing it by the stan-
dard deviation, and by centering it around 3. The
results show that the difference between the normal-
ized scores of the three systems is not significantly
different. Thus, the MOS results show that the three
systems have the same quality.
We also measured the similarity of the two best
systems by comparing the number of common units
they produce for each utterance. On the AP news ar-
ticle already mentioned, more than 75% of the units
were common.
6 Conclusion
We introduced a statistical modeling approach to
unit selection in speech synthesis. This approach is
likely to lead to more accurate unit selection sys-
tems based on principled learning algorithms and
techniques that radically depart from the heuristic
methods used in the traditional systems. Our pre-
liminary experiments using a training corpus gener-
ated by the AT&T Natural Voices Product demon-
strates that statistical modeling techniques can be
used to build a high-quality unit selection system.
It also shows other important benefits of this ap-
proach: a substantial increase of efficiency and a
greater modularity and flexibility.
Acknowledgments
We thank Mark Beutnagel for helping us clarify
some of the details of the unit selection system in
the AT&T Natural Voices Product speech synthe-
sizer. Mark also generated the training corpora and
set up the listening test used in our experiments.
We also acknowledge discussions with Brian Roark
about various statistical language modeling topics
in the context of unit selection.
References
Cyril Allauzen, Mehryar Mohri, and Michael
Riley. 2003. DCD Library - Decoder Li-
brary, software collection for decoding and re-
lated functions. In AT&T Labs - Research.
http://www.research.att.com/sw/tools/dcd.
Cyril Allauzen, Mehryar Mohri, and Brian
Roark. 2004. A General Weighted Gram-
mar Library. In Proceedings of the Ninth
International Conference on Automata (CIAA
2004), Kingston, Ontario, Canada, July.
http://www.research.att.com/sw/tools/grm.
Jean Berstel. 1979. Transductions and Context-
Free Languages. Teubner Studienbucher:
Stuttgart.
Mark Beutnagel, Alistair Conkie, Juergen
Schroeter, and Yannis Stylianou. 1999a.
The AT&T Next-Gen system. In Proceedings of
the Joint Meeting of ASA, EAA and DAGA, pages
18?24, Berlin, Germany.
Mark Beutnagel, Mehryar Mohri, and Michael Ri-
ley. 1999b. Rapid unit selection from a large
speech corpus for concatenative speech synthesis.
In Proceedings of Eurospeech, volume 2, pages
607?610.
Ivan Bulyko and Mari Ostendorf. 2001. Unit selec-
tion for speech synthesis using splicing costs with
weighted finite-state trasnducers. In Proceedings
of Eurospeech, volume 2, pages 987?990.
Alistair Conkie, Mark Beutnagel, Ann Syrdal, and
Philip Brown. 2000. Preselection of candidate
units in a unit selection-based text-to-speech syn-
thesis system. In Proceedings of ICSLP, vol-
ume 3, pages 314?317.
Samuel Eilenberg. 1974. Automata, Languages
and Machines, volume A. Academic Press.
Andrew Hunt and Alan Black. 1996. Unit selec-
tion in a concatenative speech synthesis system.
In Proceedings of ICASSP?96, volume 1, pages
373?376, Atlanta, GA.
Frederick Jelinek. 1976. Continuous speech recog-
nition by statistical methods. IEEE Proceedings,
64(4):532?556.
Slava M. Katz. 1987. Estimation of probabilities
from sparse data for the language model com-
ponent of a speech recogniser. IEEE Transac-
tions on Acoustic, Speech, and Signal Processing,
35(3):400?401.
Werner Kuich and Arto Salomaa. 1986. Semir-
ings, Automata, Languages. Number 5 in EATCS
Monographs on Theoretical Computer Science.
Springer-Verlag, Berlin, Germany.
Mehryar Mohri, Fernando C. N. Pereira, and
Michael Riley. 1996. Weighted automata in text
and speech processing. In Proceedings of the
12th European Conference on Artificial Intelli-
gence (ECAI 1996), Workshop on Extended fi-
nite state models of language, Budapest, Hun-
gary. John Wiley and Sons, Chichester.
Mehryar Mohri, Fernando C. N. Pereira, and
Michael Riley. 2000. The Design Principles
of a Weighted Finite-State Transducer Library.
Theoretical Computer Science, 231(1):17?32.
http://www.research.att.com/sw/tools/fsm.
Mehryar Mohri. 2002. Semiring Frameworks
and Algorithms for Shortest-Distance Problems.
Journal of Automata, Languages and Combina-
torics, 7(3):321?350.
Mehryar Mohri. 2004. Weighted Finite-State
Transducer Algorithms: An Overview. In Car-
los Mart??n-Vide, Victor Mitrana, and Gheorghe
Paun, editors, Formal Languages and Applica-
tions, volume 148, VIII, 620 p. Springer, Berlin.
Eric Moulines and Francis Charpentier. 1990.
Pitch-synchronous waveform processing tech-
niques for text-to-speech synthesis using di-
phones. Speech Communication, 9(5-6):453?
467.
Fernando C. N. Pereira and Michael D. Riley. 1997.
Speech Recognition by Composition of Weighted
Finite Automata. In Finite-State Language Pro-
cessing, pages 431?453. MIT Press.
Arto Salomaa and Matti Soittola. 1978. Automata-
Theoretic Aspects of Formal Power Series.
Springer-Verlag: New York.
Kristie Seymore and Ronald Rosenfeld. 1996.
Scalable backoff language models. In Pro-
ceedings of ICSLP, volume 1, pages 232?235,
Philadelphia, Pennsylvania.
Andreas Stolcke. 1998. Entropy-based pruning
of backoff language models. In Proc. DARPA
Broadcast News Transcription and Understand-
ing Workshop, pages 270?274.
Yannis Stylianou, Thierry Dutoit, and Juergen
Schroeter. 1997. Diphone conactenation using
a harmonic plus noise model of speech. In Pro-
ceedings of Eurospeech.
Jon Yi, James Glass, and Lee Hetherington. 2000.
A flexible scalable finite-state transducer archi-
tecture for corpus-based concatenative speech
synthesis. In Proceedings of ICSLP, volume 3,
pages 322?325.
