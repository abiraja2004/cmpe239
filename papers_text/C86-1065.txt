A MORPHOLOGICAL RECOGNIZER WITH SYNTACTIC AND 
PHONOLOGICAL RULES 
John Bear 
Artificial Intell igence Center  
SRI Internat ional  
333 Ravenswood Ave 
Menlo Park, CA 94025 
U.S.A. 
Abstract 
This paper describes a morphological nalyzer which, when pars- 
ing a word, uses two sets of rules: rnles describing the syntax of 
words, and rules describing facts about orthography. 
1 Introduction t
In many natural language processing systems currently in use, 
the morphological phenomena re handled by programs which 
do not interpret any sort of rules, but rather contain references 
to specific morphemes, graphemes, and grammatical categories. 
Recently Kaplan, Kay, Koskennicmi, and Karttunen have shown 
how to construct morphological analyzers in which the descrip- 
tions of the orthographic and syntactic phenomena are separable 
from the code. This paper describes a system that builds on 
their work in the area of phonology/orthography and also has 
a well defined syntactic omponent which applies to the area of 
computational morphology for the first time some of the tools 
that have bccn used in syntactic analysis for quite a while. 
This paper has two main parts. The first deals with the or- 
thographic aspects of morphological analysis, the second with 
its syntactic aspects. The orthographic phenomena constitute 
a blend of phonology and orthography. The orthographic rules 
given in this paper closely resemble phoImlogical rules, both in 
form and fimctlon, but because their purpose is the description of 
orthographic facts, the words orthography and orthographic will 
be used in preference to phonology and phonological. 
The overall goal of the work described herein is the devel- 
opment of a flexible, usable morphological analyzer in which the 
rules for both syntax and spelling arc (1) separate from the code, 
and (2) descriptively powerful enough to handle the phenomena 
encountered when working with texts of written language. 
2 Orthography 
The researchers mentioned above use finite-state transducers for 
stipulating correspondences between surface segments, and un- 
derlying segments. In contrast, the system described in this pa- 
ll am indebted to Lauri Karttunen and Fernando Pereir~ for all their 
help. Laurl supplied the initial English automat~ on which the orthographic 
grammar was based, while Fernando furnished some of the Prolog code. Both 
provided many helpful suggestion~ and explanations as well. I would also like 
to thank Kimmo Koskennlemi for his comments on an earlier draft of this 
paper. 
This research was supported by the following grants: Naval Electronics 
Systems Command N00039-84-K-0078; Navelex N00039-84-C-0524 P00003; 
Office of Naval Research N00014-85-C-0013. 
per does not use finite state machines. Instead, orthographic 
rules are interpreted irectly, as constraints on pairings of sur- 
face strings with lexieal strings. 
Tile rule notation employed, including conventions for express- 
ing abbreviations, is based on that described in Koskenniemi 
\[1983,1984\]. Tile rules actually used in this system are based on 
tile account of English in Karttunen and Wittenburg \[1983\]. 
2.1 Rules 
What follows is an inductive introduction to the types of rules 
needed. Some pertinent data will be presented, then some po- 
tential rules for handling these data. We shall also discuss the 
reasons for needing a weaker form of rule and indicate what it 
might look like. 
Let us first consider some data regarding English /s /  mor- 
phemes: 
ALWAYS -ES 
box+s ~--~ boxes 
class+s ~ classes 
fizz+s ~ fizzes 
spy+s *----* spies 
ash+s ~ ashes 
ehureh+s ~---o churches 
ALWAYS -S 
slam+s ~ slams 
hit+s ~ hits 
t ip+s *---* tips 
SOMETIMES -ES, 
SOMETIMES -S 
piano+s ~ pianos 
solo+s ~ solos 
do+s ~ does 
potato+s ~ potatoes 
banjo+s ~ banjoes or banjos 
cargo+s ~ cargoes or cargos 
Below are presented two possible orthographic rules for de- 
scribing the foregoing data: 
tu )  + - - - ,  c {x I z I y / i  I s (h) I c h} _ s 
p~2) + - - -*  e {x I z I y / i  I s (h) I e h I o} _ s 
The first of these rules will be shown to be too weak; the second, 
in contrast, will be shown to be too strong. This fact will serve 
as an argument for introducing a second kind of rule. 
272 
Before describing how the rules should be read, it is necessary 
to define two technical terms. In phonology, one speaks of under- 
lying segments and surface segments; in orthography, characters 
making up the words in the lexicon contrast with characters in 
word forms that occur in texts. The term lezical character will 
be used here to refer to a character in a word or morpheme in 
tile lexicon, i.e., the analog of a phonological underlying segment. 
Tile term sat\[ace character will be used to mean a character in a 
word that could appear in text. For example, \[1 o v e + e d\] is a 
string of lexieal characters, while \[I o v e d\] is a string of surface 
characters. 
We may now describe how the rules should be read. The first 
rule should be read roughly as, "a morpheme boundary \[+\] at the 
lexical level corresponds to an \[el at the surface level whenever 
it is between an \[x\] and an \[s\], or between a \[z\] and an \[s\], or 
between a lcxical \[y\] corresponding to a surface \[i\] and an \[s\], or 
between an \[ s h\] and an \[s\] or between a\[e h\] and an \[s\]." This 
means, for instance, that the string of lexical characters \[c h u r 
e h + s\] corresponds to the string of surface characters \[c h u r c 
h e s\] (forgetting for the moment about the possibility that other 
rules might also obtain). The second rule is identical to the first 
except for an added \[o\] in tile left context. 
When we say \[+\] corresponds to \[el between an lxl and an N, 
we mean between a Icxical I x\] corresponding to a surface lxl and 
a lexical Is\] corrcsponding to a surface \[s\]. If we wantcd to say 
that it does not matter what the lexieal \[x\] corresponds to on the 
surface, we would use \[x/=\] instead of just ix\]. 
The rules given above get tile facts right for the words that 
do not end in \[o\]. For those that do, however, Rule 1 misses 
on \[do+s\] ~-~ \[docs\], \[potato+s\[ ?=~ \[potatoes\]; Rule 2 misses 
on \[piano+s\] ~ \[pianos\], \[solo+s\] ~:~ \[solos\[. Furthermore, 
neither ule allows for the possibility of more than one acceptable 
form, as in \[banjo+s\] ~ (\[banjoes\] or \[banjos\]), \[cargo+s\] 
(\[cargoes\] or \[cargos\]). 
The words ending in \[o\] can be divided into two classes: those 
that take an \[es\] in their plural and third-person singular forms, 
and those that just take an \[s\]. Most of the facts could be de- 
scribed correctly by adopting one of the two rules, e.g., the one 
stating that words ending in \[o\] take an \[es\] ending. In addition 
to adopting this rule, one wouhl need to list all the words taking 
an \[s\] crating as being irregular. This approach has two prob- 
lems. First, no matter which rule is chosen, a very large number 
of words wouht have to bc listed in the lexicon; second, this ap- 
proach does not account for the cocxlstcnce of two alternative 
forms for some words, e.g., \[banjoes\] or \[banjos\]. 
The data and arguments just given suggest he need for a sec- 
ond type of rule. It would stipulate that such and such a corre- 
spondence is allowed but not required. An example of such a rule 
is given below: 
R3) +/c  allowed in context o _ s. 
Rule 3 says that a morpheme boundary may correspond to an 
\[el between an \[o\] and an \[s\]. It also has the effect of saying that 
if a morphcme boundary ever corresponds to an \[c\], it must be 
in a context hat is explicitly allowed by some rule. 
If we now have the two rules R1 and R3, 
R1) 4- ~e/  {x lz  \ [y / \ [ I s (h )  \ [eh}  - s  
R3) +\]e allowed in context o _ s, 
we can generate all the correct forms for the data given. Further- 
more, for the words that have two acceptable forms for plural or 
third person sing-ular, we get both, just as we would like. The 
problem is that we generate both forms whether we want them 
or not. Clearly some sort of restriction on the rules, or "fine 
tuning," is in order; for the time being, however, the problem of 
deriving both forms is not so serious that it cannot be tolerated. 
So far we have two kinds of rules, those stating that a cor- 
respondence always obtains in a certain environment, and those 
stating that a correspondence is allowed to obtain in some en- 
vironment. The data below argue for one more type of rule, 
namely, a rule stipulating that a certain correspondence n ver 
obtains in a certain environment. 
DATA FOR CONSONANT DOUBLING 
DOUBLING: 
bar+ed ~ barred 
big+est ~ biggest 
refer+ed +---~ referred 
NO DOUBLING: 
question+ing ,---4 questioning 
hear+ing ~ hearing 
hack+ing ~ hacking 
BOTH POSSIBILITIES: 
travel+ed ~ (travelled or traveled) both are allowed 
In English, final consonants are doubled if they, "follow a single 
\[orthographic\] vowel and the vowel is stressed." \[from l{arttunen 
and Wittenbnrg 1983\]. So for instance, in \[hear+ing\], thc final \[r I 
is preceded by two vowels, so there is no doubling. In \[haek+ing\], 
the final \[k\] is not preceded by a vowel, so there is no doubling. 
In \[question+lug\], the last syllable is not stressed so again there 
is no doubling. 
In Karttunen and Wittenlmrg \[1983\] there is a single rule listed 
to describe the data. llowever, the rule makes use of a diacritic 
(') for showing stress, and words in the lexicon must contain this 
diacritic in order for the rule to work. The same thing could 
be done in the system being described here, but it was deemed 
undesirable to allow words in the lexicon to contain diacritics en- 
coding information such as stress. Instead, the following rules are 
used. Ultimately, the goal is to have some sort of general mech- 
anism, perhaps negative rule features, for dealing with this sort 
of thing, but for now no such mechanism has been implemented. 
RULES FOR CONSONANT DOUBLING 
"Allowed-type" rules 
'+ ' /b  allowed in context vV b _ vV z 
'+ ' / c  allowed in context vV c _ vV 
'+ ' /d  allowed in contexl vV d vV 
'+ ' / f  allowed in context vV f _ vV 
'+ ' /g  allowed in context vV g _ vV 
'+' / I  allowed in context vV I vV 
'+ ' /m allowed in context vV m _ vV 
'+ ' /n  allowed in context vV n _ vV 
'+ ' /p  allowed in context vV p _ vV 
'+ ' / r  allowed in context vV r _ vV 
'+ ' / s  allowed in context vV s _ vV 
'+'It allowed in context vV t _ vV 
'+ ' / z  allowed in context vV z _ vV 
"Disallowed-type" rules 
'+ ' /b  disallowed in context vV vV h _ vV 
'+ ' /c  disallowed in context vV vV c _ vV 
'+ ' /d  disallowed in context vV vV d _ vV 
2In these rules, the symbol vV stands for any element of the following set 
of orthographic vowels: {a,e,i,o,u}. 
273 
'+ ' / f  disallowed in context vV vV f _ vV 
'+ ' /g  disallowed in context vV vV g _ vV 
'+'/1 disallowed in context vV vV l vV 
'+ ' /m disallowed in context vV vV m _ vV 
'+'In disallowed in context vV vV n _ vV 
'+'/p disallowed in context vV vV p vV 
'+ ' / r  disallowed in context vV vV r _ vV 
'+ ' / s  disallowed in context vV vV s _ vV 
'+ ' / t  disallowed in context vV vV t _ vV 
'+'/z disallowed in context vV vV z _ vV 
The allowed-type rules in tile top set are those that license 
consonant doubling. The disallowed-type rules in the second set 
constrain the doubling so it does not occur in words like \[eat+ing\] 
?:==> \[eating\] and \[hear+ing\] ?====~ \[hearing I. The disallowed-type 
rulcs say that a morpheme boundary \[+\] may not ever correspond 
to a consonant when tile \[+\] is followed by a vowel and preceded 
by that same consonant and then two more vowels. 
The rules given above suffer from the same problem as the 
previous rules, namely, over generation. Although they produce 
all the right answers and allow nmltiple forms for words like 
\[travel+er\] ~ (\[traveller\] or \[traveler\]), which is certainly a 
positive result, they also allow multiple forms for words which do 
not allow them. For instance they generate both \[referred\] and 
\[refered\]. As mentioned earlier, this problem will be tolerated for 
the time being. 
2.2 Compar i son  w i th  Koskenn iemi ' s  Rules  
Koskenniemi \[1983, 1984\] describes three types of rules, as exem- 
plified below: 
R4) a > b :=:*- c/d c / f -  g/h i/j 
RS) a > b ~= old e/f- g/h i/j 
R6) a > b ~ e/d e l l -  g/h i/j. 
Rule R4 says that if a lexical \[a\] eorresponds to a surface \[b\], 
then it must be within tile context given, i.e., it must be preceded 
by \[c/d eft\] and followed by \[g/h i/j|. This corresponds exactly 
to tile rule given below: 
RV) a/b allowed in context old e/ f_  g/h i/j. 
The rule introduced as R5 and repeated below says that if a 
lexieal \[a\] occurs following \[c/d e/f|  and preceding \[g/h i/j|, then 
it must correspond to a surface \[b\]: 
RS) a > b e-= e/d e/ f_  g/h i/j. 
'rhe corresponding rule in the formalism being proposed here 
would look approximately ike this: 
R10) a/sS disallowed in context e/d c / f -  g/h i/j, 
where sS is some set of characters to which 
\[a\] 
can correspond that does not include \[b\]. 
A comparison of each system's third type of rule involves com- 
post|on of rules and is the subject of the next section. 
2.3  Ru le  Compos i t ion  and  Decompos i t ion  
In Koskennlemi's systems, rule composition is fairly straightfor- 
ward. Samples of the three types of rules are repeated here: 
R4) a>b=:~e/de / f  g /h i / j  
R5) a > b ?=== e/d e/ f_  g/h i/j 
R6) a > b ~ e/d e / f _  g/h i/j 
If a grammar contains the two rules, R4 and RS, they can be 
replaced by tile single rule R6. 
In contrast, the composition of rules in the system proposed 
here is slightly more complicated. We need the notion of a default 
correspondence. The default correspondence for any alphabetic 
character is itself. In other words, in the absence of any rules, 
an alphabetic haracter will correspond to itself. There may also 
be characters that are not alphabetic, e.g., the \[+\] representing a 
morpheme boundary, currently the only non-alphabetic charac- 
ter in this system. Other conceivable non-alphabetic characters 
would be an accent mark for representing stress, or say, a hash 
mark for word boundarics. The default for these characters is 
that they correspond to 0 (zero). Zero is ttle name for the null 
character used ill this system. 
Now it is easy to say how rules are composed in this system. 
If a grammar contains both Rl l  and RI 2 bclow, {qlen RI3 may 
be substituted for them with the same effect: 
Rl l )  a/b allowed it, context e/d e/f g/h i/j 
R12) a /"a 's  default" disallowed in context e/d e/f g/h 
~/j 
R13) a~b/c /de / f  g /h i / j  
In fact, when a file of rules is read into the system, oCCUl'rence:~ of 
rules like RI3 are internalized as if the grammar eally contained 
a rule like Rl l  and another like R12. 
2.4  Us ing  the  Ru le~ 
Again consider for an example tile rule R1 repeated below. 
R1) +- -~ e /  {x I z lY / i  \[s (h) \ [oh} _s 
When this rule is read in, it is expanded into a set of rules 
whose contexts do not contain disjunction or optionality. Rules 
R14 through R19 are the result of the expansion: 
R14) '+ '  - -~ e / x s 
R15) '+ '  ~e  / z_s  
R16) '+'  - -~ e / y / i _  s 
R17) '+'  - - *  e \] s s 
i2.18)'+' ~e/sh  s 
R19) '+ '  ~e/eh  _s. 
R14 through R19 arc in turn expanded automatically into R20 
through R31 below: 
R20) '+ ' /0  disallowed in context x _ s 
R21) %' /0  disallowed in context z _ s 
R22) '+ ' /0  disallowed in context y/i .. s 
R23) '+ ' /0  disallowed ill context s - s 
R24) '+ ' /0  disallowed in context s h : s 
R25) '+ ' /0  disallowed in context c h _ s 
R26) '+ ' /e  allowed ill context x _ s 
R27) '+ ' /e  allowed in context z _ s 
R28) '+ ' /e  allowed in context y/ i  - s 
R29) '+ ' /e  allowed in context s _ s 
R30) '+ ' /e  allowed in context s h - s 
R31) '+ ' /e  allowed in context e h _ s. 
274 
The disallowed-type rules given here stipulate that a mor- 
pheme boundary, lexieal \[+\], may never be paired with a mill 
surface character, \[0\], in the environments indicated. Another 
way to de.scribe what disallowed-type rules do, in general, is to 
say that they expressly rule out certain sequences of pairs of 
letters. For example, R20 
R20) +/0  disallowed in cantext x _ s 
states that the sequence 
. , ,X  '-}" 8 . , .  
I I I  
. . .X0S . . .  
is never permitted to be a part of a mapping of a surface string 
to a lexical string. 
The allowed-type rules behave sfightly differently than their 
disallowed-type counterparts. A rule such as 
R26) '+'/e allowed in context x _ s, 
says that lexieal \[+\] is not normally allowed to correspond to sur- 
face Ie\]. It also affirms that lexical \[q-\] may appear between as 
Ix| and a~t Is|. Other rules starting with tbe same pair say, in ef- 
fect, "here is another cnvirmuncnt where this pair is acceptable." 
The way these rules are to be interpreted is that a rule's main 
correspondence, i.e., the character pair that corresponds to the 
underscore in tile context, is forbidden except in contexts where 
it is expressly permitted by some rnle. 
Once the rules are broken into the more primitive allowed-type 
and disallowed-type rules, there are several ways in which one 
could try to match them against a string of surface characters 
in tile recognition process. One way wonld be to wait until a 
pair of characters was encountered that was the main pair for a 
rule, and tficn look backwards to see if the left context of the 
rule matches the current analysis path. If it does, put the right 
context on hold to see whether it will ultimately be matched. 
Another posslblility would be to continually keel) track of the 
left contexts of rnles that are matching the characters at hand, 
so that when tbe main character of a rule is encountered, the 
program already knows that the left context has been matched. 
The right context still needs to be pnt on hold and dealt with 
the same way as in the other scheme. 
The second of the two strategies i the one actually employed 
in this system, though it may very well turn out that the first 
one is more efficient for the current grammar of English. 
2.5  Poss ib le  Correspondences  
The rules act as filters to weed out seqnenees of character pairs, 
but before a particular mapping can bc weeded out, somcthlng 
needs to propose it ~s being possible. There is a list called a 
list of l)ossible correspondences, or sometimes, a list of feasible 
pairs - that tells which characters may correspond to which 
others. Using this list, the ri:cognizer generates l)ossible Icxica\] 
forms to correspond to tile input surface form. These can then bc 
checked against he rules and against he lexicon. If tim rules (1o 
not weed it out, and it is also in the lexicon, we have successfully 
recognized a morpheme. 
3 Syntax  
The goal of the work being deserlbcd was an analyzer that would 
be easy to use. In the area of syntax, this entails two subgoal.s. 
First, it should be easy to specify which morphemes may com- 
bine with which, and second, when tile recognition tlas been com- 
pleted, the result shnuld be something that can easily be used by 
a parser or some other program. 
Karttunen \[1983\] and Karttlmen and Wittenburg \[1983\] have 
some suggestions for what a proper syntactic component for 
a morphological analyzer might contain. They mention using 
context-free rules and some sort of feature-handling system as 
possible extensions of both their and Koskenniemi's systems. In 
short, it has been acknowledged that any such system really 
ought to have some of the tools that have been used in syntax 
proper. 
The first course of action that was followed in building this 
analyzer was to implement a unification system for (lags (directed 
acyclie graphs), and then to have the analyzer unify the dags of 
all tile morphemes encountered in a single analysis. That scheme 
turned out to be too weak to be practical. The next step was to 
implement a PATR rule interpreter \[Shieber, et al 1983\] so that 
selected paths of dags could bc unified. Finally, when that turned 
out to be still less flexible than one would like, tile capability of 
handling disjunction in the dags was added to the unification 
package, and the PATR rule interpreter \[Karttnncn i984\]. 
The rules look like PA'I'R rules with tile context free skeleton. 
The first two lines of a rule are just a comment, however, and 
are not used in doing the analysis. The recognizer starts with 
the (lag \[cat: empty\]. The rnle below states that the "empty" 
dag may be combined with the (lag from a verb stem to produce 
a dag for a verb. 
% verb ~ emllty + verb stem 
% 1 2 3 
<2 cat> = empty 
<3 cat> = verb_stem 
<3 type> = regular 
<1 type> = <3 type> 
<l  cat> = verb 
<1 word> = <3 lex> 
<l  form> = {inf 
tense: pres 
pers: {1 ~} 1}. 
The resulting dag will he a.mbigatous between an infinitive verh, 
and a l)rcsent tense verb that is in clther the first or second 
person. (The braces in tim rule arc the indicators of disjunction.) 
The verb stem's value for the feature Icx will be whatever spelling 
tile stem has. This value will then I)e the value for the fl~at~u'e 
word in the new (lag. 
The analyzer applies these rules in a w~ry simple wrff. It al- 
ways carries along a (lag representing the results found t, hns far. 
Initially this dag is \[cat: empty\]. When a morpheme is fonnd, tile 
analyzer tries to combine it, via a rule, with the (lag it has been 
carrying along. If tile rule succeeds, a new (lag is produced and 
becomes the (lag carried along by the analyzer. In this way tile 
information about which morpbentes have been fonnd is propa- 
gated. 
If an ling| is encountered after a verb has been found, the 
following rule builds the new (lag. It first makes sure that the 
verb is infinitive (form: inf) so that tile suffix cannot be added 
onto the end of a past participle, for instance, and then makes 
the  tense of the new dag be pres part for present participle. The 
category of the new dag is verb, and the value for word is the 
same as it was in the original verb's dag. The form of the input 
verb is a disjunction of inf (infinitive) with \[tcnsc: prcs, pets: {1 
2}\], so the unification succeeds. 
275 
% verb ~ verb + ing 
% 1 ~. 3 
<2 cat> = verb 
<3 lex> =ing  
<2 form> = inf 
<1 eat> = verb 
<1 word> = <2 word> 
<1 form> = \[tense: pres-part\] . 
The system also has a rule for combining an infinitive verb with 
the nominalizing \[er\] morpheme, .g., swim : swimmer. This rule, 
given below, also checks the form of the input verb to verify that 
it is infinitive, it makes the resnlting dag have category: noun, 
number: singular, and so on. 
% noun - -~ verb + er 
% 1 2 3 
<2 cat> = verb 
<3 lex> -- er 
<2 form> = inf 
<1 cat> --- noun 
<1 word> = <2 word> 
<1 nbr> = sg 
<1 pers> = :3 . 
The noun thus formed behaves just the same as other nouns. 
In particular, a pluralizing Is\] may be added, or a possessive \['s\], 
or any other affix that can be appended to a noun. 
There are other rules in the grammar for handling adjective 
endings, more verb endings, etc. Irregular forms are handled in 
a fairly reasonable way. The irregular nouns are listed in the 
lexicon with form: irregular. Other rules than the ones shown 
here refer to that feature; they prevent tile addition of plural 
morphemes to words that are already plural. Irregular verbs 
are listed in the lexicon with an appropriate value for tense (not 
unifiable with inf) so that the test for infinitivcness will fail when 
it should. Irregular adjectives, e.g. good, better, best are dealt 
with in an analogous manner. 
4 Fur ther  Work  
There are still some things that are not as straightforward asone 
would like. In particular, consider the following example. Let 
us suppose as a first approximation that one wanted to analyze 
the \[un\] prefix in English as combining with adjectives to yield 
new ones, e.g., unfair, unclear, unsafe. Suppose also that one 
wanted to be able to build past participles of transitive verbs 
(passives) into adjectives, so that they could combine with \[tin\], 
a.~ in uncovered, unbuilt, unseen. 
What we would need, would be a rule to combine an "empty" 
with an \[un\] to make an \[un\] and then a rule to combine an \[un\] 
with a verb stem to form a thingl, and finally a rule to combine a
thingl with a past participle marker to form a negative adjective. 
More rules would be needed for the case where \[un\] combines with 
an adjective stem like \[fair\]. In addition, rules would be needed 
for irregular passives, etc. 
In short, without a more sophisticated control strategy, the 
grammar would contain a fair amount of redundancy if one really 
attempted to handle English morphology in its entirety. How- 
ever, on a more positive note, the rules do allow one to deal 
effectively and elegantly with a sufficient range of phenomena to 
make it quite acceptable as, for instance, an interface between a
parser and its lexicon. 
5 Conc lus ion  
A morphological analyzer has been presented that is capable of 
interpreting both orthographic and syntactic rules. This rep- 
resents a substantial improvement over the method of incorpo- 
rating morphological facts directly into the code of an analyzer. 
The use of these rules leads to a powerful, flexible morphological 
analyzer. 
References 
\[1\] Karttunen, L. (1983) "Kimmo: A General Morphologi- 
cal Processor," in Tezas Linguistic Forum #22, Dalrymple 
et al, eds., Linguistics Department, University of Texas, 
Austin, Texas. 
\[2\] Karttunen, L. (1984) "Features and Values," in COLING 
84. 
\[3\] Karttunen, L. and K. Wittenburg (1983) "A Two-level Mor- 
phological Analysis Of English," in Texas Linguistic Forum 
#22, Dalrymple et al, eds., Linguistics Department, Uni- 
versity of Texas, Austin, Texas. 
\[4\] Kay, M. (1983) "When Meta-rules are not Meta-rules," in 
K. Sparcke-Jones, and Y. Wilkes, eds. Automatic Natural 
Language Processing, Jotm Wiley and Sons, New York. 
\[5\] Koskenniemi, K. (1983) "Two-level Model for Morphological 
Analysis," IJCAI 83, pp.'683-685. 
\[6\] Koskennlemi, K. (1984) "h General Computatlona\] Model 
for Word-form Recognition and Production, ~ COLING 84, 
pp. 178-181. 
\[7\] Selkirk, E. (1982) The Syntaz of Words, MIT Press. 
\[8\] Shieber, S., It. Uszkoreit, F. Percira, J. Robinson, and 
M Tyson (1983) "The Formalism and hnplementation of
PATR-II," in B. Grosz, and M. Stiekcl (1983) Research on 
Interactive Acquisition and use of Knowledge, SRI Final Re- 
port 1894, SRI International, Menlo Park, California. 
276 
