Tree Ad jo in ing  and  Head Wrapp ing~ 
K. Vijay-Shanker David J. Weir Aravind K. Joshi 
Department of Computer and Information Science 
University of Pennsylvania 
Philadelphia, PA 19104 
Abstract 
In this paper we discuss the formal relationship between 
the classes of languages generated by Tree Adjoining Gram- 
mars and Head Grammars. In particular, we show that Head 
Languages are included in Tree Adjoining Languages and 
that Tree Adjoining Grammars are equivalent o a modifi- 
cation of Head Grammars called Modified Head Grammars. 
The inclusion of MHL in HL, and thus the equivalence of 
HG's and TAG's, in the most general case remains to be 
established. 
1. In t roduct ion  
This paper discusses the relationstfip between Tree Adjoin- 
ing Grammars (TAG's) and :Head Grammars (HG's). TAG's 
and HG's, introduced to capture certain structural prop- 
erties of natural languages, were developed independently. 
TAG's deal with a set of elementary trees which are com- 
posed by means of an operation called ad jo in ing.  HG's are 
like Context-free Grammars, except for the fact that besides 
concatenation of strings, s t r ing  wrapp ing  operations are 
permitted. TAG's were first introduced in 1975 by Joshi, 
Levy and Wakahashi \[3\]. Joshi \[2\] investigated some formal 
and linguistic properties of TAG's with local constraints. 
The formulation of local constraints was then modified and 
formal properties were investigated by Vijay-Shanker and 
Joshi \[9\]. The linguistic properties were studied in detail 
by Kroeh and Joshi \[5\]. HG's were first introduced by Pol- 
lard \[6\] in 1983 and their formal properties were investigated 
by Roach \[7\]. It was observed that the two systems eemed 
to possess imilar generative power and since they also ap- 
pear to have the same closure properties \[7,9\] as well as 
similar parsing algorithn~ \[6,9\] a significant amount of in- 
direct evidence existed to suggest hat they were formally 
equivalent. In the present paper, we will attempt o provide 
a characterization f the formal relationship between HG's 
and TAG's. In \[10\] we consider various linguistic aspects of 
the relationship: in particular what might be referred to as 
the strong equivalence of the two formalisms. 
Vijay-Shanker and Joshi \[9\] provided a brief description 
of the intuition behind the inclusion of Tree Adjoining Lan- 
gages (TAL) in the class of languages generated by a variant 
of HG's called Modified Head Grammars (MHG's). In the 
present paper, we give a proof of this result as well as a 
proof for the inclusion of Modified Head Languages (MHL) 
in TAL: hence we show that MHG's and TAG's are equiva- 
lent. This result is presented in section 3. In section 2, we 
discuss the relationship between MHG's and HG's. 
J" This work was partially supported by NSF grants MCS- 
82-19116-CER, MCS-82-07294 and DC1~-84-10413. We are 
grateful bo Tony Kroch and Carl Pollard for valuable discus~ 
sions. 
1.1. '.?ree Adjo in ing  Grammars  
Def in i t ion  1. A TAG is a 54uple G -= (VN,V . r ,S , I ,A )  
where Vlv and V T are finite sets of nonterminals and ter- 
minals respectively, S is a distinguished nonterminal, I is 
a finite set of initial trees and A is a finite set of auxiliary 
trees. 
Initial trees and auxiliary trees have the following form: 
/ \  ~ V. w~wz ~Vx "{ x~ V~ 
f igure  1 . l  
Except for one node, which is called the foot node,  all 
the nodes in the frontier of an auxiliary tree are labelled by 
terminal symbols. The foot node is labelled by the same 
nonterminal syrnbol as the root. All initial aud auxilia:3r 
trees, referred to as elementa:-y trees, have a height of at 
least one. 
We now define the ad jo in ing  operation. Let ~ be some 
node labelled X in a tree % Let fl be an auxiliary tree with 
root and foot labelled by X. The tree obtained by adjoilfing 
fl at r/ is given in tigurc 1.2. 
LL V vu 'v,/f ""/Z 
f igure  1.;~ 
V 
The subtree under ~ is excised from % the auxiliary tree \[~ 
is inserted in its place and the excised subtree is inserted at 
the foot of/~. 
As defined above it is possible to adjoin any auxiliary 
tree at a node as long as the label of the node was the same 
as that of the root and the foot of the auxiliary tree. How-. 
ever, in general, adjoining will be constrained ss follows. 
Associated with each node is a select ive ad jo in ing  (SA) 
constraint specifying that subset of the auxiliary tree which 
can be adjoined at this node. Trees can only be included in 
the SA constraint associated with a particular node if their 
root and foot are labelled with the same nonterminal that 
labels the node .There are two special cases: (a) the subset 
specified by SA is the entire set of auxiliary trees~ in this 
202 
case the entire set need not be explicitly listed; (b) the sub- 
set specified is empty i.e., no adjoining is possible. We call 
this the nul l  ad jo in ing  (NA) constraint. A node may be 
associated with a a so-called ob l igatory  ad jo in ing  (OA) 
constraint which can be used to ensure that an adjunction 
is obligatorily performed at a node. 
Example  1.1 We now present an example TAG G, which 
illustrates the notation used to specify the constraints as- 
sociated with a node. There is one initial tree a and two 
auxiliary trees fll and f12: 
0(:  S o~ : A" 
f igure 1.3 
Having introduced SA and OA constraints, we must ex- 
tend the definition of the adjunction operation. Suppose we 
adjoin an auxiliary tree fl at a node y of a tree ~/producing 
the tree ~'. For those nodes in ~' that do not correspond 
to nodes of fl, the constraints remain the same as those in 
% The remaining nodes in "7 ~ have the same constraints as 
those for the corresponding nodes of ft. For example, con- 
sider a sample derivations in the grammar G as given below 
in figure 1.4. We use an * to indicate the node at which 
adjunetion is performed. 
I h 
I 
f igure  1.4 
We will now present an alternative (yet equivalent) def- 
inition of the adjoining operation. So far, our definition 
allowed us to adjoin only with auxiliary trees, and allowed 
adjunetion only into sentential trees. This can be generalized 
to allow adjunctions of any tree derived from an auxiliary 
tree into any derived ti'ee. Consider the derivation given 
in figure 1.4. Given this generalization of adjunetion, we 
can also derive the same tree q2 by composing trees in the 
following sequence. 
The derived auxiliary tree "-/~ can be obtained by adjoining 
f12 in fl~. ~/~ can then be adjoined in a to give q~. Notice 
that trees derived from an auxiliary tree fl, will always have 
the property that their root and foot are labelled with the 
same nonterminal as those of ft. Viewing a derivation in 
this manner considerably simplifies several proofs of formal 
properties of 'rAG's \[9\]. 
/ \  
O~ S~ 
5~ Sr~ 
f igure  1.5 
We use the notation P(3) to denote the set of trees derived 
from the elementary tree 3 using 0 or more adjunctions. 
The t ree  set T(G) of a TAG C is T(G) = U,~I  P(a).  
The s t r ing  language L(G) generated by a TAG G is given 
by L(G) = { w I " is the frontier of some "y in T(G) } 
Now we can see that tile language Lt, generated by the 
example grammar G, is L1 =: { a'~gbnfcnh \]n > 0 } 
It is useful to further generalize the notion of a derived tree 
to include trees derived from subSrees of elementary trees. If 
is a node in some elementary tree, then P(~) represents 
the set of trees derived from the subtree rooted at y. Nodes 
are represented using an extension of the tree addressing 
scheme of Gorn \[11. Each node in an elementary tree is 
given a unique name in the following manner: the pMr (% e} 
denotes the root of ~,; if (% i} is a node in % then (3, i .  j )  
represents the jth daughter of this node. 
1.2. t lead  Grammars  
Before giving the formal definition of I:lead Grammars, 
the notion of a beaded s t r ing  will be described. A headed 
string is a string of symbols containing one distinguished 
symbol referred to as the head of tile string. Formally, this 
can be represented as a pair consisting of a string w and an 
integer that indicates the position of the \]lead in the string. 
In this paper, we use one of two notations to denote this 
string: when we wish to explicitly mention the head we use 
the representation wlSw2 where wlaw2 =- w; alternatively, 
we can simply denote the headed string by ~'. This allows 
us to denote the headed empty string as ~. 
Def in i t ion  2. A Itead Grammar, G, is given by a 4-tupk; 
(VN,VT, S,P) .  Productions in P are of the form: A -~ 
f (a l , . . . , a~)  or A -~ al where A C VN, a~ either belongs 
to Vlv or is a headed string. 
f C \[.J~ 1{ LCi, LLi, LRi,  RCi, RLi ,  RR i  } 
We now define the operations LCi, LLi, and LRi  for i C 
{1, 2}. Definitions of the other operations can be found in \[6\] 
and are not given here, since Roach \[7\] has shown that there 
is a normal form for Head Grammars which only uses these 
operations. 
LC\](Ul~U2,V) = ulafu2v, LC2(~,vlh-~v2) :: uvla2v2, 
LLI(ulSTlu2,~) = ul5~lvu~., LL2(ul~u2,V-) = ulal~'u2, 
Lm(u ,~;~,v )  - ~.~u~,  LR2(u~.~,v )  = ~lVa~u2 
203 
Both Pollard \[6\] and Roach \[7\] define these operations as 
partial functions. Pollard's definition of headed strings in- 
cludes the headed empty string (A). However, mathemat- 
ically, A does not have the same status as other headed 
strings: for example, LCI (A,~)  is undefined. In general, 
the term f i (~-T, . . . ,~~,. . .  ,~--~) is undefined when w-T = A. 
This nonuniformity has led to difficulties in proving certain 
formal results about Head Grammars \[7\], and has caused 
problems in showing the equivalence of MHG's and HG's 
(see section 2). 
The language generated by a HG G is defined as follows: 
L(G) ={wlS~:~} 
Example  1.2 We now present a sample Head Grammar for 
the language L1 = { a"gb'~fcr*h J n > 0 } 
S ~ LL2(S, , f ) ,  S ---+ LL2(S2,-f), 
S~ -.~ LC2(-~, Sa), $2 --+ "~h, 
S 3 ---+ Ln2(S~,bc), Sa -~ nL2(S2,bc) 
1.3. Mod i f ied  Head Grammars  
We find it convenient to consider a formalism that closely 
resembles HG's: referred to as Modified Head Grammars 
(MHG's). Instead of headed strings, MHG's have spl it  
str ings.  A split string has a distinguished position between 
two strings in V~, about which it may be split. We will 
denote a split string as Wl~W2 where wlw2 C V T. Notice 
that we can represent the split empty string as ATA , though 
this will be denoted A whenever the context makes it obvi- 
ous that we are referring to a split string. In MHG's, there 
are 3 operations on split strings: W, C1, and C2, defined as 
follows: 
W(wl~w2, ul~u2) = wlu,Tu2w2 
C1(WllW2, ul~u2) = WllW2ulu2 
C2(WllW2,Ul~U2) = wlw2ul~u2 
The operations C1 and C2 correspond to the operations 
LC1 and LC2 in ttG's. The operation W has been defined 
such that the split point of its second argument becomes 
the split point of the string resulting from application of the 
operation (like the HG operations LL2 and Lit2). 
Since the split point is not a symbol but a position 
between strings, separate operations corresponding to LL2 
and LR2 are not needed. In addition, unlike HG's, which 
distinguish the two wrapping operations LL1 and LL2, W 
suffices as a substitute for both of these operations. Suppose 
Y ~ WlTW2 and Z ~ u~yu2 and we want X to derive 
W~lU~U2W 2. This can be achieved with the following two 
productions: Z f~ ~ e l (A ,  Z) and X -+ W(Y, Z1~). 
Example  1.3 We now give a MHG generating L~. 
,5' --~ W(S,, I t ) ,  S --~ W(S2, f%), 
S1 "--+ C2(a~,Sa), S2 ~ g~h, 
s~ -~ w(s~,Nd, ss -, w(s~,Nd 
We will defer the discussion of both the formal and linguistic 
relationship between HG~s and MHG's until section 2. It 
is worth noting at this point that the definition of MHG's 
given here coincides with the definition of HG's given in 
204 
Rounds \[8\]. As we shall see in section 2, these formalisms 
are very closely related. 
1.4. Tree Ad junet ion  and  Wrapp ing  
Before showing the formal equivalence of MHG's and TAG's, 
it is instructive to consider the relationship between the 
wrapping operation W of MHG's and the adjoining oper- 
ation of TAG's. Suppose that we have the production p - 
X --~ W(Y, Z) in a MHG G, and that we have two deriva- 
tions from the nonterminals Y and Z deriving the headed 
strings wltw2 and VlTV2 respectively. Given the production 
p, we can derive the split string wlvllv2w2 from X. 
Suppose there is a derived auxiliary tree "7 correspond? 
ing to the above derivation of wl~w2, from Y where the 
foot node appears at the split point, as shown in figure 1.6 
below. Also assume that there is a node ~/dominating a sub- 
tree that corresponds to a derivation of vl~v2 from Z where, 
as before~ we assume that the foot node appears at the split 
point. Consider the tree resulting from the adjunction of *7 
at the node ~?, also shown in figure 1.6. The resulting tree 
can be thought of as corresponding to the derivation of the 
split string wlvl)v2w2 from X. 
w, t ~va 
~oot 
f igure  1.6 
This example illustrates the basic intuition behind the con- 
structions involved in the following proofs showing the equi- 
valence of MHG's and TAG's. 
2. Head Grammars  and  Mod i f ied  Head Grammars  
In this section, we shall discuss the relationship between 
MHG's and HG's. First we present he outline of a con- 
struction showing that for evelT HG G there is an equivalent 
MHG G'. We then briefly discuss the linguistic relationship 
between MHG's and HG%. 
Suppose X ~ wl-hw2. This headed string can be split 
in two ways: into the substrings wt and hw2; or wlh and w2. 
This depends on whether X is used in a left or right wrapping 
operation. Since in MHG's we can only split a string in one 
place, we use two nonterminals, X ~ and X r deriving wth;w2 
and Wl~hW 2respectively. Thus, for example, the production 
Z ---+ W(X~,Y)  can be used in place of Z ~ LL2(X,Y) .  A 
further complication arises when a headed string is split first 
to the right of its head and then the resulting string is split 
to the left of the same head. The problem is resolved by 
introducing nonterminals X $h, that derive split strings of the 
form wl~w2 whenever X derives wl-hw2 in the HG. We can 
reintroduce the missing head with the following productions: 
X ~ -~ W(X Th, ht) and X r ---+ W(X Th, Th) 
Complete details of  this proof are given in \[4\]. 
We are unable to prove the inclusion of MHL's in HL's. 
The problems faced when attempting to find such a proof 
are a result of the operations in HG's not being total func- 
tions. For example, CI(A,W) is defined in MItG's, whereas 
LC I (~,~)  is undefined in the HG's framework. We have not 
found any way of getting around this technical problem in a 
systematic manner. All TAG's considered by the authors o 
far have an equivalent HG. We feel that the problem of the 
empty headed string in the HG formalism does not result 
from an important difference between the formalisms. 
In the following discussion, we propose that MHG's can 
be given a linguistic interpretation if we retain the notion of 
a head terminal in a split string. The split point should 
be viewed a~ determining the position of the head. As far 
as the authors are aware, Ilead Grammars for natural lan- 
guages use only one kind of wrapping operation: either only 
the left wrapping operations LLi, or only the right wrap- 
ping operations LRi. Thus, any headed string can be split 
on only one 'fide of the head. For example, if wl-hw2 is a 
headed string, and only the left wrapping operations were 
used, then the headed string can only be split as wlh and 
w~.. For any HG using only left wrapping operations there 
exists an equivalent MHG such that split strings will have 
their split points in~nediately to the right of the actual head. 
However, obviously not every MHG (:an be given a linguistic 
interpretation i this way. 
3. Equ iva lence  of Mt tG 's  and  TAG,'s 
We will now straw that the class MIlL is equal to the class 
TAL. The complete proofs for the results presented here are 
given in \[4\]. 
3.1.. Inc lus ion  of  TAL in M I l L  
Based on the earlier observation concerning the similarity 
between the wrapping and adjoining operations, we shall 
now present a scheme for transforming a given TAG G -- 
(Vt?, VT, S, I, A) to an equivalent MHG G' - (V\]~, VT, S, P). 
In this section, we have generalized the concatentation op- 
erations of MHG's to be of the form Cj  for j _> 1. It is 
obvious that these operations can always be simulated using 
just C1 and C2. 
We shall first describe the algorithm convert informally. 
If r\] is a node of some elementary tree '7, applying convert 
to ~1 returns a sequence of productions in the MHG formal- 
ism capturing the structure of the subtree of q rooted at 
~. The wrapping operation is used to simulate the effect of 
adjunction; the concatenation operations Ci eoncatentate 
the strings derivable from the daughters of a node. The 
choice of i depends on which child is the ancestor of the foot 
node. The exact structure'of a tree can be captured by using 
nonterminals that are named by the addresses of nodes of 
elementary trees rather than the nonterminMs labelling tim 
nodes. 
The main idea of our scheme is as follows. Let (fl, i) be 
the address of a node in an auxiliary tree fl, and '7 belongs 
to P((fl, i)) with a frontier WlXtO 2, We have a nonterminal 
corresponding to this node (denoted by \[fl, i\]) which derives 
the split string watw~.. In particular, when (fl, i) is the root 
of fl (i.e., i =: e), then the nonterminal \[fl, c\] should derive 
the split strings WlTW2 whenever there is a tree in P(fl) 
with frontier WlXW 2. That  is, the split point appears in a 
position corresponding to the foot node. 
Thus, the wrapping operation W can be used to simu- 
late the effect of adjoining in the following manner. If ('7, i) 
is a node at which fl is adjoinable, we have a production 
corresponding to adjunction of fl at ('7, i). 
b,i\] - ,  w(\[fl,4, b,  il) 
where \['7, i1 derives strings derivable from the children of 
('7, i). We also have the rule \['7, i\] -~ \['7, i\] for the case when 
no adjunction takes place at ('7, i). Since \['7, i\] is supposed to 
derive strings derivable by the concatenation f the frontiers 
of subtrees dominated by the children of ('7, i), we have the 
production, 
\[% i\]" -* Cj ( \ [%i .  1\] . . . .  , \[%i . j\] . . . . .  \['7, i .  k\]) 
where @, i .  1>,.. . ,  ('7, i .  j> , . . . ,  ('7, i .  k> correspond to the 
h children of ('7,i) and where the jth child is the ancestor 
of the foot node. The operation Cj  is used so that the split 
point appears in the same position as the foot node. By 
convention, we let j be I when (%i) is not the ancestor of 
the foot node. 
We are now in a position to define the conversion pro- 
cess. The algorithm is as fi)llows: 
for each initial tree a, let S -> \[a,e\] G P. 
for each elementary tree % call convert((% e)) 
where the procedure convert is as defined below. 
define convert (('7, i)); 
case 1: (%i) is a leaf node 
if ('7, i) has label a Ci VT U {A} then 
s tep 1: add \[%i\] --+ a r to P 
else \['7, i\] is the foot node 
step 2: add \[%i\] -+ W(\[fl, el,A) 
for each fl in SA constraint of ('7, i) 
s tep 3: add \['7, i\] -+ 
if ('7, i) does not have an OA constraint; 
case 2: ('7, i) is an internal node and has k children 
step 4: add \['7, i\] -~ W(\[fl, e\], \['7, i\]) 
for each/3 in SA constraint of ('7, i) 
if ('7, i} does not have OA constraint then 
step 5: add \[3,i\] - ,  \[%i\] 
if ('7, i) is ancestor of foot node then 
step 6: add \['7, i\] - ,  Cj(\['7, i .  1\] . . . . .  \[V,i.  k\]) 
where j~h child dominates foot node; 
if ('7, i) is not ancestor of foot node then 
step 7: add \ [ '7, i \ [ - ,  C1(\['7, i .  1\],.. .  ,\['7, i '  kl) 
for 1 < j  < k do eonvert((%i. j ) ) .  
We prove the inclusion of L(G) in L(G'), by induction 
oll the height of the trees derived from all subtrees of ele- 
mentary trees, where the inductive hypothesis tates: 
For all elementary trees "7, and addresses i in q, if there is a 
tree "7' in P(('7, i}) of height less than k, and the frontier of 
"71= WlXW2 or wlw2, then \['7, i \ ] - -~  wl~w2. 
It will be easy to simw the inclusion of L(G) in L(G') by 
induction, considering steps 4, 5, 6 and 7. The base cases 
correspond to steps 1, 2 and 3. 
205 
We show the inclusion in the other direction by induc- 
tion on the length of derivation of split strings in G'. The 
induction hypothesis is given by: 
ir \[-~,i\] _~ ~,~Tw.,. in k steps, then there is a "~' c p((~,i)) 
such that the frontier ofq '  is wlXw2 or wlw2, depending 
on whether the foot node of % labelled by X if it exists, is 
a descendant of <'~,i> or not. 
3.2. Inc lus ion  of MHL in TAL 
When we convert a TAG into a MHG, each elemen- 
tary tree generates a set of productions. The sets generated 
by any two distinct elementary trees are disjoint and, fur- 
thermore, have a constrained form encoding the hierarchical 
structure of the tree. The task of converting a MHG to a 
TAG cannot simply involve the inversion of this construc- 
tion since it is not in general possible to find groupings of 
productions in a MHG that have the required structure. 
The approach used to convert MHG's to TAG's is based 
on satisfying the following requirement: for each derivation 
in the MHG there must be a derived tree in the TAG for 
the same string, in which the foot is positioned at the split 
point: i.e., X ~ wHw2 in MHG if and only if there is a 
derived auxiliary tree "~ having no OA constraints, with root 
labelled X and frontier wlXw2, 
Suppose we had derived trees corresponding to deriva- 
tions for B and C (as shown in the center of figure 3.1) that 
satisfied the above requirement. 
We can capture the effect of each MHG production di- 
rectly by associating exactly one elementary tree with each 
production. For example, figure 3.1 illustrates trees associ- 
ated with the productions A --~ CI(B, C) (on the left) and 
A -~ W(B,C)  (on the right). We position the foot node 
in the elementary trees to ensure that the split point and 
foot node appear at the same position. When the tree cor- 
responding to wrapping is used the string derived from B is 
wrapped around the string derived from C. The foot of the 
resulting tree will appear immediately under the foot of the 
derived tree for C. 
C oa 
I 
f igure  3.1 
The TAG that we produce could be viewed as simulat- 
ing rewriting of nonterminMs. Each rewriting corresponds 
to one use of the adjoining operation. The NA constraints at 
the root and the foot node of each auxiliary tree ensure that 
each occurence of a nontermin~l is rewritten only once. The 
OA constraints are used to ensure that every nonterminal 
introduced is rewritten. 
We now present the complete construction. Without 
loss of generality, we will assume a normal form that uses 
productions of the following form: 
206 
A-~ f (B,C)  or A -~ ?a or A -~a$ 
where A,B ,C  e VN, a C VT tO {A} and f e {CI,C2, W}.  
The conversion proceeds as follows: 
1. I fA -~ Ta 6PorA- -+ a t EPthen inc ludef l l  orfl2 
in A respectively. 
#': A ~ ~,: A # /\ / \  
A~ m cL k ,~'  
2. If A -~ C I (B ,  
include fla or f14 in A respectively. 
#~: A # /3,: AZ 
& oA C 0a 
i i I I 
A# A ,~ A# 
3. If A -~ W(B,C)  ~ P then include fls. 
f l~ :  A # 
J 
5 oa 
J 
C oA 
i 
A# 
The set I of" initial trees consists of the single tree a: 
~X: t5 0,I 
E 
A 
We prove that L(G) C_ L(G') by induction on the length 
of the MHG derivation. We show that if X =% wlTw= then 
there is a derived auxiliary tree having no OA constraints, 
with root labelled X and frontier wlXw2. 
We prove that L(G') C L(G) by induction on the height 
of the "rAG derivation tree. We show that if q E P (fl), has no 
OA constraints, and has frontier wlXw2 then X =% wlrw2. 
While straightforward, the proof given above does not 
capture the linguistic motivation underlying TAG's. The 
auxiliary trees directly reflect the use of the concatenation 
and the wrapping operations. It is also interesting to note 
that a consequence of the equivalence of MHG's and TAG's 
and the construction used in proving the inclusion of MHL 
in TAL is that we have the following normal form for TAG's. 
For any TAG there is an equivalent TAG with exactly one 
initial tree and auxiliary trees which are of five possible forms 
shown above. 
C) E P or A ---+ C2(B,C) 6 P then 
4. Conc lus ion  
In this paper we have shown the equivalence of TAL and 
MHL. Since we have also established the inclusion of HL in 
MHL we have shown that HLs are included in TALs. The 
inclusion of MHL in HL, and thus the equivalence of HG's 
and TAG's, in the most general case remains to be estab- 
lished We briefly discuss the relationship between MHG's 
and HG's and argue that it is close, both linguistically and 
formally. Figure 4.1 provides a summary of these results. 
I'3 H L. % 
1" 
f igure 4.\]1. 
Referenceu 
\[1\] Gorn, S. 1962 Processors for infinite Codes of the 
Shannon..Fano type, Proc. of Syrup. Math. Theory of 
Automata. 
\[2\] doshi, A.K. 1983 How Much Contcxl.--Sensltivity is 
Necessary for Characterizing Structural Dcscriptkms - 
Tree Adjoining Grammars, in Natural Language; Pro- 
cessing --- Theoretical Computational nd Psychological 
Perspectives, eds. D. Dowry, L. Karttuncn, A. Zwicky, 
Cambridge University Press, Ncw York. 
\[3\] Jostfi, A~K. \],cvy, L. and Takahashi, M. 1975 Trec 
Adjunct Grammars. Jour. Comp. \[?ys. Sci. 10(I) : :136- 
1.63. 
\[4\] Joshi, A,K., Vijay,-Sllanker, K. and Weir, \])..\]. 1986 
Tree Adjoining Grammars and. lIead Grammars, Tech. 
Rep.~ MS-CIS-86-\], \])ept. of CIS, Univ. of Pennsylw~.- 
nia. 
\[51 Kroch, A. and ,Ioshi, A.K. 1985 The Linguistic R.cl-- 
evance o1! Tree Adjoining Grammars, Tcch. ILep., MS-. 
CIS-85~18, Dept. of CIS, Univ. of Pennsylvania. 
\[6\] Pollard,C. 1984 tIead Grammars. Ph.\]). dissertation, 
Stand\]oral Univ., California. 
\[71 lLoaeh, g.  1984 \])brmal Properties of ilead Grammars, 
Manuscript, S1;andfl)rd Uaiversity. To appear in Math- 
ematies of Language, ed. A. Manaster-l~amer, Amster- 
dam: John Benjamins. 
\[8\] Rounds, W.C. 1985 LFP: A Logic for \],inguistie \])e- 
seription:~ and an Analysis of its Complexity, Unpub- 
lished Manuscript, Univ. of Mich., Ann Arbor, Sept 
1985. 
\[9\] Vijay-Shanker, K. and Joshi, A.K. 11985 Some Compu.. 
rational Properties of Tree Adjoining Grammars. Proc. 
of 23rd Meeting of Assoc. Comp. Ling., 82 93. 
\[1.0\] Weir, D.J., Vijay~Shanker, K. and Joshi, A.K. 1986 
The Relationship BeLween Tree Adjoining Grammars 
and Head Grammars, Proc. of 24th Meeting of Assoc. 
Comp. Ling. 
207 
