Proc. EACL 2012 Workshop on Applications of Tree Automata Techniques in Natural Language Processing, pages 31?41,
Avignon, France, April 24 2012. c?2012 Association for Computational Linguistics
Second position clitics and monadic second-order transduction
Neil Ashton
203 Morrill Hall
Cornell University
Ithaca, NY 14853-4701
nma38@cornell.edu
Abstract
The simultaneously phonological and syn-
tactic grammar of second position clitics is
an instance of the broader problem of ap-
plying constraints across multiple levels of
linguistic analysis. Syntax frameworks ex-
tended with simple tree transductions can
make efficient use of these necessary ad-
ditional forms of structure. An analysis
of Sahidic Coptic second position clitics
in a context-free grammar extended by a
monadic second-order transduction exem-
plifies this approach.
1 Introduction
Second position (2P) clitics are ubiquitous in the
world?s languages, found in genetically and typo-
logically diverse languages (e.g. Serbo-Croatian,
Warlpiri, O?odham) from all documented periods
(e.g. Hittite, spoken ca. 1600?1300 BC). They
present a persistent challenge for syntactic anal-
ysis, inducing a peculiar form of crossing depen-
dency which is not easily expressed in any stan-
dard restrictive grammar framework.
2P clitics are emblematic of a wider class of
problematic phenomena which existing frame-
works can address by incorporating a notion of
prosodic constituency. The transductive perspec-
tive on mildly context-sensitive grammar for-
malisms, which treats them as monadic second-
order transductions of regular tree languages,
suggests how this can be done: by transduc-
ing prosodic constituency from syntactic phrase
structure.
The prosodic conditioning of 2P clisis is partic-
ularly salient in Sahidic Coptic (Reintges, 2004).1
1?Coptic? refers to the latest form of the Egyptian lan-
A context-free phrase structure grammar ex-
tended by a monadic second-order transduction
is able to make use of the phonological structure
necessary to give a linguistically plausible analy-
sis to a fragment of Coptic clitic syntax.
2 Second position clitics and prosodic
constituency
2.1 Second position
An intuitive account of the syntax of 2P clitics2
has been known since Wackernagel (1892). The
2P clitic, which is an immediate functional de-
pendent of a clause, e.g. a sentential adverb, dis-
course particle, pronominal argument, etc., ap-
pears after the first word of that clause, poten-
tially interrupting whatever constituent contains
that word as its leftmost member, as the chain
of 2P clitics interrupts the NP in the following
Serbo-Croatian sentence.3
(1) [Taj
that
=joj=ga=je
=her=it=AUX
c?ovek]NP
man
poklonio.
presented
?That man presented her with it.? (Bo?gel et
al., 2010)
guage. Sahidic Coptic, the major literary dialect of Coptic
from the 4th to the 10th centuries AD, is survived by a rich
corpus of Greek-alphabet texts. The only extant computa-
tional model of Sahidic Coptic grammar is apparently that
of Orlandi (2004). This work is unfortunately not available
to the author, and so no comparison of approaches has been
possible.
2A ?clitic? is, descriptively, a word-like element with
affix-like phonological dependence (?clisis?) on other words.
Proclitics and enclitics are dependent on right- and left-
adjacent words, respectively, and 2P clitics are a special case
of enclitics. For more on clitics, see Zwicky (1977), Aikhen-
vald (2003), and Anderson (2005).
3Clitic boundaries are marked with an equals sign, after
the Leipzig glossing conventions.
31
This constituency-breaking word order pattern
alone poses a descriptive challenge. The difficulty
is exacerbated by the fact that the ?word? targeted
by the 2P clitic is not in general syntactically char-
acterizable. It is rather a phonological constituent
that may include incorporated clitics (Inkelas and
Zec, 1990; Zec, 2005). The alternation in the po-
sition of the 2P clitic de in the Coptic sentences
(2) and (3) illustrates this well.
(2) a=t=ef=sone
AUX.PF=the=3SG=sister
=de
=and
ol
gather
en=n=ef=kees
ACC=the=3SG=bones
?and his sister gathered his bones? (Mena,
Martyrd. 4a:1-2)
(3) a=w=tamio
AUX.PF=3PL=make
=de
=and
en=u=taive
ACC=a=coffin
?and they made a coffin? (Mena, Martyrd.
5a:27-28)
In both sentences, de functions as a clausal con-
junction. But its position varies, appearing be-
tween the main verb and its subject in (2) and be-
tween the verb and its object in (3). This alterna-
tion is most plausibly phonological. The 2P clitic
appears after the first independently pronounce-
able word, including its attached clitics, such as
the pronominal subject w- in (3) and the tense
auxiliary a- in both sentences. The behavior of
2P clitics when the verb itself or its direct object
are clitics is consistent with this analysis.
Phonological properties alone, however, do not
suffice to describe the syntax of 2P clitics. They
are constrained to appear within a syntactically
determined subpart of their host clause, typically
ignoring topicalized or otherwise left-dislocated
elements and thus appearing quite far from strict
phonological second position. Describing 2P cli-
sis thus requires reference to both syntactic and
phonological structure.
2.2 Prosodic constituency via tree
transduction
The notion of prosodic constituency (Nespor and
Vogel, 1986; Selkirk, 1986) provides the key
to a perspicuous account of the multiple factors
at play in the grammar of 2P clitics. Prosodic
constituency is a tree structure that defines the
?words? and ?phrases? relevant to phonology,
C
?
S
Word
Clitic 7?
C
S
?
CliticWord
Figure 1: Lowering 2P clitics.
which are in general distinct from yet closely re-
lated to their syntactic equivalents.
Both the distinctness of and the relationship be-
tween syntactic and prosodic constituency can be
captured by transducing the latter from the for-
mer. This transduction in effect interprets syn-
tactic trees as terms over a signature of phono-
logical operations and normalizes the result. The
yield function is a prosodically naive example of
such a transduction.
Once this independently necessary transduc-
tion has been taken into account, the syntax of
2P clitics is straightforward. The 2P clitic sim-
ply has a non-concatenative mode of phonologi-
cal combination. The clitic and its host clause are
siblings in syntactic constituency, and their parent
node is interpreted as an operation that wraps the
latter around the former?alternatively, lowers the
former into the latter.
This analysis, which captures in essence both
the ?wrapping? (Bach, 1987) and ?prosodic inver-
sion? (Halpern, 1995) analyses of 2P clitics, can
be schematized as in Figure 1, where ?Word? is
constrained to be the leftmost node with that label
in S.
This transduction is not direction-preserving in
the sense of Bloem and Engelfriet (2000): as-
suming that the clitic crosses unboundedly many
nodes on the way to its host word, a crossing de-
pendency is induced in the paths of the target tree.
This rules out the possibility of formalizing this
analysis by means of popular automaton models
such as multi bottom-up tree transducers (Fu?lo?p
et al, 2004) or their extended variant (Engelfriet
et al, 2009), which cannot describe such depen-
32
dencies (Maletti, 2011).
The more powerful automata that can be spec-
ified using monadic second-order logic (MSO),
which include syntactically restricted classes of
macro tree transducers (Engelfriet and Maneth,
1999) and deterministic tree-walking transducers
(Bloem and Engelfriet, 2000), can perform this
transduction. Section 3 defines the transduction in
MSO, and Section 4 reflects briefly on its imple-
mentation.
3 Sahidic Coptic 2P clitics via
CFG+MST
The following context-free grammar and se-
quence of MSO transductions formalizes, for a
fragment of Sahidic Coptic, the analysis of 2P cli-
sis sketched in Section 2.2.
Section 3 breaks the interpretation of a syntac-
tic parse tree as a phonological term into a series
(f1?f7) of simple composed MSO transductions.
A ?redex? phonological term is derived (Section
3.3), and its reducible subterms are then evaluated
separately (Section 3.4). An algorithmic imple-
mentation of the transduction is sketched in Sec-
tion 3.5.
3.1 Formal preliminaries
The following definitions and assertions rehearse
material from Courcelle and Engelfriet (2012),
which should be consulted for full details.
3.1.1 Relational structures and tree graphs
A relational signature is a finite set R of rela-
tion symbols with associated arity ?(r) ? N? for
each r ? R. A relational structure over R is a
tuple R = ?DR , (rR)r?R?, where DR is a finite
domain of entities and rR , for each r ? R, is a
?(r)-ary relation on DR .
A bijection exists between binary relational
structures and labelled graphs, with unary and bi-
nary relations corresponding to node and edge la-
bels, respectively. Ordered binary trees can be
represented as labelled directed graphs, and hence
as relational structures, in the obvious way.
3.1.2 Monadic second-order logic
The monadic second-order (MSO) formulas
over a relational signature R are as first-order
predicate logic, with the addition of monadic
second-order variables X,Y,X ?, . . . denoting
sets of entities, second-order quantification, and
a primitive operator for set membership. The sub-
stitution of n free variables in a formula ? by en-
tities d1, . . . , dn is written ?(d1, . . . , dn).
An MSO formula over R is interpreted in a re-
lational signature over R. A formula with no free
variables is called a sentence. If a sentence ? is
true in a relational structure R, we write R |= ?,
pronounced ?R models ??.
3.1.3 MSO transduction
An MSO transduction defines a relational
structure in terms of another by taking a finite
number of copies of nodes from the source do-
main, keeping those that satisfy particular formu-
las in the source structure, and defining the rela-
tions that hold in the target structure by means of
formulas modeled by the source structure. The
generalization of MSO transduction to k-copying
MSO transduction (Courcelle, 1991) allows the
target domain to be larger than its source. MSO
transductions whose formulas do not refer to pa-
rameters define deterministic functions.
A (parameterless, k-copying) MSO transduc-
tion over a relational signature R is specified by a
triple ?k,?,??, where k ? N and ? = {?i | 0 ?
i ? k} and ? = {?w | w ? W} are sets of MSO
formulas with free variables, and W is the set of
all tuples (r, i1, . . . , i?(r)) for r ? R. This triple
is called a definition scheme.
A definition scheme specifies a target relational
structure T with respect to a source relational
structure S as follows. The domain DT of T is
the set (D0 ? {0}) ? . . . ? (Dk ? {k}), where
each Di = {d ? DS | S |= ?i(d)}. For each n-
ary relation r in the relational signature of T , an
n-ary relation on DT is defined as:
?
i0,...,in?[k]
{((d0, i0), . . . , (dn, in)) |
d0 ? Di0 , . . . , dn ? Din ,
S |= ?r,i0,...,in(d0, . . . , dn)}
Intuitively, a formula ?i specifies conditions on
the existence of the ith copy of a node in the target
structure. A formula ?(r,i0,...,j?(r)) specifies condi-
tions on the relation r holding between copies of
nodes indexed i, . . . , j in the target structure.
3.2 Definitions and abbreviations
3.2.1 Base CFG
The phrase structure grammar which serves as
the basis of the analysis of Coptic is presented in
33
S? Cl S? NPpro? Pro
S? ? Aux VP NPN ? Det
sg
fem N
?sg
fem
VP? NPN V? NPN ? Detindef N
sg
fem
VP? NPpro V? NPN ? Detpl N?pl
V? ? V AccP N?sgfem ? NPpro N
sg
fem
Cl? de N?pl ? NPpro Npl
Aux? a AccP? AccN NPN
V ? ol | tamio AccP? Accpro NPpro
Nsgfem ? sone | taive Det
sg
fem ? t
Npl ? kees Detpl ? n
AccN ? en Detindef ? u
Accpro? mmo Pro? w | ef
Figure 2: Base CFG fragment of Coptic.
Figure 2. Its parse trees define a recognizable lan-
guage of binary trees, members of which can be
represented as relational structures, as explained
in Section 3.1.1. This CFG fragment, in combi-
nation with the transductions detailed below, suf-
fices to generate sentences (2) and (3) from Sec-
tion 2.1.
This grammar encodes several claims, already
alluded to in Section 2.1, about the syntactic
structure of Coptic. Syntactic dependencies are
represented by constituency in the usual way. The
immediate dependence of the 2P clitic de on a
host clause is expressed by the siblinghood of Cl
and S? under S.
Features of lexical items relevant for agree-
ment and allomorphy are encoded as diacritics on
nonterminals, allowing determiners to agree with
nouns in gender and the accusative case prepo-
sition to covary with the nominal or pronominal
status of its complement.
3.2.2 Encoding of nodes with unbounded
branching
Syntactic trees are interpreted into prosodic
trees, which may contain prosodic word con-
stituents that branch unboundedly wide. To fix
a binary encoding for such constituents, a ?cons
cell?-like variant of the extension operator encod-
ing (Comon et al, 2007, p. 210) is adopted, in
which a term of the form @(x, y) is interpreted as
extending the interpretation of y by adding x to
its root as its leftmost child. An example of this
encoding is given in Figure 3.
Only the fragment of prosodic constituency rel-
evant to the alternation shown in sentences (2)
?
?3?2?1
'
@
@
@
??3
?2
?1
Figure 3: Encoding of n-ary trees.
_ concatenation
?p proclisis
?e enclisis
?2p 2P clisis
?id identity
? prosodic word
@ extension operator
Table 1: Interpretation of labels.
and (3) is derived. The output tree therefore
contains operator-encoded prosodic constituents
as subtrees of unencoded trees containing unan-
alyzed phonological combination operators.
3.2.3 Relational signature and abbreviations
All MSO transductions presented below are de-
fined over a binary relational signature R = R1 ?
R2. The set of node labels R1 is given by the
union of the set of all non-terminal and terminal
node names in the grammar of Figure 2 and the
set {_, ?p, ?e, ?2p, ?id, ?,@}. The interpretation
of these predicates is given in Table 1. The set of
binary predicates R2 is simply {0,1}, the left
and right child relations, written as infix operators
as a notational convenience.
It will be useful to define several new binary
predicates as syntactic abbreviations. I assume re-
flexive and irreflexive transitive closures r? and
r+ of relations r ? R2, as well as immediate
domination and precedence ,?, as abbrevia-
tions of MSO formulas over primitive predicates.4
Recurring structural properties of lexical items
in the base CFG are given by the unary syntactic
abbreviations defined below.5 These include pro-
4On the MSO-definability of these, see Courcelle and En-
gelfriet (2012).
5?? := ?? is to be read ?? is an abbreviation for ??.
34
clitic and 2P clitic status (Pc(x), 2P(x)), indepen-
dent pronounceability (Str(x)), and the property
of being a leaf (Leaf(x)).
Pc(x) := a(x) ? en(x) ? t(x) ? n(x)
2P(x) := de(x)
Str(x) := ol(x) ? sone(x)
? kees(x) ?mmo(x)
Leaf(x) := de(x) ? a(x) ? . . .
MSO transductions are given by transduction
schemes, as defined in Section 3.1.3. In the case
that k = 0, irrelevant subscripts are omitted. Un-
less otherwise specified, all formulas ?i can be as-
sumed to be the constant True.
3.3 Transducing a reducible term
A syntactic constituency tree can be interpreted
as a term in a phonological algebra, with non-leaf
nodes interpreted as operations effecting phono-
logical combination in various modes. Pro-
nounceable utterances, which consist of concate-
nations of prosodic constituents (i.e. terms over
leaves from the base CFG, @, ?, and _), are nor-
mal forms.
This complex interpretation is broken into
smaller transductions, the first set of which lays
the foundation for the reduction of the ?clitic?
modes of combination. Non-leaf nodes are first
replaced by appropriate combination operators
(Section 3.3.1). Unary nodes are then eliminated
(Section 3.3.2). Finally, the prosodic structure
necessary for the next phase of interpretation is
generated (Section 3.3.3).
3.3.1 Relabeling
Non-terminal leaves in the syntactic tree are re-
placed by operators indicating modes of phono-
logical combination, as presented in Table 1.
The transduction to unreduced phonological
terms is sensitive to the structure of the syntac-
tic tree. Some leaves, e.g. clitic pronouns, are not
strictly proclitic or enclitic but vary by context:
the pronominal subject of a verb or possessor of
a noun is proclitic, whereas the pronominal com-
plement of an accusative preposition or pronoun-
selecting verb is enclitic. The relevant syntactic
context is the child status of NPpro nodes. Hence
the parent of an NPpro node is replaced by ?p if
NPpro is its left child, by ?e if NPpro its right
child.
All non-pronominal clitics are phonologically
combined with the sibling of their phonologically
vacuous unary parent node. Thus the grandpar-
ents of all such clitic leaves are replaced by the ap-
propriate clitic combination operator, ?p for pro-
clitics and ?2p for 2P clitics. Unary nodes are re-
placed by ?id, and all other non-leaf nodes are re-
placed by_. Leaf node labels are left unchanged.
The definition scheme f1 = ?0,?,??, where
? is defined as the union of the formulas given be-
low, specifies this transduction. The body of the
?_ formula, which consists largely of the disjunc-
tion of the negations of the preceding formulas, is
omitted, as signaled by [etc]; and the ?w formula
which reasserts leaf labels is omitted altogether.
??e(x) = ?x
?(NPpro(x
?) ? x1 x
?)
??p(x) = ?x
?(NPpro(x
?) ? x0 x
?)
? ?x?, x??(x0 x
? ? x? 0 x
?? ? Pc(x??))
??2p(x) = ?x
?, x??(x0 x
? ? x? 0 x
?? ? 2P (x??))
??id(x) = ?x
?(x0 x
?) ? ??x??(x1 x
??)
?_(x) = [etc]
3.3.2 Eliminating unary nodes
Before any further interpretation takes place,
unary ?id nodes, which are phonologically vac-
uous, can be eliminated.
The definition scheme f2 = ?0,?,??, with ?
defined as the union of the following formulas (for
i ? {0, 1}), eliminates unary nodes by connecting
a non-?id node dominated by a path of ?id nodes
to the parent of the topmost ?id in the path. Again,
[etc] stands for the omitted ?elsewhere condition?,
which here reasserts edges from the source.
?i(x, y) = ? ?id (x) ? ? ?id (y)
? ?x?(xi x
? ? x? + y
? ?y?(x? ? y? ? y? + y
? ?id(y
?))) ? [etc]
An example of the composed transduction f2 ?
f1 is given in Figure 4.
3.3.3 Base prosodic words
Before reducing the remaining reducible modes
of combination, it is necessary to create prosodic
word constituents, notated ?, that cover the in-
dependently pronounceable ?strong? leaves of the
tree, allowing the word-sensitive clitic modes of
combination to be interpreted correctly. Prosodic
35
VP
V?
AccP
NPpro
Pro
w
Accpro
mmo
V
ol
NPpro
Pro
w
7?
?p
_
?e
wmmo
ol
w
Figure 4: Relabeling and ?id-elimination.
words are encoded by the scheme given in Sec-
tion 3.2.
The definition scheme f3 = ?2,?,??, with ?
and ? the union of the ? and ? formulas below,
specifies a transduction that takes two additional
copies of all nodes, relabels the copies of strong
leaf nodes as @ and ?, and draws edges as appro-
priate.
?1(x) = ?2(x) =
?(@,1)(x) = ?(?,2)(x) = Str(x)
?(1,0,0)(x, y) = ?Str(y) ? x1 y
?(1,0,1)(x, y) = Str(y) ? x1 y
?(0,1,0)(x, y) =
?(1,1,2)(x, y) = Str(x) ? x = y
?(0,0,0)(x, y) = True
An example of the tree transduction given by
f3 is shown in Figure 5, with identity of copies
indicated by subscript letters and the number of
the copy by superscript numerals.
3.4 Interpreting clitic combination modes
The composed transduction f3 ? f2 ? f1 pro-
duces reducible phonological terms in which the
prosodic structure necessary to interpret the clitic
modes of combination (?p, ?e, and ?2p) is present.
The interpretation of the clitic modes proceeds
in three steps. ?Local? clitics, siblings of prosodic
words, are amalgamated into their hosts (Section
3.4.1). ?Long-distance? clitics, which are not
?p
?p
sone?ef
t 7?
?p
?p
@1?
?2?sone
0
?
ef
t
Figure 5: Prosodic word insertion.
thus locally attached, are lowered to their hosts
(Section 3.4.2) and then attached as local clitics.
Second-position clitics are finally lowered and at-
tached by the same means, as a special case (Sec-
tion 3.4.3).
3.4.1 Local clisis
Locally connected clitics can be directly in-
corporated into their hosts. The word con-
stituent so derived is the recursive structure (e.g.
[?clitic [?host]]) generally assumed for cliticized
words (cf. Inkelas and Zec, 1990; Zec, 2005).
Proclitics and enclitics can be interpreted sepa-
rately. For proclitics, the relevant notion of ?local-
ity? can be expressed by a predicate ?p(x), which
identifies ?p nodes connected to @ nodes by a path
of ?p nodes.
?p(x) := ?p (x) ? ?y(@(y)
? x+1 y ? ?z(x
? z
? z + y ? ?p(x)))
The 2-copying MS transduction specified by
the definition scheme f4 = ?2,?,??, with ?
and ? given by the union of the ? and ? formu-
las below, produces the appropriate bracketing by
projecting a new word above each proclitic and
relocating each proclitic?s sibling to the new word
constituent.
?1(x) = ?2(x) = ?(@,0)(x) =
?(@,1)(x) = ?(?,2)(x) = ?p (x)
?(1,0,1)(x, y) = ?(1,1,2)(x, y) = ?p (x) ? x = y
?(0,1,0)(x, y) = ?p (x) ? x1 y
?(0,0,0)(x, y) = ?(1,0,0)(x, y) = [etc]
36
?p?
?p?
@
?sone
ef
t 7?
@0?
@1?
?2?@
0
?
@1?
?2?@
?sone
ef
t
Figure 6: Local proclisis.
Figure 6 gives an example of a tree transfor-
mation effected by f4, again with subscripts and
superscripts indicating copies.
The interpretation of local enclitics proceeds
similarly. A predicate ?e(x) defines the relevant
notion of locality.
?e(x) := ?e (x) ? ?y(@(y)
? x+0 y ? ?z(x
? z
? z + y ? ?e(x)))
The transduction f5 = ?2,?,??, with ? and
? given by the union of the ? and ? formulas be-
low, produces the appropriate bracketing. This
transduction is more complicated than the pro-
clitic transformation in that enclitics, right chil-
dren in the source tree, must be relocated to left
branches of @ nodes.
?1(x) = ?2(x) =
?(@,0)(x) = ?(@,1)(x) =
?(?,2)(x) = ?e (x)
?(0,1,0)(x, y) = ?e (x) ? x0 y
?(1,1,0)(x, y) =
?(1,0,2)(x, y) = ?e (x) ? x = y
?(0,0,0)(x, y) = ?e (x) ? x1 y ? [etc]
?(1,0,0)(x, y) = [etc]
Figure 7 gives an example of the tree transduc-
tion specified by f5.
?e?
w@
?mmo
7?
@1?
@0?
?2?w
@
?mmo
Figure 7: Local enclisis.
3.4.2 Long-distance proclisis
Long-distance clitics, which are not locally
combined with their hosts, incorporate into them
in the same manner as local clitics (i.e. by trans-
ductions f4 and f5) but must be lowered to them
to do so.
Only long-distance proclisis is relevant to the
grammar fragment under consideration. A long-
distance proclitic is a non-local proclitic (see Sec-
tion 3.4.1 for the notion of ?locality?) adjacent
to a word in the yield, ignoring other proclitics.
Pronouns count as proclitics for this purpose, so
a predicate Pc?(x) including pronouns is defined.
The predicate Adj(x, y) expresses adjacency of x
and y, and the predicate Lp(x), which identifies
the parents of long-distance proclitics, is defined
in terms of Adj(x, y).
Pc?(x) := Pc(x) ? w(x) ? ef(x)
Adj(x, y) := x ? y ? ?x?(x ? x?
? x? ? y ? Leaf(x?)
? Pc?(x?))
Lp(x) := ?p (x) ? ?x
?, y(@(y)
? x0 x
? ?Adj(x?, y))
The parents of long-distance proclitics get at-
tached to ?goal? nodes?that is, @ nodes or other
parents of long-distance proclitics?by the right
child relation. The predicate G(x) identifies
goals, and NG(x, y) identifies node x?s nearest
goal y.
G(x) := ?p (x) ?@(x)
NG(x, y) := x+ y ? G(y) ? ?y?(x+ y?
? G(y?)? y ? y?)
The parent of the topmost in a path of ?p nodes
must get attached, by whatever child relation con-
37
nects that parent node to that path, to the right
child of the lowest node in the path. The higher-
order syntactic abbreviation PC[i;x, y] specifies
the relevant relation, whereby a path of ?p nodes
begins with the ith child of x and leads to y.
PC[i;x, y] := ? ?p (x) ? ? ?p (y)
? ?x?(?p(x
?) ? xi x
?
? x? +1 y ? ?y
?(x? ? y?
? y? +1 y ? ?p(y
?)))
The parent of a @ node targeted by a set of
long-distance clitics gets attached to the highest
parent of a clitic in that set. The predicate Hip(x)
identifies such highest proclitic parents. Only
?maximal? @ nodes, those that are highest in the
right-recursive path of @ nodes leading to an ?,
are relevant; these are identified by the predicate
Max@p(x). The abbreviation WC[i;x, y] identi-
fies a highest ?p node y adjacent to a maximal @
node that is the ith child of x.
Hip(x) := Lp(x) ? ?x
?(x0 x
?
? ?y(y ? x? ? ?Pc?(y)))
Max@p(x) := @(x) ? ??y(y 1 x ?@(y))
? ?z(x+1 z ? ?(z))
WC[i;x, y] := ?x?, y?(Max@p(x?)
? xi x
? ? y 0 y
?
?Adj(y?, x?) ? Hip(y))
Once these auxiliary predicates are defined, a
simple MSO transduction f6 = ?0,?,??meeting
the specifications given above can be defined by
the union of the following formulas.
?1(x, y) = ?p (x) ? NG(x, y)
? PC[1;x, y] ?WC[1;x, y] ? [etc]
?0(x, y) = PC[0;x, y] ?WC[0;x, y] ? [etc]
Figure 8 gives an example of the transduction
specified by f6. The transduction f4 can be com-
posed with f6 to produce the appropriate con-
stituency for the lowered proclitics.
3.4.3 Second-position clisis
There is little substantive difference between
long-distance proclitics and 2P clitics?both ar-
rive in their position by a ?lowering? transfor-
mation that targets @ nodes. The transductions
?2p
?p?
?p?
_?
. . .@
?tamio
w
a
de
7?
?2p
_?
. . .?p?
?p?
@
?tamio
w
a
de
Figure 8: Long-distance proclisis, part 1: lowering.
already defined can be recycled, essentially un-
changed, to derive 2P clisis.
Assume a lowering transduction f ?6 identical to
f6 except operating on ?2p nodes. The resulting
lowered 2P clitics, which are in a ?proclitic? con-
figuration, can then be ?rotated? and relabeled as
enclitics. The MSO transduction f7 = ?0,?,??
given by the union of the following formulas pro-
duces this transformation.
??e(x) = ?2p (x)
?0(x, y) = ? ?2p (x) ? x0 y
? ?2p(x) ? x1 y
?1(x, y) = ? ?2p (x) ? x1 y
? ?2p(x) ? x0 y
The local enclisis transduction f5 is then ap-
plied to incorporate the 2P clitics into their hosts.
An example transformation effected by the trans-
duction f5 ? f7 ? f ?6 is shown in Figure 3.4.3.
3.5 Algorithmic implementation
No automaton compiler for MSO transductions
exists, and the non-elementary complexity of the
MSO-to-automaton translation procedure ensures
that the development of a practical compiler will
be a difficult undertaking. The most convenient
algorithmic implementation of the above analy-
sis is therefore an indirect one: an extension-
ally equivalent algorithm constructed in an ex-
pressively equivalent transduction framework.
38
?2p?
_?
. . .?
a=w=tamio
de
7?
_?
. . .@1?
@0?
?2?de
?
a=w=tamio
Figure 9: Second position clisis.
Second-order Abstract Categorial Grammar
(Kanazawa, 2009b) is one such framework,
equivalent to MSO in tree-transforming power
(Kanazawa, 2009a). ACG tree transductions,
which are expressed as linear ?-term homo-
morphisms and thus have the same complexity
as linear ?-term normalization, can be imple-
mented in Haskell in the manner of Kiselyov and
Shan (2010). A function extensionally equivalent
to that defined logically above can be defined in
a simple ACG consisting of a composed pair of
homomorphisms and implemented in Haskell in a
pair of type classes.
4 Discussion and conclusion
The analysis of Sahidic Coptic 2P clitics in terms
of prosodic constituency and tree transformation
given above successfully accounts for the alterna-
tion shown in sentences (2) and (3). It promises to
scale to a larger fragment of Coptic grammar, ac-
commodating the addition of clitic main verbs and
direct objects without further ado. The general ap-
proach also promises to extend straightforwardly
to other languages with 2P clitics, such as Russian
and Hittite. Since the general technique of MSO
transduction underlying the analysis applies to all
tree-deriving grammar formalisms, richer gram-
matical backbones than CFG can be deployed as
necessary.
This transductive analysis is in line with a
nascent convergence in perspectives on restrictive
formal syntax. The mildly context-sensitive lan-
guages, polynomially parseable languages con-
taining limited cross-serial dependencies such as
those induced by 2P clitics, have received a
new logical characterization in light of the past
decade?s surge of interest in disentangling deriva-
tions from their interpretations.6 Mildly context-
sensitive languages are the images of recogniz-
able tree languages under monadic second-order
transductions.7 This generalizes not only string-
generating formalisms like linear context-free
rewriting systems (Vijay-Shanker et al, 1987;
Weir, 1992) but also context-free languages of
graphs (Engelfriet and Maneth, 2000) and linear
?-terms (Kanazawa, 2009a; Kanazawa, 2010).8
This perspective suggests a modular approach
to framework revision in the face of problematic
natural language phenomena. Transductive inter-
pretations are an integral, if not universally recog-
nized, component of restrictive grammar frame-
works. Hence, to meet new descriptive challenges
such as those posed by 2P clitics, it is natural
to extend those frameworks? interpretive compo-
nents by means of MSO rather than rebuilding
them from scratch.
No software toolkit for MSO transduction com-
parable to the XFST toolkit for regular ex-
pressions (Beesley and Karttunen, 2003) or the
MONA toolkit for MSO (Henriksen et al, 1995)
presently exists, however. Nevertheless, MSO is
an excellent candidate for a high-level specifica-
tion language for tree transformations, promising
to play the same role for tree transduction that lan-
guages such as XFST play for string transduction.
MSO meanwhile serves the useful purpose of pro-
viding a denotational check on the complexity of
tree transformation algorithms.
Acknowledgments
Many thanks to John Hale, Sarah Murray,
Michael Weiss, and three anonymous reviewers
for their valuable comments. Thanks also to
Chung-chieh Shan, Chris Barker, Greg Kobele,
Makoto Kanazawa, and Zolta?n Varju? for their
conversation and inspiration. This research was
supported by the Social Sciences and Humanities
Research Council.
6See for instance Michaelis et al (2000), de Groote
(2001), Ranta (2002), Morawietz (2003), Muskens (2003),
and Pollard (2008), among many others.
7See Kolb et al (2003) for an application of this perspec-
tive to the purely syntactic crossing dependencies of Dutch
and Swiss German noted by a reviewer.
8Closely related perspectives can be found in the frame-
works of second-order Abstract Categorial Grammar and
Koller & Kuhlmann (2011)?s ?interpreted regular tree gram-
mar? paradigm.
39
References
Alexandra Y. Aikhenvald. 2003. Typological parame-
ters for the study of clitics, with special reference to
Tariana. In Robert M. W. Dixon and Alexandra Y.
Aikhenvald, editors, Word: a Cross-Linguistic Ty-
pology, pages 42?78. Cambridge University Press,
Cambridge.
Stephen R. Anderson. 2005. Aspects of the Theory of
Clitics. Oxford University Press, Oxford.
Emmon Bach. 1987. Some generalizations of cat-
egorial grammars. In Walter J. Savitch, Emmon
Bach, William Marsh, and Gila Safran-Naveh, ed-
itors, The Formal Complexity of Natural Language,
pages 251?279. D. Reidel, Dordrecht.
Kenneth R. Beesley and Lauri Karttunen. 2003. Finite
State Morphology. CSLI Publications, Stanford.
Roderick Bloem and Joost Engelfriet. 2000. A com-
parison of tree transductions defined by monadic
second order logic and by attribute grammars. Jour-
nal of Computer and System Sciences, 6(1):1?50.
Tina Bo?gel, Miriam Butt, Ronald M. Kaplan,
Tracy Holloway King, and John T. Maxwell. 2010.
Second position and the prosody-syntax interface.
In Miriam Butt and Tracy Holloway King, editors,
Proceedings of the LFG10 Conference, pages 107?
126.
Hubert Comon, Max Dauchet, Remi Gilleron, Christof
Lo?ding, Florent Jacquemard, Denis Lugiez, So-
phie Tison, and Marc Tommasi. 2007. Tree au-
tomata techniques and applications. Available at:
http://www.grappa.univ-lille3.fr/tata.
Bruno Courcelle and Joost Engelfriet. 2012. Graph
structure and monadic second-order logic: a lan-
guage theoretic approach. In press.
Bruno Courcelle. 1991. The monadic second-order
logic of graphs V: on closing the gap between defin-
ability and recognizability. Theoretical Computer
Science, 80:153?202.
Philippe de Groote. 2001. Towards abstract categorial
grammars. In Association for Computational Lin-
guistics, 39th Annual Meeting, pages 148?155.
Joost Engelfriet and Sebastian Maneth. 1999. Macro
tree transducers, attribute grammars, and MSO de-
finable tree translations. Information and Computa-
tion, 154:34?91.
Joost Engelfriet and Sebastian Maneth. 2000. Tree
languages generated by context-free graph gram-
mars. In Hartmut Ehrig, editor, Graph Transforma-
tion, pages 15?29, Berlin and Heidelberg. Springer
Verlag.
Joost Engelfriet, Eric Lilin, and Andreas Maletti.
2009. Extended multi bottom-up tree transducers:
Composition and decomposition. Acta Informatica,
46:561?590.
Zolta?n Fu?lo?p, Armin Ku?hnemann, and Heiko Vogler.
2004. A bottom-up characterization of determin-
istic top-down tree transducers with regular look-
ahead. Information Processing Letters, 91:57?67.
Aaron Halpern. 1995. On the Placement and Mor-
phology of Clitics. CSLI Publications, Stanford.
Jesper G. Henriksen, Jakob Jensen, Michael
J?rgensen, Nils Klarlund, Robert Paige, Theis
Rauhe, and Anders Sandholm. 1995. MONA:
Monadic second-order logic in practice. Lecture
Notes in Computer Science, 1019:89?110.
Sharon Inkelas and Draga Zec. 1990. Prosodi-
cally constrained syntax. In Sharon Inkelas and
Draga Zec, editors, The phonology?syntax connec-
tion, pages 365?378. University of Chicago Press,
Chicago.
Makoto Kanazawa. 2009a. A lambda calculus char-
acterization of MSO definable tree transductions.
Talk given at the 10th Asian Logic Conference.
Makoto Kanazawa. 2009b. Second-order abstract cat-
egorial grammars. Manuscript.
Makoto Kanazawa. 2010. Second-order abstract cat-
egorial grammars as hyperedge replacement gram-
mars. Journal of Language, Logic, and Informa-
tion, 19(2):137?161.
Oleg Kiselyov and Chung-chieh Shan. 2010.
Lambda: the ultimate syntax-semantics interface.
NASSLLI 2010 course notes.
Hans-Peter Kolb, Jens Michaelis, Uwe Mo?nnich, and
Frank Morawietz. 2003. An operational and deno-
tational approach to non-context-freeness. Theoret-
ical Computer Science, 293:261?289.
Alexander Koller and Marco Kuhlmann. 2011. A gen-
eralized view on parsing and translation. In Pro-
ceedings of the 12th International Conference on
Parsing Technologies, pages 2?11.
Andreas Maletti. 2011. Tree transformations and de-
pendencies. Lecture Notes in Computer Science,
6878:1?20.
Jens Michaelis, Uwe Mo?nnich, and Frank Morawietz.
2000. Derivational minimalism in two regular and
logical steps. In Proceedings of TAG+ 5.
Frank Morawietz. 2003. Two-Step Approaches to Nat-
ural Language Formalisms. Mouton de Gruyter,
Berlin and New York.
Reinhard Muskens. 2003. Language, lambdas, and
logic. In Richard T. Oehrle and Geert-Jan Krui-
jff, editors, Resource sensitivity in binding and
anaphora, pages 23?54. Kluwer, Dordrecht.
Marina Nespor and Irene Vogel. 1986. Prosodic
Phonology. Foris, Dordrecht.
Tito Orlandi. 2004. Towards a computational gram-
mar of Sahidic Coptic. In Jacques van der Vliet
and Mat Immerzeel, editors, Coptic studies on the
threshold of a new millennium, pages 125?130,
Leuven. Peeters.
Carl Pollard. 2008. An introduction to convergent
grammar. Manuscript.
40
Aarne Ranta. 2002. Grammatical Framework. Jour-
nal of Functional Programming, 14:145?189.
Chris Reintges. 2004. Coptic Egyptian (Sahidic Di-
alect). Ru?diger Ko?ppe Verlag, Ko?ln.
Elisabeth Selkirk. 1986. On derived domains in sen-
tence phonology. Phonology Yearbook, 3:371?405.
K. Vijay-Shanker, David J. Weir, and Aravind K. Joshi.
1987. Characterizing structural descriptions pro-
duced by various grammatical formalisms. In Pro-
ceedings of the 25th annual meeting on Association
for Computational Linguistics.
Jacob Wackernagel. 1892. U?ber ein Gesetz der
indogermanischen Wortstellung. Indogermanische
Forschungen, 1:333?436.
David J. Weir. 1992. Linear context-free rewriting
systems and deterministic tree-walking transducers.
In Proceedings of the 30th annual meeting on Asso-
ciation for Computational Linguistics.
Draga Zec. 2005. Prosodic differences among func-
tion words. Phonology, 22:77?112.
Arnold M. Zwicky. 1977. On clitics. Manuscript.
41
