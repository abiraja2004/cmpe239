A Psychol inguist ical ly Motivated Parser for CCG 
Michae l  Niv* 
Techn ion  - Israel  Ins t i tu te  of Techno logy  
Haifa,  Israel  
In ternet :  n iv@l inc .c i s .upenn.edu  
Abst ract  
Considering the speed in which humans resolve syn- 
tactic ambiguity, and the overwhelming evidence 
that syntactic ambiguity is resolved through selec- 
tion of the analysis whose interpretation is the most 
'sensible', one comes to the conclusion that inter- 
pretation, hence parsing take place incrementally, 
just about every word. Considerations ofparsimony 
in the theory of the syntactic processor lead one to 
explore the simplest of parsers: one which repre- 
sents only analyses as defined by the grammar and 
no other information. 
Toward this aim of a simple, incremental parser 
I explore the proposal that the competence gram- 
mar is a Combinatory Categorial Grammar (CCG). 
I address the problem of the proliferating analyses 
that stem from CCG's associativity of derivation. 
My solution involves maintaining only the max- 
imally incremental analysis and, when necessary, 
computing the maximally right-branching analysis. 
I use results from the study of rewrite systems to 
show that this computation is efficient. 
1 In t roduct ion  
The aim of this paper is to work towards a compu- 
tational model of how humans yntactically process 
the language that they hear and read. The endpoint 
of this enterprise is a precise characterization f the 
process that humans follow, getting details such as 
timing and garden pathing exactly right. 
*The research reported here was conducted as part 
of my Ph.D. thesis work at the University of Pennsyl- 
vania and supported by the following grants: DARPA 
N00014-90-J-1863, ARO DAAL03-89-C-0031, NSF IRI 
90-16592, Ben Franklin 91S.3078C-1. Preparation of 
this paper was supported by a postdoctoral fellowship 
at the Technion in Israel. I am grateful to Mark Hepple, 
Mitch Marcus, Mark Steedman, VM Tannen, and Henry 
Thompson for helpful suggestions, and to Jeff Siskind 
for help with typesetting CCG derivations. Any errors 
are my own. 
1.1 Ambigu i ty  Resolut ion 
Recently, a great deal of evidence has accumu- 
lated that humans resolve syntactic ambiguity by 
considering the meaning of the available analyses 
and selecting the 'best' one. Various criteria for 
goodness of meaning have been advanced in the 
psycholinguistic literature: e.g. thematic compat- 
ibility and lexical selection (Trueswell and Tanen- 
haus 1994), discourse felicity of definite expressions 
(Altmann et al 1994), temporal coherence in dis- 
course (Trueswell and Tanenhaus 1991), grammati- 
cal function vis avis given/new status (Niv 1993b), 
and general world-knowledge (Kawamoto and Far- 
rar 1993). 
Many of the works cited above consider the tim- 
ing of the ambiguity resolution decision. The evi- 
dence is overwhelming that ambiguity is resolved 
within a word or two of the arrival of disambiguat- 
ing information--  that is, when there is a meaning- 
based criterion which militates toward one or an- 
other syntactically available analysis, that analysis 
is selected. Should the other analysis turn out to be 
the ultimately correct analysis, a garden path will 
result. Given that the various analyses available are 
compared on various criteria of sensibleness, it fol- 
lows that these analyses are constructed and main- 
tained in parallel until disambiguating information 
arrives. Indeed, there is psycholinguistic evidence 
that the processor maintains the various analyses 
in parallel (Nicol and Pickering 1993; MacDonland 
et al 1992). 
Our parser, therefore, must be able to build and 
maintain analyses in parallel. It must also extract 
from the developing parse in a prompt fashion all 
of the semantically relevant syntactic ommitments 
(e.g. predicate-argument relations) in order to allow 
the interpretation module that it feeds to make ac- 
curate evaluations of the meaning. Recovery from 
garden paths is not addressed in this paper. 
125 
1.2 Parser  and Grammar  
Let us adopt the widely held position that humans 
posses a representation of grammatical competence 
which is independent of any process (e.g. produc- 
tion, perception, acquisition) that uses it. Steed- 
man (1994) argues that if two theories of the gram- 
mar and processor package have identical empirical 
coverage, but one has a more complex parser, then 
the other is preferred. This preference is not just 
on philosophical grounds of cleanliness of one's the- 
ories, but stems from consideration of the evolution 
of the human linguistic capacity: A theory whose 
grammar requires a complex parser in order to be of 
any use would entail a more complex or less likely 
evolutionary path which the parser and grammar 
took together than would a theory whose gram- 
mar requires little specialized apparatus by way of 
a parser, and could thus have evolved gradually. 
So what is the simplest parser one can con- 
struct? In other words, what is the minimal ad- 
dition of computational apparatus to the compe- 
tence grammar necessary to make it parse? From 
the argument in section 1.1, this addition must in- 
clude a mechanism for maintaining analyses in par- 
allel. Minimally, nothing else is necessary - -  the 
data structure which resides in each parallel slot in 
the parser is a direct representation of an analysis 
as defined by the competence machinery. 
Suppose the grammatical competence is one 
that always divides an English clause into a subject 
and a predicate (VP henceforth). Suppose also that 
the primary operations of the grammar are putting 
constituents together. Could the minimal parser 
for such a grammar account for the minimal pair in 
(1)? 
(1) a. The doctor sent for the patient arrived. 
b. The flowers sent for the patient arrived. 
(1)a is a garden path. In (1)b the garden path is 
avoided because flowers are not good senders. The 
difference between (1)a and b indicates that well 
before the word 'arrived' is encountered, the proces- 
sor has already resolved the ambiguity introduced 
by the word 'sent'. That is, in the main-verb anal- 
ysis of 'sent', the interpreter is aware of the relation 
between the subject the verb before the end of the 
VP. But the minimal parser cannot put the subject 
together with 'sent' or 'sent for the' because the 
latter are not a complete VP! 
There are two possible solutions to this prob- 
lem, each relaxes one of the two suppositions above: 
Steedman (1994) argues for a grammatical theory 
(CCG) which does not always make the subject- 
predicate juncture the primary division point of a 
clause. Shieber and Johnson (1993) on the other 
hand, argue that there is no need to assume that a 
constituent has to be complete before it is combined 
with its sister(s). At this time, neither approach 
is sufficiently developed to be evaluable (e.g. they 
both lack broad coverage grammar) so either one is 
viable. In this paper, I develop the first. 
2 P re l iminar ies  
CCG is a lexicalized grammar formalism - -  a lexi- 
con assigns each word to one or more grammatical 
categories. Adjacent constituents can combine by 
one of a small number of combinatory rules. The 
universe of grammatical categories contains a col- 
lection of basic categories (e.g. atomic symbols uch 
as n, np, s, etc. or Prolog terms such np(3,sg)) and 
is closed under the category-forming connectives / 
and \.  Intuitively a constituent of category X/Y  
(resp. X\Y) is something of category X which is 
missing something of category Y to its right (resp. 
left). The combinatory rules are listed 1 in table 1. 
They formalize this intuition. A combinatory rule 
may be qualified with a predicate over the variables 
X, Y, and Z1.. .Zn. 
A derivation is a binary tree whose leaves are 
each a single-word constituent, and whose internal 
nodes are each a constituent which is derived from 
its children by an application of one of the com- 
binatory rules. A string w is grammatical just in 
case there exists a derivation whose frontier is w. I 
equivocate between a derivation and the constituent 
at its root. An analysis of a string w is a sequence 
of derivations uch that the concatenation of their 
frontiers is w. 
3 The  S imples t  Parser  
Let us consider the simplest conceivable parser. Its 
specification is "find all analyses of the string so 
far." It has a collection of slots for maintaining 
one analysis each, in parallel. Each slot maintains 
an analysis of the string seen so far - -  a sequence 
of one or more derivations. The parser has two 
operations, as shown in figure 1. 
This parser succeeds in constructing the incre- 
mental analysis (2) necessary for solving the prob- 
lem in (1). 
1Two common combinatory rules, type-raising and 
substitution are not listed here. The substitution rule 
(Steedman 1987) is orthogonal to the present discussion 
and can be added without modification. The rule for 
type-raising (see e.g. Dowty 1988) can cause difficulties 
for the parsing scheme advocated here (Hepple 1987) 
and is therefore assumed to apply in the lexicon. So 
a proper name, for example, would be have two cate- 
gories: np and s/(s\np). 
126 
Forward combinat ion rule name 
X/Y  Y X >0 
X/Y  YIZ X\[Z >1 
X/Y  Y\]-Z11Z2 X~z \[Z2 >2 
Backward Combination rule name 
X/Y  YIZ1. . . IZ.  X IZ I . . . \ [Z .  >n 
Y X \Y  , X <0 
YIZ x \Y  , xlz <1 
Y\]-Z, \[Z2 X\Y  ~ X\]-ZIIZ2 " <2 
Y\[Z1... \[Zn X\Y  ' X\[Z1... \[Zn <n 
IZ stands for e i ther /Z  or \Z. Underlined regions in a rule must match. 
Table 1: The combinatory rules 
? scan  
get the next word from the input stream 
for each analysis a in the parser's memory 
empty the slot containing a
for each lexical entry e of the word 
make a copy a ~ of a 
add the leaf derivation e to the right of a ~ 
add a ~ as a new analysis 
? combine  
for each analysis a in the parser's memory 
if a contains more than one constituent 
and some rule can combine the rightmost 
two constituents in a 
then make a copy a ~ of a 
replace the two constituents of a ~ by 
their combination 
add a / as a new analysis 
Figure 1: Parser operations 
the flowers sent (2) s/(s\np)/, n >0s\np/pp 
s/(s\np) 
>I s/pp 
But this parser is just an unconstrained shift- 
reduce parser that simulates non-determinism via 
parallelism. It suffers from a standard problem of 
simple bottom-up arsers: it can only know when a 
certain substring has a derivation, but in case a sub- 
string does not have a derivation, the parser cannot 
yet know whether or not a larger string containing 
the substring will have a derivation. This means 
that when faced with a string such as 
(3) The insults the new students shouted at 
the teacher were appalling. 
the parser will note the noun-verb ambiguity of 'in- 
sults', but will be unable to use the information that 
'insults' is preceded by a determiner to rule out the 
verb analysis in a timely fashion. It would only no- 
tice the difficulty with the verb analysis after it had 
come to the end of the string and failed to find a 
derivation for it. This delay in ruling out doomed 
analyses means that the parser and the interpreter 
are burdened with a quickly proliferating collection 
of irrelevant analyses. 
Standard solution to this problem (e.g. Earley's 
1970 parser; LR parsing, Aho and Johnson 1974) 
consider global properties of the competence gram- 
mar to infer that no grammatical string will be- 
gin with a determiner followed by a verb. These 
solutions exact a cost in complicating the design 
of the parser: new data structures uch as dotted 
rules or an LR table must be added to the parser. 
The parser is no longer a generic search algorithm 
for the competence grammar. Given the flexibil- 
ity of CCG derivations, one may consider impos- 
ing a very simple constraint on the parser: every 
prefix of a grammatical string must have a deriva- 
tion. But such a move it too heavy-handed. Indeed 
CCG often gives left-branching derivations, but it is 
not purely left-branching. For example, the deriva- 
tion of a WH-dependency requires leaving the WH- 
filler constituent uncombined until the entire gap- 
containing constituent is completed, as in (4). 
(4) 
whose cat did Fred find 
n s/s s/(s\np) >i s\np/np q/(s/np)/n >0 
q/(s/np) s/(s\np) 
s/np >I 
>0 
4 The  V iab le  Ana lys i s  Cr i te r ion  
Given the desideratum to minimize the complexity 
of the biologically specified parser, I propose that 
the human parser is indeed as simple as the scan- 
combine algorithm presented above, and that the 
ability to rule out analyses uch as determiner+verb 
is not innate, but is an acquired skill. This 'skill' is 
implemented as a criterion which an analysis must 
meet in order to survive. An infant starts out with 
this criterion completely permissive. Consequently 
it cannot process any utterances longer than a few 
words without requiring excessively many parser 
127 
slots. But as the infant observes the various analy- 
ses in the parser memory and tracks their respective 
outcomes, it notices that certain sequences of cate- 
gories never lead to a grammatical overall analysis. 
After observing an analysis failing a certain number 
of times and never succeeding, the child concludes 
that it is not a viable analysis and learns to discard 
it. The more spurious analyses are discarded, the 
better able the child is to cope with longer strings. 
The collection of analyses that are maintained 
by the parser is therefore filtered by two indepen- 
dent processes: The Viable Analysis Criterion is a 
purely syntactic filter which rules out analyses inde- 
pendently of ambiguity. The interpreter considers 
the semantic information of the remaining analyses 
in parallel and occasionally deems certain analyses 
more sensible than their competitors, and discards 
the latter. 
Given that English sentences rarely require 
more than two or three CCG constituents at any 
point in their parse, and given the limited range 
of categories that arise in English, the problem 
of learning the viable analysis criterion from data 
promises to be comparable to other n-gram learn- 
ing tasks. The empirical validation of this proposal 
awaits the availability of a broad coverage CCG for 
English, and other languages. 2 
5 CCG and f lex ib le  der ivat ion  
5.1 The  Prob lem 
CCG's distinguishing characteristic is its deriva- 
tional flexibility - -  the fact that one string is po- 
tentially assigned many truth-conditionally equiva- 
lent analyses. This feature is crucial to the present 
approach of incremental parsing (as well as for a 
range of grammatical phenomena, see e.g. Steed- 
man 1987, 1994; Dowty 1988). But the additional 
ambiguity, sometimes referred to as 'spurious', is 
also a source of difficulty for parsing. For example, 
the truth-conditionally unambiguous string 'John 
was thinking that Bill had left' has CCG deriva- 
tions corresponding to each of the 132 different bi- 
nary trees possible for seven leaves. The fact that 
this sentence makes no unusual demands on hu- 
mans makes it clear that its exponentially prolif~ 
crating ambiguous analyses are pruned somehow. 
The interpreter, which can resolve many kinds of 
ambiguity, cannot be used to for this task: it has 
no visible basis for determining, for example, that 
the single-constituent analysis 'John was thinking' 
2In addition to the category-ambiguity problem in 
(3), the viable analysis criterion solves other problems, 
analogous to shift-reduce ambiguities, which are omit- 
ted here for reasons of space. The interested reader is 
referred to Niv (1993a) for a comprehensive discussion 
and an implementation f the parser proposed here. 
somehow makes more sense (in CCG) than the two- 
constituent analysis ' John'+'was thinking'. 
Note that the maximMly left-branching deriva- 
tion is the one which most promptly identifies yn- 
tactic relations, and is thus the preferred erivation. 
It is possible to extend the viable analysis criterion 
to encompass this consideration ofefficiency as well. 
The infant learns that it is usually most efficient 
to combine whenever possible, and to discard an 
analysis in which a combination is possible, but not 
taken. 3. 
While this left-branching criterion eliminates 
the inefficiency due to flexibility of derivation, it 
gives rise to difficulties with (5). 
John loves Mary madly 
(5) s/vp vp/np np vp\vp 
In (5), it is precisely the non-left-branching 
derivation of 'John loves Mary' which is necessary 
in order to make the VP constituent available for 
combination with the adverb. (See Pareschi and 
Steedman 1987.) 
5.2 P rev ious  Approaches 
Following up on the work of Lambek (1958) who 
proposed that the process of deriving the grammat- 
icality of a string of categories be viewed as a proof, 
there have been quite a few proposals put forth 
for computing only normal forms of derivations or 
proofs (KSnig 1989; Hepple and Morrill 1989; Hep- 
ple 1991; inter alia). The basic idea with all of these 
works is to define 'normal forms' - -  distinguished 
members of each equivalence class of derivations, 
and to require the parser to search this smaller 
space of possible derivations. But none of the pro- 
posed methods result in parsing systems which pro- 
ceed incrementally through the string. 4
Karttunen (1989) and others have proposed 
chart-based parsers which directly address the 
derivational ambiguity problem. For the present 
purpose, the principal feature of chart parsing - -  
the factoring out of constituents from analyses - -  
turns out to create an encumberance: The inter- 
preter cannot compare constituents, or arcs, for the 
purposes of ambiguity resolution. It must compare 
analyses of the entire prefix so far, which are awk- 
ward to compute from the developing chart. 
3 Discussion of the consequences of this move on the 
processing of picture noun extractions and ambiguity- 
related filled-gap effects is omitted for lack of space. See 
Niv (1993a). 
4In the case of Hepple's (1991) proposal, a left- 
branching normal form is indeed computed. But its 
computation must be delayed for some words, so it 
does not provide the interpreter with timely informa- 
tion about the incoming string. 
128 
Pareschi and Steedman (1987) propose the fol- 
lowing strategy: (which can be taken out of the 
chart-parsing context of their paper) construct 
only maximally left-branching derivations, but al- 
low a limited form of backtracking when a locally 
non-left-branching derivation turns out to have 
been necessary. For example, when parsing (5), 
Pareschi and Steedman's algorithm constructs the 
left branching analysis for 'John loves Mary'. When 
it encounters 'madly', it applies >0 in reverse to 
solve for the hidden VP constituent 'loves Mary' 
by subtracting the s/vp category 'John' from the s 
category 'John loves Mary': 
John loves Mary 
(6) s/vp vp/nP>l  np 
s/np 
vp 
vp 
madly 
vp\vp 
>0 
reveal >0 
<0 
>0 
The idea with this 'revealing' operation is to ex- 
ploit the fact that the rules >n and <n, when viewed 
as three-place relations, are functional in all three 
arguments. That is, knowledge any two of {left con- 
stituent, right constituent, result), uniquely deter- 
mines the third. There are many problems with the 
completeness and soundness Pareschi and Steed- 
man's proposal (Hepple 1987; Niv 1993a). For ex- 
ample, in (7), the category b\c cannot be revealed 
after it had participated in two combinations of 
mixed direction: <0 and >0. 
(7) 
a/b  c d\C<ob\d b\c\(b\c)  
d <0 
b >0 
a stuck 
6 A Proposa l  
Pareschi and Steedman's idea of lazy parsing is 
very attractive in the present setting. I propose 
to replace their unification-based revealing opera- 
tion with a normal-form based manipulation of the 
derivation history. The idea is to construct and 
maintain the maximally incremental, left-branching 
derivations. (see section 4.) When a constituent 
such as the VP 'loves Mary' in (5) may be nec- 
essary, e.g. whenever the right-most constituent in 
an analysis is of the form X\Y, the next-to-right- 
most derivation is rewritten to its equivalent right- 
branching derivation by repeated application the 
local transformations , defined in (8) and (9). 
The right frontier of the rewritten derivation ow 
provides all the grammatically possible attachment 
sites. 
(8) 
W/X x \ [Y I ' ' ' IYm-~/Ym 
W \[Yz'.' lYre-1/Y,~ 
Ym \[Zl"" \[Z,~ 
>m 
>n 
WIYz ' - ' IYm- I lZ I ' ' - IZ~ 
W/X X\[Y1.. . \ [Ym_I/Ym Ym IZl ' ' ' \ ]Zn 
X lYe.-. \[Ym-~ IZ~... IZ,~ 
~n 
~m+n-1 
(9) 
W IY1.-. Wm-~lZ~"'' IZ, 
Y.~ \[Z1-..lZn X \[Ya' ' ' IY,~-I \Ym W\X 
<n x IYz""" IY,,,-a Iza..- IZ,  
WIYI- . - IYm_I IZI ' . . IZn 
.._.._4 
<m+n-I 
Ym IZ~'--IZ. XIY1.-. IY.~_I\Ym W\X 
<m 
W \[Y1-.. IY.~-~ \Ym 
<n 
W WI""  \[Y~-I \[Za'.- \[Z, 
Results from the study of rewrite systems (see 
Klop (1992) for an overview) help determine the 
computational complexity of this operation: 
6.1 A Rewri te System for Derivations 
If x is a node in a binary tree let A(x) (resp. p(x)) 
refer to its left (right) child. 
Any subtree of a derivation which matches the 
left-hand-side of either (8) or (9) is called a redez. 
The result of replacing a redex by the corresponding 
right-hand-side of a rule is called the eontractum. A 
derivation is in normal form (NF) if it contains no 
redexes. In the following I use the symbol --~ to 
also stand for the relation over pairs of derivations 
such that the second is derived from the first by 
one application of ,7. Let ~--  be the converse 
of---*. Let ( , be ~ U ~---. Let ,~ be the 
reflexive transitive closure of --~ and similarly, 
the reflexive transitive closure of ~---, and , ,, the 
reflexive transitive closure of ~ ,. Note that . . . .  
is an equivalence relation. 
A rewrite system is strongly normalizing (SN) 
iff every sequence of applications of ~ is finite. 
Theorem 1 ---* is SN 5 
proo f  Every derivation with n internal nodes is 
assigned a positive integer score. An application of 
is guaranteed to yield a derivation with a lower 
5Hepple and Morrill (1989) Proved SN for a slight 
variant of ---*. The present proof provides a tighter 
score function, see lemma 1 below. 
129 
Figure 2: Schema for one redex in DRS 
score. This is done by defining functions # and 
for each node of the derivation as follows: 
(~  if x is a leaf node 
#(x)  = + #(A(x))  + #(p(x)) otherwise 
f0  if x is a leaf node 
~(x) = ~?r(A(x)) + ~(p(x)) + #(A(x))  otherwise 
Each application of ---+ decreases a, the score 
of the derivation. This follows from the monotonic 
dependency of the score of the root of the derivation 
upon the scores of each sub-derivation, and from the 
fact that locally, the score of a redex decreases when 
---+ is applied: In figure 2, a derivation is depicted 
schematically with a redex whose sub-constituents 
are named a, b, and c. Applying ~ reduces ~(e), 
hence the score of the whole derivation. 
in redex: 
#(d) -=- #(a) - t -#(b)+I  
cr(d) = or(a) + ~(b) + #(a) 
~(~) = ~(d) + ~(c) + #(d) 
= c~(a) + q(b) + q(c) + #(b) + 2-~t(a) + 1 
in contractum: 
~( f )  = a(b) + ~(c) +#(b)  
~(~') = ~(~) + ~( f )  + #0)  
= ~(~) + ~(b) + ~(c) + #0)  + #(~) 
< ~(~) + ~(b) + ~(0 + #0)  + 2. #(~) + 1 
\[\] 
Observe that #(x)  is the number of internal nodes 
in x. 
Lemma I Given a derivation x, let n = #x.  Ev- 
ery sequence of applications of ---+ is of length at 
most n(n - 1)/2. 6 
p roo f  By induction on n: 
Base case: n = 1; 0 applications are necessary. 
Induction: Suppose true for all derivations of fewer 
than n internal nodes. Let m = #A(x).  So 0 < 
6Niv (1994) shows by example that this bound is 
tight. 
m_<n- -1  and#p(x)=n-m-1 .  
~(~) - n(n - 1)/2 = 
= a(A(x)) + a(p(x)) + #(A(x))  - n(n - 1)/2 
< ~( .~-~)  ( ,~-~- i ) ( ,~- ,~-2)  ~(n-1) 
- 2 + 2 + m -  2 
= (m + 1)(rn - (n - 1)) 
_< 0 recalling that 0 _< m _< n - 1 
\[\] 
So far I have shown that every sequence of ap- 
plications of ----+ is not very long: at most quadratic 
in the size of the derivation. I now show that when 
there is a choice of redex, it makes no difference 
which redex one picks. That  is, all redex selection 
strategies result in the same normal form. 
A rewrite system is Church-Rosser (CR)just in 
case 
w,  y . (z  ,, ,, y ~ 3z . (z - - -~ z ^ y ,, z))  
A rewrite system is Weakly Church-Rosser 
(WCR) just in ease 
w,  ~, w . (w~ ~ ^  w~ y) ~ 3z . ( ,  ~ z ^ y ,, z) 
Lemma 2 ---, is WCR.  
p roo f  Let w be a derivation with two distinct re- 
dexes x and y, yielding the two distinct derivations 
w I and w" respectively. There are a few possibili- 
ties: 
case 1: x and y share no internal nodes. There are 
three subcases: x dominates y (includes y as a 
subconstituent), x is dominated by y, or z and y 
are incomparable with respect o dominance. Ei- 
ther way, it is clear that the order of application 
of ---+ makes no difference. 
case 2: x and y share some internal node. Without 
loss of generality, y does not dominate x. There 
exists a derivation z such that w~----~ zAw"---~ z. 
This is depicted in figure 3. (Note that all three 
internal nodes in figure 3 are of the same rule 
direction, either > or <.) 
\[\] 
Lemma 3 (Newman) WCR A SN D CR. 
Theorem 2 ~ is CR. 
p roo f  From theorem 1 and lemmas 2 and 3. \[\] 
Therefore any maximal sequence of applica- 
tions of ~ will lead to the normal form 7. We 
are free to select the most efficient redex selection 
scheme. From lemma 1 the worst case is quadratic. 
Niv (1994) shows that the optimal strategy, of ap- 
plying --+ closest as possible to the root, yields ---+ 
applications equences of at most n steps. 
7Assuming, as is the case with extant CCG accounts, 
that constraints on the applicability of the combinatory 
rules do not present significant roadblocks to the deriva- 
tion rewrite process. 
130 
d c 
c ? / ~ a x ~  ~ a d cb  a 
a b a 
Arrows are annotated by the substrucure 
to which they are applied 
Figure 3: Why --~ is weakly Church-Rosser 
Note that all that was said in this section gen- 
eralizes beyond CCG derivations to any associative 
algebra. 
6.2 Discuss ion 
Given the rightmost subconstituent recovered us- 
ing the normal form technique above, how should 
parsing proceed? Obviously, if the leftward looking 
category which precipitated the normal form com- 
putation is a modifier, i.e. of the form X\X, then 
it ought to be combined with the recovered con- 
stituent in a form analogous to Chomsky adjunc- 
tion. But what if this category is not of the form 
X\X? For example, should the parser compute the 
reanalysis n (10)? 
(lO) 
a/b b/C>lC/d s\(a/b)\(b/d) 
a/c 
>1 a/d 
a/b b/c c/d>lS\(a/b)\(b/d ) 
b/d 
<0 s\(a/b) 
<0 
S 
Ascribing the same non-garden-path status to 
the reanalysis n (10) that we do to (6) would consti- 
tute a very odd move: Before reanalysis, the deriva- 
tion encoded the commitment that the /b of the 
first category is satisfied by the b of the b/c in the 
second category. This commitment is undone in the 
reanalysis. This is an undesirable property to have 
in a computational model of parsing commitment, 
as it renders certain revisions of commitments eas- 
ier than others, without any empirical justification. 
Furthermore, given the possibility that the parser 
change its mind about what serves as argument to 
what, the interpreter must be able to cope with 
such non-monotonic updates to its view of the anal- 
ysis so far - -  this would surely complicate the de- 
sign of the interpreter, s Therefore, constituents on 
the right-frontier ofa right-normal-form should only 
combine with 'endocentric' categories to their right. 
The precise definition of 'endocentric' depends on 
the semantic formalism used - -  it certainly includes 
post-head modifiers, and might also include coordi- 
nation. 
Stipulating that certain reanalyses are impos- 
sible immediately makes the parser 'incomplete' in
the sense that it cannot find the analysis in (10). 
From the current perspective of identifying arden 
paths, this incompleteness i  adesirable, ven a nec- 
essary property. In (10), committing to the compo- 
sition of a/b and b/c is tantamount to being led 
down the garden path. In a different sense, the 
current parser is complete: it finds all analyses if
the Viable Analysis Criterion and the interpreter 
never discard any analyses. 
7 Conc lus ion  
The current proposal shifts some of the burden tra- 
ditionally associated with the parser to other com- 
ponents of the human cognitive faculty: the inter- 
preter esolves ambiguity, and an acquired skill re- 
moves 'garbage' analyses from the parser's mem- 
ory - -  solving the so-called spurious ambiguity 
problem, as well as effectively applying rammar- 
global constraints traditionally computed by top- 
down techniques or grammar compilation. The re- 
sultant parser adheres to the desideratum that it 
be a generic search algorithm for the grammar for- 
malism, provided the definition of CCG explicitly 
includes the notion of 'derivation' and explicates the 
truth-conditional equivalence r lation. Such inclu- 
sions have indeed been proposed (Steedman 1990). 
B ib l iography  
Aho, Alfred and S. C. Johnson. 1974. LR Parsing. 
ACM Computing Surveys 6(2):99-124. 
Altmann, Gerry T., Alan Garnham, and Judith A. 
Henstra. 1994. Effects of syntax in human sen- 
tence parsing: Evidence against a structure- 
based proposal mechanism. Journal of Ex- 
perimental Psychology: Learning, Memory and 
Cognition 20(1):1-8. 
Dowty, David. 1988. Type Raising, Functional 
Composition, and Non-Constituent Conjunc- 
tion. In Richard T. Oehrle, Emmon Bach, and 
sI am indebted to Henry Thompson for a discussion 
of monotonicity. 
131 
Deirdre Wheeler (Eds.), Categorial Grammars 
and Natural Language Structures. Reidel. 
Earley, Jay. 1970. An Efficient Context-Free Pars- 
ing Algorithm. Communications of the Asso- 
ciation for Computing Machinery 13:94-102. 
Hepple, Mark R. 1987. Methods for Parsing Combi- 
natory Grammars and the Spurious Ambiguity 
Problem. Master's thesis, University of Edin- 
burgh. 
Hepple, Mark R. 1991. Efficient Incremental Pro- 
cessing with Categorial Grammar. In Proceed- 
ings of the 29th Annual Meeting of the Associ- 
ation for Computational Linguistics, 79-86. 
Hepple, Mark R. and Glyn V. Morrill. 1989. Pars- 
ing and Derivational Equivalence. In Proceed- 
ings of the Annual Meeting of the European 
Chapter of the Association for Computational 
Linguistics. 
Karttunen, Lauri. 1989. Radical Lexicalism. In 
Mark Baltin and Anthony S. Kroch (Eds.), Al- 
ternative Conceptions of Phrase Structure, 43- 
65. Chicago: University of Chicago Press. 
Kawamoto, Alan and William Farrar. 1993. The 
Return of Visiting Relatives: Pragmatic Ef- 
fects in Sentence Processing. Quarterly Jour- 
nal of Experimental Psychology 46A(3):463 - 
487. 
Klop, Jan W. 1992. Term Rewrite Systems. 
In Samson Abramsky, Dov M. Gabbay, and 
T. S. E. Maibaum (Eds.), Handbook of Logic 
in Computer Science, Vol. 2, 1 - 116. Oxford: 
Clarendon Press. 
KSnig, Esther. 1989. Parsing as Natural Deduction. 
In Proceedings of the g7th Annual Meeting of 
the Association for Computational Linguistics, 
272-279, June. 
Lambek, Joachim. 1958. The Mathematics of 
Sentence Structure. American Mathematical 
Monthly 65:154-169. 
MacDonland, Maryellen, Adam Just, and Patri- 
cia Carpenter. 1992. Working Memory Con- 
straints on the Processing of Syntactic Ambi- 
guity. Cognitive Psychology 24:56-98. 
Nicol, Janet L. and Martin J. Pickering. 1993. Pro- 
cessing Syntactically Ambiguous Sentences: 
Evidence from Semantic Priming. Journal of 
Psycholinguistic Research. 
Niv, Michael. 1993a. A Computational Model of 
Syntactic Processing: Ambiguity Resolution 
from Interpretation. PhD thesis, University of 
Pennsylvania. (ftp://ftp.cis.upenn.edu/pub/- 
ircs/tr/93-27.ps). 
Niv, Michael. 1993b. Resolution of Syntactic Am- 
biguity: the Case of New Subjects. In Proceed- 
ings of the 15th Annual Conference of the Cog- 
nitive Science Society, Hillsdale, NJ. Lawrence 
Erlbaum Associates. 
Niv, Michael. 1994. The complexity of normal 
form rewrite sequences for Associativity. Tech- 
nical Report LCL 94-6, Computer Science 
Department, Technion. (ftp://ftp.cis.upenn.- 
edu/pub/niv/rewrite.ps). 
Pareschi, Remo and Mark a. Steedman. 1987. A 
Lazy Way to Chart Parse with Combinatory 
Grammars. In Proceedings of the 25th Annual 
Meeting of the Association for Computational 
Linguistics. 
Shieber, Stuart M. and Mark Johnson. 1993. Vari- 
ations on Incremental Interpretation. Journal 
of Psycholinguistic Research. (to appear). 
Steedman, Mark J. 1987. Combinatory Gram- 
mars and Parasitic Gaps. Natural Language 
and Linguislic Theory 5:403-439. 
Steedman, Mark J. 1990. Gapping as Con- 
stituent Coordination. Linguistics and Philos- 
ophy 13:207-264. 
Steedman, Mark J. 1994. Grammars and Proces- 
sors. In Hans Kamp and Christian Rohrer 
(Eds.), Aspects of Computational Linguistics. 
Springer Verlag. (to appear). 
Trueswell, John C. and Michael K. Tanenhaus. 
1991. Tense, Temporal Context and Syntactic 
Ambiguity Resolution. Language and Cogni- 
tive Processses 6:303-338. 
Trueswell, John C. and Michael K. Tanenhaus. 
1994. Toward a Lexicalist Framework of 
Constraint-Based Syntactic Ambiguity Reso- 
lution. In Charles Clifton, Lyn Frazier, and 
Keith Rayner (Eds.), Perspectives on Sentence 
Processing. Hillsdale, NJ: Lawrence Erlbaum 
Associates. 
132 
