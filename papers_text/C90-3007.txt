Partial Descriptions and Systemic Grammar 
Chr is  Brew 
Cent re  for Cogn i t ive  Science 
Un ivers i ty  of Ed inburgh  
2 Bucc leuch  P lace  
Ed inburgh  
U.K. 
chr i sbr~uk .ac .ed .cogsc i  
Abst rac t  
This paper exarnines the properties of feature- 
ba~sed partial descriptions built on top of tlalli- 
day's systemic networks. We show that the cru- 
cial operation of consistency checking for such 
descriptions i NP-complete, and therefore prob- 
ably intractable, but proceed to develop algo- 
rithms which can sometimes alleviate the un- 
pleasant consequence s of this intractability. 
1 In t roduct ion  
tIalliday's system networks \[3\] lay out in dia- 
grammatic form the interlinked sets of linguistic 
choices which a speaker nmst make in order to 
generate an utterance. As such they have formed 
the basis of several computer models of natu- 
ral language generation \[4,11\].ttowever, as Mel- 
lish \[12\] has pointed out, a network can also be 
read as encoding a set of background constraints 
which restrict the co- occurrence of descriptive 
features, and hence as a specification of the way 
in which partial descriptions of linguistic objects 
can be combined. Although it is easy to com- 
bine feature sets, it is not a.lways clear whether 
the resulting combined description can actually 
describe any well-formed linguistic object. Thus 
the main task we face is that of checking feature 
sets for consistency. 
Consider for example the framework given by 
Winograd for the description of English pro- 
nouns, which is reproduced in figure 1. Sup- 
pose thai; a natural language system has some- 
how recovered the information that a pronoun 
in a particular position can be treated as both 
third (person) and subjective. At this stage 
we could be dealing with either "they", "he", 
"she" or "it". Were we to combine this under- 
specified pronoun with the further description 
feminine we should know for sure that the pro- 
noun described is "she" and the number has 
to be singular, since the network dictates, in 
a way which will be explained in detail below, 
that the choice between feminine, masculine, 
and neuter is only applicable to third person 
singular pronouns. The network thus provides 
the raw material for particular sorts of limited 
inference about the behaviour of pronouns. We 
wanted to investigate the mathematical proper- 
ties of systemic networks in order to better un- 
derstand the nature of the constraints on feature 
structure which they are capaMe of expressing. 
Both Mellish and Kasper \[7\] provide trans- 
lations of systemic networks into non-graphical 
formMisms: Mellish expresses constraints as ax- 
ioms within a simple subset of predicate logic, 
while Kasper uses an extended version'of Func- 
tional Unification Grammar \[10\]. Unfortunately 
the methods which they then use to check for 
consistency are powerful general methods which 
may incur considerable computational cost. 
We initially hoped to show that systemic net- 
works constitute a low-power constraint lan- 
guage which combines the twin goals of linguis- 
tic credibility and computationM tractability. 
While the main result we present in this paper is 
a negative one indicating the unexpected power 
of systemic networks, we do go on to present sug- 
gestions about how networks can be exploited in 
natural anguage applications. 
36  
p I  
question 
animate 
\[inanimate 
personM 
demonstr 
first 
second 
third 
i leal '  
{ 
~_~ fat' 
su bjective 
objective 
rettexive 
possessive 
possdet 
feminine 
{ m~tsculine 
sing}}la r \] neuter 
phtr a,1 
Figure 1: A pronoun network for English 
2 What ' s  in a net?  
Our first task is to provide a precise charact.erisa-- 
tion of the information expressed by ~ systemic 
network. We begin by defining a way of labelling 
systemic networks, then provide a translation 
which maps labelled networks into collections of 
axioms expressed in the tbrm of' propositional 
logic. This work is a slight retinement of a very 
similar approach used by Mellish. 
Figure 1 contains examples of each of the tbur 
types of syste.m which we need to consider, linked 
together in such a way as to produce a descrip- 
tion of the possible \['(3rills of English pronouns. 
The leftmost system is a choice system ex- 
pressing the opposition between qucslion~ per- 
soual and dcmonslral, ive pronotlns. Within 
these broad classification further distinctions op- 
erate. For example queslion pronouns iila~y be 
a'lt{71?ralC or inani'maiG and m,lst also make a 
choice between various case'-;. The system which 
expresses t~he necessity of making i;wo sinmltane-- 
otis choices is indicated wit.h a left. curly bracket, 
and is i,l,e and system. Note that ~here are two 
routes ~,o tile choice of case, one t?om q'ucslion 
and the other fro,,  personal. The system which 
ties these two routes together is called the dis- 
junctive system. Finally, the rightmost system is 
a choice between various grammatica! genders. 
This system can only be reached it' a pronoun is 
both third and singular. The system involv- 
ing the right-hand curly bracket which expresses 
this is called the conjunctive system. 
3 Labe l l lngs  for networks  
We now establish technical definitions of two 
types of labelling for systemic networks. 
3.1 Bas ic  Labe l t ings  
A basic labelling is defined to be a partial func- 
tion from lines to names such that 
?~ A line receives a name if and only if there 
is a choice system to whose right hand side 
i~ is directly attached. 
No two lines carry the same name. 
Figure l ,~dlows a ba,~dc labelling 
3"\] 
plq 
question 
personal 
demonstr 
animate 
question 
\] ~nanimate 
question personal 
V 
question 
personal 
first 
personal 
personal 
demonstr 
demonstr 
second 
subjective 
objective 
reflexive 
possessive 
possdet 
third , third 
personal ~ - - ~  
V singular 
rtemcm~tr \[ 
\[ plur______~L__ 
near 
f 
\[ far 
feminine 
masculine 
neuter 
Figure 2: An exhaustively labelled version of Winograd's network 
3.2 Exhaust ive  labe l l ings  
Let ~" be a 1-1 function from lines to names for 
these lines. 5 c is an exhaust ive  label l ing of a 
network if and only if the following conditions 
hold :- 
1. That  part of ~" which provides names for 
lines attached irectly to the right of choice 
systems must be a basic labelling. 
. If 5 c assigns a line name lzh~ to the line 
which is directly attached to the left hand 
side of an and  system, then it must also 
assign that name to the lines which are di- 
rectly attached to the right hand side of that 
system. 
. If )c assigns line names 11,12,... lm to the 
lines entering a con junct ive  system (where 
ll is the label for the line appearing at the 
top of the system and lm that at the bo f  
tom), then it must assign the label ll A 12 A 
? .. lm to the line which leaves that system 
4. If ~" assigns line narnes ll, 12,... l,~ to the 
lines entering a d is junct ive  system (adopt- 
ing the same ordering convention as above), 
then it must assign the label 11 V l~ V ... Ira 
to the line which leaves that system. 
Figure 2 is an exhaustively labelled version of 
figure 1. 
4 Trans lat ing label led net- 
works 
We use a translation scheme given by Mellish 
\[12\] to produce a set of logical axioms equiva- 
lent in meaning to the original network. Mel- 
lish's scheme can be applied to all four types of 
system and the correct results will be produced, 
but with our labelling scheme only choice sys- 
tems contribute to the meaning of the network. 
Each choice system translates into two axioms: 
an accessibility axiom, expressing tile constraint 
that none of the labels to the right of the system 
can be selected unless the entry point of the sys- 
tem has been reached; and an exclusivity axiom 
expressing the fact that these labels are mutually 
exclusive. 
38  
v 
a2 
Figure 3: A network for 3SAT 
5 Systemic classification is 
NP-hard 
In this section we show that the problem of sys- 
temic cl~sification is at least as hard as prob- 
lerns known to be NP-hard. This is done by 
constructing a polynomial time mapping 1~ from 
instances of the NP-hard problem called 3SAT to 
networks which can be tricked into solving this 
p rob lem for us. For an introduction to similar 
linguistic applications of complexity theory see 
Barton et al\[1\]. 
If there were a polynomial time algorithm tbr 
checking arbitrary systemic networks, it would 
follow that 3SAT could be solved by the compo- 
sition of the mapping that constructs the net- 
work with the algorithm that cheeks the net- 
work. Since this composition is itself a polyno-. 
mial time algorithm we would then have a poly- 
nomial time solution fc)r 3SAT, and hence for 
all other problems of the complexity class AfT ) . 
Thus the successflfl construction of 1I implies 
that systemic classification is itself NP-hard. 
5.1. ~_\[~he 3SAT prob lem 
3SAT is the problem of determining the satisfia- 
bility of a boolean forrnnla, stated ill con imictive 
normal form, in which exactly three va~:iables oc- 
cur in each clause, of the conj unctioa. These vari- 
ables may either be positive or negated, and may 
be repeated fl:om clause to clause. It, is known 
that 3SAT is just as hard as the proble~rl of sat-- 
isfiability for general boolean formulae (Barl, on 
at al provide a demonst, ration of this fact on pp 
52-~35 of \[(I). 
5.2  The  mapp ing  f rom 3SAT in-  
s tances  to  networks  
The mapping II takes a 3SAT instance and pro- 
duces a network. Let tile name of the 3SAT in- 
stance be E and its length NI,;. 
? Make a list of the variable names used in E, 
counting positive and negative occurrences 
of a wtriable as tile same. This can certainly 
he done in time polynomial in Nt~ using a 
standard sorting algorithm such as merge 
sort. Let the name of tile list of variable 
names be V and its length Nv. We use the 
example of the very simple expression 
(x VffVz) A(zV~V~7) (1) 
? Construct a network consisting of a large 
and  system feeding Nv parallel binary 
choice systems. Each choice system car- 
ries two labels, one corresponding to a vari- 
ahle name in V and the other formed by 
negating the label on the other branch of 
the system. The choice of prefix should be 
such that all labels on tile resulting network 
are unique. '\]'his part of the process is poly- 
nomial in the length of V. 
e For every clause in E, add a teraary dis? 
junct ive  system linking the lines of the net- 
work having the label,; corresponding to the 
three symbols of the clause. This part of the 
process involves scanning down the Nv sys- 
tems of the network once for each clause of 
E, and is thereR)re also polynomial in NE. 
Finally, binary eholee systems are attached 
to the outputs of all the d is junct ive  sys- 
tems introduced in tile last stage. These 
systems are labelled with generated labels 
distinct from those already used in the net- 
work. 'l'his step is clearly also polynomia, l 
in Nt~', requiring the crealion of a nmnber 
of choice systems equal t,o the number of' 
clauses in P;. 
The network giveu i~ figure 3 is the Oile which 
would be produced l?om t5'. In order to use 
the construcLed network to solve the satisfiabil- 
ity problem for /';, we check an expression cor- 
respouding t/) I;he conjnnction of all the three 
member (-lause,~; in t~:. This is lmili by choosing 
~:,l arbitrary label from each of tim rightmost 
choice systems. 'fhe coa itmct, io~ of the:;e la- 
bels is a consisi:,ent descr~l ,,~on whenever all the" 
39  
clauses of E can be satisfied by the same value 
assignment. The choice systems to the left of 
the disjunction express the facts that no vari- 
able can be simultaneously true and false. A 
correct checking algorithm will succeed in just 
those circumstances where there is at least one 
value assignment for the variables of E which 
makes E come out true. Systemic lassification 
is therefore at least as hard as the other problems 
in Alp,and we should be very surprised to find 
that it can in general be solved in polynomial 
time. 
6 Checking systemic de- 
scriptions 
Although accurate checking of systemic descrip- 
tions is an NP-hard problem, it is still possible 
to devise algorithms which carry out part of the 
process of checking without incurring the cost of 
complete correctness. Our algorithm depends on 
a pre-processing step in which the original net- 
work is split into two components, each of which 
embodies ome but not all of the information 
that was present at the outset. 
The first component is a simplified version of 
the original network, in which no disjunctive sys- 
tems are present. This is achieved by remov- 
ing all disjunctive systems, then re-attaching any 
dangling systems to a suitable point to the left of 
the position of the disjunction. For convenience 
in book-keeping we introduce special generated 
features which take the place of the disjunctive 
expressions that appear in the labelling of the 
original network. Figure 5 shows the result of 
peeling awaythe disjunction in figure 4. 
The second component of the network consists 
of a collection of statements indicating ways in 
which the generated features may be discharged. 
For the example network we would have had to 
note that 
gen f eat ~_ cl V c2 
Taken together the simplified version of the net- 
work and the statements about generated fen- 
tures contain all the information eeded. The 
simplified network is now amenable to deterrnin- 
istic and efficient checking procedures, includ- 
ing reductions to term unification as proposed 
by Mellish. The efficiency of these techniques 
hinges on the removal of disjunctive systems. 
The second stage of checking involves the 
search for a consistent way of discharging all the 
al  
a2 
a2 Vbl 
bl 
b~ 
CI 
\[ C2 
Figure 4: A small example network 
al  
a2 
C~ 
genfeat { c2 
bl 
b2 
Figure 5: The transformed version of the exam- 
ple 
40 
generated features introduced by the first stage. 
This is the potentially costly part of the checking 
process, since separate disjunctions may conspire 
to produce exponentially many different alter- 
natives which have to be checl(ed. It was to be 
expected that the process of systemic hecking 
would involve an exponential cost somewhere, so 
this is no surprise. 
Even the second stage of checking is cheap un- 
less two separate conditions hoh:t 
1.. The description produced by the first stage 
of checking must involve many generated 
features. 
2. The generated features must be interdepen- 
dent, in that the way in which one feature 
is discharged colmtrains the way in which 
olher fiea.tures can be discharged. 
We can't be sure whether the first condition is 
going to hold until we see the OUtl)ut of the 
first stage, but we ca.n estimate the extent to 
which features interact, by inspect, lag the check- 
ing rules which arise when (he net, work is pard- 
t.ioned. Thus, while we can't promise that the 
use of systemic networks will ensure tractability 
!'or arbitrary grammars, v,'e can help linguists to 
catch potential t)roblerns in the formulation of 
their feature system,,~ during grammar develop- 
ment, and avoid the risk of unexpected combi- 
natorial explosions during the exploitation of the 
grammars in question. 
Refe : re  aces  
\[1\] G.Edward Barton, Robert C.13erwick, and 
Eric Sven I{,istad. Computational Complex- 
ily a'ad Nalu~al La'/zguage. MIT Press, 1988. 
\[2\] Andreas Eisele and aochen l)6rre. Unifi- 
cation of Disjunctiw.' Feature I)escriptions 
in Proceedings of the 25t, h Annual Meeting 
of the Association for Computational l,ino 
guisi;ics, Stanford University, Stanford, ()A. 
July G-9, t987. 
\[3\] M.A.K Halliday. q'he /brm of! a func- 
tional grammar, h: G.R.Krcss, edit.or, 
llatlidayl:Sysle'm and t"~clioTt i7~ Larzc/~za:\]e, 
chapter '.2, pages 7-25. ()?ford University 
Press, t976. 
\[4\] (:~eo;ge t\[oughton. 73c pvocl'~clio~' of ga~;'- 
9uoye i~ Dialo9~?c: A co'mp~daZio-nal model 
Ph D thesi,;, Universit.y of Sussex, 1986. 
\[5\] Lauri Karttunen. Features and Values Pro-- 
ceedings of the 25th Annual Meeting of the 
Association for Computational Linguistics, 
Stantbrd University, StaMbrd, CA, July 2- 
(5, 1984. 
\[6\] Robert T. Kasper. Fea(,ure Structures: A 
Logical Theory with Application to l,an- 
guage Analysis PhD thesis, University of 
Michigan, 1987. 
\[7\] l/,obert T. Kasper. An Experimental Parser 
for Systemic Grammars Ill Proceedings of 
the i2th International Conference on Con> 
putational ,inguistics: COLIN(\] 88, Bu- 
dapest: August 1988. 
\[8\] tlobert T.Kaspcr. A Unification Method for 
1)isjunctive Feature Descriptions In Pro- 
ceedings of the 25th Annual Meeting of the 
As,;ociation for Computational l,inguistics, 
Stanford University, Stanford, CA, July 6- 
9, 1987. 
\[9\] Robert T.Ka.~per, and William Rounds. A 
Logical Semantics For Feature Structur(~s 
In Proceedings of the 24th Annual Meeting 
of the Association t'or Computatiorm.1 Lin-- 
guistics, Columbia University, New York, 
NY, June 10-13, 1986. 
\[10\] Martin Kay. Parsing in flmctional tmiti- 
cation grammar. In D.R. Dowry, L. Kar- 
tunnen, and A.Zwicky, editors, Nalural 
Langua,qe Pa','sin9, pages 251 278. Can> 
bridge University Press, Cambridge, Eng- 
land, 1982. 
\[11\] W.C.Mann and C.Mathiessen. Nigel : A 
systemic 
grammar for text generation l/_Benson and 
a.Greaves Sy.siemic Perspectives on Dis- 
course, A blex,London,England,1985. 
\[12\] C.S. Mellish. hnplementing sysl,cmic dassi-. 
fication by unilication. Comlnda*io~zal law. 
guistics, 14(11):40 5l, 1988. Wil~ter. 
1\[3\] Terry Winograd. U~,dc~:sla~dz/~ 9 Nol~tra\[ 
La~9~*age. Academic Press, 1972. 
4 i  
