Demonstrat ion of ILEX 3.0 
Michae l  O 'Donne l l t  (micko@dai .ed.ac .uk) ,  
A l is ta i r  Knott:~ (a l ik@hermes.otago.ac .nz) ,  
Jon  Ober lander t  ( jon@cogsci .ed.ac.uk) ,  
Chr is  Mel l isht (chr ism@dai .ed.ac .uk)  
t Divis ion o f  Informat ics ,  Un ivers i ty  of  Ed inburgh .  
:~ Depar tment  of  Computer  Science ~ Otago  University.  
Abst rac t  
We will demonstrate the ILEX system, a system 
which dynamically generates descriptions of data- 
base objects for the web, adapting the description to 
the discourse context and user type. Among other 
improvements in version 3, the system now gener- 
ates from relational databases, and this demonstra- 
tion will focus on this ability. We will also show how 
incremental extensions to the domain semantics im- 
prove the quality of the text produced. 
1 In t roduct ion  
ILEX is a tool for dynamic browsing of database- 
defined information: it allows a user to browse 
through the information in a database using hyper- 
text. ILEX generates descriptions of a database ob- 
ject on the fly, taking into account he user's con- 
text of browsing. For more information on ILEX, 
see Knott et al (1997) and Mellish et al (1998). 
The demonstration will consist of generating a
series of texts, in each case adding in additional com- 
ponents of the domain semantics. This short paper 
should be read in conjunction with the full paper 
elsewhere in this volume. 
2 Generat ing  f rom Bare  Data  
We start initially with a relational database, as 
defined by a set of tab-delimited database files, plus 
some minimal semantics. As discussed in the paper, 
we use assume a relational database to consist of two 
types of files: 
1. Entity Files: each of which provides data for 
a particular entity type. Each row (or record) 
defines the attributes of a different entity. See 
figure 1. 
2. Link Files: where a particular attribute may 
have multiple fillers, we use link files to define 
the entity-entity relations. See figure 2. 
To generate from these files, the dolnain-editor 
needs to provide two additional resources: 
1. Data-type specification for each entity-file, a 
specification of what data-type the values in the 
~ Material 
silver 
enamel 
gold 
Figure 2: A Sample from a Link file 
. 
3. 
column are, e.g., string, entity-id, domain type, 
etc. 
Domain Taxonomy: detailing the taxonomic or- 
ganisation of the various classes of the entities. 
Mapping Domain taxonomy onto Upper Model: 
ILEX uses an Upper Model (a domain- 
independent semantic taxonomy, see Bateman 
(1990)), which supports the grammatical ex- 
pression of entities, e.g., selection of pronoun, 
differentiation between mass and count entities, 
between things and qualities, etc. We require 
that the basic types in the domain taxonomy 
are mapped onto the upper model, to allow the 
entities to be grammaticalised and lexicalised 
appropriately. 
With just this semantics, we can generate texts, 
although impoverished texts, such as: 
The class of J-997 is necklace. It's de- 
signer is Jessie M. King. It's date is 1905. 
Several tricks are needed to generate without a 
specified omain semantics: 
Use of standard clause templates: lacking any 
knowledge of how different attributes are to be 
expressed, the system-can only generate ach 
attribute using a standard template structures, 
such as the X of Y is Z or It's X is Z. The 
attribute names, e.g., Designer, Style, etc. can 
be assumed to work as the lexical head of the 
Subject. This ploy sometimes goes wrong, but 
in general works. (this approach borrowed from 
Dale et al (1998)). 
257 
ID Class 
J-997 brooch 
J~998: :neddace 
J-999 i necklace 
etc. I 
Designer Date Style Place Sponsor 
King01 11905 Art-Deco London Liberty01 
King01 '19116 - Art-Deco "London 
Chanel01 1910 Art-Noveau Paris 
Figure 1: A Sample from an Entity file 
* Referring to Entities: there are a number of 
strategies open for referring to entities. If the 
Name attribute.is.supplied-(a:defined- attribute 
within the ILEX system), then the system can 
use this for referring. Lacking a name, it is pos- 
sible for the system to form nominal references 
using the Class attr ibute of the entity (all en- 
tities in ILEX databases are required to have 
this attribute provided). We could thus gener- 
ate indefinite references such as a brooch as first 
mentions, and on subsequent mentions, gener- 
ate forms such as the brooch or the brooch whose 
designer is Jessie M. King. Without specifica- 
tion of which entities should be considered part 
of the general knowledge of the reader, we must 
assume all entities are initially unknown. 
* Fact Annotations: ILEX was designed to work 
with various extra information known about 
facts, such as the assumed level of interest to the 
current reader model, the importance of the fact 
to the system's educational agenda, and the as- 
sumed assimilation of the information (how well 
does the system believe the reader to already 
understand it). See the main paper for more 
details. 
Lacking this information, the system assumes 
an average value for interest and importance, 
and a 0 value for assimilation (totally un- 
known). 
With only default values, the system cannot 
customise the text to the particular user. It may 
provide information already well known by the 
user, and thus risking boring them. Also, there 
can be no selection of information to ensure that 
the more interesting and important information 
is provided on earlier pages (the reader may not 
bother to look at later pages). 
Other information (defeasible rules), which allows 
us to organise the material into complex rhetorical 
structure, is also missing. 
So, these tricks allow us to generate simple texts, 
consisting of a list of template-formatted clauses. 
3 Add ing  Express ion  in fo rmat ion  
In the next step, we will add in information about 
how the various attributes hould be expressed. This 
includes three main resources: 
1. Syntactic expression of attributes: for each at- 
tribute, we provide a specification of how the 
......... ~. ~.~ribu:te~should~be~-expressed. syntactically. 
2. Lexicalisation of domain types: by providing 
a lexicon, which maps domain types to lexical 
items, we avoid problems of using the domain 
type itself as the spelling. The lexical inform- 
ation allows correct generation of inflectional 
forms (e.g., of the plural for nouns, comparative 
or superlative forms for adjectives). 
3. Restrictive modifiers for referring expressions: 
In choosing restrictive modifiers for forming re- 
ferring expressions, ome facts work better than 
others. For instance, the brooch designed by 
King is more likely to refer adequately than the 
brooch which was 3 inches long. ILEX allows 
the user to state the preferential order for choos- 
ing restrictive modifiers. 
The addition of these resources will result in im- 
proved expression within the clauses, but not af- 
fect the text structure itself, which are still a list 
of clauses in random order. 
4 Add ing  User  Annotat ions  
In the next step, we add in the user model, which 
provides, for each attribute type, predicted user in- 
terest, importance for the system, and expected user 
assimilation. 
Using these values, ILEX can start to organise 
the text, placing important/interesting i formation 
on earlier pages, and avoiding information already 
known by tile user. 
5 Add ing  Defeas ib le  Ru les ,  S tor ies  
As a final step, we add in various resources which 
improve the texture of the text. 
o Defeasible Rules: ILEX allows the assertion 
of generalisations like most Art Deco jewels 
use enamel. These rules allow the genera- 
tion of complex rhetorical structures which in- 
dude Generalisation, Exemplification and Con- 
cession. The use of these relations improves tim 
quality of the text generated. 
* Stories: much of the information obtainable 
about tile domain is in natural language. Of- 
ten, the information is specific to a particular 
258 
entity, and as such, it would be a waste of time 
to reduce the in.formation i to ILEX's Pred-Arg 
knowledge structure, just to regenerate he text. 
Because of this, ILEX allows the association 
of canned text with a database ntity (e.g., J- 
999), or type of entity (e.g., jewels designed for 
Liberty). The text can then be included in the 
text when the entity or type of entity is men- 
tioned. 
The intermixing of generated and canned text 
improves the qual i ty of generated texts by 
providing more variety of structures, and al- 
lowing anecdotes, which would be difficult to 
model in terms of the knowledge representation 
system. 
6 Conc lus ion  
By showing incremental addition of domain spe- 
cification within the ILEX system, we have demon- 
strated that it is a system which can function with 
varying degrees of information. This allows domain 
developers to rapidly prototype a working system, 
after which they can concentrate on improving the 
quality of text in the directions they favour. 
Re ferences  
John Bateman. 1990. Upper modeling: organiz- 
ing knowledge for natural language processing. 
In Proceedings of the Fifth International Work- 
shop on Natural Language Generation, Pitts- 
burgh, June. 
Robert Dale, Stephen J Green, Maria Milosavljevic, 
CEcile Paris, Cornelia Verspoor, and Sandra Wil- 
liams. 1998. The realities of generating natural 
language from databases. In Proceedings of the 
11th Australian Joint Conference on Artificial In- 
telligence, Brisbane, Australia, 13-17 July. 
Alistair Knott, Michael O'Donnell, Jon Oberlander, 
and Chris Mellish. 1997. Defeasible rules in con- 
tent selection and text structuring. In Proceedings 
of the 6th European Workshop on Natural Lan- 
9uage Generation, Gerhard-Mercator University, 
Duisburg, Germany, March 24 - 26. 
Chris Mellish, Mick O'Donnell, Jon Oberlander, and 
Alistair Knott. 1998. An architecture for oppor- 
tunistic text generation. In Proceedings of the 
Ninth International Workshop on Natural Lan- 
guage Generation, Niagara-on-the-Lake, Ontario, 
Canada. 
259 
