Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 281?290,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
Stop-probability estimates computed on a large corpus
improve Unsupervised Dependency Parsing
David Marec?ek and Milan Straka
Charles University in Prague, Faculty of Mathematics and Physics
Institute of Formal and Applied Linguistics
Malostranske? na?me?st?? 25, 11800 Prague, Czech Republic
{marecek,straka}@ufal.mff.cuni.cz
Abstract
Even though the quality of unsupervised
dependency parsers grows, they often fail
in recognition of very basic dependencies.
In this paper, we exploit a prior knowledge
of STOP-probabilities (whether a given
word has any children in a given direc-
tion), which is obtained from a large raw
corpus using the reducibility principle. By
incorporating this knowledge into Depen-
dency Model with Valence, we managed to
considerably outperform the state-of-the-
art results in terms of average attachment
score over 20 treebanks from CoNLL 2006
and 2007 shared tasks.
1 Introduction
The task of unsupervised dependency parsing
(which strongly relates to the grammar induction
task) has become popular in the last decade, and
its quality has been greatly increasing during this
period.
The first implementation of Dependency Model
with Valence (DMV) (Klein and Manning, 2004)
with a simple inside-outside inference algo-
rithm (Baker, 1979) achieved 36% attachment
score on English and was the first system outper-
forming the adjacent-word baseline.1
Current attachment scores of state-of-the-art un-
supervised parsers are higher than 50% for many
languages (Spitkovsky et al, 2012; Blunsom and
Cohn, 2010). This is still far below the super-
vised approaches, but their indisputable advan-
tage is the fact that no annotated treebanks are
needed and the induced structures are not bur-
dened by any linguistic conventions. Moreover,
1The adjacent-word baseline is a dependency tree in
which each word is attached to the previous (or the follow-
ing) word. The attachment score of 35.9% on all the WSJ
test sentences was taken from (Blunsom and Cohn, 2010).
supervised parsers always only simulate the tree-
banks they were trained on, whereas unsupervised
parsers have an ability to be fitted to different par-
ticular applications.
Some of the current approaches are based on
the DMV, a generative model where the gram-
mar is expressed by two probability distributions:
Pchoose(cd|ch, dir), which generates a new child
cd attached to the head ch in the direction dir (left
or right), and Pstop(STOP |ch, dir , ? ? ? ), which
makes a decision whether to generate another
child of ch in the direction dir or not.2 Such a
grammar is then inferred using sampling or varia-
tional methods.
Unfortunately, there are still cases where the in-
ferred grammar is very different from the gram-
mar we would expect, e.g. verbs become leaves
instead of governing the sentences. Rasooli and
Faili (2012) and Bisk and Hockenmaier (2012)
made some efforts to boost the verbocentricity of
the inferred structures; however, both of the ap-
proaches require manual identification of the POS
tags marking the verbs, which renders them use-
less when unsupervised POS tags are employed.
The main contribution of this paper is a consid-
erable improvement of unsupervised parsing qual-
ity by estimating the Pstop probabilities externally
using a very large corpus, and employing this prior
knowledge in the standard inference of DMV. The
estimation is done using the reducibility principle
introduced in (Marec?ek and Z?abokrtsky?, 2012).
The reducibility principle postulates that if a word
(or a sequence of words) can be removed from
a sentence without violating its grammatical cor-
rectness, it is a leaf (or a subtree) in its dependency
structure. For the purposes of this paper, we as-
sume the following hypothesis:
If a sequence of words can be removed from
2The Pstop probability may be conditioned by additional
parameters, such as adjacency adj or fringe word cf , which
will be described in Section 4.
281
Figure 1: Example of a dependency tree. Se-
quences of words that can be reduced are under-
lined.
a sentence without violating its grammatical cor-
rectness, no word outside the sequence depends on
any word in the sequence.
Our hypothesis is a generalization of the origi-
nal hypothesis since it allows a reducible sequence
to form several adjacent subtrees.
Let?s outline the connection between the Pstop
probabilities and the property of reducibility. Fig-
ure 1 shows an example of a dependency tree. Se-
quences of reducible words are marked by thick
lines below the sentence. Consider for example
the word ?further?. It can be removed and thus,
according to our hypothesis, no other word de-
pends on it. Therefore, we can deduce that the
Pstop probability for such word is high both for
the left and for the right direction. The phrase
?for further discussions? is reducible as well and
we can deduce that the Pstop of its first word
(?for?) in the left direction is high since it cannot
have any left children. We do not know anything
about its right children, because they can be lo-
cated within the sequence (and there is really one
in Figure 1). Similarly, the word ?discussions?,
which is the last word in this sequence, cannot
have any right children and we can estimate that its
right Pstop probability is high. On the other hand,
non-reducible words such, as the verb ?asked? in
our example, can have children, and therefore their
Pstop can be estimated as low for both directions.
The most difficult task in this approach is to au-
tomatically recognize reducible sequences. This
problem, together with the estimation of the stop-
probabilities, is described in Section 3. Our
model, not much different from the classic DMV,
is introduced in Section 4. Section 5 describes the
inference algorithm based on Gibbs sampling. Ex-
periments and results are discussed in Section 6.
Section 7 concludes the paper.
2 Related Work
Reducibility: The notion of reducibility belongs
to the traditional linguistic criteria for recogniz-
ing dependency relations. As mentioned e.g. by
Ku?bler et al (2009), the head h of a construction c
determines the syntactic category of c and can of-
ten replace c. In other words, the descendants of h
can be often removed without making the sentence
incorrect. Similarly, in the Dependency Analysis
by Reduction (Lopatkova? et al, 2005), the authors
assume that stepwise deletions of dependent ele-
ments within a sentence preserve its syntactic cor-
rectness. A similar idea of dependency analysis
by splitting a sentence into all possible acceptable
fragments is used by Gerdes and Kahane (2011).
We have directly utilized the aforementioned
criteria for dependency relations in unsuper-
vised dependency parsing in our previous pa-
per (Marec?ek and Z?abokrtsky?, 2012). Our depen-
dency model contained a submodel which directly
prioritized subtrees that form reducible sequences
of POS tags. Reducibility scores of given POS tag
sequences were estimated using a large corpus of
Wikipedia articles. The weakness of this approach
was the fact that longer sequences of POS tags
are very sparse and no reducibility scores could
be estimated for them. In this paper, we avoid this
shortcoming by estimating the STOP probabilities
for individual POS tags only.
Another task related to reducibility is sentence
compression (Knight and Marcu, 2002; Cohn and
Lapata, 2008), which was used for text summa-
rization. The task is to shorten the sentences while
retaining the most important pieces of informa-
tion, using the knowledge of the grammar. Con-
versely, our task is to induce the grammar using
the sentences and their shortened versions.
Dependency Model with Valence (DMV) has
been the most popular approach to unsupervised
dependency parsing in the recent years. It was in-
troduced by Klein and Manning (2004) and fur-
ther improved by Smith (2007) and Cohen et al
(2008). Headden III et al (2009) introduce the
Extended Valence Grammar and add lexicaliza-
tion and smoothing. Blunsom and Cohn (2010)
use tree substitution grammars, which allow learn-
ing of larger dependency fragments by employ-
ing the Pitman-Yor process. Spitkovsky et al
(2010) improve the inference using iterated learn-
ing of increasingly longer sentences. Further im-
provements were achieved by better dealing with
punctuation (Spitkovsky et al, 2011b) and new
?boundary? models (Spitkovsky et al, 2012).
282
Other approaches to unsupervised dependency
parsing were described e.g. in (S?gaard, 2011),
(Cohen et al, 2011), and (Bisk and Hockenmaier,
2012). There also exist ?less unsupervised? ap-
proaches that utilize an external knowledge of the
POS tagset. For example, Rasooli and Faili (2012)
identify the last verb in the sentence, minimize
its probability of reduction and thus push it to
the root position. Naseem et al (2010) make use
of manually-specified universal dependency rules
such as Verb?Noun, Noun?Adjective. McDon-
ald et al (2011) identify the POS tags by a cross-
lingual transfer. Such approaches achieve better
results; however, they are useless for grammar in-
duction from plain text.
3 STOP-probability estimation
3.1 Recognition of reducible sequences
We introduced a simple procedure for recog-
nition of reducible sequences in (Marec?ek and
Z?abokrtsky?, 2012): The particular sequence of
words is removed from the sentence and if the
remainder of the sentence exists elsewhere in the
corpus, the sequence is considered reducible. We
provide an example in Figure 2. The bigram ?this
weekend? in the sentence ?The next competition
is this weekend at Lillehammer in Norway.? is re-
ducible since the same sentence without this bi-
gram, i.e., ?The next competition is at Lilleham-
mer in Norway.?, is in the corpus as well. Simi-
larly, the prepositional phrase ?of Switzerland? is
also reducible.
It is apparent that only very few reducible se-
quences can be found by this procedure. If we
use a corpus containing about 10,000 sentences, it
is possible that we found no reducible sequences
at all. However, we managed to find a sufficient
amount of reducible sequences in corpora contain-
ing millions of sentences, see Section 6.1 and Ta-
ble 1.
3.2 Computing the STOP-probability
estimations
Recall our hypothesis from Section 1: If a se-
quence of words is reducible, no word outside the
sequence can depend on any word in the sequence.
Or, in terms of dependency structure: A reducible
sequence consists of one or more adjacent sub-
trees. This means that the first word of a reducible
sequence does not have any left children and, sim-
ilarly, the last word in a reducible sequence does
Martin Fourcade was sixth , maintaining his lead at the top of 
the overall World Cup standings , although Svendsen is now 
only 59 points away from the Frenchman in second . The next 
competition is this weekend at Lillehammer in Norway .
Larinto saw off allcomers at Kuopio with jumps of 129.5 and 
124m for a total 240.9 points , just 0.1 points ahead of 
compatriot Matti Hautamaeki , who landed efforts of 127 and 
129.5m . Third place went to Simon Ammann . Andreas 
Kofler , who won at the weekend at Kuusamo , was fourth but 
stays top of the season standings with 150 points .
Third place went to Simon Ammann of Switzerland . Ammann 
is currently just fifth , overall with 120 points . The next 
competition is at Lillehammer in Norway .
Figure 2: Example of reducible sequences of
words found in a large corpus.
not have any right children. We make use of this
property directly for estimating Pstop probabili-
ties.
Hereinafter, P eststop(ch, dir) denotes the STOP-
probability we want to estimate from a large cor-
pus; ch is the head?s POS tag and dir is the direc-
tion in which the STOP probability is estimated.
If ch is very often in the first position of reducible
sequences, P eststop(ch, left) will be high. Similarly,
if ch is often in the last position of reducible se-
quences, P eststop(ch, right) will be high.
For each POS tag ch in the given corpus,
we first compute its left and right ?raw? score
Sstop(ch, left) and Sstop(ch, right) as the relative
number of times a word with POS tag ch was in
the first (or last) position in a reducible sequence
found in the corpus. We do not deal with se-
quences longer than a trigram since they are highly
biased.
Sstop(ch, left) =
# red.seq. [ch, . . . ] + ?
# ch in the corpus
Sstop(ch, right) =
# red.seq. [. . . , ch] + ?
# ch in the corpus
Note that the Sstop scores are not probabilities.
Their main purpose is to sort the POS tags accord-
ing to their ?reducibility?.
It may happen that for many POS tags there
are no reducible sequences found. To avoid zero
scores, we use a simple smoothing by adding ? to
each count:
? = # all reducible sequencesW ,
283
where W denotes the number of words in the
given corpus. Such smoothing ensures that more
frequent irreducible POS tags get a lower Sstop
score than the less frequent ones.
Since reducible sequences found are very
sparse, the values of Sstop(ch, dir) scores are very
small. To convert them to estimated probabilities
P eststop(ch, dir), we need a smoothing that fulfills
the following properties:
(1) P eststop is a probability and therefore its value
must be between 0 and 1.
(2) The number of no-stop decisions (no matter
in which direction) equals to W (number of
words) since such decision is made before
each word is generated. The number of stop
decisions is 2W since they come after gener-
ating the last children in both the directions.
Therefore, the average P eststop(h, dir) over all
words in the treebank should be 2/3.
After some experimenting, we chose the follow-
ing normalization formula
P eststop(ch, dir) =
Sstop(ch, dir)
Sstop(ch, dir) + ?
with a normalization constant ?. The condition
(1) is fulfilled for any positive value of ?. Its exact
value is set in accordance with the requirement (2)
so that the average value of P eststop is 2/3.
?
dir?{l,r}
?
c?C
count(c)P eststop(c, dir) =
2
3 ? 2W,
where count(c) is the number of words with POS
tag c in the corpus. We find the unique value of ?
that fulfills the previous equation numerically us-
ing a binary search algorithm.
4 Model
We use the standard generative Dependency
Model with Valence (Klein and Manning, 2004).
The generative story is the following: First, the
head of the sentence is generated. Then, for each
head, all its left children are generated, then the
left STOP, then all its right children, and then the
right STOP. When a child is generated, the al-
gorithm immediately recurses to generate its sub-
tree. When deciding whether to generate another
child in the direction dir or the STOP symbol,
we use the P dmvstop (STOP |ch, dir , adj , cf ) model.
The new child cd in the direction dir is generated
according to the Pchoose(cd|ch, dir) model. The
probability of the whole dependency tree T is the
following:
Ptree(T ) = Pchoose(head(T )|ROOT , right)
? Ptree(D(head(T )))
Ptree(D(ch)) =?
dir?{l,r}
?
cd?
deps(dir,h)
P dmvstop (?STOP |ch, dir , adj , cf )
Pchoose(cd|ch, dir)Ptree(D(cd))
P dmvstop (STOP |ch, dir , adj , cf ),
where Ptree(D(ch)) is probability of the subtree
governed by h in the tree T .
The set of features on which the P dmvstop and
Pchoose probabilities are conditioned varies among
the previous works. Our P dmvstop depends on the
head POS tag ch, direction dir , adjacency adj ,
and fringe POS tag cf (described below). The
use of adjacency is standard in DMV and enables
us to have different P dmvstop for situations when no
child was generated so far (adj = 1). That is,
P dmvstop (ch, dir , adj = 1, cf ) decides whether the
word ch has any children in the direction dir at
all, whereas P dmvstop (h, dir , adj = 0, cf ) decides
whether another child will be generated next to
the already generated one. This distinction is of
crucial importance for us: although we know how
to estimate the STOP probabilities for adj = 1
from large data, we do not know anything about
the STOP probabilities for adj = 0.
The last factor cf , called fringe, is the POS tag
of the previously generated sibling in the current
direction dir . If there is no such sibling (in case
adj = 1), the head ch is used as the fringe cf .
This is a relatively novel idea in DMV, introduced
by Spitkovsky et al (2012). We decided to use
the fringe word in our model since it gives slightly
better results.
We assume that the distributions of Pchoose and
P dmvstop are good if the majority of the probabil-
ity mass is concentrated on few factors; therefore,
we apply a Chinese Restaurant process (CRP) on
them.
The probability of generating a new child node
cd attached to ch in the direction dir given the his-
tory (all the nodes we have generated so far) is
284
computed using the following formula:
Pchoose(cd|ch, dir) =
=
?c 1|C| + count?(cd, ch, dir)
?c + count?(ch, dir)
,
where count?(cd, ch, dir) denotes the number of
times a child node cd has been attached to ch
in the direction dir in the history. Similarly,
count?(ch, dir) is the number of times something
has been attached to ch in the direction dir . The
?c is a hyperparameter and |C| is the number of
distinct POS tags in the corpus.3
The STOP probability is computed in a similar
way:
P dmvstop (STOP |ch, dir , adj , cf ) =
=?s
2
3 + count?(STOP , ch, dir , adj , cf )
?s + count?(ch, dir , adj , cf )
where count?(STOP , ch, dir , adj , cf ) is the
number of times a head ch had the last child cf
in the direction dir in the history.
The contribution of this paper is the inclusion
of the stop-probability estimates into the DMV.
Therefore, we introduce a new model P dmv+eststop ,
in which the probability based on the previously
generated data is linearly combined with the prob-
ability estimates based on large corpora (Sec-
tion 3).
P dmv+eststop (STOP |ch, dir , 1, cf ) =
= (1? ?) ? ?s
2
3 + count?(STOP , ch, dir , 1, cf )
?s + count?(ch, dir , 1, cf )
+? ? P eststop(ch, dir)
P dmv+eststop (STOP |ch, dir , 0, cf ) =
= P dmvstop (STOP |ch, dir , 0, cf )
The hyperparameter ? defines the ratio between
the CRP-based and estimation-based probability.
The definition of the P dmv+eststop for adj = 0 equals
the basic P dmvstop since we are able to estimate only
the probability whether a particular head POS tag
ch can or cannot have children in a particular di-
rection, i.e if adj = 1.
3The number of classes |C| is often used in the denomi-
nator. We decided to put its reverse value into the numerator
since we observed such model to perform better for a constant
value of ?c over different languages and tagsets.
Finally, we obtain the probability of the whole
generated treebank as a product over the trees:
Ptreebank =
?
T?treebank
Ptree(T ).
An important property of the CRP is the fact that
the factors are exchangeable ? i.e. no matter how
the trees are ordered in the treebank, the Ptreebank
is always the same.
5 Inference
We employ the Gibbs sampling algorithm (Gilks
et al, 1996). Unlike in (Marec?ek and Z?abokrtsky?,
2012), where edges were sampled individually,
we sample whole trees from all possibilities on a
given sentence using dynamic programming. The
algorithm works as follows:
1. A random projective dependency tree is as-
signed to each sentence in the corpus.
2. Sampling: We go through the sentences in a
random order. For each sentence, we sam-
ple a new dependency tree based on all other
trees that are currently in the corpus.
3. Step 2 is repeated in many iterations. In
this work, the number of iterations was set
to 1000.
4. After the burn-in period (which was set to the
first 500 iterations), we start collecting counts
of edges between particular words that ap-
peared during the sampling.
5. Parsing: Based on the collected counts, we
compute the final dependency trees using
the Chu-Liu/Edmonds? algorithm (1965) for
finding maximum directed spanning trees.
5.1 Sampling
Our goal is to sample a new projective dependency
tree T with probability proportional to Ptree(T ).
Since the factors are exchangeable, we can deal
with any tree as if it was the last one in the corpus.
We use dynamic programming to sample a
tree with N nodes in O(N4) time. Neverthe-
less, we sample trees using a modified probabil-
ity P ?tree(T ). In Ptree(T ), the probability of an
edge depends on counts of all other edges, includ-
ing the edges in the same tree. We instead use
P ?tree(T ), where the counts are computed using
only the other trees in the corpus, i.e., probabilities
285
of edges of T are independent. There is a stan-
dard way to sample using the real Ptree(T ) ? we
can use P ?tree(T ) as a proposal distribution in the
Metropolis-Hastings algorithm (Hastings, 1970),
which then produces trees with probabilities pro-
portional to Ptree(T ) using acceptance-rejection
scheme. We do not take this approach and we
sample proportionally to P ?tree(T ) only, because
we believe that for large enough corpora, the two
distributions are nearly identical.
To sample a tree containing words w1, . . . , wN
with probability proportional to P ?tree(T ), we first
compute three tables:
? ti(g, i, j) for g < i or g > j is the sum of
probabilities of any tree on words wi, . . . , wj
whose root is a child of wg, but not an outer-
most child in its direction;
? to(g, i, j) is the same, but the tree is the out-
ermost child of wg;
? fo(g, i, j) for g < i or g > j is the
sum of probabilities of any forest on words
wi, . . . , wj , such that all the trees are children
of wg and are the outermost children of wg in
their direction.
All the probabilities are computed using the P ?tree .
If we compute the tables inductively from the
smallest trees to the largest trees, we can precom-
pute all the O(N3) values in O(N4) time.
Using these tables, we sample the tree recur-
sively, starting from the root. At first, we sam-
ple the root r proportionally to the probability of
a tree with the root r, which is a product of the
probability of left children of r and right chil-
dren of r. The probability of left children of r
is either P ?stop(STOP |r, left) if r has no children,
or P ?stop(?STOP |r, left)fo(r, 1, r? 1) otherwise;
the probability of right children is analogous.
After sampling the root, we sample the ranges
of its left children, if any. We sample the first left
child range l1 proportionally either to to(r, 1, r?1)
if l1 = 1, or to ti(r, l1, r ? 1)fo(r, 1, l1 ? 1)
if l1 > 1. Then we sample the second left child
range l2 proportionally either to to(r, 1, l1 ? 1)
if l2 = 1, or to ti(r, l2, l1 ? 1)fo(r, 1, l2 ? 1)
if l2 > 1, and so on, while there are any left
children. The right children ranges are sampled
similarly. Finally, we recursively sample the chil-
dren, i.e., their roots, their children and so on. It
is simple to verify using the definition of Ptree that
the described method indeed samples trees propor-
tionally to P ?tree .
5.2 Parsing
Beginning the 500th iteration, we start collecting
counts of individual dependency edges during the
remaining iterations. After each iteration is fin-
ished (all the trees in the corpus are re-sampled),
we increment the counter of all directed pairs of
nodes which are connected by a dependency edge
in the current trees.
After the last iteration, we use these collected
counts as weights and compute maximum directed
spanning trees using the Chu-Liu/Edmonds? algo-
rithm (Chu and Liu, 1965). Therefore, the result-
ing trees consist of edges maximizing the sum of
individual counts:
TMST = argmax
T
?
e?T
count(e)
It is important to note that the MST algorithm
may produce non-projective trees. Even if we
average the strictly projective dependency trees,
some non-projective edges may appear in the re-
sult. This might be an advantage since correct
non-projective edges can be predicted; however,
this relaxation may introduce mistakes as well.
6 Experiments
6.1 Data
We use two types of resources in our experiments.
The first type are CoNLL treebanks from the year
2006 (Buchholz and Marsi, 2006) and 2007 (Nivre
et al, 2007), which we use for inference and for
evaluation. As is the standard practice in unsuper-
vised parsing evaluation, we removed all punctu-
ation marks from the trees. In case a punctuation
node was not a leaf, its children are attached to the
parent of the removed node.
For estimating the STOP probabilities (Sec-
tion 3), we use the Wikipedia articles from W2C
corpus (Majlis? and Z?abokrtsky?, 2012), which pro-
vide sufficient amount of data for our purposes.
Statistics across languages are shown in Table 1.
The Wikipedia texts were automatically tok-
enized and segmented to sentences so that their
tokenization was similar to the one in the CoNLL
evaluation treebanks. Unfortunately, we were not
able to find any segmenter for Chinese that would
produce a desired segmentation; therefore, we re-
moved Chinese from evaluation.
The next step was to provide the Wikipedia
texts with POS tags. We employed the TnT tag-
ger (Brants, 2000) which was trained on the re-
286
language tokens red. language tokens red.
(mil.) seq. (mil.) seq.
Arabic 19.7 546 Greek 20.9 1037
Basque 14.1 645 Hungarian 26.3 2237
Bulgarian 18.8 1808 Italian 39.7 723
Catalan 27.0 712 Japanese 2.6 31
Czech 20.3 930 Portuguese 31.7 4765
Danish 15.9 576 Slovenian 13.7 513
Dutch 27.1 880 Spanish 53.4 1156
English 85.0 7603 Swedish 19.2 481
German 56.9 1488 Turkish 16.5 5706
Table 1: Wikipedia texts statistics: total number of
tokens and number of reducible sequences found
in them.
spective CoNLL training data. The quality of such
tagging is not very high since we do not use any
lexicons or pretrained models. However, it is suf-
ficient for obtaining usable stop probability esti-
mates.
6.2 Estimated STOP probabilities
We applied the algorithm described in Section 3 on
the prepared Wikipedia corpora and obtained the
stop-probabilities P eststop in both directions for all
the languages and their POS tags. To evaluate the
quality of our estimations, we compare them with
P tbstop , the stop probabilities computed directly on
the evaluation treebanks. The comparisons on five
selected languages are shown in Figure 3. The in-
dividual points represent the individual POS tags,
their size (area) shows their frequency in the par-
ticular treebank. The y-axis shows the stop prob-
abilities estimated on Wikipedia by our algorithm,
while the x-axis shows the stop probabilities com-
puted on the evaluation CoNLL data. Ideally, the
computed and estimated stop probabilities should
be the same, i.e. all the points should be on the
diagonal.
Let?s focus on the graphs for English. Our
method correctly recognizes that adverbs RB and
adjectives JJ are often leaves (their stop proba-
bilities in both directions are very high). More-
over, the estimates for RB are even higher than
JJ, which will contribute to attaching adverbs to
adjectives and not reversely. Nouns (NN, NNS)
are somewhere in the middle, the stop probabili-
ties for proper nouns (NNP) are estimated higher,
which is correct since they have much less modi-
fiers then the common nouns NN. The determin-
ers are more problematic. Their estimated stop
probability is not very high (about 0.65), while in
the real treebank they are almost always leaves.
0
0.2
0.4
0.6
0.8
1
0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1
estimation from W
iki
estimation computed on the treebank
English left-stop English right-stop
NN
NNP
IN
DTNNS
JJ
VBD
RB
NN
NNP
IN
DT
NNS
JJ
VBD
RB
0
0.2
0.4
0.6
0.8
1
0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1
0
0.2
0.4
0.6
0.8
1
0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1
0
0.2
0.4
0.6
0.8
1
0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1
German left-stop German right-stop
Spanish left-stop Spanish right-stop
Czech left-stop Czech right-stop
0
0.2
0.4
0.6
0.8
1
0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1
Hungarian left-stop Hungarian right-stop
estimation from W
iki
estimation from W
iki
estimation from W
iki
estimation from W
iki
NN
Db
Z:
J^
RR
VB
AA
Vf
Vp
C=
NN
VVFIN
APPRART
ADV
VAFIN
ADJA
NN
Db
Z:
J^
RR
VB
AA
Vf
Vp
C=
NN
ART
APPR
ADJAADV
VAFIN
VVFIN
NE
nc
danp sp
aq
vm
Fc
cc
nc da
np
sp
aq
vm
Fc
cc
NcAf
Tf
Np
Vm
Cc Wpunc
Nc
Af
Wpunc
Tf
Np
Vm
Cc
estimation computed on the treebank
estimation computed on the treebank
estimation computed on the treebank
estimation computed on the treebank
Figure 3: Comparison of P eststop probabilities esti-
mated from raw Wikipedia corpora (y-axis) and
of P tbstop probabilities computed from CoNLL tree-
banks (x-axis). The area of each point shows the
relative frequency of an individual tag.
287
This is caused by the fact that determiners are of-
ten obligatory in English and cannot be simply
removed as, e.g., adjectives. The stop probabil-
ities of prepositions (IN) are also very well rec-
ognized. While their left-stop is very probable
(prepositions always start prepositional phrases),
their right-stop probability is very low. The verbs
(the most frequent verbal tag is VBD) have very
low both right and left-stop probabilities. Our es-
timation assigns them the stop probability about
0.3 in both directions. This is quite high, but still,
it is one of the lowest among other more frequent
tags, and thus verbs tend to be the roots of the de-
pendency trees. We could make similar analyses
for other languages, but due to space reasons we
only provide graphs for Czech, German, Spanish,
and Hungarian in Figure 3.
6.3 Settings
After a manual tuning, we have set our hyperpa-
rameters to the following values:
?c = 50, ?s = 1, ? = 1/3
We have also found that the Gibbs sampler does
not always converge to a similar grammar. For a
couple of languages, the individual runs end up
with very different trees. To prevent such differ-
ences, we run each inference 50 times and take the
run with the highest final Ptreebank (see Section 4)
for the evaluation.
6.4 Results
Table 2 shows the results of our unsupervised
parser and compares them with results previously
reported in other works. In order to see the im-
pact of using the estimated stop probabilities (us-
ing model P dmv+eststop ), we provide results for clas-
sical DMV (using model P dmvstop ) as well. We do
not provide results for Chinese since we do not
have any appropriate tokenizer at our disposal (see
Section 3), and also for Turkish from CoNLL 2006
since the data is not available to us.
We now focus on the third and fourth column of
Table 2. The addition of estimated stop probabil-
ities based on large corpora improves the parsing
accuracy on 15 out of 20 treebanks. In many cases,
the improvement is substantial, which means that
the estimated stop probabilities forced the model
to completely rebuild the structures. For exam-
ple, in Bulgarian, if the P dmvstop model is used,
all the prepositions are leaves and the verbs sel-
dom govern sentences. If the P dmv+eststop model
is used, prepositions correctly govern nouns and
verbs move to roots. We observe similar changes
on Swedish as well. Unfortunately, there are also
negative examples, such as Hungarian, where the
addition of the estimated stop probabilities de-
creases the attachment score from 60.1% to 34%.
This is probably caused by not very good estimates
of the right-stop probability (see the last graph in
Figure 3). Nevertheless, the estimated stop proba-
bilities increase the average score over all the tree-
banks by more than 12% and therefore prove its
usefulness.
In the last two columns of Table 2, we provide
results of two other works reported in the last year.
The first one (spi12) is the DMV-based grammar
inducer by Spitkovsky et al (2012),4 the second
one (mar12) is our previous work (Marec?ek and
Z?abokrtsky?, 2012). Comparing with (Spitkovsky
et al, 2012), our parser reached better accuracy on
12 out of 20 treebanks. Although this might not
seem as a big improvement, if we compare the av-
erage scores over the treebanks, our system signif-
icantly wins by more than 6%. The second system
(mar12) outperforms our parser only on one tree-
bank (on Italian by less than 3%) and its average
score over all the treebanks is only 40%, i.e., more
than 8% lower than the average score of our parser.
To see the theoretical upper bound of our model
performance, we replaced the P eststop estimates by
the P tbstop estimates computed from the evaluation
treebanks and run the same inference algorithm
with the same setting. The average attachment
score of such reference DMV is almost 65%. This
shows a huge space in which the estimation of
STOP probabilities could be further improved.
7 Conclusions and Future Work
In this work, we studied the possibility of esti-
mating the DMV stop-probabilities from a large
raw corpus. We proved that such prior knowledge
about stop-probabilities incorporated into the stan-
dard DMV model significantly improves the unsu-
pervised dependency parsing and, since we are not
aware of any other fully unsupervised dependency
parser with higher average attachment score over
CoNLL data, we state that we reached a new state-
of-the-art result.5
4Possibly the current state-of-the-art results. They were
compared with many previous works.
5A possible competitive work may be the work by Blun-
som and Cohn (2010), who reached 55% accuracy on English
as well. However, they do not provide scores measured on
other CoNLL treebanks.
288
CoNLL this work other systems
language year P dmvstop P dmv+eststop reference P dmv+tbstop spi12 mar12
Arabic 06 10.6 (?8.7) 38.2 (?0.5) 61.2 10.9 26.5
Arabic 07 22.0 (?0.1) 35.3 (?0.2) 65.3 44.9 27.9
Basque 07 41.1 (?0.2) 35.5 (?0.2) 52.3 33.3 26.8
Bulgarian 06 25.9 (?1.4) 54.9 (?0.2) 73.2 65.2 46.0
Catalan 07 34.9 (?3.4) 67.0 (?1.7) 72.0 62.1 47.0
Czech 06 32.3 (?3.8) 52.4 (?5.2) 64.0 55.1 49.5
Czech 07 32.9 (?0.8) 51.9 (?5.2) 62.1 54.2 48.0
Danish 06 30.8 (?4.3) 41.6 (?1.1) 60.0 22.2 38.6
Dutch 06 25.7 (?5.7) 47.5 (?0.4) 58.9 46.6 44.2
English 07 36.5 (?5.9) 55.4 (?0.2) 63.7 29.6 49.2
German 06 29.9 (?4.6) 52.4 (?0.7) 65.5 39.1 44.8
Greek 07 42.5 (?6.0) 26.3 (?0.1) 64.7 26.9 20.2
Hungarian 07 60.8 (?0.2) 34.0 (?0.3) 68.3 58.2 51.8
Italian 07 34.5 (?0.3) 39.4 (?0.5) 64.5 40.7 43.3
Japanese 06 64.8 (?3.4) 61.2 (?1.7) 76.4 22.7 50.8
Portuguese 06 35.7 (?4.3) 69.6 (?0.1) 77.3 72.4 50.6
Slovenian 06 50.1 (?0.2) 35.7 (?0.2) 50.2 35.2 18.1
Spanish 06 38.1 (?5.9) 61.1 (?0.1) 65.6 28.2 51.9
Swedish 06 28.0 (?2.3) 54.5 (?0.4) 61.6 50.7 48.2
Turkish 07 51.6 (?5.5) 56.9 (?0.2) 67.0 44.8 15.7
Average: 36.4 48.7 64.7 42.2 40.0
Table 2: Attachment scores on CoNLL 2006 and 2007 data. Standard deviations are provided in brack-
ets. DMV model using standard P dmvstop probability is compared with DMV with P dmv+eststop , which in-
corporates STOP estimations based on reducibility principle. The reference DMV uses P tbstop , which are
computed directly on the treebanks. The results reported in previous works by Spitkovsky et al (2012),
and Marec?ek and Z?abokrtsky? (2012) follows.
In future work, we would like to focus
on unsupervised parsing without gold POS
tags (see e.g. Spitkovsky et al (2011a) and
Christodoulopoulos et al (2012)). We suppose
that many of the current works on unsupervised
dependency parsers use gold POS tags only as a
simplification of this task, and that the ultimate
purpose of this effort is to develop a fully unsu-
pervised induction of linguistic structure from raw
texts that would be useful across many languages,
domains, and applications.
The software which implements the algorithms
described in this paper, together with P eststop estima-
tions computed on Wikipedia texts, can be down-
loaded at
http://ufal.mff.cuni.cz/?marecek/udp/.
Acknowledgments
This work has been supported by the AMALACH grant
(DF12P01OVV02) of the Ministry of Culture of the Czech
Republic.
Data and some tools used as a prerequisite for
the research described herein have been provided by
the LINDAT/CLARIN Large Infrastructural project, No.
LM2010013 of the Ministry of Education, Youth and Sports
of the Czech Republic.
We would like to thank Martin Popel, Zdene?k Z?abokrtsky?,
Rudolf Rosa, and three anonymous reviewers for many useful
comments on the manuscript of this paper.
References
James K. Baker. 1979. Trainable grammars for speech
recognition. In Speech communication papers presented
at the 97th Meeting of the Acoustical Society, pages 547?
550.
Yonatan Bisk and Julia Hockenmaier. 2012. Induction of lin-
guistic structure with combinatory categorial grammars.
The NAACL-HLT Workshop on the Induction of Linguistic
Structure, page 90.
Phil Blunsom and Trevor Cohn. 2010. Unsupervised induc-
tion of tree substitution grammars for dependency pars-
ing. In Proceedings of the 2010 Conference on Empirical
Methods in Natural Language Processing, EMNLP ?10,
pages 1204?1213, Stroudsburg, PA, USA. Association for
Computational Linguistics.
Thorsten Brants. 2000. TnT - A Statistical Part-of-Speech
Tagger. Proceedings of the sixth conference on Applied
natural language processing, page 8.
Sabine Buchholz and Erwin Marsi. 2006. CoNLL-X shared
task on multilingual dependency parsing. In Proceedings
of the Tenth Conference on Computational Natural Lan-
guage Learning, CoNLL-X ?06, pages 149?164, Strouds-
burg, PA, USA. Association for Computational Linguis-
tics.
Christos Christodoulopoulos, Sharon Goldwater, and Mark
Steedman. 2012. Turning the pipeline into a loop: Iter-
ated unsupervised dependency parsing and PoS induction.
In Proceedings of the NAACL-HLT Workshop on the In-
duction of Linguistic Structure, pages 96?99, June.
Y. J. Chu and T. H. Liu. 1965. On the Shortest Arborescence
of a Directed Graph. Science Sinica, 14:1396?1400.
289
Shay B. Cohen, Kevin Gimpel, and Noah A. Smith. 2008.
Logistic normal priors for unsupervised probabilistic
grammar induction. In Neural Information Processing
Systems, pages 321?328.
Shay B. Cohen, Dipanjan Das, and Noah A. Smith. 2011.
Unsupervised structure prediction with non-parallel mul-
tilingual guidance. In Proceedings of the Conference
on Empirical Methods in Natural Language Processing,
EMNLP ?11, pages 50?61, Stroudsburg, PA, USA. Asso-
ciation for Computational Linguistics.
Trevor Cohn and Mirella Lapata. 2008. Sentence compres-
sion beyond word deletion. In Proceedings of the 22nd
International Conference on Computational Linguistics -
Volume 1, COLING ?08, pages 137?144, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Kim Gerdes and Sylvain Kahane. 2011. Defining depen-
dencies (and constituents). In Proceedings of Dependency
Linguistics 2011, Barcelona.
Walter R. Gilks, S. Richardson, and David J. Spiegelhalter.
1996. Markov chain Monte Carlo in practice. Interdisci-
plinary statistics. Chapman & Hall.
W. Keith Hastings. 1970. Monte carlo sampling methods
using markov chains and their applications. Biometrika,
57(1):pp. 97?109.
William P. Headden III, Mark Johnson, and David McClosky.
2009. Improving unsupervised dependency parsing with
richer contexts and smoothing. In Proceedings of Hu-
man Language Technologies: The 2009 Annual Confer-
ence of the North American Chapter of the Association
for Computational Linguistics, NAACL ?09, pages 101?
109, Stroudsburg, PA, USA. Association for Computa-
tional Linguistics.
Dan Klein and Christopher D. Manning. 2004. Corpus-
based induction of syntactic structure: models of depen-
dency and constituency. In Proceedings of the 42nd An-
nual Meeting on Association for Computational Linguis-
tics, ACL ?04, Stroudsburg, PA, USA. Association for
Computational Linguistics.
Kevin Knight and Daniel Marcu. 2002. Summarization be-
yond sentence extraction: a probabilistic approach to sen-
tence compression. Artif. Intell., 139(1):91?107, July.
Sandra Ku?bler, Ryan T. McDonald, and Joakim Nivre. 2009.
Dependency Parsing. Synthesis Lectures on Human Lan-
guage Technologies. Morgan & Claypool Publishers.
Marke?ta Lopatkova?, Martin Pla?tek, and Vladislav Kubon?.
2005. Modeling syntax of free word-order languages:
Dependency analysis by reduction. In Va?clav Matous?ek,
Pavel Mautner, and Toma?s? Pavelka, editors, Lecture Notes
in Artificial Intelligence, Proceedings of the 8th Interna-
tional Conference, TSD 2005, volume 3658 of Lecture
Notes in Computer Science, pages 140?147, Berlin / Hei-
delberg. Springer.
Martin Majlis? and Zdene?k Z?abokrtsky?. 2012. Language
richness of the web. In Proceedings of the Eight Interna-
tional Conference on Language Resources and Evaluation
(LREC 2012), Istanbul, Turkey, May. European Language
Resources Association (ELRA).
David Marec?ek and Zdene?k Z?abokrtsky?. 2012. Exploiting
reducibility in unsupervised dependency parsing. In Pro-
ceedings of the 2012 Joint Conference on Empirical Meth-
ods in Natural Language Processing and Computational
Natural Language Learning, EMNLP-CoNLL ?12, pages
297?307, Stroudsburg, PA, USA. Association for Compu-
tational Linguistics.
Ryan McDonald, Slav Petrov, and Keith Hall. 2011. Multi-
source transfer of delexicalized dependency parsers. In
Proceedings of the 2011 Conference on Empirical Meth-
ods in Natural Language Processing, pages 62?72, Edin-
burgh, Scotland, UK., July. Association for Computational
Linguistics.
Tahira Naseem, Harr Chen, Regina Barzilay, and Mark John-
son. 2010. Using universal linguistic knowledge to guide
grammar induction. In Proceedings of the 2010 Con-
ference on Empirical Methods in Natural Language Pro-
cessing, EMNLP ?10, pages 1234?1244, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Joakim Nivre, Johan Hall, Sandra Ku?bler, Ryan McDonald,
Jens Nilsson, Sebastian Riedel, and Deniz Yuret. 2007.
The CoNLL 2007 Shared Task on Dependency Parsing.
In Proceedings of the CoNLL Shared Task Session of
EMNLP-CoNLL 2007, pages 915?932, Prague, Czech Re-
public, June. Association for Computational Linguistics.
Mohammad Sadegh Rasooli and Heshaam Faili. 2012. Fast
unsupervised dependency parsing with arc-standard tran-
sitions. In Proceedings of ROBUS-UNSUP, pages 1?9.
Noah Ashton Smith. 2007. Novel estimation methods
for unsupervised discovery of latent structure in natu-
ral language text. Ph.D. thesis, Baltimore, MD, USA.
AAI3240799.
Anders S?gaard. 2011. From ranked words to dependency
trees: two-stage unsupervised non-projective dependency
parsing. In Proceedings of TextGraphs-6: Graph-based
Methods for Natural Language Processing, TextGraphs-
6, pages 60?68, Stroudsburg, PA, USA. Association for
Computational Linguistics.
Valentin I. Spitkovsky, Hiyan Alshawi, and Daniel Jurafsky.
2010. From baby steps to leapfrog: how ?less is more? in
unsupervised dependency parsing. In Human Language
Technologies: The 2010 Annual Conference of the North
American Chapter of the Association for Computational
Linguistics, HLT ?10, pages 751?759, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Valentin I. Spitkovsky, Hiyan Alshawi, Angel X. Chang, and
Daniel Jurafsky. 2011a. Unsupervised dependency pars-
ing without gold part-of-speech tags. In Proceedings of
the 2011 Conference on Empirical Methods in Natural
Language Processing (EMNLP 2011).
Valentin I. Spitkovsky, Hiyan Alshawi, and Daniel Juraf-
sky. 2011b. Punctuation: Making a point in unsuper-
vised dependency parsing. In Proceedings of the Fifteenth
Conference on Computational Natural Language Learn-
ing (CoNLL-2011).
Valentin I. Spitkovsky, Hiyan Alshawi, and Daniel Juraf-
sky. 2012. Three Dependency-and-Boundary Models for
Grammar Induction. In Proceedings of the 2012 Con-
ference on Empirical Methods in Natural Language Pro-
cessing and Computational Natural Language Learning
(EMNLP-CoNLL 2012).
290
