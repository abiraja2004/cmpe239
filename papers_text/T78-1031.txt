PATH-BASED AND NODE-BASED INFERENCE IN SEMANTIC NETWORKS 
Stuart C. Shapiro 
Department of Computer Science 
State University of New York at Buffalo 
Amherst, New York 14226 
Abstract 
Two styles of performing inference in 
semantic networks are presented and com- 
pared. Path-based inference allows an arc 
or a path of arcs between two given nodes 
to be inferred from the existence of an- 
other specified path between the same two 
nodes. Path-based inference rules may be 
written using a binary relational calculus 
notation. Node-based inference allows a 
structure of nodes to be inferred from the 
existence of an instance of a pattern of 
node structures. Node-based inference 
rules can be constructed in a semantic 
network using a variant of a predicate 
calculus notation. Path-based inference 
is more efficient, while node-based infer- 
ence is more general. A method is de- 
scribed of combining the two styles in a 
single system in order to take advantage 
of the strengths of each. Applications of 
path-based inference rules to the repre- 
sentation of the extensional equivalence 
of intensional concepts, and to the expli- 
cation of inheritance in hierarchies are 
sketched. 
I. Introduction 
Semantic networks have developed 
since the mid sixties \[10;11\] as a formal- 
ism for the representation of knowledge. 
Methods have also been developing for per- 
forming deductive inference on the knowl- 
edge represented in the network. In this 
paper, we will compare two styles of in- 
ference that are used in semantic networks, 
path-based inference and node-based infer- 
ence. In sections 2 and 3, these terms 
will be explained and references to sys- 
tems that use them will be provided. In 
sections 4 and 5, the advantages and dis- 
advantages of each will be discussed. 
Sections 6, 7 and 8 will show how they can 
be used to complement each other in a sin- 
gle semantic network system, how path- 
based inference can help represent the ex- 
tensional equivalence of intensional con- 
cepts, and :low a formalism for writ ing 
path-based inference rules can be used to 
explicate the notion of "inheritance = in a 
semantic network. 
2. Path-Based Inference 
Let us refer to a relation (perforce 
binary) that is represented by an arc in a 
network as an arc-relation. If R is an 
arc-relation, an arc la~elled R from node 
a to node b represents that the relation- 
ship aRb holds. It may be that this arc 
is not present in the network, but aRb may 
be inferred from other information present 
in the network and one or more inference 
rules. If the other information in the 
network is a specified path of arcs from a 
to b, we will refer to the inference as 
path-based. The ways in which such paths 
may be specified will be developed as this 
paper proceeds. 
The two clearest examples of the gen- 
eral use of path-based inference are in 
SAMENLAQ II \[18\] and Protosynthex III \[13\]. 
Both these systems use what might be call- 
ed "relational" networks rather than 
=semantic = networks since arc-relations 
include conceptual relations as well as 
structural relations (see \[14\] for a dis- 
cussion of the difference). For example, 
in Protosynthex III there is an arc label- 
led COMMANDED from the node representing 
Napoleon to the node representing the 
French army, and in SAMENLAQ II an arc la- 
belled EAST.OF goes from the node for 
Albany to the node for Buffalo. Both sys- 
tems use relational calculus expressions 
to form path-based inference rules. The 
following relational operators are employ- 
ed (we here use a variant of the earlier 
notations): 
I. Relational Converse -- If R is a 
relation, R C is its converse. 
SO, ~x,~(xRC~ <--> ~Rz). 
2. Relational Composit ion -- If R 
a--n-d~ a -~ relations; R/S is R 
composed with S. So, 
Vz,y(zR/Sy <--> ~n(zRn ~ ~S?)). 
3. Domain Restriction -- If R and S 
(S z)R is the re- 
lation R with its domain re- 
stricted to those objects that 
bear the relation S to 8. So, 
Vz,~,n(z(S z)R~ <--> (zSn & zR~)). 
4. Range Restriction -- If R and S 
219 
are relations, R(S ~) is the re- 
lation R with its range restrict- 
to those objects that bear the 
relation S to ~. So, 
V=,y,z(zR(S ~)y <--> (zRy 6 ySz)). 
5. Relational Intersection -- If R 
and S are relations, R&S is the 
intersection of R and S. So, 
%Zz,y(xR&Sy <--> (zRy & zSy)). 
Notice that VQ,R,S,z,y,~(zR(Q ~)/Sy <--> 
?R/(Q z)Sy) so we can use the notation 
R(Q z)S unambiguously. 
In SAMENLAQ II, path-based inference 
rules are entered by using the relational 
operators to give alternate definitions of 
simple arc labels. For example (again in 
a variant notation): 
EAST.OF + EAST.OF/EAST.OF 
declares that EAST.OF is transitive 
SOUTH.OF ? NORTH.OF c 
declares that 
Vx,y(yNORTH.OF= ? zSOUTH.OFy) 
FATHER.OF + (GENDER MALE)PARENT.OF 
declares that a father is a male 
parent. 
SIR \[11\] is another relational net- 
work system that uses path-based inference. 
Although the original expressed inference 
rules in the form of general LISP func- 
tions, the reproduction in \[16, Chap. 7\] 
uses the notion of path grammars. The re- 
lation operators listed above are augment- 
ed with R*, meaning zero or more occur- 
rences of R composed with itself, R +, 
meaning one or more occurrences of R com- 
posed with itself, and RvS, meaning the 
union of R and S. The following relations 
are used: 
z EQUIV y means x and y are 
the same individual 
z SUBSET y means z is a subset 
of y 
= MEMBER y means z is a member 
of the set y 
POSSESS y means  z owns  a mem- 
ber of the set y 
POSSESS-BY-EACH y means every member 
of the set z owns a 
member of the set ~. 
To determine if z POSSESS y, the network 
is searched using the following rule: 
POSSESS ? EQUIV* 
/(POSSESS 
V(MEMBER/SUBSET*/POSSESS-BY-EACH)) 
/SUBSET* 
The widest use of path-based infer- 
ence is in \]SA hierarchies. Fig. I is 
based on probably the most famous \]SA 
hierarchy, that of Coll ins and Quil l ian 
\[2\]. The two important rules here are 
ISA ? ISA* 
and PROP + ISAe/PROP 
As McDermott \[8) points out, ISA hierar- 
chies have been abused as well as used. 
In Section 8, we will propose a method 
authors can use to describe their hier- 
chies precisely. 
PROP @ 
ISA 
FIGURE I: ISA hierarchy based on that of Col l ins 
and Qui l l ian 
3. Node-Based Inference 
Several semantic network systems in- 
corporate methods of representing general 
rules in a semantic network version of 
predicate calculus. Among these systems 
are those of Shapiro \[14;15;17\], Kay \[7\], 
Hendrix \[6\], Schubert \[12\], and Fikes and 
Hendrix \[3\]. Figure 2 shows such a net- 
work deduction rule representing 
V=\[z~MAN ? ~y (ycWOMAN 6 ~LOVESy) \] ? 
Figure 3 shows a rule for 
~r \[~cTRANSITIVE ? 
~z,y,~(z~y ~ yrz ? xrz)\]. 
? 
MAX f ~',~ ~ . . . . .  > - 
~ 3 
FIGURE 2: A semantic network deduction rule for 
Vz\[xEMAH ? ~y(y~NOMAN & zLOVESy)\] 
The network formalism employed is that of 
Shapiro \[15;17\]. These deduction rules 
employ pattern nodes (P1, P2, PS, P4, P5, 
P6, PY), each one of which represents a 
pattern of nodes that might occur in the 
network. We will therefore call this kind 
of inference rule a node-based inference 
rule. Pattern nodes are related to each 
other by rule nodes, each of which repre- 
sent a proposit ional operator, or, equiva- 
lently, an inference mechanism. For exam- 
ple, R2 represents the rule that if an in- 
stance of P1 occurs in the network, an in- 
stance of R1 with the same substitution 
2.20 
for z may be deduced. Quantif ication is 
represented in this notation by an arc-re- 
lation between a rule node and the vari- 
able nodes bound in the rule. For example, 
z is bound by a universal quantif ier in R2 
and y is bound by an existential quanti- 
fier in R1. 
FIGURE 3: A semantic network deduction rule for 
Vr~-~TRANSITIVE ? Vx,y,z(xry & yrz ? xrz)\] 
To see how a node-based inference 
proceeds, consider the network of Figure 4 
in conjunction with the rule of Figure 3, 
and say that we wish to decide if 
A SUPPORTS C. The network that would rep- 
resent that A SUPPORTS C matches P7 with 
the variable binding \ [ z /A ,  r/SUPPORTS, 
a/C\]. P4 in the binding Jr/SUPPORTS\] is 
matched against the network and is found 
to successfully match M1. P5 \[z/A, 
r/SUPPORTS, y/y\]  and P6\[y/y, r/SUPPORTS, 
z/C\] are  then  both  matched aga ins t  the  
network and each succeeds with a consis- 
tent binding of y to B. The rule thus 
succeeds and A SUPPORTS C is deduced. 
(Details of the bindings and the match 
routine are given in \[15\].) 
FIGURE 4: A network data base asserting that 
A SUPPORTS B; B SUPPORTS C and 
SUFPORIS ? TRANSITIVE~ 
It should be noted that set inclusion 
was represented by an arc (\[SA) in Section 
2, but set membership is being represented 
by a node (with a MEMBER, CLASS "case 
frame") in this section. The nodal repre- 
sentation is required by node-based infer- 
ence rules and is consistent with the no- 
tion that everything that the network 
"knows", and every concept to which the 
network can refer is represented by a 
node. 
4. Advantages of Node-Based Inference 
The advantages of node-based infer- 
ence stem from the generality of the syn- 
tax of node-based inference rules. Path- 
based rules are limited to binary rela- 
tions, have a restricted quantif ication 
structure and require that an arc between 
two nodes be implied by a path between the 
same two nodes. Rule R2 of Figure 2 could 
not be written as a path-based rule, and, 
although the transitivity of SUPPORTS 
could be expressed by a ~ath-based rule 
(SUPPORTS ? SUPPORTS+). the "second order" 
rule R4 of Figure 3 could not. 
Let us b~iefly consider how rule R4 
is constructed, whether it really is or is 
not a second order rule, and why it could 
not be expressed as a path-based rule. 
Rule R4 supplies a rule for use with 
transitive relations. In order to assert 
that a relation is transitive (e.g. asser- 
tion node M1 of Figure 4), the relation 
must be represented as a node, rather than 
as an arc. This also allows quantif ica- 
tion over such relations, since in all 
node-based inference rule formalisms vari- 
ables may only be substituted for nodes, 
not for arcs. Since the relation is a 
node, another node must be used to show 
the relationship of the relation to its 
arguments (e.g. nodes M2 and M3 in Figure 
q). Thus, Rq is really a first order rule 
derived from the second order rule 
vr \ [ rETRANSIT IVE  ? Vx,y ,z (z ry  & yrz  ? zrz ) \ ]  
by reducing r tO an individual variable 
and introducing a higher order relation, 
AVO, whose second argument is a conceptual 
relation and whose other arguments are 
conceptual individuals. So R4 is more 
accurately seen as the first order rule 
vr  \ [ rcTRANSIT IVE  ? 
Vx ,y ,z (AVO(z , r ,y )  ~ AVO(y , r ,~)  ? 
AVO ( z , r ,~) )  \] . 
In this view, the predicates of semantic 
networks are not the nodes representing 
conceptual relations, but the different 
case frames. Rule Rq cannot be represent- 
ed as a path-based rule because it is a 
rule about the relation AVO, and AVO is a 
trinary, rather than a binary relation. 
Although some node-based inference 
rules cannot be expressed by path-based 
inference rules, it is easy to see that 
any path-based inference rule can be ex- 
pressed by a node-based inference rule, as 
long as we are wil l ing to replace some 
arc-relations by nodes and higher order 
predicates. 
5. Advantages of Path-Based Inference 
The major advantage of path-based in- 
ference is efficiency. Carrying out a 
path-based inference involves merely 
checking that a specified path exists in 
the network between twog iven  nodes (plus, 
221 
perhaps, some side paths to specified 
nodes required by domain and range restric- 
tions). This is a well understood and re- 
latively efficient operation, especially 
compared to the backtracking, intersection, 
or unif ication operations required to 
check the consistency of variable substi- 
tutions in node-based inference rules. 
Moreover, path following seems to 
many people to be what semantic networks 
were originally designed for. The major 
search algorithm of Quil l ian's semantic 
Memory is a hi-directional search for a 
path connecting two nodes \[10, p. 249\]. 
Also, the ability to do path tracing is a 
motivation underlying ISAhierarch ies ,  and 
is why the Collins and Quil l ian results 
\[2\] gained such attention. These effi- 
ciencies are lost by replacing path-based 
inference rules by node-based inference 
rules. 
6. Comb inin~ Path-Based and 
Node-Based Inference 
We begin the task of unifying path- 
based and node-based inferences by noting 
the formal equivalence between an arc-re- 
lation and a two case case frame. Figure 
5 i l lustrates this using ISA vs. SUB-SUP. 
Figure 5a shows the use of the \[SA arc-re- 
lation to represent that canaries are 
birds. Figure 5b represents the same re- 
lationship by a SUB-SUP case frame, and 
has the advantage that the relationship is 
represented by a node, M4. Figure 5c is a 
redrawing of 5b, using the arc label SUB- 
to represent the relation SUB C. (It is 
generally understood in semantic network 
formalisms that whenever an arc represent- 
ing a relation R goes from some node n to 
some node m, there is also an arc repre- 
senting R c going from m to -). Figure 5c 
clarif ies the notion that we may think of 
an instance of a two case case frame (such 
as M4) as both an arc and a node if we are 
wil l ing to recalibrate the measurement of 
time it takes to follow one arc-relation 
to be the time it takes to follow two 
arcs. We can replace all instances of \[SA 
in the path-based inference rules of 
Section 2 by the composition SUB-/SUP and 
still have valid rules except that we now 
have paths on the left of the "?" symbol. 
(a\] 
\[SA i 
, SUP 
SUB- 
(b) (c\] 
FIGURE 5: An illustration of the equi- 
valence of an arc-relation to a two case 
case frame, a) I~presenting set member- 
ship as the \[SA arc-relation, b) Repre- 
senting set membership as a SUB-SUP case 
frame, c) Redrawing (b) so it looks like 
(a}. 
Let us, therefore, extend our syntax 
of path-based inference rules to allow a 
path of arc compositions on the left of 
the "?" symbol. The rule ISA ? ISA~ 
states that whenever there is a path of 
ISA arcs from node , to mode m, we can in- 
fer a "virtual" ISA arc directly from , to 
m which we may, if we wish, actually add 
to the network. Similarly, let the rule 
SUB-/SUP ? (SUB-/SUP) ~ state that whenever 
a path of alternating SUB- and SUP arcs 
goes from node n to node m, we can infer a 
"virtual" node with SUB to n and SUP to m 
which we may, if we wish, actually add to 
the network. 
We now have a formalism for specify- 
ing path-based inference rules in a net- 
work formalism that represents binary con- 
ceptual relations by two case case frames. 
This would allow, for example, for a more 
unified representation in the SNIFFER 
system \[3\], in which node-based inference 
rules are implemented and built- in path 
based inference rules are used for set 
membership and set inclusion, both of 
which are represented only by arc-rela- 
tions. The formalism presented here 
would al low set membership and set inclu- 
sion assertions to be represented by 
nodes, permitting other assertions to 
reference them, without giving up the 
efficiency of built- in routines to imple- 
ment the set inclusion hierarchies. 
We desire, however, a more general 
unif ication of path-based and node-based 
inferences. There are two basic routines 
used to implement node-based inferences 
(although specific implementations may 
differ). One is the match routine that is 
given a pattern node and finds instances 
of it in the network, and the other is the 
routine that interprets the quantif iers 
and connectives to carry out the actual 
deduction. The match routine can be en- 
hanced to make use of path-based inference 
rules. Consider a typical match routine 
used in the deduction in Section 3 of 
A SUPPORTS C from the network of Figure 4 
and the rule of Figure 3, and let us in- 
troduce the notation that if P is a path 
of arcs and n is a node, P\[,\] represents 
the set of nodes found by following the 
path P from the node n. In the example, 
the match routine was given the pattern 
P4 to match in the binding It/SUPPORTS\]. 
It was able to find MI by intersecting 
CLASSC\[TRAN~ITIVE\] with MEMBERC\[SuPPORTS\]. 
Now, let us suppose that the path-based 
inference rule CLASS ? CLASS/ (SUB-/SUP) ~ 
has been declared in such a way that the 
match routine could use it. T~e match 
routine would intersect MEMBER~\[SUPPORTS\] 
wi~h ~LASS/(SUB-/SUP)*)C\[TRANSITIVE\]  and 
be able to find a virtual node asserting 
that SUPPORTS is TRANSITIVE even if a long 
chain of set inclusions separated them. 
The proposal, therefore, is this: any 
arc-relation in a semantic network may be 
defined in terms of a path-based inference 
rule which the match routine is capable of 
using when finding instances of pattern 
222 
nodes. This completes the general unifica- 
tion of path-based and node-based infer- 
ence we desired. Since path-based infer- 
ence is embedded in the match routine, 
while node-based inference requires the 
quantif ier and connective interpreter, the 
difference is reminiscent of the differ- 
ence between subconscious inference and 
conscious reasoning. 
7. Application to Extensional 
Equivalence of 
Intensional Concepts 
A basic assumption of semantic net- 
works is that each concept is represented 
by a single node and that all information 
about a concept is reachable from its node. 
Yet, since Woods' discussion \[20\], most 
semantic network authors have agreed that 
a node represents an intensional, rather 
than an extensional concept. How should 
we handle the information that two differ- 
ent intensional concepts are extensionally 
equivalent? 
Let us il lustrate this by a story 
(entirely fictional). For the last year 
we have heard of a renowned surgeon in 
town, Dr. Smith, known for his bri l l iance 
and dexterity, who saved the life of the 
famous actress Maureen Gelt by a diff icult 
heart transplant operation. Meanwhile, at 
several social gatherings, we have met 
someone by the name of John Smith, about 
five feet, six inches tall, black hair and 
beard, generally disheveled and clumsy. 
We now discover, much to our amazement 
that John Smith and Dr. Smith are one and 
the same! In our semantic network, we 
have one node for Dr. Smith connected to 
his attributes, and another for John Smith 
connected to his attributes. What are we 
to do? Although we now know that John 
Smith saved the life of Maureen Gelt and 
that Dr. Smith has black hair, surely we 
cannot retrieve that information as fast 
as that Dr. Smith is a surgeon and that 
John Smith is 5'6" tall. If we were to 
combine the two nodes by taking all the 
arcs from one node, tying them to the 
other and throwing away the first, we 
would lose this distinction. We must in- 
troduce an assertion, say an EQUIV-EQUIV 
case frame, that represents the fact that 
Dr. Smith and John Smith, different inten- 
sional concepts, are extensionally the 
same. I How are we to use this assertion? 
Ignoring for the moment referential ly 
opaque contexts ("We didn't know that John 
Smith was Dr. Smith."), how can we express 
the rule that if n EQUIV-/EQUIV m, than 
anything true of n is true of m? Our node 
based inference rules cannot express this 
rule because expressing "anything true of 
n" requires quantifying over those higher 
order case frame predicates such as AVO 
IThe psychological plausibi l ity of this 
discussion is supported by the experiments 
of Anderson and Hastie \[I\] and of McNabb 
\ [9 \ ] .  
and MEMBER-CLASS- One possibi l i ty is to 
use lambda abstraction as Schubert does 
\[12\]. Each n-ary higher order predicate 
involving some node becomes a unary predi- 
cate by replacing that node by a lambda 
variable. Thus, "Dr. Smith saved Maureen 
Gelt's life" becomes an instance of the 
unary predicate A(x)\[x saved Maureen 
Gelt's life\] applied to Dr. Smith. Using 
a PRED-ARG case frame, it is easy to rep- 
resent the rule 
Vx,y,Z\[EQUIV-EQUIV(X,y) 6 PRED-ARG(X,z) 
+ PRED-ARG(?,~)\]- 
The trouble with this solution is, how are 
we to retrieve this information as a fact 
about Maureen Gelt? Must we also store 
l(x) \[Dr. Smith saved x's life\] 
(Maureen Gelt)? 
This duplication is unsatisfying. An al- 
ternative is to include in the path-based 
inference rule defining each arc-relation 
the path (EQUIV-/EQUIV) ~. For example, 
AGENT ? AGENT/(EQUIV-/EQUIV) ~, and CLASS 
+ CLASS/( (EQUIV- /EQUIV)* / (SUB- /SUP)*)* .  
Although this solution requires more rules 
than the lambda abstraction solution, and 
the rules look complicated, it avoids the 
duplication of the same assertion in dif- 
ferent forms and the postulation of con- 
ceptual predicates such as l(x)\[x saved 
Maureen Gelt's life\]. 
Hays' cognitive networks \[4;5\] in- 
clude a scheme similar to the one proposed 
here. Each assertion about Dr. Smith 
would refer to a different node, each with 
an MST (manifestation) arc to a common 
node. This node would represent the in 
tension of Dr. Smith, while the others 
represent Dr. Smith as surgeon, Dr. Smith 
as saviour of Maureen Gelt, etc. Presum- 
ably, when Hays' network learns of the 
identity of Dr. Smith with John Smith, a 
new node is introduced with MS~ arcs from 
both Dr. Smith and John Smith. L Dr. Smith 
and John Smith are then seen as two mani- 
festations of the newly integrated Dr. 
John Smith. Hays presumably uses an 
MST*/(MSTC)* path where we propose an 
(EQUIV-/EQUIV)* path .  
Blocking referential ly opaque con- 
texts seems to require introducing rela- 
tiona~ oomplement. For any path P and 
nodes x and y, let z~y hold just in case 
a path P from = to ~ does not exist in the 
network. We might block referential ly 
opaque contexts by includin~ the domain or 
range restriction (OBJ-/VERB/MEMBER-/CLASS 
OPAQUE) in the arc definitions. 
8. Application to the  Explication 
of Inheritance 
As was mentioned in Section 2, many 
2Actually, Hays' networks have not yet 
been implemented, and I have been warned 
\[R. Fritzson, personal communication\] that 
the implementation may differ from what I 
have supposed. 
223 
semantic networks include inheritance 
(ISA) hierarchies. Often these are at 
best vague and at worst inconsistent. We 
propose that the inheritance properties of 
these hierarchies be clearly defined by 
path-based inference rules using the syn- 
tax we are presenting here or some other 
well defined syntax. We do not say that 
all systems should be able to input and 
interpret such rules, but only that auth- 
ors use such rules to explain clearly to 
their readers how their hierarchies work. 
Before this proposal is feasible, we 
must be able to handle two more situations. 
The first is the exception principle, 
first expressed by Raphael \[11, p.85\] and 
succinctly stated by Winograd as, "Any 
property true of a concept in the hier- 
archy is implicitly true of anything link- 
ed below it, unless explicit ly contradict- 
ed at the lower level" \[19, p.197\]. To 
al low for this, let us introduce an ezoep- 
Lion ope~a~o2.. If P and Q are paths and 
x and y are nodes, let zP\Qy hold just in 
case there is a path described by P from z 
to y and no path of equal or shorter 
length described by Q from x to y. To see 
that this suffices to handle the exception 
principle, consider the hierarchy of 
Figure 6, where, to make things more in- 
teresting, we have postulated a variety of 
flying penguins. We have also taken the 
liberty of explicit ly representing that 
~AN-FLY and CAN-NOT-FLY are negations of 
each other. The rule for inheritance 
in this hierarchy is 
PROP ~ (ISA*/PROP)\(ISA*/PROP/NOT)- 
, PROP 
l ISA 
I~LE-FLY I  NG-PENGU I NS~ 
FIGURE 6: An 18A hierarchy illustrating the exception 
principle. 
The other situation we must discuss 
is "almost transitive" relations such as 
SIBLING- SIBLING is certainly symmetric, 
but it cannot be transitive since it is 
irreflexive. Yet your sibling's sibling 
is your sibling as long as he/she is not 
yourself. This is what we mean by "almost 
transitive." Note that for any relation, 
R, R*~(R+) is the identity relation. Let 
us call it I. Then for any relation P, 
let pR be P&T. pR is the ~rrefZexiue 
mestri~%io, of P We can use this to de- 
fine SIBLING as 
SIBLING + (SIBLINGvSIBLINGC) *R- 
We suggest that the syntax for path- 
based inference rules is now complete 
enough to explicate the inheritance rules 
of various hierarchies. The complete syn- 
tax will be summarized in the next section 
9. Summary 
We have presented and compared two 
styles of inference in semantic networks, 
path-based inference and node-based infer- 
ence. The former is more efficient, while 
the latter is more general. We showed the 
equivalence of an arc-relation to a two 
case case frame, and described how path- 
based inference could be incorporated into 
the match routine of a node-based infer- 
ence mechanism, thereby combining the 
strengths of the two inference styles. We 
discussed the use of equivalence paths to 
represent the extensional equivalence of 
intensional concepts. Finally, we urged 
authors of inheritance hierarchies to ex- 
pl icate their hierarchies by displaying 
the path-based inference rules that govern 
inheritance in them. 
We also presented a syntax for path- 
based inference rules which can be summar- 
ized as follows: 
I. A a~ is either an arc-relation or a 
path as described in part 2 enclosed 
in parentheses. Parentheses may be 
omitted whenever an ambiguity does not 
result. 
2. If P and Q are paths and z, ~, and z 
are nodes, paths may be formed as 
follows: 
a. Converse: if P is a path from x 
to y, ~ is a path from y to z. 
b. Composition: if P is a path from 
z to z and Q is a path from z to 
~, P/Q is a path from z to y. 
c. qomposit ion .zero or more times: 
IX P composed with itself zeroor  
more times describes a path from z 
to y, P* is a path from z to y. 
d. Composit ion one or more times: If 
P composed with itself one or more 
times is a path from z to y, P+ is 
a path from z to y. 
e. Union: If P is a path from z to y 
or Q is a path from z to ~, pvQ is 
a path from z to y. 
f. Intersection: If P is a path from 
z to ~ and ~ is a path from x to 
y, P&Q is a path from x to y. 
g. Cgmplement: If there is no path P 
from z to ~, ~ is a path from x to 
Y. 
h. Irreflexive restriction: If P is 
a path from z to y and z#y, pR is 
a path from z to y. 
i. Exception: If P is a path from z 
to ~ and there is no path Q of 
length equal to or less than the 
length of P, P\Q is a path from z 
tO y. 
j. Domain restriction: If P is a 
224 
path from z to y and Q is a path 
from z to z, (Q z)P is a path from 
xtoy .  
k. Range restriction: If P is a path 
from z to y and Q is a path from y 
to z? P(Q z) is a path from x to 
y. 
3. A path-based inference rule is of the 
form <defined path> ? <defining path> 
where <defining path> is any path de- 
scribed by parts I or 2 above? and 
<defined path> is either a) a single 
arc-relation, or b) a composition of n 
arc relations for some fixed n, i.e. 
using only "/", not "$" or "+". The 
rule is interpreted to mean that if 
the <defining path> goes from some 
node x to some node y then: a) the arc 
that is the <defined path> is inferred 
to exist from z to y; b) the n arcs 
that are the <defined path> and n-1 
new intermediate nodes are inferred to 
exist from z to y. 
References 
I. Anderson, J. and Hastie, R. Individu- 
ation and reference in memory: proper 
names and definite descriptions, cogCo - 
nitive Psychology 6, 4 (October, I~J'Y~)? 
49~-514. 
2. Collins? A.M. and Quillian, R. Re- 
trieval time from semantic memory. J. 
of Verbal Learning and Verbal Behavio-r 
8_, (1969) , 240-247.' 
3. Fikes, R. and Hendrix, G. A network- 
based knowledge representation and its 
natural deduction system. Proc. Fifth 
Int. Jt. Conf. on Art i f ic ial  Intelli- 
gence? Dept. of Computer Science, 
Carnegie-Mellon University, P i t tsburg~ 
1977, 235-246. 
4. Hays, D.G. Cognitive Structures. un- 
published ms. Dept. of Linguistics? 
SUNY at Buffalo? Amherst, NY. 
5. Hays? D.G. Types of processes on cog- 
nitive networks. In L.S. Olschki, ed. 
Mathematical Linguistics, Frienze, 
P~s'a, 1977, 523-532. 
6. Hendrix, G.G. Expanding the util ity 
of semantic networks through partit ion 
ing. Advance Papers of the Fourth 
Int. Jt. Conf. on Artif icial Intelli- 
~,~ , MIT AI T.'aboratory, Cambridge, 975, 115-121. 
7. Kay, M. The MIND system. In R. 
Rustin, ed. Natural Language Process- 
~;  Algorithmics Press, New York, 
? 155-188. 
8. McDermott, D. Artif icial intell igence 
meets natural stupidity. SIGART 
Newsletter, 57 (April, 197~-~-9 .  
9. McNabb, S.D. The effects of encoding 
strategies and age on the memory re- 
presentation for sentences containing 
proper names and definite descriptions. 
Report No. 77-3? Indiana Mathematical 
Psychology Program, Department of Psy- 
chology, Indiana University? 
Bloomington? IN. August? 1977. 
10. Quillian, M.R. Semantic memory. In 
M. Minksy, ed. Semantic Information 
Processing, MIT Press? Cambridge, MA, 
1968, 227-270. 
11. Raphael? B. SIR: semantic informa- 
tion retrieval. In M. Minsky, ed. 
Semantic Information Processing, MIT 
Press? Cambridge, MA., 1968, 33-Iq5. 
12. Schubert, L.K. Extending the expres- 
sive power of semantic networks. 
Artif icial Intell i~ence 7, 2 (Summer, 
1976), 163-198. 
13. Schwartz, R.M., Burger, J.F., and 
Simmons, R.F. A deductive question- 
answerer for natural language infer- 
ence. CACM 13, 3 (March? 1970), 167- 
183. 
lq .  Shapiro? S.C. A net structure for 
semantic information storage? deduc- 
tion and retrieval. Proc. Second Int. 
Jt. Conf. on Artif icial Intelligence, 
The British Computer Society? London? 
1971? 512-523. 
15. Shapiro? S.C. Representing and locat- 
ing deduction rules in a semantic 
network. Proc. Workshop on Pattern- 
Directed Inference Systems. In SIGART 
Newsletter, 63 (June? 1977), lq - .~  
16. Shapiro? S.C. Techniques of Artifi- 
cial Intelligenc'e. D. Van Nostrand? 
New York, 1979. 
17. Shapiro? S.C. The SNePS semantic net- 
work processing system. In N. Findler, 
ed. Associative Networks -- The 
Representation and Use of Knowledge in 
Computers, Academic Press? New York, 
in press. 
18. Shapiro? S.C. and Woodmansee, G.H. A 
net structure based relational ques- 
tion answerer: description and exam- 
ples. Proc. Int. Jt. Conf. on 
Artif icial Intelligence, The MITRE 
Corp.? Bedford? MA., 1969, 325-3q6. 
19. Winograd, T. Frame representations 
and the declarative/procedural contro- 
versy. In D.G. Bobrow and A. Collins? 
eds. Representation and Understandin~ 
Academic Press? Inc., New York, 1975, 
185-210. 
20. Woods? W.A. What's in a link: Foun- 
dations for semantic networks. In D. 
G. Bobrow and A. Collins, eds. R e ~  
sentation and Understanding, Academic 
Press? Inc., New York, 1975, 35-82. 
225 
