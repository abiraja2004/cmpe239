Proceedings of the 7th Workshop on Statistical Machine Translation, pages 152?156,
Montre?al, Canada, June 7-8, 2012. c?2012 Association for Computational Linguistics
Regression with Phrase Indicators for Estimating MT Quality?
Chunyang Wu Hai Zhao?
Center for Brain-Like Computing and Machine Intelligence,
Department of Computer Science and Engineering, Shanghai Jiao Tong University
chunyang506@sjtu.edu.cn, zhaohai@cs.sjtu.edu.cn
Abstract
We in this paper describe the regression sys-
tem for our participation in the quality estima-
tion task of WMT12. This paper focuses on
exploiting special phrases, or word sequences,
to estimate translation quality. Several feature
templates on this topic are put forward sub-
sequently. We train a SVM regression model
for predicting the scores and numerical results
show the effectiveness of our phrase indicators
and method in both ranking and scoring tasks.
1 Introduction
The performance of machine translation (MT) sys-
tems has been considerable promoted in the past two
decades. However, since the quality of the sentence
given by MT decoder is not guaranteed, an impor-
tant issue is to automatically predict or identify its
characteristics. Recent studies on quality estimation
or confidence estimation have focused on measuring
the translating quality at run-time, instead of involv-
ing reference corpus. Researches on this topic con-
tribute to offering advices or warnings for users even
without knowledge about either side of languages
?This work was partially supported by the National Natu-
ral Science Foundation of China (Grant No. 60903119 and
Grant No. 61170114), the National Research Foundation for
the Doctoral Program of Higher Education of China under
Grant No. 20110073120022, the National Basic Research Pro-
gram of China (Grant No. 2009CB320901), the Science and
Technology Commission of Shanghai Municipality (Grant No.
09511502400), and the European Union Seventh Framework
Program (Grant No. 247619).
?corresponding author
and illuminating some other potential MT applica-
tions.
This paper describes the regression system for our
participation in the WMT12 quality estimation task.
In this shared task, we analyzed the pattern of trans-
lating errors and studied on capturing such patterns
among the corpus. The basic objective in this pa-
per is to recognize those phrases, or special word se-
quence combinations which can indicate the quality
of a translation instance. By introducing no exter-
nal NLP toolkits, we exploited several feasible tech-
niques to extract such patterns directly on the cor-
pus. One contribution of this paper is those feature
templates on the basis of this topic. Numerical re-
sults show their positive effects on both ranking and
scoring subtasks.
The rest of this paper is organized as follows: In
Section 2, we show the related work. In Section
3, we specify the details of our system architecture.
The experimental results are reported in Section 4.
Finally, the conclusion is given in Section 5.
2 Related Work
Compared with traditional MT metrics such as
BLEU (Papineni et al., 2002), the fundamental goal
of quality estimation (QE) is predicting the quality
of output sentences without involving reference sen-
tences.
Early works (Quirk, 2004; Gamon et al., 2005)
have demonstrated the consistency of the automatic
score and human evaluation. Several further works
aimed at predicting automatic scores in order to bet-
ter select MT n-best candidates (Specia and Farzin-
dar, 2010), measure post-editing effort (Specia et
152
al., 2011) or combine SMT and TM systems (He et
al., 2010). Instead of estimating on word or sen-
tence levels, Soricut and Echihabi (2010) proposed
a document-level ranking system which grants the
user to set quality threshold. Besides, recent stud-
ies on the QE topic introduced syntactic and linguis-
tic information for better estimating the quality such
as dependency preservation checking (Bach et al.,
2011).
3 System Description
We specify the details of our system in this section.
Following previous approaches for quality estima-
tion, it is first trained on the corpus with labeled
quality scores and then it is able to predict the score
for unlabeled instances.
A major challenge for this estimating task is to ex-
ploit effective indicators, or features, to identify the
quality of the translating results. In this paper, all the
features are extracted from the official corpora, in-
volving no external tools such as pre-trained parsers
or POS taggers. Most of the feature templates focus
on special phrases or word sequences. Some of the
phrases could introduce translation errors and other-
s might declare the merit of the MT output. Their
weights are automatically given by the regressor.
3.1 Regression Model
For obtaining MT quality predictor, we utilize
SVM light (Joachims, 1999)1 to train this regression
model. The radial basis function kernel is chosen as
the kernel of this model. The label for each instance
is the score annotated manually and the input vector
consists of a large amount of indicators described in
Section 3.2.
3.2 Features
For training the regression model, we utilize the
17 baseline features: number of source/target to-
kens, average source token length, source/target
LM probability, target-side average of target word
occurrences, original/inverse frequency average of
translations per source word, source/target percent-
age of uni-/bi-/tri-grams in quartile 1 or 4, source
percentage of unigrams in the training corpus and
1http://svmlight.joachims.org/
source/target number of punctuation. Besides, sev-
eral features and templates are proposed as follows:
? Inverted Automatic Scores: For each Span-
ish system output sentence, we translate it to
English and get its scores of BLEU and ME-
TEOR (Denkowski and Lavie, 2011). These s-
cores are treated as features named inverted au-
tomatic scores. In order to obtain these numer-
als, we train a Spanish-to-English phrase-based
Moses2 (Koehn et al., 2007) decoder with de-
fault parameters on the official parallel corpus.
The original training corpus is split into a de-
veloping set containing the last 3000 sentence
pairs at the end of the corpus and a training set
with the remained pairs. The word alignment
information is generated by GIZA++ (Och and
Ney, 2003) and the feature weights are tuned on
the developing set by Z-MERT (Zaidan, 2009).
? Minimal/Maximal link likelihood of gener-
al language model: In the word graph of
each decoding instance, denote the minimal
and maximal general language model likeli-
hood of links as lmin and lmax. We treat
exp(lmin) and exp(lmax) as features respec-
tively.
? Trace Density: Define the trace density ?T as
the quotient of decoding trace length and sen-
tence length:
?T = TraceLength / SentenceLength. (1)
? Average of Phrase Length: This feature is
also obtained from the decoding trace informa-
tion.
? Number of Name Entity: This feature can-
not be obtained exactly due to the resource con-
strains. We in this task count the number of the
word whose first letter is capitalized, and that
is not the first word in the sentence.
We also extract several special phrases or se-
quences. The total of each phrase/sequence type
and each pattern are respectively defined as features.
When an instance matches a pattern, the entry rep-
resenting this pattern in its vector is set to |1/Z|. In
2http://www.statmt.org/moses/
153
this paper the regressor term Z is the size of the tem-
plate which the pattern belongs to. The detail de-
scription of such templates is presented as follows:
? Reference 2?5-grams: All the 2?5-grams of
the reference sentences provided in the official
data are generated as features.
? Bi-gram Source Splitting: This template
comes from the GIZA alignment document.
We scan the parallel corpus: for each bi-gram
in the source sentence, if its words? counter-
parts in the target side are separated, we add it
to the bi-gram source splitting feature template.
The part-of-speech tags of the words seem to be
effective to this task. Since it is not provided, we uti-
lize a trick design for obtaining similar information:
? Target Functional Word Patterns: On the
target corpus, we scan those words whose
length is smaller than or equal to three. Such
a word w is denoted as functional word. Any
bi-gram in the corpus starting or ending with w
is added to a dictionary D. For each system-
output translation instance, we compare the
analogous bi-grams in it with this dictionary,
all bi-grams not in D are extracted as features.
Denote the collection of 2?5-grams of the
system-output sentences scored lower than 1.5 as B;
that with scores higher than 4.5 as G. Here the ?s-
core? is the manual score provided in the official re-
source.
? Target Bad 2?5-grams: B?G
? Target Good 2?5-grams: G? B
? Source Bad/Good 2?5-grams: Analogous
phrases on the source side are also extracted
by the same methods as Target Bad/Good n-
grams.
For each output-postedit sentence pair, we con-
struct a bipartite graph by aligning the same words
between these two sentences. By giving a maximal
matching, the output sentence can be split to several
segments by the unmatched words.
? Output-Postedit Different 2?5-grams: For
each unaligned segments, we attach the previ-
ous word to the left side and the next word to
the right. 2?5-grams in this refined segment
are extracted as features.
? Output-Postedit Different Anchor: Denote
the refined unaligned segment as
sr = (prevWord, s1, s2, . . . , sn, nextWord).
A special sequence with two word segments
prevWord s1 . . . sn nextWord
is given as a feature.
In the source-side scenario with the inverted trans-
lations, similar feature templates are extracted as
well:
? Source-Invert Different 2?5-grams/Anchor
A significant issue to be considered in this shared
task is that the training data set is not a huge one,
containing about two thousand instances. Although
carefully designed, the feature templates however
cannot involve enough cases. In order to overcome
this drawback, we adopt the following strategy:
For any template T, we compare its patterns with
the items in the phrase table. If the phrase item p is
similar enough with the pattern g, p is added to the
template T. Two similarity metrics are utilized: De-
note the longest common sequence as LCSQ(p, g)
and the longest common segment as LCSG(p, g) 3,
LCSQ(p, g)2
|p||g|
> 0.6, (2)
LCSG(p, g) ? 3. (3)
Besides, when training the regression model or
testing, the entry representing the similar items in
the feature vector are also set to 1/|template size|.
4 Experiments
4.1 Data
In order to conduct this experiment, we randomly
divide the official training data into two parts: one
3To simplify, the sequence allows separation while the seg-
ment should be contiguous. For example, LCSQ(p, g) and
LCSG(p, g) for ?I am happy? and ?I am very happy? are ?I,
am, happy? and ?I, am?, respectively.
154
Data Set
Score Distribution
[1-2) [2-3) [3-4) [4-5)
Original 3.2% 24.1% 38.7% 34.0%
Train 3.2% 24.2% 38.3% 34.4%
Dev 3.3% 24.0% 40.3% 32.4%
Table 1: The comparison of the score distributions among
three data sets: Original, Training (Train) and Develop-
ment (Dev).
Ranking Scoring
DA SC MAE RMSE
Baseline 0.47 0.49 0.61 0.79
This paper 0.49 0.52 0.60 0.77
Table 2: The experiment results on the ranking and scor-
ing tasks. In this table, DA, SC, MAE and RMSE are
DeltaAvg, Spearman Correlation, Mean-Average-Error
and Root-Mean-Squared-Error respectively.
training set with about 3/4 items and one develop-
ment set with the other 1/4 items. The comparison
of the score distribution among these data sets is list-
ed in Table 1.
4.2 Results
The baseline of this experiment is the regression
model trained on the 17 baseline features. The pa-
rameters of the classifier are firstly tuned on the
baseline features. Then the settings for both the
baseline and our model remain unchanged. The
numerical results for the ranking and scoring tasks
are listed in Table 2. The ranking task is evalu-
ated on the DeltaAvg metric (primary) and Spear-
man correlation (secondary) and the scoring task is
evaluated on Mean-Average-Error and Root-Mean-
Squared-Error. For the ranking task, our system out-
performs 0.02 on DeltaAvg and 0.03 on Spearman
correlation; for the scoring task, 0.01 lower on MAE
and 0.02 lower on RMSE.
The official evaluation results are listed in Table 3.
The official LibSVM4 model is a bit better than our
submission. Our system was further improved af-
ter the official submission. Different combinations
of the rates defined in Equation 2?3 and regressor
parameter settings are tested. As a result, the ?Re-
fined? model in Table 3 is the results of the refined
4http://www.csie.ntu.edu.tw/ cjlin/libsvm/
Ranking Scoring
DA SC MAE RMSE
SJTU 0.53 0.53 0.69 0.83
Official SVM 0.55 0.58 0.69 0.82
Refined 0.55 0.57 0.68 0.81
Best Workshop 0.63 0.64 0.61 0.75
Table 3: The official evaluation results.
version. Compared with the official model, it gives
similar ranking results and performs better on the s-
coring task.
5 Conclusion
We presented the SJTU regression system for the
quality estimation task in WMT 2012. It utilized
a support vector machine approach with several fea-
tures or feature templates extracted from the decod-
ing and corpus documents. Numerical results show
the effectiveness of those features as indicators for
training the regression model. This work could be
extended by involving syntax information for ex-
tracting more effective indicators based on phrases
in the future.
References
