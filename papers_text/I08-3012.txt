Proceedings of the IJCNLP-08 Workshop on NLP for Less Privileged Languages, pages 65?72,
Hyderabad, India, January 2008. c?2008 Asian Federation of Natural Language Processing
Design of a Rule-based Stemmer for Natural Language Text in Bengali
Sandipan Sarkar 
IBM India 
sandipan.sarkar@in.ibm.com, 
sandipansarkar@gmail.com 
Sivaji Bandyopadhyay 
Computer Science and Engineering Department 
Jadavpur University, Kolkata 
sbandyopadhyay@cse.jdvu.ac.in 
 
 
Abstract 
This paper presents a rule-based approach 
for finding out the stems from text in Ben-
gali, a resource-poor language. It starts by 
introducing the concept of orthographic 
syllable, the basic orthographic unit of 
Bengali. Then it discusses the morphologi-
cal structure of the tokens for different 
parts of speech, formalizes the inflection 
rule constructs and formulates a quantita-
tive ranking measure for potential candi-
date stems of a token. These concepts are 
applied in the design and implementation 
of an extensible architecture of a stemmer 
system for Bengali text. The accuracy of 
the system is calculated to be ~89% and 
above. 
1 Introduction 
While stemming systems and algorithms are being 
studied for European, Middle Eastern and Far 
Eastern languages for sometime, such studies in 
Indic scripts are quite limited. Ramanathan and 
Rao (2003) reported a lightweight rule-based 
stemmer in Hindi. Garain et. al. (2005) proposed a 
clustering-based approach to identify stem from 
Bengali image documents. Majumdar et. al. (2006) 
accepted the absence of rule-based stemmer in 
Bengali and proposed a statistical clustering-based 
approach to discover equivalence classes of root 
words from electronic texts in different languages 
including Bengali. We could not find any publica-
tion on Bengali stemmer following rule-based ap-
proach. 
Our approach in this work is to identify and 
formalize rules in Bengali to build a stemming sys-
tem with acceptable accuracy. This paper deals 
with design of such a system to stem Bengali 
words tokens tagged with their respective parts of 
speech (POS). 
2 Orthographic Syllable 
Unlike English or other Western-European lan-
guages, where the basic orthographic unit is a 
character, Bengali uses syllable. A syllable is typi-
cally a vowel core, which is preceded by zero or 
more consonants and followed by an optional dia-
critic mark.  
However, the syllable we discuss here is ortho-
graphic and not phonological, which can be differ-
ent. As for example, the phonological syllables of 
word ???? ? [kartaa] are ?r [kar_] and ?? [taa]. 
Whereas, the orthographic syllables will be ? [ka] 
and ??? ? [rtaa] respectively. Since the term 'syllable' 
is more used in phonological context, we use 'o-
syllable' to refer orthographic syllables, which will 
be a useful tool in this discussion. 
Formally, using regular expression syntax, an o-
syllable can be represented as where C 
is a consonant, V is a vowel and D is a diacritic 
mark or halant. If one or more consonants are pre-
sent, the vowel becomes a dependent vowel sign 
[maatraa].  
* ? ?C V D
We represent the o-syllables as a triple (C, V, D) 
where C is a string of consonant characters, V is a 
vowel character and D is a diacritic mark. All of 
these elements are optional and their absence will 
be denoted by ?. V will be always represented in 
independent form. 
We define o-syllabic length |?| of token (?) as 
the number of o-syllables in ?. 
Few examples are provided below: 
 
Token (?) O-syllable Form |?| 
?? [maa] (?,?,?) 1 
???? [chaa`nd] (?,?,??)(?,a,?) 2 
a?s?? [agastya] (?,a,?)(?,a,?)(???,a,?) 3 
65
Token (?) O-syllable Form |?| 
????? [aaT_kaa] (?,?,?) (?,?,??) (?,?,?) 3 
Table 1: O-syllable Form Examples 
3 Morphological Impact of Inflections 
Like English, the inflections in Bengali work as a 
suffix to the stem. It typically takes the following 
form: 
<token> ::= <stem><inflections> 
<inflections> ::= <inflection> |  
<inflection><inflections> 
Typically Bengali word token are formed with 
zero or single inflection. Example: ????? [maayer] 
< ?? [maa] (stem) + ??? [yer] (inflection) 
However, examples are not rare where the token 
is formed by appending multiple inflections to the 
stem: ????o [karaleo] < ?r [kar_] (stem) + ?? [le] 
(inflection) + o [o] (inflection), ??i?????i [bhaaid-
erakei] < ??i [bhaai] (stem) + ??? [der] (inflec-
tion) + ?? [ke] (inflection) + i [i] (inflection). 
3.1 Verb 
Verb is the most complex POS in terms of in-
flected word formation. It involves most number of 
inflections and complex formation rules.  
Like most other languages, verbs can be finite 
and non-finite in Bengali. While inflections for 
non-finite verbs are not dependent on tense or per-
son; finite verbs are inflected based on person (first, 
second and third), tense (past, present and future), 
aspect (simple, perfect, habitual and progressive), 
honour (intimate, familiar and formal), style (tradi-
tional [saadhu], standard colloquial [chalit] etc.) 
mood (imperative etc.) and emphasis. Bengali verb 
stems can yield more than 100 different inflected 
tokens.  
Some examples are: ?????? [karaatis] < ??? 
[karaa] (stem) + ??? [tis] (inflection representing 
second person, past tense, habitual aspect, intimate 
honour and colloquial style), ??i? [khaaiba] < ?? 
[khaa] (stem) +i? [iba] (inflection representing 
first person, future tense, simple aspect and tradi-
tional style) etc. 
A verb token does not contain more than two in-
flections at a time. Second inflection represents 
either emphasis or negation.  
Example: ???i [aasabai] < ?s [aas_] (stem) + ? 
[ba] (inflection representing first person, future 
tense, simple aspect and colloquial style) + i [i] 
(inflection representing emphasis). 
While appended, the inflections may affect the 
verb stem in four different ways: 
1. Inflections can act as simple suffix and do not 
make any change in the verb stem. Examples: ??? 
(stem) + ?c [chchhi] (inflection) > ????c [karaach-
chhi], ?? (stem) + ? (inflection) > ??? [khaaba] etc.  
2. Inflections can change the vowel of the first 
o-syllable of the stem. Example (the affected vow-
els are in bold and underlined style): ???? ?? 
[shudh_raa] (stem) + ? [sa] (inflection) > (?,u,?) 
(?,?,??) (?,?,?) + ? > (?,o,?) (?,?,??) (?,?,?) + ? > 
????? ?? [shodh_raa] + ? > ????? ??? [shodh_raasa]. 
3. Inflections can change the vowel of the last o-
syllable of the stem. Example: ??? ?? [aaT_kaa] 
(stem) + ?? [chhi] (inflection) > (?,?,?) (?,?,??) 
(?,?,?) + ?? > (?,?,?) (?,?,??) (?,e,?) + ?? > ???
?? [aaT_ke] + ?? > ??????? [aaT_kechhi]. 
4. Inflections can change the vowel of both first 
and last o-syllable of the stem. Example: ???k ?? 
[Thok_raa] (stem) + o [o] (inflection) > (?,o,?) 
(?,?,??) (?,?,?) + o > (?,u,?) (?,?,??) (?,i,?)  
+ o > ??k?? [Thuk_ri] + o > ??k??o [Thuk_rio]. 
3.2 Noun 
Noun is simpler in terms of inflected token forma-
tion. Zero or more inflections are applied to noun 
stem to form the token. Nouns are inflected based 
on number (singular, plural), article and case [k?-
raka] (nominative, accusative, instrumental, dative, 
ablative, genitive, locative and vocative). Unlike 
verbs, stems are not affected when inflections are 
applied. The inflections applicable to noun is a dif-
ferent set than verb and the number of such inflec-
tions also less in count than that of verb. 
Example: ???????i [baarhiTaarai] < ???? [baarhi] 
(stem) + ?? [Taa] (inflection representing article) + 
? [ra] (inflection representing genitive case) + i [i] 
(inflection representing emphasis), ???????????? 
[maanushhaguloke] < ????? [maanushha] (stem) + 
????? [gulo] (inflection representing plural number) + 
?? [ke] (inflection representing accusative case) etc.  
3.3 Pronoun 
Pronoun is almost similar to noun. However, there 
are some pronoun specific inflections, which are 
not applicable to noun. These inflections represent 
location, time, amount, similarity etc. 
66
Example: ???? [sethaa] < ?? [se] (stem) + ?? [thaa] 
(inflection representing location). This inflection is 
not applicable to nouns. 
Moreover, unlike noun, a pronoun stem may 
have one or more post-inflection forms. 
Example: stem ??? [aami] becomes ??? [aamaa] 
(????? < ??? + ??) or ??? [mo] (?????? < ??? + ???) once 
inflected.  
3.4 Other Parts of Speeches 
Other POSs in Bengali behave like noun in their 
inflected forms albeit the number of applicable 
inflections is much less comparing to that of noun.  
Example: ????? [shreshhThatama] < ??? 
[shreshhTha] (adjective stem) + ?? [tama] (inflec-
tion representing superlative degree), ????? [madhye] 
< ???? [madhya] (post-position stem) + ?? [e] 
(inflection) etc. 
4 Design 
4.1 Context 
As we identified in the previous section, the impact 
of inflections on stem are different for different 
POSs. Also the applicable list of inflections varies 
a lot among the POSs. Hence, if the system is POS 
aware, it will be able to generate more accurate 
result. This can be achieved by sending POS 
tagged text to the stemmer system, which will ap-
ply POS specific rules to discover stems. This 
proposition is quite viable as statistical POS tag-
gers like TnT (Brants, 2000) are available. 
The context of the proposed system is provided 
below: 
 
Figure 1: Context of Proposed Stemmer 
4.2 Inflection Rule Observations 
To discover the rules, we took the help of the 
seminal work by Chatterji (1939). For this work 
we limited our study within traditional and stan-
dard colloquial styles (dialects) of Bengali.  For 
each of the POSs, we prepared the list of applica-
ble inflections considering these dialects only. We 
studied these inflections and inflected tokens and 
framed the rules inspired by the work of Porter 
(1981). We had following observations:  
1. To find out the stem, we need to replace the 
inflection with empty string in the word token. 
Hence all rules will take the following form:  
                           <inflection> ? "" 
2. For rules related to verbs, the conditionals are 
present but they are dependent on the o-syllables 
instead of 'm' measure, as defined and described in 
Porter (1981). 
3. For pronouns the inflection may change the 
form of the stems. The change does not follow any 
rule. However, the number of such changes is 
small enough to handle on individual basis instead 
of formalizing it through rules. 
4. A set of verb stems, which are called incom-
plete verbs, take a completely different form than 
the stem. Such verbs are very limited in number. 
Examples: ?? [Jaa] (????? [gelaam] etc. are valid 
tokens for this verb), ?s (e??? [elaam] etc. are 
valid tokens), ??? [aachh_] (?????? [thaakalaam], 
??? [chhila] etc. are valid tokens) 
5. For non-verb POSs, there is no conditional. 
6. Multiple inflections can be applied to a token. 
7. The inflections may suggest mutually contra-
dictory results. As for example token ???? [kheli] 
can be derived by applying two legitimate inflec-
tions ?? [li] and ?? [i] on two different stems ?? 
[khaa] and ??l [khel_] respectively. Finding out the 
correct stem can be tricky.  
8. Because of contradictory rules and morpho-
logical similarities in different stems there will be 
ambiguities. 
Tagged 
Text 
Plain Text Stemmed Text 
POS Tagger Stemmer 
4.3 Analysis and Design Decisions 
Based on the observations above we further ana-
lyzed and crafted a few design decisions, which are 
documented below: 
POS Group Specific Inflection Sets: It is ob-
served that multiple POSs behave similarly while 
forming inflected word tokens. We decided to 
group them together and keep a set of inflections 
for each such group. By separating out inflection 
sets, we are minimizing the ambiguity.  
We identified following inflection sets based on 
the tagset developed by IIIT Hyderabad for Indic 
languages. The tags not mentioned in the table be-
low do not have any inflected forms. Size indicates 
the number of inflections found for that set. 
67
Set Comment Size
IN  The inflection set for noun group. It 
covers NN, NNP, NVB, NNC and 
NNPC tags. 
40 
IP The inflection set for pronoun group. 
It covers PRP and QW tags. This is a 
superset of IN. 
54 
IV The inflection set for verb group. It 
covers VFM, VAUX, VJJ, VRB and 
VNN tags. 
184 
IJ The inflection set for adjective 
group. It covers JJ, JVB, QF and 
QFNUM tags. 
14 
IR The inflection set for adverb, post-
position, conjunction and noun-
location POSs. It covers RB, RBVB, 
PREP, NLOC and CC tags. 
6 
Table 2: POS Groups 
Pronoun ? Post-inflection vs. Actual Stem 
Map: For pronoun we decided to keep a map of 
post-inflection stems and actual stems. After in-
flection stripping, this map will be consulted to 
discover the stem. Since number of pronouns in 
Bengali is limited in number, this approach will 
provide the most effective and performance 
friendly mechanism. 
Verb ? Morphological Rules: Based on obser-
vation 2, we further studied the verb POS and iden-
tified four classes of stems that exhibits own char-
acteristics of morphological changes when inflec-
tions are applied. These classes can be identified 
for a stem ? based on the following two meas-
ures: 
n = |?| and 
2
n
j
j
c?
=
=?  
where cj is the number of consonants in j-th o-
syllable of the stem. 
 
Class Identification Characteristics 
I If n = 1. Example: ?? [khaa], ?? [de] etc. 
II If n > 1 and the n-th o-syllable has halant 
as diacritic mark. Only this class of verb 
stems can have halant at the last o-
syllable. Example: ?r, ???? [shikh_] etc. 
III If n > 1, ? = 1 and vowel of the n-th o-
syllable is '?'. Example: ???, ???? [shik-
haa], ????? [dourhaa] etc. 
IV If n > 1, ? > 1 and vowel of the n-th o-
Class Identification Characteristics 
syllable is '?'. Example: ?????, ?m?? 
[dham_kaa] etc. 
Table 3: Verb Stem Classes 
Since the verb inflections may affect the stems 
by changing the vowels of first and last o-syllable, 
a rule related to verb inflection is presented as a 5-
tuple:  
(L1, R1, Ln, Rn, i)  
where 
? L1 is the vowel of the first o-syllable of post-
inflection stem 
? R1 is the vowel of the first o-syllable of ac-
tual stem 
? Ln is the vowel of the last (n-th) o-syllable of 
post-inflection stem 
? Rn is the vowel of the last (n-th) o-syllable of 
actual stem 
? i  is the inflection 
The vowels are always presented in their inde-
pendent form instead of maatraa. This is because, 
we are going to apply these rules in the context of 
o-syllables, which can deterministically identify, 
which form a vowel should take. However, for in-
flection, we decided to differentiate between de-
pendent and independent forms of vowel to mini-
mize the ambiguity. 
As for example, for the token ??k ??o, inflection is 
o, post-inflection stem is ??k ??, and the actual stem 
is ???k ??. Hence the rule for this class IV verb will 
be (u, o, i, ?, o).    
Absence of an element of the 5-tuple rule is rep-
resented by '?'. Example: for token ???? [kheye], 
which is derived from stem ??, a class I verb stem; 
the rule will be (e, ?, ?, ?, ??). 
After completion of analysis, we captured 731 
such rules. The distribution was 261, 103, 345 and 
22 for class I, II, III & IV combined and IV respec-
tively. 
Map for Incomplete Verbs: For incomplete 
verbs, we decided to maintain a map. This data 
structure will relate the tokens to an imaginary to-
ken, which can be generated from the stem using a 
5-tuple rule. Taking the example of token ?????, 
which is an inflected form of stem ??, will be 
mapped to ????? [Jelaam], which can be generated 
by applying rule (e, ?, ?, ?, ???). The system 
will consult this map for each input verb token. If 
68
it is found, it will imply that the token is an incom-
plete verb. The corresponding imaginary token will 
be retrieved to be processed by rules. 
Recursive Stem Discovery Process: Since mul-
tiple inflections can be applied to a token, we de-
cided to use a stack and a recursive process to dis-
cover the inflections and the possible stems for a 
token. However, we do special processing for verb 
tokens, which cannot have more than two inflec-
tions attached at a time and require extra morpho-
logical rule processing. 
Ranking: Since there will be ambiguity, we de-
cided to capture all candidate stems discovered and 
rank them. The client of the system will be ex-
pected to pick up the highest ranked stem. 
Our observation was ? stems discovered by 
stripping a lengthier inflection are more likely to 
be correct. We decided to include the o-syllabic 
length of the inflection as a contributing factor in 
rank calculation. 
Additionally, for verb stems, the nature of the 5-
tuple rule will play a role. There is a degree of 
strictness associated with these rules. The strict-
ness is defined by the number of non-? elements 
in the 5-tuple. The stricter the rule, chances are 
more that the derived stem is accurate. 
Taking an example ? token ???? [kheye] can be 
derived from two rules: ?? [khaa] + ?? [ye] is de-
rived from (e, ?, ?, ?, ??) and ??? [khaay_]+ ?? [e] 
is derived from (?, ?, ?, ?, ??). Since rule (e, ?, 
?, ?, ??) is stricter, ?? should be the correct stem, 
and that matches with our knowledge also. 
Let ? be a token and ? is one of the candidate 
stem derived from inflection ?. 
For non-verb cases the rank of ? will be:  
R? ?=  
For verb, the strictness of the rule that generated 
? has to be considered. Let that rule be  
1 1( , , , , )n nL R L R i? =  
The strictness can be measured as the number of 
non-? elements in the 5-tuple. Element i always 
demands an exact match. Moreover, (L1, R1) and 
(Ln, Rn) always come in pair. Hence the strictness 
S? of rule ? can be calculated as  
1 n 
1 n
1 n 
1 n
1,  if L  L
2,  if L   L
2,  if L =   L
3,  if L   L
and
S
and
and
?
?
Hence for verb stems the rank of ? will be: 
R S? ??= +  
Overchanged Verb Stems and Compensation: 
Because of the rule strictness ranking some verb 
stems might be overchanged. As for example, to-
ken ??????? [bhejaalaam] is an inflected form of 
stem ???? [bhejaa]. This is a class III stem. There 
are two relevant rules ?1 = (?, ?, ?, ?, ???) and ?2 
= (e, i, ?, ?, ???) which identifies the candidate 
stems ???? and ???? [bhijaa] respectively. Since the 
?2 has higher strictness, ???? will rank better, which 
is wrong.  
This type of situation only happens if the ap-
plied rule satisfies following condition:  
(L1, R1) ? ((i, e), (e, i), (u, o), (o, u)). 
This effect comes because the verbs with first 
vowel of these pairs at first o-syllable exhibits 
morphologically similar behaviour with such verbs 
for the last vowel of the pair once inflected.  
???? and ???? are example of such behaviour. 
With inflection ???, both of them produce similar 
morphological structure (??????? [shekhaalaam] and 
???????) even though their morphology is different 
at their actual stem. 
To compensate that, we decided to include a 
stem to the result set without changing the first o-
syllable, with same calculated rank, once such rule 
is encountered. Going back to example of ???????, 
even though we identified ???? as the stem with 
highest rank, since ?2 satisfies the above condition, 
???? will be included with same rank as compensa-
tion.  
Dictionary: To reduce ambiguity further, we 
decided to introduce a stem dictionary, which will 
be compared with potential stems. If a match 
found, the rank of that stem will be increased with 
a higher degree, so that they can take precedence. 
Bengali word can have more than one correct 
spelling. As for example, ?n? [jan_ma] and ?n 
[janma] are both correct. Similarly, ???? ? [garjaa] 
and ?r ?? [gar_jaa], ?r?? [bar_shhaa] and ????? [bar-
shhaa] etc. 
To take care of the above problem, instead of 
exact match in the dictionary, we decided to intro-
duce a quantitative match measure, so that some 
tolerance threshold can be adopted during the 
search in the dictionary. 
 
 
? ?
? ?
? ?
= =?? ? =?= ? ??? ? ??
 
Edit-distance measure (Levenshtein, 1966) was 
a natural choice for this. However direct usage of 
69
this algorithm may not be useful because of the 
following. For any edit operation the cost is always 
calculated 1 in edit-distance algorithm. This may 
mislead while calculating the edit-distance of a 
pair of Bengali tokens. As for example: The edit-
distance for (?????, ?r ??) and (?????, ????? [barshaa]) 
pairs are same, which is 1. However, intuitively we 
know that ?r ?? should be closer to ????? than ?????.  
To address the above problem we propose that 
the edit cost for diacritic marks, halant and de-
pendent vowel marks should be less than that of 
consonants or independent vowels. Similarly, edit 
cost for diacritic marks and halant should be less 
than that of dependent vowel marks. 
Formally, let VO, CO, VS and DC be the set of 
vowels, consonants, dependent vowel signs and 
diacritic marks (including halant) in Bengali al-
phabet.  
We define the insertion cost Ci and deletion cost 
Cd of character ? as: 
1, if ( ) or ( )
0.5, if ( )
( ) ( )
0.25, if ( )
0, otherwise
i d
CO VO
VS
C C
DC
? ?
?? ? ?
? ??? ??= = ? ????
 
We also define the substitution cost Cs of char-
acter ?1 by character ?2 as: 
1 2
1 2
1 2
0, if ( )
( , )
( ( ), ( )), otherwises i i
C
Min C C
? ?? ? ? ?
=?= ??
 
We refer this modified distance measure as 
weighted edit-distance (WED) hereafter. 
Going back to the previous example, the WED 
between ????? and ????? is 1 and between ????? and ?r ?? 
is 0.25. This result matches our expectation. 
We proposed that the discovered stems will be 
compared against the dictionary items. If the WED 
is below the threshold value ?, we enhance the 
previous rank value of that stem.  
Let D = (w1, w2, ... wM) be the dictionary of size 
M. Let us define ?? for stem ? as below: 
1
( , ( ( , )))
M
kk
Min Min WED w?? ? ?==  
The modified rank of ? is: 
100( )
, if  is verb
100( )
,  otherwise
S
R
?
?
?
?
? ?? ?
? ?? ?
?? + +??= ? ?? +??
The match score is raised by a factor of 100 to 
emphasise the dictionary match and dampen the 
previous contributing ranking factors, which are 
typically in the range between 0 - 20. 
5 System Architecture 
The proposed system structure is provided below 
using Architecture Description Standard notation 
(Youngs et. al., 1999): 
?system?
POS Tagger
StemmingEngine
OrthosyllableHandler
?stack?
InflectionTracker
?set?
InflectionSets
?map?
PostinflectionPronouns
?map?
IncompleteVerbs
?set?
Lexicon
Stemmer system boundary
?table?
VerbRules
Figure 2: Stemmer Architecture 
The components of the system are briefly de-
scribed below: 
StemmingEngine: It receives a tagged token 
and produces a set of candidate stems with their 
assigned ranks and associated inflection. 
OrthosyllableHandler: This component is re-
sponsible for converting a token into o-syllables 
and vice-versa. It also allows calculating the WED 
between two Bengali tokens. 
InflectionTracker: While discovering the in-
flections recursively, this stack will help the 
Stemming Engine to keep track of the inflections 
discovered till now. 
InflectionSets: Contains the POS group specific 
inflection sets (IN, IP, IV, IJ and IR). 
PostinflectionPronouns: A map of post-
inflection pronoun stems against their correspond-
ing actual stem form. 
VerbRules: A table of 5-tuple verb rules along 
with their verb stem class association. 
?
 
IncompleteVerbs: A map of incomplete verb 
tokens against their formal imaginary forms. 
Lexicon: The dictionary where a discovered 
stem will be searched for rank enhancement. 
As presented, the above design is heavily de-
pendent on persisted rules, rather than hard-coded 
70
logic. This will bring in configurability and 
adaptability to the system for easily accommodat-
ing other dialects to be considered in future. 
The high level algorithm to be used by the Stem-
mingEngine is provided below: 
 
global stems; 
 
Stem(token, pos) { 
Search(token, pos); 
return stems; 
} 
 
Search(token, pos) { 
if (pos is verb and token ? IncompleteVerbs)  
  token ? IncompleteVerbs[token]; 
 
for (i = 1; i < token.length; i++) { 
  candidate ? first i characters of token;   
  inflection ? remaining characters of token; 
 
  if (inflection ? InflectionSets)  
    continue; 
 
  if (pos is verb) { 
    if (inflection is representing emphasis or negation) { 
      InflectionTracker.push(inflection); 
      Search(candidate, pos); 
      InflectionTracker.pop(inflection); 
    } 
 
    class ? verb stem class of candidate; 
     
    for each matching rule R in VerbRules for  
    candidate and class { 
        modify candidate by applying R;  
        a ? inflection + inflections in InflectionTracker; 
        r ? rank of the candidate based on |inflection|,  
        strictness of R and match in Lexicon;    
        Add candidate, a and r to stems; 
 
        if (R is an overchanging rule) 
          Modify candidate by compensation logic; 
          Add candidate, a and r to stems; 
    } // for each 
  } // if pos is verb 
  else { 
    a ? inflection + inflections in InflectionTracker; 
 
    if (pos is pronoun and  
    candidate ? Postinflection Pronouns) { 
      candidate ?  PostinflectionPronouns[candidate]; 
    } 
 
    r ? rank of the candidate based on |inflection|  
    and match in Lexicon;    
    Add candidate, a and r  to stems; 
 
    if (inflection != "") { 
      InflectionTracker.push(inflection); 
      Search(candidate, pos); 
      InflectionTracker.pop(inflection); 
    } 
  } // else 
} // for 
} 
6 Evaluation 
Based on the above mentioned approach and de-
sign, we developed a system using C#, XML 
and .NET Framework 2.0. We conducted the fol-
lowing experiment on it. 
The goal of our experiment was to calculate the 
level of accuracy the proposed stemmer system can 
achieve. Since the system can suggest more than 
one stems, we sorted the suggested stems based on 
ranking in descending order and picked up the first 
(s'i) and the next (s''i) stems. We compared these 
stems against truthed data and calculated the accu-
racy measures A' and A'' as below: 
Let T = (t1, t2, ... tN) be the set of tokens in a cor-
pus of size N, S = (?1, ?2, ... ?N) be the set of 
truthed stems for those tokens. Let s'i and s''i be the 
best and second-best stems suggested by the pro-
posed stemmer system for token ti. Then we define 
1
'( )
'
N
i
f i
A
N
==
?
, where  i i
1, if  = s'
'( )
0, otherwise
f i
??= ??
and 
1
''( )
''
N
i
f i
A
N
==
?
, where  i i
1, if   (s' , s'' )
''( )
0, otherwise
f i
? ??=??
i
                                                
A' and A'' will be closer to 1 as the system accu-
racy increases. 
Initially we ran it for three classic short stories 
by Rabindranath Tagore1. Since the proposed sys-
tem accuracy will also depend upon the accuracy 
of the POS tagger and the dictionary coverage, to 
rule these factors out we manually identified the 
POS of the test corpus to emulate a 100% accurate 
POS tagger and used an empty dictionary. Apart 
from calculating the individual accuracies, we also 
calculated overall accuracy by considering the 
three stories as a single corpus: 
 
 
1 i?????? ???? [i`ndurer bhoj], ??????o?? [denaapaaonaa], 
and ???????i??? ???????d?? [raamakaanaaiyer nirbuddhitaa] 
respectively
71
Corpus N A' A'' 
RT1 519 0.888 0.988
RT2 1865 0.904 0.987
RT3 1416 0.903 0.999
Overall 3800 0.902 0.992
Table 4: Accuracies for Short Stories by Tagore 
As shown above, while A'' is very good, A' is 
also quite satisfactory. We could not compare this 
result with other similar Bengali stemmer systems 
due to unavailability. The closest stemmer system 
we found is the Hindi stemmer by Ramanathan et. 
al. (2003). It did not use a POS tagger and was run 
on a different corpus. The recorded accuracy of 
that stemmer was 0.815.  
To check whether we can further improve on A', 
we introduced lexicon of 352 verb stems, ran it on 
the above three pieces with ? = 0.6 to tolerate 
only the changes in maatraa and diacritic mark. 
We calculated A' for verbs tokens only with and 
without lexicon scenarios. We received the follow-
ing result: 
0.969
0.997
0.955
0.973
0.957
0.907
0.9900.991
0.860
0.880
0.900
0.920
0.940
0.960
0.980
1.000
RT1 (Verb) RT2 (Verb) RT3 (Verb) Overall
A
cc
u
ra
cy
A' (w/o Lexicon) A' (w/ Lexicon)
 
Figure 3: Comparison of Accuracies with and 
without Verb Lexicon 
Above graph suggests that a lexicon can im-
prove the accuracy significantly. 
7 Conclusion  
This paper proposed a system and algorithm for 
stripping inflection suffixes from Bengali word 
tokens based on a rule-based approach. The con-
ducted experiments produced encouraging results.  
Currently, our work is limited to the traditional 
and standard colloquial dialects of Bengali. Future 
works can be carried out to include other dialects 
by including more inflections in the respective data 
structure of this system. 
The system suggests a set of ranked stems for a 
word token. The client of this system is expected to 
choose the highest ranked stem. This can be mis-
leading for some of the cases where tokens derived 
from different stems share low or zero edit-
distance among each other. As for example, when 
the verb token ???? can be derived from both ?? and 
??l, the system will suggest ?? over ??l.  
This problem can be addressed by taking hints 
from word sense disambiguation (WSD) compo-
nent as an input. Further studies can be devoted 
towards this idea. Moreover, a blend of rule-based 
and statistical approaches may be explored in fu-
ture to improve the resultant accuracy of the stem-
mer. 
While input from POS tagger helped to achieve 
a good performance of this system, it is yet to be 
studied how the system will perform without a 
POS tagger.  
References 
S. Chatterji. 1939. Bhasha-prakash Bangla Vyakaran. 
Rupa & Co. New Delhi, India 
M. F. Porter. 1980. An algorithm for suffix stripping. 
Program 14(3):130-137. 
U. Garain and A. K. Datta. 2005. An Approach for 
Stemming in Symbolically Compressed Indian Lan-
guage Imaged Documents. Proceedings of the 2005 
Eight International Conference on Document Analy-
sis and Recognition (ICDAR?05). IEEE Computer 
Society  
P. Majumder, M. Mitra, S. Parui, G. Kole, P. Mitra, and 
K. Datta. 2006. YASS: Yet Another Suffix Stripper. 
ACM Transactions on Information Systems.  
T. Brants . 2000. TnT: a statistical part-of-speech tag-
ger. Proceedings of the sixth conference on Applied 
natural language processing: 224-231. Morgan Kauf-
mann Publishers Inc.   San Francisco, CA, USA 
V. I. Levenshtein. 1966. Binary codes capable of cor-
recting deletion, insertions and reversals. Cybernet-
ics and Control Theory, 10:707-710.  
R. Youngs, D. Redmond-Pyle, P. Spaas, and E. Kahan. 
1999. A standard for architecture description. IBM 
System Journal 38(1). 
A. Ramanathan and D. D. Rao. 2003. A lightweight 
stemmer for hindi. In Proc. Workshop of Computa-
tional Linguistics for South Asian Languages -
Expanding Synergies with Europe, EACL-2003: 42?
48. Budapest, Hungary. 
72
