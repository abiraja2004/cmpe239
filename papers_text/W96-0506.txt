P ICARD:  The Next  Generator  
Stephen Beale  and Sergei  N i renburg  
Computing Research Laboratory 
Box 30001 
New Mexico State University 
Las Cruces, New Mexico 88003 
sb,sergeK~crl.nmsu.edu 
Abstract 
This paper 1 introduces a new line of research 
which ensures oundness and completeness in Nat- 
ural Language text planners on top of an effi- 
cient control strategy. The work builds on the 
HUNTER-GATItERER analysis system (Beale. 
96; Beale & Nirenburg, 96). That system em- 
ploys constraint satisfaction, branch-and-bound 
and solution synthesis techniques to produce near 
linear-time processing for knowledge-based seman- 
tic analysis. PICARD enables similar results 
for the field of text planning by recasting local- 
ized means-end planning instances into abstrac- 
tions connected by usage constraints that al- 
low HUNTER-GATHERER to process the global 
problem as a simple constraint satisfaction prob- 
lem. PICARD is currently being used to plan En- 
ghsh and Spanish text in the Mikrokosmos Ma- 
chine Translation Project. 
HUNTER-GATHERER Overv iew 
Implied information, background knowledge, 
ellipsis, coreference, figurative speech, lexical 
ambiguity; these are just a few of the immense 
challenges a computationM-semantic system 
faces. Nevertheless, humans process language 
in real time every day with very little apparent 
misunderstanding. How can we make a com- 
puter do the same? 
By constraining the problem. With search 
spaces that can reach 10 TM and more just to 
deal with basic semantic dependencies in a sen- 
tence (disambiguating word senses and deter- 
mining the semantic onnections between them 
- or lexical choice and implementing semantic 
connections for generation), exhaustive search 
techniques are untenable. Constraint satisfac- 
tion problem (CSP) techniques allow early dis- 
ambiguation and drastic search space reduc- 
tion, while maintaining the integrity (sound- 
ness) of the solutions found. 
a Research reported in this paper was supported in 
part by Contract MDA904-92-C-5189 from the U.S. De- 
partment of Defense. 
Beale (1996) introduced a new control 
strategy for computational-semantic process- 
ing. The HUNTER-GATHERER methodol- 
ogy uses knowledge of constraint dependen- 
cies to identify small sub-problems which can 
be processed independently. Solution syn- 
thesis methods are then utilized to combine 
(gather) solutions to these sub-problems, or 
circles, into larger and larger solutions until 
the entire sentence is analyzed. As solutions 
for each circle are created, branch-and-bound 
and constraint satisfaction techniques are used 
to prune away (hunt down) non-optimal solu- 
tions. 
HUNTER-GATHERER is a general control 
strategy that works particularly well for NL 
problems. Central to our application of this 
methodology tocomputational semantics, both 
in analysis and generation, is the hypothe- 
sis that such problems can almost always be 
viewed as bundles of tightly constrained sub- 
problems, each of which combine at higher, 
relatively constraint-free l vels to produce a 
complete solution. Constraint dependency in- 
formation, retrieved from the semantic co- 
occurrence information stored in the lexicon, 
which in turn exploits syntactic information, 
can be used to partition the complex disam- 
biguation problem into simpler sub-problems, 
or "circles of dependency." 
The concept of relatively independent "cir- 
cles of dependency" can be exploited to al- 
low inexpensive local analyses to be com- 
bined non-exponentially into global solutions. 
This is accomplished using a computational 
tool known as solution synthesis. Freuder 
(1978) introduced Solution Synthesis (SS) as 
a means to "gather up" all solutions for a CSP 
without resorting to traditional search meth- 
ods. Freuder's algorithm created a set of two- 
variable nodes that contained all solutions for 
every two variable combination. These two- 
variable nodes were then combined into three- 
21 
variable nodes, and so on, until a node contain- 
ing all the variables, i.e. the solution, was syn- 
thesized. At each step, constraints were prop- 
agated down and then back up the "tree" of 
synthesized nodes. 
The HUNTER-GATHERER work extends 
and generalizes the solution synthesis method- 
ology. The basic idea of synthesizing solution 
sets one order higher than their immediate an- 
cestors is discarded. Instead, solution synthesis 
operates with maximally interacting roupings 
(circles) of variables of any order and extends 
to the highest levels of synthesizing. Freuder 
only creates econd order nodes from adjacent 
variables in a list. After that. third and higher 
order nodes are blindly created from combina- 
tions of second order nodes. We redefine syn- 
thesis to operate on nodes of any size. Circles 
of co-constrained variables guide the synthesis 
process from beginning to end. 
In addition to this modified solution synthe- 
sis, HUNTER-GATHERER employs branch- 
and-bound and constraint satisfaction meth- 
ods to prune away non-optimal or impossi- 
ble solutions from the search space. Beale, 
Nirenburg & Mahesh (1996) report "near" lin- 
ear time processing for semantic analysis, with 
exhaustive search spaces in the trillions re- 
duced to hundreds.  The PICARD system ex- 
tends the HUNTER-GATHERER analysis ca- 
pabilities to the field of text planning by using 
constraint circles to identify localized means- 
end plan combinations. Constraint satisfaction 
techniques can then be used to ensure that only 
consistent plans are used together, while the 
other mechanisms in HUNTER-GATtlERER, 
solution synthesis and branch-and-bound, effi- 
ciently find the optimal solution. 
Us ing  Const ra in t  Sat i s fac t ion  to 
Enab le  Abst ract ions  
Figure 1 is a representation f the semantic 
content of a simple natural anguage sentence. 
In English the sentence could be rendered 
"Grupo Roche acquired Dr. Andreu through 
a subsidiary in Spain." The node names 
are semantic oncepts taken from a language- 
independent ontology. Arc labels correspond 
to relations between concepts. The ontology 
defines for each concept he set of arcs that are 
allowed/expected, as well as the appropriate 
filler concepts. For simplicity, additional se- 
mantic information such as temporal relation- 
ships are not shown. Please consult (Beale, 
Nirenburg & Mahesh, 1995) for more infor- 
mation about semantic representation in the 
Mikrokosmos ystem. For our purposes, the 
Figure 1: Example Semantic Representation 
WAR1 
1 OBJ :  .<VAR2: :~-  
Figure 2: Lexicon Entry for acquire 
details of the semantic representation a d gen- 
eration lexicon entries to follow are unimpor- 
tant; they serve only as simple examples of con- 
trol concepts that will apply to more complex 
problems. 
Generation lexicon entries attempt to match 
parts of the input semantic structures and map 
them into target language surface structures. 
For instance, a lexicon entry for the concept 
ACQUIRE might look like Figure 2. The 
VARs in the entry will be bound to the corre- 
sponding semantic structures in the input, and 
their target realization will be planned sepa- 
rately and inserted into the output structure 
as shown. Typically, lexicon entries also con- 
tain semantic and pragmatic onstraints. For 
instance, VAR1 might be constrained to be 
HUMAN. The entry could also be constrained 
to apply only to texts with certain stylistic 
characteristics. Collocational constraints are 
also important in generation. Any of these 
constraints can apply locally or can be prop- 
agated down to the VARs. The interplay of 
constraints i  a major factor in determining the 
best overall plan. 
Planning for Machine Translation comes in 
when we try to combine information in var- 
ious lexicon entries to best match the input 
semantics with as little redundancy as possi- 
ble and maximal adherence to the constraints. 
22 
ACQUIRE-1  
ACQ UIR.L~ ~"acqutre" ' 1 
L ob.l: WAR2 VARI  VAR2 
ACQUIRE-2  "procure" 
ACQUIRE r subj: VAR1 
PP"with" MAR1 MAR2 MAR3 L obj: VAR3 
ACQUIRE-3  
22 
VARI  VAR2 VAR3 
I '"lbuy" subj: VARI obj: VA_R2 
PP'for" 
L obj: V A 1~,.3 
Figure 3: Three entries for ACQUIRE 
INSTRUMENT-  1 
V AR1 PP"th.mut,la" 
in.+m.nt ~ lD  obj: VAR.2 J 
VA.R2 
Figure 4: An entry for INSTRUMENT 
The case study given here exemplifies the is- 
sues in lexical choice. Obviously text plan- 
ning involves much more than simply picking 
words, but the principles outlined below apply 
to other components of text planning as well. 
Figures 3, 4 and 5 represent some possible lexi- 
con entries that might be used in planning tar- 
get English sentences for Figure 1. 
It would be useful if we could divide 
text planning problems into relatively in- 
dependent sub-problems and use HUNTER- 
GATHERER's solution synthesis to efficiently 
combine the smaller solutions. The problem is 
that solution synthesis requires an unchanging, 
orderly set of variables to start with. In text 
planning, as in all types of means-end plan- 
ning systems, there is no fixed number of vari- 
ables. "Variable," in this context, refers to 
a set of possible plans from which one must  
be chosen. A variable can be set up for AC-  
QUIRE ,  which has three possible plans. One 
of them must be chosen. On the other hand, 
sometimes a plan for instrument is needed, and 
sometimes not. For instance, if ACQUIRE-l 
CORPORATION-  1 
CORPORATION ~ \["corp oratlon'' } 
CORPORATION-2  
CORPORATION ownedCby "~ 
ORGANIZAT ION 
"subsidiary" \] 
Figure 5: Two entries for CORPORATION 
(Figure 3) is used, a separate sub-plan must be 
made for the instrument relation. Two "vari- 
ables" would be needed, one for ACQUIRE 
and one for instrument. If the ACQUIRE-2 
is used, the instrument plan and variable are 
unnecessary. Lexicon entries which have differ- 
ent set of VARS, different preconditions and/or 
contain more or fewer relations all create dif- 
fering amounts of sub-plans. These differences 
are compounded as different paths through the 
space of possible plans are taken. 
PICARD solves this problem in a simple way. 
Means-end planning is carried out locally to 
determine, for each lexicon entry, the addi- 
tional sub-plans that are needed. Again, these 
sub-plans correspond to VARs and missing re- 
lations or preconditions in the lexicon entry. 
For instance, the ACQUIRE-1 entry requires 
a sub-plan for the missing instrument relation. 
For each needed sub-plan, a "usage constraint" 
is added to the lexicon entry that will "request" 
some "non-dummy ''2 sub-plan to be used that 
fulfills the need. The ACQUIRE-I entry, for 
example, would receive a usage constraint that 
requires it to use one of the sub-plans for in- 
strument. In addition, for each of the sub-plans 
that can fill the need, a usage constraint is 
added such that those entries can only be used 
if "requested" by some other plan. 
The main benefit this gives is that a sta- 
ble set of "variables" can be created. There 
will be an ACQUIRE variable, from which 
one of the three lexicon entries must be se- 
lected. There will be an instrument variable, 
from which either the entry shown in Figure 4 
will be used or the newly created ummy entry. 
These variables can then be processed by a so- 
lution synthesis algorithm. Whenever a choice 
is made, for instance selecting ACQUIRE-I for 
AQUIRE,  the constraint satisfaction mech- 
anism in HUNTER-GATHERER will elimi- 
nate all conflicting sub-plans. Picking entry 
2,,Dummy,, plans are explained next. 
23 
ACQUIRE-1 will eliminate the dummy entry 
for instrument. Choosing entry ACQUIRE-2 
will eliminate all of the non-dummy instrument 
plans, as well as all the sub-plans that are cre- 
ated by the instrument plans. In this way, lo- 
cal plans can be linked together, but can be 
processed globally by an efficient solution syn- 
thesis control. 
Conc lus ion  
To summarize, a means-end planner is used 
locally to set up possible sub-plans. The 
sub-plans are connected with a system of 
usage constraints that inhibit or allow us- 
age depending on the other sub-plans be- 
ing used. The HUNTER-GATHERER sys- 
tem can then efficiently process the collec- 
tion of sub-plans to find the best overall plan. 
Co,stralnt satisfaction techniques described in 
(Beale, 96) automatically control the combi- 
nation of sub-plans. Constraint satisfaction 
also ensures the soundness of all preconditions 
used in the lexicon entries, including those 
which are not related to the ideas presented 
above. Efficiency is gained by restricting the 
means-end planning component o local sub- 
problems. Solutions to these sub-problems 
are then combined, utilizing solution synthesis, 
branch-and-bound and constraint satisfaction, 
by HUNTER-GATHERER. 
The HUNTER-GATHERER control archi- 
tecture has been used extensively in the 
Mikrokosmos emantic analyzer. The follow- 
ing table shows actual results of semantic anal- 
yses of various size problems (from sentences 
selected randomly from our corpus): 
Sent A Sent B Sent C 
# plans 79 95 119 
exhaustive 7.8 Mil 56.7 Mil 235 Bil 
HUNT-GATHER 179 254 327 
It is interesting to note that a 207o increase 
in the number of total plans 3 (79 to 95) results 
in a 626% increase (7.8M to 56M) in the num- 
ber of exhaustive combinations possible, but 
only a 42% increase (179 to 254) in the num- 
ber of combinations considered by HUNTER- 
GATHERER. As one moves on to even more 
complex problems, a 25% increase (95 to 119) 
in the number of plans catapults the exhaustive 
complexity by 414,600% (56M to 235B) and 
yet only increases the HUNTER-GATHERER 
3The total number of "plans" corresponds to the 
total number of word senses for all the words in the 
sentence. 
complexity by 29% (254 to 327). As the prob- 
lem size increases, the minor effects of non- 
local interactions diminish with respect o the 
size of the problem. We expect, therefore, the 
behavior of this algorithm to move even closer 
to linear with larger problems (for example, 
ones involving discourse). 
Generation in the Mikrokosmos project is 
a relatively new development. Currently we 
are developing methods to reverse multllin- 
gual analysis lexicons. PICARD has been used 
to back-translate he semantic analyses of the 
Mikrokosmos analyzer using these reversed lex- 
icons. Efficiency results similar to those re- 
ported above were obtained. 
The HUNTER-GATHERER algorithms are 
complete with respect to the set of mono- 
tonic solutions. Currently, solutions with plans 
that temporarily violate preconditions of other 
plans (with the "violation" corrected by a later 
plan) will not be allowed. Besides this limi- 
tation, HUNTER-GATHERER is guaranteed 
to find the same solution(s) as an exhaus- 
tive search. In addition, the constraint satis- 
faction component of HUNTER-GATHERER 
ensures soundness. By converting means-end 
planners into a format that can be used by 
HUNTER-GATHER, PICARD achieves effi- 
cient processing with guaranteed soundness 
and completeness without sacrificing the gen- 
erality of means-end planning. 
Re ferences  
Stephen Beale. 1996. HUNTER-GATHERER: 
Applying Constraint Satisfaction, Branch-and- 
Bound and Solution Synthesis to Natural Lan- 
guage Semantics. Technical Report, MCCS-96- 
289, Computing Research Lab, New Mexico State 
Univ. 
Stephen Beale, Sergei Nirenburg and Kavi Ma- 
hesh. 1996. HUNTER-GATHERER: Three 
Search Techniques Integrated for Natural Lan- 
guage Semantics. To appear in the Thirteenth 
National Conference on Artificial Intelligence 
(AAAI96), Portland, Oregon. 
Stephen Beale, Sergei Nirenburg and Kavi Ma- 
hesh. 1995. Semantic Analysis in the Mikrokosmos 
Machine Translation Project. In Proceedings ofthe 
2nd Symposium on Nalural Language Processing, 
297-307. Bangkok, Thailand. 
E.C. Freuder. 1978. Synthesizing Constraint Ex- 
pressions. Communications A CM 21 ( t 1): 958-966. 
24 
