Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 110?114,
Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational Linguistics
Estimating Compact Yet Rich Tree Insertion Grammars
Elif Yamangil and Stuart M. Shieber
Harvard University
Cambridge, Massachusetts, USA
{elif, shieber}@seas.harvard.edu
Abstract
We present a Bayesian nonparametric model
for estimating tree insertion grammars (TIG),
building upon recent work in Bayesian in-
ference of tree substitution grammars (TSG)
via Dirichlet processes. Under our general
variant of TIG, grammars are estimated via
the Metropolis-Hastings algorithm that uses
a context free grammar transformation as a
proposal, which allows for cubic-time string
parsing as well as tree-wide joint sampling of
derivations in the spirit of Cohn and Blun-
som (2010). We use the Penn treebank for
our experiments and find that our proposal
Bayesian TIG model not only has competitive
parsing performance but also finds compact
yet linguistically rich TIG representations of
the data.
1 Introduction
There is a deep tension in statistical modeling of
grammatical structure between providing good ex-
pressivity ? to allow accurate modeling of the data
with sparse grammars ? and low complexity ?
making induction of the grammars and parsing of
novel sentences computationally practical. Recent
work that incorporated Dirichlet process (DP) non-
parametric models into TSGs has provided an effi-
cient solution to the problem of segmenting train-
ing data trees into elementary parse tree fragments
to form the grammar (Cohn et al., 2009; Cohn and
Blunsom, 2010; Post and Gildea, 2009). DP infer-
ence tackles this problem by exploring the space of
all possible segmentations of the data, in search for
fragments that are on the one hand large enough so
that they incorporate the useful dependencies, and
on the other small enough so that they recur and have
a chance to be useful in analyzing unseen data.
The elementary trees combined in a TSG are, in-
tuitively, primitives of the language, yet certain lin-
guistic phenomena (notably various forms of modifi-
cation) ?split them up?, preventing their reuse, lead-
ing to less sparse grammars than might be ideal.
For instance, imagine modeling the following set of
structures:
? [NP the [NN [NN [NN president] of the university] who
resigned yesterday]]
? [NP the [NN former [NN [NN president] of the univer-
sity]]]
? [NP the [NN [NN president] who resigned yesterday]]
A natural recurring structure here would be the
structure ?[NP the [NN president]]?, yet it occurs
not at all in the data.
TSGs are a special case of the more flexible gram-
mar formalism of tree adjoining grammar (TAG)
(Joshi et al., 1975). TAG augments TSG with an
adjunction operator and a set of auxiliary trees in
addition to the substitution operator and initial trees
of TSG, allowing for ?splicing in? of syntactic frag-
ments within trees. In the example, by augmenting a
TSG with an operation of adjunction, a grammar that
hypothesizes auxiliary trees corresponding to ad-
joining ?[NN former NN ]?, ?[NN NN of the uni-
versity]?, and ?[NN NN who resigned yesterday]?
would be able to reuse the basic structure ?[NP the
[NN president]]?.
Unfortunately, TAG?s expressivity comes at the
cost of greatly increased complexity. Parsing com-
plexity for unconstrained TAG scales as O(n6), im-
110
NP
DT NN
the president
NP
NP* SBAR
WHNP
S
who
NP
NP* PP
IN
NP
of
NN
JJ
NN*
former
Figure 1: Example TIG derivation of an NP constituent:
One left insertion (at NN) and two simultaneous right in-
sertions (at NP).
practical as compared to CFG and TSG?s O(n3). In
addition, the model selection problem for TAG is
significantly more complicated than for TSG since
one must reason about many more combinatorial op-
tions with two types of derivation operators.1 This
has led researchers to resort to heuristic grammar ex-
traction techniques (Chiang, 2000; Carreras et al.,
2008) or using a very small number of grammar cat-
egories (Hwa, 1998).
Hwa (1998) first proposed to use tree-insertion
grammars (TIG), a kind of expressive compromise
between TSG and TAG, as a substrate on which to
build grammatical inference. TIG constrains the ad-
junction operation so that spliced-in material falls
completely to the left or completely to the right of
the splice point. By restricting the form of possible
auxiliary trees to only left or right auxiliary trees in
this way, TIG remains within the realm of context-
free formalisms (with cubic complexity) while still
modeling rich linguistic phenomena (Schabes and
Waters, 1995). Figure 1 depicts some examples of
TIG derivations.
Sharing the same intuitions, Shindo et al. (2011)
have provided a previous attempt at combining TIG
and Bayesian nonparametric principles, albeit with
severe limitations. Their TIG variant (which we will
refer to as TIG0) is highly constrained in the follow-
ing ways.
1. The foot node in an auxiliary tree must be the immediate
child of the root node.
2. Only one adjunction can occur at a given node.
1This can be seen by the fact that tree-path languages under
TAG are context free, whereas they are regular for TSG. (Sch-
abes and Waters, 1995)
(a)
(b)
NP
NP
R
NP
L
NP
DT NN
the
NP
L
?
NN
president
NN
L
NN
R
NN
R
?
NP
NP*
PP
IN NP
of
?
NP
SBAR
WHNP
S
who
NP
R
NP
NP* PP
IN NP
of
NP
NP
R
?
NP
R
NP
NP* SBAR
WHNP
S
who
?
NP
R
NN
JJ
NN*
former ?
NN
L
Figure 2: TIG-to-TSG transform: (a) and (b) illus-
trate transformed TSG derivations for two different TIG
derivations of the same parse tree structure. The TIG
nodes where we illustrate the transformation are in bold.
(We suppress the rest of the transformational nodes.)
3. Even modeling multiple adjunction with root adjunction
is disallowed. There is thus no recursion possibility with
adjunction, no stacking of auxiliary trees.
4. As a consequence of the prior two constraints, no adjunc-
tion along the spines of auxiliary trees is allowed.
5. As a consequence of the first constraint, all nonterminals
along the spine of an auxiliary tree are identical.
In this paper we explore a Bayesian nonparamet-
ric model for estimating a far more expressive ver-
sion of TIG, and compare its performance against
TSG and the restricted TIG0 variant. Our more gen-
eral formulation avoids these limitations by support-
ing the following features and thus relaxing four of
the five restrictions of TIG0.
1. Auxiliary trees may have the foot node at depth greater
than one.2
2. Both left and right adjunctions may occur at the same
node.
3. Simultanous adjunction (that is, more than one left or
right adjunction per node) is allowed via root adjunction.
4. Adjunctions may occur along the spines of auxiliary trees.
The increased expressivity of our TIG variant is
motivated both linguistically and practically. From
a linguistic point of view: Deeper auxiliary trees can
help model large patterns of insertion and potential
correlations between lexical items that extend over
multiple levels of tree. Combining left and right
auxiliary trees can help model modifiers of the same
node from left and right (combination of adjectives
2Throughout the paper, we will refer to the depth of an aux-
iliary tree to indicate the length of its spine.
111
and relative clauses for instance). Simultaneous in-
sertion allows us to deal with multiple independent
modifiers for the same constituent (for example, a
series of adjectives). From a practical point of view,
we show that an induced TIG provides modeling
performance superior to TSG and comparable with
TIG0. However we show that the grammars we in-
duce are compact yet rich, in that they succinctly
represent complex linguistic structures.
2 Probabilistic Model
In the basic nonparametric TSG model, there is an
independent DP for every grammar category (such
as c = NP ), each of which uses a base distribution
P0 that generates an initial tree by making stepwise
decisions.
Ginitc ? DP(?
init
c , P
init
0 (? | c))
The canonical P0 uses a probabilistic CFG P? that
is fixed a priori to sample CFG rules top-down and
Bernoulli variables for determining where substitu-
tions should occur (Cohn et al., 2009; Cohn and
Blunsom, 2010).
We extend this model by adding specialized DPs
for left and right auxiliary trees.3
Grightc ? DP(?
right
c , P
right
0 (? | c))
Therefore, we have an exchangeable process for
generating right auxiliary trees
p(aj | a<j) =
naj + ?
right
c P
right
0 (aj | c)
j ? 1 + ?rightc
(1)
as for initial trees in TSG.
We must define three distinct base distributions
for initial trees, left auxiliary trees, and right aux-
iliary trees. P init0 generates an initial tree with root
label c by sampling CFG rules from P? and making
a binary decision at every node generated whether
to leave it as a frontier node or further expand (with
probability ?c) (Cohn et al., 2009). Similarly, our
P right0 generates a right auxiliary tree with root la-
bel c by first making a binary decision whether to
generate an immediate foot or not (with probability
?rightc ), and then sampling an appropriate CFG rule
3We use right insertions for illustration; the symmetric ana-
log applies to left insertions.
(VP (, ,) (VP PP (VP (, ,) VP*)))
(VP (SBAR (WHADVP (WRB (WRB When) ) ) S) (VP (, ,) VP*))
(VP (PP (IN For) (NP NN )) (VP (, ,) VP*))
(VP (CC But) (VP PP (VP (, ,) VP*)))
(VP ADVP (VP (, ,) VP*))
(IN (ADVP (RB (RB particularly) ) ) IN*)
(NP PP (NP (CC and) (NP PP NP*)))
Figure 3: Example left auxiliary trees that occur in the
top derivations for Section 23. Simultaneous insertions
occur most frequently for the labels VP (85 times), NNS
(21 times), NNP (14 times).
from P? . For the right child, we sample an initial tree
from P init0 . For the left child, if decision to gener-
ate an immediate foot was made, we generate a foot
node, and stop. Otherwise we recur into P right0 which
generates a right auxiliary tree that becomes the left
child.
We bring together these three sets of processes
via a set of insertion parameters ?leftc , ?
right
c . In any
derivation, for every initial tree node labelled c (ex-
cept for frontier nodes) we determine whether or
not there are insertions at this node by sampling a
Bernoulli(?leftc ) distributed left insertion variable and
a Bernoulli(?rightc ) distributed right insertion vari-
able. For left auxiliary trees, we treat the nodes that
are not along the spine of the auxiliary tree the same
way we treat initial tree nodes, however for nodes
that are along the spine (including root nodes, ex-
cluding foot nodes) we consider only left insertions
by sampling the left insertion variable (symmetri-
cally for right insertions).
3 Inference
Given this model, our inference task is to explore
optimal derivations underlying the data. Since TIG
derivations are highly structured objects, a basic
sampling strategy based on local node-level moves
such as Gibbs sampling (Geman and Geman, 1984)
would not hold much promise. Following previ-
ous work, we design a blocked Metropolis-Hastings
sampler that samples derivations per entire parse
trees all at once in a joint fashion (Cohn and Blun-
som, 2010; Shindo et al., 2011). This is achieved by
proposing derivations from an approximating distri-
bution and stochastically correcting via accept/reject
to achieve convergence into the correct posterior
(Johnson et al., 2007).
Since our base distributions factorize over levels
of tree, CFG is the most convenient choice for a
112
CFG rule CFG probability
Base distribution: P init0
NP? NPinit ?initc /(n
init
NP + ?
init
c )
NPinit? NPL NP
init NPR 1.0
NPinit? DT NN P? (NP? DT NN)? (1? ?DT)? (1? ?NN)
NPinit? DT NNinit P? (NP? DT NN)? (1? ?DT)? ?NN
NPinit? DTinit NN P? (NP? DT NN)? ?DT ? (1? ?NN)
NPinit? DTinit NNinit P? (NP? DT NN)? ?DT ? ?NN
Base distribution: P right0
NPR? NP
right ?rightNP ?
(
?rightc /(n
right
NP + ?
right
c )
)
NPR?  1? ?
right
NP
NPright? NPright NPR 1.0
NPright? NP* SBAR
init P? (NP? NP SBAR | NP? NP )
?(1? ?rightNP )? (1? ?SBAR)
NPright? NP* SBAR P? (NP? NP SBAR | NP? NP )
?(1? ?rightNP )? ?SBAR
NPright? NPright SBARinit P? (NP? NP SBAR | NP? NP )
??rightNP ? (1? ?SBAR)
NPright? NPright SBAR P? (NP? NP SBAR | NP? NP )
??rightNP ? ?SBAR
Figure 4: Transformation CFG rules that represent infi-
nite base distributions. P init0 is taken from Cohn and Blun-
som (2010). Underscored labels (such as NPright as op-
posed to NPright) are used to differentiate the pre-insertion
nodes in Figure 2 from the post-insertion ones. P left0 rules
are omitted for brevity and mirror the P right0 rules above.
Model FMeasure # Initial Trees # Auxiliary Trees (# Left)
TSG 77.51 6.2K -
TIG0 78.46 6.0K 251 (137)
TIG 78.62 5.6K 604 (334)
Figure 5: EVALB results after training on Section 2 and
testing on Section 23. Note that TIG finds a compact yet
rich representation. Elementary tree counts are based on
ones with count > 1.
proposal distribution. Fortunately, Schabes and Wa-
ters (1995) provide an (exact) transformation from a
fully general TIG into a TSG that generates the same
string languages. It is then straightforward to repre-
sent this TSG as a CFG using the Goodman trans-
form (Goodman, 2002; Cohn and Blunsom, 2010).
Figure 4 lists the additional CFG productions we
have designed, as well as the rules used that trigger
them.
4 Evaluation Results
We use the standard Penn treebank methodology of
training on sections 2?21 and testing on section 23.
All our data is head-binarized and words occurring
only once are mapped into unknown categories of
the Berkeley parser. As has become standard, we
carried out a small treebank experiment where we
train on Section 2, and a large one where we train
on the full training set. All hyperparameters are re-
sampled under appropriate vague gamma and beta
priors. All reported numbers are averages over three
runs. Parsing results are based on the maximum
probability parse which was obtained by sampling
derivations under the transform CFG.
We compare our system (referred to as TIG) to
our implementation of the TSG system of (Cohn
and Blunsom, 2010) (referred to as TSG) and the
constrained TIG variant of (Shindo et al., 2011) (re-
ferred to as TIG0). The upshot of our experiments is
that, while on the large training set all models have
similar performance (85.6, 85.3, 85.4 for TSG, TIG0
and TIG respectively), on the small dataset inser-
tion helps nonparametric model to find more com-
pact and generalizable representations for the data,
which affects parsing performance (Figure 4). Al-
though TIG0 has performance close to TIG, note that
TIG achieves this performance using a more suc-
cinct representation and extracting a rich set of aux-
iliary trees. As a result, TIG finds many chances to
apply insertions to test sentences, whereas TIG0 de-
pends mostly on TSG rules. If we look at the most
likely derivations for the test data, TIG0 assigns 663
insertions (351 left insertions) in the parsing of en-
tire Section 23, meanwhile TIG assigns 3924 (2100
left insertions). Some of these linguistically sophis-
ticated auxiliary trees that apply to test data are listed
in Figure 3.
5 Conclusion
We described a nonparametric Bayesian inference
scheme for estimating TIG grammars and showed
the power of TIG formalism over TSG for returning
rich, generalizable, yet compact representations of
data. The nonparametric inference scheme presents
a principled way of addressing the difficult model
selection problem with TIG which has been pro-
hibitive in this area of research. TIG still remains
within context free and both our sampling and pars-
ing techniques are highly scalable.
Acknowledgements
The first author was supported in part by a Google
PhD Fellowship in Natural Language Processing.
113
References
