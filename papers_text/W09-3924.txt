Proceedings of SIGDIAL 2009: the 10th Annual Meeting of the Special Interest Group in Discourse and Dialogue, pages 156?159,
Queen Mary University of London, September 2009. c?2009 Association for Computational Linguistics
Leveraging POMDPs trained with User Simulations and
Rule-based Dialogue Management in a Spoken Dialogue System
Sebastian Varges, Silvia Quarteroni, Giuseppe Riccardi, Alexei V. Ivanov, Pierluigi Roberti
Department of Information Engineering and Computer Science
University of Trento
38050 Povo di Trento, Italy
{varges|silviaq|riccardi|ivanov|roberti}@disi.unitn.it
Abstract
We have developed a complete spoken di-
alogue framework that includes rule-based
and trainable dialogue managers, speech
recognition, spoken language understand-
ing and generation modules, and a com-
prehensive web visualization interface.
We present a spoken dialogue system
based on Reinforcement Learning that
goes beyond standard rule based models
and computes on-line decisions of the best
dialogue moves. Bridging the gap between
handcrafted (e.g. rule-based) and adap-
tive (e.g. based on Partially Observable
Markov Decision Processes - POMDP) di-
alogue models, this prototype is able to
learn high rewarding policies in a number
of dialogue situations.
1 Reinforcement Learning in Dialogue
Machine Learning techniques, and particularly
Reinforcement Learning (RL), have recently re-
ceived great interest in research on dialogue man-
agement (DM) (Levin et al, 2000; Williams and
Young, 2006). A major motivation for this choice
is to improve robustness in the face of uncertainty
due for example to speech recognition errors. A
second important motivation is to improve adap-
tivity w.r.t. different user behaviour and applica-
tion/recognition environments.
The RL approach is attractive because it offers a
statistical model representing the dynamics of the
interaction between system and user. This con-
trasts with the supervised learning approach where
system behaviour is learnt based on a fixed cor-
pus. However, exploration of the range of dialogue
management strategies requires a simulation en-
vironment that includes a simulated user (Schatz-
mann et al, 2006) in order to avoid the prohibitive
cost of using human subjects.
We demonstrate various parameters that influ-
ence the learnt dialogue management policy by
using pre-trained policies (section 5). The appli-
cation domain is a tourist information system for
accommodation and events in the local area. The
domain of the trained DMs is identical to that of a
rule-based DM that was used by human users (sec-
tion 4), allowing us to compare the two directly.
2 POMDP demonstration system
The POMDP DM implemented in this work is
shown in figure 1: at each turn at time t, the incom-
ingN user act hypotheses an,u split the state space
St to represent the complete set of interpretations
from the start state (N=2). A belief update is per-
formed resulting in a probability assigned to each
state. The resulting ranked state space is used as
a basis for action selection. In our current imple-
mentation, belief update is based on probabilistic
user responses that include SLU confidences. Ac-
tion selection to determine system action am,s is
based on the best state (m is a counter for actions
in action set A). In each turn, the system uses an
-greedy action selection strategy to decide prob-
abilistically if to exploit the policy or explore any
other action at random. (An alternative would be
softmax, for example.) At the end of each dia-
logue/session a reward is assigned and policy en-
tries are added or updated for each state-action
pair involved. These pairs are stored in tabular
form. We perform Monte Carlo updating similar
to (Levin et al, 2000):
Qt(s, a) = R(s, a)/n+Qt?1 ? (n ? 1)/n (1)
where n is the number of sessions, R the reward
and Q the estimate of the state-action value.
At the beginning of each dialogue, a user goal
UG (a set of concept-value pairs) is generated ran-
domly and passed to a user simulator. The user
simulator takes UG and the current dialogue con-
text to produce plausible SLU hypotheses. These
156
Turn?t1?
POLICY:?? Q(s1,a1)?s1,a1?s1,a2?s2,a1?s3,a4?
St1?
a1,s?a2,s?a3,s?a4,s?
policy?lookup?
policy??update?
Ut1?
a1,u?
final?state?
reward?computation?
Turn?t2? Turn?tn?
state?space?
Ut2?
state?space? St2?
?s1,1? ?s1,2??s2,2?a2,u?
a1,s? a2,s?a3,s?
a4,s?
an,s? an,s?an,s?
an,s?
state?space? Stn?user?goal?
start?state?
s1,n?
Q(s1,a2)?Q(s2,a1)?Q(s3,a4)?
UG?
s3,n?
s2,n?
s4,n?s5,n?
s6,n?
Figure 1: POMDP Dialogue Manager
are a subset of the concept-value pairs in UG along
with a confidence estimate bootstrapped from a
small corpus of 74 in-domain dialogs. We assume
that the user ?runs out of patience? after 15 turns
and ends the call.
The system visualizes POMDP-related infor-
mation live for the ongoing dialogue (figure 2).
The visualization tool shows the internal represen-
tation of the dialogue manager including the the
N best dialogue states after each user utterance
and the reranking of the action set. At the end
of each dialogue session, the reward and the pol-
icy updates are shown, i.e. new or updated state
entries and action values. Moreover, the system
generates a plot that relates the current dialogue?s
reward to the reward of previous dialogues.
3 User Simulation
To conduct thousands of simulated dialogues, the
DM needs to deal with heterogeneous but plau-
sible user input. We designed a User Simulator
(US) which bootstraps likely user behaviors start-
ing from a small corpus of 74 in-domain dialogs,
acquired using a rule-based version of the system
(section 4). The role of the US is to simulate
the output of the SLU module to the DM during
the whole interaction, fully replacing the ASR and
SLU modules. This differs from other user sim-
ulation approaches where n-gram models of user
dialog acts are represented.
For each simulated dialogue, one or more user
goals are randomly selected from a list of possible
user goals stored in a database table. A goal is rep-
resented as the set of concept-value pairs defining
a task. Simulation of the user?s behaviour happens
in two stages. First, a user model, i.e. a model
of the user?s intentions at the current stage of the
dialogue, is created. This is done by mining the
previous system move to obtain the concepts re-
quired by the DM and their corresponding values
(if any) from the current user goal. Then, the out-
put of the user model is passed to an error model
that simulates the ?noisy channel? recognition er-
rors based on statistics from the dialogue corpus.
Errors produce perturbations of concept values as
well as phenomena such as noInput, noMatch and
hangUp. If the latter phenomena occur, they are
directly propagated to the DM; otherwise, plau-
sible confidences (based on the dialogue corpus)
are attached to concept-value pairs. The probabil-
ity of a given concept-value observation at time
t + 1 given the system move at time t, as,t, and
the session user goal gu, called P (ot+1|as,t, gu),
is obtained by combining the outputs of the error
model and the user model:
P (ot+1|au,t+1) ? P (au,t+1|as,t, gu)
where au,t+1 is the true user action. Finally,
concept-value pairs are combined in an SLU hy-
pothesis and, as in the regular SLU module, a cu-
mulative utterance-level confidence is computed,
determining the rank of each of the N hypotheses
output to the DM.
4 Rule-based Dialogue Management
A rule-based DM was developed as a meaning-
ful comparison to the trained DM, to obtain train-
ing data from human-system interaction for the
US, and to understand the properties of the do-
main. Rule-based dialog management works in
two stages: retrieving and preprocessing facts (tu-
ples) taken from a dialogue state database, and
inferencing over those facts to generate a system
response. We distinguish between the ?context
model? of the first phase ? essentially allowing
more recent values for a concept to override less
recent ones ? and the ?dialog move engine? of the
second phase. In the second stage, acceptor rules
match SLU results to dialogue context, for ex-
ample perceived user concepts to open questions.
This may result in the decision to verify the ap-
plication parameter in question, and the action is
verbalized by language generation rules. If the
parameter is accepted, application dependent task
157
Figure 2: A screenshot of the online visualization tool. Left: user goal (top), evolving ranked state space
(bottom). Center: per state action distribution at turn ti. Right: consequent reward computation (top) and
policy updates (bottom). See video at http://www.youtube.com/watch?v=69QR0tKKhCw.
158
Figure 3: Left Pane: overview of a selection of dialogues in our visualization tool. Right Pane: visual-
ization of a system opening prompt followed by the user?s activity request. All distinct SLU hypotheses
(concept-value combinations) deriving from ASR are ranked based on concept-level confidence (2 in this
turn).
rules determine the next parameter to be acquired,
resulting in the generation of an appropriate re-
quest. See (Varges et al, 2008) for more details.
5 Visualization Tool
In addition to the POMDP-related visualization
tool (figure 2), we developed another web-based
dialogue tool for both rule-based and POMDP sys-
tem that displays ongoing and past dialogue ut-
terances, semantic interpretation confidences and
distributions of confidences for incoming user acts
(see dialogue logs in figure 3).
Users are able to talk with several systems
(via SIP phone connection to the dialogue system
server) and see their dialogues in the visualization
tool. They are able to compare the rule-based
system, a randomly exploring learner that has not
been trained yet, and several systems that use vari-
ous pre-trained policies. The web tool is available
at http://cicerone.dit.unitn.it/
DialogStatistics/.
Acknowledgments
This work was partially supported by the Euro-
pean Commission Marie Curie Excellence Grant
for the ADAMACH project (contract No. 022593)
and by LUNA STREP project (contract No.
33549).
References
E. Levin, R. Pieraccini, and W. Eckert. 2000. A
stochastic model of human-machine interaction for
learning dialog strategies. IEEE Transactions on
Speech and Audio Processing, 8(1).
J. Schatzmann, K. Weilhammer, M. Stuttle, and
S. Young. 2006. A Survey of Statistical User Sim-
ulation Techniques for Reinforcement-Learning of
Dialogue Management Strategies. Knowledge En-
gineering Review, 21(2):97?126.
Sebastian Varges, Giuseppe Riccardi, and Silvia Quar-
teroni. 2008. Persistent information state in a data-
centric architecture. In Proc. 9th SIGdial Workhop
on Discourse and Dialogue, Columbus, Ohio.
J. D. Williams and S. Young. 2006. Partially Ob-
servable Markov Decision Processes for Spoken Di-
alog Systems. Computer Speech and Language,
21(2):393?422.
159
