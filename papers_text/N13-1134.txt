Proceedings of NAACL-HLT 2013, pages 1142?1151,
Atlanta, Georgia, 9?14 June 2013. c?2013 Association for Computational Linguistics
A Tensor-based Factorization Model of Semantic Compositionality
Tim Van de Cruys
IRIT ? UMR 5505
CNRS
Toulouse, France
tim.vandecruys@irit.fr
Thierry Poibeau?
LaTTiCe ? UMR 8094
CNRS & ENS
Paris, France
thierry.poibeau@ens.fr
Anna Korhonen
Computer Laboratory & DTAL?
University of Cambridge
United Kingdom
anna.korhonen@cl.cam.ac.uk
Abstract
In this paper, we present a novel method for the
computation of compositionality within a distri-
butional framework. The key idea is that com-
positionality is modeled as a multi-way interac-
tion between latent factors, which are automat-
ically constructed from corpus data. We use
our method to model the composition of sub-
ject verb object triples. The method consists
of two steps. First, we compute a latent factor
model for nouns from standard co-occurrence
data. Next, the latent factors are used to induce
a latent model of three-way subject verb object
interactions. Our model has been evaluated on
a similarity task for transitive phrases, in which
it exceeds the state of the art.
1 Introduction
In the course of the last two decades, significant
progress has been made with regard to the automatic
extraction of lexical semantic knowledge from large-
scale text corpora. Most work relies on the distribu-
tional hypothesis of meaning (Harris, 1954), which
states that words that appear within the same contexts
tend to be semantically similar. A large number of
researchers have taken this dictum to heart, giving
rise to a plethora of algorithms that try to capture
the semantics of words by looking at their distribu-
tion in text. Up till now, however, most work on the
automatic acquisition of semantics only deals with
individual words. The modeling of meaning beyond
the level of individual words ? i.e. the combination
of words into larger units ? is to a large degree left
unexplored.
The principle of compositionality, often attributed
to Frege, is the principle that states that the meaning
of a complex expression is a function of the meaning
of its parts and the way those parts are (syntactically)
combined (Frege, 1892). It is the fundamental prin-
ciple that allows language users to understand the
meaning of sentences they have never heard before,
by constructing the meaning of the complex expres-
sion from the meanings of the individual words. Re-
cently, a number of researchers have tried to reconcile
the framework of distributional semantics with the
principle of compositionality (Mitchell and Lapata,
2008; Baroni and Zamparelli, 2010; Coecke et al,
2010; Socher et al, 2012). However, the absolute
gains of the systems remain a bit unclear, and a sim-
ple method of composition ? vector multiplication ?
often seems to produce the best results (Blacoe and
Lapata, 2012).
In this paper, we present a novel method for the
joint composition of a verb with its subject and di-
rect object. The key idea is that compositionality is
modeled as a multi-way interaction between latent
factors, which are automatically constructed from
corpus data. In order to adequately model the multi-
way interaction between a verb and its subject and
objects, a significant part of our method relies on
tensor algebra. Additionally, our method makes use
of a factorization model appropriate for tensors.
The remainder of the paper is structured as follows.
In section 2, we give an overview of previous work
that is relevant to the task of computing composition-
ality within a distributional framework. Section 3
presents a detailed description of our method, in-
cluding an overview of the necessary mathematical
1142
machinery. Section 4 illustrates our method with a
number of detailed examples. Section 5 presents a
quantitative evaluation, and compares our method
to other models of distributional compositionality.
Section 6, then, concludes and lays out a number of
directions for future work.
2 Previous Work
In recent years, a number of methods have been de-
veloped that try to capture compositional phenomena
within a distributional framework. One of the first
approaches to tackle compositional phenomena in a
systematic way is Mitchell and Lapata?s (2008) ap-
proach. They explore a number of different models
for vector composition, of which vector addition (the
sum of each feature) and vector multiplication (the
elementwise multiplication of each feature) are the
most important. They evaluate their models on a
noun-verb phrase similarity task, and find that the
multiplicative model yields the best results, along
with a weighted combination of the additive and mul-
tiplicative model.
Baroni and Zamparelli (2010) present a method
for the composition of adjectives and nouns. In their
model, an adjective is a linear function of one vector
(the noun vector) to another vector (the vector for the
adjective-noun pair). The linear transformation for a
particular adjective is represented by a matrix, and
is learned automatically from a corpus, using partial
least-squares regression.
Coecke et al (2010) present an abstract theoreti-
cal framework in which a sentence vector is a func-
tion of the Kronecker product of its word vectors,
which allows for greater interaction between the dif-
ferent word features. A number of instantiations of
the framework are tested experimentally in Grefen-
stette and Sadrzadeh (2011a) and Grefenstette and
Sadrzadeh (2011b). The key idea is that relational
words (e.g. adjectives or verbs) have a rich (multi-
dimensional) structure that acts as a filter on their
arguments. Our model uses an intuition similar to
theirs.
Socher et al (2012) present a model for composi-
tionality based on recursive neural networks. Each
node in a parse tree is assigned both a vector and
a matrix; the vector captures the actual meaning of
the constituent, while the matrix models the way
it changes the meaning of neighbouring words and
phrases.
Closely related to the work on compositionality
is research on the computation of word meaning in
context. Erk and Pado? (2008, 2009) make use of
selectional preferences to express the meaning of a
word in context; the meaning of a word in the pres-
ence of an argument is computed by multiplying the
word?s vector with a vector that captures the inverse
selectional preferences of the argument. Thater et
al. (2009, 2010) extend the approach based on se-
lectional preferences by incorporating second-order
co-occurrences in their model. And Dinu and La-
pata (2010) propose a probabilistic framework that
models the meaning of words as a probability distri-
bution over latent factors. This allows them to model
contextualized meaning as a change in the original
sense distribution. Dinu and Lapata use non-negative
matrix factorization (NMF) to induce latent factors.
Similar to their work, our model uses NMF ? albeit
in a slightly different configuration ? as a first step
towards our final factorization model.
In general, latent models have proven to be useful
for the modeling of word meaning. One of the best
known latent models of semantics is Latent Seman-
tic Analysis (Landauer and Dumais, 1997), which
uses singular value decomposition in order to auto-
matically induce latent factors from term-document
matrices. Another well known latent model of mean-
ing, which takes a generative approach, is Latent
Dirichlet Allocation (Blei et al, 2003).
Tensor factorization has been used before for the
modeling of natural language. Giesbrecht (2010)
describes a tensor factorization model for the con-
struction of a distributional model that is sensitive to
word order. And Van de Cruys (2010) uses a tensor
factorization model in order to construct a three-way
selectional preference model of verbs, subjects, and
objects. Our underlying tensor factorization ? Tucker
decomposition ? is the same as Giesbrecht?s; and
similar to Van de Cruys (2010), we construct a la-
tent model of verb, subject, and object interactions.
The way our model is constructed, however, is sig-
nificantly different. The former research does not
use any syntactic information for the construction
of the tensor, while the latter makes use of a more
restricted tensor factorization model, viz. parallel
factor analysis (Harshman and Lundy, 1994).
1143
The idea of modeling compositionality by means
of tensor (Kronecker) product has been proposed
in the literature before (Clark and Pulman, 2007;
Coecke et al, 2010). However, the method presented
here is the first that tries to capture compositional
phenomena by exploiting the multi-way interactions
between latent factors, induced by a suitable tensor
factorization model.
3 Methodology
3.1 Mathematical preliminaries
The methodology presented in this paper requires
a number of concepts and mathematical operations
from tensor algebra, which are briefly reviewed in
this section. The interested reader is referred to Kolda
and Bader (2009) for a more thorough introduction
to tensor algebra (including an overview of various
factorization methods).
A tensor is a multidimensional array; it is the gen-
eralization of a matrix to more than two dimensions,
or modes. Whereas matrices are only able to cap-
ture two-way co-occurrences, tensors are able to cap-
ture multi-way co-occurrences.1 Following prevail-
ing convention, tensors are represented by boldface
Euler script notation (X), matrices by boldface capi-
tal letters (X), vectors by boldface lower case letters
(x), and scalars by italic letters (x).
The n-mode product of a tensor X ? RI1?I2?...?IN
with a matrix U ? RJ?In is denoted by X?n U, and
is defined elementwise as
(X?n U)i1...in?1 jin+1...iN =
In
?
in=1
xi1i2...iN u jin (1)
The Kronecker product of matrices A ? RI?J and
B?RK?L is denoted by A?B. The result is a matrix
of size (IK)? (JL), and is defined by
A?B =
?
?
?
?
?
a11B a12B ? ? ? a1JB
a21B a22B ? ? ? a2JB
...
...
. . .
...
aI1B aI2B . . . aIJB
?
?
?
?
?
(2)
1In this research, we limit ourselves to three-way co-
occurrences of verbs, subject, and objects, modelled using a
three-mode tensor.
A special case of the Kronecker product is the
outer product of two vectors a ? RI and b ? RJ , de-
noted a?b. The result is a matrix A ? RI?J obtained
by multiplying each element of a with each element
of b.
Finally, the Hadamard product, denoted A ?B,
is the elementwise multiplication of two matrices
A ? RI?J and B ? RI?J , which produces a matrix
that is equally of size I? J.
3.2 The construction of latent noun factors
The first step of our method consists in the construc-
tion of a latent factor model for nouns, based on their
context words. For this purpose, we make use of non-
negative matrix factorization (Lee and Seung, 2000).
Non-negative matrix factorization (NMF) minimizes
an objective function ? in our case the Kullback-
Leibler (KL) divergence ? between an original matrix
VI?J and WI?KHK?J (the matrix multiplication of
matrices W and H) subject to the constraint that all
values in the three matrices be non-negative. Param-
eter K is set  I,J so that a reduction is obtained
over the original data. The factorization model is
represented graphically in figure 1.
= xV W H
k
k
noun
s
context words
noun
s
context words
Figure 1: Graphical representation of NMF
NMF can be computed fairly straightforwardly,
alternating between the two iterative update rules
represented in equations 3 and 4. The update rules
are guaranteed to converge to a local minimum in the
KL divergence.
Ha? ?Ha?
?i Wia
Vi?
(WH)i?
?k Wka
(3)
Wia?Wia
?? Ha?
Vi?
(WH)i?
?v Hav
(4)
3.3 Modeling multi-way interactions
In our second step, we construct a multi-way interac-
tion model for subject verb object (svo) triples, based
1144
on the latent factors induced in the first step. Our
latent interaction model is inspired by a tensor factor-
ization model called Tucker decomposition (Tucker,
1966), although our own model instantiation differs
significantly. In order to explain our method, we
first revisit Tucker decomposition, and subsequently
explain how our model is constructed.
3.3.1 Tucker decomposition
Tucker decomposition is a multilinear generaliza-
tion of the well-known singular value decomposition,
used in Latent Semantic Analysis. It is also known as
higher order singular value decomposition (HOSVD,
De Lathauwer et al (2000)). In Tucker decomposi-
tion, a tensor is decomposed into a core tensor, multi-
plied by a matrix along each mode. For a three-mode
tensor X ? RI?J?L, the model is defined as
X = G?1 A?2 B?3 C (5)
=
P
?
p=1
Q
?
q=1
R
?
r=1
gpqrap ?bq ? cr (6)
Setting P,Q,R I,J,L, the core tensor G repre-
sents a compressed, latent version of the original ten-
sor X; matrices A ?RI?P, B ?RJ?Q, and C ?RL?R
represent the latent factors for each mode, while
G ? RP?Q?R indicates the level of interaction be-
tween the different latent factors. Figure 2 shows a
graphical representation of Tucker decomposition.2
subjects
verb
s
object
s
=
object
s
k
k
k
verb
s
subjects
k
k
k
Figure 2: A graphical representation of Tucker decompo-
sition
2where P = Q = R = K, i.e. the same number of latent factors
K is used for each mode
3.3.2 Reconstructing a Tucker model from
two-way factors
Computing the Tucker decomposition of a tensor
is rather costly in terms of time and memory require-
ments. Moreover, the decomposition is not unique:
the core tensor G can be modified without affecting
the model?s fit by applying the inverse modification
to the factor matrices. These two drawbacks led us
to consider an alternative method for the construc-
tion of the Tucker model. Specifically, we consider
the factor matrices as given (as the output from our
first step), and proceed to compute the core tensor G.
Additionally, we do not use a latent representation
for the first mode, which means that the first mode is
represented by its original instances.
Our model can be straightforwardly applied to lan-
guage data. The core tensor G models the latent
interactions between verbs, subject, and objects. G
is computed by applying the n-mode product to the
appropriate mode of the original tensor (equation 7),
G=X?2 WT ?3 WT (7)
where XV?N?N is our original data tensor, consisting
of the weighted co-occurrence frequencies of svo
triples (extracted from corpus data), and WN?K is
our latent factor matrix for nouns. Note that we do
not use a latent representation for the verb mode. To
be able to efficiently compute the similarity of verbs
(both within and outside of compositional phrases),
only the subject and object mode are represented by
latent factors, while the verb mode is represented
by its original instances. This means that our core
tensor G will be of size V ?K?K.3 A graphical
representation is given in figure 3.
Note that both tensor X and factor matrices W are
non-negative, which means our core tensor G will
also be non-negative.
3.4 The composition of svo triples
In order to compute the composition of a particular
subject verb object triple ?s,v,o?, we first extract the
appropriate subject vector ws and object vector wo
(both of length K) from our factor matrix W, and
3It is straightforward to also construct a latent factor model
for verbs using NMF, and include it in the construction of our
core tensor; we believe such a model might have interesting
applications, but we save this as an exploration for future work.
1145
subjects
verb
s
object
s
=
object
s
k
k
verb
s
subjectskk
Figure 3: A graphical representation of our model instan-
tiation without the latent verb mode
compute the outer product of both vectors, resulting
in a matrix Y of size K?K.
Y = ws ?wo (8)
Our second and final step is then to weight the
original verb matrix Gv of latent interactions (the
appropriate verb slice of tensor G) with matrix Y,
containing the latent interactions of the specific sub-
ject and object. This is carried out by taking the
Hadamard product of Gv and Y.
Z = Gv ?Y (9)
4 Example
In this section, we present a number of example com-
putations that clarify how our model is able to capture
compositionality. All examples come from actual cor-
pus data, and are computed in a fully automatic and
unsupervised way.
Consider the following two sentences:
(1) The athlete runs a race.
(2) The user runs a command.
Both sentences contain the verb run, but they rep-
resent clearly different actions. When we compute
the composition of both instances of run with their
respective subject and object, we want our model to
show this difference.
To compute the compositional representation of
sentences (1) and (2), we proceed as follows. First,
we extract the latent vectors for subject and object
(wathlete and wrace for the first sentence, wuser and
wcommand for the second sentence) from matrix W.
Next, we compute the outer product of subject and
object ? wathlete ?wrace and wuser ?wcommand ? which
yields matrices Y?athlete,race? and Y?user,command?. By
virtue of the outer product, the matrices Y ? of size
K?K ? represent the level of interaction between the
latent factors of the subject and the latent factors of
the object. We can inspect these interactions by look-
ing up the factor pairs (i.e. matrix cells) with the high-
est values in the matrices Y. Table 1 presents the fac-
tor pairs with highest value for matrix Y?athlete,race?;
table 2 represents the factor pairs with highest value
for matrix Y?user,command?. In order to render the fac-
tors interpretable, we include the three most salient
words for the various factors (i.e. the words with the
highest value for a particular factor).
The examples in tables 1 and 2 give an impression
of the effect of the outer product: semantic features
of the subject combine with semantic features of the
object, indicating the extent to which these features
interact within the expression. In table 1, we notice
that animacy features (28, 195) and a sport feature
(25) combine with a ?sport event? feature (119). In
table 2, we see that similar animacy features (40,
195) and technological features (7, 45) combine with
another technological feature (89).
Similarly, we can inspect the latent interactions of
the verb run, which are represented in the tensor slice
Grun. Note that this matrix contains the verb seman-
tics computed over the complete corpus. The most
salient factor interactions for Grun are represented in
table 3.
Table 3 illustrates that different senses of the verb
run are represented within the matrix Grun. The first
two factor pairs hint at the ?organize? sense of the
verb (run a seminar). The third factor pair repre-
sents the ?transport? sense of the verb (the bus runs
every hour).4 And the fourth factor pair represents
the ?execute? or ?deploy? sense of run (run Linux,
run a computer program). Note that we only show
the factor pairs with the highest value; matrix G con-
tains a value for each pairwise combination of the
latent factors, effectively representing a rich latent
semantics for the verb in question.
The last step is to take the Hadamard product of
matrices Y with verb matrix G, which yields our final
4Obviously, hour is not an object of the verb, but due to
parsing errors it is thus represented.
1146
factors subject object value
?195,119? people (.008), child (.008), adolescent (.007) cup (.007), championship (.006), final (.005) .007
?25,119? hockey (.007), poker (.007), tennis (.006) cup (.007), championship (.006), final (.005) .004
?90,119? professionalism (.007), teamwork (.007), confi-
dence (.006)
cup (.007), championship (.006), final (.005) .003
?28,119? they (.004), pupil (.003), participant (.003) cup (.007), championship (.006), final (.005) .003
Table 1: Factor pairs with highest value for matrix Y?athlete,race?
factors subject object value
?7,89? password (.009), login (.007), username (.007) filename (.007), null (.006), integer (.006) .010
?40,89? anyone (.004), reader (.004), anybody (.003) filename (.007), null (.006), integer (.006) .007
?195,89? people (.008), child (.008), adolescent (.007) filename (.007), null (.006), integer (.006) .006
?45,89? website (.004), Click (.003), site (.003) filename (.007), null (.006), integer (.006) .006
Table 2: Factor pairs with highest value for matrix Y?user,command?
matrices, Zrun,?athlete,race? and Zrun,?user,command?. The
Hadamard product will act as a bidirectional filter
on the semantics of both the verb and its subject
and object: interactions of semantic features that are
present in both matrix Y and G will be highlighted,
while the other interactions are played down. The
result is a representation of the verb?s semantics tuned
to its particular subject-object combination. Note that
this final step can be viewed as an instance of function
application (Baroni and Zamparelli, 2010). Also
note the similarity to Grefenstette and Sadrzadeh?s
(2011a,2011b) approach, who equally make use of
the elementwise matrix product in order to weight
the semantics of the verb.
We can now go back to our original tensor G, and
compute the most similar verbs (i.e. the most similar
tensor slices) for our newly computed matrices Z.5
If we do this for matrix Zrun,?athlete,race?, our model
comes up with verbs finish (.29), attend (.27), and
win (.25). If, instead, we compute the most similar
verbs for Zrun,?user,command?, our model yields execute
(.42), modify (.40), invoke (.39).
Finally, note that the design of our model natu-
rally takes into account word order. Consider the
following two sentences:
(3) man damages car
(4) car damages man
5Similarity is calculated by measuring the cosine of the vec-
torized and normalized representation of the verb matrices.
Both sentences contain the exact same words, but the
process of damaging described in sentences (3) and
(4) is of a rather different nature. Our model is able
to take this difference into account: if we compute
Zdamage,?man,car? following sentence (3), our model
yields crash (.43), drive (.35), ride (.35) as most sim-
ilar verbs. If we do the same for Zdamage,?car,man? fol-
lowing sentence (4), our model instead yields scare
(.26), kill (.23), hurt (.23).
5 Evaluation
5.1 Methodology
In order to evaluate the performance of our tensor-
based factorization model of compositionality, we
make use of the sentence similarity task for transi-
tive sentences, defined in Grefenstette and Sadrzadeh
(2011a). This is an extension of the similarity task
for compositional models developed by Mitchell and
Lapata (2008), and constructed according to the same
guidelines. The dataset contains 2500 similarity
judgements, provided by 25 participants, and is pub-
licly available.6
The data consists of transitive verbs, each paired
with both a subject and an object noun ? thus form-
ing a small transitive sentence. Additionally, a ?land-
mark? verb is provided. The idea is to compose both
the target verb and the landmark verb with subject
and noun, in order to form two small compositional
6http://www.cs.ox.ac.uk/activities/
CompDistMeaning/GS2011data.txt
1147
factors subject object value
?128,181? Mathematics (.004), Science (.004), Economics
(.004)
course (.005), tutorial (.005), seminar (.005) .058
?293,181? organization (.007), association (.007), federa-
tion (.006)
course (.005), tutorial (.005), seminar (.005) .053
?60,140? rail (.011), bus (.009), ferry (.008) third (.004), decade (.004), hour (.004) .038
?268,268? API (.008), Apache (.007), Unix (.007) API (.008), Apache (.007), Unix (.007) .038
Table 3: Factor combinations for Grun
phrases. The system is then required to come up with
a suitable similarity score for these phrases. The cor-
relation of the model?s judgements with human judge-
ments (scored 1?7) is then calculated using Spear-
man?s ? . Two examples of the task are provided in
table 4.
p target subject object landmark sim
19 meet system criterion visit 1
21 write student name spell 6
Table 4: Two example judgements from the phrase simi-
larity task defined by Grefenstette and Sadrzadeh (2011a)
Grefenstette and Sadrzadeh (2011a) seem to cal-
culate the similarity score contextualizing both the
target verb and the landmark verb. Another possibil-
ity is to contextualize only the target verb, and com-
pute the similarity score with the non-contextualized
landmark verb. In our view, the latter option pro-
vides a better assessment of the model?s similar-
ity judgements, since contextualizing low-similarity
landmarks often yields non-sensical phrases (e.g. sys-
tem visits criterion). We provide scores for both
contextualized and non-contextualized landmarks.
We compare our results to a number of different
models. The first is Mitchell and Lapata?s (2008)
model, which computes the elementwise vector mul-
tiplication of verb, subject and object. The second
is Grefenstette and Sadrzadeh?s (2011b) best scoring
model instantiation of the categorical distributional
compositional model (Coecke et al, 2010). This
model computes the outer product of the subject and
object vector, the outer product of the verb vector
with itself, and finally the elementwise product of
both results. It yields the best score on the transitive
sentence similarity task reported to date.
As a baseline, we compute the non-contextualized
similarity score for target verb and landmark. The up-
per bound is provided by Grefenstette and Sadrzadeh
(2011a), based on interannotator agreement.
5.2 Implementational details
All models have been constructed using the UKWAC
corpus (Baroni et al, 2009), a 2 billion word corpus
automatically harvested from the web. From this data,
we accumulate the input matrix V for our first NMF
step. We use the 10K most frequent nouns, cross-
classified by the 2K most frequent context words.7
Matrix V is weighted using pointwise mutual infor-
mation (PMI, Church and Hanks (1990)).
A parsed version of the corpus is available, which
has been parsed with MaltParser (Nivre et al, 2006).
We use this version in order to extract our svo triples.
From these triples, we construct our tensor X, using
1K verbs ? 10K subjects ? 10K objects. Note once
again that the subject and object instances in the sec-
ond step are exactly the same as the noun instances
in the first step. Tensor X has been weighted using a
three-way extension of PMI, following equation 10
(Van de Cruys, 2011).
pmi3(x,y,z) = log
p(x,y,z)
p(x)p(y)p(z)
(10)
We set K = 300 as our number of latent factors.
The value was chosen as a trade-off between a model
that is both rich enough, and does not require an
excessive amount of memory (for the modeling of
the core tensor). The algorithm runs fairly effi-
ciently. Each NMF step is computed in a matter of
seconds, with convergence after 50?100 iterations.
The construction of the core tensor is somewhat more
7We use a context window of 5 words, both before and after
the target word; a stop list was used to filter out grammatical
function words.
1148
evolved, but does not exceed a wall time of 30 min-
utes. Results have been computed on a machine with
Intel Xeon 2.93Ghz CPU and 32GB of RAM.
5.3 Results
The results of the various models are presented in ta-
ble 5; multiplicative represents Mitchell and Lapata?s
(2008) multiplicative model, categorical represents
Grefenstette and Sadrzadeh?s (2011b) model, and
latent represents the model presented in this paper.
model contextualized non-contextualized
baseline .23
multiplicative .32 .34
categorical .32 .35
latent .32 .37
upper bound .62
Table 5: Results of the different compositionality models
on the phrase similarity task
In the contextualized version of the similarity task
(in which the landmark is combined with subject
and object), all three models obtain the same result
(.32). However, in the non-contextualized version
(in which only the target verb is combined with sub-
ject and object), the models differ in performance.
These differences are statistically significant.8 As
mentioned before, we believe the non-contextualized
version of the task gives a better impression of the
systems? ability to capture compositionality. The
contextualization of the landmark verb often yields
non-sensical combinations, such as system visits crite-
rion. We therefore deem it preferable to compute the
similarity of the target verb in composition (system
meets criterion) to the non-contextualized semantics
of the landmark verb (visit).
Note that the scores presented in this evalua-
tion (including the baseline score) are significantly
higher than the scores presented in Grefenstette and
Sadrzadeh (2011b). This is not surprising, since the
corpus we use ? UKWAC ? is an order of magni-
tude larger than the corpus used in their research ?
the British National Corpus (BNC). Presumably, the
scores are also favoured by our weighting measure.
8 p < 0.01; model differences have been tested using stratified
shuffling (Yeh, 2000).
In our experience, PMI performs better than weight-
ing with conditional probabilities.9
6 Conclusion
In this paper, we presented a novel method for the
computation of compositionality within a distribu-
tional framework. The key idea is that composition-
ality is modeled as a multi-way interaction between
latent factors, which are automatically constructed
from corpus data. We used our method to model
the composition of subject verb object combinations.
The method consists of two steps. First, we com-
pute a latent factor model for nouns from standard
co-occurrence data. Next, the latent factors are used
to induce a latent model of three-way subject verb
object interactions, represented by a core tensor. Our
model has been evaluated on a similarity task for tran-
sitive phrases, in which it matches and even exceeds
the state of the art.
We conclude with a number of future work issues.
First of all, we would like to extend our framework in
order to incorporate more compositional phenomena.
Our current model is designed to deal with the latent
modeling of subject verb object combinations. We
would like to investigate how other compositional
phenomena might fit within our latent interaction
framework, and how our model is able to tackle the
computation of compositionality across a differing
number of modes.
Secondly, we would like to further explore the
possibilities of our model in which all three modes
are represented by latent factors. The instantiation
of our model presented in this paper has two latent
modes, using the original instances of the verb mode
in order to efficiently compute verb similarity. We
think a full-blown latent interaction model might
prove to have interesting applications in a number of
NLP tasks, such as the paraphrasing of compositional
expressions.
Finally, we would like to test our method using a
number of different evaluation frameworks. We think
tasks of similarity judgement have their merits, but in
a way are also somewhat limited. In our opinion, re-
search on the modeling of compositional phenomena
within a distributional framework would substantially
9Contrary to the findings of Mitchell and Lapata (2008), who
report a high correlation with human similarity judgements.
1149
benefit from new evaluation frameworks. In particu-
lar, we think of a lexical substitution or paraphrasing
task along the lines of McCarthy and Navigli (2009),
but specifically aimed at the assessment of composi-
tional phenomena.
Acknowledgements
Tim Van de Cruys and Thierry Poibeau are supported
by the Centre National de la Recherche Scientifique
(CNRS, France), Anna Korhonen is supported by the
Royal Society (UK).
References
Brett W. Bader, Tamara G. Kolda, et al 2012. Matlab ten-
sor toolbox version 2.5. http://www.sandia.gov/
~tgkolda/TensorToolbox/.
Marco Baroni and Roberto Zamparelli. 2010. Nouns are
vectors, adjectives are matrices: Representing adjective-
noun constructions in semantic space. In Proceedings
of the 2010 Conference on Empirical Methods in Nat-
ural Language Processing, pages 1183?1193, Cam-
bridge, MA, October. Association for Computational
Linguistics.
Marco Baroni, Silvia Bernardini, Adriano Ferraresi, and
Eros Zanchetta. 2009. The wacky wide web: A
collection of very large linguistically processed web-
crawled corpora. Language Resources and Evaluation,
43(3):209?226.
William Blacoe and Mirella Lapata. 2012. A comparison
of vector-based representations for semantic compo-
sition. In Proceedings of the 2012 Joint Conference
on Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning,
pages 546?556, Jeju Island, Korea, July. Association
for Computational Linguistics.
David M. Blei, Andrew Y. Ng, and Michael I. Jordan.
2003. Latent dirichlet alocation. The Journal of Ma-
chine Learning Research, 3:993?1022.
Kenneth W. Church and Patrick Hanks. 1990. Word
association norms, mutual information & lexicography.
Computational Linguistics, 16(1):22?29.
Stephen Clark and Stephen Pulman. 2007. Combining
symbolic and distributional models of meaning. In Pro-
ceedings of the AAAI Spring Symposium on Quantum
Interaction, pages 52?55.
Bob Coecke, Mehrnoosh Sadrzadeh, and Stephen Clark.
2010. Mathematical foundations for a compositional
distributed model of meaning. Lambek Festschrift, Lin-
guistic Analysis, vol. 36, 36.
Lieven De Lathauwer, Bart De Moor, and Joseph Vande-
walle. 2000. A multilinear singular value decomposi-
tion. SIAM Journal on Matrix Analysis and Applica-
tions, 21(4):1253?1278.
Georgiana Dinu and Mirella Lapata. 2010. Measuring
distributional similarity in context. In Proceedings of
the 2010 Conference on Empirical Methods in Natural
Language Processing, pages 1162?1172, Cambridge,
MA, October.
Katrin Erk and Sebastian Pado?. 2008. A structured vector
space model for word meaning in context. In Pro-
ceedings of the Conference on Empirical Methods in
Natural Language Processing, pages 897?906, Waikiki,
Hawaii, USA.
Katrin Erk and Sebastian Pado?. 2009. Paraphrase assess-
ment in structured vector space: Exploring parameters
and datasets. In Proceedings of the Workshop on Geo-
metrical Models of Natural Language Semantics, pages
57?65, Athens, Greece.
Gottlob Frege. 1892. U?ber Sinn und Bedeutung.
Zeitschrift fu?r Philosophie und philosophische Kritik,
100:25?50.
Eugenie Giesbrecht. 2010. Towards a matrix-based dis-
tributional model of meaning. In Proceedings of the
NAACL HLT 2010 Student Research Workshop, pages
23?28. Association for Computational Linguistics.
Edward Grefenstette and Mehrnoosh Sadrzadeh. 2011a.
Experimental support for a categorical compositional
distributional model of meaning. In Proceedings of
the 2011 Conference on Empirical Methods in Natural
Language Processing, pages 1394?1404, Edinburgh,
Scotland, UK., July. Association for Computational
Linguistics.
Edward Grefenstette and Mehrnoosh Sadrzadeh. 2011b.
Experimenting with transitive verbs in a discocat. In
Proceedings of the GEMS 2011 Workshop on GEomet-
rical Models of Natural Language Semantics, pages
62?66, Edinburgh, UK, July. Association for Computa-
tional Linguistics.
Zellig S. Harris. 1954. Distributional structure. Word,
10(23):146?162.
Richard A Harshman and Margaret E Lundy. 1994.
Parafac: Parallel factor analysis. Computational Statis-
tics & Data Analysis, 18(1):39?72.
Tamara G. Kolda and Brett W. Bader. 2009. Ten-
sor decompositions and applications. SIAM Review,
51(3):455?500, September.
Tamara G. Kolda and Jimeng Sun. 2008. Scalable tensor
decompositions for multi-aspect data mining. In ICDM
2008: Proceedings of the 8th IEEE International Con-
ference on Data Mining, pages 363?372, December.
Thomas Landauer and Susan Dumais. 1997. A solution
to Plato?s problem: The Latent Semantic Analysis the-
1150
ory of the acquisition, induction, and representation of
knowledge. Psychology Review, 104:211?240.
Daniel D. Lee and H. Sebastian Seung. 2000. Algorithms
for non-negative matrix factorization. In Advances in
Neural Information Processing Systems 13, pages 556?
562.
Diana McCarthy and Roberto Navigli. 2009. The En-
glish lexical substitution task. Language resources and
evaluation, 43(2):139?159.
Jeff Mitchell and Mirella Lapata. 2008. Vector-based
models of semantic composition. proceedings of ACL-
08: HLT, pages 236?244.
Joakim Nivre, Johan Hall, and Jens Nilsson. 2006. Malt-
parser: A data-driven parser-generator for dependency
parsing. In Proceedings of LREC-2006, pages 2216?
2219.
Richard Socher, Brody Huval, Christopher D. Manning,
and Andrew Y. Ng. 2012. Semantic compositionality
through recursive matrix-vector spaces. In Proceedings
of the 2012 Joint Conference on Empirical Methods in
Natural Language Processing and Computational Nat-
ural Language Learning, pages 1201?1211, Jeju Island,
Korea, July. Association for Computational Linguistics.
Stefan Thater, Georgiana Dinu, and Manfred Pinkal. 2009.
Ranking paraphrases in context. In Proceedings of the
2009 Workshop on Applied Textual Inference, pages
44?47, Suntec, Singapore.
Stefan Thater, Hagen Fu?rstenau, and Manfred Pinkal.
2010. Contextualizing semantic representations using
syntactically enriched vector models. In Proceedings of
the 48th Annual Meeting of the Association for Compu-
tational Linguistics, pages 948?957, Uppsala, Sweden.
Ledyard R. Tucker. 1966. Some mathematical notes on
three-mode factor analysis. Psychometrika, 31(3):279?
311.
Tim Van de Cruys. 2010. A non-negative tensor fac-
torization model for selectional preference induction.
Natural Language Engineering, 16(4):417?437.
Tim Van de Cruys. 2011. Two multivariate generaliza-
tions of pointwise mutual information. In Proceedings
of the Workshop on Distributional Semantics and Com-
positionality, pages 16?20, Portland, Oregon, USA,
June. Association for Computational Linguistics.
Alexander Yeh. 2000. More accurate tests for the statis-
tical significance of result differences. In Proceedings
of the 18th conference on Computational linguistics,
pages 947?953, Saarbru?cken, Germany.
1151
