I~ IGAT ION OF PROCESSING STRATEGIES FOR 
THE STRUCTURAL ANALYSIS OF ARGOMF/Trs 
Robin Cohen 
Department of Computer Science 
University of Toronto 
Toronto, Canada M5S IA7 
2. THE UNDERSTANDING PROCESS 
This paper outlines research on processing strategies 
being developed for a language understanding systerN, 
designed to interpret the structure of arguments. For 
the system, arguments are viewed as trees, with claims 
as fathers to their evidence. Then understanding 
becomes a problem of developing a representative 
argtmlent tree, by locating each proposition of the 
argument at its appropriate place. The processing 
strategies we develop for the hearer are based on 
expectations that the speaker will use particular 
coherent transmission strategies and are designed to 
be fairly efficient (work in linear time). We also 
comment on the use by the speaker of linguistic clues 
to indicate structure, illustrating how the hearer can 
interpret the clues to limit his processing search and 
thus improve the co~lexity of the understanding 
process. 
2.1 PROCI.~ING S'I~AT~GIES 
To prOcess an argument, each proposition is analyzed 
in turn. It is convenient to think of the 
representation for an argument as a tree with claims 
as fathers to their evidence. The speaker thus has a 
particular tree structure for the argument which he 
tranm~its in some order. The hearer must take the 
incoming stream of propositions and re-construct the 
logical structure tree. Although the speaker has 
available a wide variety of possible transmission 
algorithms, we claim that only a small n,~ber of these 
will be used. We look for tranm~ission algorithms 
that have associated reception algorithms such that 
both S and H can process in a reasonable amount of 
time. Consider the following strategies= 
i. BACKC4~DUND 
This paper focuses on one aspect of an argument 
understanding system currently being designed. An 
overview of the initial design for the system can be 
found in \[Cohen 88\]. In general, we are examining 
one-sided arguments, where the speaker (S) tries to 
convince the hearer (H) of a particular point of view. 
We then concentrate on the analysis problem of 
determining the overall structure of the argtm~nt. 
Considering an argument as a series of propositions, 
the structure is indicated by isolating those 
propositions which serve as CLAIMS and those which 
serve as EVIDENCE for a particular claim, and by 
indicating how each piece of evidence sup~orta its 
associated claim. A proposition E is established as 
evidence for a proposition C if they fit appropriate 
slots in one of the system frames representing various 
logical rules of inference, such that E is a premise 
to C's conclusion. For example, E will be evidence 
for C according to modus ponens if E-->C is true.. 
Establishing evidence is a complex process, involving 
filling in missing premises and recognizing the 
logical connection between propositions. In any case, 
our research does focus on reconstructing this logical 
form of the argument, aside from judgments of 
credibility. 
The initial design \[Cohen 8g\] adopts an 
unsophisticated processing strategy: each proposition 
is analyzed, in turn, and each is tested out as 
possible evidence for every other proposition in the 
argument. The current design seeks to imprOve that 
basic strate< ! to a selective process where the 
analysis for a given proposition is performed with 
respect to the interpretation for the overall argument 
so far. So, only particular propositions are judged 
eligible to affect the interpretation of the 
proposition currently being analyzed. Currently, we 
assume an "evidence oracle" which, given two 
propositions, will decide (yes or no) whether one is 
evidence for the other. With this "accepted" 
authority, a representation for the argument can be 
built as the analysis proceeds. (The design of the 
oracle is another research area altogether, not 
discussed in this paper). 
a) 9RE-ORDER 
The most straightforward transmission for an argL~nent 
is to present a claim, followed by its evidence, where 
any particular piece of evidence may, in turn, have 
evidence for it, following it. A sample tree (numbers 
indicate order of propositions in the transmitted 
stream) is: 
4 6/5~/ 
In this kind of argtmlent, every claim precedes its 
evidence. Thus, w~en the hearer tries to find an 
interpretation for a current proposition, he must only 
search prior propositions for a father. The reception 
algorithm we propose for H is as follows: to 
interpret the current proposition, NE~, consider the 
proposition immediately prior to it (call it L for 
last). I) Try out NEW as evidence for L . 2) If that 
fails, try NER as evidence for each of L's ancestors, 
in turn, up to the root of the tree. (NEW's father 
must exist somewhere on this "right border" of the 
tree). When the location for NEW is found, a node for 
it is added to the tree, at the appropriate place. 
b) 9OST-ORDKR 
Here, each claim is preceded by its evidence. This 
is a little more complex for the hearer because he may 
accept a whole stream of propositions without knowing 
how they relate to each other until the father for all 
of them is found. Exa~le: 
. 9,-~ 
The reception for H must now make use of the tree for 
the argument built so far and must keep track of 
propositions whose interpretation is not yet known, 
9ending the appearance of their father. The formal 
reception algorithm will thus make use of a stack. 
Consider L to be the top of the stack. To interpret 
the current proposition NEW do the following- I) See 
71 
if NEW ~ets evidence from L (i.e. is claim for L). 
2al If L is evidence, keep popping off elements of the 
stack that are also sons and push the resulting tree 
onto the stack. 2b) Otherwise, push ~ onto the 
stack. In short, search for sons: when one son is 
found, all of them can be picked up. Then the father 
must stack up to De evidence for same future 
proposition. 
c) HYBRID 
Pre-order and post-order are two consistent 
strategies which the hearer can recognize if he 
expects the argument to conform to one or the other 
transmission rules, throughout. But an argument 
essentially consists of a series of sub-arguments 
(i.e. a claim plus its evidence). And the Speaker 
may thus decide to transmit some of these 
sum-arguments in pre-order, and others in post-order, 
yielding an overall h~r id  argument. Therefore, the 
hearer must develop a more general processing 
strategy, to recognize hybrid transmission. The 
reception algorithm now is a c~mDination of techniques 
from a) and b) .  
Exam-ple: ,~... 
23  ,6~ (EX 3) 
45  
But there are additional complications to processing 
in this model - for example, transitive evidence 
relations. In KX 3, 4 and 5 are evidence for 1 (since 
4 and 5 are evidence for 6 and 6 is evidence for i), 
so they will De attached to I initially. Then, to 
process 6, H must attach it to i and pick up 4 and 5 
as sons. So, the hybrid algorithm involves recovering 
descendants that may alreaay De linked in the tree. 
Here is a more detailed description of the algorithm: 
We maintain a dummy node at the top of the tree, for 
which all nodes are evidence. Consider L to De a 
pointer into the tree, representing the lowest 
possible node that can receive more evidence 
(initially set to dummy). For every node NEN on the 
input stream do the following: 
forever do 
(B0:) if NEW evidence for L then 
(Sl:) if no sons of L are evidence for NEW then 
/* just test lastson for evidence */ 
(BII:) attach NEW below L 
(Bl2:) set L to NEW 
exit forever loop 
(B2:) else 
(B21:) attach all sons of L which are 
evidence for NEW below NE~ 
/* attach lastson; bump ptr. to lastson */ 
/* back I and keep testing for evidence */ 
(B22:) attach NE~ below L 
exit forever loop 
(B3:) else set L to father(L) 
end forever loop 
This hyt)rid model still accounts for only sc~e of 
many possible argtm~ent configurations. But we claim 
that it is a good first approximation to a realistic 
and efficient processing strategy for arguments is 
general. It captures the argument structure a hearer 
may expect from a speaker. Some of the restrictions 
of this model include: (i) importance of the last 
proposition before NEW in the analysis of NEW; (2) 
preference for relations with propositions closer to 
NEW; (3) considering only the last brother in a set 
of evidence when NEW seeks to relate to prior 
propositions. Note then that we do not expect to add 
evidence for a brother or uncle of L - these nodes are 
closed off, as only the last brother of any particular 
level is open for further expansion. To determine the 
appropriateness of this algorithm as a general 
strategy, we are currently investigating the 
i~ l  ications of restricting expected argtnnent 
structures to this class and the complexity in 
co~.re/~ension caused Dy other transmission me,hods. 
Now, the reception algorithms we develop for a), b), 
and c) can all be shown to ~ork in linear time (the 
n~r  of evidence relations to be ~ested will be 
proportional to the numDer of nodes in the tree) \[see 
Appendix\] but not in real time (can have aDritrarily 
long c~ains in any suD-argtmlent). Yet hearers process 
argt~nents well and this, we claim, is because the 
speaker helps out, providing special clues to the 
structure. 
2.2 LINGUISTIC CLUES 
Special words and phrases are often used Dy the 
speaker to suggest the structure of the argument. One 
main use of clues is to re-direct the hearer to a 
particular proposition. Phrases like "Let us now 
return to..." followed Dy a specific indication of a 
prior topic are often used in this respect. In EX l, 
if 8 is preceded Dy a clus suggesting its link to i, 
then the hearer is spared the long chain of trying 8 
as evidence for 7, 5 and 3. So, linear time 
algorithms can become real time with the aid of clues. 
But clues of re-direction may also occur to maintain 
poorly structured arguments - i.e. the speaker can 
re-direct the hearer to parts of the argument that 
were "closed off" in his processing. In certain 
cases, expectations are then set up to address 
intermediary propositions. We are developing a 
detailed theory of how to process subsequent to 
re-direction. 
Another use of clues is to indicate boundaries. In 
EX 3, if a phrase like "We now consider another set of 
evidence for (i)...= preceded 4, it would be easier 
for H to retrieve 4 and 5 as sons to 6 (without 
checking 3 as well). 
Explicit ~rases  a~out relations between propositions 
are only one type of clue. There are, in ~ i t ion ,  
Special words and phrases with a function of 
connectir~ a proposition to some preceding statement. 
These clues aid in the processing of an arg~uent by 
restricting the possible interpretation of the 
proposition containing the clue, and hence 
facilitating the analysis for that proposition. As 
outlined in section 2.1, the analysis of a proposition 
involves a constrained search through the list of 
prior propositions. With these clues, the search is 
(i) guaranteed to find ~ prior proposition wtlic~ 
relates to the one with the clue (2) restricted even 
further due to the semantics of the clue as to the 
desired relation between the prior and current 
proposition (e.g. MUSt be son, etc.). We develop a 
taxonomy of connectives ~ised on the "logical 
connectors" listed in (Quirk 721, and assign an 
interpretation rule to each class. 
Notation: in the following discussion S represents 
the proposition with the connective clue, and P 
represents the prior proposition ~nich "connects" to 
$. 
72 
Smeary: 
CATSGORY RELATICN:P to S EXAMPLE 
parallel brother  "Secondly" 
inference son "As a result" 
detail father "In particular" 
summary multiple sons "In conclusion" 
reformulation son A~D father "In other words" 
contrast Son OR brother "on the other hand" 
Remark: The examples in the following discussion are 
intended to illustrate the processing issues in 
argument analysis. We are examining several real life 
examples from various sources (e.g. rhetoric books, 
letters to the editor, etc.) but these introduce 
issues in the operation of the evidence oracle, and so 
are not shown here. 
i) Parallel: This category includes the most basic 
connectors like "in addition" as well as lists of 
clues (e.g. "First, Secondly, Thirdly,..etc."). P 
must be a brother to S. Since we only have an oracle 
which tests if A is SON of B, finding a brother must 
involve locating the crayon father first. 
EX 4: l)The city is in serious trouble rl\ 
2)There are sc~e dangerous fires going 2 4 
3)Three separate blazes have broken out ~ 3 
4)In addition, a tornado is passing through 
The parallel category has additional rules for 
analysis in cases where lists of clues are present. 
Then, all propositions with clues from the same list 
must relate. But we note that it is not always a 
brother relation between these specific propositions. 
The relation is, in fact, that the brothers are the 
propositions which serve as claims in each 
sub-argtm~ent controlled by a list clue. 
EX 5: l)The city is awful 1 
2)First, no one cleans the parks ~\  
3)So the parks are ugly 3 4 
4)Then, the roads are ugly, too / \ 
5)There's always garbage there 2 5 
Here, 2 and 4 contain the clues, but 3 and 4 are 
brothers. 
2)Inference= Here, P will be son for S. 
EX 6: 2)Peoplel)The firearedeStroyedhomelesshalf the city 12/3 
3)As a result, the streets are crow~ed 1 
Here, the interpretation for 3 only looks to be father 
to2.  
3)Detail: Here, P will be father to S. 
EX 7: l)Sharks are not likeable creatures I~  
2)They are unfriendly to human beings 
3)In particular, they eat people 3 
Here, 3 finds 2 as its father. 
4)Summary: We note that some phrases of summary are 
used in a reformulation sense and would be analyzed 
according to that category's rules. These are cases 
where the summarizing is essentially a repeat of a 
proposition stated earlier. A "summary" suggests that 
a set of sons are to be found. 
F~ 8: l)The benches are broken 4 
2)The trails are choppy / \ [~  
3)The trees are dying 1 2 3 
4) In stY, the park is a mess 
But sometimes, )=he "multiple" sons are not brothers of 
each other. 
EX 9: l)The town is in danger 4 
2)Gangs have taken over the stores I 
3)The police are out on strike / i \  
4)In stm~, we need protection 2 3 
The interpretation rule for summary would follow the 
general reception algorithm to pick up all sons at the 
same level. 
5)Reformulation: When a clue indicates that S is 
essentially "equivalent" to some P, P must satisfy the 
test for both son and father. To represent t/~is 
relation, we may need an extension to our current tree 
model (see Section 3 - Future Work). 
EX 10: l)We need money 
2)In other words, we are broke 
6)Contrast: This category covers a lot of special 
phrases with different uses in arguments, we have yet 
to decide how to optimally record contrastive 
propositions. For now, we'd say that a proposition 
which offers contrast to some evidence for a claim is 
(counter) evidence for that claim, and hence S is son 
of P. And a proposition which contrasts another 
directly, without evidence being presented is a 
(counter) claim, and hence S is a brother to 9. 
EX II: l)The city's a disaster 1 
2)The parks are full of uprooted trees \~  
3)But at least the playgrounds are safe 2 3 
Here, 3 is counter evidence for 1 
EX 12: 1)The city is dangerous ~5~ 
2)The parks have muggings 
3)But the city is free of pollution 4 3 1 
4)And there are great roads / 
5)So, I think the city's great 2 
Here 3 and 1 are brothers 
There are a lot of issues surrounding contrast, some 
of which we mention briefly here to illustrate. One 
question is how to determine which proposition is 
"counter" to the rest of the argument. In EX 12, the 
proposition with the clue was not the contrastive 
statement of the argument. So, it is not 
straightforward to expand our simplified recording of 
contrast statements to add a "counter" label. Another 
feature is the expectations set for the future when 
contrast appears. Sometimes, more evidence is 
expected, to weigh the argument in favour of one 
position over another. If these expectations are 
characterized, future processing may be facilitated. 
This description of connective clues is intended to 
illustrate some of the aids available to the hearer to 
restrict the interpretation of propositions, we are 
still working on complete descriptions for the 
interpretation rules. In addition, we intend each 
class to be distinct, but we are aware that some 
English phrases have more than one meaning and may 
thus be used in more than one of  the taxonomy's 
categories. For these cases, the union of possible 
restrictions may have to be considered. 
2.3 IMPLICATIONS OF THIS ANALYSIS DESIC~ 
Our description of various processing strategies and 
clue interpretations can be construed as a particular 
73 
theory of how to process arguments. The hearer 
expects the speaker to conform to certain tranmnission 
strategies - i.e. does not expect a random stream of 
propositions. But, H may be confronted with 
re-directions in the form of special clues, which he 
interprets as he finds. And he may limit his 
searching and testing by interpreting clues suggesting 
either the kind of relation to search for (evidence 
for, claim for) or the specific propositions to check. 
The theory thus proposes a particular selective 
interpretation process, the techniques are given a 
formal treatment to illustrate their complexity, and 
the special markers confronted in analysis are 
assigned a functional interpretation - to improve the 
ccm~)lexity of the understanding task. A note here on 
the "psychological validity" of our model: we have 
tried to develop processing strategies for arguments 
that are consistent with our intuitions on how a 
hearer would analyze and that  function with a 
realistic complexity. But, we make no c la ims that 
this is the way all humans would process. 
3. ~ CONSIDERATIONS 
One area we have not discussed in this paper is that  
of establishing the evidence relation. For now, the 
problem is isolated into the "evidence oracle = which 
performs the necessary semantic processing. In the 
future, we will give more details on the complexities 
of this module and its interaction with the general 
process ing  strategy described here. 
There are, as well, several i~provements in 
processing techniques to consider. Here are some 
ongoing projects - i) Investigation of other possible 
argument structures . not included here. The most 
obvious case to consider is: a claim, both preceded 
and followed by evidence for it. This is a reasonable 
tran.maission to expect. We are working on extensions 
to the hybrid algorit~ to accept these configurations 
as well. One interesting issue is the necessity fo r  
linguistic clues with argument structures of this type 
- to make sure the hearer can pick up additional 
evidence and recognize where the next suJo-argument 
begins. 
2) Expanding the existing representation model to 
handle other complications in arguments. In 
particular, there a~e several different types of 
multiple roles for a proposition, which ~Jst all be 
handled by the theory. These include: (i) 
Proposition is both claim and evidence. (This is 
already arx:x:uKxlated in our current tree design, where 
a node can have father and sons). (ii) Proposition is 
both claim and evidence for the same proposition - 
i.e. two "equivalent" propositions in the argument. 
(iii) Proposition is claim to several other 
propositions. (Again, currently acceptable as fa ther  
can have any number o f  sons).  ( iv)  P ropos i t ion  (E) i s  
evidence fo r  more than one propos i t ion .  I f  a l l  the 
c la ims form an ancest ra l  chain - fa ther ,  g randfather ,  
g reat -grandfather ,  e tc .  then th i s  i s  jus t  the 
t rans i t i ve  evidence re la t ion  discussed prev ious ly  and 
handled by the current strategy. In other cases, (for 
example, when the -..laims are brothers) the hearer may 
not recognize the multiple cole in all possible 
tranmuissions. For instance, a tranmuission of 
claiml, E, then claim/ seeus comprehensible. But if 
the hearer received them in the order: claiml, 
claim/, then E - would he recover the role of E as 
evidence for claiml? 
3) Trying to characterize the ~,~lexity of various 
argument configurations. Certain combinations of pre 
and poet order seem less taxing to the hearer. We are 
examining the cases where complexity problems arise 
and linguistic clues become more prevalent. 
4. NELATED WORK 
Alt~.,ugh our research area may be considered largely 
unexplored (examining a specific kind of conversation 
(the argument), concentrating on structure, and 
developing formal descriptions of processing), there 
are some relevant references to other work. In \[Ho~os 
8%\] Hotels states that "T~e proOl~m of AI is how to 
control inferencing and oti~er search processes, so 
that the best answer will be found within the resource 
limitations." We share this oommittment to designing 
natural language understanding systams w~ich perform a 
selective analysis of the input. The actual 
restrictions on processing differ in various existing 
syste~ according to the language tasks and the 
underlying representation scheme. 
In \[Grosz 77\] focus spaces are used to search for 
referents to definite noun ~rases (and to solve other 
linguistic problems). These spaces of objects are 
arranged to form a hierarchy with an associated 
visibility lattice, based on the underlying structure 
of the task of the dialogue. O~r tree representation 
is also a-'~erarchical structure and the description 
of propositions eligible to relate to the current one 
may be viewed as a visibility requirement on that 
hierarchy. So, the restrictions to processing in both 
our systems can be described similarly, although the 
details of the design differ to accommodate our 
different research areas. 
In So.bank's work on  story understar~ing (e.g. 
\[Schank 75\]) snerentyped scripts are used to limit 
processing. Here, a given proposition is analyzed by 
tryir~ to fit with expectations for content generated 
by slota of the script not yet filled. With 
arguments, we cannot predict future content, so we 
design expectations that future propositions will have 
a particular structure with respect to the text so 
far. These are in fact expectations for coi~erent 
transmission. Schan~'s expectations for coherence, on 
the other hand, are coincident with his expectations 
for content, driven by scripts. 
Our actual design for restricting analysis is similar 
in many respects to Hotels' work on coherence relations 
( \[HobbS 76\] ,  \[Ho~s78\]). In this work, the 
representation for the text is also a tree, but the 
connections between nodes are coherence relations - 
subordinating relations between father and son, and 
co-ordinating relations between brothers. In C~?~,,on 
to both designs is the proposal to construct 
restricted lists of propositions eligible to relate to 
a current proposition. In our case, the relations 
between nodes in the tree is quite different (claim, 
evidence) ,  al though the description for the restricted 
set turns out to be the same - nawely, the right 
border of the tree. 
In ~__~Npbs_ ' system, the search for an interpretation is 
narrowed by proceseing a "goal list" of desired 
relations to existing propositions. We do not have a 
goal list to order our search, but merely a list of 
eligible propositions and an ordering of these 5ased 
on proxi~ty to the current proposition. But we also 
furnish some motivation for the construction of the 
eligible list - naDely, from the bearer's expectations 
about transmiseion strategies used by the speaker. 
In addition, Ho~ mentions that a few special words 
initiate specific goals (for example, "and" suggests 
temporal succession, parallel or  possibly cont ras t ) .  
In our system we also d iscuss  the restrictions to 
processing furnished by clues but i) we define the 
corpus of clues more clearly, indicating several types 
74 
and their associated restrictions and 2) we make clear 
the relation between restrictions from clues and the 
general processing strategy - that analysis picks up 
clues first, and resorts to general techniques 
otherwise. Furthermore, we show that a) most classes 
of clues are simply a restriction on the list of 
eligible propositions proposed for a general 
processing strategy and b)certain types of clues may 
override the general restrictions of the eligible list 
(e.g. re-directing the hearer explicitly). 
I am gz ~teful to Ray Perrault and 
their suggestions for this paper. 
Alex Borgida for 
BIBLIOGRAPHY 
\[Cohen 80\] ; Cohen, R. ; "Understanding Arguments"; 
Proceedings of CSCSI/SCEIO Conference 1988 
\[Grosz 77\] ; Grosz, B.: "The Representation and Use 
of Focus in Dialogue Understanding"; SRI Technical 
Note No. 151 
\[Hobbs 76\] ; Hobbs, J. ; "A Computational Approach to 
Discourse Analysis"; Dept. Computer Sciences, CUNY 
Research Report NO. 76-2 
\[Hobbs 78\]; Ho~s,  J.; "Why is Discourse Coherent?"; 
SRI International Technical Note NO. 176 
\[Hobbs 8@\] ; Hobbs, J. "Selective Inferencing"; 
Proceedings of CSCSI/SCEIO Conference 198~ 
\[Quirk 72\] ; Quirk, R. et  al; A Granmar of 
Contemporary English; Longmans Co. ; London 
\[Schank 75\] ; Schank, R. ; "SAM A Story 
Understander"; Yale Research Report NO. 43 
APPENDIX 
Complexity arguments: 
PIIE and POST ORDER: Any node of the tree is tested to 
be claim a ntm~er of times = #of its sons + 1 more 
failing test. Now, total tests for claim - "Sum over 
i" (#sons(i) +I) where i runs over all nodes of the 
tree, which = "Sum over i"(#sons(i)) + n. But total 
#sons < total #nodes of tree (no multiple fathers). 
So total < 2n = O(n). 
HYBRID: We measure the complexity of processing all 
the nodes in the tree, by showing that the #times the 
algorit/~n (see section 2.1 for notation) runs through 
BI, B2 and B3 in total = O(n). 
Hypothesis: No node gets attached to another more 
than twice 
Proof: Each NEW gets attached once initially, either 
at BII or B22. Once attached, it can only be moved 
once - in B21, if it is son to current NEN. Once it 
is moved, it is no longer a son of the current L 
(since L doesn't change in B2) and can never be son of 
L again (since L only goes down tree in BI2, so never 
to a previously attached node). 
Conclusion: all attachments together are O(n) 
Now then, BII + B22 together are only executed O(n) 
times - they perform initial attachments. And B12 + 
B21 must thus also be O(n) - i.e. #times through 
branches B1, B2 together is  O(n). 
Now consider B3: here n goes up the t ree .  But n can 
only go up as often as it goes down and #moves down 
tree is O(n) as per BI2, so B3 is O(n). 
(Note: #tests performed in operations in the forever 
loop is also O(n) tests in B@, B1 are just a 
constant additive factor; #tests in B21 (see comment 
statement) is < 2#attachments in B21). 
75 

