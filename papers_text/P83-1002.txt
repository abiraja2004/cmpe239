FACTORING RECURSION AND DEPENDENCIES: AN ASPECT OF TREE ADJOINING GRAMMARS (TAG) AND 
A COMPARISON OF SOME FORMAL PROPERTIES OF TAGS, GPSGS, PLGS, AND LPGS * 
Aravind K. Joshi 
Department of Computer and Information Science 
R. 268 Moore School 
University of Pennsylvania 
Philadelphia, PA 19104 
I.IWrRODUCTION 
Dur ing  the  las t  few years  there  i s  v igorous  
activity In constructing highly constrained 
grammatical systems by eliminating the 
transformational component either totally or 
partially. There is increasing recognition of 
the fac t  that  the ent i re  range  o f  dependenc ies  
that  t rans format iona l  grammars  in  the i r  var ious  
incarnat ions  have t r ied  to  account  fo r  can be 
satisfactorily captured by classes of rules that 
are non-transformational and at the same Clme 
highly constrlaned in terms of the classes of 
grammars  and languages  that  they  de f ine .  
Two types  o f  dependencies are  espec ia l l y  
important: subcategorlzatlon and filler-gap 
dependenc ies .  Moreover , these  dependenc ies  can 
be unbounded.  One o f  the  mot ivat ions  fo r  
transformations was co account for unbounded 
dependencies. The so-called 
non-transformational grammars account for the 
unbounded dependencies in different ways. In a 
cree-adJoinlng grammar (TAG), which has been 
introduced earlier in (Joshi,1982), 
unhoundedness is achieved by factoring the 
dependencies and recursion in a novel and, we 
belleve, in a linguistically interesting manner. 
All dependencies are defined on a finite set of 
basic structures (trees) which are bounded. 
Unhoundedness is then a corollary of a 
par t i cu la r  composition operat ion  called 
ad~olnlng. There are thus no unbounded 
dependencies in a sense. 
In this paper, we will ~irsC briefly 
describe TAG's, which have the fo l low ing  
Impor tant  properties: (l) we can represent the 
usual transformational relations more or less 
directly in TAG's, (2) the power of TAG's is 
on ly  slightly more than that of context-free 
grammars (CFG's) in what appears to be Just the 
right way, and (3) TAG's are powerful enough to 
character i ze  dependenc ies  (e .g . ,  
subcategorlzatlon, as in verb subcategorlzatlon, 
and filler-gap dependencies, as in the case of 
moved constltutents in wh-questlons) which might 
*GPSG: Generalized phrase structure grammar, 
PLG: Phrase linking grammar, and LFG: Lex lca l  
functional grannnar. 
This work is partially supported by the NSF 
Grant MCS 81-07290. 
be a t  unbounded d is tance  and nested  or crossed .  
We will then compare some of the formal 
properties of TAG's, GPSG*s,PLG's, and LFG*s, in 
particular, concerning (I) the types of 
languages, reflecting different patterns of 
dependencies that can or cannot be generated by 
the  d i f fe rent  types  of grammars ,  (2)  the  degree  
of free word ordering permitted by different 
grammars, and (3) parsing complexity of the 
different gra--,-rs. 
2.TREE ADJOINING GRAMMAR(TAG) 
A t ree  ad jo in ing  grammar (TAG), G = ( I ,A )  
cons i s ts  o f  two f in i te  se ts  o f  e lementary  t rees .  
The trees in I will be called the initial trees 
and the trees in A, the auxil iary trees. A tree 
{~ is an initial tree if the root node of 
is labeled S and the frontier nodes are all 
terminal symbols (the interior nodes are all 
non-termlnals). A tree ~ is an auxil iary tree 
if the root node of ~ is labeled by a 
non-terminal, say, X, and the frontler nodes are 
all terminals except one which is also labeled 
X, the same label as that of the root. The node 
labeled by X on the frontier will be called the 
foot node of ~ . The internal nodes are 
non-terminals. 
~t. ~ermfmJ$ , ,hA l~ 
As de f ined  above ,  the  in i t ia l  t rees  and the  
aux i l i a ry  t rees  a re  not  const ra ined  in any 
manner  o ther  than  as ind icated  above .  The idea ,  
however ,  i s  that  both  the  in i t ia l  and the  
auxil iary trees will be minimal in some sense. 
An initial tree will correspond to a minimal 
sententlal tree (i.e., for example, without 
recurslng on any non-terminal) and an auxiliary 
tree, with the root node and the foot node 
labeled X, will correspond to a minimal 
structure that must be brought into the 
der ivat ion ,  i f  one recurses  on X. 
* I wish to thank Bob Berwlck, Tim Finin, Jean 
Gallier, Gerald Gazdar, Ron Kaplan, Tony Kroch, 
Bill Marsh, Milch Marcus, Ellen Prince, Geoff 
Pullum, R. Shyamasundar, Bonnie Webber, Scott 
Weinstein, and Takashi Yokomori for their 
valuable comments 
We will now define a composition operation 
called adjoining (or adJunction) which composes 
an aux i l i a~ t ree  ~ with a t ree  ~ ? ~t  
t ree  w i th  a node labe led  X and le t  ~ ~ an 
aux i l i a ry  t ree  ~th  the  root  labe led  X a l so .  
~te  Chat ~ ~st  ~ve,by  def in i t ion ,  a node 
(and on ly  one) labe led  X on the frontier. 
~Jo ln lng can now ~ defined as follows. If 
Is ad jo in ing  to  ~ a t  the node n then the 
resulting tree ~ is as sho~ in Fig.l. 
s 
e 
/ 
FiG, :L. 
The tree t dominated by X in ~ is 
exc ised,  ~ i s  inser ted  a t  the  node n in  
and the  t ree  t i s  a t tached  to the  foot  node 
( labe led  X)  of ~ , i . e . ,  ~ i s  inser ted  or  
' ad jo ined '  to the node n in ~ pushing t 
downwards. Note that adjoining is not a 
subst i tu t ion  operat ion  in  the  usua l  sense .  
Example 2.1: Let G - (I,A) be a TAG where 
m+ b ~ r 
/~  / xb 
o- b 
t+i-- , (Z) +++: db 
T x(~ S 
o,, b <:x,, T b 
The root  node and the  foot  node o f  each  
aux i l i a ry  t ree  i s  c i rc led  fo r  conven ience .  Let  
us  took a t  some der ivat ions  in  G. 
~ wlll be adjoined to  ~/o a t  the 
indicated node in  ~ . The resulting tree 
Is then ~ 
b ~- r  o 
$ 
(~ .T .  b 
b 
We can continue the  derivation by 
ad~olnlng, say /@@, at S as indicated ing?  . 
The resulting tree ~fX is then 
. sL"  
? P4 F ? ~ "\[ 4 ' ' z ' "  
@- b 
Note that ~o is an initial tree# a 
sententiat tree. The derived trees y i  and MR 
are  a l so  sentential trees, 
We will now define 
T(G): The set of all trees derived in G 
starting from the initial Crees in I. This set 
will be called the tree setof G. 
LCG): The set of all terminal strings of 
the trees in  TCG). This set will be called the 
strln~ language(or language) of G. 
The relationship between TAG's CFG's and 
the corresponding string languages can be 
summarized as follows (Joehl, Levy, and 
Takahashl, 1975). 
Theorem 2.1: For every CFG, G', there is 
an equivalent TAG, G, both weakly and strongly. 
Theorem 2.2: For every TAG, G, one of the 
following statements holds: 
(a)there is a cfg, G', that is both weakly 
and s t rong ly  equ iva lent  to G, 
(b ) there  is a c fg ,G ' ,  that  i s  weak ly  
equ iva lent  to G but not s t rong ly  equ iva lent  to 
G, Or 
(3) there is no cfg, G', that is weakly 
equivalent to G. 
Parts (a) and (c) appear in (Joshl, Levy, 
and Takahashl, 1975). Part (b) is implicit in 
that paper, but it is important to state It 
explicitly as we have done here. For the TAG, 
G, in Example 2.1, it can be shown that there is 
a CFG, G', such that G" Is both weakly and 
strongly equivalent to O. Examples 2.2 and 2.3 
below illustrate parts (b) and (c) respectively. 
Example 2.2: Let G - (I,A) be a TAG where 
I: 
A 
e 
S 
o-'I" 
$ 
-r 
~z"  I I  
i", i~ 
"T" 
Some derivations in G. 
t 
e. 
?~ : - ' / I  
/ O, "1" ~,, 
/ , i  
O. "I" 
| "b  
$ 
! 
e 
i O. "3".,, . t  
! 
e. 
/ndi'u~ili aide ~i ?a~i 
3 
. . . .  
$ 
Clearly, L(G)=L= { a'~e be/ n ~/ 0}, which 
Is a cfl. Thus there must exist a CFG, G', 
which ts at  leas t  weakly equivalent to G. It 
can be shown however that there Is no CFG, G', 
which Is strongly ,equivalent to G,l.e., 
T(G)=T(G'). This follows from the fact that 
T(G), the tree set of G, i s  
"non- recogntzab\ ]e ' , i .e . ,  there  i s  no finite 
s ta te  bottom to  top automaton that  can recogn ize  
prec ise ly  T (G) .  Thus a TAG may generate  a c f l ,  
yet assign structural descriptions to the 
strings that cannot be assigned by any CFG. 
Example 2.3: Let C - (I,A) be a TAG where 
" \ [ :  o<d = S 
I 
e 
A;  
" ,  d3  O- "1-" /1~ 
11~ b "I" c 
I t  can  be shown that  L(C) - L1 = { w e cn /  
n ~ 0} ,  w i s  a s t r ing  o f  a ' s  and b ' s  such  that  
(1 )  the  number o f  a ' s  = the number o f  b 's  and 
(2)  fo r  any in i t ia l  subst r lng  o f  w, the  number 
of a's ~ the  number of b 's .}  
Ll can be character i zed  as fo l lows .  We 
s tar t  w i th  the  language L = ( (ba) "e  c~/  n ~ 0 
}.  L! i s  then  obta ined  by tak ing  s t r ings  in  L 
and mov ing  (d ts locs t tng)  some a ' s  to  the  le f t .  
It can be shown that L! is a strictly 
context-sensitlve language (csl), thus there can 
be no CFG that is weakly equivalent to G. 
TAG's have more power than CFG's, however, 
the extra power is quite limited. The language 
Ll has equal number of a's ,b's had c's; 
however, the a's and b 's  are mixed in a certain 
way. The Language L2 ={a~b~e cn/ n O} is 
similar to Li, except that all a's come before 
all b's. TAG's are not powerful to generate L2. 
The so-called copy inguage L3 ~ {w e w /w 6{a,b} P 
} also cannot be generated by a TAG. 
The fact that TAG's cannot generate L2 and 
L3 is important, because it shows that TAG's are 
only slightly more powerful than CFG's. The way 
TAG's acquire this power is linguistically 
significant. With some modifications of TAG's 
or rather the operation of adjoinlnR, which Is 
linguistically motivated, it is possible to 
generate L2 and L3, but only in some special 
ways. (This modification consists of allowing 
for the possibility for checking ieft-riRht tree 
context ( In  terms of a proner analysis) as well 
as top-bottom tree context (in terms of 
domination) around the node at which adiunctlon 
is made. Thls is the notion of local 
constraints in (Joshi and Levy,1981)). Thus L2 
and L3 in some ways characterize the limiting 
cases of context-sensitlvlty that can be 
achieved by TAG's and TAG's with local 
const ra in ts .  
In (JoshI,Levy, and Takahashi,1975) it is 
also shown that 
CFL's  C TAL 's  C I L ' s  ~ CSL 's .  
where I L ' s  denotes  indexed  languages .  
3. We will now consider TAG's with links. 
The elementary trees (initial and auxlliar-~ "-=- 
trees) are  the appropr ia te  domains for  
character i z ing  cer ta in  dependenc ies .  The domain 
of  the dependency i s  de f ined  by the e lementary  
t ree  itself. However, the dependency can be 
charaeCer l zed  explicit ly by introducing a 
spec ia l  re la t ionsh ip  between cer ta in  specL f led  
pa i rs  of  nodes of  an e lementary  t ree .  Th is  
relationship is pictorially exhibited by an arc 
(a dotted line) from one node to the oti,er. For 
example,  in the t ree  below, the nodes labe led  B 
and q are l inked ,  
A 
~-  c 
I-, ,, l'- 
c ~:  F G 
' I ~ /~ 
"~ ~ . -  -~  ~=. 
We will require the following conditions to 
hold for a llnk In an elementary tree. If a 
node n\[ is tlnked to a node n2 then (1) n2 
c-commands nl and (2) nl dominates a null s t r ing  
(or  a temi .a l  symbol in  the non- l ingu is t i c  
formal  grammar examples ) .  
The notion of a link introduced here is 
closely related to that of Peters and Rltchie 
(1982). 
A TAG with links is a TAG where some of the 
elementary trees ~y  have links as defined 
above. Henceforth, we may often refer to a TAG 
with links as just a TAG. Links are defined on 
the e lementary  t rees .  However, the impor tant  
idea is that the composition operation of 
adjoining will preserve the links. Links 
defined on the elementary trees may become 
stretched as the derivation proceeds. 
\[n a TAG the dependencies are defined on 
the elementary trees(which are bounded) and 
these dependencies are then preserved by the 
ad~olnlng(recurslve) operation. This is how 
rectlrsion and dependencies are factored in a 
TAG. This is in contrast to transformational 
grammars (TC) where recursion is defined in the 
base and the transformations essentially carry 
out the checking of the dependencies. The PiG's 
and LFG's share this aspect'of TG,i.e., 
tee.talon builds up a set of structures, some of 
which are filtered out by transfotn~atlons in a 
TG, by the const ra in ts  on l i nk ing  in  a PiG, and 
by the constraints i n t roduced  via functional 
structures in LFG. In a GPSG on the other hand, 
recurslon and the checking of the dependencies 
go hand in hand in a sense. In a TAG, 
dependencies are defined initially on bounded 
structures and recurslon simply preserves chem. 
In the APPENDIX we have given some examples 
to show how certain sentences could be deirved 
in a TAG. 
Example 2.4: Let G = (I,A) be a TAG with 
links where 
I 
e, 
IX 
i'-,b 
I S /  
/ I  
o.." S 
l--r: 
Some derivations in  G: 
! 
e. 
.'I t "" . , , i - , .  B .  ? OL_'- "%= ? f " i  
/ t  
',.L.',. 
5 
%,,/ = o,. o,. e. b b 
? s O-'; I" ~, 
' i.'"l.- Io ' o 
1 
e., 
w- -  o, e b 
i..,....,.I 
Y~" S 
/i 
/O.", .% 
/ i , \ ' ., 
-.:,_."I=. . . . . .  
"" - .L":-'~ 
S 
c,,*" I ' "l" 
s 
-'-.1.~ b 
5 
I 
e .  
%J : ct~s~e-4 
l0 
~? andes  each have one l ink .  ~%and ~63 
show how the l ink ing  is preserved in 
ad jo in ing .  In ~ one of  the l inks  is  
s t re tched.  I t  should be c lear  now, how, in 
general ,  the l inks  w i l l  be preserved dur ing the 
der ivat ion .  We note in th i s  example that in ~? 
the dependencies between the a 's  and the b 's  as 
re f lec ted  tn the terminal  s t r ing  are proper ly  
nested, whi le in ~ two of them are proper ly  
nested, and the third one is cross-serlal and it 
i s  crossed wi th  respect Co the nested ones. The 
two elementary trees /~  and Ps have only one 
l ink  each. The nesttngs and crossings in  ~ 
and ~3 are the resu l t  of ad jo in ing .  There are 
two points Co note here: (I) TAG's with links 
can character i ze  cer ta in  c ross -ser ia l  
dependenc ies  as  we l l  as ,  o f  course ,  nes ted  
dependenc ies .  (2 )  The c ross -ser ia l  dependenc ies  
as  we l l  as  the  nested  dependenc ies  a r i se  as  a 
resu l t  o f  ad jo in ing .  But th i s  i s  not  the  on ly  
way they  can ar i se .  I t  i s  poss ib le  to  have  two 
l inks  in  an  e lementary  t ree  wh ich  represent  
c rossed  or  nes ted  dependenc ies ,  wh ich  w i l l  then  
be preserved  dur ing  the  der ivat ion .  
I t  i s  c lear  from Example 2 .4  that  the  
string language of TAG with links is not 
affected by the links. Thus if G is a TAG with 
links. Then L(G)-L(G') where G" is a TAG which 
i s  obta ined  from G by remov ing  a l l  the  l inks  in  
the  e lementary  t rees  o f  G. The l inks  do not  
a f fec t  the  weak generat ive  capac i ty .  However,  
they  make cer ta in  aspects  o f  the  s t ruc tura l  
description exp l i c i t ,  which is imp l i c i t  in the 
TAG without the l i nks .  
TAG's (or TAL's) also have the following 
th ree  impor~ant  p roper t ies :  
( l )  L imi ted  c ross -ser ia l  dependenc ies :  
Although TAG's permit c ross -ser ia l  dependencies, 
these  are  res t r i c ted .  The res t r i c t ion  i s  that  
i f  there  a re  two sets  o f  c ross ing  dependenc ies ,  
then they must be e i ther  d i s jo in t  or one of  them 
must be proper ly  nested ins ide the other .  
Hence, languages such as the double copy 
language, L4 - {w e w e w / w ~ {a,b} ~} or L5 = 
{anb "@dne~/  n ~ \[} cannot be generated by 
TAG's. For deta i l s ,  see (Joshi,1983). 
(2)Constant. ~rowth property: In a TAG,G,at 
each step of  the der ivat ion ,  we have a 
sententlal tree with the terminal string which 
is a string in L(G). As we adjoin an auxiliary 
t ree,  we augment the length of the terminal  
s t r ing  by the length of the terminal  s t r ing  of 
(not counting the s ing le  non-terminal  symbol 
in the frontier of ~ ).Thus for any string, w, 
of L(G), we have 
where wgls the terminal string of some 
initial tree and wg,l ~ i~  m, the terminal 
string of the \[-th auxiliary tree, assuming 
there are m auxil iary trees. Thus w is a linear 
combination of the length of the terminal string 
o~ some Inltial tree and the lengths of the 
terminal strings of the auxiliary trees. Th~ 
constant growth property severely restricts the 
class of languages generated by TAG's. 
Hence,languages such as L6 = { a ~" / n ~ l} or 
L8 ~{a n% /n ~ \[} cannot be generated by TAG's. 
(3)Polynomial  parstn~:TAL's can be parsed 
in time O(n~ ) ( Josh i  and Yokomori, 1983). 
Whether or not an O(n5 ) a lgor i thm ex is ts  for 
TAL's is not known at  present. 
3. A COMPARISION OF GPSG's,TAG's,PFG's,and 
LFG's WITH RESPECT TO SOME OF THEIR FORMAL 
PROPERTIES 
TABLE I lists (i) a set of languages 
reflecting different patterns of dependencies 
Chat can or cannot be generated by the d i f fe rent  
types of grammars, and (li) the three properties 
Just mentioned ahove. 
As regards the degree of free word order 
permitted by each grammar, the languages 
1,2,3,4,5, and 6 In TABLE I give some idea of 
the degree of freedom. The language in 3 in 
TABLE I is the extreme case where the a's, 
b's,and c's can he any order, as long as the 
number of a's =the number of b's=the number of 
c 'S.  GPSG~and TAG's cannot generate th is  
language (although for TAG's a proof is not in 
hand yet), LFG's can generate this language. 
In a TAG for each elementary t ree ,  we can 
add mare elementary t rees,  sys temat ica l l y  
generated from the given tree to provide 
add i t iona l  freedom of word order ( tn  a somewhat 
simllar fashion as in (Pullum,1982)). Since the 
adjoining operation in a TAG gives some 
additional power to a TAG beyond chat of a CFG, 
th i s  device of augmenting the set of elementary 
trees should give more freedom, for example, by 
a l low ing  some l im i ted  scrambling of an item 
outs ide of the const i tuent  i t  belongs co. Even 
then a TAG does not seem co be capable of 
generatlng the language in 3 in TABLE I. Thus 
there is extra freedom but it is quite limited. 
lwl . ,  i'~.l~" al.lw~i+ %~w~l+ ---.a,.lw.l 
iI 
TABLE I 
GPSG TAG 
(and CFG) (with or  
without local 
const ra in ts )  
PLC LFG 
no yes yes  yes 
to Language obca lned  by 
s tar t ing  with  
L={(ba)n~n/n  ~ 1} and 
then  d i s locat ing  some a ' s  
to  the  le f t .  
2o Same as  I above except  
that  the  d i s located  a ' s  a re  
to  the  le f t  o f  a l l  b ' s . .  
3. L={w / w is string of 
equal number of a's,b's and no 
c ' s  but  mixed in  any order}  
4? L={x ~y/  n~l ,  x ,y  a re  
s t r ings  o f  a ' s  and b*s  such  that  
the  number o f  a ' s in  x and y = 
the number of b's in x and y- n} 
5. Same as  above except that  the  
l ength  of x = length  of  y.  
6. L={w ~/  n~ t ,  w is string of  
a ' s  and b 's  and the number o f  a ' s  
in w = the number of b 's  in  w - n} 
7. L={a ~b"  c" I n~ l )  
8. L f{a  n b ~ c n d" /n~t}  
9. L={a~b ~ ~ d" ~ e/n  7 1} 
IO. L= {w w/ w i s  s t r ing  
of a's and b 's}(copy  language) 
11. L=(w w wl w is string of  
a 's  and b's}(double copy language) 
12. L=ia ~ c TM b ~ d m /m ~ l,n ~ 1} 
13. L={a ~ ~ c W /n ~1, p ~ n) 
14. L-{a ~ In~ It 
15. L -{a  nz /n~ 1} 
16. L imi ted  c ross -ser ia l  
dependenc ies .  
17. Constant  growth property 
18. Po lynomia l  pars ing  
no yes  yes  yes  
yes  no(?) 
no no yes 
no yes  no(? )  
no yes  yes (  ? ) 
no yes no 
no yes no 
no no no 
no yes  yes (? )  
no no ? 
no no no ( ? ) 
no yes  ? 
no no no ( ? ) 
no no no( ? ) 
no yes  ? 
yes  yes  yes (  ? ) 
yes  yes  ? 
yes  
yes  
yes (? )  
yes (? )  
yes  
yes  
yes  
yes  
yes  
? 
yes<?)  
yes  
yes  
no(? )  
no 
no(? )  
Notat ion :  ?: answer  unknown to the  author ,  yes (? ) :  con jec tured  yes  
no(? ) :  con jec tured  no. 
12 
REFERENCES 
\ [ \ [ \ ]  Gazdar,G.,"Phrase structure grammars" 
in The Nature of Syntactic Representations(eds. 
P. Jacobson and G.K. Pullum),D. Reidel, 
Dordrecht, (to appear). 
\[2\] Joshi, A.K. and Levy, L.S.,"Phrase 
structure trees bear more fruit than you would 
have thought", AJCL, 1982. 
\[3\] Joshl, A.K., Levy, L.S., and Takahashi, 
M.,"Tree adjunct grammars", Journal of the 
Computer and System Sciences,1975. 
\[4\] J osht ,  A.K.,"How much 
context -sens i t iv i ty  Is requ i red  to  prov ide  
adequate  structural descrlpclons ?", in Natural 
language processing: Psycholln~ulstic, - -  
Theoretical, and Computational Perseptives, 
(edso Dowry, O., Karttunen, L., and Zwicky, 
A.), Cambridge University Press, (to appear). 
\[5\] Joshl, A.K. and Yokomorl, T.,"Parsln8 
of tree adjoining grammars", Tech. Rep. 
Department of Computer and Information Science, 
University of Pennsylvanla,1983. 
\[6\] Joshl, A.K. and Kroch, T., "Linguistic 
slgniflcance of TAG's" (tentative title), 
for thcoml ng. 
\[7\] Kaplan R. and Bresnan J.W., "Lexlcal 
funct iona l  grammar-s formal system for  
grammat ica l  representat ion" ,  in The Mental  
Representation of Grammatical Relatlons~ed. 
Bresnan,  J.), MIT Press ,  1983. 
\[8\] Peters ,  S. and R i tchte ,  R.W., "Phrase  
l ink ing  grammars" ,Tech.  Rep. Un ivers i ty  of  
Texas at Austin, Department of Linguistics, 
1982. 
\ [9\]  Pullum, G.K.,"Free word order and 
phrase  structure rules", in Proceed ing  of NELS 
\[_~2(eds. Puste . |ovsky,  J .  and Sells, P . ) ,  
Amherst,  MA, 1982. 
APPENDIX 
We will give here some examples to show how 
certain sentences could be derived in a TAG. 
For further details about thls TAG and its 
linguistic relevance, see (Joshi,1983 and Joshl 
and Kroch, forthcoming). Only the releva- ~ 
trees of the TAG, G-(I,A) are shown below. The 
following points are worth noting: (1)In a TAG 
the derivation starts with an initial tree. The 
appropriate lexlcal insertions are made for the 
Inltlal tree and the corresponding constraints 
as specified by the lexicon can be checked 
(e .g . ,  agreement and subcacegor i zac ion) .  Then 
as the der ivat ion  proceeds ,  as each aux i l i a ry  
t ree  is  brought  in to  the der ivat ion ,  the 
appropr ia te  lex ica l  i tems are  inser ted  and the 
constraints checked. Thus in a TAG, lexical 
insertion goes hand in hand with the derivation. 
(2) Each one of the two finite sets, I and A can 
be qu i te  la rge ,  but  these sets  need not  be 
expllcltely listed. The crees in \[ roughly 
correspond to all the "minimal' sentences 
corresponding to different subcategorlzation 
frames together with the "transforms" of these 
sentences. We could , of course, provide rules 
for obtaining the trees in I from a given subset 
of I. These rules achieve the effect of 
conventional transformational rules, however, 
these rules can be formulated not as the usual 
transformational rules but directly as tree 
rewriting rules, since both the domains and the 
co-domains of the rules are finite. 
Introduction of links can ~,~ considered as a 
part of this rewriting. In any case, these 
rules will be abbreviatory in the sense Chat 
they will generate only finite sets of trees. 
Their adoption will be only a matter of 
convenience and does not affect the TAG in any 
essential ~nner .  The set of auxiliary trees is 
also finite. Again these trees could themselves 
be "derived" from the corresponding trees in I 
by i n t roduc ing  appropr ia te  tree rewrltlng rules. 
Again these rules will be abbrevlacory only as 
discussed above. It is in this sense that the 
trees in I and A capture the usual 
transformational relations more or less 
directly. 
Some der ivat ions :  
( l )The  g i r l  who met 8ill i s  a sen ior .  
We s tar t  w i th  the in l t ta l  t ree  ~ w i th  the 
appropr ia te  tex lca l  inser t ions .  
S ~--z..-- 
~/P VP 
~r e~ v ~P 
I I ;~ /~ 
-'tk e. ~;~ I 
o.. 
N 
I 
Se..n ,'~ ?
13 
Adjoining 8t  (with the appropriate lexical 
insertions) to~ at the indicated node in ~ , 
ve obtain ~I . 
/ " \  Z.~ ', / \  
e V NP ) kip v~' % ~ 
i ~ i 1 / \  , ,  INt" 
I I i V Ivp'. 
l t l l l  ) I I ! 4i--Z._ 
l lk l  mee I,' i l  ~ i~llii..-' 
? "rl,,t ~i~i i i k , I  mlit I ; l l  {i  0, i l~ i l r  
(2)John persuaded Bill to invite Hary.  
N9 ,~p 
| / .~ ,  
tim "To vl ? 
V xP  
I I 
inv;te I 
Ad~otnin~ /~ ro ~".1 at  the tndit'~ated node 
in  ~.lr, ~ ohta in  Y i "  
~JP '4p 
I / \~  
# 
t,i 
;,,'11 
~ii,~'ll ~e l  l i t i e i L  l l ' l l  
t I / t ~ _  \] 
/ I , " /~_  
'~ ~'o~'" I ~. ;  I I \  
% / "' t I -'Iril ,~i ~i 
) f ro  
. . . .  " V ~P 
I I ~, 
i~ l ' t t  i 
(3)Nho did John persuade Bill to invite ? 
~l  ~ o{ I i  -.. 3 
44  \ .S  "/ ' 'x' ' '~ 
v I / \  
~, ~a To V?  
V ,'SAP 
"~, I ". I 
? "% i' l ' l l l ' f l  ~" 
Ad~ointng ~J  to  ~C% at the ind icated  node 
in IC~L, we obta in  y~. .  
? 
3o NP ~?  
/ ~ ~  
I v NP  
ra 
' t "" ~'a k,, ld 
p~v.fu., l l  ; 
r~?tl 
.S 
" "  , /{~ - A P 
/,ili~ lle' .,i? , ,  a /~- -~ '~- -  : 
I- ~ ~ V ~P 
, ' 
~ peY~.,~. \[ ', mo v , ' h@ 
"- GIll ) . .  , I ", I 
14 
Note the l i nk  In  ~ i s  ' p reserved '  i n~ , 
i t  i s  " s t re tched '  resu l t in  8 in  the  so -ca l led  
unbounded dependency. 
(&)John tried to please Mary. 
i ",._- 
NP vp 
l /~-  
~o 1-o ,,/P' 
V NP 
On the other hand 
(5 ) john  seems to  l i ke  Mary.  cou ld  be 
derived as follows. We will start with ~#~. 
/ 
~. S z"-z --~" 
~P V? 
-r~ v f  
/ \  
:T~,  4 UP 
\[ i 
I 
AdJ? inin8 J7  ~o ~ at the ind icated  node 
in Y~ we obta in  ~l"  
~'r = 
, 
~4 
I t 
/ 
t Hr" vP ' 
l I / '~  ' 
\ -t.i~'~ j~i'~ f~ "~ 
? ~ .  . ? 
-to VP 
~e i \  
V NP 
AdJo in in~ ~Mto  Y~. a t  the  ind icated  node 
in  ~'*t , we obta in  ~*~. 
I 
S 
I o /~ . . !  
m V YP 
I " 
i i ! /~  
wP 
I 
r~A~ 
JaQm~ - to  l (ka /,4 o P.~ 
15 
