ATN ~AM~AR HDDELI!~G \]17 APPLIED LII~UISIqCS 
ABSTRACT: Au~mentad TrarmitiOn Network grm.n~rs have 
significant areas of ~mexplored application as a simula- 
tion tool for grammar designers. The intent of this pa- 
per is to discuss some current efforts in developing a 
gr=m.~ testing tool for the specialist in linguistics. 
~e  scope of the system trader discussion i s to  display 
structures based on the modeled grarmar. Fu l l  language 
definition with facilitation of semantic interpretation 
is not within the scope of the systems described in this 
paper. Application of granrar testing to an applied 
linguistics research env i~t  is enphasized. Exten- 
sions to the teaching of linguistics principles and to 
refinemmt of the primitive All{ f%mctions are also con- 
s idered.  
i. Using ~t~od? 5bdels in Experimental Gr=r-~r Design 
Application of the A~q to general granmar modeling 
for simulation and comparative purposes was first sug- 
gested by ~,bods(1). ibtivating factors for using the 
net:,,~ork model as an applied gra, mar design tool ere: 
I. 
T. P. KEHLE~. 
Department of .~the=mtius and Physics 
Texas Woman's University 
R. C. ~.DODS 
Department of Co~,~ter Science 
Virginia Technological University 
syntactic as well as s~t ic  level of analysis. The 
ATN is proposed as a tool for assistin~ the linguist to 
develop systsmatic descriptions of ~ e  data. It is 
assumed that the typical user will interface with the 
system at a point where an AEN and lexicon have bem~ 
developed. The ATN is developed from the theoretical 
model chosen by the l ingu is t .  
Once the ~ i s  imp lememtad as a cooputat ional  pro- 
cedure, the user enters test data, displays structures, 
the lexicon, and edits the grammr to produce 
a refined A~\] grarmar description. The displayed struc- 
tures provide a labeled structural inremyretation of the 
input string based on the lin=~uistic model used. Trac- 
ing'of the parse may be used to follow the process of 
building the structural interpretation. Computational 
implemm~tation requires giving attention to the details 
of the interrelationships of gr~.matical rules and the 
interaction between the grammar rule system and the lex- 
ical representation. Testing the grammr against data 
forces a level of systemization that is significantly 
more rigorous than discussion oriented evaluation of 
gra~er sys ~m,. 
The model provides a meens of organizing strut- 
rural descriptions at any level, from surface 
syntax to deep propositional inrerpreta=icms. 
2. A nemmrk m~el  may be used Co re~resent differ- 
ent theoretical approaches Co grammr definition. 
The graphical representation of a gramrar permit- 
ted by the neuaork model is a relati~ly clear 
and precise way to express notions about struc- 
t~/re. 
3. 
Computational simulation of the gramsr enables 
systematic tracing of subc~xx~nts and testing 
against text data. 
4. 
Grimes (2), in a series of linguistics workshops, d ~  
strafed the utility of the network model ~ in envi- 
~u~nts  wh~e computational testir~ of grammrs was r~t 
possible. Grimes, along with other c~ntributors to the 
referenced work, illustrated the flexibility of the ATN 
in ta lc  analysis of gr~ratical structures. A~ 
implerentations have nmsCly focused on effective natural 
language understanding systems, assuming a computation- 
ally sophisticated research env i r~t .  Inplementatiorm 
are ofte~ in an envirormm~t which requires some in- 
depth ~mderstanding and support of LISP systems. Re- 
cently much of the infornmtion on the ATN formalism, 
applications and techniques for impler~ntation was sum- 
marized by Bates (3). Tnc~h ~amy systems have be~ 
developed, l i t t le  attent ion has been g iv~ to =eating 
an interactive grarmar modeling system for an individual 
with highly developed linguistics skills but poorly de- 
veloped c~putational skills. 
The individual involved in field Lir~=%~istics is 
concerned with developing concise workable descriptions 
of some corpus of deta in a ~ven language. Perti~,7~ 
problems in developing rules for incerpreting surface 
s~-uctn~res are proposed and discussed in relation to 
the da~a. In field l i r~t ics  applications, this in- 
wives developing a rmxor~my of structural types follow- 
ed by hypothesizing onderlying rule systems which pro- 
vide the highest level of data integration at a 
2. Desi=~ Consideratiors 
The gm~ral  das i~ goal for the grammr rasing 
sys~ described here is to provide a tool for develop- 
ing experimentally drive~, systematic representation 
models of language data. Engineering of a full Lmguage 
~erstamdimg system is not the ~f~mm-y focus of the 
efforts described in this paper. Ideally, one would 
Like Co provide a tool which would attract applied lin- 
guists to use such a syst~n as a simulation environmen= 
for model developmen=. 
design goals for the systems described are: 
i. Ease of use for both novice and expert modes of 
.operation, 
2. Perspi cuity of gr~m~r representation, 
3. Support for a variety of linguistic theories, 
4. Trarmportability to a variety of systems. 
The p~totype grammr design sys~ consists of a 
gram~r gemerator, a~ editor, and a monitor. The f~mc- 
tion of U%e gr;~.~ editor is to provide a means of 
defining and mm%iv~lating gr~mar descriptions w~thouc 
requiring the user  to work in  a specific programing 
l angu~e env~uL~,=L~. ~e ed i tor  i s  a lso used to edic 
lexicons. The ed i tor  knows shout the b/N envirormen~ 
and can provide assistsmce to the user as needed. 
The monitor's function is co handle input and out- 
puc of g r~-~ and lexicon f i l es ,  manage displays and 
traces of parsir~s, provide o~sultation on the sysran 
use as needed, and enable the user to cycle from editor 
to parsing with mi~m,~ effort. The monitor can also be 
used to provide facilities for studying gram~r effi- 
ciemcy. Transportability of the gr~mn~" modeling systsm 
is established by a progran generator whi~,h enables im- 
p l~tat ion  in differanc progr~m~ng ~ e s .  
3. Two In Dlemmutatiors of Gr i t  Tes~ Sysr~-s 
To deu~lop some understanding on the design amd 
impleremrmtion requirements for a sysr~n as spec- 
ified in the previous section, D~o experimenr.al gr~'-~" 
resting systems have been developed. A partial A~ im- 
pl~m~nta=ion was dune by ~_hler(A) in a system (SNOPAR) 
~dnich provided some interactive gr.~Tr~T and development 
facilities. SNOPAR imcorporated several of the basic 
features of a grammr generator and monitor, with a 
limited ed i to r ,  a gra-m=~ gererator and a number of 
other fea=uras. 
Both SNOPAR and ADEPT are implemenred in SNO~OL 
and both have been ~:rarmpcrr~ed across opera . r ig  sysrems 
(i.e. TOPS-20 co I~M's ~;) .  For implemm~retion of rex= 
ediCir~ and program grin,mar gemerar.ion, the S~OBOL& 
language is  reasonable. However, the Lack of ccmprehen- 
sive list storage marm@snentis a l~n~tat io~ on the ex- 
tension of ~ implerenre=ion ~o a full natural lan- 
guage ~mdersr~ sysr~n. Originally, S}~DBOL was used 
because a suirmble ~ was noC available to the 
i~p lem~r .  
3.1 SNOPAR 
SNOPAR prov?des =he following f tmct ions :  gr~m~.r 
creation and ecLiting, lexicon oreation end echoing, ex- 
ecution (with some error trapping), Crac ing /~t~g2x~ 
and file handling, lhe grammar creatiun porticm has as 
am option use of an inrerac=ive gr i t  Co c reare  an 
ATN. One of the goals in =he design of ~.~3PAR was to 
in~'c~,~ce a notation which was easier to read than the 
LISP reprasemta=ion most frequently used. 
Two basic formats have been used for wr i~ng grab- 
mars in ~qOPA.~. One separates dm conrex~c-free syntax 
type operations f-con the rests and actions of the gram- 
mar. This action block fo=ma~ is of the following gem- 
era\]. for=: 
arc- type-block 
s tare arc- type 
arc-type 
:S ('i'D (test-action-block)) 
: S CID (=es t-action-b lock) ) 
: F~{)  
where arc-type is a CAT, P~RSE or FIN~.~RD e~c., and the 
test-action-block appears as folluws: 
=es C- action-b lock 
sr~re arc-reSt: I action :S(TO(arc-type-bl6d<)) 
arc-rest ! action :S(TO(arc-rype-block)) 
where an arc-test is a CC~PAR or other  tes t  and an 
action is a ~ or HUILDS type action. Note that  m'~ 
additional intermediare stare is in=roduaed for the tes t  
and ac=iuns of the AXN. 
'lhe more sr~ Jard formic used is ~ve~ as: 
state-? arc-type -~7 con/ition-rest-and-ac=ion-block 
--7 ne~- stace 
An exa~le nmm phrase is given as: 
NP CAT('DET') SETR('NP', 'DET' ,Q) :SCID('ADJ')) 
CAT('NPR') sEm('t~', '~'R' ,Q) 
: S CID ( ' PO l~ ' ) )F (FRETURN) 
ADJ CAT('ADJ') S~R('t~','ADJ',Q) :S(TO('Am')) 
CAT('N') S~TR('I~' ,'N' ,q) 
:S (TO( 'N ' ) )F~)  
NPP PARSE(PPO) SEI'R('NP', 'NPP' ,Q):S(TO(' \[ '~P'))  
POPNP NP = BUILDS (NP) : (P.E!'URN) 
The Parse function calls subneu~rks which consist of 
Parse, C, ac or other arc-types. Structures are initial- 
ly built through use of the SETR function which uses 
the top level consti,;:um",c ~ (e.g. NP) rm form a List 
of the curmti~um~ts referenced by the r~g~j-rer ~ in 
~-~x. All registers are =reared as stacks. ~he ~UILDS 
function may use  the implici= r~d'~rer ham sequence as 
a default to build ~he named structure. ~he 'cop level 
constitn~nc ~ (i.e. NP) cunr2dms a List of the regis- 
rers set during the parse which becomes the default list 
for struuture building. ~ere  are global stacks for 
history m~ng and bank up. functions. 
Typically, for other ~um the ~=1 creation of a 
g r~r  by a r~ user, the A~q func~ library of 
system is used in conjunction wi~h a system editor for 
gr~.=.~ development. Several A~q gr~n-s  have beem 
wri=r~n wi th  th i s  system. 
3.2 ADEPt S 
~, an e f fo r t  co make am e~sy-to-use s~r~d~on too l  
fo r  l i r~u?s~,  the basic concepts o f  SNOPAR were exrer~-  
ed by Woods (5) co a fu l l  A~N implememtacion in  a sys~ 
called ADEPT. ADEPT is a sysr.em for ger~ratimg A~I~ pro- 
gram through ~he use of a rmU~rk edir.=r, lexicon 
ec~tor ,e r ror  cor rec t ion  and detect ion  _~n%-~z.~:, and a 
monitor for execution of the gr iT .  Figure I shnws 
the sysr.~n organizarlon of ADEPT. 
'Ihe ed ic t  in  ADEPT p~ov-ides the fo l l~  
fu~c=ions : 
- net~:k creat i~" 
- arc deletion or ed i~ 
- arc ins~on 
- a rc  reorder i r~  
- sraEe insertion and deletiun 
A.~ Files ----> A~: Progr~ 
~ a r ~ y r  
ATN Functions < 
~e four main editor commnd types are m. -~ ized  belch: 
Z <net> 
z <s==~> .<~ta=-> 
# tar.~ 
D zota~), ~ta~ 
I <s=a~ 
L <film~me> 
Edits a neu~n%k 
(Creates i= if it doesn'~ exist) 
=~iit arc information 
Deletes a nem~r:k 
Deletes a stare 
Delete an arc 
Insert a srmre 
Insert an arc 
Order arcs from a stare 
LLsc nev~orks 
Star.e, r~twork, arid arc ec~i~Lr~ are dlst/_n=oz~shed by 
conrex= and the ar~-.~nrs of ~he E, D, or I c~m~nds. 
For a previously undefined E net causes definition of 
~m ne=#ork. ~e  user must specify all states in the 
rmt~x)rk before staruir~. ~l~e editor processes the srmre 
list requesting arc relations and arc infor-mcion such as 
the tests or arc actions. ~he states ere used ro help 
d~m~ose e~-~uL~ caused by misspelling ~f a srm~e or 
omission of a sta~e. 
Once uhe ~=~rk  is defined, arcs ~ay by edired by 
specifying =he origin and dest/na=ion of the arc. ~e  
arc infor~mcion is presemr~d in =he following order: arc 
dest inat ion ,  arc type, arc tes t  and arc act ions.  Each o f  
124 
dlese items is displayed, permit~ir~ rile user to change 
values on the arc list by ~yping in the needed infor=m- 
tion. t~itiple arcs between states are differentiated 
by specifying the order nu~er  of the arc or by dis- 
playing all arcs to the user and requesting selection 
of the desired arc. 
N~ arcs are inserted in the network by U~e I 
mand. -vhenever an arc insert is performed all arcs from 
the state are nurbered and displayed. After the user 
specifies the nu~er  of the arc that the n~ arc is to 
follow, the arc information is entered. 
Arcs nay be reordered by specifying the starting 
state for the arcs of inCerast using the 0 command. ~e 
user is then requested ~o specify the r~ ordering of ~Se 
arcs.  
Insertion and deletion of a state requires that the 
editor determine the sta~as which r.'my be reached 
the new state as well as finding which arcs terminate on 
the n~4 state. Once this information has been establish- 
ed, the arc information may be entered. 
~nen a state is deleted, all arcs which inmediately 
leave the state or which enter the state fr~n other 
stares are removed. Error ?onditioos ex is t~ in the 
network as a result of the deletion are then reported. 
The user then e i~er  verifies the requested deletion and 
corrects any errors or cancels the request. 
Grarmar files are stored in a list format. ~he PUT 
cou-n,ar.d causes all networP.s currently defined to be writ- 
ten out to a file. GET will read in and define a grammar. 
I f  the net~..~ork is already defined, the network is r~:~: 
read in. 
By placing a series of checking functions in an A~N 
editor, it is possible to fil~er out many potential 
errors before a grammr is rested. ~he user is able to 
focus on the grammr model and not on the specific pro- 
gra~ming requir~r~nts. A monitor progra~ provides a top 
level interface to the user once a grammar is defined for 
parsing sentances. In addition, the monitor program 
manages the stacks as well as the S~qD, LIFT and HOLD 
lists for the network gr~m~sr. 9wi~ches may be set to 
control the tracing of the parse. 
An additional feature of the ~.bods ADF.Yr syst~n is 
the use of easy to read displays for the lexicon and 
gra'iIr~. An exar~le arC is shown: 
(~)--CAT('DET')-- (A_nJ) 
? ~qO TESI'S. ~ 
ACTICNS 
SErR('DEr' ) 
ADEPT ~has be~ used to develop a small gr=~,~r of 
English. Future exp~ts  ere planned for using 
ADEPT in an linguistics applications oriented m~iron- 
n~nt. 
4. Experiments in Grammar ~del ing 
Utilization of the A~N as a grammr definition 
syst~n in linguistics and language education is still aC 
an early stage of development. Ueischedel et.al. (6) 
\[~ve developed an A~-based system as an intelligent 
CAI too for teaching foreign language. ':~\[~in the 
~OPAR system, experiments in modeling English transfor- 
mational grammar exercises and modeling field linguis- 
tics exercises have been carried out. In field I /~-  
tics research some grarmar develqgment ~has bean dune. 
Of interest here is the systenatic forrazl~tion of rule 
system associated with the syntax and semantics of 
ICL 
SU 
POPICL 
VP 
VMDD 
POPVP 
NP 
NI~DD 
POPNP 
El'? 
thus permitt ing the parse of 
kokoi) as: 
(ICL 
~red 
~) ) )  
(Subj 
natural language subsysr~,s. Proposed model gr~,,ars can 
be evaluated for efficiency of representation and exzend- 
ibilit7 to a larger corpus of data. Essential Co this 
approad% is the existence of a self-contained easy-Co-use 
transportable AII~ modeling systems. In the following 
sections some example applications of gr~m~r r~sting co 
field lir~=uistics exercises and application to modeling 
a language indigerJoos to the Philippines ~ given. 
4. I An Exercise Ccmputaticrmlly Assisted Tax~ 
Typical exercises in a first course in field lin- 
guistics give the student a series of phrases or senten- 
ces in a language not: known to the student.  T ~ c  
analysis of the data is to be done producing a set of 
formul~q for constituent types and the hierarch~a\] 
relationship of ourmtituenCs. In this partic,1\]nr case a 
r~-~nic analysis is dune. Consider the following three 
sentences selected from Apinaye exercise (Problem I00) (7) : 
kukrem kokoi the nr~<ey eats 
kukren kokoi rach the big mor~e-/ eats 
ape rach mih mech the good man woz~s well 
First a simple lexicon is contructed, from this and other 
data. Secondly, immediate constituent analysis is car- 
tied out to yield the following tegms~ic fommdae: 
ICL := Pred:VP + Subj :t~ 
NP := F~d:N + \[~od:AD 
VP := Head:V + Vmod:AD 
lhe AIN is then defined as a simple syntactic orgsniza- 
Clon of constituent types. ~e  ~0P~R representation of 
this grarmar would be: 
PARSE(VPO) SEIR('ICL', 'Pred' ,Q) 
:S (TO( 'SU ' ) )F~)  
PA~E~() )  SEm('ZCL' ,'Subj',OJ 
: S CID ( ' POPICL ' ) ) F (FREIU~N) 
zcL = EUILDS(ICL) : (.~nmN) 
CAT('V') SETR('VP', 'Head' ,Q) 
: S(TO( 'VMDD' ) ) F (FREI'J~N) 
CAT('AD') SEIR('VP', 'V~bd' ,Q) 
VP = Nf/I~(VP) : ?~)  
CAT('N') szm( 'NP ' ,  'Head' ,0) 
: S CID ( L~DD ' ) ) F CFREIIR~N) 
CAT('AD') SELR('NP', '~d '  ,Q) 
NP ~ mTII~(NP) : (RETU~) 
the first senrance (Kukren 
c 
English gloss may be used as in the following exa~le: 
GLOSS : 
WORK ~ MAN WELL/G00D The good man works a lot. 
STATE.: ICL INPUt: 
(ICL 
(?red 
Cqe_~a APE 
?ee~ RA~O)) 
(Subj 
~e~d MIH) 
sentence in the exercise may be entered, making 
125 
correc=ions to the ~ as _needed___. Once the basic 
notions of syntax and hierarchy are established, the 
model may th~n be extended to incorporate conrax=- 
semsiti~ and semantic features. Frequenr.ly, in p~upos- 
ing a tam00rmmy for a series of smrancas, ore is t~mpted 
to propose r~mermas s~s~ctural V/pes in order to handle 
all of =he deta. The orian=a~.on of g rw~-  tes~_ng 
encourages =he user to look for more concise represemra- 
=ions. Tracing the semrance parse cm~ y ie ld  in fo r~1: : i~  
abou= the efficiemcy of the represmrmtion. T ra~ is 
also illus=rative to the s~t ,  permit=~,ng many ,~rs- 
to be chserved. 
4.2 Cotabato Mar~bo 
An ATN represmtat ion  of a gr~-~ for Cotabaco 
~.~'~l:)o was done by Errington(S) using the manual ~cuuos- 
ed by Gr~-,~ (2). Rector/y, the gr~:-=~- was implemmred 
and tasted using ~OPAR. The implen~m~ation cook place 
over a ~u'ee month period with i r /~  imp~,,tat ion at 
word leuel and ewencual ex-cemsion to ~he cqm~e 
level with conjm~ctions and mbedding. ~ t s  were 
used ~Irou~hout the ~rmwr~m to exp la in  the rational for 
par t i cu la r  arc types, Cases or  act ions.  
A wide var ie ty  of clause L'ypas are handled by L-he 
g-c~m~-. A spec i f i c  requirement in the ,'mr~bo graz=ar 
~s =he ability to handle a significan~ ammm~ of test:- 
ing on the arcs. For ~ le ,  it is not u~w,~-m-n to 
ha~ three or four arcs of the sa~e L-ype differentiated 
by checks on re~isrars f~  previous points in =he oarse. 
Wi~ nine network types, this leads to a cormid~rable 
ammmt of H -~ being spent in conrax~ =bedS.  A 
s=raight forward a~proach to the gr~m~- design leads to 
a considerable amoum~ of back~ up. in the parse. '~hile 
a high speed parse was not  am objective of the das i~,  
it did point out the d i f f i cu l ty  in  designing ~'.~. . - rs  of 
significan= size without ge=tirg in to p rogr~w~ 
practice and applying more efficisn= parsing routines. 
Since an objective of the project is to provide a sys- 
tem which emphasizes me ~ t i c s  and not: p rogrm~mg 
practice, it was necessary to maintain descriptive 
clari=y at the sacrifice of performanca. An exmple 
parse for a clause is  g lum:  
#,AEN SA E~.AW SA 8r--GAS -- Tae person is  eatiz'g r i ce  
GLOSS: 
EAT THE PL-'RSON.PEOPLE THE .RICE 
STATE: CL r;qPUT: 
(CL 
~P 
~B 
(V~ 
(VAFF EG) at=ion is  'eat '  
(V~S ..~RES) 
(~D BASIC) 
(VFOC ACTORF) 
Crn?El ~qS)  
0z3rnz i~)) )  
0n~rf~E v~)))  
(FOC focus is 'the people' 
~P 
~ET SA) 
~C 
~C 
(ACIDR actor  is  ' the people'  
(~  
(DST SA) 
(~C 
(NPNUC 
CL~ ~-7~q) )) )) 
(NGNACr objec: is ' r i ce '  
em 
(DEr SA) 
(NUC 
~12C 
(~ ~s) ) ) ) ) )  
5. Sumaazy am6 Conclusior~ 
Devel~xment of a relatively easy to use, tr~mspof 
=able grammar desi=~ system can make ~:~ssible the use of 
gr~-.=~ =z~el/rg in d~e applied Ltnguistics envirormmt, 
in education and in ~t ics  research. A first step 
in ~ effort .has been carried out by img!~_ng 
- .~-mrml  sysram ,SNOP~.R ar~ ADK=r, which ~,gnasise 
norm=ional cleriry and am e4itor/mnitor interface to 
the user. The re=,,,ozk ed i to r  i s  designed to ~rovide 
er ror  b.amdl-~ng, cor:ec~:ion and in teract ion  wik'.-,, the user 
in asr~blis,hirg a nam~":k model of the gr~,,~-. 
S~ a~plications of ~qDP&R l~ve been -=~ to 
resting r~m~=mically based g r ~ .  Future use of 
ADEPT in the \ ] / r~sCics  e~,ea~.ion/reseaz~h is p ~ .  
'D~veloping a user-orimrad A~N modeling sveram for 
",_~m~-%~.s=s provides certain insights to the AXI~ model 
itself. Su~q u ~  as use perspicuity of r/he ATN 
red, res t . ra t ion  of  a g r ~  and the ATN model .avplica- 
b i~/  to a varie~, of language .is!Des cam. be eva!uered. 
In addition, a more widespread application of A~Ns can 
lead Co some scanderdiza~ion in gr~m,~- =mdelirg. 
The relaraed issue of develooing interfaces for user 
extm~ion of gram-mrs in natural language pro~s ing  
sysr~rs car, be investigated fr~n incressed use of ~'ne 
A~ model by the person who is not a spee~\ ]~t  in arci- 
f inal  inre!ligm%~.e. The systems gm-eral design does 
not 1~-~t itself Do azADlication rm the A~q model. 
6. 
i. 
2. 
3. 
4. 
5. 
6. 
7. 
8. 
RP-ferec%ces 
5hods, W., Transi=ion ~etwork Gr~s  for Natural 
LatlSuage Analysis, ~cat ions  of the ACH, ~i.  
13, no. i0, 1970. 
Gz~m~, J., Trm%si=ion Network Grammars, A Guide, 
~twork Grasmars, Grimes, J., ed., 1975. 
Bares, lMdelein, The Theory and Practice of A,~gm~t- 
ed Trm%sition ~twork Gr;mT,~rs, Lecture Notes in 
Co.muter Scion.e, Goos, G. and ~ s ,  J., ed., 
:97~. 
Kahler, T.P., SNOPA.R: A Grammar Testing System, 
AJCL 55, 1976. 
l-bods~ C.A., ADEPT - Testing System for A~gmanred 
TrarsicLon ~=work Gr~-~s ,  l~sters Thesis, 
V'L~ginia Tech, 1979. 
l.~.isd~edel. R.M., Voge, ~.,LM., J~ ,  M., An 
Ard/-icial Inralligmce ~ to Language Instr.=- 
el=m, Arzificial Intelligm%ce, Vol. i0, No. 3, 1978. 
Marrifield, I./i11"~-~ R., Co~s~.~ M. Naish, Calvin 
R..Rensch, Gilliam Story, Laboratory M~r~Jal for 
.P~rDhol~ and Syntax, 1967. 
E r rS ,  ,Ross, 'Transi=ion Network Gr~-~aT of 
Cor~baDo Hazzbo. ' SL~dias in  Fn i l ipp ine  ~=Lcs ,  
edited by Casilda F_.drial-TJ,~,-~-res and Ai..lstil'% l~J.e. 
Volume 3, Number 2. Manile: S,,--~ LnsCiCute of 
L i~  tics. 1979. 
126 
