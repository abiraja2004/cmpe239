Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 218?227,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
Adapting Discriminative Reranking to Grounded Language Learning
Joohyun Kim
Department of Computer Science
The University of Texas at Austin
Austin, TX 78701, USA
scimitar@cs.utexas.edu
Raymond J. Mooney
Department of Computer Science
The University of Texas at Austin
Austin, TX 78701, USA
mooney@cs.utexas.edu
Abstract
We adapt discriminative reranking to im-
prove the performance of grounded lan-
guage acquisition, specifically the task of
learning to follow navigation instructions
from observation. Unlike conventional
reranking used in syntactic and semantic
parsing, gold-standard reference trees are
not naturally available in a grounded set-
ting. Instead, we show how the weak su-
pervision of response feedback (e.g. suc-
cessful task completion) can be used as
an alternative, experimentally demonstrat-
ing that its performance is comparable to
training on gold-standard parse trees.
1 Introduction
Grounded language acquisition involves learn-
ing to comprehend and/or generate language by
simply observing its use in a naturally occur-
ring context in which the meaning of a sentence
is grounded in perception and/or action (Roy,
2002; Yu and Ballard, 2004; Gold and Scassel-
lati, 2007; Chen et al, 2010). Bo?rschinger et
al. (2011) introduced an approach that reduces
grounded language learning to unsupervised prob-
abilistic context-free grammar (PCFG) induction
and demonstrated its effectiveness on the task of
sportscasting simulated robot soccer games. Sub-
sequently, Kim and Mooney (2012) extended their
approach to make it tractable for the more complex
problem of learning to follow natural-language
navigation instructions from observations of hu-
mans following such instructions in a virtual envi-
ronment (Chen and Mooney, 2011). The observed
sequence of actions provides very weak, ambigu-
ous supervision for learning instructional language
since there are many possible ways to describe the
same execution path. Although their approach im-
proved accuracy on the navigation task compared
to the original work of Chen and Mooney (2011),
it was still far from human performance.
Since their system employs a generative model,
discriminative reranking (Collins, 2000) could po-
tentially improve its performance. By training a
discriminative classifier that uses global features
of complete parses to identify correct interpreta-
tions, a reranker can significantly improve the ac-
curacy of a generative model. Reranking has been
successfully employed to improve syntactic pars-
ing (Collins, 2002b), semantic parsing (Lu et al,
2008; Ge and Mooney, 2006), semantic role la-
beling (Toutanova et al, 2005), and named entity
recognition (Collins, 2002c). Standard reranking
requires gold-standard interpretations (e.g. parse
trees) to train the discriminative classifier. How-
ever, grounded language learning does not provide
gold-standard interpretations for the training ex-
amples. Only the ambiguous perceptual context
of the utterance is provided as supervision. For
the navigation task, this supervision consists of
the observed sequence of actions taken by a hu-
man when following an instruction. Therefore, it
is impossible to directly apply conventional dis-
criminative reranking to such problems. We show
how to adapt reranking to work with such weak
supervision. Instead of using gold-standard an-
notations to determine the correct interpretations,
we simply prefer interpretations of navigation in-
structions that, when executed in the world, actu-
ally reach the intended destination. Additionally,
we extensively revise the features typically used in
parse reranking to work with the PCFG approach
to grounded language learning.
The rest of the paper is organized as fol-
lows: Section 2 reviews the navigation task and
the PCFG approach to grounded language learn-
ing. Section 3 presents our modified approach to
reranking and Section 4 describes the novel fea-
tures used to evaluate parses. Section 5 experi-
mentally evaluates the approach comparing to sev-
218
(a) Sample virtual world of hallways with varying tiles,
wallpapers, and landmark objects indicated by letters
(e.g. ?H? for hat-rack) and illustrating a sample path
taken by a human follower.
(b) A sample natural language instruction and its formal land-
marks plan for the path illustrated above. The subset corre-
sponding to the correct formal plan is shown in bold.
Figure 1: Sample virtual world and instruction.
eral baselines. Finally, Section 6 describes related
work, Section 7 discusses future work, and Sec-
tion 8 concludes.
2 Background
2.1 Navigation Task
We address the navigation learning task intro-
duced by Chen and Mooney (2011). The goal is
to interpret natural-language (NL) instructions in a
virtual environment, thereby allowing a simulated
robot to navigate to a specified location. Figure 1a
shows a sample path executed by a human follow-
ing the instruction in Figure 1b. Given no prior lin-
guistic knowledge, the task is to learn to interpret
such instructions by simply observing humans fol-
low sample directions. Formally speaking, given
training examples of the form (ei, ai, wi), where
ei is an NL instruction, ai is an executed action
sequence for the instruction, and wi is the initial
world state, we want to learn to produce an appro-
priate action sequence aj given a novel (ej , wj).
More specifically, one must learn a seman-
tic parser that produces a plan pj using a for-
mal meaning representation (MR) language intro-
duced by Chen and Mooney (2011). This plan is
then executed by a simulated robot in a virtual en-
vironment. The MARCO system, introduced by
MacMahon et al (2006), executes the formal plan,
flexibly adapting to situations encountered dur-
ing execution and producing the action sequence
aj . During learning, Chen and Mooney construct
a landmarks plan ci for each training example,
which includes the complete context observed in
the world-state resulting from each observed ac-
tion. The correct plan, pi, (which is latent and
must be inferred) is assumed to be composed from
a subset of the components in the corresponding
landmarks plan. The landmarks and correct plans
for a sample instruction are shown in Figure 1b.
2.2 PCFG Induction for Grounded Language
Learning
The baseline generative model we use for rerank-
ing employs the unsupervised PCFG induction ap-
proach introduced by Kim and Mooney (2012).
This model is, in turn, based on the earlier model
of Bo?rschinger et al (2011), which transforms
the grounded language learning into unsupervised
PCFG induction. The general approach uses
grammar-formulation rules which construct CFG
productions that form a grammar that effectively
maps NL sentences to formal meaning represen-
tations (MRs) encoded in its nonterminals. After
using Expectation-Maximization (EM) to estimate
the parameters for these productions using the am-
biguous supervision provided by the grounded-
learning setting, it produces a PCFG whose most
probable parse for a sentence encodes its correct
semantic interpretation. Unfortunately, the initial
approach of Bo?rschinger et al (2011) produces ex-
plosively large grammars when applied to more
complex problems, such as our navigation task.
Therefore, Kim and Mooney enhanced their ap-
proach to use a previously learned semantic lexi-
con to reduce the induced grammar to a tractable
size. They also altered the processes for construct-
ing productions and mapping parse trees to MRs in
order to make the construction of semantic inter-
pretations more compositional and allow the ef-
ficient construction of more complex representa-
219
Figure 2: Simplified parse for the sentence ?Turn
left and find the sofa then turn around the corner?
for Kim and Mooney?s model. Nonterminals show
the MR graph, where additional nonterminals for
generating NL words are omitted.
tions.
The resulting PCFG can be used to produce
a set of most-probable interpretations of instruc-
tional sentences for the navigation task. Our pro-
posed reranking model is used to discriminatively
reorder the top parses produced by this generative
model. A simplified version of a sample parse tree
for Kim and Mooney?s model is shown in Figure 2.
3 Modified Reranking Algorithm
In reranking, a baseline generative model is first
trained and generates a set of candidate outputs
for each training example. Next, a second con-
ditional model is trained which uses global fea-
tures to rescore the candidates. Reranking using
an averaged perceptron (Collins, 2002a) has been
successfully applied to a variety of NLP tasks.
Therefore, we modify it to rerank the parse trees
generated by Kim and Mooney (2012)?s model.
The approach requires three subcomponents: 1)
a GEN function that returns the list of top n can-
didate parse trees for each NL sentence produced
by the generative model, 2) a feature function ?
that maps a NL sentence, e, and a parse tree, y,
into a real-valued feature vector ?(e, y) ? Rd, and
3) a reference parse tree that is compared to the
highest-scoring parse tree during training.
However, grounded language learning tasks,
such as our navigation task, do not provide ref-
erence parse trees for training examples. Instead,
our modified model replaces the gold-standard ref-
erence parse with the ?pseudo-gold? parse tree
Algorithm 1 AVERAGED PERCEPTRON TRAIN-
ING WITH RESPONSE-BASED UPDATE
Input: A set of training examples (ei, y?i ),
where ei is a NL sentence and y?i =
arg maxy?GEN(ei) EXEC(y)Output: The parameter vector W? , averaged
over all iterations 1...T
1: procedure PERCEPTRON
2: Initialize W? = 0
3: for t = 1...T, i = 1...n do
4: yi = arg maxy?GEN(ei) ?(ei, y) ? W?
5: if yi 6= y?i then
6: W? = W? + ?(ei, y?i )? ?(ei, yi)
7: end if
8: end for
9: end procedure
whose derived MR plan is most successful at get-
ting to the desired goal location. Thus, the third
component in our reranking model becomes an
evaluation function EXEC that maps a parse tree
y into a real number representing the success rate
(w.r.t. successfully reaching the intended destina-
tion) of the derived MR plan m composed from
y.
Additionally, we improve the perceptron train-
ing algorithm by using multiple reference parses
to update the weight vector W? . Although
we determine the pseudo-gold reference tree to
be the candidate parse y? such that y? =
arg maxy?GEN(e) EXEC(y), it may not actually be
the correct parse for the sentence. Other parses
may contain useful information for learning, and
therefore we devise a way to update weights us-
ing all candidate parses whose successful execu-
tion rate is greater than the parse preferred by the
currently learned model.
3.1 Response-Based Weight Updates
To circumvent the need for gold-standard refer-
ence parses, we select a pseudo-gold parse from
the candidates produced by the GEN function. In a
similar vein, when reranking semantic parses, Ge
and Mooney (2006) chose as a reference parse the
one which was most similar to the gold-standard
semantic annotation. However, in the navigation
task, the ultimate goal is to generate a plan that,
when actually executed in the virtual environment,
leads to the desired destination. Therefore, the
pseudo-gold reference is chosen as the candidate
parse that produces the MR plan with the great-
220
est execution success. This requires an external
module that evaluates the execution accuracy of
the candidate parses. For the navigation task, we
use the MARCO (MacMahon et al, 2006) ex-
ecution module, which is also used to evaluate
how well the overall system learns to follow direc-
tions (Chen and Mooney, 2011). Since MARCO
is nondeterministic when executing underspecified
plans, we execute each candidate plan 10 times,
and its execution rate is the percentage of trials
in which it reaches the correct destination. When
there are multiple candidate parses tied for the
highest execution rate, the one assigned the largest
probability by the baseline model is selected. Our
modified averaged perceptron procedure with such
a response-based update is shown in Algorithm 1.
One additional issue must be addressed when
computing the output of the GEN function. The fi-
nal plan MRs are produced from parse trees using
compositional semantics (see Kim and Mooney
(2012) for details). Consequently, the n-best parse
trees for the baseline model do not necessarily pro-
duce the n-best distinct plans, since many parses
can produce the same plan. Therefore, we adapt
the GEN function to produce the n best distinct
plans rather than the n best parses. This may
require examining many more than the n best
parses, because many parses have insignificant
differences that do not affect the final plan. The
score assigned to a plan is the probability of the
most probable parse that generates that plan. In
order to efficiently compute the n best plans, we
modify the exact n-best parsing algorithm devel-
oped by Huang and Chiang (2005). The modified
algorithm ensures that each plan in the computed
n best list produces a new distinct plan.
3.2 Weight Updates Using Multiple Parses
Typically, when used for reranking, the averaged
perceptron updates its weights using the feature-
vector difference between the current best pre-
dicted candidate and the gold-standard reference
(line 6 in Algorithm 1). In our initial modified
version, we replaced the gold-standard reference
parse with the pseudo-gold reference, which has
the highest execution rate amongst all candidate
parses. However, this ignores all other candidate
parses during perceptron training. However, it is
not ideal to regard other candidate parses as ?use-
less.? There may be multiple candidate parses with
the same maximum execution rate, and even can-
didates with lower execution rates could represent
the correct plan for the instruction given the weak,
indirect supervision provided by the observed se-
quence of human actions.
Therefore, we also consider a further mod-
ification of the averaged perceptron algorithm
which updates its weights using multiple candi-
date parses. Instead of only updating the weights
with the single difference between the predicted
and pseudo-gold parses, the weight vector W? is
updated with the sum of feature-vector differences
between the current predicted candidate and all
other candidates that have a higher execution rate.
Formally, in this version, we replace lines 5?6 of
Algorithm 1 with:
1: for all y ? GEN(ei) where y 6= yi and
EXEC(y) > EXEC(yi) do
2: W? = W? + (EXEC(y)? EXEC(yi))
?(?(ei, y)? ?(ei, yi))
3: end for
where EXEC(y) is the execution rate of the MR
plan m derived from parse tree y.
In the experiments below, we demonstrate that,
by exploiting multiple reference parses, this new
update rule increases the execution accuracy of
the final system. Intuitively, this approach gathers
additional information from all candidate parses
with higher execution accuracy when learning the
discriminative reranker. In addition, as shown in
line 2 of the algorithm above, it uses the differ-
ence in execution rates between a candidate and
the currently preferred parse to weight the update
to the parameters for that candidate. This allows
more effective plans to have a larger impact on the
learned model in each iteration.
4 Reranking Features
This section describes the features ? extracted
from parses produced by the generative model and
used to rerank the candidates.
4.1 Base Features
The base features adapt those used in previous
reranking methods, specifically those of Collins
(2002a), Lu et al (2008), and Ge and Mooney
(2006), which are directly extracted from parse
trees. In addition, we also include the log prob-
ability of the parse tree as an additional feature.
Figure 3 shows a sample full parse tree from our
baseline model, which is used when explaining the
221
L1: Turn(LEFT), Verify(front : SOFA, back : EASEL),
Travel(steps : 2), Verify(at : SOFA), Turn(RIGHT)
L6: Turn()
PhraseL6
WordL6
corner
PhXL6
Word?
the
PhXL6
WordL6
around
PhXL6
WordL6
turn
PhXL6
Word?
then
L3: Travel(steps : 2),
Verify(at : SOFA), Turn(RIGHT)
L5: Travel(), Verify(at : SOFA)
PhraseL5
WordL5
sofa
PhXL5
Word?
the
PhXL5
WordL5
find
L2: Turn(LEFT),
Verify(front : SOFA)
L4: Turn(LEFT)
PhraseL4
Word?
and
PhL4
WordL4
left
PhXL4
WordL4
Turn
Figure 3: Sample full parse tree for the sentence ?Turn left and find the soft then turn around the corner?
used to explain reranking features. Nonterminals representing MR plan components are shown, which
are labeled L1 to L6 for ease of reference. Additional nonterminals such as Phrase, Ph, PhX , and
Word are subsidiary ones for generating NL words from MR nonterminals. They are also shown in
order to represent the entire process of how parse trees are constructed (for details, refer to Kim and
Mooney (2012)).
reranking features below, each illustrated by an ex-
ample.
a) PCFG Rule. Indicates whether a particular
PCFG rule is used in the parse tree: f(L1 ?
L2L3) = 1.
b) Grandparent PCFG Rule. Indicates whether
a particular PCFG rule as well as the non-
terminal above it is used in the parse tree:
f(L3 ? L5L6|L1) = 1.
c) Long-range Unigram. Indicates whether a
nonterminal has a given NL word below it
in the parse tree: f(L2 ; left) = 1 and
f(L4 ; turn) = 1.
d) Two-level Long-range Unigram. Indicates
whether a nonterminal has a child nontermi-
nal which eventually generates a NL word in
the parse tree: f(L4 ; left|L2) = 1
e) Unigram. Indicates whether a nonterminal
produces a given child nonterminal or terminal
NL word in the parse tree: f(L1 ? L2) = 1
and f(L1 ? L3) = 1.
f) Grandparent Unigram. Indicates whether
a nonterminal has a given child nontermi-
nal/terminal below it, as well as a given parent
nonterminal: f(L2 ? L4|L1) = 1
g) Bigram. Indicates whether a given bigram of
nonterminal/terminals occurs for given a par-
ent nonterminal: f(L1 ? L2 : L3) = 1.
h) Grandparent Bigram. Same as Bigram, but
also includes the nonterminal above the parent
nonterminal: f(L3 ? L5 : L6|L1) = 1.
i) Log-probability of Parse Tree. Certainty as-
signed by the base generative model.
4.2 Predicate-Only Features
The base features above generally include non-
terminal symbols used in the parse tree. In the
grounded PCFG model, nonterminals are named
after components of the semantic representations
(MRs), which are complex and numerous. There
are ' 2,500 nonterminals in the grammar con-
structed for the navigation data, most of which
are very specific and rare. This results in a very
large, sparse feature space which can easily lead
222
the reranking model to over-fit the training data
and prevent it from generalizing properly.
Therefore, we also tried constructing more gen-
eral features that are less sparse. First, we con-
struct generalized versions of the base features
in which nonterminal symbols use only predicate
names and omit their arguments. In the navigation
task, action arguments frequently contain redun-
dant, rarely used information. In particular, the
interleaving verification steps frequently include
many details that are never actually mentioned in
the NL instructions. For instance, a nonterminal
for the MR
Turn(LEFT),
Verify(at:SOFA,front:EASEL),
Travel(steps:3)
is transformed into the predicate-only form
Turn(), Verify(), Travel()
, and then used to construct more general versions
of the base features described in the previous sec-
tion. Second, another version of the base features
are constructed in which nonterminal symbols in-
clude action arguments but omit all interleaving
verification steps. This is a somewhat more con-
servative simplification of the nonterminal sym-
bols. Although verification steps sometimes help
interpret the actions and their surrounding context,
they frequently cause the nonterminal symbols to
become unnecessarily complex and specific.
4.3 Descended Action Features
Finally, another feature group which we utilize
captures whether a particular atomic action in a
nonterminal ?descends? into one of its child non-
terminals or not. An atomic action consists of a
predicate and its arguments, e.g. Turn(LEFT),
Travel(steps:2), or Verify(at:SOFA).
When an atomic action descends into lower non-
terminals in a parse tree, it indicates that it is men-
tioned in the NL instruction and is therefore im-
portant. Below are several feature types related to
descended actions that are used in our reranking
model:
a) Descended Action. Indicates whether a given
atomic action in a nonterminal descends to the
next level. In Figure 3, f(Turn(LEFT)) = 1
since it descends into L2 and L4.
b) Descended Action Unigram. Same as De-
scended Action, but also includes the current
nonterminal: f(Turn(LEFT)|L1) = 1.
c) Grandparent Descended Action Unigram.
Same as Descended Action Unigram,
but additionally includes the parent
nonterminal as well as the current one:
f(Turn(LEFT)|L2, L1) = 1.
d) Long-range Descended Action Unigram. Indi-
cates whether a given atomic action in a non-
terminal descends to a child nonterminal and
this child generates a given NL word below it:
f(Turn(LEFT) ; left) = 1
5 Experimental Evaluation
5.1 Data and Methodology
The navigation data was collected by MacMahon
et al (2006), and includes English instructions
and human follower data.1 The data contains 706
route instructions for three virtual worlds. The in-
structions were produced by six instructors for 126
unique starting and ending location pairs over the
three maps. Each instruction is annotated with 1
to 15 human follower traces with an average of
10.4 actions per instruction. Each instruction con-
tains an average of 5.0 sentences each with an av-
erage of 7.8 words. Chen and Mooney (2011)
constructed a version of the data in which each
sentence is annotated with the actions taken by
the majority of followers when responding to this
sentence. This single-sentence version is used for
training. Manually annotated ?gold standard? for-
mal plans for each sentence are used for evaluation
purposes only.
We followed the same experimental methodol-
ogy as Kim and Mooney (2012) and Chen and
Mooney (2011). We performed ?leave one en-
vironment out? cross-validation, i.e. 3 trials of
training on two environments and testing on the
third. The baseline model is first trained on data
for two environments and then used to generate
the n = 50 best plans for both training and test-
ing instructions. As mentioned in Section 3.1, we
need to generate many more top parse trees to get
50 distinct formal MR plans. We limit the num-
ber of best parse trees to 1,000,000, and even with
this high limit, some training examples were left
with less than 50 distinct plans.2 Each candidate
1Data is available at http://www.cs.utexas.
edu/users/ml/clamp/navigation/
29.6% of the examples (310 out of total 3237) produced
less than 50 distinct MR plans in the evaluation. This was
mostly due to exceeding the parse-tree limit and partly be-
cause the baseline model failed to parse some NL sentences.
223
n 1 2 5 10 25 50
Parse Accuracy F1 74.81 79.08 82.78 85.32 87.52 88.62
Plan Execution Single-sentence 57.22 63.86 70.93 76.41 83.59 87.02Paragraph 20.17 28.08 35.34 40.64 48.69 53.66
Table 1: Oracle parse and execution accuracy for single sentence and complete paragraph instructions
for the n best parses.
plan is then executed using MARCO and its rate
of successfully reaching the goal is recorded. Our
reranking model is then trained on the training
data using the n-best candidate parses. We only
retain reranking features that appear (i.e. have a
value of 1) at least twice in the training data.
Finally, we measure both parse and execution
accuracy on the test data. Parse accuracy evalu-
ates how well a system maps novel NL sentences
for new environments into correct MR plans (Chen
and Mooney, 2011). It is calculated by compar-
ing the system?s MR output to the gold-standard
MR. Accuracy is measured using F1, the harmonic
mean of precision and recall for individual MR
constituents, thereby giving partial credit to ap-
proximately correct MRs. We then execute the re-
sulting MR plans in the test environment to see
whether they successfully reach the desired des-
tinations. Execution is evaluated both for sin-
gle sentence and complete paragraph instructions.
Successful execution rates are calculated by aver-
aging 10 nondeterministic MARCO executions.
5.2 Reranking Results
Oracle results
As typical in reranking experiments, we first
present results for an ?oracle? that always returns
the best result amongst the top-n candidates pro-
duced by the baseline system, thereby providing
an upper bound on the improvements possible
with reranking. Table 1 shows oracle accuracy for
both semantic parsing and plan execution for sin-
gle sentence and complete paragraph instructions
for various values of n. For oracle parse accuracy,
for each sentence, we pick the parse that gives
the highest F1 score. For oracle single-sentence
execution accuracy, we pick the parse that gives
the highest execution success rate. These single-
sentence plans are then concatenated to produce a
complete plan for each paragraph instruction in or-
der to measure overall execution accuracy. Since
making an error in any of the sentences in an in-
struction can easily lead to the wrong final destina-
tion, paragraph-level accuracies are always much
lower than sentence-level ones. In order to bal-
ance oracle accuracy and the computational ef-
fort required to produce n distinct plans, we chose
n = 50 for the final experiments since oracle per-
formance begins to asymptote at this point.
Response-based vs. gold-standard reference
weight updates
Table 2 presents reranking results for our proposed
response-based weight update (Single) for the
averaged perceptron (cf. Section 3.1) compared
to the typical weight update method using gold-
standard parses (Gold). Since the gold-standard
annotation gives the correct MR rather than a parse
tree for each sentence, Gold selects as a single
reference parse the candidate in the top 50 whose
resulting MR is most similar to the gold-standard
MR as determined by its parse accuracy. Ge and
Mooney (2006) employ a similar approach when
reranking semantic parses.
The results show that our response-based ap-
proach (Single) has better execution accuracy
than both the baseline and the standard approach
using gold-standard parses (Gold). However,
Gold does perform best on parse accuracy since
it explicitly focuses on maximizing the accuracy
of the resulting MR. In contrast, by focusing dis-
criminative training on optimizing performance
of the ultimate end task, our response-based ap-
proach actually outperforms the traditional ap-
proach on the final task. In addition, it only uti-
lizes feedback that is naturally available for the
task, rather than requiring an expert to laboriously
annotate each sentence with a gold-standard MR.
Even though Gold captures more elements of the
gold-standard MRs, it may miss some critical MR
components that are crucial to the final naviga-
tion task. The overall result is very promising be-
cause it demonstrates how reranking can be ap-
plied to grounded language learning tasks where
gold-standard parses are not readily available.
224
Parse Acc Plan Execution
F1 Single Para
Baseline 74.81 57.22 20.17
Gold 78.26 52.57 19.33
Single 73.32 59.65 22.62
Multi 73.43 62.81 26.57
Table 2: Reranking results comparing our
response-based methods using single (Single)
or multiple (Multi) pseudo-gold parses to the
standard approach using a single gold-standard
parse (Gold). Baseline refers to Kim and
Mooney (2012)?s system. Reranking results use
all features described in Section 4. ?Single? means
the single-sentence version and ?Para? means the
full paragraph version of the corpus.
Weight update with single vs. multiple
reference parses
Table 2 also shows performance when using mul-
tiple reference parse trees to update weights (cf.
Section 3.2). Using multiple parses (Multi)
clearly performs better for all evaluation met-
rics, particularly execution. As explained in Sec-
tion 3.2, the single-best pseudo-gold parse pro-
vides weak, ambiguous feedback since it only pro-
vides a rough estimate of the response feedback
from the execution module. Using a variety of
preferable parses to update weights provides a
greater amount and variety of weak feedback and
therefore leads to a more accurate model.3
Comparison of different feature groups
Table 3 compares reranking results using the dif-
ferent feature groups described in Section 4. Com-
pared to the baseline model (Kim and Mooney,
2012), each of the feature groups Base (base
features), Pred (predicate-only and verification-
removed features), and Desc (descended action
features) helps improve the performance of plan
execution for both single sentence and complete
paragraph navigation instructions. Among them,
Desc is the most effective group of features.
Combinations of the feature groups helps fur-
3We also tried extending Gold to use multiple reference
parses in the same manner, but this actually degraded its per-
formance for all metrics. This indicates that, unlike Multi,
parses other than the best one do not have useful information
in terms of optimizing normal parse accuracy. Instead, ad-
ditional parses seem to add noise to the training process in
this case. Therefore, updating with multiple parses does not
appear to be useful in standard reranking.
Features Parse Acc Plan ExecutionF1 Single Para
Baseline 74.81 57.22 20.17
Base 71.50 60.09 23.20
Pred 71.61 60.87 24.13
Desc 73.90 61.33 25.00
Base+Pred 69.52 61.49 26.24
Base+Desc 73.66 61.72 25.58
Pred+Desc 72.56 62.36 26.04
All 73.43 62.81 26.57
Table 3: Reranking results comparing different
sets of features. Base refers to base features (cf.
Section 4.1), Pred refers to predicate-only fea-
tures and also includes features based on remov-
ing interleaving verification steps (cf. Section 4.2),
Desc refers to descended action features (cf. Sec-
tion 4.3). All refers to all the features including
Base, Pred, and Desc. All results use weight
update with multiple reference parses (cf. Sec-
tion 3.2).
ther improve the plan execution performance, and
reranking using all of the feature groups (All)
performs the best, as expected. However, since
our model is optimizing plan execution during
training, the results for parse accuracy are always
worse than the baseline model.
6 Related Work
Discriminative reranking is a common machine
learning technique to improve the output of gen-
erative models. It has been shown to be effective
for various natural language processing tasks in-
cluding syntactic parsing (Collins, 2000; Collins,
2002b; Collins and Koo, 2005; Charniak and
Johnson, 2005; Huang, 2008), semantic parsing
(Lu et al, 2008; Ge and Mooney, 2006), part-
of-speech tagging (Collins, 2002a), semantic role
labeling (Toutanova et al, 2005), named entity
recognition (Collins, 2002c). machine translation
(Shen et al, 2004; Fraser and Marcu, 2006) and
surface realization in generation (White and Ra-
jkumar, 2009; Konstas and Lapata, 2012). How-
ever, to our knowledge, there has been no pre-
vious attempt to apply discriminative reranking
to grounded language acquisition, where gold-
standard reference parses are not typically avail-
able for training reranking models.
Our use of response-based training is similar
225
to work on learning semantic parsers from execu-
tion output such as the answers to database queries
(Clarke et al, 2010; Liang et al, 2011). Although
the demands of grounded language tasks, such as
following navigation instructions, are different, it
would be interesting to try adapting these alterna-
tive approaches to such problems.
7 Future Work
In the future, we would like to explore the con-
struction of better, more-general reranking fea-
tures that are less prone to over-fitting. Since
typical reranking features rely on the combina-
tion and/or modification of nonterminals appear-
ing in parse trees, for the large PCFG?s produced
for grounded language learning, such features are
very sparse and rare. Although the current features
provide a significant increase in performance, or-
acle results imply that an even larger benefit may
be achievable.
In addition, employing other reranking method-
ologies, such as kernel methods (Collins, 2002b),
and forest reranking exploiting a packed forest of
exponentially many parse trees (Huang, 2008), is
another area of future work. We also would like
to apply our approach to other reranking algo-
rithms such as SVMs (Joachims, 2002) and Max-
Ent methods (Charniak and Johnson, 2005).
8 Conclusions
In this paper, we have shown how to adapt dis-
criminative reranking to grounded language learn-
ing. Since typical grounded language learning
problems, such as navigation instruction follow-
ing, do not provide the gold-standard reference
parses required by standard reranking models, we
have devised a novel method for using the weaker
supervision provided by response feedback (e.g.
the execution of inferred navigation plans) when
training a perceptron-based reranker. This ap-
proach was shown to be very effective compared
to the traditional method of using gold-standard
parses. In addition, since this response-based su-
pervision is weak and ambiguous, we have also
presented a method for using multiple reference
parses to perform perceptron weight updates and
shown a clear further improvement in end-task
performance with this approach.
Acknowledgments
We thank anonymous reviewers for their helpful
comments to improve this paper. This work was
funded by the NSF grant IIS-0712907 and IIS-
1016312. Experiments were performed on the
Mastodon Cluster, provided by NSF Grant EIA-
0303609.
References
Benjamin Bo?rschinger, Bevan K. Jones, and Mark
Johnson. 2011. Reducing grounded learning tasks
to grammatical inference. In Proceedings of the
Conference on Empirical Methods in Natural Lan-
guage Processing, EMNLP ?11, pages 1416?1425,
Stroudsburg, PA, USA. Association for Computa-
tional Linguistics.
Eugene Charniak and Mark Johnson. 2005. Coarse-
to-fine n-best parsing and maxent discriminative
reranking. In Proceedings of the 43nd Annual Meet-
ing of the Association for Computational Linguistics
(ACL-05), pages 173?180, Ann Arbor, MI, June.
David L. Chen and Raymond J. Mooney. 2011. Learn-
ing to interpret natural language navigation instruc-
tions from observations. In Proceedings of the 25th
AAAI Conference on Artificial Intelligence (AAAI-
2011), San Francisco, CA, USA, August.
David L. Chen, Joohyun Kim, and Raymond J.
Mooney. 2010. Training a multilingual sportscaster:
Using perceptual context to learn language. Journal
of Artificial Intelligence Research, 37:397?435.
James Clarke, Dan Goldwasser, Ming-Wei Chang, and
Dan Roth. 2010. Driving semantic parsing from
the world?s response. In Proceedings of the Four-
teenth Conference on Computational Natural Lan-
guage Learning (CoNLL-2010), pages 18?27, Upp-
sala, Sweden, July. Association for Computational
Linguistics.
Michael Collins and Terry Koo. 2005. Discriminative
reranking for natural language parsing. Computa-
tional Linguistics, 31(1):25?69.
Michael Collins. 2000. Discriminative reranking for
natural language parsing. In Proceedings of the
Seventeenth International Conference on Machine
Learning (ICML-2000), pages 175?182, Stanford,
CA, June.
Michael Collins. 2002a. Discriminative training meth-
ods for hidden Markov models: Theory and ex-
periments with perceptron algorithms. In Proceed-
ings of the 2002 Conference on Empirical Meth-
ods in Natural Language Processing (EMNLP-02),
Philadelphia, PA, July.
Michael Collins. 2002b. New ranking algorithms for
parsing and tagging: Kernels over discrete struc-
tures, and the voted perceptron. In Proceedings of
226
the 40th Annual Meeting of the Association for Com-
putational Linguistics (ACL-2002), pages 263?270,
Philadelphia, PA, July.
Michael Collins. 2002c. Ranking algorithms for
named-entity extraction: Boosting and the voted
perceptron. In Proceedings of the 40th Annual
Meeting of the Association for Computational Lin-
guistics (ACL-2002), pages 489?496, Philadelphia,
PA.
Alexander Fraser and Daniel Marcu. 2006. Semi-
supervised training for statistical word alignment.
In Proceedings of the 21st International Conference
on Computational Linguistics and the 44th annual
meeting of the Association for Computational Lin-
guistics (ACL-06), pages 769?776, Stroudsburg, PA,
USA. Association for Computational Linguistics.
R. Ge and R. J. Mooney. 2006. Discriminative
reranking for semantic parsing. In Proceedings of
the 21st International Conference on Computational
Linguistics and 44th Annual Meeting of the Associa-
tion for Computational Linguistics (COLING/ACL-
06), Sydney, Australia, July.
Kevin Gold and Brian Scassellati. 2007. A robot that
uses existing vocabulary to infer non-visual word
meanings from observation. In Proceedings of the
22nd national conference on Artificial intelligence -
Volume 1, AAAI?07, pages 883?888. AAAI Press.
Liang Huang and David Chiang. 2005. Better k-
best parsing. In Proceedings of the Ninth Inter-
national Workshop on Parsing Technology, Parsing
?05, pages 53?64, Stroudsburg, PA, USA. Associa-
tion for Computational Linguistics.
Liang Huang. 2008. Forest reranking: Discrimina-
tive parsing with non-local features. In Proceedings
of ACL-08: HLT, pages 586?594, Columbus, Ohio,
June. Association for Computational Linguistics.
Thorsten Joachims. 2002. Optimizing search en-
gines using clickthrough data. In Proceedings of
the Eighth ACM SIGKDD International Conference
on Knowledge Discovery and Data Mining (KDD-
2002), Edmonton, Canada.
Joohyun Kim and Raymond J. Mooney. 2012. Un-
supervised PCFG induction for grounded language
learning with highly ambiguous supervision. In Pro-
ceedings of the Conference on Empirical Methods
in Natural Language Processing and Natural Lan-
guage Learning, EMNLP-CoNLL ?12.
Ioannis Konstas and Mirella Lapata. 2012. Concept-
to-text generation via discriminative reranking. In
Proceedings of the 50th Annual Meeting of the Asso-
ciation for Computational Linguistics: Long Papers
- Volume 1, ACL ?12, pages 369?378, Stroudsburg,
PA, USA. Association for Computational Linguis-
tics.
Percy Liang, Michael I. Jordan, and Dan Klein. 2011.
Learning dependency-based compositional seman-
tics. In Proceedings of ACL, Portland, Oregon, June.
Association for Computational Linguistics.
Wei Lu, Hwee Tou Ng, Wee Sun Lee, and Luke S.
Zettlemoyer. 2008. A generative model for pars-
ing natural language to meaning representations. In
Proceedings of the 2008 Conference on Empirical
Methods in Natural Language Processing (EMNLP-
08), Honolulu, HI, October.
Matt MacMahon, Brian Stankiewicz, and Benjamin
Kuipers. 2006. Walk the talk: connecting language,
knowledge, and action in route instructions. In pro-
ceedings of the 21st national conference on Artifi-
cial intelligence - Volume 2, AAAI?06, pages 1475?
1482. AAAI Press.
Deb Roy. 2002. Learning visually grounded words
and syntax for a scene description task. Computer
Speech and Language, 16(3):353?385.
Libin Shen, Anoop Sarkar, and Franz Josef Och. 2004.
Discriminative reranking for machine translation. In
Daniel Marcu Susan Dumais and Salim Roukos, ed-
itors, HLT-NAACL 2004: Main Proceedings, pages
177?184, Boston, Massachusetts, USA, May 2 -
May 7. Association for Computational Linguistics.
Kristina Toutanova, Aria Haghighi, and Christopher D.
Manning. 2005. Joint learning improves semantic
role labeling. In Proceedings of the 43nd Annual
Meeting of the Association for Computational Lin-
guistics (ACL-05), pages 589?596, Ann Arbor, MI,
June.
Michael White and Rajakrishnan Rajkumar. 2009.
Perceptron reranking for CCG realization. In Pro-
ceedings of the 2009 Conference on Empirical Meth-
ods in Natural Language Processing: Volume 1 -
Volume 1, EMNLP ?09, pages 410?419, Strouds-
burg, PA, USA. Association for Computational Lin-
guistics.
Chen Yu and Dana H. Ballard. 2004. On the integra-
tion of grounding language and learning objects. In
Proceedings of the Nineteenth National Conference
on Artificial Intelligence (AAAI-04), pages 488?493.
227
