Efficient probabilistic top-down and left-corner parsingt 
Br ian  Roark  and  Mark  Johnson  
Cognitive and Linguistic Sciences 
Box 1978, Brown University 
Providence, RI 02912, USA 
brian-roark@brown, edu mj @cs. brown, edu 
Abst rac t  
This paper examines efficient predictive broad- 
coverage parsing without dynamic program- 
ming. In contrast to bottom-up methods, 
depth-first op-down parsing produces partial 
parses that are fully connected trees spanning 
the entire left context, from which any kind of 
non-local dependency or partial semantic inter- 
pretation can in principle be read. We con- 
trast two predictive parsing approaches, top- 
down and left-corner parsing, and find both to 
be viable. In addition, we find that enhance- 
ment with non-local information ot only im- 
proves parser accuracy, but also substantially 
improves the search efficiency. 
1 In t roduct ion  
Strong empirical evidence has been presented 
over the past 15 years indicating that the hu- 
man sentence processing mechanism akes on- 
line use of contextual information i  the preced- 
ing discourse (Crain and Steedman, 1985; Alt- 
mann and Steedman, 1988; Britt, 1994) and in 
the visual environment (Tanenhaus et al, 1995). 
These results lend support o Mark Steedman's 
(1989) "intuition" that sentence interpretation 
takes place incrementally, and that partial in- 
terpretations are being built while the sentence 
is being perceived. This is a very commonly 
held view among psycholinguists today. 
Many possible models of human sentence pro- 
cessing can be made consistent with the above 
view, but the general assumption that must un- 
derlie them all is that explicit relationships be- 
tween lexical items in the sentence must be spec- 
ified incrementally. Such a processing mecha- 
tThis material is based on work supported by the 
National Science Foundation under Grant No. SBR- 
9720368. 
nism stands in marked contrast o dynamic pro- 
gramming parsers, which delay construction ofa 
constituent until all of its sub-constituents have 
been completed, and whose partial parses thus 
consist of disconnected tree fragments. For ex- 
ample, such parsers do not integrate a main verb 
into the same tree structure as its subject NP 
until the VP has been completely parsed, and 
in many cases this is the final step of the entire 
parsing process. Without explicit on-line inte- 
gration, it would be difficult (though not impos- 
sible) to produce partial interpretations on-line. 
Similarly, it may be difficult to use non-local 
statistical dependencies (e.g. between subject 
and main verb) to actively guide such parsers. 
Our predictive parser does not use dynamic 
programming, but rather maintains fully con- 
nected trees spanning the entire left context, 
which make explicit the relationships between 
constituents required for partial interpretation. 
The parser uses probabilistic best-first pars- 
ing methods to pursue the most likely analy- 
ses first, and a beam-search to avoid the non- 
termination problems typical of non-statistical 
top-down predictive parsers. 
There are two main results. First, this ap- 
proach works and, with appropriate attention 
to specific algorithmic details, is surprisingly 
efficient. Second, not just accuracy but also 
efficiency improves as the language model is 
made more accurate. This bodes well for fu- 
ture research into the use of other non-local (e.g. 
lexical and semantic) information to guide the 
parser. 
In addition, we show that the improvement 
in accuracy associated with left-corner parsing 
over top-down is attributable to the non-local 
information supplied by the strategy, and can 
thus be obtained through other methods that 
utilize that same information. 
421 
2 Parser  a rch i tec ture  
The parser proceeds incrementally from left to 
right, with one item of look-ahead. Nodes are 
expanded in a standard top-down, left-to-right 
fashion. The parser utilizes: (i) a probabilis- 
tic context-free grammar (PCFG), induced via 
standard relative frequency estimation from a 
corpus of parse trees; and (ii) look-ahead prob- 
abilities as described below. Multiple compet- 
ing partial parses (or analyses) are held on a 
priority queue, which we will call the pending 
heap. They are ranked by a figure of merit 
(FOM), which will be discussed below. Each 
analysis has its own stack of nodes to be ex- 
panded, as well as a history, probability, and 
FOM. The highest ranked analysis is popped 
from the pending heap, and the category at the 
top of its stack is expanded. A category is ex- 
panded using every rule which could eventually 
reach the look-ahead terminal. For every such 
rule expansion, a new analysis is created 1 and 
pushed back onto the pending heap. 
The FOM for an analysis is the product of the 
probabilities of all PCFG rules used in its deriva- 
tion and what we call its look-ahead probabil- 
ity (LAP). The LAP approximates the product 
of the probabilities of the rules that will be re- 
quired to link the analysis in its current state 
with the look-ahead terminal 2. That is, for a 
grammar G, a stack state \[C1 ... C,\] and a look- 
ahead terminal item w: 
(1) LAP  --- PG(\[C1. . Cn\] -~ wa) 
We recursively estimate this with two empir- 
ically observed conditional probabilities for ev- 
ery non-terminal Ci on the stack: /~(Ci 2+ w) 
and/~(Ci  -~ e). The LAP approximation for a 
given stack state and look-ahead terminal is: 
(2) PG(\[Ci . .. Ca\] wot) P(Ci w) + 
When the topmost stack category of an analy- 
sis matches the look-ahead terminal, the termi- 
nal is popped from the stack and the analysis 
1We count each of these as a parser state (or rule 
expansion) considered, which can be used as a measure 
of efficiency. 
2Since this is a non-lexicalized grammar, we are tak- 
ing pre-terminal POS markers as our terminal items. 
is pushed onto a second priority queue, which 
we will call the success heap. Once there are 
"enough" analyses on the success heap, all those 
remaining on the pending heap are discarded. 
The success heap then becomes the pending 
heap, and the look-ahead is moved forward to 
the next item in the input string. When the end 
of the input string is reached, the analysis with 
the highest probability and an empty stack is 
returned as the parse. If no such parse is found, 
an error is returned. 
The specifics of the beam-search dictate how 
many analyses on the success heap constitute 
"enough". One approach is to set a constant 
beam width, e.g. 10,000 analyses on the suc- 
cess heap, at which point the parser moves to 
the next item in the input. A problem with 
this approach is that parses towards the bottom 
of the success heap may be so unlikely relative 
to those at the top that they have little or no 
chance of becoming the most likely parse at the 
end of the day, causing wasted effort. An al- 
ternative approach is to dynamically vary the 
beam width by stipulating a factor, say 10 -5, 
and proceed until the best analysis on the pend- 
ing heap has an FOM less than 10 -5 times the 
probability of the best analysis on the success 
heap. Sometimes, however, the number of anal- 
yses that fall within such a range can be enor- 
mous, creating nearly as large of a processing 
burden as the first approach. As a compromise 
between these two approaches, we stipulated a
base beam factor a (usually 10-4), and the ac- 
tual beam factor used was a ?/~, where/3 is the 
number of analyses on the success heap. Thus, 
when f~ is small, the beam stays relatively wide, 
to include as many analyses as possible; but as 
/3 grows, the beam narrows. We found this to 
be a simple and successful compromise. 
Of course, with a left recursive grammar, such 
a top-down parser may never terminate. If 
no analysis ever makes it to the success heap, 
then, however one defines the beam-search, a 
top-down depth-first search with a left-recursive 
grammar will never terminate. To avoid this, 
one must place an upper bound on the number 
of analyses allowed to be pushed onto the pend- 
ing heap. If that bound is exceeded, the parse 
fails. With a left-corner strategy, which is not 
prey to left recursion, no such upper bound is 
necessary. 
422 
(a) (b) (c) (d) 
NP NP 
DT+JJ+JJ NN DT NP-DT 
DT+JJ JJ cat the JJ NP-DT-JJ 
DT JJ happy fat JJ NN 
I I I I 
the fat happy cat 
NP NP 
DT NP-DT DT NP-DT 
l 
the JJ NP-DT-JJ tLe JJ NP-DT-JJ 
_J 
fat JJ NP-DT-JJ-JJ fiat JJ NP-DT-JJ-JJ 
happy NN happy NN NP-DT-JJ-JJ-NN 
I I I 
cat cat  e 
Figure 1: Binaxized trees: (a) left binaxized (LB); (b) right binaxized to binary (RB2); (c) right 
binaxized to unary (RB1); (d) right binarized to nullaxy (RB0) 
3 Grammar  t rans forms 
Nijholt (1980) characterized parsing strategies 
in terms of announce points: the point at which 
a parent category is announced (identified) rel- 
ative to its children, and the point at which the 
rule expanding the parent is identified. In pure 
top-down parsing, a parent category and the 
rule expanding it are announced before any of 
its children. In pure bottom-up parsing, they 
are identified after all of the children. Gram- 
mar transforms are one method for changing 
the announce points. In top-down parsing with 
an appropriately binaxized grammar, the pax- 
ent is identified before, but the rule expanding 
the parent after, all of the children. Left-corner 
parsers announce a parent category and its ex- 
panding rule after its leftmost child has been 
completed, but before any of the other children. 
3.1 De lay ing  ru le  ident i f i cat ion  through 
b inar i za t ion  
Suppose that the category on the top of the 
stack is an NP and there is a determiner (DT) 
in the look-ahead. In such a situation, there is 
no information to distinguish between the rules 
NP ~ DT J J  NN andNP- -+DT J J  NNS.  
If the decision can be delayed, however, until 
such a time as the relevant pre-terminal is in 
the look-ahead, the parser can make a more in- 
formed decision. Grammar binaxization is one 
way to do this, by allowing the parser to use 
a rule like NP --+ DT NP-DT,  where the new 
non-terminal NP-DT can expand into anything 
that follows a DT in an NP. The expansion of 
NP-DT occurs only after the next pre-terminal 
is in the look-ahead. Such a delay is essential 
for an efficient implementation of the kind of 
incremental parser that we are proposing. 
There axe actually several ways to make a 
grammar binary, some of which are better than 
others for our parser. The first distinction that 
can be drawn is between what we will call left 
binaxization (LB) versus right binaxization (RB, 
see figure 1). In the former, the leftmost items 
on the righthand-side of each rule are grouped 
together; in the latter, the rightmost items on 
the righthand-side of the rule are grouped to- 
gether. Notice that, for a top-down, left-to-right 
parser, RB is the appropriate transform, be- 
cause it underspecifies the right siblings. With 
LB, a top-down parser must identify all of the 
siblings before reaching the leftmost item, which 
does not aid our purposes. 
Within RB transforms, however, there is some 
variation, with respect o how long rule under- 
specification is maintained. One method is to 
have the final underspecified category rewrite as 
a binary rule (hereafter RB2, see figure lb). An- 
other is to have the final underspecified category 
rewrite as a unary rule (RB1, figure lc). The 
last is to have the final underspecified category 
rewrite as a nullaxy rule (RB0, figure ld). No- 
tice that the original motivation for RB, to delay 
specification until the relevant items are present 
in the look-ahead, is not served by RB2, because 
the second child must be specified without being 
present in the look-ahead. RB0 pushes the look- 
ahead out to the first item in the string after the 
constituent being expanded, which can be use- 
ful in deciding between rules of unequal length, 
e.g. NP---+ DT NN and NP  ~ DT NN NN.  
Table 1 summarizes some trials demonstrat- 
423 
Binarization Rules in Percent of Avg. States Avg. Labelled Avg. MLP Ratio of Avg. 
Grammar Sentences Considered Precision and Labelled Prob to Avg. 
Parsed* Recall t Prec/Rec t MLP Prob t 
None 14962 34.16 19270 .65521 .76427 .001721 
LB 37955 33.99 96813 .65539 .76095 .001440 
I~B1 29851 91.27 10140 .71616 .72712 .340858 
RB0 41084 97.37 13868 .73207 .72327 .443705 
Beam Factor = 10 -4 *Length ~ 40 (2245 sentences in F23 Avg. length -- 21.68) to f  those sentences parsed 
Table 1: The effect of different approaches to binarization 
ing the effect of different binarization ap- 
proaches on parser performance. The gram- 
mars were induced from sections 2-21 of the 
Penn Wall St. Journal Treebank (Marcus et 
al., 1993), and tested on section 23. For each 
transform tested, every tree in the training cor- 
pus was transformed before grammar induc- 
tion, resulting in a transformed PCFG and look- 
ahead probabilities estimated in the standard 
way. Each parse returned by the parser was de- 
transformed for evaluation 3. The parser used 
in each trial was identical, with a base beam 
factor c~ = 10 -4. The performance is evaluated 
using these measures: (i) the percentage of can- 
didate sentences for which a parse was found 
(coverage); (ii) the average number of states 
(i.e. rule expansions) considered per candidate 
sentence (efficiency); and (iii) the average la- 
belled precision and recall of those sentences for 
which a parse was found (accuracy). We also 
used the same grammars with an exhaustive, 
bottom-up CKY parser, to ascertain both the 
accuracy and probabil ity of the maximum like- 
lihood parse (MLP). We can then additionally 
compare the parser's performance to the MLP's 
on those same sentences. 
As expected, left binarization conferred no 
benefit o our parser. Right binarization, in con- 
trast, improved performance across the board. 
RB0 provided a substantial improvement in cov- 
erage and accuracy over RB1, with something 
of a decrease in efficiency. This efficiency hit 
is partly attr ibutable to the fact that the same 
tree has more nodes with RB0. Indeed, the effi- 
ciency improvement with right binarization over 
the standard grammar is even more interesting 
in light of the great increase in the size of the 
grammars. 
3See Johnson (1998) for details of the transform/de- 
transform paradigm. 
It is worth noting at this point that, with the 
RB0 grammar, this parser is now a viable broad- 
coverage statistical parser, with good coverage, 
accuracy, and efficiency 4. Next we considered 
the left-corner parsing strategy. 
3.2 Lef t -corner  pars ing  
Left-corner (LC) parsing (Rosenkrantz and 
Lewis II, 1970) is a well-known strategy that 
uses both bottom-up evidence (from the left 
corner of a rule) and top-down prediction (of 
the rest of the rule). Rosenkrantz and Lewis 
showed how to transform a context-free gram- 
mar into a grammar that, when used by a top- 
down parser, follows the same search path as an 
LC parser. These LC grammars allow us to use 
exactly the same predictive parser to evaluate 
top-down versus LC parsing. Naturally, an LC 
grammar performs best with our parser when 
right binarized, for the same reasons outlined 
above. We use transform composition to apply 
first one transform, then another to the output 
of the first. We denote this A o B where (A o 
B) (t) = B (A (t)). After applying the left-corner 
transform, we then binarize the resulting gram- 
mar 5, i.e. LC o RB. 
Another probabilistic LC parser investigated 
(Manning and Carpenter, 1997), which uti- 
lized an LC parsing architecture (not a trans- 
formed grammar), also got a performance boost 
4The very efficient bottom-up statistical parser de- 
tailed in Charniak et al (1998) measured efficiency in 
terms of total edges popped. An edge (or, in our case, a 
parser state) is considered when a probability is calcu- 
lated for it, and we felt that this was a better efficiency 
measure than simply those popped. As a baseline, their 
parser considered an average of 2216 edges per sentence 
in section 22 of the WSJ corpus (p.c.). 
5Given that the LC transform involves nullary pro- 
ductions, the use of RB0 is not needed, i.e. nullary pro- 
ductions need only be introduced from one source. Thus 
binarization with left corner is always to unary (RB1). 
424 
Transform Rules in Pct. of Avg. States Avg Labelled Avg. MLP Ratio of Avg. 
Grammar Sentences Considered Precision and Labelled Prob to Avg. 
Parsed* Recall t Prec/Rec t MLP Prob t 
Left Corner (LC) 21797 91.75 9000 .76399 .78156 .175928 
LB o LC 53026 96.75 7865 .77815 .78056 .359828 
LC o RB 53494 96.7 8125 .77830 .78066 .359439 
LC o RB o ANN 55094 96.21 7945 .77854 .78094 .346778 
RB o LC 86007 93.38 4675 .76120 .80529 
*Length _ 40 (2245 sentences in F23 - Avg. length ---- 21.68 Beam Factor ---- 10  -4  
.267330 
tOf those sentences parsed 
Table 2: Left Corner Results 
through right binarization. This, however, is 
equivalent o RB o LC, which is a very differ- 
ent grammar from LC o RB. Given our two bi- 
narization orientations (LB and RB), there are 
four possible compositions of binarization and 
LC transforms: 
(a) LB o LC (b) RB o LC (c) LC o LB (d) LC o RB 
Table 2 shows left-corner results over various 
conditions 6. Interestingly, options (a) and (d) 
encode the same information, leading to nearly 
identical performance 7. As stated before, right 
binarization moves the rule announce point 
from before to after all of the children. The 
LC transform is such that LC o RB also delays 
parent identification until after all of the chil- 
dren. The transform LC o RB o ANN moves the 
parent announce point back to the left corner by 
introducing unary rules at the left corner that 
simply identify the parent of the binarized rule. 
This allows us to test the effect of the position of 
the parent announce point on the performance 
of the parser. As we can see, however, the ef- 
fect is slight, with similar performance on all 
measures. 
RB o LC performs with higher accuracy than 
the others when used with an exhaustive parser, 
but seems to require a massive beam in order to 
even approach performance at the MLP level. 
Manning and Carpenter (1997) used a beam 
width of 40,000 parses on the success heap at 
each input item, which must have resulted in an 
order of magnitude more rule expansions than 
what we have been considering up to now, and 
6Option (c) is not the appropr iate  k ind of b inar izat ion 
for our parser, as argued in the previous section, and so 
is omitted.  
7The difference is due to the int roduct ion of vacuous 
unary  rules with RB. 
yet their average labelled precision and recall 
(.7875) still fell well below what we found to be 
the MLP accuracy (.7987) for the grammar. We 
are still investigating why this grammar func- 
tions so poorly when used by an incremental 
parser. 
3.3 Non- loca l  annotat ion  
Johnson (1998) discusses the improvement of 
PCFG models via the annotation of non-local in- 
formation onto non-terminal nodes in the trees 
of the training corpus. One simple example 
is to copy the parent node onto every non- 
terminal, e.g. the rule S ~ NP  VP  becomes 
S ~ NP~S VP~S. The idea here is that the 
distribution of rules of expansion of a particular 
non-terminal may differ depending on the non- 
terminal's parent. Indeed, it was shown that 
this additional information improves the MLP 
accuracy dramatically. 
We looked at two kinds of non-local infor- 
mation annotation: parent (PA) and left-corner 
(LCA). Left-corner parsing gives improved accu- 
racy over top-down or bottom-up parsing with 
the same grammar. Why? One reason may be 
that the ancestor category exerts the same kind 
of non-local influence upon the parser that the 
parent category does in parent annotation. To 
test this, we annotated the left-corner ancestor 
category onto every leftmost non-terminal cat- 
egory. The results of our annotation trials are 
shown in table 3. 
There are two important points to notice from 
these results. First, with PA we get not only the 
previously reported improvement in accuracy, 
but additionally a fairly dramatic decrease in 
the number of parser states that must be vis- 
ited to find a parse. That is, the non-local in- 
formation not only improves the final product of 
the parse, but it guides the parser more quickly 
425 
Transform Rules in Pct. of Avg. States Avg Labelled Avg. MLP Ratio of Avg. 
Grammar Sentences Considered Precision and Labelled Prob to Avg. 
Parsed* Recall t Prec/Rec t MLP Prob t 
RB0 41084 97.37 13868 .73207 .72327 .443705 
PA o RB0 63467 95.19 8596 .79188 .79759 .486995 
LC o RB 53494 96.7 8125 .77830 .78066 .359439 
LCA o RB0 58669 96.48 11158 .77476 .78058 .495912 
PA o LC o RB 80245 93.52 4455 .81144 .81833 .484428 
Beam Factor -- 10 -4 *Length ~ 40 (2245 sentences in F23 - Avg. length -= 21.68) tOf those sentences parsed 
Table 3: Non-local annotation results 
to the final product. The annotated grammar 
has 1.5 times as many rules, and would slow 
a bottom-up CKY parser proportionally. Yet 
our parser actually considers far fewer states en 
route to the more accurate parse. 
Second, LC-annotation gives nearly all of the 
accuracy gain of left-corner parsing s, in support 
of the hypothesis that the ancestor information 
was responsible for the observed accuracy im- 
provement. This result suggests that if we can 
determine the information that is being anno- 
tated by the troublesome RB o LC transform, 
we may be able to get the accuracy improve- 
ment with a relatively narrow beam. Parent- 
annotation before the LC transform gave us the 
best performance of all, with very few states 
considered on average, and excellent accuracy 
for a non-lexicalized grammar. 
4 Accuracy /E f f i c iency  t radeof f  
One point that deserves to be made is that there 
is something of an accuracy/efficiency tradeoff 
with regards to the base beam factor. The re- 
sults given so far were at 10 -4 , which func- 
tions pretty well for the transforms we have 
investigated. Figures 2 and 3 show four per- 
formance measures for four of our transforms 
at base beam factors of 10 -3 , 10 -4 , 10 -5 , and 
10 -6. There is a dramatically increasing effi- 
ciency burden as the beam widens, with vary- 
ing degrees of payoff. With the top-down trans- 
forms (RB0 and PA o RB0), the ratio of the av- 
erage probabil ity to the MLP probability does 
improve substantially as the beam grows, yet 
with only marginal improvements in coverage 
and accuracy. Increasing the beam seems to do 
less with the left-corner transforms. 
SThe rest could very well be within noise. 
5 Conc lus ions  and  Future  Research  
We have examined several probabilistic predic- 
tive parser variations, and have shown the ap- 
proach in general to be a viable one, both in 
terms of the quality of the parses, and the ef- 
ficiency with which they are found. We have 
shown that the improvement of the grammars 
with non-local information not only results in 
better parses, but guides the parser to them 
much more efficiently, in contrast to dynamic 
programming methods. Finally, we have shown 
that the accuracy improvement that has been 
demonstrated with left-corner approaches can 
be attr ibuted to the non-local information uti- 
lized by the method. 
This is relevant to the study of the human 
sentence processing mechanism insofar as it 
demonstrates that it is possible to have a model 
which makes explicit the syntactic relationships 
between items in the input incrementally, while 
still scaling up to broad-coverage. 
Future research will include: 
? lexicalization of the parser 
? utilization of fully connected trees for ad- 
ditional syntactic and semantic processing 
? the use of syntactic predictions in the beam 
for language modeling 
? an examination of predictive parsing with 
a left-branching language (e.g. German) 
In addition, it may be of interest to the psy- 
cholinguistic ommunity if we introduce a time 
variable into our model, and use it to compare 
such competing sentence processing models as 
race-based and competition-based parsing. 
Re ferences  
G. Altmann and M. Steedman. 1988. Interac- 
tion with context during human sentence pro- 
cessing. Cognition, 30:198-238. 
426 
x lO  4 Average States Considered per Sentence 
98 
96 
94 
14 i i 
RB0  
. . . . . .  LC  0 RB 
12 - - - PA  0 RB0 
. . . . .  PA 0 LC  0 RB 
10 
8 
6 
4 q " - 
0r -  
10 -3 10 .-4 Base Beam Factor 10 -s  10-6 
Percentage of Sentences Parsed 
100 
RB0 
. . . . . .  LC  o RB 
- - - PAo  RB0 ~ .,,, ,  = 
............... PAoLCoRB ~,~"~,.....,.,"'~, . . . . . . .  . ~ ~ . 
92 ~ ,4"~ 
90 
880_ 3 I = 
10 ..4 Base Beam Factor 10 -5 10 -6 
Figure 2: Changes in performance with beam factor variation 
M. Britt. 1994. The interaction of referential 
ambiguity and argument structure. Journal 
o/ Memory and Language, 33:251-283. 
E. Charniak, S. Goldwater, and M. Johnson. 
1998. Edge-based best-first chart parsing. In 
Proceedings of the Sixth Workshop on Very 
Large Corpora, pages 127-133. 
S. Crain and M. Steedman. 1985. On not be- 
ing led up the garden path: The use of con- 
text by the psychological parser. In D. Dowty, 
L. Karttunen, and A. Zwicky, editors, Natu- 
ral Language Parsing. Cambridge University 
Press, Cambridge, UK. 
M. Johnson. 1998. PCFG models of linguistic 
tree representations. Computational Linguis- 
tics, 24:617-636. 
C. Manning and B. Carpenter. 1997. Prob- 
abilistic parsing using left corner language 
models. In Proceedings of the Fifth Interna- 
tional Workshop on Parsing Technologies. 
427 
Average  Labelled Precision and Recal l  
82 , , 
81 
80 
79 
78 
o~ 7~ 
(1. 
76 
75 
74 
73 
72 
10"-3 
0.65 
0.6 
0.55 
0.5 
.o 
0,45 rr 
0 .4 
0.35 
0.3 
0.25 
10 -3 
RB0 
. . . . . .  LC o RB 
- - - PAo RB0 
PA O LC  o RB 
i 
10 -4 
i 
Base Beam Factor 10-6  10 -s 
Average Ratio of Parse Probabil ity to Maximum Likelihood Probability 
, RB0 -' ' 
. . . . . .  LC o RB 
- - - PAo  RB0 / ~ ~.  - " 
I I 
10 -4 Base Beam Factor 10 -s 10 -6 
Figure 3: Changes in performance with beam factor variation 
M.P. Marcus, B. Santorini, and M.A. 
Marcinkiewicz. 1993. Building a large 
annotated corpus of English: The Penn 
Treebank. Computational Linguistics, 
19(2):313-330. 
A. Nijholt. 1980. Context-/tee Grammars: Cov- 
ers, Normal Forms, and Parsing. Springer 
Verlag, Berlin. 
S.J. Rosenkrantz and P.M. Lewis II. 1970. De- 
terministic left corner parsing. In IEEE Con- 
ference Record of the 11th Annual Symposium 
on Switching and Automata, pages 139-152. 
M. Steedman. 1989. Grammar, interpreta- 
tion, and processing from the lexicon. In 
W. Marslen-Wilson, editor, Lexical represen- 
tation and process. MIT Press, Cambridge, 
MA. 
M. Tanenhaus, M. Spivey-Knowlton, K. Eber- 
hard, and J. Sedivy. 1995. Integration of vi- 
sual and linguistic information during spoken 
language comprehension. Science, 268:1632- 
1634. 
428 
