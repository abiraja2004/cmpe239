26 
1965 International Conference on Computational Linguistics 
SPECIF ICAT IONS FOR A TREE PROCESSING LANGUAGE 
by 
R. Tabory, F. L. Zarnfaller 
International Business Machines Corporation 
Thomas Jo Watson Research Center 
Yorktown Heights, New York 
"% ~ y /  ,~ ..,. ! 
? -~, , , ,<;o? /  
SPECIF ICAT IONS FOR A TREE PROCESSING LANGUAGE 
F. 
by 
R. Tabory 
L0 Zarnfaller 
International Business Machines Corporation 
Thomas  J. Watson Research Center 
Yorktown Heights~ New York  
ABSTRACT:  Descr ip t ion  of t rees  and s t r ings  - both composed of 
lex ica l  va lues  - match ing  of t rees  and s t r ings  aga ins t  par t ia l l y  o r  
to ta l ly  de f ined  pat tern  and  operat ions  on t rees  and s t r ings  fo rm the 
essent ia l  par t  of the Processor?  The  not ion  of s t r ing  has  been ex -  
tended to s t r ings  embedded in or  ext racted  f rom t rees ,  and a mod i -  
f ied  version of the COMIT  rewriting rule applied to these strings. 
Variables ranging over lexical values, strings and trees can be intro- 
duced and operated on according to a "pushdown" principle. Besides, 
variables can be operated either ir~ the "connected" or "autonomous t' 
mode, depending whether their connections with some parent struc- 
ture are remembered  or not. Variable value structures can be 
matched against patterns or compared  among themselves. Trans-  
formations on trees and strings are defined, allowing for the devel- 
opment  of a given data structure into a new one. All these features 
and devices were  defined by extracting the elementary steps with 
which linguists compose  their operations and by generalizing these 
steps reasonably. The resulting language specifications are pro- 
posed for discussing the solution of a class of non-numerical  pro- 
g ramming problems. 
Introduction 
Recent developments in computational linguistics have shown the 
need for a convenient p rogramming formal ism enabling linguists to 
handle data processing problems of natural languages. Especially 
tree and an extended kind of string processing have to be made con- 
ceptually easy for the linguistically oriented computer  user. This 
paper proposes specifications for such a language; it should be thought 
of - theoretically only, since its implementation is not planned presently- 
as a procedure package attached to NPL  (New Programming Language). 
The reason for this is the desire to take full advantage of the 
highlights of a modern  higher level p rogramming language as well as 
of the devices any general purpose programming system is in pos- 
session of. Consequently, the operations described in this paper 
should be thought of as being complemented by the full power of NPL ,  
the most  interesting features of which - f rom the viewpoint of non- 
numerical processing - are: recursive procedure calls, dynamic 
storage a11ocation; numeric, character string and bit string data 
arranged in structures and multi-dimensional arrays, etc. 
Description of trees and strings, both composed of lexical values, 
and operations on them form the essential part of the Processor? The 
word  "processor" covers both a programming language, and a data 
organizing system in the computer memory?  As far as string descrip- 
tions and string processing is concerned, the influence of COMIT  was 
dominant in elaborating the relevant part of the Processor, but the 
notion of string has been extended to strings embedded in or extracted 
f rom trees. Other existing programming languages and linguistic 
p rogramming systems were  also taken into consideration, they are 
al l  ment ioned  in the Reference  List ,  
The def in i t ion of the features  of the P rocessor  has been  accom-  
p l i shed by ext ract ing  the e lementary  steps with which  l inguists  compose  
the i r  h igher  leve l  syntact ic  operat ions  and by a reasonab le  genera l i za -  
t ion of these steps. Some of these devices are, however, fairly gen- 
eral and any kind of tree processing, not only a syntactically oriented 
one, would introduce them. 
Data and Variables 
There  are three basic kinds of data the Processor  can handle: 
lexical values, strings and trees. A lexical value is a character 
string; a string (somet imes  referred to as "lexical" string, as 
opposed to a character string) is an ordered sequence of lexical 
values separated by some conventionally chosen delimiter; a tree is 
a partially ordered set of lexical values, where  each e lement has one 
and only one ancestor, except the "root" of the tree which  has no 
ancestor at allo Besides, elements sharing the same ancestor are 
called siblings and such a sibling set is totally ordered? Thus, each 
e lement of the tree has at most  one "left" and at most  one "right" 
sibling? 
Lexical values can be numerical ly or logically tagged. In order 
to avoid multiple tagging a tag is a fixed length dec imal  integer, 
each digit of which can be processed separately. Besides a digit can 
be logically interpreted as True  or False, according to whether  it 
is non-zero or zero. 
Variables of the fo rm Ln, Sn and Tn  - where  n is an integer 
freely chosen by the user - take, respectively, lexical values, strings 
and trees as values. We shall see that these variables have value 
lists somet imes,  instead of a single value. 
It results f rom the above described data definitions that data 
can be embedded in other data: a lexical value can be a string con- 
stituent or a tree element, a string can be a portion of a broader  
string or extracted f rom a tree, a tree can be a subtree of a larger 
tree? In order to handle this property of the data, a variable can be 
operated in two modes :  the autonomous  or the connected mode?  At 
4 
each  ins tant  a l l  var iab les  in t roduced have  a we l l  de f ined  "autonomy 
s ta tus"  determin ing  the mode in wh ich  each  var iab le  is operated  on. 
Th is  s ta tus  is the same for  a l l  va lues  of a var iab le .  The mean ing  
of the two modes  is the fo l lowing:  
In the connected  mode al l  va lues  of a var iab le  mainta in  the i r  
connect ions  wi th  the la rger  data  s t ructure  to wh ich  they  be long .  In 
o ther  words  a connected  var iab le  " remembers"  its connect ions  w i th  
some parent  s t ructure  and  th is  feature  can  be used  for  fu r ther  pro -  
cess ing  of that  parent  s t ructure .  Moreover ,  these  connect ions  are  
automat ica l ly  updated  when the parent  s t ructure  undergoes  a mod i -  
f i ca t ion .  The k ind  of updat ing  depends  on the way  the par t i cu la r  
va lue  was  ass igned to the var iab le  and on the mod i f i ca t ion  occur r ing  
in the parent  s t ructure .  
In the autonomous  mode var iab les  don ' t  have  connect ions  at a l l .  
They  re fer  to data  that  a re  independent  of o ther  data ,  except  data  
embedded in the autonomous  s t ructures  in quest ion .  Var iab les  
car ry ing  input  data  into the computer  a re  made autonomous  by the 
Processor .  Var iab les  in t roduced in var ious  s ta tements  (except  in -  
put s ta tements )  a re  set  to the connected  mode;  the s ta tement  
CREATE var iab le  
c reates  an autonomous  var iab le  w i th  an empty  va lue  l i s t .  In o rder  
to change the s ta tus  of a var iab le  the s ta tement  
AUTONOMY var iab le  
can  be used .  Upon execut ion  of this s ta tement  data  re fer red  to by 
the var iab le  a re  cop ied  down in some par t  of the s torage  and the 
var iab le  is made autonomous .  To change the s ta tus  in the o ther  
d i rec t ion ,  f rom autonomous  to connected ,  some la ter  descr ibed  
5 
t rans format ion  s ta tements  have  to be used .  Genera l ly ,  some s ta te -  
ments  may change the autonomy s ta tus  of a var iab le .  These  changes  
w i l l  be descr ibed  w i th  these  commands ,  
It is poss ib le  to check  the  autonomy s ta tus  of a var iab le .  The  
pred icate  
B AUTONOMY var iab le  
per fo rms th i s  funct ion .  B s tands  for  a log ica l  var iab le  (var iab le  
rang ing  over  b i t  s t r ings  of  length  one) .  B is se t  to T rue  if  the  argu-  
ment  var iab le  is autonomoas ,  to Fa lse  o therwise .  
Va lue  Ass ignment  S ta tements  
In the  fo r thcoming  chapters  s ta tements  w i l l  be  descr ibed  wh ich  
ass ign  va lues  to var iab les .  If the  var iab le  to wh ich  va lues  a re  ass igned  
has  a l ready  a non-empty  va lue  l i s t  the  new va lues  ass igned  to th is  
var iab le  w i l l  be added to the  l i s t ,  at  the beg inn ing  of it, in a "push-  
down"  manner ,  
Va lue  ass ignment  s ta tements  use  a l so  var iab les  somet imes ,  as  
arguments of the statement. In such a case the first item on the 
value list of the argument  variable is taken into consideration, and 
referred to hereafter as "the value" of the variable, though other 
values may follow it on the list. If the value list is empty) the 
value assignment statement amounts to a non-operation. 
Parent referencing is another prob lem that arises naturally in 
value assignment statements, that is to say the prob lem of naming 
the data where f rom the variable will get values assigned, according 
to the specifications of the statement. Two cases exist: 
(a) The parent reference is mandatory in the value assignment 
command.  Th is  is  the  case  when the  s ta tement  has  no sense  at  a l l  
w i thout  a parent  re ference .  
(b) The  parent  re ference  is opt iona l .  In  th i s  case  the  fo l low ing  
ru les  preva i l :  i f  i t  is  ment ioned ,  the  va lue  ass igned  is ent i re ly  con-  
ta ined  in the  spec i f ied  parent  re ference ,  or  e l se  (if no su i tab le  va lues  
a re  found w i th in  the  re ference)  the  ass ignment  s ta tement  is  a non-  
operat ion .  If i t  is not  ment ioned ,  va lues  w i l l  be co l lec ted  f rom the 
la rgest  autonomous  data  to wh ich  the  argument  var iab le  va lue  of the  
va lue  ass ignment  s ta tement  is connected .  
Parent  References  are  of  the  fo rm (in Vn}, where  Vn is a var iab le  
name (Tree  or  S t r ing) .  In the fo r thcoming  chapters  they  w i l l  be 
ment ioned ,  in s ta tement  descr ip t ions ,  as  "Opt iona l  Parent  Reference"  
or  "Mandatory  Parent  Reference" .  The  word  "parent"  might  be re -  
p laced  by  "s t r ing" ,  o r  " t ree" ,  e tc .  when a res t r i c t ive  cond i t ion  of 
th i s  nature  preva i l s ,  accord ing  to the  nature  of  the  s ta tement .  
Va lue  Ass ignment  to Lex ica l  Var iab les  
Ass ign ing  a va lue  to a lex ica l  var iab le  can  take  p lace ,  in  p r inc ip le ,  
in th ree  poss ib le  ways :  
(1) Abso lu te  Ass ignment  - The  lex ica l  va lue  co l lec ted  f rom a 
t ree  or  a s t r ing  is des ignated  by  i ts  "abso lu te  locat ion"  in  the  
parent  s t ruc ture ,  i .e . ,  i ts  I verson 's  index  vector  in the  t ree  
case ,  o r  i ts  const i tuent  ser ia l  number  in the  s t r ing  case .  (See 
be low for  deta i led  exp lanat ion .  )
(Z) Assoc ia t ive  Ass ignment  - Th is  k ind  of va lue  ass ignment  
takes  p lace  by  naming  that  lex ica l  va lue  in the  parent  t ree  or  s t r ing ,  
wh ich  the user  des i res  to ass ign  as  var iab le  va lue .  In  th i s  case  
the var iab le  may be supp l ied  with a va lue l ist ,  ins tead  of a 
s ingle va lue.  This  happens  when the spec i f ied  lex ica l  va lue 
occurs more  than once in the parent structure? The value list 
will then contain entries h~.ving identical lexical values but each 
of these entries having different connections with the parent 
structure. 
(3) Relative Ass ignment  - This type of ass ignment  uses another 
variable, as argument,  and determines the value to be assigned 
in function of the value of the argument  variable. 
We are going now into the details of value ass ignment  to lexical 
variables. F rom the autonomy status point of v iew the following rules 
prevail (also valid for value ass ignment  to string and tree variables): 
if the variable to which value is assigned is currently operated in the 
connected mode,  connections with the parent structure will be con- 
served in the usual way. If the variable is autonomous,  these con- 
nections are -lost and only lexical values (without their "position 
information") and possible tags are transmitted. 
In order to enable the user to assign an arbitrary lexical value to 
a cariable (not necessari ly collected f rom a tree or a string), the 
following statement is permissible: 
Ln  = LEX ICAL  lexical/ m 
The  lexical value "lexical" is assigned to Ln. m is an optional integer 
representing a tag. Words  written in upper case letters represent - 
throughout this paper - statement keywords.  
Absolute value ass ignments to lexical variables are of the form: 
8 
(I) Ln  = (m I, mz,  
(~) Ln  = LEFT  k 
(3) Ln  = R IGHT k " 
In the tree case, (m I, m Z, . 
vector; each m. is an integer, m 1 
1 
? . ? rnk) Mandatory  Tree  Reference  
Mandatory  S t r ing  Reference  
! I  !1 
mk) denotes  an Iverson 's  index  O @ 
= 1 and it denotes  the root  of the 
mean ing  any  in teger  in that  pos i t ion  
II f! I! ff !1 I f  
except  the enumerated  ones (each  
k. is an in teger )  
1 
the s igns :  
(I) * 
($ - k I, k Z, . . k  ) ITl 
t ree ,  m Z se lec ts  the m E - th  s ib l ing  among the immediate  successors  
of the root ,  m 3 se lec ts  the m 3 - th  s ib l ing  among the immediate  suc -  
cessors  of the t ree  e lement  se lec ted  by the prev ious  por t ion  of the 
index  vector ,  and so on, unt i l  m k se lec ts  a f ina l  t ree  e lement  that  
wi l l  become the va lue  to be ass igned to Ln? 
In the s t r ing  case ,  k is an in teger  and LEFT  k of  R IGHT k ass igns ,  
respect ive ly ,  the k - th  const i tuent  f rom the le f t  or  f rom the r ight  end 
of the s t r ing ,  as va lue  to Ln? 
Assoc ia t ive  va lue  ass ignments  to lex ica l  var iab les  a re  of the fo rm:  
Lm = lex ica l / tag  Mandatory  Parent  Reference  
In the r ight  s ide  of the s ta tement  " lex ica l "  denotes  a lex ica l  va lue  
and "tag" the description of a tag? One of the two descriptions "lexical" 
and "tag" might be omitted. The parent structure is searched for all 
e lements or constituents that match  the specified lexical value and/or 
the specified tag. The selected elements are added to the value list of 
Lno A tag specification is of the form: a, az, o . an where  n is the 
number  of digits in the tag; each a. is either an integer or an integer 
1 
variable specifying the required digit in the i-th position, or one of 
(k 1 / k 2 / . . . / km)  mean ing  one of the  enumerated  
in tegers .  
Re la t ive  va lue  ass ignments  to lex ica l  var iab les  a re  of the  fo rm:  
Ln  = NE IGHBOR Lm Opt iona l  Parent  Reference  
where  NE IGHBOR s tands  for  one of the  fo l low ing  keywords :  
ANCESTOR,  L -S IBL ING,  R -S IBL ING,  L -SUCCESSOR,  R -SUCCESSOR.  
The  in terpreta t ion  of  these  keywords  depends  on the Parent  Reference ,  
whether  it is exp l i c i t l y  s ta ted  or  not .  If the  Parent  S t ruc ture  is a 
t ree ,  the  in terpreta t ion  is the  fo l low ing :  
(1) ANCESTOR:  the  neares t  t ree  e lement  to wh ich  the  
va lue  of Lm is connected  in the  d i rec t ion  
of  the  root  of  the t ree .  
(2) L -S IBL ING:  the element preceding the value of Lm.  
in its sibling set. 
(3) R-S IBL ING:  the  e lement  fo l low ing  the  va lue  of Lm 
in the  s ib l ing  s eto 
(4) L -SUCCESSOR:  the first element in the sibling set whose 
ancestor is the value of Lm.  
(5) R -SUCCESSOR:  the last element in the sibling set whose 
ancestor is the value of Lm.  
If the  Parent  S t ruc ture  is a s t r ing ,  L -S IBL ING and  L -SUCCESSOR 
both  denote  the  const i tuent  to the le f t  of  the  va lue  of Lm,  wh i le  R-  
S IBL ING and  R-SUCCESSOR denote  the  s t r ing  const i tuent  to i ts  r ight .  
ANCESTOR denotes  the  le f tmost  const i tuent  in  the s t r ing .  
In a l l  these  s ta tements  the  argument  var iab le  Lm has  to be 
cur rent ly  operated  in the  connected  mode.  The  se lec ted  va lue ,  de -  
pend ing  on wh ich  keyword  is used  and  what  the  parent  s t ruc ture  is ,  is 
i0 
assigned to the value list of Ln. 
In obvious cases the "empty"  value might be assigned to Ln. 
Value Ass ignment  to String Variables 
String value ass ignments  are also absolute, associative or re- 
lative. The autonomy rules are analogous to the ones used in value 
assignments to lexical variables, except if stated otherwise. In order 
to enable the user to assign an arbitrary value to a string variable - 
not necessarily collected f rom a parent structure - the following 
statement is permissible: 
Sn = CONCATENATE AAA o o . AA  
where  each A stands for one of the following possibilities: 
(1) A lex ica l  va lue with an opt ional  tag (of the fo rm lex ica l /  tag) 
(Z) a lexical variable 
(3) a string variable. 
The statement per fo rms the concatenation in the order shown in 
the statement body, by taking the first items on the value lists of the 
variables involved. Parent  connections of these values are not taken 
into consideration and Sn is made automatically autonomous  (if it 
wasn't already), its value is the concatenated set of lexical values, 
with possible tags? 
Absolute value ass ignment  to string variables is of the form: 
Sn = LEVEL  k Mandatory  Tree  Reference 
k is an integer selecting the k-th level of the tree referred to? The 
k- th  level of a tree is the string whose  constituents are at distance k 
f rom the root, the distance being measured  in number  of subsequent 
ancestors up to the root. 
11 
Lm be ing  a connected  var iab le ,  re la t ive  ass ignment  to s t r ing  
var iab les  takes  p lace  w i th  the  he lp  of  a s ta tement  of  the  fo rm:  
Sn = WORD Lm Opt iona l  Parent  Reference  
WORD s tands  for  one of the  keywords  enumerated  be low;  the in terpre -  
ta t ion  of these  keywords  depends  on the Parent  S t ruc ture  (exp l i c i te  
or  imp l ied)  be ing  a t ree  or  a s t r ing .  The  tab le  be low enumerates  a l l  
the  cases :  
Keyword  Tree  Case  St r ing  Case  
ANCEST OR 
SUCCESSOR 
L -SUCCESSOR 
R-SUCCESSOR 
S IB  L ING 
L -S IBL ING 
The ancestor  s t r ing  of the argu-  
ment  e lement  is the  one that  
connects  it to the  root  of  the  
t ree .  
The  successor  s t r ing  of the 
argument  e lement  is the s ib -  
l ing  set  hav ing  the argument  
ancestor  e lement .  
as  
The L -successor  s t r ing  is the  
one composed of the  sequence  
of subsequent  L -SUCCESSOR 
e lements  in the  downward  
d i rec t ion .  
Same def in i t ion  as above ,  
tak ing  the  subsequent  R-  
SUCCESSOR e lements .  
but 
The s ib l ing  s t r ing  of the argu-  
ment  is the  successor  s t r ing  
of  i ts  ancestor  e lement .  
The  par t  o f  the  s ib l ing  s t r ing  
preced ing  the  argument?  
The  longest  s t r ing  
in wh ich  the argu-  
ment  is a con-  
s t i tuent .  
Same as ANCESTOR 
The left portion of 
the string upto the 
argument  constituent. 
The right portion c~ 
the string f rom the 
argument  constituent. 
same as ANCESTOR 
Same as L -SUCCESSOR 
lZ 
K eywor  d T ree  Case  St r ing  Case 
R-S IBL ING The part of the sibling string 
following the argument. 
Same as R -SUCCESSOR 
TERMINAL  The  te rmina l  s t r ing  of the argu-  Same as  ANCESTOR 
ment  element is composed of 
elements having empty succes- 
sor strings and on whose  an- 
cestor strings the argument  
element is a constituent. 
All these statements assign the selected string as value to Sno 
Associative assignment to string variables takes place with a 
statement of the form Sn = STRING (kl, k z string structure specifi- 
cation) Mandatory  String Reference. String structure specification 
is a string over the alphabet of lexical values and a few special signs; 
- we are going to call it a metastring0 It describes the internal com-  
position of the Parent Reference. k I and k 2 stand for integers or in- 
teger variables denoting the k I -th and the k 2 -th constituent of the 
metastring0 The portion of the metastring falling between these con- 
stituents delimits a portion of the parent string. Upon execution of 
the statement this portion of the Parent String is attributed as value 
to Sno In case of more  than one portion referred to in the parent 
string, the leftmost one is taken into consideration. In case of "no- 
match" Sn gets the empty value. 
The  metastring's internal composition is very close to the one 
used by the programming language COMIT .  If AAAAA . . o AAAA is 
the form of such a metastring~ where  A stands for one of its con- 
stituents, the following context-free grammar  (or Backus Normal  
Form)  would generate it: 
13 
A--gb/b/. ./b 
A---95 - b.b . .b .b  
$n 
b "--9 
b--~ Ln or Sn 
(meaning an arbitrary choice among the 
enumerated b's ) 
(meaning any string except the ones 
described by the b's. ) 
(meaning n arbitrary consecutive con- 
stituents in the parent string; n stands 
for an integer. $0 denotes the empty  
string. ) 
meaning an arbitrary string within the 
parent string, the empty string in- 
cluded. ) 
any lexical value/ tag description com-  
bination as described in a previous 
chapter .  
(mean ing  the first va lue  of the var iab le  
involved,  tag inc luded,  and  the position, 
if the var iab le  is connectedo)  
Value Ass isnment to Tree Variables 
In order to enable the user to assign an arbitrary value to a tree 
variable, the following statement is permissible (the equivalent of 
the LEX ICAL  and CONCATENATE statements in the previous cases): 
Tn  = STRUCTURE k I A k Z A . . . .  knA  
where  each k. is a level number  (see COBOL,  INrPL) and each A stands 
for one of the following possibilities: 
(I) A lexical value with an optional tag 
(Z) A lexical variable 
(3) A tree variable 
14 
If A is a t ree  var iab le  the subsequent  leve l  number  should not be 
super io r  to the preced ing  one? The s ta tement  bui lds  a t ree  accord -  
ing to the s t ruc ture  shown by the leve l  numbers ,  by taking the f i r s t  
i tems on the va lue l i s ts  of the var iab les  involved,  wi thout  pos i t ion  
in fo rmat ion .  This t ree  is ass igned as va lue to Tn~ by mak ing  Tn 
automat ica l ly  autonomous .  
Abso lute ,  assoc ia t ive  and re la t ive  value ass ignments  to t ree  
var iab les  cannot  be so c lear ly  separated  as in the prev ious  cases .  
The fo l lowing s ta tement  amalgamates  var ious  k inds of ass ignments :  
Tn = TREE Lm,  A Opt ional  T ree  Reference  
where  Lm is a connected  var iab le  and A is an opt ional  l i s t  of con-  
s t i tuents  of the fo rm (a l ,  azP 
the fo l lowing poss ib i l i t i es :  
(1) A lex ica l  var iab le  
(z) 
ak)o_ Each  a.1 stands for one of $ 
A lex ica l  value and/or  a tag descr ip t ion  (see a prev ious  
chapter on the specifications) 
The  effect of the statement is the following: a subtree is selected 
whose  root is the value of Lm.  If the A-list is empty, this entire 
subtree is assigned, as value, to Tn. If the A-list is not empty, all 
the subtree elements matched by the A-list are considered terminal 
(i.e. their successors are neglected) and the assigned tree value 
stops - at its bottom - with these matched elements. In case of 
conflict the e lement closer to the root is considered terminal. The 
autonomy rules are like in the previous cases. 
The following statement provides for obtaining the parent tree 
of a string or lexical variable: 
Tn = PARENT Lm or Sn~ 
15 
The  broadest  autonomous  t ree  conta in ing  the  argument  is ass igned ,  
as va lue ,  to  Tn ,  
Movement  of Variables 
Variable values have to be moved,  erased, :ransmitted, etc0 The 
following statements provide for these operations: 
Vn  = PUSHDOWN Vm,  k 
where Vn  and Vm are variables of the same type and k is an unsigned 
integer. The first k values on the value list of Vm are added to the 
value list of Vn, by "pushing down" the previous values on the list of 
Vn. The value list of Vm remains unchanged. 
The statement 
PUSHUP Vn.. k 
erases the first k values on the list of Vno In both cases, if k is 
superior to the number  of values on the list, the operation stops 
after the exhaustion of values. 
Structure Questions 
The user can question the structure of a variable value by com-  
paring it to a given or partially specified pattern. The general form 
of such a question is: 
B Ass ignment  Statement 
where  B is a logical variable (bit string of length one) and Ass ignment  
Statement stands for any of the assignment statements described in 
the previous chapters? The interpretation of an assignment statement 
in a structure question is different, however, f rom its original inter- 
pretatiOno An  assignment statement is of the form: 
16 
Vn = spec i f i ca t ion  
and the = s ign ass igns  a va lue to Vn, accord ing  to the spec i f i ca t ion .  
When an ass ignment  s ta tement  enters  a s t ruc ture  quest ion  no va lue 
ass ignment  akes p lace ,  the = sign means  equa l i ty  between the var iab le  
value and the spec i f i ca t ion .  In case  of equa l i ty  B is set  to T rue ,  to 
Fa lse  o therwise .  
Below we l i s t  these  s t ruc ture  quest ions  with the i r  in terpretat ion .  
(In the l i s t  the var ious  types of parent  re ferences  are  abbrev ia ted .  ) 
Ass ignment  S ta tement  S t ructure  Quest ion  In terpretat ion  
Ln = LEX ICAL  l ex ica l /  tag 
Ln  = (ml, m2.. , ink) MTR 
Ln  = LEFT  or R IGHT k MSR 
Ln = lex ica l /  tag MPR 
Ln  = NE IGHBOR Lm OPR 
Sn = CONCATENATE AAA.  , ,A 
Sn = LEVEL  k MTR 
Is the value of Ln  equal to "lexical" 
and to the tag? 
Does Ln occupy the pos i t ion  spec i -  
f ied by the index vector  in the 
spec i f ied  parent  t ree?  
Does Ln occupy the k - th  const i tuent  
pos i t ion  in the spec i f ied  parent  
s t r ing?  
Does Ln match  lex ica l / tag  and is 
it in the spec i f ied  parent  s t ruc ture?  
Is the pos i t ion  of Ln in agreement  
with the spec i f i ca t ion?  
Is Sn composed of the const i tuents  
spec i f ied ,  pos i t ion  in fo rmat ion  
being d i s regarded?  
Does Sn correspond to the k- th  
level string in the specified parent 
tree? 
Sn = STRING (kl, k2, specif? ) MSR Does Sn match  the specification? 
17 
As s ignment  S ta te  ment  S t ruc ture  Quest ion  In terpreta t ion  
Sn = WORD Lm OPR 
Tn= STRUCTURE k lAK2A.  . . knA  
Tn= TREE Lm,  A OTR 
Is the  pos i t ion  of  Sn in agreement  
w i th  the  spec i f i ca t ion?  
Is the  t ree  va lue  Tn  composed as 
ind icated  by the  s t ruc ture  descr ip -  
t ion,  pos i t ion  in fo rmat ion  d i s re -  
garded?  
Is Tn  the  subt ree  extend ing  as 
ind icated?  
Tn  = PARENT Lm or  Sm Are  Lm or  Sm located  in Tn?  
Al l  these  s t ruc ture  quest ions  compare  the f i r s t  i tem on the  va lue  
l i s t  of  the  var iab le  invo lved  w i th  the pat tern  spec i f i ca t ion .  If the user  
des i res  to search  through the  who le  va lue  l i s t  he  can  fo rmulate  h is  
s t ruc ture  quest ion  as:  
B EXTRACT Ass ignment  S ta tement  
In th i s  case  the  who le  va lue  l i s t  is searched  through and  the f i r s t  
i tem encountered  sat i s fy ing  the  pat tern  spec i f i ca t ion  is ext rac ted  and  
put  at  the top  of the  va lue  l i s t ,  wh i le  B is se t  to T rue .  If no i tem 
sat i s fy ing  the  pat tern  spec i f i ca t ion  is encountered  B is  se t  to Fa lse  
and  the  va lue  l i s t  remains  unchanged.  
In  a prev ious  chapter  the  CREATE s ta tement  was  descr ibed  that  
c reates  an  autonomous  var iab le  w i th  an empty  va lue  l i s t .  The  quest ion  
B CREATE var iab le  
sets  B to T rue ,  i f  the  var iab le ' s  va lue  l i s t  is empty ,  to Fa lse ,o therwise .  
The  s ta tement  
B AUTONOMY var iab le  
-bu i l t  in an  ana logous  way  - has  been  descr ibed  ear l ie r .  
18 
Equa l i ty  Tests  
G iven  two var iab les  Vn and  Vm of the same type  (both lex ica l ,  
or  both s t r ing  or  both  t ree)  the fo l low ing  s ta tement  tes ts  the  equa l i ty  
of the var iab le  va lues :  
B Vm - Vn  
whereB is a bit string of length three. The setting to True or False 
of th is  bit  s t r ing  is as  fo l lows:  
F i r s t  bit  T rue  is  the  lex ica l  compos i t ion  of Vm is ident ica l  to the 
one of Vn, tags  and  autonomy s ta tus  be ing  d is regarded.  
Second bit  T rue  i f  the  la rgest  parent  s t ructures  are  ident ica l  o r  if  
both var iab les  a re  autonomous .  
Th i rd  bit  T rue  i f  the two index  vectors  a re  ident ica l ?  The  index  
vector  of a lex ica l  va lue  has  been def ined  ear l ie r ,  fo r  s t r ing  and 
t rees  it is - respect ive ly  - the index  vector  of the le f tmost  const i tuent  
and of the root .  The  parent  s t ructures  may be d i f fe rent  and  yet  the 
th i rd  bit  se t  to T rue .  If  both  var iab les  a re  autonomous  the bit  is se t  
to T rue .  
Numerica l  properties of. Data and Variables 
The following statements establish connections between variables 
and their numerical  properties: 
X being a numer ic  (decimal) variable the statement 
X= NUMBER Vn  
assigns to X, as value, the number  of items on the value list of Vn. 
The statement 
X = WEIGHT Vn  
assigns to X, as value, the number  one if Vn  is a lexical variable, the 
19 
number  of  const i tuents  or  t ree  e lements  of  the va lue  of Vn, i f  th is  
la t te r  is a s t r ing  or  t ree  var iab le .  The s ta tements  imp lement ing  
tag hand l ing  are :  
X = TAG Ln 
wh ich  sets  X to the tag va lue  of Ln,  and 
Ln  = TAG X 
wh ich  ass igns  X, as  tag,  to the va lue  of Ln. 
Transformations 
Transformation statements change strings and tree:~ into new 
strings and trees. During the processing of a transformation data 
may move, or get deleted. This raises the following problem: 
variable values are affected by these movements  and they must  be 
correspondingly modified, updated, deleted, etc. The relevant con- 
ventions are as follows: 
Whenever  a piece of data moves  all variable values equal to or 
entirely contained in that piece of data, have their connections up- 
dated, in function of the new position the piece of data moved 
occupies. If, instead of being moved,  the piece of data is deleted, 
all variable values equal to or entirely contained in the piece of data 
deleted are deleted. 
Variable values overlapping with data moved or deleted are either 
modified or deleted. They  are deleted in the following cases: 
(I) The argument  of the assignment statement which defined the 
value gets deleted. (Ec. Sn - ANCESTOR Ln  and Lm gets 
deleted by a t ransformation; then the corresponding value of 
Sn is deleted.) 
Z0 
(2) All string variables defined by a STR ING Statement. 
In all other cases updating and due modification takes place. 
String Transformations 
The string transformation statement of the Processor  is strongly 
inspired by the "Rewriting rule" of the COMIT  programming language, 
but it is adapted to strings embedded in trees too. 
In the case of an autonomous string the transformation statement 
is a straightforward adaptation of the COMIT  rule. Its fo rm is: 
string structure specification = REWRITE  rewrite indication 
Mandatory String Reference. 
The "string structure specification" is identical to the one used in the 
description of the STR ING statement, in the chapter on value assign- 
ments to string variables. The "rewrite indication" is a sequence 
composed of: 
(I) Integers sequentially number ing the constituents of the 
"string structure specification" and showing the new position 
(or deletion, if an integer is omitted in the "rewrite indication") 
of these constituents after transformation of the string. 
(2) Lexical values and string and lexical variables introducing 
new constituents into the string to be transformed. 
The statement verifies if the "string structure specification" 
matches the Parent Reference. In case of no match, no transformation 
takes place. In case of match the string is rewritten in the order of 
the constituents indicated by the "rewrite indication". 
In the case of strings connected to trees two classes of strings 
have to be distinguished: vertical and horizontal strings. A string 
Z1 
embedded in a t ree  is hor i zonta l  i f  no const i tuent  of  the s t r ing  is the  
t ree -ancestor  e lement  of  another  const i tuent .  I t  is ver t i ca l  in  the  
oppos i te  case .  
For  ver t i ca l  s t r ings  the  fo rm of  the  REWRITE  s ta tement  is  
ident ica l  w i th  the one fo r  autonomous  s t r ings ,  i ts  in terpreta t ion  is ,  
however ,  d i f fe rent :  in  case  of match ,  i f  a const i tuent  is  moved or  
de le ted ,  the  ent i re  subt ree  whose  root  is  the  const i tuent  in  quest ion ,  
is  a l so  moved or  de le ted ,  except  that  b ranch  of  the  subt ree  wh ich  has  
an  e lement  in the s t r ing  to be t rans formed?  Moreover ,  in  the  new 
pos i t ion ,  the  fo rmer  o rder  of  the  e lements  of  the  moved const i tuent ' s  
successor  s t r ing  is ma inta ined;  i f  an  e lement  of  th i s  successor  
s t r ing  d idn ' t  par t i c ipate  in the  move - because  of the  above  ment ioned  
res t r i c t ion  - it is  rep laced  by  the  new le f t  ne ighbor  of  the  moved 
const i tuent  in  the  s t r ing .  
For  hor i zonta l  s t r ings  the  fo rm of the  REWRITE  s ta tement  is 
s l ight ly  d i f fe rent : in  the  " rewr i te  ind icat ion"  each  const i tuent  must  
have  a le f t  parenthes is  somewhere  to i ts  le f t  and  a r ight  parenthes is  
somewhere  to i ts  r ight  and  no o ther  parenthes is  can  appear  between 
the  const i tuent  and  these  parentheses .  In o ther  words  the who le  
" rewr i te  ind icat ion"  is  s imp ly  bracketed .  A le f t  parenthes is  might  
be fo l lowed by  a r ight  parenthes is ,  w i th  no const i tuent  in  between,  
th i s  coup le  be ing  p laced  in the  " rewr i te  ind icat ion" .  A f te r  t rans -  
fo rmat ion  in case  of match ,  const i tuents  between the  same coup le  
of  parentheses  w i l l  have  the  same ancestor  e lement  in the  t ree ,  in  
le f t - to - r ight  o rder  of  the  parenthes is  coup les  and  of the  poss ib le  
ancestor  e lements  of  the  s t r ing?  
A coup le  of  parentheses  w i th  no const i tuent  in between at t r ibutes  
no const i tuent  of the  s t r ing  to the ancestor  e lement  in that  pos i t ion .  
ZZ 
Tree  Trans format ions  
Three  s ta tements  ATTACH,  DELETE and  DETACH prov ide  fo r  
the  t rans format ion  of t rees .  Var iab les  V re fer red  to be low in the  
descr ip t ion  of  these  s ta tements  must  be s ing le  va lued ,  because  of 
automat ic  changes  in the i r  autonomy s ta tus :  
(1) ATTACH Th is  s ta tement  inser ts  data  in a t ree .  I ts  genera l  
fo rm is 
ATTACH V, P, Ln  
where  V is an autonomous  variable, the value of Ln  is a tree e lement 
(Ln must  be connected) and P stands for one of the words  LEFT ,  
R IGHT or UNDER.  V is attached to the parent tree of Ln  and becomes  
automatically connected after the attachment. The place of attach- 
ment  depends on P: 
If P is LEFT  or R IGHT,  V is attached to the left or to the right 
of the value of Ln, in the sibling string of Ln. In this case Ln  cannot 
be the root of an autonomous  tree. If V is a tree, the root is inserted 
in  the  s ib l ing  s t r ing  and  the  remainder  of  the  t ree  w i l l  cont inue  to be 
a t tached to the  root .  A l l  the  inser ted  e lements  a re ,  of  course ,  con-  
nected  to the  ancestor  e lement  of  Ln .  
If P is UNDER, the  spec i f ied  data  w i l l  be a t tached in  the  successor  
s t r ing  of  Ln ,  as  i ts  le f tmost  par t ,  accord ing  to the  same pr inc ip les  
as  above .  
(Z) DELETE 
the  computer .  
Th is  s ta tement  de le tes  data  and  f rees  memory  in 
I ts  genera l  fo rm is 
DELETE V 
where  V is a var iab le .  If V is autonomous ,  the  cor respond ing  data  
w i l l  ent i re ly  van ish .  If V is  connected ,  it  must  be connected  to a 
23 
tree and the following cases prevail: 
(a) V is a lexical value. (In this case it cannot be the root 
of an autonomous  tree. ) It is deleted and its descendant 
tree is attached to the ancestor e lement of V, in the same 
sibling position as the one that was  occupied by V. Practically, 
this means  that the successor  string of V gets inserted at V's 
place in the sibling string of V, with the remainder  of the 
tree descending f rom this successor  string. 
(b) V is a string. All its constituents are deleted except 
the one that might be the root of an autonomous  tree. The 
descendant trees of the constituents are also deleted. 
(c) V is a tree. It is deleted entirely. If the terminal 
elements (elements with no successors) are not terminal 
in a larger tree in which the tree to be deleted is embedded,  
the whole remaining descendant structures of these local 
terminal elements are deleted. 
(3) DETACH This statement detaches data f rom a tree and 
holds it in memory .  Its general fo rm is 
DETACH V 
where  V is a connected lexical or tree variable. After detachment  V 
becomes  automatically autonomous.  The detachment of a string can 
be accompl ished with the help of (elementary) statements. The 
effect of the statement on the parent tree whereupon the detachment  
takes place is the same as in the DELETE case. Data, however,  
are not deleted, but separated f rom their parent tree. 
Z4 
References: 
ARMENTI,  A. W. et al  A Data Process ing  Formal i sm 
(Tech. Report  283, Lincoln Lab. ,  
MIT, 1 962) 
BERKELEY,  E. et alThe Programming Language LISP 
( In format ion Internat ional  Inc. ,  1964) 
CHOMSKY, N. On the Notion of "Rule of Grammars"  
(Proc. of Symp. in Appl. Math., 
Vol. IZ, Am.  Math. Soc., 1961) 
GENUYS, F. Commenta i res  ur le language ALGOL 
(AFCALTI  Seminar  on P rogramming 
Languages, Paris, 1962) 
IVERSON, K. A Programming Language (John Wiley 
and Sons, Inc. ) 
MATTHEWS, G. H. Analysis  by Synthesis in the Light of 
Recent Developments in the Theory of 
Grammar  (Department of Modern 
Languages,  MIT, 1964) 
MOYNE, J. A. Restrictive Language Defining System 
(IBM Data Systems Division, Advanced 
Computer Utilization, ACU-011, 1963) 
NEWELL ,  A. et al IPL-5 Manual (Prentice Hall, Inc., 1961) 
OETT INGER,  A.G. -KUNO, S. Multiple-path Syntactic Analysis 
(Proceedings IFIPS 196Z) 
RADIN,  A. -ROGOWAY,  H. P. NPL, Highlights of a New Programming 
Language (Comm. ACM,  Vol. 8, No. I, 
1965) 
YNGVE,  E. et alCOMIT Programmer 's  Reference Manual 
(MIT-RLE Publ icat ion) 
