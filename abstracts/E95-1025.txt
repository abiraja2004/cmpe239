 
ProFIT is an extension of Standard Pro- 
log with Features, Inheritance and Tem- 
plates. ProFIT Mlows the programmer 
or grammar developer to declare an in- 
heritance hierarchy, features and tem- 
plates. Sorted feature terms can be used 
in ProFIT programs together with Pro- 
log terms to provide a clearer descrip- 
tion language for linguistic structures. 
ProFIT compiles all sorted feature terms 
into a Prolog term representation, so 
that the built-in Prolog term unification 
can be used for the unification of sorted 
feature structures, and no special uni- 
fication algorithm is needed. ProFIT 
programs are compiled into Prolog pro- 
grams, so that no meta-interpreter is 
needed for their execution. ProFIT thus 
provides a direct step from grammars de- 
veloped with sorted feature terms to Pro- 
log programs usable for practical NLP 
systems. 
1 