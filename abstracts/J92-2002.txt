 Rewrite Machine 
The meaning (denotation) of a typed feature structure t in a universe U defined by 
an inheritance network is represented by the largest set of feature structures St = 
{h, . . . ,  tn} such that, for all ti 
1. ti <_ t, and 
2. for all substructures u = \[XIA\[...\] of ti, type A is a minimal type and 
u ~ def(A). 
The first condition says that all the elements of St satisfy the constraints expressed 
by t. The second condition says that all the elements of ,St satisfy the constraints defined 
6 Conversely, using the second typing rule, we can deduce that CONS is a possible type for 
\[first : Mary ,  rest : T\], since the combination of first and rest is defined as appropriate for CONS.  
7 This construction provides room for future evolution of the formalism by adding new kinds of 
constraints that cannot be directly expressed in the AVM format e.g., negation. A definition 
"X : - Y, Z." is read "X such that Y and Z." 
167 
Computational Linguistics Volume 18, Number 2 
LIST 
LIST \[!: APPEND : LIST\] 
: LIST.\] 
APPEND : LIST\[ 
: LIST\] 
NIL 
CONSIfirst: T 
Lrest: LIS'\[ 
APPEND0/2: m L: ~T 
rst:N 
CO lSLrest: \[\] 
APPEND1 \[\] LIST 
: CONS\[ first:N 
\[rest:IN 
Figure 3 
Rewrite rules for LIST and APPEND. 
by the network. If St is empty, the feature structure t is inconsistent (modulo the 
constraints of the inheritance network). St can be finite, e.g. in the case of a dictionary, 
but it can also be infinite in the case of recursive types: for example, the set of feature 
structures ubsumed by LIST is the (infinite) set of all possible lists represented as 
feature structures,  
In this section, we describe an abstract rewrite machine for computing the repre- 
sentation of the denotation of typed feature structures given an inheritance network. 
The rewrite mechanism is based on a variant of narrowing 9 adapted to feature struc- 
tures. 
An inheritance network of feature structures is compiled into a rewriting system 
as follows: each direct link between a type A and a subtype B generates a rewrite rule 
of the form A\[a\] --* B\[b\] where A\[a\] and B\[b\] are the definitions of A and B, respectively. 
Figure 3 shows the rewrite rules corresponding to the network of Figure 2. 
The interpreter is given a "query" (formulated as a typed feature structure) to 
evaluate. The first step is to check that the feature structure respects the two typing 
rules (Section 2.3.1). The idea is then to try to satisfy all the constraints defined by 
the inheritance network by incrementally adding more constraints to the query using 
the rewrite rules (nondeterministically) to get closer to the solution step by step. The 
rewriting process tops when conditions 1 and 2 described above hold. 
A rewrite step for a structure t is defined as follows: if u is a substructure of t at 
path p and u is of type A, and there exists a rewrite rule A\[a\] --, B\[b\] such that 
? A\[a\] A u  3_, and 
? A\[a\] A u < A\[a\] 
then the right-hand side B\[b\] is unified with the substructure u at path p, giving a new 
structure t' that is more specific than t (Figure 4). 
8 See A'ff-Kaci (1984), Pollard and Moshier (1990), and Emele and Zajac (1990a) for fixed-point 
characterizations of the denotation of typed feature structures. 
9 Narrowing uses unification instead of pattern-matching for checking the applicability of the l.h.s, of a 
rule. Narrowing is used in the logic programming paradigm (e.g., as an alternative to resolution for 
implementing PROLOG interpreters). Pattern-matching is used in the functional programming 
paradigm. 
168 
R6mi Zajac Inheritance and Constraint-Based Grammar Formalisms 
Figure 4 
A rewrite step. 
The first condition checks that the rule is applicable: the 1.h.s. has to be consistent 
with the substructure. The implementation factorizes common 1.h.s., avoiding the DNF 
expansion: if a 1.h.s. l of a rule l --* r is not consistent with the substructure, this 
computation branch is a failure branch, and all rules u ~ v where u < I are discarded 
in one step without further computation. 
The second condition implements a lazy rewriting strategy: if A\[aJ A u is equal to 
A\[a\], all rules A\[a\] --* B\[b\] could be applied with success, and failure could come only 
from the rewriting of some other substructures after the exploration of all choices for 
u. To avoid the exploration of failure branches as much as possible, the evaluation of 
the substructure u is suspended until the evaluation of some other substructure having 
some part in common with u makes u more specific, narrowing the set of potential 
choices for the subtypes of A for u. Thus, the search space is explored "intelligently," 
postponing the evaluation of branches of computation that would correspond for ex- 
ample to uninstantiated PROLOC goals (see for example van Hentenryck and Dincbas 
\[1987\], van Hentenryck \[1989\] on evaluation techniques in constraint logic program- 
ming). 
Rewrite steps are applied nondeterministically everywhere in the structure until 
no further rule is applicable. 1?
The choice of which substructure to rewrite is only partly determined by the 
availability of information (using the lazy rewriting rule). When there are several 
substructures that could be rewritten, the computation rule is to choose one of the 
outermost ones, i.e., one closest o the root of the feature structure (innermost strategies 
are usually nonterminating). This outermost rewriting strategy is similar to hyper- 
resolution in logic programming. In comparison, PROLOG uses a leftmost computation 
rule. 
For a given substructure, the choice of which rule to apply is done nondetermin- 
istically, and the search space is explored epth-first using a backtracking scheme. Al- 
though this strategy is not complete (a complete breadth-first earch strategy could be 
used for debugging purposes), the use of the outermost rule has favorable termination 
10 Conditions do not change this general scheme (they are evaluated using the same rewriting 
mechanism) and are omitted from the presentation here for the sake of simplicity. See for example 
Dershowitz and Plaisted (1988) and Klop (1990) for a survey on rewriting. 
169 
Computational Linguistics Volume 18, Number 2 
properties when compared to PROLOG'S leftmost rule: there are problems where a TFS 
computation will terminate when the corresponding logic program implemented in 
PROLOG will not; for example, for left-recursive rules in naive PROLOG implementa- 
tions of DCGs. 
3. Inheritance and Constraint-Based Grammars 
3.1 Related Approaches 
In the constraint-based framework, a grammar is regarded as a set of constraints to be 
satisfied by a given linguistic object: parsing and generation differ only in the nature 
of the "input," and use the same constraint evaluation mechanism. The properties of 
a computational framework for implementing constraint-based grammars are: 
? A unique general constraint solving mechanism is used: grammars 
define constraints on the set of acceptable linguistic structures. 
? As a consequence, there is no formal distinction between "input" and 
"output." For example, the same kind of data structure could be used to 
encode both the string and the structural description, and, as for the 
HPSG sign (Pollard and Sag 1987), they could be embedded into a single 
data structure that represents the relation between the string and the 
associated linguistic structure. 
? Specific mapping properties, based on constituency, linear precedence, or 
functional composition, are not part of the formalism itself, but can be 
encoded explicitly in the formalism. 
An approach that uses a unique deductive mechanism for parsing and generation 
is described in Dymetman and Isabelle (1988). Within this approach, a lazy evaluation 
mechanism based on the specification of input/output arguments i implemented (in 
PROLOG), and the evaluation is completely data-driven: the same program parses or 
generates, depending only on the form of the input structure. 
A constraint-based grammar does not need a context-free mechanism to build 
up constituent structures for parsing or generation: Dymetman, Isabelle, and Perrault 
(1990) describe a class of reversible grammars ("Lexical Grammars") based on a few 
composition rules that are very reminiscent of categorial grammars. Other kinds of 
approaches have been proposed, e.g., using a dependency structure and linear prece- 
dence relations (Reape 1990; see also Pollard and Sag \[1987\]). In Saint-Dizier (1991), 
linear precedence rules are defined as constraints in a language based on typed feature 
structures and SLD-resolution, which is used to experiment with GB theory. 
In the following sections, we describe two examples of constraint-based grammars: 
an HPSG grammar for a fragment of English, and an LFG-style transfer grammar for 
a small machine translation problem between English and French. 
3.2 Head-Driven Phrase Structure Grammar 
In general, a grammar describes the relation between strings of words and linguistic 
structures. To implement a constraint-based grammar in TFS, we have to encode both 
kinds of structures using the same data structure provided by the TFS language: typed 
feature structures. A linguistic structure will be encoded using features and values. 
Conditions that constrain the set of valid linguistic structures have to be declared ex- 
plicitly. A string of words will be encoded as a list of word forms, using the same kind 
170 
R6mi Zajac Inheritance and Constraint-Based Grammar Formalisms 
\[sYH I Loc f SuBcAT ~ \] 
\[DTRS headed..~trueture\[ \] \]:~'\[DTRs\[HEAD-DTR I SYN \] LOC l SUBCAT append(ID,l~)\] J \[ \[COMP-DTRS ~\] 
PHRASE < SUBCAT-FP. 
t dtrs: \[comp-dtm: ~\[~ \[3: ~J 
Figure 5 
The HSPG subcategorization principle and its TFS encoding. 
of definitions as in Figure 2.11 HPSG is so far the only formal linguistic theory based 
on the notion of typed feature structures (Pollard 1990), and is thus a good candidate 
to illustrate the possibilities of the TFS formalism. The following presentation is based 
on Emele (1988) and Emele and Zajac (1990b). 
The basic linguistic object in HPSG (Pollard and Sag 1987) is a complex linguistic 
structure, the "sign," with four levels of description: phonology, constituent structure, 
syntax, and semantics. In HPSG, there is no distinction between "input" and "output:" 
the relation between a string and a linguistic structure is encoded as a single feature 
structure representing the "sign." 
HPSG "principles" are encoded using inheritance: a feature structure of type 
PHRASE inherits the constraints associated with types SUBCAT-FP, HEAD-FP, and 
SEM-FP. For example, the HPSG subcategorization principle is encoded in TFS us- 
ing inheritance to model implication, and the TFS APPEND relation to encode the 
functional constraint on concatenation (Figure 5). In a similar way, HEAD-FP encodes 
the HPSG Head Feature Principle and SEM-FP encodes the Semantics Principle. 
The type SIGN is divided into several subtypes corresponding to different map- 
pings between a string and a linguistic structure. We first have the basic distinction 
between phrases and words. The definition of a phrase recursively relates ubphrases 
and substrings, and defines the phrase as a composition of subphrases and the string 
as the concatenation f substrings. Since the formalism itself does not impose any con- 
straints on how the relations between phrases and strings are defined, the grammar 
writer has to define them explicitly. In HPSG (Pollard and Sag 1987), the ordering 
of phrases is defined using linear precedence r lations: the order in which the sub- 
strings associated with subphrases are concatenated to give the string associated with 
a phrase are guided by these linear precedence r lations (Reape 1990). 
In the example given below (Figure 6), we make simplifying assumptions: the 
LOCAL feature is not used and there are two possible orderings for complements. The 
type IDP1 encodes Grammar Rule 1 (Pollard and Sag 1987, pp. 149-155), which says 
that a "saturated phrasal sign," i.e., a feature structure with \[syn : \[subcat : (>\]\], is the 
combination of an unsaturated phrasal head with one phrasal complement on the left. 
For example, for structures like S ~ NP VP, S is the "saturated phrasal sign," NP is 
11 We will use a more condensed notation for lists with angle brackets provided by the TFS language: a
list 
C0NS\[first: Mary, rest: CONS \[first : sings, rest: NIL\]\] is writtenas <Mary sings>. 
171 
Computational Linguistics Volume 18, Number 2 
SUBCAT-FP HEAD-FP SEM-:FP 
   Fphon: B \] 
/syn: \[subcat: (SIGN)\] \] ,  J 
\[phon: \[sl~Dubcat: 0 \] \] IDP2/. \[hea(l-dtz: WOl~D\[phon: m \] 
L 
Lcomp-dt~s: (SXGN\[phon: El\]) JJ 
:- APPEND : 
L3: ~J 
.'~ APPEND : 
Figure 6 
Part of the HPSG PHRASE hierarchy: PHRASE inherits from "principles" (given here without 
their definitions) and is subdivided into two subtypes corresponding todifferent complement 
orderings. 
the left phrasal complement and VP is the unsaturated phrasal head. Furthermore, the 
string (the value of the phon feature) of the IDP1 phrase is the concatenation f the 
string of the complement with the string of the head. 
The type IDP2 encodes Grammar Rule 2 and states that an "unsaturated phrasal 
sign," i.e., a feature structure with \[syn:\[subcat:lSIGNI\] \], is the combination of a 
lexical head with any number of complements on the r~ht (e.g., for VP --* V XP*): the 
string associated with IDP2 is the concatenation f the string of the head with the 
concatenation f the strings of the complements, where the relation ORDER-COMP 
defines in which order the complements strings are concatenated. 
The difference between the parsing and the generation problem is then only in the 
form of the structure given to the interpreter for evaluation. A query for the parsing 
problem is an underspecified structure where only the string is given; conversely, 
a query for the generation problem is an underspecified structure where only the 
semantic form is given (Figure 7). 
In both cases, the interpreter uses the same set of rewrite rules to fill in "missing 
information" according to the type definitions. The result in both cases is exactly the 
same: a fully specified structure containing the string, the full semantic form, and also 
all other syntactic information such as the constituent s ructure (Figure 8). 
3.3 Bi-directional Transfer in Machine Translation 
We have sketched above a very general framework for specifying mappings between 
a linguistic structure, encoded as a feature structure, and a string, also encoded as a 
feature structure. We apply a similar technique for specifying transfer rules for machine 
translation, which we prefer to call "contrastive rules" since there is no directionality 
involved (Zajac 1989; 1990a). 
172 
R6mi Zajac Inheritance and Constraint-Based Grammar Formalisms 
Query for parsing 
PHILASE\[phon: (Elm ate every cookie)\] 
Query for generation 
Paa.asz : |~gl:~,-d:\[r,~tr:\[n~e: KXM\]\]\] _\] 
/ g2:|spec: EVERY \[ Li.a: \[r--tr:\[ra": COOKm\]\]\] \] 
Figure 7 
Queries for parsing and generation. 
IDP1 
phon: (Kim ate every cookie) 
L subcat: 0 J 
__\[comp-dtrs: (...) 
dtrs: TR~:~\[head.dtr: IDP2.., 
'zeln: EAT 
\[m h?r 111 rein: NAMING m lr,.,r" ? / / / 
sem: 2ARG-REL \[ kname: KIM J J J 
Figure 8 
The common solution to the parsing and generation problems. 
The idea is rather simple: assume we are working with linguistic structures simi- 
lar to LFG's functional structures for English and French as proposed in Kaplan et al 
(1989). We define a translation relation as a type TAU-LEX with two features, eng for 
the English structure and fr for the French structure. This "bilingual sign" is defined 
on the lexical structure: each subtype of TAU-LEX defines a lexical correspondence 
between a partial English structure and a partial French structure for a given lexical 
equivalence. Such a lexical contrastive definition for a verb also has to pair the argu- 
ments recursively. This is expressed in the condition part of the definition (Figure 9) 
by a recursive condition TAU-LEX on the arguments. The translation of syntactic and 
semantic features, like tense or determination, is also specified in the condition part, 
and these contrastive definitions can and should be defined separately from the lexical 
definitions as different subnetworks. 
Inheritance is used here to capture generalizations over relations: all the informa- 
tion in the example of Figure 9 can be unpacked and redefined as follows. We have 
173 
Computational Linguistics Volume 18, Number 2 
TAU-LEX-FALL ~ TAU-LEX-ITV. 
/eng:/subj: 
l \[tense: 
TAU-LEX-FALL \] ipred: TOMBEI 1 .
I~: \[subj: ~ 
L L tense: 
Figure 9 
A transfer ule. 
TAU / \  
TAU-LEX... TAU-TENSE... 
U L /Feng:rtense l 'tea*el U eng 
~reng subj ~ eng 
~reng pred FALL\] 
Figure 10 
Part of an inheritance network of transfer elations for verbs. 
three levels of generalization for the translation of verbs: TAU-LEX-V is subdivided into 
several relations for translating, for example, transitive verbs (TAU-LEX-TV), intransi- 
tive verbs (TAU-LEX-ITV), etc. The condition that specifies the translation of tenses is 
defined for the whole class of verbs TAU-LEX-V. The condition that specifies the trans- 
lation relation between subjects is defined for intransitive verbs (TAU-LEX-ITV), but 
cannot be specified for all verbs since it does not apply to, e.g., impersonal verbs. This 
leaves only the translation of predicates to be defined at the leaves of the hierarchy 
(Figure 10). Thus, at each level of generalization, we specify the minimal amount of 
information eeded for translation. The same kind of organization can be used for 
nouns, where syntactic features uch as determination are associated with the higher 
types, and where the minimal types define the equivalences between lexical forms of 
nouns themselves. 
174 
R6mi Zajac Inheritance and Constraint-Based Grammar Formalisms 
Query 
FA '. 11 
/ rPre(l: STUDENT \] / / 
TAU eng: isubj: / B,ea: A 1 / / /  
/ Ln"": s GJJ \[ / 
Ltense: E-PRES J J 
Answer 
TAU-LEX-FALL 
PrecI: FALL \] 
\] rPre(i: STUDENT 11 
o-s:/,.bj: ! \[p,~: A \ ] / !  
/ L*~:: L,,,,m: ~_s~JJ / 
Ltense: F-PRES J 
rp,ed: TOMBER \] 
\[ rp,ed: ETUDIANT \] \[ 
~: \[subj: \[ \[pred:UN "1// i L='>~:: L"u": F'S~GJ J / 
Ltense: F-PRES J 
Figure 11 
Query and answer for the translation of "A student falls." 
The transfer problem for each direction is then stated in the same way as for 
parsing or generation: the input structure is an underspecified "bilingual sign" where 
only the structure for the source language is given. Using the contrastive grammar, 
the interpreter fills in missing information and builds a bilingual sign 12 (Figure 11). 
It is not necessary to specify in the contrastive definitions all monolingual con- 
straints that have to be satisfied by the English structure and by the French structure. 
We can assume that we have monolingual grammars that define the appropriate map- 
pings between the set of English sentences and the set of associated English structures, 
and similarily for French. Using these monolingual constraints in addition to the con- 
trastive grammar, the TFS interpreter would build the fully specified monolingual 
structures, implementing a constraint-based translation system. 
3.4 Termination Problems 
For parsing and generation, since no constraints are imposed on the kind of mapping 
between the string and the semantic form, termination has to be proved for each class 
of grammar and for the particular mechanism used for either parsing or generation 
with this grammar. If we restrict ourselves to classes of grammars for which termi- 
nating evaluation algorithms are known, we can implement those directly in TFS. 
However, the TFS evaluation strategy allows more naive implementations of gram- 
mars, and the outermost rewriting of "sub-goals" terminates on a strictly larger class 
of programs than for corresponding logic programs implemented in PROLO~. Further- 
more, the grammar writer does not need, and actually should not, be aware of the 
control that follows the shape of the input rather than a fixed strategy, thanks to the 
lazy evaluation mechanism. 
12 See also Reape (1990) for another approach to MT using feature structures and based on Whitelock 
(1990). 
175 
Computational Linguistics Volume 18, Number 2 
For HPSG-style grammars, completeness and coherence as defined for LFG, and 
extended to the general case by Wedekind (1988), are implemented in HPSG using the 
"subcategorization feature principle" (Johnson 1987): for the TFS implementation of
HPSG, termination is guaranteed, at least for the simplified version containing only 
head-complement structures, described in Section 3.2. Termination conditions for pars- 
ing are well understood in the framework of context-free grammars. For generation 
using feature structures, one of the problems is that the input could be "extended" 
during processing, i.e., arbitrary feature structures could be introduced in the semantic 
part of the input by unification with the semantic part of a rule. However, if the seman- 
tic part of the input is fully specified according to a set of type definitions describing 
the set of well-formed semantic structures (and this condition is easy to check), this 
cannot arise in a type-based system since it is not possible to add arbitrary features to 
a typed feature structure. 
A more general approach is described in Dymetman, Isabelle, and Perrault (1990), 
who define sufficient ermination properties for parsing and generation for the class 
of "Lexical Grammars." These termination properties are conditions on the existence 
of "conservative guides" for parsing and generation and seem generalizable to other 
classes of grammars as well, and are also applicable to TFS implementations. Since 
Lexical Grammars are implemented in PROLOG, lefbrecursion must be eliminated for 
parsing and for generation, but this does not apply to TFS implementations. The idea 
of conservative guides is relatively simple and says that for parsing, each rule must 
consume a nonempty part of the string, and for generation, each rule must consume 
a nonempty part of the semantic form. These conditions seem to be equivalent as 
to require the existence of a well-founded relation on strings (for parsing) and of 
a well-founded relation on semantic forms (for generation). The existence of such 
well-founded relations is actually a necessary condition for proving the termination 
of parsing and generation (see Deville \[1990\] for a more general discussion on well- 
founded relations in the context of logic programming). 
Termination for reversible transfer grammars is discussed in van Noord (1990). 
One of the problems mentioned there is the extension of the "input," as in generation, 
and the answer is similar (see above). However, properties similar to the "conservative 
guides" of Dymetman, Isabelle, and Perrault (1990) have to hold in order to ensure 
termination. 
4. Conclusion 
The TFS system has been developed to provide a computational environment for the 
design and the implementation f formal models of natural anguage. The TFS formal- 
ism is designed as a specification language that can be used to design and implement 
formal linguistic models. It is not a programming language: it does not offer means 
of defining control information that would make execution more efficient (but less 
general), as it would be needed if it would be envisaged to use the system in an 
application-oriented nvironment (e.g., as a parser in a natural anguage interface to a 
database system). From formal linguistic models developed in TFS, it could be envis- 
aged to develop rograms, i.e., parsers or generators, that would efficiently implement 
the declarative knowledge contained in the formal specifications. 13 
13 See for example in Biggerstaff and Perlis (1989) the papers on the development of programs from 
specifications, a very important issue in software ngineering. See also Ait-Kaci and Meyer (1990) for a 
programming language based on typed feature structures. 
176 
R6mi Zajac Inheritance and Constraint-Based Grammar Formalisms 
The TFS system is implemented using rewriting techniques in a constraint-based 
architecture adapted to feature structures: 
? The language is a logical language directly based on typed feature 
structures, and supports an object-oriented style based on multiple 
inheritance. 
? Grammars are expressed as inheritance networks of typed feature 
structures. They define constraints on the set of acceptable linguistic 
structures. As a consequence, there is no formal distinction between 
"input" and "output." 
? A unique general constraint solving mechanism is used. Specific 
mapping properties, based on constituency, linear precedence or 
functional composition, are not part of the formalism itself, but can be 
encoded explicitly using the formalism. 
Although the current implementation is very much at the level of an experimental 
prototype, and is still evolving, it has validated the basic concepts of the language 
and of the implementation, and has been used to test different linguistic models and 
formalisms uch as LFG, DCG, HPSG, and SFG on small examples. From these var- 
ious experimentations, we have defined extensions and improvements, both on the 
language and on the implementation, that are needed for scaling up the system. 
On the language side, more expressivity is needed. For example, disjunctions over 
feature structures, various kinds of negation (Ait-Kaci 1986), and sets of feature struc- 
tures (Pollard and Moshier 1990) are necessary to formalize, e.g., nontrivial semantic 
structures. Some types together with a specific syntax and associated operations could 
be conveniently added to the system as libraries of built-in types, e.g., characters, 
strings, and trees. 
On the implementation side, the use of implementation techniques adapted from 
PROLOG implementations, constraint satisfaction languages, and object-oriented lan- 
guages can be beneficial to the implementation f typed feature structure-based sys- 
tems and have to be more thoroughly explored.14One of the major efficiency issues in 
the current implementation is the lack of an efficient indexing scheme for typed fea- 
ture structures. For example, since the dictionaries are accessed using unification only, 
each entry is tried one after the other, leading to an extremely inefficient behavior with 
large dictionaries. Thus, the use of a general indexing scheme based on a combination 
of methods used in PROLOG implementations and in object-oriented database systems 
is necessary and will be implemented in a future version of the system. 
Acknowledgments 
The design and the implementation f the 
TFS system have been carried out in 
cooperation with Martin Emele. I would like 
to thank Stefan Momma and Ulrich Heid; 
their numerous comments and advices 
helped to make this article more readable. I 
would also like to thank anonymous 
referees for their many detailed and helpful 
comments. All remaining errors are of 
course the sole responsibility of the author. 
14 For example, the use in the current implementation of several techniques adapted from PROLOG 
implementations such as structure sharing, chronological dereferencing (Emele 1991) and last call 
optimization, have improved efficiency by several orders of magnitude over previous "naive" 
implementations. 
177 
Computational Linguistics Volume 18, Number 2 
References 
Ait-Kaci, Hassan (1984). "A lattice theoretic 
approach to computation based on a 
calculus of partially ordered type 
structures." Doctoral dissertation, 
University of Pennsylvania, Philadelphia, 
PA. 
A'/t-Kaci, Hassan (1986). "An algebraic 
semantics approach to the effective 
resolution of type equations." Theoretical 
Computer Science, 45, 293-351. 
Ait-Kaci, Hassan, and Meyer, Richard 
(1990). Wild_LIFE, a user manual. 
DEC-PRL Technical Note PRL-TN-1, 
Rueil-Malmaison, France. 
Ait-Kaci, Hassan, and Podelski, Andreas 
(1991). Towards a meaning of LIFE. 
DEC-PRL Research Report PRL-RR-11, 
Rueil-Malmaison, France. 
Bateman, John A., and Momma, Stefan 
(1991). The nondirectional representation 
of Systemic Functional Grammars and 
Semantics as Typed Feature Structures. 
IMS Technical Report, University of 
Stuttgart, Germany. 
Biggerstaff, Ted J., and Perlis, Alan J. (eds). 
(1989). Software Reusability. ACM 
Press-Addison-Wesley. 
Birkoff, Garrett (1940). Lattice Theory. 
American Mathematical Society, third 
edition, 1973. 
Borgida, Alexander; Brachman, Ronald J.; 
McGuinness, Deborah L.; and Resnick, 
Lori Alperin (1989). "CLASSIC: a 
structural data model for objects." In 
Proceedings, 1989 ACM SIGMOD 
International Conference on Management of
Data, Portland, Oregon. 
Bouma, Gosse (1990). "Non-monotonic 
inheritance and unification." In 
Proceedings, Workshop on Inheritance in 
Natural Language Processing, Institute for 
Language Technology and AI, Tilburg 
University, The Netherlands. 
Bourbeau, L.; Carcagno, D.; Goldberg, E.; 
Kittredge, R.; and Polgu6re, A. (1990). 
"Bilingual generation of weather forecasts 
in an operation environment." In 
Proceedings, 13th International Conference on 
Computational Linguistics (COLING'90). 
Helsinki. 
Brachman, Ronald J., and Schmolze, James 
G. (1985). "An overview of the KL-ONE 
knowledge representation language." 
Cognitive Science 9, 171-216. 
Carpenter, Bob (1990). "Typed feature 
structures: inheritance, (in)equality and 
extensionality." In Proceedings, Workshop on 
Inheritance in Natural Language Processing, 
Institute for Language Technology and 
AI, Tilburg University, The Netherlands. 
Daelemans, Walter (1990). "Inheritance and 
object-oriented natural anguage 
processing." In Proceedings, Workshop on 
Inheritance in Natural Language Processing, 
Institute for Language Technology and 
AI, Tilburg University, The Netherlands. 
Dershowitz, N., and Plaisted, D. A. (1988). 
"Equational programming." In Machine 
Intelligence 11, edited by Hayes, Michie, 
and Richards. Oxford: Clarendon Press. 
De Smedt, Koenraad, and de Graaf, Josje 
(1990). "Structured inheritance in
frame-based representation f linguistic 
categories." In Proceedings, Workshop on 
Inheritance in Natural Language Processing. 
Institute for Language Technology and 
AI, Tilburg University, The Netherlands. 
Deville, Yves (1990). Logic programming. 
Systematic Program Development. Reading, 
MA: Addison-Wesley. 
Dymetman, Marc, and Isabelle, Pierre 
(1988). "Reversible logic grammars for 
machine translation." In Proceedings, 2nd 
International Conference on Theoretical nd 
Methodological Issues in Machine Translation 
of Natural Language. Pittsburgh, PA. 
Dymetman, Marc; Isabelle, Pierre; and 
Perrault, Francois (1990). "A symmetrical 
approach to parsing and generation." In
Proceedings, 13th International Conference on 
Computational Linguistics (COLING'90). 
Helsinki. 
Emele, Martin (1988). "A typed feature 
structure unification-based approach to 
generation." In Proceedings, WGNLC of the 
IECE. Oiso University, Japan. 
Emele, Martin (1991). "Unification with lazy 
non-redundant copying." In Proceedings, 
29th Annual Meeting of the ACL. Berkeley, 
CA. 
Emele, Martin, and Zajac, R6mi (1989). 
"RETIF: A rewriting system for typed 
feature structures." ATR Technical report 
TR-I-0071, ATR, Kyoto. 
Emele, Martin, and Zajac, R6mi (1989). 
"Multiple inheritance in RETIE" ATR 
Technical report TR-I-0114, ATR, Kyoto. 
Emele, Martin, and Zajac, R6mi (1990a). "A 
fixed-point semantics for feature type 
systems." In Proceedings, 2nd Workshop on 
Conditional and Typed Rewriting Systems 
(CTRS'90). Montr6al, Qu6bec. 
Emele, Martin, and Zajac, R6mi (1990b). 
"Typed unification grammars." In 
Proceedings, 13th International Conference on 
Computational Linguistics (COLING'90). 
Helsinki. 
Emele, Martin; Heid, Ulrich; Momma, 
Stefan; and Zajac, R6mi (1990). 
"Organizing linguistic knowledge for 
multilingual generation." In Proceedings, 
178 
R6mi Zajac Inheritance and Constraint-Based Grammar Formalisms 
13th International Conference on 
Computational Linguistics (COLING'90). 
Helsinki. 
Etherington, David W.; Forbus, Kenneth D.; 
Ginsberg, Matthew L.; Israel, David; and 
Lifschitz, Vladimir (1989). "Critical issues 
in nonmonotonic reasoning." In 
Proceedings, 1st International Conference on 
Principles of Knowledge Representation and 
Reasoning. Toronto, Ontario. 
Evans, Roger, and Gazdar, Gerald (1989). 
"Inference in DATR." In Proceedings, 4th 
European ACL Conference. Manchester, U.K. 
Franz, Alex (1990). "A parser for HPSG." 
CMU report CMU-LCL-90-3, Laboratory 
for Computational Linguistics, Carnegie 
Mellon University. 
Fraser, Norman M., and Hudson, Richard 
A. (1990). "Word grammar: An 
inheritance-based theory of language." In 
Proceedings, Workshop on Inheritance in
Natural Language Processing. Institute for 
Language Technology and AI, Tilburg 
University, The Netherlands. 
Halliday, M. A. K. (1985). 