 
We address the problem of generating a coherent 
paragraph presenting arguments for a conclusion in a 
text generation system. Existing text planning tech- 
niques are not appropriate lor this task for two main 
reasons: they do not explain how arguments can be 
linked together in a linear presentation rder and they do 
not explain how the rhetorical function of a proposition 
affects its wording. 
We present a mechanism to generate argumentative 
paragraphs where argumentative relations constrain ot 
only the rhetorical structure of the paragraph, but also 
the surface form of each proposition. In our approach, a 
text planner elies on a set of specific argumentative 
relations to extract information from the knowledge 
base, to map it to scalar and context dependent evalua- 
tions and to organize it into chains of arguments. The 
same information used for planning is also used by the 
surface realization component to perform lexical choice 
at all the levels of the clause (connectives, main verb, 
adverbial adjuncts, adjectives and determiners). The 
mechanism is implemented in the ADVISOR I1 system 
using ~F,  an extended functional unification formalism. 
INTRODUCTION:  MOTIVAT ION 
Ceaain types of questions require in response a state- 
ment of a conclusion and arguments osupport i . In our 
domain, a question-answeting system offering advice to 
students selecting classes to plan their schedule 
(McKeown, 1988), should-questions, e.g., should I take 
AI?, fall into this class. The example shown in Figure I, 
extracted from a corpus of naturally occurring advising 
sessions that we have collected, illustrates this point. 
The task we consider is that of generating similar 
argumentative paragraphs presenting an evaluation of a 
course and its supporting arguments. To produce such 
paragraphs, a generation system must determine which 
arguments o include in the paragraph, ow to organize 
them in a structured Immgraph, and how to phrase ach 
piece of the argument. For example in Figure 1, the 
advisor selects the argument chain that AI provides 
preparation for all followup courses in the field, that the 
more the student is interested in AI the more he should 
take these followup courses and therefore, the more 
reason he has to take AI. This sequence of argaments 
forms the structure of the answer. 
In terms of wording, note that the conclusion that is 
Q Should I take AI this semester? 
A ~ you want to take courses like 
Natural Language Processing or 
Expert S~stems or Vis ion 
next semester, 
it's very advisab~ you take AI now 
because 
that's going to ~ you a l o;. 
So ~ you are interested 
in the whole f ield at all, 
I would advise you strong~ 
to take AI now. 
Figure 1: An argumentative paragraph 
supported affects the choice of expressions at many 
levels. We have marked in italics words that are selected 
in part because of the argumentative function of the 
proposition i  which they appear. For example, saying it 
is very advisable as opposed to it is OK, deciding to add 
strongly and selecting a lot instead of somewhat are all 
decisions motivated by the advisor's goal of convincing 
the student to take AI. 
In previous work in text generation, rhetorical 
schemas (McKeown, 1985) and RST (rhetorical struc- 
lure theory) (Mann & Thompson, 1987) have been 
proposed as operational techniques to produce coherent 
paragraphs. We have found, however, that these tech- 
niques, in their current forms, are not appropriate oad- 
dress the task of generating argumentative paragraphs 
for two main reasons: first, RST relations are too genetic 
to perform argument selection and construct coherent ar- 
gument chains; second, rhetorical relations in both 
theories do not influence directly linguistic realization 
and therefore cannot determine wording decisions of the 
type illustrated inFigure 1. 
We present in this paper a mechanism for planning 
and realizing argumentative t, aragraphs which addresses 
these two shortcomings. In our approach, specific ar- 
gumentative r lations guide both content planning and 
iexieal choice within the clause. Content planning is 
performed using two levels of argumentative relations - 
evaluation functions and topoi (Anscombre & Ducrot, 
1983) to derive content from the underlying knowledge 
base and organize it into coherent argumentative chains. 
Surface realization takes advantage of the output of the 
paragraph stracturer to perform lexical choice at all 
levels of the clause. 
ACRES DE COLING-92, NANTES, 23-28 hol\]'r 1992 6 3 8 PRoc. OF COLING-92, NAm'ES, AUG. 23-28, 1992 
In the rest of the paper, we first review previous 
work in paragraph planning, explaining why existing 
techaiques cannot be used directly in the case of ar- 
gumentative paragraphs. We then present our approach, 
describing file content planner and the surface realization 
component. 
PREVIOUS WORK:  SCHEMAS AND RS F 
In previous work in text generation, two methods 
have emerged to generate coherent paragraph-long texts: 
rhetorical schemas and RST (for Rhetorical Structure 
Theory). 
Schemas (McKeown, 1985) encode conventional pat- 
terns of text StlUCture. A schema is associated with a 
communicative goal and describes how this goal is con- 
ventionally satisfied. For example, the constituency 
schema is used to describe the parts of an object, and the 
process chema (Paris, 1987) is nsed to describe a com- 
plex process. A schema describes a sequence of 
rhetorical predicates where each predicate is either a 
primitive communicative function, which can be full'died 
by a single proposition, or rectursively another schema. 
For example the primitive predicate attributive attributes 
a property to an object. Each predicate is assigned a
semantics in terms of a query to a knowledge base, 
therefore when the schema is traversed, prepositions are 
retrieved from the knowledge base as predicates are in- 
stantiated. The output of a schema traversal is therefore 
a sequence of propositions labeled by the name of the 
rhetorical predicate they instantiate. 
While schemas label each proposition as the instan- 
tiation of a predicate, RST attempts to label the relation 
between propositions. RST (Mann & Thompson, 
1987) was t-u'st introduced as a descriptive theory aiming 
at enmnerating possible rhetodcal relations between dis- 
course segments. RST relations include elaboration, 
anti-thesis, evidence and solutionhood. A relation con- 
nects two text spans, which can be either single proposi- 
tions or recursively embedded rhetorical relations. One 
urgument of the relation is marked as its "nucleus'" 
while the others are the "satellites" and are all optional. 
RST was made operational s a technique for plan- 
ning the structure of paragraphs in (Hovy, 1988a) and 
(Moore & Paris, 1989). The idea is to attach a com- 
manicative intent with each RST relation and to view the 
combining of relations into paragraphs as a planning 
process, decomposing a high-level intention into lower- 
level goals that eventually can be mapped to single 
propositions. The communicative goals associated with 
the leaves of the structure are then used to retrieve the 
content of each proposition fi'om an underlying 
knowledge base. By making the intentional structure of 
a paragraph explicit, this work follows the discourse 
structure theory advanced in (Grosz & Sidner, 1986). 
Note also that, since in RST with planning, the structure 
of paragraphs i dynamically derived, it is possible to 
view schemas as the compilation of RST configurations 
with some information abswacted out, as pointed out in 
(Mann, 1987). 
We found that schemas and RST were not ap- 
propriate for planning and generating argumentative 
paragraphs because argument selection cannot be easily 
performed. Among the types of relations enumerated in 
RST, only two would apply to the analysis of argumen- 
tative paragraphs: evidence and thesis-antithesis. If 
these relations were to be composed into a paragraph 
structure, they would yield a chain of undistinguished 
evidence links. To determine which propositions can 
serve as arguments and how to order them, one needs to 
specify precisely how arguments in the domain combine 
and relate to a conclusion. An RST type of approacli 
cannot be used alone to plan the content of an argumen- 
tative paragraph. Schemas uffer from the same limita- 
tion. 
In place of a generic relation like evidence, we use 
specific argumentative relations called topoi (Anscombre 
& Ducrot, 1983), e.g., the more a class is difficult, the 
less a student wants to take it, to perform content selec- 
tion. The mechanism is detaiUed later in the paper. 
Rhetorical  Relations and Lexical Choice 
While rhettwical schemas or RST have been used to 
determine the content of the paragraph and the ordering 
of the ~opositions, they have not been used to determine 
the surface form of the clause. We have found, however, 
that in argumentative paragraphs, the rhetorical function 
of a proposition affects its wording at many levels. Con- 
sider the following utterances, extracted from our cor- 
pus: 
(1) It requires quite a lot of prograrmning 
(2) It does involve some programming, but nothing 
outrageous. 
Our contention is that either (1) or (2) can be 
generated from the same content as input, but that the 
difference between the two forms is determined by the 
argumentative function of the clause: (1) supports the 
conclusion that a course should not be taken because it
requires a lot of programming, which is time consuming 
and therefore makes the course difficult. In contrast, (2) 
supports the conclusion that the level of programming 
should not affect he decision whether to take the course. 
The amount of programming involved in a course 
can be quantified by considering how many program- 
ming assignments are required and the number of pro- 
gramming projects. The question is then, given this in- 
formation, how to describe this information to a student: 
what level constitutes some programming, quite a lot of 
programming or a not outrageous amount of 
programming? 
Our position is that the mapping from the objective 
information that a course requires two programming as- 
signments to an evaluation that it requires some 
programming isonly partially determined by the content. 
It is also and over all a rhetorical decision. It is because 
we want to suppea certain conclusion that we view and 
Act,s DE COLING-92. NAI'CfES. 23-28 AOI\]T 1992 6 3 9 PROC. OF COLING-92. NANTES, AUO. 23-28. 1992 
evaluate an objective quantity as a lot or some. 
In addition, by looking back at examples (1) and (2), 
we find that this rhetorical decision also affects the 
choice of the main verb: the course requires program- 
ming when the evaluation of the course is negative, 
while it involves programming when the evaluation is 
positive. In (Hovy, 1988b), similar issues of lexical 
choice were also addressed, but different mechanisms 
were used to perform lexical choice and paragraph or- 
ganization. 
This is an instance of the general problem of expres- 
sibility discussed in (Meteer, 1990): RST and schemas in 
their current form do not bridge the gap between rhetori- 
cal relations and surface realization, and as a con- 
sequence, surface realization cannot ake advantage of 
the paragraph organization tomake decisions. 
In earlier work, we have studied the problem of 
generating certain connectives like but, although, 
because or since (Elhadad & McKeown, 1990) and of 
generating adjectives (Elhadad, 1991). In both cases, we 
have found that argumentative features play an important 
role in the selection of appropriate wording. The impor- 
tam point, is that the same argumentative features could 
be used to constrain both the choice of connectives 
between the clause and the choice of adjectives within 
the clause. The particular argumentative features we use 
are inspired from work by (Anscombre & Ducrot, 1983), 
(Bruxelles et al 1989) and (Broxdles & Raccah, 1991). 
In this paper, we show how these argumentative features 
can be generated by a paragraph structurer, and therefore 
serve as a bridge between the rhetorical function of a 
clause and its surface realization. 
OUR APPROACH 
In order to explain how lexical choice within the 
clause can he affected by the rbetorical function of a 
proposition, we must design a text planner that annotates 
the propositions with information about their argumen- 
tative function. In the ADVISOR system, the following 
activities are performed to produce the answer to a 
should-type question: 
1. An expert-system determines whether tile 
course should be taken. 
2. An evaluation system maps observations 
about he course from the knowledge base 
into evaluations that are scalar and context- 
dependenL 
3. The evaluation system finks these evalua- 
tions into argument chains using argumen- 
tative relations called topoi. Topoi relations 
are stored within the propositions as a 
separate f attme. 
4. A paragraph stmcturer selects and or- 
ganizes argumentative chains into an ar- 
gumentative strategy. 
5. A surface realization component maps the 
argumentative strategy into a paragraph, 
relying on a grammar which is sensitive to 
the argumentative nformation stored in the 
propositions. 
An hnportam feature of this approach is that the 
mapping between information i the knowledge base and 
the content of the propositions is performed in two 
stages by two types of argumentative relations: evalua- 
tion functions and topoi. We distinguish between 
evaluation, which is the leap from the observation of an 
objective fact in the knowledge base to a context- 
dependent scalar evaluation, and argumentative r la- 
tions, which only operate on scalar evaluations, and not 
on knowledge-base facts. In contrast, most other text 
planners imply organize propositions directly retrieved 
from the knowledge base. 
Another important feature is that we do not use 
generic rhetorical relations like "anti-thesis" or 
"evidence" but instead specific argumentative relations 
called topoi. Because topoi are gradual inference rules, 
our content planner performs a task similar to generating 
explanations for a rule-based expert system (McKeown 
& Swartout, 1987). But in addition to determining con- 
tent, topoi are also used to influence wording: they are 
added as annotations tothe propositions generated by the 
text planner and are used by the suiface realization com- 
ponent o perform lexical choice. 
In the following sections, we detail how content 
planning is performed and how the grammar takes ad- 
vantage of the argumentative information placed in its 
input o perform lexical choice. 
CONTENT PLANNING 
Our system determines which content can be used to 
generate an answer in two stages using In'st evaluation 
functions then topoi. 
Evaluation Functions 
Evaluation functions are used to map from obser- 
vations of facts in the knowledge base to context~ 
dependent evaluations. They are domain specific and 
rely on the presence of a user-model. An evaluation is
the rating of a knowledge-base entity on a scale. In the 
ADVISOR domain we have identified the relevant scales 
by examining a corpus of transcripts of advising ses- 
sions. We looked at all the adjectives modifying a class 
in these transcripts and classified them into semantic 
categories. The following classes were thns identified 
(details on this analysis are provided in (Elhadad, 
1991)): 
* Goodness 
? Importance 
? Level 
? Difficulty 
? Workload 
ACRES DE COLING-92. NANTES, 23-28 AOt\]T 1992 6 4 0 PRO(:. OF COLING-92. NANTES, AUG. 23-28, 1992 
? Domain: programming and mathematical 
Note that all of these categories are scalar and there- 
fore define a set of dimensions along which a class can 
he evaluated. The task of the evaluation component is to 
rank a course on relevant scales. In the current im- 
plementation, r' mking is binary so a course can be in 
three possible states with respect to each scale: not 
ranked (the scale is not ,active in the current context), + 
(the course is high on the scale) or - (the course is low on 
the scale). In the current slate of the program, there is no 
distiaction between degrees (interesting vs. very 
interesting). 
Rmlking is accomplished by using simple rules 
which determine under which conditiolts objective facts 
stored iu the knowledge b,ase ean become convincing 
evidence for an evaluation. Figure 2 shows three evalua- 
tion rules used in the current system. 
If 
then 
I\[ 
then 
If 
then 
U(user .progra~ning. - - )  & 
K(c la~s .progra~ing-hw > O) 
E(c lase.programmi l ig  +) 
U (user. programlil ing. * ) a 
K (e \[ ass. progranuning hw :- 0 ) 
E ( c I as s, p rogramming  - ) 
U (user .p rogran~ing .?)  & 
K(e lass .programming-hw > 3) 
E (e lass .programming  +) 
Figure 2: Sample valuation rules 
U (user .p rogramming  - )  checks if in the cur- 
rent slate of the user model the system has evidence that 
the user dislikes programming. 
K(c lass .programming-hw > 0) i saquerytothe 
knowledge base to determine whether the class has some 
programming assigmenls. An assertiou of the form 
E ( c las  s. p rogramaning  + ) is a. positive valuation 
of the course Oil tile programming  scale. If none of 
the rules shown in Figure 2 are activated, the 
programming scale will remain on-activated. 
If the first rule is activated, n proposition attributing a 
number of programming assignments to the class is 
added to the paragraph being planned. In addition, this 
content is annotated by an evaluation on the 
programming  scale. Tile output of the evaluation sys- 
tem is therefore a set of propositions annotated by 
evaluations along each of the activated scales. 
Argumentative Relations: Topoi 
Once the course has been evaluated on the activated 
scales, the evaluation system considers relations between 
the scales. We use the notion of topoi as defined in 
(Anscombre & Ducrot, 1983) to describe such relations. 
Topoi are gradual inference rules of the form "the 
more/less X is P, the more/less Y is Q."  Figure 3 shows 
sample topoi used in the ADVISOR system. 
work load  + / d i f f i cu l ty  .; 
work load  ~ / t ime- requ i red  
d i f f i cu l ty  .I / work load  + 
? d i f f i cu l ty  4 / t ime requ i red  
d i f \ [ i cu l ty - ,  / take 
progralltmin9 } / t ime- lequ i red  + 
in teres t  + / take + 
importai~ce h / take + 
Figure 3: Sample topoi nsed in ADVISOR 
Topoi play the role of dletoricM relations ill RST by 
explaining the relation between two propositions ill it 
paragraph. But they are different ill that they mc very 
specific relations ,as opposed to generic relations like 
"anti-thesis" or "evidence". They can therefore he 
used to determine the content of the answer and the order 
in which arguments should be presented. 
But the most in~pomant feature of topoi for our puro 
poses is that they can he related to lexical choice ill a 
natural way. In (Bruxelles et al 1989) ,'rod (Bruxelles & 
Raccah, 1991) it is suggested that lexical items can be 
defined ht p,'wt by their argumentative potential. For 
example, it is part of the definition of the verb "to reo 
quire" as used in our domain, that its subject is 
evaluated oil the scale of difficulty. This argumentative 
connotation explains tile contrast between (3) and (4), ill 
a context where both are addressed to a student who 
enjoys progr, unming: 
(3) ? At least Al requires prograrmning, so it's easy. 
(4) At least AI involves programming, so it's easy. 
The same scales are u~d both in topoi taxi ill our 
lexieal description. They therefore serve `as a bridge be- 
tween the rhetodeal structure of tile p~wagraph and lex- 
iced choice. 
A GRAMMAR SENSIT IVE  TO 
ARGUMENTATIVE  CONSTRAINTS 
The output of the evaluation system is a list of chains 
of acceptable argamentative d rivations upporting tile 
conclusion that a course should be taken or Blot. Each 
proposition in the chain is annotated by a featore AO lbr 
Argumentative Orientation which indicates how it relates 
to the surrounding propositions. Figure 4 shows a 
sample proposition using the notation of fmmtional 
descriptions (FDs) used in fimcfioual unification gram- 
mars. 
This input represents he proposition that AI covers 
(among others) a set of topics in the area of theory 
(namely, logic), and the AO feature indicates that this 
proposition is used as an argument for the conclusion 
that AI is a difficult course, by virtue of the topos 
theoret i ca l  + / d i f f i cu l t  + (the conclusinn 
AcrEs DE COLING-92, NANn..'S, 23-28 ^ our 1992 6 4 1 Paoc. o1: COLING-92, NAm-es, AUCL 23-28, 1992 
(cat lex-verb) 
(alt verbal- lexicon {:index concept) 
{{{concept c-contain) 
(alt contain- lex (:bk-class ao) 
( 
;; Verbs argumentatively marked 
\[({AO) {(scale s-difficultyl 
(carrier c-class) 
(carrier {participants carrier)) 
(orientation +) 
(ao-conveyed lex-verb))) 
{participants carrier} c-class) 
(lex ((ralt ("require" "demand'))))) 
;; Neutral verbs 
((lex ((ralt ('contain" 
"involve')))))))) 
<<other concepts>>))) 
Figure 5: Fragment of the grammar 
((cat relation) 
(name topics-of) 
(roles 
((class ((cat class) 
(name AI)}) 
(topics 
(Icat set} 
(kind ((cat topic))) 
(cardinality I} 
(Intenslon 
((cat relation) 
(name area-of) 
(argument (^ roles topic}) 
(roles I(toplc ((cat topic))) 
(area ((name theory)))) 
(extension 
((cat listl 
(elements ~(((name logic))))))) 
(AO 
({scope 
\[(cat clause) 
(type attributive) 
(participants 
I(carrier {roles class}) 
lattribute ((cat scale))))}) 
(scale ((name theoretical){) 
(orientation +) 
(focus 
{^ scope participants carrier}) 
(scalar 
{^ scope participants attribute} 
(conclusion (+ difficult(AI)))))) 
Figure 4: Input to the grammar 
part of the topos is shown in abbreviation). Details on 
the role of each fields in the AO feature and on the 
representation of quantification are provided in (EI- 
hadad, 1992). 
Because of this AO specification, the grammar will 
choose appropriately realization (5) instead of (6): 
(5) AI requires a lot of programming 
(6) AI involves ome programming. 
The realization component is implemented in FUF, all 
extended functional unification grammar formalism 
which we have implemented (Elhadad, 1990, Elhadad, 
1992). In the grammar we use, lexical choice and syn- 
tactic realization ate interleaved. For example, the 
choice of the verb is handled by the altemation shown in 
Figure 5. In this Figme, the notation a l t  indicates a
disjunction between alternatives; ra l t  indicates a ran- 
dom alternation, and is used to indicate that he grammar 
does not account for the difference between the alter- 
natives; the curly braces notation in pairs of the form 
( (go)  va lue  ) indicates that the go feature is not em- 
bedded in the lexical verb constituent unified with the 
grammar but rather is a top level feature within the 
clause. 
The fragment shown in Figure 5 specifies how the 
grammar can map from an input concept e -conta in  to 
a verb expressing this relation. The grammar for this 
relation contains two branches: in the first branch, the 
verbs "require" and "demand" are described as being 
argumentatively marked on the scale of difficulty. They 
can therefore be selected to project an evaluation on their 
subject. Note that the choice between "require" and 
"demand" is arbitrary, as indicated by the ra l t  con- 
strnct - it is not explained by the grammar. The second 
branch describes the verbs "contain" and "involve" as 
neutral verbs, that 60 not add any connotation. 
When there is an argumentative connotation, the 
grammar specifies which participant in the clause is af- 
fected by the argumentative evaluation (for both verbs in 
the example, the subject of the verb is the entity that 
carries the evaluation). Similar lexical descriptions for 
adjectives are described in (Elhadad, 1991). 
The part of the grammar generating the syntactic 
structure of the clause is inspired both by systemic gram- 
mars ( (Halliday, 1985) and especially (Fawcett, 1987)) 
ACRES DE COLING-92, NANTES, 23-28 AOtT 1992 6 4 2 PRec. OF COLING-92, NANTES, AUG. 2.3-28, 1992 
\[or the semantic features of the input and by HPSG (Pol- 
lard & Sag, 1987) for the overall flow of control. It has 
been extended to account for the flow of argumentative 
information from lexical items to constituents and to the 
clause. For example, inserting an adjective argumen- 
tatively marked as the describer of a noun group creates 
an argumentative orientation feature at the level of the 
noun group which is then percolated to the clause in 
which the noun group is a participant. 
Finally, the clause grammar has been extended with a 
clause complex constituent which determines connective 
selection and clause combining (an extension of 
(McKeown & Elhadad, 1991)). A clause complex is 
represented as an FD with features d i rec t ive  and 
subord inate  (a notion similar to the RST distinction 
between ucleus and satellite). As discussed in (Ethadad 
& McKeown, 1990), there are many different connec- 
lives expressing argumentative r lations. For example 
all of the following connectives can be used to express 
an evidence relation: because, since, therefore, so, as a 
consequence, then. The choice offered to the analyst is 
then: (i) to ignore the differences between such close 
counectives; (ii) to define a single rhetorical relation for 
each connective or (iii) to determine the choice of con- 
nective on other factors than the rhetorical relation alone. 
We adopt his later approach, and conclude that the out- 
put of the pat'agmph structurer must not determine the 
connectives, as is generally done by schema or RST 
bused planners. Instead we take advantage of how our 
text planner labels each proposition with information 
about its rhetorical function to determine which connec- 
tive is most ,appropriate in combination with the other 
pragmatic factors discussed in (Elliadad & McKeown, 
1990). In this paper, we have also explained how the 
argumentative features needed to select connectives are 
broduced by the content planner. 
User Profile: 
Programming + 
Math 
Year Soph 
Interests AI, NLP 
Cb.ss profile (AI): 
Progranm~ing Assignments 3 
Paper AssigIlments 1 
Projects 0 
Topics : Logic \[Math\] , NLP \[AI \] 
Should I take AI? 
AI can be difficult, 
because itrequires alot of work 
and 
it is pretty mathematical, 
but it is an interesting course, 
because it covca's many nip topics. 
and 
it offers lots of programming hws. 
Figure 6: An argumentative paragraph 
Implementat ion  
The content planner is fully implemented. In the 
surface realization component, he clause grammar is 
fully implemented with account fi)r argumentative lea- 
tares in adjectives, verbs and adverbial adjuncts. A 'large 
portion of the grammar covers the determiner sequence 
and how the choice of determiners like "many" ,  
"most" ,  " few"  etc. has an influence ou tile argunlea- 
tative orientation of the close. The grammar for con- 
nectives is separately implemented but not yet merged 
with the rest of the grammar. 
Tile grammar is quite large: the current version in- 
cludes 580 disjunctions; it covers simple and complex 
clauses, interrogation, egation, a complex tense system, 
relative clauses, control and raising, coordination with 
some forms of ellipsis. We have extended FUF by adding 
sophisticated conlrol devices (Elhadad & Robin, 1992), 
making it possible to ha*vile sucl, -large grammars. In 
particular, we are able to deal with tile non-kw~al con- 
straints across constituent boundaries i,nposed by ar- 
gumentative r lations in an efficient way. 
Figure 6 shows the type of paragraphs obtained when 
all the pieces of the surface realization component are 
put together. 
CONCLUSION 
We have described a model for planning argumen- 
tafive paragraphs which can perform content selection 
and which allows the surface realization component to 
adapt lexical choice within each clause to the rhetorical 
function of file clause. The model relies on the fact that 
the same argumentative relations which can he used as 
specific rhetorical relations also participate in the lexicld 
description of verbs, adjectives, adverbs and deter- 
miners. 
Oar model "also distinguishes between two types of 
argumentative relations: evaluative functions and topoi. 
Evaluatiun function retch information from the 
knowledge base and make it scalar and context- 
dependent, while topoi are purely rhetorical relations that 
link scMar propositions together according to the ar- 
gumentative goal of the speaker. This two-stage content 
retrieval mechanism is in coatrast to most existing plan- 
ners which assemble facts directly retrieved from the 
knowledge base, and do not mmsfonn them according to 
the pragmatic ontext (goals of the speaker a*al user 
model). The mec "lmnism is implemented using the FUF 
text generation system. 
Some of the open questions we face are: 
* Deciding whether to use a connective or not. 
? Deciding whether propositions can be left 
implicit and still be recoverable. 
. Combining several independent argumen- 
tative chains and deciding how to order the 
arguments in the combined structure. 
- Acquiring the argumentative lexical descrip- 
Acr~ DE COLING-92. NANTES, 23-28 AOtT 1992 6 4 3 l'koc. OF COL1NG-92, NANrI~s, AUG. 23-28, 1992 
tions we need on a large scale 
? Scaling up the text planning mechanism to
generate s veral paragraphs. 
In particular, when several independent argumen- 
tative chains upport the same conclusion, argumentative 
relations alone cannot determine in which order they 
must be organized. We are currently investigating 
whether argumentative strategies similar to RST 
schemas can be combined with our technique. We are 
also evaluating bow other discourse aspects like topic 
progression can help in the planning of the paragraph. 
Acknowledgments. This work was supported by 
DARPA under contract N00039-84-C-0165, by NSF 
Grant IRT-84-51438 and by ONR Grant N00014-89- 
J-1782. I want to thank Kathy McKeown, Jacques 
Robin and Frank Z. Smadja for helping me write this 
paper and Chaya Ochs for helping with the corpus 
analysis and the implementation of evaluation functions. 
REFERENCES 
Anscombre, J.C. and O., Ducrot. (1983). Philosoplu'e t 
langage. L' argumentation dans la langue. 
Bruxelles: Pierre Mardaga. 
Bruxelles, S. and Raccah P.Y. (1991). Argumentation et 
Semantique: l  parti-pris du lexique. In Acres du 
Colloque 'Enonciation et parti-pris'. Forthcom- 
ing. 
Bruxelles, S., Careaguo, D. and Founder, C. (1989). 
Vers ane construction automatique d s topoi a par- 
tir du lexique. CC AI - Journal for the integrated 
study of Artificial Intelligence cognitive science 
and applied epistemology, 6(4), 309-328. 
Elhadad, M. (1990). Types in Functional Unification 
Grammars. Proceedings of 28th Meeting of the 
ACL (ACL'90). Pittsburgh. 
Ethadad, M. (1991). Generating Adjectives to Express 
the Speaker's Argumentative Intent. Proceedings 
of 9th National Conference on Artificial Intel- 
ligence (AAAI 91). Anaheim. 
Elhadad, Michael. (1992). Using Argumentation to Con- 
trol Lexical Choice: a Functional Unification- 
based approach. Doctoral dissertation, Columbia 
University. 
Elhadad, M. and K,R. McKeown, (1990). Generating 
Connectives. Proceedings of COLING'90 
(Volume 3). Helsinki, Finland. 
Elhadad, M. & Robin, J. (1992). Controlling Content 
Realization with Functional Unification Gram- 
mars. In R. Dale, E. Hovy, D. Roesner and 
O. Stock (Fxl.), Aspects of Automated Natural Lan- 
guage Generation. Springer Verlag. 
Fawcett, R.P. (1987). The semantics ofclause and verb 
for relational processes in English. In Halliday, 
M.A.K. & Fawcett, R.P. (T_,d.), New developments 
in systemic linguistics. London and New York: 
Frances Pinter. 
Gmsz, B. and Sidaer, C. (1986). Attentions, intentions, 
and the structure of discourse. Computational 
Linguistics, 12(3), 175-204. 
Halliday, M.A.K. (1985). An 