  
This paper summarizes the formal ism of Category 
Cooccurrence Restr ict ions (CCRs) and describes two par- 
sing a lgor i thms that  interpret  it. CCRs are Boolean condi- 
t ions on the cooccurrence of categories in local trees 
which al low the s ta tement  of general izat ions which cannot  
be captured in other  current  syntax formal isms. The use of 
CCRs leads to syntact ic  descr ipt ions formulated entirely 
with restr ict ive s tatements .  The paper shows how conven- 
t ional  a lgor i thms for the analysis of context  free languages 
can be adapted to the CCR formal ism. Special  a t tent ion  is 
given to the part  of the parser that  checks the fu l f i l lment  
of logical we l l - fo rmedness  condit ions on trees. 
1. The CCR formal ism 
The CCR formal ism, introduced in Kilbury (1986, 1987), 
has  its origin in General ized Phrase Structure  Grammar 
(GPSG; cf Gazdar et al 1985, henceforth 'GKPS') and is a 
special  type of unif ication grammar (cf Shieber 1986). It 
achieves a more homogeneous structure than GPSG by as-  
signing a central  role to cooccurrence restr ict ions.  The 
immediate dominance rules, l inear precedence s ta tements ,  
and metaru les  of GPSG are el iminated in favor of Category 
Cooccurrence Restr ict ions (CCRs), which are Boolean con- 
dit ions on the cooccurrence of categor ies in local trees 
(LTs, i.e. trees of  depth one). The el iminat ion of metaru les  
(cf Kilbury 1986), which lead to part icular  di f f icult ies in 
parsing with GPSGs, was in fact the immediate mot ivat ion 
for developing and implement ing the formal ism, but its 
main just i f icat ion lies in its capacity to express  general iza-  
t ions which cannot be captured in GPSG or other  present  
formal isms.  
Whi le  reducing the number of descript ive devices in 
GPSG, the formal ism with CCRs retains the restr ict iveness 
of GPSG. A l though it is not intended as a vehicle for the 
implementat ion of other  grammar formal isms,  it is ' tool -  
or iented' in the sense of Shieber (1986) in that  it provides 
a c learer  picture of the relat ion GPSG has to other  formal-  
isms (cf Kilbury 1987). 
T he mot ivat ion for CCRs is analogous to that  for d is t in -  
guishing Immediate Dominance (ID) and Linear Precedence 
(LP) rules in GPSG (of GKPS, pp. 44-50). A context  free 
(CF) rule binds information of two kinds in a s ingle s ta te -  
ment. By separat ing this information in ID and LP rules, 
GPSG is able to state general izat ions of the sort  "A pre- 
cedes B in every LT which contains both as daughters,"  
which cannot be captured in a CF grammar. 
Just  as ID and LP rules capture general izat ions about 
sets  of CF rules (or equivalently, about LTs), CCRs can 
be seen as s tat ing  more abst ract  general izat ions about ID 
rules, which in turn are equivalent to general izat ions of 
the fo l lowing sort  about LTs: 
(1) Any LT with S as its root  must  have A as a daughter.  
(2) No LT with C as a daughter  also has D as a daughter.  
S tatements  such as (1) and (2) are CCRs. CCRs are expres-  
s ions of f i rst  order predicate logic using two primit ive 
predicates, R(a, t) 'el is the root of LT t' and D(eL, t) 'el is 
a daughter  in LT t'. \[1\] CCRs have one of the three forms 
V t: Ix D ~ V t: to Vt: o ::) ix 
where li is a dis junct ion of posit ive l i terals  R(c~, t) and to 
is a schema, whereby the notion of a possible schema is 
defined as fo l lows:  
(a) D(a, t) is of  form ~;  
(b) if ~b is of form to, then (~~) is of form 6~; 
(c) if ~ and :~ are both of form t~, then (~bx)~) is of 
form to, where ? E {V, A, D, =}; 
(d) these are al l  express ions of form to. 
Furthermore, al l  predicates within a CCR have the variable 
t as second argument;  al l  f i rst  arguments  are constants  
des ignat ing categories.  Parentheses may be omit ted fo l low-  
ing the usual conventions in predicate logic. CCRs will be 
normal ly  be wr i t ten in the three forms 
g'  I\[to'\] l  I\[to'\]l I\[to'\]l ix' 
where each occurrence of D(~, t) in to is replaced simply 
by c~ in to', and each occurrence of R(a,  t) in p by a in 
ix'. Using this notation, (1) and (2) may be restated as (3) 
and (4.), respectively: 
(3) S I\[ A \]I 
(4.) I\[ C D ~D \]I 
Let us consider the i l locut ionary force of grammatica l  
statements .  The standard phrase-structure rules of CF 
grammar and s imi lar  formal isms express ly  permit  or l i- 
cense st ructures;  in the terminology of Toulmin (1958) 
such s ta tements  const i tute  warrants that  say "Xs are 
al lowed" (viewed declaratively) or "You can bui ld Xs" 
(viewed procedural ly) for corresponding s t ructures  of type 
X. Grammatical  restrictions, in contrast ,  say "Xs are 
forbidden" or "You may not bui ld Xs." Warrants  and 
restr ic t ions used together  characterize the poss ib le and 
necessary features of l inguist ic s t ructures  and thus in- 
troduce a modal  dimension in the language of grammat ica l  
descript ion. 
Pure CF grammars cons ist  solely of warrants,  while 
GPSG is a mixed system. GPSG categor ies are def ined re- 
str ict ively wi th Feature Cooccurrence Restr ict ions and Fea- 
ture Specif ication Defaults  after  the space of categor ies 
under considerat ion is def ined by the language- independent  
not ion of category i tself ;  propert ies of LTs, however, are 
defined with both warrants  (in the form of ID rules and 
r~mtarules) and with restr ict ions (in the form of LP s ta te -  
ments  and the Feature Instant iat ion Principles). \[2\] 
324 
In ana lovy  to  the def in i t ion  of  ca tegor ies  in GPSG, the 
fo rmal i sm of  CCRs def ines  a language- independent  space 
of  LTs and then  prov ides a l l  descr ip t ive  s ta tements  in the 
fo rm of  res t r i c t ions .  I f  we abandon the fo rmal  d i s t inc t ion  
between ca legor ies  and LTs and represent  the in fo rmat ion  
of  both  w i th  funct iona l  descr ip t ions  (i.e. feature  s t ruc -  
tures)  as in Funct iona l  l ln i f i ca t ion  Grammar  (cf Kay 1985) 
we obta in  a s ing le  type of" in fo rmat iona l  e lement  which  in 
the descr ip ( ions  o f  par t i cu la r  natura l  l anguages  is def ined 
so le ly  w i th  res t r i c t ion .  This paper  re ta ins  the  d i s t inc t ion  
between LTs and categor ies  and t reats  the la t te r  as a toms 
pure ly  for  : ; impl ic i ty o f  p resentat ion .  
CCRs and the LTs to which they app ly  may fo rmal ly  be 
regarded  as the same k ind o f  in fo rmat iona l  e lement .  For 
the cor respond ing  not ion  of' un i f i cat ion  and for  the  ana lys i s  
of" LP s ta tements  as CCRs see Ki lbury (1987); the re fo rmu-  
la t ion  of" I,P , ' ; tatements wi l l  be omi t ted  in the fo l low ing  
sect ions .  
2. An example  o f  CCRs  
GKPS (pp. 47-49) examines  sets  of  s imp le  CF ru les  and 
then  proposes  s t rong ly  equ iva lent  descr ip t ions  in ID/LP 
format .  The. ~ f i r s t  resu l t ing  ID/LP grammar  is g iven in (5): 
(8) ID ru les  LP ru les  
S -> NP, VP AUX ( NP 
S -~ AIIX, NP, VP V ( NP 
VP -> AI lX,  VP NP ( VP 
VP -> V, VP 
VP -> V, NP 
VP ~-> V, NP, VP 
The ID ru les  of  (5) admi t  LTs with the fo l low ing  branches 
(i.e. mother -pa i rs  pairs):  
(6) KS, NP) ,  (S, VP) ,  (S, A t lX ) ,  
(VI' ,  V ) ,  (VP, VP) ,  (VP, A t IX ) ,  (VP, NP) 
It is c lear  that  a daughter  category  {:an cooccur  on ly  w i th  
cer ta in  mot:her categor ies .  Given th is  se t  of  branches ,  th ree  
genera l i za t ions  can be fo rmulated  as CCRs: 
(7) CCR 1: I\[ NP V VP V A l lX  II ( S V VP ) 
CCR 2: I\[ V \]1 VP 
CCR 3: I\[ ~S \]1 
CCR 1 s ta te8  that  any LT w i th  NP, VP, or  AHX as daughter  
n ius t  have S or  VP as i ts  root  category ,  wh i le  CCR 2 re-  
qu i res  LTs w i th  V as a daughter  to have VP as root .  CCR 3 
prevents  S f rom occur r ing  as daughter  in a LT. 
Now cons ider  the Car tes ian  product  o f  the set  o f  
phrasa l  ca tegor ies  {S, VP} - -  exc lud ing  NP, which is not  
expanded in the ID/LP grammar  o f  (5) - -  w i th  the  set  o f  
phrasa l  and lex ica l  ca tegor ies  {S, VP, NP, V, A{IX}. CCR 2 
exc ludes  the branch (S, V)  wh i le  CCR 3 exc ludes  (S, S)  
and (VP, S) .  Thus,  the  set  of  lega l  b ranches  remain ing  
a f te r  the Car tes ian  space  is f i l te red  by the CCRs o f  (7) is 
exact ly  the  set  o f  b ranches  spec i f ied  in (6). 
P roceed ing  in tu rn  f ronl  a g iven root  category ,  cor respon-  
ding res t r i c t ions  appy to the  reoccur rence  o f  daughter  cat -  
egor ies .  The LTs w i th  S as root  can be covered  by a s ing le  
CCR: 
(8) CCR 4: S I\[ NP A VP II 
CCR 4 s ta tes  that  NP and VP are ob l igatory  in any LT 
w i th  S as i ts  root .  Since (S, AHX)  is a lso  a branch,  ALIX 
may opt iona l ly  occur  as daughter  in such  a tree.  
Given the VP expans ions  of  (5), an e lementary  log ica l  
techn ique  employ ing  t ru th  tab les  (of Ki lbury 1986) a l lows  
us to  const ruct  t im three  CCRs of (9), wh ich  taken  to -  
gether  w i th  (7) and (8) admi t  the same set  o f  i?Ts as the 
ID rtt les of  (5): 
(9) CCR 5': 
CCR 6': 
CCR 7': 
VP II At lX  -- ~V \]1 
VP I\[ ALIX D (VP A ~ NP) II 
VP I\[ V D (VP V NP) \]1 
The CCRs of  (9) have been fo rmulated  only  on t i le bas is  
of LTs w i th  VP as root ,  however ,  and there fore  fail  to  cap-  
ture  genera l i za t ions  that  app ly  to a l l  LTs. Any daughter  
ALIX must  have a VP as s i s ter ,  so  CCR 6' }nay be res ta ted  
as two  s imp ler  CCRs, CCR 5 and CCR 7, where  CCR 5 does  
not  depend on the root  category .  Fur t lmrmore,  CCP, 7' can 
be rewr i t ten  as CCR 8 s ince V cannot  be a daughter  of  S. 
The fo l low ing  f inal  set  of CCRs thus  emerges :  
(10) CCR h I1 NP V VP V ALIX II ( S V VP ) 
CCR 2: I\[ V \]1 VP 
CCR 3: I\[ ~S \]1 
CCR 4: S II NP A VP 711 
CCR 5: I\[ AI IX D VP II 
CCR 6: VP I\[ ALIX ~ ~V II 
CCR 7: VP II At lX  7J ~NP \]1 
CCR 8: I\[ V -~ (VP A NP) 31 
The granunar  (:all be extended to cover  a VP dominat ing  
a s ing le  V by s imp ly  e l im inat ing  CCR 8. Moreover,  CCR 6 
can be log ica l ly  con jo ined w i th  CCR 7 and CCR 3 wi th  CCRs 
5 and 8 to fo rm s ingle,  complex  CCRs. 
3. Pars ing  w i th  the  CCR fo rmal i sm 
3.1 An Ear ley -based  char t  parser  
The CCR fo rmal i sm <:an be in terpreted  by a char t  parser  
based  on Shieber 's  (1984) adaptat ion  o f  the Ear ley (1970) 
a lgor i thm to the ID/LP fo rmat  of  GPSG. Mod i f i ca t ions  here 
involve the  CCR fo rmal i sm and deta i l s  o f  Ear ley 's  predic -  
tor.  As noted  above, ca tegor ies  are t reated  as a toms here 
for  s impl i c i ty  o f  p resentat ion .  
I tems,  cor respond ing  to edges  of a chart ,  have the fo rm 
<i, j, A, ~, 13, 0>, where i and j are in tegers  des ignat ing  the 
beg inn ing  and end of  the  edge, A is the root  category  of  
the LT, ~ is t i le s t r ing  o f  ca tegor ies  13l ah'eady ident i f ied  
as daughters  o f  A, 13 is the set  of  ca tegor ies  not  in c~ which 
may be immediate ly  dominated  by A, and 0 is a se t  of  c lauses  
express ing  cond i t ions  that  must  be fu l f i l l ed  in o rder  for  the 
LT to be accepted.  A sentence  is recogn ized i f  i ts  ana lys is  
p roduces  an i tem of  the fo rm <O, n, S, c~, 13, O>, where n is 
the sentence  length  and ? is the empty  c lause  set .  
The a lgor i thm uses  two  bas ic  procedures ,  the pred ic tor  
and the complete}-, in add i t ion  to the scanner ,  which reads 
the next  word  of' the input . s t r ing  and ca l l s  the  o ther  two  
procedures .  The funct ion  o f  the pred ic tor  is to in t roduce  
new act ive edges  in the chart .  I t s  ef f ic iency has been in-  
c reased  through the use  o f  a f i rs t  re la t ion  F and i ts  t ran -  
s i t ive c losure  F + \[411 , which are der ived w i th  the LP ru les  so  
that  <A, B> E F i f f  B can lm the le f t -most  daughter  o f  A in 
some LT. Given an inact ive i tem <j, k, B, % ~, q)>, an ac-  
t ive i tem <j, k, A, B, 13, ~> wi th  <A, B> { F is in t roduced  i f f  
there  is some C such that  <C, A> { F or  e lse  C = A and 
325 
there is an active item (i, j, D, c?, S, o') such that C ~ 
and o' can be reduced (see below) with respect to C. 
The predictor f irst constructs the set ~ of categories 
that may be immediately dominated by A, subtracts {B} 
from it, and then further subtracts the set :( of those cat- 
egories which B may not precede, giving \[3 in the new active 
item. \[6\] A clause set is then constructed as the conjunc- 
tion of all CCRs (stated in simplified conjunctive normal 
form) applying to the members of d~ in a LT with A as 
root. Finally, this clause set is reduced (see below) with re- 
spect to B and the negation of each member of X giving 0. 
The completer extends active edges. Given the inactive 
edge (j, k, B, y, ~, ~7 and the active edge (i, j, A, a, \[3, 0) 
such that B ~ \[3 and \[3' = \[3 \ {B}, it subtracts the subset \[3" 
of categories in tJ' that B cannot precede from 13' giving 
\[3'", reduces 0 with respect to B and the negation of each 
member of \[3", giving 0', and then introduces the new item 
<i, k, A, c?(qB, 13'", o'>. 
Reduction of a clause net 0 with respect to a literal 
tests the consistency of c~ with respect to the conditions 
stated by o and amounts simply to the One-Literal Rule 
in the procedure of Davis and Putnam (cf Chang and Lee 
1973, pp. 63-64.). A clause set 0 is reduced with respect to 
by reducing each clause rc ~ o with respect to ~. The 
latter is accomplished as follows: 
a) If ~ c 7~, then ~ is removed from 0. 
b) If ~ ~ rt and either c? = ~\[3 or ~a = ~, then if 
\[3 = x reduction fails and a is inconsistent with 0, 
and otherwise \[3 is removed from ~. 
The following PROLOG program, which is called with 
reduce_cnf(Literal, CNF, \[,i, RedCNF), 
implements reduction of a clause set in conjunctive normal 
form (CNF): 
:- op(60, fx, ~). / *  '~" binds more strongly than ','. * /  
reduce_cnf(_, \[3, CNF, CNF). 
reduce--cnf(Literal, \[Clause I Clauses\], OIdCNF, RedCNF):- 
reduce-clause(Literal, Clause~ \[:,i, NewClause)~ 
append(OldCNF, NewClause, NewCNF), 
reduce_cnf(Literal, Clauses, NewCNF, RedCNF). 
reduce_clause(_, \['i, \['i, \[:1 ) :- \]. 
reduce_clause(~, \[,i, Clause, \[Clause:\] ). 
reduce_clause(Literal, \[Literal I -- ,i,--, \[,i ) :- !. 
reduce-.clause(~Cat, \[Cat-l, \ [ , i , -  ) :- l, fail. 
reduce=clause(Cat, \[~Cat "1, \ [ \ ] , _  ) :- \[, fail. 
reduce--clause(~,Cat, \[Cat I Lits'l, OIdClause, RedClause) :- 
!, reduce.-clause(~Cat, Lits, OIdClause, RedClause). 
reduce_clause(Cat, \[~Cat I t i ts\] ,  OIdClause, RedClause) :- 
!, reduce_clause(Cat, Lits, OIdClause, RedClause). 
reduce--clause(Lit1, \[Lit2 I Lits,l, OldClause, RedClause) :- 
append(OIdClause, \[Lit2'l, NewClause), 
reduce--clause(Lit1, t its, NewCtause, RedClause). 
3,2 A left -corner parser 
PROLOG implementations of the chart parser described 
above suffer from inefficiency stemming from manipula-- 
tions of the knowledge base during parsing. Such knowledge- 
base manipulations can be more easily avoided in a left- 
corner parser (cf Aho/Hl lman 1972), as reflected in the 
following simplified PROLOG program: 
parse(RCat, \[Word I L1\], L) :- 
lex(Word, Cat), 
left.-corner(Cat, RCat, L1, L). 
left--corner(Cat, Cat, L, L). 
left-corner(Cat, RCat, L1, L) :- 
rule(CatO, \[Cat I Cats\]), 
sisters(Cats, L1, L2I, 
left-corner(CatO, RCat, L2, L). 
sisters(\[,l, L, L). 
sisters(\[Cat I Cats-l, L!, L) :- 
left.-corner(Cat, L1, L2), 
sisters(Cats, L2, L}. 
The variables L, L\], and L2 designate difference lists for 
the input string as in Definite Clause Grammars, while 
RCat is the category assigned to the analyzed string. Lex- 
ical entries are represented in the form lex(W0rd, Cat) and 
rules with rule(LHS, RHS), whereby LH8 is a single category 
and RHS a list of categories. Adaptation of the program to 
the CCR formalism simply amounts to a replacement of  the 
predicate rule as discussed above for the chart parser; the 
predicates left-corner and sisters are augmented with an 
argument for the clause set stating conditions that remain 
to be fulfilled for the phrase currently being analyzed, Per- 
formance is greatly improved by the addition of top-down 
filtering. 
4. References 
Aho, Alfred V. / Ullman, Jeffrey D. (1972): The Theory of  
Parsing, Translation, and Compiling. Volume 1: Parsing. 
Englewood Cliffs, N.J.: Prentice-Hall. 
Chang, Chin-Liang / Lee, Richard Char-Tung (1973): Sym-- 
bollc Logic and Mechanical Theorem Proving. New 
York and London: Academic Press. 
Earley, Jay (1970): "An efficient context-free parsing algo- 
rithm," Communications o f  the ACM 13: 94-102. 
Gazdar, Gerald / Klein, \ [wan / Pullum, Geoffrey / Sag, 
Ivan (1985); Generalized Phrase Structure Grammar. Ox- 
ford: Blackwell. 
Kay, Martin (198S): "Parsing in functional unification gram- 
mar," in D, R. Dowty et al (eds), Natural Language 
Parsing, 251-278, Cambridge et al: Cambridge University 
Press. 
Kilbury, James (1985): "Chart parsing and the Earley algo- 
rithm," in El. Klenk (ed.), Kon~extfrele Sj,n~axen und 
verwandte Systeme, 76-89. Tllbingen: Niemeyer. 
326 
Kilbury, James (1986): "Category reoccurrence restrictions 
and the elimination of metarules," Proceedings of  CO- 
LING 86, 50-55. 
Kilbury, James (1987): "A proposal for modifications in the 
formalism of GPSG," Proceedings o f  the Third Confe- 
rence of  the European Chapter o f  the ACL, 156-159. 
Seiffert, }(oland (1987): "Chart parsing of unification-based 
grammars with ID/LP-rules," LILOG Report 22, IBM 
Deutschland GmbH. 
Shleber, Stuart M. (1984): "Direct parsing of ID/LP gram- 
mars," Linguistics and Philosophy 7: 13S-15a~. 
Shieber, S:tuart M. (1986): An 